
C:\Users\lesle\AppData\Local\Temp\VMBuilds\WS2812_Serial_Library_Test\teensy40\Debug/WS2812_Serial_Library_Test.ino.elf:     file format elf32-littlearm


Disassembly of section .text.progmem:

60000000 <FlexSPI_NOR_Config>:
60000000:	46 43 46 42 00 00 01 56 00 00 00 00 01 01 02 00     FCFB...V........
	...
60000044:	01 04 03 00 00 00 00 00 00 00 00 00 00 00 20 00     .............. .
	...
60000080:	eb 04 18 0a 06 32 04 26 00 00 00 00 00 00 00 00     .....2.&........
60000090:	05 04 04 24 00 00 00 00 00 00 00 00 00 00 00 00     ...$............
	...
600000b0:	06 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
600000d0:	20 04 18 08 00 00 00 00 00 00 00 00 00 00 00 00      ...............
	...
60000100:	d8 04 18 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
60000110:	02 04 18 08 04 20 00 00 00 00 00 00 00 00 00 00     ..... ..........
	...
60000130:	60 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     `...............
	...
600001c0:	00 01 00 00 00 10 00 00 01 00 00 00 00 00 00 00     ................
600001d0:	00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
60000200:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000210:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000220:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000230:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000240:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000250:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000260:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000270:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000280:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000290:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000300:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000310:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000320:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000330:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000340:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000350:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000360:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000370:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000380:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000390:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000400:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000410:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000420:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000430:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000440:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000450:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000460:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000470:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000480:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000490:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000500:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000510:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000520:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000530:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000540:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000550:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000560:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000570:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000580:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000590:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000600:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000610:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000620:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000630:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000640:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000650:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000660:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000670:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000680:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000690:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000700:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000710:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000720:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000730:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000740:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000750:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000760:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000770:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000780:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000790:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000800:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000810:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000820:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000830:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000840:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000850:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000860:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000870:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000880:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000890:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000900:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000910:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000920:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000930:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000940:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000950:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000960:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000970:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000980:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000990:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000aa0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ab0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ac0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ad0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ae0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000af0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ba0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000be0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bf0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ca0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ce0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cf0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000da0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000db0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000dc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000dd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000de0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000df0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ea0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000eb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ec0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ed0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ee0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ef0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fa0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fe0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ff0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................

60001000 <ImageVectorTable>:
60001000:	d1 00 20 40 2c 10 00 60 00 00 00 00 00 00 00 00     .. @,..`........
60001010:	20 10 00 60 00 10 00 60 00 00 00 00 00 00 00 00      ..`...`........

60001020 <BootData>:
60001020:	00 00 00 60 70 5d 00 00 00 00 00 00                 ...`p]......

6000102c <vector_table>:
6000102c:	00 00 01 20 35 10 00 60                             ... 5..`

60001034 <ResetHandler>:
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001034:	4b76      	ldr	r3, [pc, #472]	; (60001210 <ResetHandler+0x1dc>)
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001036:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103a:	4a76      	ldr	r2, [pc, #472]	; (60001214 <ResetHandler+0x1e0>)
	IOMUXC_GPR_GPR16 = 0x00200007;
6000103c:	4876      	ldr	r0, [pc, #472]	; (60001218 <ResetHandler+0x1e4>)
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103e:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001040:	6418      	str	r0, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001042:	4a76      	ldr	r2, [pc, #472]	; (6000121c <ResetHandler+0x1e8>)
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001044:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001046:	4695      	mov	sp, r2
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001048:	4a75      	ldr	r2, [pc, #468]	; (60001220 <ResetHandler+0x1ec>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
6000104a:	f503 3330 	add.w	r3, r3, #180224	; 0x2c000
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
6000104e:	4975      	ldr	r1, [pc, #468]	; (60001224 <ResetHandler+0x1f0>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001050:	2008      	movs	r0, #8
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001052:	428a      	cmp	r2, r1
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001054:	f8c3 0154 	str.w	r0, [r3, #340]	; 0x154
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001058:	d00f      	beq.n	6000107a <ResetHandler+0x46>
	while (dest < dest_end) {
6000105a:	4b73      	ldr	r3, [pc, #460]	; (60001228 <ResetHandler+0x1f4>)
6000105c:	429a      	cmp	r2, r3
6000105e:	d20c      	bcs.n	6000107a <ResetHandler+0x46>
60001060:	43d4      	mvns	r4, r2
60001062:	4608      	mov	r0, r1
60001064:	4423      	add	r3, r4
60001066:	f023 0303 	bic.w	r3, r3, #3
6000106a:	3304      	adds	r3, #4
6000106c:	440b      	add	r3, r1
		*dest++ = *src++;
6000106e:	f850 1b04 	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001072:	4298      	cmp	r0, r3
		*dest++ = *src++;
60001074:	f842 1b04 	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001078:	d1f9      	bne.n	6000106e <ResetHandler+0x3a>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
6000107a:	4a6c      	ldr	r2, [pc, #432]	; (6000122c <ResetHandler+0x1f8>)
6000107c:	496c      	ldr	r1, [pc, #432]	; (60001230 <ResetHandler+0x1fc>)
6000107e:	428a      	cmp	r2, r1
60001080:	d00f      	beq.n	600010a2 <ResetHandler+0x6e>
	while (dest < dest_end) {
60001082:	4b6c      	ldr	r3, [pc, #432]	; (60001234 <ResetHandler+0x200>)
60001084:	429a      	cmp	r2, r3
60001086:	d20c      	bcs.n	600010a2 <ResetHandler+0x6e>
60001088:	43d4      	mvns	r4, r2
6000108a:	4608      	mov	r0, r1
6000108c:	4423      	add	r3, r4
6000108e:	f023 0303 	bic.w	r3, r3, #3
60001092:	3304      	adds	r3, #4
60001094:	440b      	add	r3, r1
		*dest++ = *src++;
60001096:	f850 1b04 	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
6000109a:	4298      	cmp	r0, r3
		*dest++ = *src++;
6000109c:	f842 1b04 	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
600010a0:	d1f9      	bne.n	60001096 <ResetHandler+0x62>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010a2:	4a65      	ldr	r2, [pc, #404]	; (60001238 <ResetHandler+0x204>)
600010a4:	4b65      	ldr	r3, [pc, #404]	; (6000123c <ResetHandler+0x208>)
600010a6:	429a      	cmp	r2, r3
600010a8:	d20b      	bcs.n	600010c2 <ResetHandler+0x8e>
600010aa:	43d0      	mvns	r0, r2
600010ac:	4611      	mov	r1, r2
		*dest++ = 0;
600010ae:	2400      	movs	r4, #0
600010b0:	4403      	add	r3, r0
600010b2:	f023 0303 	bic.w	r3, r3, #3
600010b6:	3304      	adds	r3, #4
600010b8:	4413      	add	r3, r2
600010ba:	f841 4b04 	str.w	r4, [r1], #4
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010be:	428b      	cmp	r3, r1
600010c0:	d1fb      	bne.n	600010ba <ResetHandler+0x86>
	memory_copy(&_stext, &_stextload, &_etext);
	memory_copy(&_sdata, &_sdataload, &_edata);
	memory_clear(&_sbss, &_ebss);

	// enable FPU
	SCB_CPACR = 0x00F00000;
600010c2:	4a5f      	ldr	r2, [pc, #380]	; (60001240 <ResetHandler+0x20c>)
600010c4:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
600010c8:	4b5e      	ldr	r3, [pc, #376]	; (60001244 <ResetHandler+0x210>)
600010ca:	6011      	str	r1, [r2, #0]
600010cc:	f503 7130 	add.w	r1, r3, #704	; 0x2c0
600010d0:	4a5d      	ldr	r2, [pc, #372]	; (60001248 <ResetHandler+0x214>)

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
600010d2:	f843 2f04 	str.w	r2, [r3, #4]!
600010d6:	4299      	cmp	r1, r3
600010d8:	d1fb      	bne.n	600010d2 <ResetHandler+0x9e>
600010da:	4b5c      	ldr	r3, [pc, #368]	; (6000124c <ResetHandler+0x218>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600010dc:	2180      	movs	r1, #128	; 0x80
600010de:	4a5c      	ldr	r2, [pc, #368]	; (60001250 <ResetHandler+0x21c>)
600010e0:	f803 1b01 	strb.w	r1, [r3], #1
600010e4:	4293      	cmp	r3, r2
600010e6:	d1fb      	bne.n	600010e0 <ResetHandler+0xac>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600010e8:	4c5a      	ldr	r4, [pc, #360]	; (60001254 <ResetHandler+0x220>)
600010ea:	f04f 3780 	mov.w	r7, #2155905152	; 0x80808080
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600010ee:	4e5a      	ldr	r6, [pc, #360]	; (60001258 <ResetHandler+0x224>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010f0:	f04f 32ff 	mov.w	r2, #4294967295
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010f4:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 60001298 <ResetHandler+0x264>
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
600010f8:	2500      	movs	r5, #0

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600010fa:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 6000129c <ResetHandler+0x268>
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600010fe:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 600012a0 <ResetHandler+0x26c>
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
60001102:	4b56      	ldr	r3, [pc, #344]	; (6000125c <ResetHandler+0x228>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001104:	4942      	ldr	r1, [pc, #264]	; (60001210 <ResetHandler+0x1dc>)
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
60001106:	f8c3 a000 	str.w	sl, [r3]
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
6000110a:	f8c4 7104 	str.w	r7, [r4, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000110e:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001112:	f8c4 70f4 	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001116:	f8c4 80f0 	str.w	r8, [r4, #240]	; 0xf0
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
6000111a:	69f3      	ldr	r3, [r6, #28]
6000111c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
60001120:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001124:	61f3      	str	r3, [r6, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
60001126:	6a73      	ldr	r3, [r6, #36]	; 0x24
60001128:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
6000112c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001130:	6273      	str	r3, [r6, #36]	; 0x24

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001132:	668a      	str	r2, [r1, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
60001134:	66ca      	str	r2, [r1, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001136:	670a      	str	r2, [r1, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001138:	674a      	str	r2, [r1, #116]	; 0x74
	// must enable PRINT_DEBUG_STUFF in debug/print.h
	printf_debug_init();
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
6000113a:	f000 f8b3 	bl	600012a4 <configure_cache>
extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000113e:	4a48      	ldr	r2, [pc, #288]	; (60001260 <ResetHandler+0x22c>)
60001140:	2063      	movs	r0, #99	; 0x63
	SYST_CVR = 0;
60001142:	4b48      	ldr	r3, [pc, #288]	; (60001264 <ResetHandler+0x230>)
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
60001144:	4948      	ldr	r1, [pc, #288]	; (60001268 <ResetHandler+0x234>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001146:	6010      	str	r0, [r2, #0]
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001148:	2203      	movs	r2, #3
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
6000114a:	601d      	str	r5, [r3, #0]
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
6000114c:	f8ca 1038 	str.w	r1, [sl, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001150:	f843 2c08 	str.w	r2, [r3, #-8]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001154:	4945      	ldr	r1, [pc, #276]	; (6000126c <ResetHandler+0x238>)
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001156:	4a46      	ldr	r2, [pc, #280]	; (60001270 <ResetHandler+0x23c>)

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
60001158:	4846      	ldr	r0, [pc, #280]	; (60001274 <ResetHandler+0x240>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000115a:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000115e:	680b      	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001160:	4a45      	ldr	r2, [pc, #276]	; (60001278 <ResetHandler+0x244>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001162:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
60001166:	f8ca 003c 	str.w	r0, [sl, #60]	; 0x3c
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000116a:	4844      	ldr	r0, [pc, #272]	; (6000127c <ResetHandler+0x248>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000116c:	600b      	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000116e:	6813      	ldr	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001170:	4943      	ldr	r1, [pc, #268]	; (60001280 <ResetHandler+0x24c>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001172:	f043 0301 	orr.w	r3, r3, #1
60001176:	6013      	str	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001178:	6803      	ldr	r3, [r0, #0]
6000117a:	600b      	str	r3, [r1, #0]
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
	configure_systick();
	usb_pll_start();	
6000117c:	f000 f90e 	bl	6000139c <usb_pll_start>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001180:	f8c4 7104 	str.w	r7, [r4, #260]	; 0x104
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001184:	483f      	ldr	r0, [pc, #252]	; (60001284 <ResetHandler+0x250>)

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001186:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000118a:	f8c4 70f4 	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000118e:	f8c4 80f0 	str.w	r8, [r4, #240]	; 0xf0
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001192:	f000 fadd 	bl	60001750 <__set_arm_clock_veneer>
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?
60001196:	bf00      	nop
60001198:	bf00      	nop
6000119a:	bf00      	nop
6000119c:	bf00      	nop

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000119e:	6ef1      	ldr	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
600011a0:	4a39      	ldr	r2, [pc, #228]	; (60001288 <ResetHandler+0x254>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
600011a2:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
	PIT_TCTRL1 = 0;
	PIT_TCTRL2 = 0;
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011a6:	4b39      	ldr	r3, [pc, #228]	; (6000128c <ResetHandler+0x258>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
600011a8:	66f1      	str	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
600011aa:	6015      	str	r5, [r2, #0]
	PIT_TCTRL0 = 0;
600011ac:	f8c2 5108 	str.w	r5, [r2, #264]	; 0x108
	PIT_TCTRL1 = 0;
600011b0:	f8c2 5118 	str.w	r5, [r2, #280]	; 0x118
	PIT_TCTRL2 = 0;
600011b4:	f8c2 5128 	str.w	r5, [r2, #296]	; 0x128
	PIT_TCTRL3 = 0;
600011b8:	f8c2 5138 	str.w	r5, [r2, #312]	; 0x138

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
600011be:	07d2      	lsls	r2, r2, #31
600011c0:	d408      	bmi.n	600011d4 <ResetHandler+0x1a0>
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011c2:	f642 6215 	movw	r2, #11797	; 0x2e15
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
600011c6:	4932      	ldr	r1, [pc, #200]	; (60001290 <ResetHandler+0x25c>)
600011c8:	6559      	str	r1, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011ca:	651a      	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
600011cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
600011ce:	f042 0201 	orr.w	r2, r2, #1
600011d2:	639a      	str	r2, [r3, #56]	; 0x38
	}
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600011d4:	4a2d      	ldr	r2, [pc, #180]	; (6000128c <ResetHandler+0x258>)
600011d6:	4c2f      	ldr	r4, [pc, #188]	; (60001294 <ResetHandler+0x260>)
600011d8:	6893      	ldr	r3, [r2, #8]
600011da:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
600011de:	6093      	str	r3, [r2, #8]

#ifdef ARDUINO_TEENSY41
	configure_external_ram();
#endif
	startup_early_hook();
600011e0:	f000 fabe 	bl	60001760 <__startup_early_hook_veneer>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
600011e4:	6823      	ldr	r3, [r4, #0]
	while (millis() < 20) ; // wait at least 20ms before starting USB
600011e6:	2b13      	cmp	r3, #19
600011e8:	d9fc      	bls.n	600011e4 <ResetHandler+0x1b0>
	usb_init();
600011ea:	f000 f997 	bl	6000151c <usb_init>
	analog_init();
600011ee:	f000 fa0b 	bl	60001608 <analog_init>
	pwm_init();
600011f2:	f000 fab9 	bl	60001768 <__pwm_init_veneer>
	tempmon_init();
600011f6:	f000 f903 	bl	60001400 <tempmon_init>

	startup_late_hook();
600011fa:	f000 faa1 	bl	60001740 <__startup_late_hook_veneer>
600011fe:	6823      	ldr	r3, [r4, #0]
	while (millis() < 300) ; // wait at least 300ms before calling user code
60001200:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
60001204:	d3fb      	bcc.n	600011fe <ResetHandler+0x1ca>
	//printf("before C++ constructors\n");
	__libc_init_array();
60001206:	f000 fab7 	bl	60001778 <____libc_init_array_veneer>
	//printf("after C++ constructors\n");
	//printf("before setup\n");
	main();
6000120a:	f000 faa5 	bl	60001758 <__main_veneer>
6000120e:	e7fe      	b.n	6000120e <ResetHandler+0x1da>
60001210:	400ac000 	.word	0x400ac000
60001214:	aaaaaaab 	.word	0xaaaaaaab
60001218:	00200007 	.word	0x00200007
6000121c:	20078000 	.word	0x20078000
60001220:	00000000 	.word	0x00000000
60001224:	60001790 	.word	0x60001790
60001228:	00003970 	.word	0x00003970
6000122c:	20000000 	.word	0x20000000
60001230:	60005104 	.word	0x60005104
60001234:	20000c70 	.word	0x20000c70
60001238:	20000c70 	.word	0x20000c70
6000123c:	200032c0 	.word	0x200032c0
60001240:	e000ed88 	.word	0xe000ed88
60001244:	200013fc 	.word	0x200013fc
60001248:	000014dd 	.word	0x000014dd
6000124c:	e000e400 	.word	0xe000e400
60001250:	e000e4a0 	.word	0xe000e4a0
60001254:	400d8000 	.word	0x400d8000
60001258:	400fc000 	.word	0x400fc000
6000125c:	e000ed08 	.word	0xe000ed08
60001260:	e000e014 	.word	0xe000e014
60001264:	e000e018 	.word	0xe000e018
60001268:	00002759 	.word	0x00002759
6000126c:	e000edfc 	.word	0xe000edfc
60001270:	20200000 	.word	0x20200000
60001274:	0000275d 	.word	0x0000275d
60001278:	e0001000 	.word	0xe0001000
6000127c:	e0001004 	.word	0xe0001004
60001280:	20000e84 	.word	0x20000e84
60001284:	23c34600 	.word	0x23c34600
60001288:	40084000 	.word	0x40084000
6000128c:	400d4000 	.word	0x400d4000
60001290:	56c00000 	.word	0x56c00000
60001294:	20000e8c 	.word	0x20000e8c
60001298:	20001400 	.word	0x20001400
6000129c:	2018101b 	.word	0x2018101b
600012a0:	13110d0c 	.word	0x13110d0c

600012a4 <configure_cache>:
#define SIZE_2G		(SCB_MPU_RASR_SIZE(30) | SCB_MPU_RASR_ENABLE)
#define SIZE_4G		(SCB_MPU_RASR_SIZE(31) | SCB_MPU_RASR_ENABLE)
#define REGION(n)	(SCB_MPU_RBAR_REGION(n) | SCB_MPU_RBAR_VALID)

FLASHMEM void configure_cache(void)
{
600012a4:	b5f0      	push	{r4, r5, r6, r7, lr}
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600012a6:	4a28      	ldr	r2, [pc, #160]	; (60001348 <configure_cache+0xa4>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600012a8:	2000      	movs	r0, #0

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600012aa:	4b28      	ldr	r3, [pc, #160]	; (6000134c <configure_cache+0xa8>)
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600012ac:	f04f 0c10 	mov.w	ip, #16
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600012b0:	4c27      	ldr	r4, [pc, #156]	; (60001350 <configure_cache+0xac>)

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600012b2:	2711      	movs	r7, #17

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600012b4:	f8df e0d8 	ldr.w	lr, [pc, #216]	; 60001390 <configure_cache+0xec>
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600012b8:	2612      	movs	r6, #18
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600012ba:	6020      	str	r0, [r4, #0]
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600012bc:	2501      	movs	r5, #1
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600012be:	f8c2 c000 	str.w	ip, [r2]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600012c2:	f8c3 e000 	str.w	lr, [r3]
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600012c6:	6017      	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600012c8:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 60001394 <configure_cache+0xf0>

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600012cc:	4f21      	ldr	r7, [pc, #132]	; (60001354 <configure_cache+0xb0>)
	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600012ce:	f8c3 e000 	str.w	lr, [r3]

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600012d2:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600012d4:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600012d6:	4e20      	ldr	r6, [pc, #128]	; (60001358 <configure_cache+0xb4>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600012d8:	4f20      	ldr	r7, [pc, #128]	; (6000135c <configure_cache+0xb8>)
	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600012da:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600012dc:	4920      	ldr	r1, [pc, #128]	; (60001360 <configure_cache+0xbc>)
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600012de:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600012e0:	4e20      	ldr	r6, [pc, #128]	; (60001364 <configure_cache+0xc0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600012e2:	f041 0115 	orr.w	r1, r1, #21

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600012e6:	4f20      	ldr	r7, [pc, #128]	; (60001368 <configure_cache+0xc4>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600012e8:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600012ea:	601f      	str	r7, [r3, #0]
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600012ec:	f507 3740 	add.w	r7, r7, #196608	; 0x30000

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600012f0:	4e1e      	ldr	r6, [pc, #120]	; (6000136c <configure_cache+0xc8>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600012f2:	6011      	str	r1, [r2, #0]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600012f4:	3702      	adds	r7, #2

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600012f6:	601e      	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600012f8:	f8df e09c 	ldr.w	lr, [pc, #156]	; 60001398 <configure_cache+0xf4>
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600012fc:	4e1c      	ldr	r6, [pc, #112]	; (60001370 <configure_cache+0xcc>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600012fe:	491d      	ldr	r1, [pc, #116]	; (60001374 <configure_cache+0xd0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001300:	f8c2 e000 	str.w	lr, [r2]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001304:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001306:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001308:	4f1b      	ldr	r7, [pc, #108]	; (60001378 <configure_cache+0xd4>)

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
6000130a:	6019      	str	r1, [r3, #0]

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
6000130c:	4e1b      	ldr	r6, [pc, #108]	; (6000137c <configure_cache+0xd8>)

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000130e:	491c      	ldr	r1, [pc, #112]	; (60001380 <configure_cache+0xdc>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001310:	6017      	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001312:	601e      	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;
60001314:	4f1b      	ldr	r7, [pc, #108]	; (60001384 <configure_cache+0xe0>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001316:	6011      	str	r1, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001318:	4e1b      	ldr	r6, [pc, #108]	; (60001388 <configure_cache+0xe4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
6000131a:	491c      	ldr	r1, [pc, #112]	; (6000138c <configure_cache+0xe8>)

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;
6000131c:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000131e:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001320:	6019      	str	r1, [r3, #0]

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001322:	6025      	str	r5, [r4, #0]

	// cache enable, ARM DDI0403E, pg 628
	asm("dsb");
60001324:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001328:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
6000132c:	f8c3 01b0 	str.w	r0, [r3, #432]	; 0x1b0

	asm("dsb");
60001330:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001334:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001338:	f852 3c88 	ldr.w	r3, [r2, #-136]
6000133c:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
60001340:	f842 3c88 	str.w	r3, [r2, #-136]
60001344:	bdf0      	pop	{r4, r5, r6, r7, pc}
60001346:	bf00      	nop
60001348:	e000ed9c 	.word	0xe000ed9c
6000134c:	e000eda0 	.word	0xe000eda0
60001350:	e000ed94 	.word	0xe000ed94
60001354:	00100009 	.word	0x00100009
60001358:	00200013 	.word	0x00200013
6000135c:	07020021 	.word	0x07020021
60001360:	200032c0 	.word	0x200032c0
60001364:	20000014 	.word	0x20000014
60001368:	13080025 	.word	0x13080025
6000136c:	10000009 	.word	0x10000009
60001370:	40000017 	.word	0x40000017
60001374:	13100033 	.word	0x13100033
60001378:	60000018 	.word	0x60000018
6000137c:	070b002f 	.word	0x070b002f
60001380:	70000019 	.word	0x70000019
60001384:	170b0037 	.word	0x170b0037
60001388:	7000001a 	.word	0x7000001a
6000138c:	130b002f 	.word	0x130b002f
60001390:	1000003f 	.word	0x1000003f
60001394:	03080025 	.word	0x03080025
60001398:	20200016 	.word	0x20200016

6000139c <usb_pll_start>:

#endif // ARDUINO_TEENSY41


FLASHMEM void usb_pll_start()
{
6000139c:	b4f0      	push	{r4, r5, r6, r7}
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000139e:	4a17      	ldr	r2, [pc, #92]	; (600013fc <usb_pll_start+0x60>)
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
600013a0:	2740      	movs	r7, #64	; 0x40
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
600013a2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
600013a6:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
600013aa:	f44f 5500 	mov.w	r5, #8192	; 0x2000
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
600013ae:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
600013b2:	f243 0042 	movw	r0, #12354	; 0x3042


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
600013b6:	6913      	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
600013b8:	f013 0f02 	tst.w	r3, #2
600013bc:	d006      	beq.n	600013cc <usb_pll_start+0x30>
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
600013be:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
600013c0:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
600013c2:	6190      	str	r0, [r2, #24]


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
600013c4:	6913      	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
600013c6:	f013 0f02 	tst.w	r3, #2
600013ca:	d1f8      	bne.n	600013be <usb_pll_start+0x22>
				CCM_ANALOG_PLL_USB1_DIV_SELECT |		// use 480 MHz
				CCM_ANALOG_PLL_USB1_ENABLE |			// disable
				CCM_ANALOG_PLL_USB1_EN_USB_CLKS;		// disable usb
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
600013cc:	f413 5f00 	tst.w	r3, #8192	; 0x2000
600013d0:	d101      	bne.n	600013d6 <usb_pll_start+0x3a>
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
600013d2:	6155      	str	r5, [r2, #20]
			continue;
600013d4:	e7ef      	b.n	600013b6 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
600013d6:	f413 5f80 	tst.w	r3, #4096	; 0x1000
600013da:	d101      	bne.n	600013e0 <usb_pll_start+0x44>
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
600013dc:	6156      	str	r6, [r2, #20]
			continue;
600013de:	e7ea      	b.n	600013b6 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
600013e0:	2b00      	cmp	r3, #0
600013e2:	dae8      	bge.n	600013b6 <usb_pll_start+0x1a>
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
600013e4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
600013e8:	d001      	beq.n	600013ee <usb_pll_start+0x52>
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
600013ea:	6191      	str	r1, [r2, #24]
			continue;
600013ec:	e7e3      	b.n	600013b6 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
600013ee:	065b      	lsls	r3, r3, #25
600013f0:	d401      	bmi.n	600013f6 <usb_pll_start+0x5a>
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
600013f2:	6157      	str	r7, [r2, #20]
			continue;
600013f4:	e7df      	b.n	600013b6 <usb_pll_start+0x1a>
		}
		return; // everything is as it should be  :-)
	}
}
600013f6:	bcf0      	pop	{r4, r5, r6, r7}
600013f8:	4770      	bx	lr
600013fa:	bf00      	nop
600013fc:	400d8000 	.word	0x400d8000

60001400 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001400:	4a3b      	ldr	r2, [pc, #236]	; (600014f0 <tempmon_init+0xf0>)
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001402:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001406:	493b      	ldr	r1, [pc, #236]	; (600014f4 <tempmon_init+0xf4>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001408:	2000      	movs	r0, #0
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
6000140a:	6813      	ldr	r3, [r2, #0]
  asm volatile ("dsb":::"memory");
  while (1) asm ("wfi");
}

FLASHMEM void tempmon_init(void)
{
6000140c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
6000140e:	f023 0301 	bic.w	r3, r3, #1

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001412:	2403      	movs	r4, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001414:	f8df e100 	ldr.w	lr, [pc, #256]	; 60001518 <tempmon_init+0x118>
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001418:	6013      	str	r3, [r2, #0]

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
6000141a:	f8c2 4090 	str.w	r4, [r2, #144]	; 0x90
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
6000141e:	f8d1 30e0 	ldr.w	r3, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
60001422:	4f35      	ldr	r7, [pc, #212]	; (600014f8 <tempmon_init+0xf8>)
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001424:	b2dd      	uxtb	r5, r3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001426:	f3c3 240b 	ubfx	r4, r3, #8, #12
6000142a:	4e34      	ldr	r6, [pc, #208]	; (600014fc <tempmon_init+0xfc>)
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
6000142c:	ebc4 5313 	rsb	r3, r4, r3, lsr #20
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001430:	ee07 5a90 	vmov	s15, r5
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001434:	f1a5 0155 	sub.w	r1, r5, #85	; 0x55
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001438:	f8ce 5000 	str.w	r5, [lr]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
6000143c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001440:	eb03 0583 	add.w	r5, r3, r3, lsl #2
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001444:	ee07 4a90 	vmov	s15, r4
60001448:	fb03 f101 	mul.w	r1, r3, r1
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
6000144c:	603b      	str	r3, [r7, #0]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000144e:	eb03 1383 	add.w	r3, r3, r3, lsl #6
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001452:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001456:	ee07 1a90 	vmov	s15, r1
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000145a:	1b49      	subs	r1, r1, r5
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
6000145c:	ee77 6a66 	vsub.f32	s13, s14, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001460:	eeb8 7a67 	vcvt.f32.u32	s14, s15
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001464:	4d26      	ldr	r5, [pc, #152]	; (60001500 <tempmon_init+0x100>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001466:	ee07 1a90 	vmov	s15, r1
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000146a:	440b      	add	r3, r1
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
6000146c:	edc5 6a00 	vstr	s13, [r5]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001470:	eef8 7a67 	vcvt.f32.u32	s15, s15
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001474:	6034      	str	r4, [r6, #0]
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001476:	eec7 5a26 	vdiv.f32	s11, s14, s13
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
6000147a:	4e22      	ldr	r6, [pc, #136]	; (60001504 <tempmon_init+0x104>)
6000147c:	6815      	ldr	r5, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000147e:	4922      	ldr	r1, [pc, #136]	; (60001508 <tempmon_init+0x108>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001480:	4c22      	ldr	r4, [pc, #136]	; (6000150c <tempmon_init+0x10c>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001482:	ee87 6aa6 	vdiv.f32	s12, s15, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001486:	ee07 3a90 	vmov	s15, r3
6000148a:	4b21      	ldr	r3, [pc, #132]	; (60001510 <tempmon_init+0x110>)
6000148c:	f8c6 3140 	str.w	r3, [r6, #320]	; 0x140
60001490:	eef8 7a67 	vcvt.f32.u32	s15, s15
60001494:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001498:	ee75 5a85 	vadd.f32	s11, s11, s10
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000149c:	ee76 6a05 	vadd.f32	s13, s12, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600014a0:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600014a4:	eefc 6ae6 	vcvt.u32.f32	s13, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600014a8:	ee15 3a90 	vmov	r3, s11
600014ac:	ea45 5303 	orr.w	r3, r5, r3, lsl #20
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600014b0:	ee16 5a90 	vmov	r5, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600014b4:	ee77 7a05 	vadd.f32	s15, s14, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600014b8:	6013      	str	r3, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600014ba:	ea01 4105 	and.w	r1, r1, r5, lsl #16
600014be:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600014c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600014c6:	430b      	orrs	r3, r1
600014c8:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600014cc:	ee17 3a90 	vmov	r3, s15
600014d0:	f8d2 1110 	ldr.w	r1, [r2, #272]	; 0x110
600014d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
600014d8:	430b      	orrs	r3, r1
600014da:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
600014de:	6813      	ldr	r3, [r2, #0]
600014e0:	f043 0302 	orr.w	r3, r3, #2
600014e4:	6013      	str	r3, [r2, #0]

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600014e6:	7020      	strb	r0, [r4, #0]
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
600014e8:	4b0a      	ldr	r3, [pc, #40]	; (60001514 <tempmon_init+0x114>)
600014ea:	2201      	movs	r2, #1
600014ec:	601a      	str	r2, [r3, #0]
600014ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
600014f0:	400d8180 	.word	0x400d8180
600014f4:	401f4400 	.word	0x401f4400
600014f8:	20000e98 	.word	0x20000e98
600014fc:	20000e9c 	.word	0x20000e9c
60001500:	20000e94 	.word	0x20000e94
60001504:	20001400 	.word	0x20001400
60001508:	0fff0000 	.word	0x0fff0000
6000150c:	e000e440 	.word	0xe000e440
60001510:	000015b9 	.word	0x000015b9
60001514:	e000e108 	.word	0xe000e108
60001518:	20000e90 	.word	0x20000e90

6000151c <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
6000151c:	4b30      	ldr	r3, [pc, #192]	; (600015e0 <usb_init+0xc4>)
6000151e:	f640 7261 	movw	r2, #3937	; 0xf61

static void run_callbacks(endpoint_t *ep);


FLASHMEM void usb_init(void)
{
60001522:	b570      	push	{r4, r5, r6, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001524:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001528:	f240 4504 	movw	r5, #1028	; 0x404
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
6000152c:	f000 f90c 	bl	60001748 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001530:	492c      	ldr	r1, [pc, #176]	; (600015e4 <usb_init+0xc8>)
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001532:	482d      	ldr	r0, [pc, #180]	; (600015e8 <usb_init+0xcc>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001534:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001538:	4c2c      	ldr	r4, [pc, #176]	; (600015ec <usb_init+0xd0>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000153a:	f042 0203 	orr.w	r2, r2, #3
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
6000153e:	4b2c      	ldr	r3, [pc, #176]	; (600015f0 <usb_init+0xd4>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001540:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001544:	f8c0 5160 	str.w	r5, [r0, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001548:	6822      	ldr	r2, [r4, #0]
6000154a:	4013      	ands	r3, r2
6000154c:	b91b      	cbnz	r3, 60001556 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
6000154e:	f8d0 31a8 	ldr.w	r3, [r0, #424]	; 0x1a8
60001552:	079a      	lsls	r2, r3, #30
60001554:	d01a      	beq.n	6000158c <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001556:	4b24      	ldr	r3, [pc, #144]	; (600015e8 <usb_init+0xcc>)
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001558:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
6000155c:	4a23      	ldr	r2, [pc, #140]	; (600015ec <usb_init+0xd0>)
6000155e:	6351      	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001560:	461a      	mov	r2, r3
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001562:	f8d3 1140 	ldr.w	r1, [r3, #320]	; 0x140
60001566:	f041 0102 	orr.w	r1, r1, #2
6000156a:	f8c3 1140 	str.w	r1, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
6000156e:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001572:	079b      	lsls	r3, r3, #30
60001574:	d4fb      	bmi.n	6000156e <usb_init+0x52>
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001576:	f44f 3000 	mov.w	r0, #131072	; 0x20000
6000157a:	491e      	ldr	r1, [pc, #120]	; (600015f4 <usb_init+0xd8>)
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
6000157c:	4b1b      	ldr	r3, [pc, #108]	; (600015ec <usb_init+0xd0>)
6000157e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001582:	6008      	str	r0, [r1, #0]
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001584:	2019      	movs	r0, #25
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001586:	639a      	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001588:	f000 f8d6 	bl	60001738 <__delay_veneer>
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000158c:	4d1a      	ldr	r5, [pc, #104]	; (600015f8 <usb_init+0xdc>)
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
6000158e:	2200      	movs	r2, #0
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001590:	4b16      	ldr	r3, [pc, #88]	; (600015ec <usb_init+0xd0>)
60001592:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001596:	4c14      	ldr	r4, [pc, #80]	; (600015e8 <usb_init+0xcc>)
60001598:	260a      	movs	r6, #10
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
6000159a:	6399      	str	r1, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000159c:	4628      	mov	r0, r5
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
6000159e:	601a      	str	r2, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600015a0:	4611      	mov	r1, r2
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600015a2:	f8c4 61a8 	str.w	r6, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600015a6:	f44f 7220 	mov.w	r2, #640	; 0x280
600015aa:	f000 f8e1 	bl	60001770 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600015ae:	f44f 0681 	mov.w	r6, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
600015b2:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600015b6:	f240 1343 	movw	r3, #323	; 0x143
600015ba:	4a10      	ldr	r2, [pc, #64]	; (600015fc <usb_init+0xe0>)
600015bc:	4910      	ldr	r1, [pc, #64]	; (60001600 <usb_init+0xe4>)
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600015be:	602e      	str	r6, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
600015c0:	6428      	str	r0, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
600015c2:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
600015c6:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600015ca:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
600015ce:	4a0d      	ldr	r2, [pc, #52]	; (60001604 <usb_init+0xe8>)
600015d0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
600015d4:	2301      	movs	r3, #1
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
600015d6:	6011      	str	r1, [r2, #0]
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
600015d8:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
600015dc:	bd70      	pop	{r4, r5, r6, pc}
600015de:	bf00      	nop
600015e0:	400d8000 	.word	0x400d8000
600015e4:	400fc000 	.word	0x400fc000
600015e8:	402e0000 	.word	0x402e0000
600015ec:	400d9000 	.word	0x400d9000
600015f0:	001e1c00 	.word	0x001e1c00
600015f4:	e000e28c 	.word	0xe000e28c
600015f8:	20003000 	.word	0x20003000
600015fc:	20001400 	.word	0x20001400
60001600:	00001725 	.word	0x00001725
60001604:	e000e10c 	.word	0xe000e10c

60001608 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001608:	4b11      	ldr	r3, [pc, #68]	; (60001650 <analog_init+0x48>)
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
6000160a:	4912      	ldr	r1, [pc, #72]	; (60001654 <analog_init+0x4c>)
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000160c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
6000160e:	460a      	mov	r2, r1
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001610:	f440 3040 	orr.w	r0, r0, #196608	; 0x30000
}

#define MAX_ADC_CLOCK 20000000

FLASHMEM void analog_init(void)
{
60001614:	b430      	push	{r4, r5}
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001616:	66d8      	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001618:	f240 6537 	movw	r5, #1591	; 0x637
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
6000161c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
6000161e:	24a0      	movs	r4, #160	; 0xa0
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001620:	f440 7040 	orr.w	r0, r0, #768	; 0x300
60001624:	66d8      	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001626:	644d      	str	r5, [r1, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001628:	648c      	str	r4, [r1, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
6000162a:	6c93      	ldr	r3, [r2, #72]	; 0x48
6000162c:	061b      	lsls	r3, r3, #24
6000162e:	d4fc      	bmi.n	6000162a <analog_init+0x22>
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001630:	4b09      	ldr	r3, [pc, #36]	; (60001658 <analog_init+0x50>)
60001632:	f240 6037 	movw	r0, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001636:	21a0      	movs	r1, #160	; 0xa0
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
60001638:	461a      	mov	r2, r3
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
6000163a:	6458      	str	r0, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
6000163c:	6499      	str	r1, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
6000163e:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001640:	f013 0380 	ands.w	r3, r3, #128	; 0x80
60001644:	d1fb      	bne.n	6000163e <analog_init+0x36>
	calibrating = 0;
60001646:	4a05      	ldr	r2, [pc, #20]	; (6000165c <analog_init+0x54>)
60001648:	7013      	strb	r3, [r2, #0]
}
6000164a:	bc30      	pop	{r4, r5}
6000164c:	4770      	bx	lr
6000164e:	bf00      	nop
60001650:	400fc000 	.word	0x400fc000
60001654:	400c4000 	.word	0x400c4000
60001658:	400c8000 	.word	0x400c8000
6000165c:	200010d6 	.word	0x200010d6

60001660 <usb_string_product_name_default>:
60001660:	00550316 00420053 00530020 00720065     ..U.S.B. .S.e.r.
60001670:	00610069 0000006c                       i.a.l...

60001678 <usb_string_manufacturer_name_default>:
60001678:	00540318 00650065 0073006e 00640079     ..T.e.e.n.s.y.d.
60001688:	00690075 006f006e                       u.i.n.o.

60001690 <string0>:
60001690:	04090304                                ....

60001694 <usb_config_descriptor_12>:
60001694:	00430209 c0000102 00040932 02020100     ..C.....2.......
600016a4:	24050001 05011000 01010124 06022404     ...$....$....$..
600016b4:	00062405 82050701 10001003 00010409     .$..............
600016c4:	00000a02 03050700 00004002 02840507     .........@......
600016d4:	00000040                                @...

600016d8 <usb_config_descriptor_480>:
600016d8:	00430209 c0000102 00040932 02020100     ..C.....2.......
600016e8:	24050001 05011000 01010124 06022404     ...$....$....$..
600016f8:	00062405 82050701 05001003 00010409     .$..............
60001708:	00000a02 03050700 00020002 02840507     ................
60001718:	00000200                                ....

6000171c <qualifier_descriptor>:
6000171c:	0200060a 40000002 ff010001                       .......@..

60001726 <_serialEvent_default>:
60001726:	b5f8ff01                                         ..

60001728 <_init>:
60001728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
6000172a:	bf00      	nop
6000172c:	bcf8      	pop	{r3, r4, r5, r6, r7}
6000172e:	bc08      	pop	{r3}
60001730:	469e      	mov	lr, r3
60001732:	4770      	bx	lr
60001734:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

60001738 <__delay_veneer>:
60001738:	f85f f000 	ldr.w	pc, [pc]	; 6000173c <__delay_veneer+0x4>
6000173c:	000013ad 	.word	0x000013ad

60001740 <__startup_late_hook_veneer>:
60001740:	f85f f000 	ldr.w	pc, [pc]	; 60001744 <__startup_late_hook_veneer+0x4>
60001744:	000014f9 	.word	0x000014f9

60001748 <__usb_init_serialnumber_veneer>:
60001748:	f85f f000 	ldr.w	pc, [pc]	; 6000174c <__usb_init_serialnumber_veneer+0x4>
6000174c:	00001edd 	.word	0x00001edd

60001750 <__set_arm_clock_veneer>:
60001750:	f85f f000 	ldr.w	pc, [pc]	; 60001754 <__set_arm_clock_veneer+0x4>
60001754:	00002a7d 	.word	0x00002a7d

60001758 <__main_veneer>:
60001758:	f85f f000 	ldr.w	pc, [pc]	; 6000175c <__main_veneer+0x4>
6000175c:	0000277d 	.word	0x0000277d

60001760 <__startup_early_hook_veneer>:
60001760:	f85f f000 	ldr.w	pc, [pc]	; 60001764 <__startup_early_hook_veneer+0x4>
60001764:	000014f5 	.word	0x000014f5

60001768 <__pwm_init_veneer>:
60001768:	f85f f000 	ldr.w	pc, [pc]	; 6000176c <__pwm_init_veneer+0x4>
6000176c:	00002d91 	.word	0x00002d91

60001770 <__memset_veneer>:
60001770:	f85f f000 	ldr.w	pc, [pc]	; 60001774 <__memset_veneer+0x4>
60001774:	00003629 	.word	0x00003629

60001778 <____libc_init_array_veneer>:
60001778:	f85f f000 	ldr.w	pc, [pc]	; 6000177c <____libc_init_array_veneer+0x4>
6000177c:	00003059 	.word	0x00003059

60001780 <__init_array_start>:
60001780:	00000045 	.word	0x00000045
60001784:	00000a91 	.word	0x00000a91
60001788:	00001229 	.word	0x00001229

6000178c <__init_array_end>:
6000178c:	ffffffff 	.word	0xffffffff

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <__do_global_dtors_aux>:
    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);

    return tmeas;
      20:	4c05b510 	.word	0x4c05b510
      24:	7823      	ldrb	r3, [r4, #0]
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);
      26:	b933      	.short	0xb933

    return tmeas;
      28:	4b04      	ldr	r3, [pc, #16]	; (3c <_teensy_model_identifier+0x18>)
      2a:	b113      	.short	0xb113
      2c:	4804      	ldr	r0, [pc, #16]	; (40 <_teensy_model_identifier+0x1c>)
      2e:	f3af      	.short	0xf3af
      30:	8000      	strh	r0, [r0, #0]
      32:	2301      	movs	r3, #1
      34:	7023      	strb	r3, [r4, #0]
      36:	bd10      	pop	{r4, pc}
      38:	20000c70 	.word	0x20000c70
      3c:	0000      	movs	r0, r0
      3e:	0000      	.short	0x0000
}
      40:	3974      	subs	r1, #116	; 0x74
	...

00000044 <frame_dummy>:
      44:	b5104b08 	.word	0xb5104b08
      48:	b11b      	cbz	r3, 52 <frame_dummy+0xe>
      4a:	4908      	.short	0x4908
      4c:	4808      	ldr	r0, [pc, #32]	; (70 <frame_dummy+0x2c>)
      4e:	f3af      	.short	0xf3af
      50:	8000      	strh	r0, [r0, #0]
      52:	4808      	ldr	r0, [pc, #32]	; (74 <frame_dummy+0x30>)
      54:	b9036803 	.word	0xb9036803
      58:	bd10      	pop	{r4, pc}
      5a:	4b07      	ldr	r3, [pc, #28]	; (78 <frame_dummy+0x34>)
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      5c:	d0fb2b00 	.word	0xd0fb2b00
      60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      64:	4718      	bx	r3
      66:	bf00      	.short	0xbf00
      mode |= ADC_CFG_AVGS(2);
      mode1 |= ADC_CFG_AVGS(2);

    } else if (num >= 8) {
      mode |= ADC_CFG_AVGS(1);
      mode1 |= ADC_CFG_AVGS(1);
      68:	0000      	movs	r0, r0
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      6a:	0000      	movs	r0, r0
  ADC2_CFG = mode1;
  
  if(num >= 4){
      6c:	0c74      	lsrs	r4, r6, #17
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
  ADC2_CFG = mode1;
      6e:	2000      	movs	r0, #0
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      70:	3974      	subs	r1, #116	; 0x74
  ADC2_CFG = mode1;
      72:	0000      	movs	r0, r0
  
  if(num >= 4){
      74:	0c70      	lsrs	r0, r6, #17
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
  }
}
      76:	2000      	movs	r0, #0
      78:	0000      	movs	r0, r0
	...

0000007c <CLEDController::size()>:
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
        }
    }

    /// How many leds does this controller manage?
    virtual int size() { return m_nLeds; }
      7c:	6940      	ldr	r0, [r0, #20]
      7e:	4770      	.short	0x4770

00000080 <CLEDController::getMaxRefreshRate() const>:
              }

              return adj;
      #endif
    }
    virtual uint16_t getMaxRefreshRate() const { return 0; }
      80:	2000      	movs	r0, #0
      82:	4770      	bx	lr

00000084 <CWS2812SerialController<14, (EOrder)10>::init()>:
    }
  }
public:
  CWS2812SerialController() { pserial = NULL; }

  virtual void init() { /* do nothing yet */ }
      84:	4770      	bx	lr
	while (1) {
		volatile uint32_t n;
		GPIO2_DR_SET = (1<<3); //digitalWrite(13, HIGH);
		for (n=0; n < 2000000/6; n++) ;
		GPIO2_DR_CLEAR = (1<<3); //digitalWrite(13, LOW);
		for (n=0; n < 1500000/6; n++) ;
      86:	bf00      	.short	0xbf00

00000088 <CWS2812SerialController<14, (EOrder)10>::showPixels(PixelController<(EOrder)10, 8, 255ul>&)>:
        show(m_Data, m_nLeds, getAdjustment(brightness));
    }

	/// show the given color on the led strip
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
      88:	b5f0      	push	{r4, r5, r6, r7, lr}
      8a:	6985      	ldr	r5, [r0, #24]
      8c:	4604b083 	.word	0x4604b083

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
      90:	2d00      	cmp	r5, #0
      92:	d051      	.short	0xd051
      94:	688b      	ldr	r3, [r1, #8]
	if(m_pPowerFunc) {
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
      96:	69e2      	.short	0x69e2
      98:	2b00      	cmp	r3, #0

void CFastLED::countFPS(int nFrames) {
  static int br = 0;
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
      9a:	dd47      	.short	0xdd47
      9c:	3203      	adds	r2, #3
      9e:	680b      	.short	0x680b
      a0:	7818      	ldrb	r0, [r3, #0]
      a2:	4603      	.short	0x4603
      a4:	b120      	cbz	r0, b0 <CWS2812SerialController<14, (EOrder)10>::showPixels(PixelController<(EOrder)10, 8, 255ul>&)+0x28>
      a6:	7b0b      	ldrb	r3, [r1, #12]
      uint32_t now = millis();
      now -= lastframe;
      if( now == 0 ) {
          now = 1; // prevent division by zero below
      }
      m_nFPS = (br * 1000) / now;
      a8:	2bff4403 	.word	0x2bff4403
  static int br = 0;
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
      uint32_t now = millis();
      now -= lastframe;
      ac:	bfa8      	it	ge
      if( now == 0 ) {
          now = 1; // prevent division by zero below
      }
      m_nFPS = (br * 1000) / now;
    br = 0;
      ae:	23ff      	.short	0x23ff
      b0:	7c88      	ldrb	r0, [r1, #18]
      uint32_t now = millis();
      now -= lastframe;
      if( now == 0 ) {
          now = 1; // prevent division by zero below
      }
      m_nFPS = (br * 1000) / now;
      b2:	fb00      	.short	0xfb00
      b4:	3303      	adds	r3, #3
  static int br = 0;
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
      uint32_t now = millis();
      now -= lastframe;
      b6:	121b      	.short	0x121b
      b8:	f802 3c03 	strb.w	r3, [r2, #-3]
      if( now == 0 ) {
          now = 1; // prevent division by zero below
      }
      m_nFPS = (br * 1000) / now;
    br = 0;
      bc:	7858680b 	.word	0x7858680b

  if(br++ >= nFrames) {
      uint32_t now = millis();
      now -= lastframe;
      if( now == 0 ) {
          now = 1; // prevent division by zero below
      c0:	4603      	mov	r3, r0
      c2:	b120      	cbz	r0, ce <CWS2812SerialController<14, (EOrder)10>::showPixels(PixelController<(EOrder)10, 8, 255ul>&)+0x46>	; unpredictable <IT:ge>
      }
      m_nFPS = (br * 1000) / now;
      c4:	44037b4b 	.word	0x44037b4b
      c8:	2bff      	cmp	r3, #255	; 0xff
		pCur->showColor(color, scale);
		pCur->setDither(d);
		pCur = pCur->next();
	}
	countFPS();
}
      ca:	bfa8      	.short	0xbfa8
      cc:	23ff      	movge	r3, #255	; 0xff
      ce:	7cc8      	.short	0x7cc8
		return *pCur;
	}
}

void CFastLED::showColor(const struct CRGB & color, uint8_t scale) {
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
      d0:	fb00 3303 	mla	r3, r0, r3, r3
      d4:	f802121b 	.word	0xf802121b
      d8:	3c02      	subs	r4, #2
      da:	680b      	.short	0x680b
      dc:	7898      	ldrb	r0, [r3, #2]
      de:	4603      	mov	r3, r0
      e0:	7b8bb120 	.word	0x7b8bb120
      e4:	4403      	add	r3, r0
      e6:	2bff      	.short	0x2bff
      e8:	bfa8      	it	ge
      ea:	23ff      	movge	r3, #255	; 0xff
      ec:	32037d08 	.word	0x32037d08
      f0:	fb00 3303 	mla	r3, r0, r3, r3
    uint8_t *p = drawbuffer;

    while(pixels.has(1)) {
      *p++ = pixels.loadAndScale0();
      *p++ = pixels.loadAndScale1();
      *p++ = pixels.loadAndScale2();
      f4:	f802121b 	.word	0xf802121b
      f8:	3c04      	subs	r4, #4

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
      fa:	7bc8      	.short	0x7bc8
      fc:	f891 e00c 	ldrb.w	lr, [r1, #12]
                d[1] = e[1] - d[1];
                d[2] = e[2] - d[2];
     100:	ebce7b8d 	.word	0xebce7b8d

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     104:	0e00      	lsrs	r0, r0, #24
                d[1] = e[1] - d[1];
                d[2] = e[2] - d[2];
     106:	7c48      	.short	0x7c48
        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
                d[1] = e[1] - d[1];
     108:	7c0b      	ldrb	r3, [r1, #16]
     10a:	7b4f      	.short	0x7b4f
                d[2] = e[2] - d[2];
     10c:	1b45      	subs	r5, r0, r5

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     10e:	6888      	ldr	r0, [r1, #8]
        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
                d[1] = e[1] - d[1];
     110:	680e1bdf 	.word	0x680e1bdf

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     114:	3801      	subs	r0, #1
     116:	f991      	.short	0xf991
     118:	3015      	adds	r0, #21

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     11a:	f881      	.short	0xf881
     11c:	e00c      	b.n	138 <CWS2812SerialController<14, (EOrder)10>::showPixels(PixelController<(EOrder)10, 8, 255ul>&)+0xb0>

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     11e:	4433      	.short	0x4433
  virtual void showPixels(PixelController<RGB_ORDER, 8, 0xFF> & pixels) {
    _init(pixels.size());

    uint8_t *p = drawbuffer;

    while(pixels.has(1)) {
     120:	2800      	cmp	r0, #0
        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
                d[1] = e[1] - d[1];
     122:	734f      	strb	r7, [r1, #13]
                d[2] = e[2] - d[2];
     124:	738d      	strb	r5, [r1, #14]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     126:	600b      	str	r3, [r1, #0]
     128:	dcb96088 	.word	0xdcb96088
      *p++ = pixels.loadAndScale1();
      *p++ = pixels.loadAndScale2();
      pixels.stepDithering();
      pixels.advanceData();
    }
    pserial->show();
     12c:	69a0      	ldr	r0, [r4, #24]
  }
     12e:	b003      	.short	0xb003
     130:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      *p++ = pixels.loadAndScale1();
      *p++ = pixels.loadAndScale2();
      pixels.stepDithering();
      pixels.advanceData();
    }
    pserial->show();
     134:	f000 bd96 	b.w	c64 <WS2812Serial::show()>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
            }
        }

        __attribute__((always_inline)) inline int size() { return mLen; }
     138:	9101684e 	.word	0x9101684e
  WS2812Serial *pserial;
  uint8_t *drawbuffer,*framebuffer;

  void _init(int nLeds) {
    if (pserial == NULL) {
      drawbuffer = (uint8_t*)malloc(nLeds * 3);
     13c:	eb06 0746 	add.w	r7, r6, r6, lsl #1
     140:	f0024638 	.word	0xf0024638
     144:	ffb1 61e0 	vcle.s8	q3, q8, #0
      framebuffer = (uint8_t*)malloc(nLeds * 12);
     148:	f00200b8 	.word	0xf00200b8
     14c:	ffad 6220 	vsubl.u32	q3, d13, d16
      pserial = new WS2812Serial(nLeds, framebuffer, drawbuffer, DATA_PIN, WS2812_RGB);
     150:	f002201c 	.word	0xf002201c
     154:	fb1b f04f 			; <UNDEFINED> instruction: 0xfb1bf04f

class WS2812Serial {
public:
	constexpr WS2812Serial(uint16_t num, void *fb, void *db, uint8_t pin, uint8_t cfg) :
		numled(num), pin(pin), config(cfg),
		frameBuffer((uint8_t *)fb), drawBuffer((uint8_t *)db) {
     158:	6a270e0e 	.word	0x6a270e0e
     15c:	22ff      	movs	r2, #255	; 0xff
     15e:	70c5      	.short	0x70c5
     160:	60c5      	str	r5, [r0, #12]
     162:	6105      	.short	0x6105
     164:	6185      	str	r5, [r0, #24]
     166:	69e5      	.short	0x69e5
     168:	61a0      	str	r0, [r4, #24]
     16a:	8006      	.short	0x8006
     16c:	e002f880 	.word	0xe002f880
     170:	6047      	str	r7, [r0, #4]
     172:	6085      	.short	0x6085
     174:	7502      	strb	r2, [r0, #20]
      pserial->begin();
     176:	f000      	.short	0xf000
     178:	fc95 9901 	ldc2	9, cr9, [r5], {1}
     17c:	e78a      	b.n	94 <CWS2812SerialController<14, (EOrder)10>::showPixels(PixelController<(EOrder)10, 8, 255ul>&)+0xc>
	port->PINCFG = 0;

	// Enable the transmitter, receiver and enable receiver interrupt
	attachInterruptVector(hardware->irq, hardware->irq_handler);
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
	NVIC_ENABLE_IRQ(hardware->irq);
     17e:	bf00      	.short	0xbf00

00000180 <CLEDController::clearLeds(int)>:

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     180:	b5f0      	push	{r4, r5, r6, r7, lr}
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     182:	2300      	.short	0x2300
     184:	b091      	sub	sp, #68	; 0x44
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
     186:	6805      	.short	0x6805
     188:	4a81      	ldr	r2, [pc, #516]	; (390 <CLEDController::clearLeds(int)+0x210>)
     18a:	f88d 3000 	strb.w	r3, [sp]
     18e:	f88d 3001 	strb.w	r3, [sp, #1]
     192:	f88d      	.short	0xf88d
     194:	3002      	adds	r0, #2
     196:	682e      	.short	0x682e
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
     198:	f88d 3004 	strb.w	r3, [sp, #4]
     19c:	f88d4296 	.word	0xf88d4296
     1a0:	3005      	adds	r0, #5
     1a2:	f88d      	.short	0xf88d
     1a4:	3006      	adds	r0, #6
     1a6:	f040      	.short	0xf040
     1a8:	80c7      	strh	r7, [r0, #6]
     1aa:	7c82      	.short	0x7c82
     1ac:	4604      	mov	r4, r0
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     1ae:	9103      	.short	0x9103
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     1b0:	2a01      	cmp	r2, #1
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     1b2:	9104      	str	r1, [sp, #16]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     1b4:	f88d 301a 	strb.w	r3, [sp, #26]
        g = rhs.g;
     1b8:	f88d 301b 	strb.w	r3, [sp, #27]
        b = rhs.b;
     1bc:	f88d 301c 	strb.w	r3, [sp, #28]
     1c0:	f8cd d008 	str.w	sp, [sp, #8]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     1c4:	d07b      	beq.n	2be <CLEDController::clearLeds(int)+0x13e>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     1c6:	f88d 3019 	strb.w	r3, [sp, #25]
     1ca:	f88d 3018 	strb.w	r3, [sp, #24]
     1ce:	f88d 3017 	strb.w	r3, [sp, #23]
     1d2:	f88d 3016 	strb.w	r3, [sp, #22]
     1d6:	f88d 3015 	strb.w	r3, [sp, #21]
     1da:	f88d 3014 	strb.w	r3, [sp, #20]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     1de:	2000      	movs	r0, #0
     1e0:	ab07      	add	r3, sp, #28
     1e2:	a90f      	add	r1, sp, #60	; 0x3c
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     1e4:	4602      	mov	r2, r0
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     1e6:	f88d 001d 	strb.w	r0, [sp, #29]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     1ea:	f843 2f04 	str.w	r2, [r3, #4]!

        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
     1ee:	428b      	cmp	r3, r1
     1f0:	d1fb      	bne.n	1ea <CLEDController::clearLeds(int)+0x6a>
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     1f2:	69ab      	ldr	r3, [r5, #24]
     1f4:	4a67      	ldr	r2, [pc, #412]	; (394 <CLEDController::clearLeds(int)+0x214>)
     1f6:	4293      	cmp	r3, r2
     1f8:	f040 80a4 	bne.w	344 <CLEDController::clearLeds(int)+0x1c4>
class CWS2812SerialController : public CPixelLEDController<RGB_ORDER, 8, 0xFF> {
  WS2812Serial *pserial;
  uint8_t *drawbuffer,*framebuffer;

  void _init(int nLeds) {
    if (pserial == NULL) {
     1fc:	69a5      	ldr	r5, [r4, #24]
     1fe:	2d00      	cmp	r5, #0
     200:	f000 80a5 	beq.w	34e <CLEDController::clearLeds(int)+0x1ce>
  virtual void showPixels(PixelController<RGB_ORDER, 8, 0xFF> & pixels) {
    _init(pixels.size());

    uint8_t *p = drawbuffer;

    while(pixels.has(1)) {
     204:	9b04      	ldr	r3, [sp, #16]
  virtual void init() { /* do nothing yet */ }

  virtual void showPixels(PixelController<RGB_ORDER, 8, 0xFF> & pixels) {
    _init(pixels.size());

    uint8_t *p = drawbuffer;
     206:	69e2      	ldr	r2, [r4, #28]

    while(pixels.has(1)) {
     208:	2b00      	cmp	r3, #0
     20a:	dd53      	ble.n	2b4 <CLEDController::clearLeds(int)+0x134>
     20c:	3203      	adds	r2, #3
     20e:	9b02      	ldr	r3, [sp, #8]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
     210:	7819      	ldrb	r1, [r3, #0]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
     212:	460b      	mov	r3, r1
     214:	b129      	cbz	r1, 222 <CLEDController::clearLeds(int)+0xa2>
/// @param j - second byte to add
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
     216:	f89d 3014 	ldrb.w	r3, [sp, #20]
     21a:	440b      	add	r3, r1
    if( t > 255) t = 255;
     21c:	2bff      	cmp	r3, #255	; 0xff
     21e:	bfa8      	it	ge
     220:	23ff      	movge	r3, #255	; 0xff
      *p++ = pixels.loadAndScale0();
     222:	f89d 101a 	ldrb.w	r1, [sp, #26]
     226:	fb01 3303 	mla	r3, r1, r3, r3
     22a:	121b      	asrs	r3, r3, #8
     22c:	f802 3c03 	strb.w	r3, [r2, #-3]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
     230:	9b02      	ldr	r3, [sp, #8]
     232:	7859      	ldrb	r1, [r3, #1]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
     234:	460b      	mov	r3, r1
     236:	b129      	cbz	r1, 244 <CLEDController::clearLeds(int)+0xc4>
/// @param j - second byte to add
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
     238:	f89d 3015 	ldrb.w	r3, [sp, #21]
     23c:	440b      	add	r3, r1
    if( t > 255) t = 255;
     23e:	2bff      	cmp	r3, #255	; 0xff
     240:	bfa8      	it	ge
     242:	23ff      	movge	r3, #255	; 0xff
      *p++ = pixels.loadAndScale1();
     244:	f89d 101b 	ldrb.w	r1, [sp, #27]
     248:	fb01 3303 	mla	r3, r1, r3, r3
     24c:	121b      	asrs	r3, r3, #8
     24e:	f802 3c02 	strb.w	r3, [r2, #-2]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
     252:	9b02      	ldr	r3, [sp, #8]
     254:	7899      	ldrb	r1, [r3, #2]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
     256:	460b      	mov	r3, r1
     258:	b129      	cbz	r1, 266 <CLEDController::clearLeds(int)+0xe6>
/// @param j - second byte to add
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
     25a:	f89d 3016 	ldrb.w	r3, [sp, #22]
     25e:	440b      	add	r3, r1
    if( t > 255) t = 255;
     260:	2bff      	cmp	r3, #255	; 0xff
     262:	bfa8      	it	ge
     264:	23ff      	movge	r3, #255	; 0xff
      *p++ = pixels.loadAndScale2();
     266:	f89d 101c 	ldrb.w	r1, [sp, #28]
     26a:	3203      	adds	r2, #3
     26c:	fb01 3303 	mla	r3, r1, r3, r3
     270:	121b      	asrs	r3, r3, #8
     272:	f802 3c04 	strb.w	r3, [r2, #-4]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     276:	f89d 1017 	ldrb.w	r1, [sp, #23]
     27a:	f89d 7014 	ldrb.w	r7, [sp, #20]
                d[1] = e[1] - d[1];
                d[2] = e[2] - d[2];
     27e:	f89d 0016 	ldrb.w	r0, [sp, #22]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     282:	1bcf      	subs	r7, r1, r7
                d[1] = e[1] - d[1];
                d[2] = e[2] - d[2];
     284:	f89d 1019 	ldrb.w	r1, [sp, #25]
        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
                d[1] = e[1] - d[1];
     288:	f89d 3018 	ldrb.w	r3, [sp, #24]
     28c:	f89d 5015 	ldrb.w	r5, [sp, #21]
                d[2] = e[2] - d[2];
     290:	1a08      	subs	r0, r1, r0

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     292:	9904      	ldr	r1, [sp, #16]
        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
                d[1] = e[1] - d[1];
     294:	1b5d      	subs	r5, r3, r5

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     296:	9e02      	ldr	r6, [sp, #8]
     298:	3901      	subs	r1, #1
     29a:	f99d 301d 	ldrsb.w	r3, [sp, #29]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     29e:	f88d 7014 	strb.w	r7, [sp, #20]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     2a2:	4433      	add	r3, r6
  virtual void showPixels(PixelController<RGB_ORDER, 8, 0xFF> & pixels) {
    _init(pixels.size());

    uint8_t *p = drawbuffer;

    while(pixels.has(1)) {
     2a4:	2900      	cmp	r1, #0
        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
                d[1] = e[1] - d[1];
     2a6:	f88d 5015 	strb.w	r5, [sp, #21]
                d[2] = e[2] - d[2];
     2aa:	f88d 0016 	strb.w	r0, [sp, #22]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     2ae:	9302      	str	r3, [sp, #8]
     2b0:	9104      	str	r1, [sp, #16]
     2b2:	dcad      	bgt.n	210 <CLEDController::clearLeds(int)+0x90>
      *p++ = pixels.loadAndScale1();
      *p++ = pixels.loadAndScale2();
      pixels.stepDithering();
      pixels.advanceData();
    }
    pserial->show();
     2b4:	69a0      	ldr	r0, [r4, #24]
     2b6:	f000 fcd5 	bl	c64 <WS2812Serial::show()>

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     2ba:	b011      	add	sp, #68	; 0x44
     2bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     2be:	4a36      	ldr	r2, [pc, #216]	; (398 <CLEDController::clearLeds(int)+0x218>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     2c0:	7813      	ldrb	r3, [r2, #0]
     2c2:	3301      	adds	r3, #1
     2c4:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     2c8:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     2cc:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     2ce:	bf14      	ite	ne
     2d0:	2180      	movne	r1, #128	; 0x80
     2d2:	2100      	moveq	r1, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     2d4:	079a      	lsls	r2, r3, #30
     2d6:	d502      	bpl.n	2de <CLEDController::clearLeds(int)+0x15e>
     2d8:	f041 0140 	orr.w	r1, r1, #64	; 0x40
     2dc:	b2c9      	uxtb	r1, r1
                if(R & 0x04) { Q |= 0x20; }
     2de:	075b      	lsls	r3, r3, #29
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     2e0:	f04f 0200 	mov.w	r2, #0
     2e4:	f10d 0317 	add.w	r3, sp, #23
     2e8:	f10d 071a 	add.w	r7, sp, #26

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
                if(R & 0x04) { Q |= 0x20; }
     2ec:	bf48      	it	mi
     2ee:	f041 0120 	orrmi.w	r1, r1, #32
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     2f2:	f44f 7e80 	mov.w	lr, #256	; 0x100
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     2f6:	3110      	adds	r1, #16
     2f8:	b2c9      	uxtb	r1, r1
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     2fa:	b1aa      	cbz	r2, 328 <CLEDController::clearLeds(int)+0x1a8>
     2fc:	fb9e f2f2 	sdiv	r2, lr, r2
     300:	b2d2      	uxtb	r2, r2
     302:	1c50      	adds	r0, r2, #1
     304:	b2c0      	uxtb	r0, r0
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
     306:	fb00 1501 	mla	r5, r0, r1, r1
     30a:	7018      	strb	r0, [r3, #0]
     30c:	122d      	asrs	r5, r5, #8
     30e:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     310:	b105      	cbz	r5, 314 <CLEDController::clearLeds(int)+0x194>
     312:	3e01      	subs	r6, #1
     314:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     318:	b100      	cbz	r0, 31c <CLEDController::clearLeds(int)+0x19c>
     31a:	701a      	strb	r2, [r3, #0]
     31c:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     31e:	42bb      	cmp	r3, r7
     320:	d008      	beq.n	334 <CLEDController::clearLeds(int)+0x1b4>
     322:	78da      	ldrb	r2, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     324:	2a00      	cmp	r2, #0
     326:	d1e9      	bne.n	2fc <CLEDController::clearLeds(int)+0x17c>
     328:	701a      	strb	r2, [r3, #0]
     32a:	3301      	adds	r3, #1
                    d[i] = scale8(Q, e[i]);
     32c:	f803 2c04 	strb.w	r2, [r3, #-4]
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     330:	42bb      	cmp	r3, r7
     332:	d1f6      	bne.n	322 <CLEDController::clearLeds(int)+0x1a2>
     334:	6825      	ldr	r5, [r4, #0]
     336:	e752      	b.n	1de <CLEDController::clearLeds(int)+0x5e>
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
     338:	460a      	mov	r2, r1
     33a:	ab01      	add	r3, sp, #4
     33c:	4669      	mov	r1, sp
     33e:	47b0      	blx	r6

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     340:	b011      	add	sp, #68	; 0x44
     342:	bdf0      	pop	{r4, r5, r6, r7, pc}
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     344:	4620      	mov	r0, r4
     346:	a902      	add	r1, sp, #8
     348:	4798      	blx	r3

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     34a:	b011      	add	sp, #68	; 0x44
     34c:	bdf0      	pop	{r4, r5, r6, r7, pc}
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
            }
        }

        __attribute__((always_inline)) inline int size() { return mLen; }
     34e:	9e03      	ldr	r6, [sp, #12]
  WS2812Serial *pserial;
  uint8_t *drawbuffer,*framebuffer;

  void _init(int nLeds) {
    if (pserial == NULL) {
      drawbuffer = (uint8_t*)malloc(nLeds * 3);
     350:	eb06 0746 	add.w	r7, r6, r6, lsl #1
     354:	4638      	mov	r0, r7
     356:	f002 fea7 	bl	30a8 <malloc>
     35a:	61e0      	str	r0, [r4, #28]
      framebuffer = (uint8_t*)malloc(nLeds * 12);
     35c:	00b8      	lsls	r0, r7, #2
     35e:	f002 fea3 	bl	30a8 <malloc>
     362:	6220      	str	r0, [r4, #32]
      pserial = new WS2812Serial(nLeds, framebuffer, drawbuffer, DATA_PIN, WS2812_RGB);
     364:	201c      	movs	r0, #28
     366:	f002 fa11 	bl	278c <operator new(unsigned int)>
     36a:	f04f 0e0e 	mov.w	lr, #14
     36e:	6a27      	ldr	r7, [r4, #32]
     370:	22ff      	movs	r2, #255	; 0xff
     372:	69e1      	ldr	r1, [r4, #28]
     374:	61a0      	str	r0, [r4, #24]
     376:	8006      	strh	r6, [r0, #0]
     378:	70c5      	strb	r5, [r0, #3]
     37a:	60c5      	str	r5, [r0, #12]
     37c:	6105      	str	r5, [r0, #16]
     37e:	6185      	str	r5, [r0, #24]
     380:	f880 e002 	strb.w	lr, [r0, #2]
     384:	6047      	str	r7, [r0, #4]
     386:	6081      	str	r1, [r0, #8]
     388:	7502      	strb	r2, [r0, #20]
      pserial->begin();
     38a:	f000 fb8b 	bl	aa4 <WS2812Serial::begin()>
     38e:	e739      	b.n	204 <CLEDController::clearLeds(int)+0x84>
     390:	0000039d 	.word	0x0000039d
     394:	00000089 	.word	0x00000089
     398:	20000c8c 	.word	0x20000c8c

0000039c <CPixelLEDController<(EOrder)10, 8, 255ul>::showColor(CRGB const&, int, CRGB)>:

  /// set all the leds on the controller to a given color
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
     39c:	b5f0      	push	{r4, r5, r6, r7, lr}
     39e:	4604      	mov	r4, r0
     3a0:	b08f      	sub	sp, #60	; 0x3c

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
     3a2:	785d      	ldrb	r5, [r3, #1]
        b = rhs.b;
     3a4:	7898      	ldrb	r0, [r3, #2]
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     3a6:	9100      	str	r1, [sp, #0]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     3a8:	7819      	ldrb	r1, [r3, #0]
     3aa:	7ca3      	ldrb	r3, [r4, #18]
     3ac:	9201      	str	r2, [sp, #4]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     3ae:	2b01      	cmp	r3, #1
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     3b0:	9202      	str	r2, [sp, #8]
     3b2:	f88d 1012 	strb.w	r1, [sp, #18]
        g = rhs.g;
     3b6:	f88d 5013 	strb.w	r5, [sp, #19]
        b = rhs.b;
     3ba:	f88d 0014 	strb.w	r0, [sp, #20]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     3be:	d07d      	beq.n	4bc <CPixelLEDController<(EOrder)10, 8, 255ul>::showColor(CRGB const&, int, CRGB)+0x120>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     3c0:	2300      	movs	r3, #0
     3c2:	f88d 3011 	strb.w	r3, [sp, #17]
     3c6:	f88d 3010 	strb.w	r3, [sp, #16]
     3ca:	f88d 300f 	strb.w	r3, [sp, #15]
     3ce:	f88d 300e 	strb.w	r3, [sp, #14]
     3d2:	f88d 300d 	strb.w	r3, [sp, #13]
     3d6:	f88d 300c 	strb.w	r3, [sp, #12]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     3da:	2000      	movs	r0, #0
     3dc:	ab05      	add	r3, sp, #20
     3de:	a90d      	add	r1, sp, #52	; 0x34
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     3e0:	4602      	mov	r2, r0
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     3e2:	f88d 0015 	strb.w	r0, [sp, #21]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     3e6:	f843 2f04 	str.w	r2, [r3, #4]!

        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
     3ea:	428b      	cmp	r3, r1
     3ec:	d1fb      	bne.n	3e6 <CPixelLEDController<(EOrder)10, 8, 255ul>::showColor(CRGB const&, int, CRGB)+0x4a>
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     3ee:	6823      	ldr	r3, [r4, #0]
     3f0:	4a61      	ldr	r2, [pc, #388]	; (578 <CPixelLEDController<(EOrder)10, 8, 255ul>::showColor(CRGB const&, int, CRGB)+0x1dc>)
     3f2:	699b      	ldr	r3, [r3, #24]
     3f4:	4293      	cmp	r3, r2
     3f6:	f040 8099 	bne.w	52c <CPixelLEDController<(EOrder)10, 8, 255ul>::showColor(CRGB const&, int, CRGB)+0x190>
class CWS2812SerialController : public CPixelLEDController<RGB_ORDER, 8, 0xFF> {
  WS2812Serial *pserial;
  uint8_t *drawbuffer,*framebuffer;

  void _init(int nLeds) {
    if (pserial == NULL) {
     3fa:	69a5      	ldr	r5, [r4, #24]
     3fc:	2d00      	cmp	r5, #0
     3fe:	f000 809a 	beq.w	536 <CPixelLEDController<(EOrder)10, 8, 255ul>::showColor(CRGB const&, int, CRGB)+0x19a>
  virtual void showPixels(PixelController<RGB_ORDER, 8, 0xFF> & pixels) {
    _init(pixels.size());

    uint8_t *p = drawbuffer;

    while(pixels.has(1)) {
     402:	9b02      	ldr	r3, [sp, #8]
  virtual void init() { /* do nothing yet */ }

  virtual void showPixels(PixelController<RGB_ORDER, 8, 0xFF> & pixels) {
    _init(pixels.size());

    uint8_t *p = drawbuffer;
     404:	69e2      	ldr	r2, [r4, #28]

    while(pixels.has(1)) {
     406:	2b00      	cmp	r3, #0
     408:	dd53      	ble.n	4b2 <CPixelLEDController<(EOrder)10, 8, 255ul>::showColor(CRGB const&, int, CRGB)+0x116>
     40a:	3203      	adds	r2, #3
     40c:	9b00      	ldr	r3, [sp, #0]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
     40e:	7819      	ldrb	r1, [r3, #0]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
     410:	460b      	mov	r3, r1
     412:	b129      	cbz	r1, 420 <CPixelLEDController<(EOrder)10, 8, 255ul>::showColor(CRGB const&, int, CRGB)+0x84>
/// @param j - second byte to add
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
     414:	f89d 300c 	ldrb.w	r3, [sp, #12]
     418:	440b      	add	r3, r1
    if( t > 255) t = 255;
     41a:	2bff      	cmp	r3, #255	; 0xff
     41c:	bfa8      	it	ge
     41e:	23ff      	movge	r3, #255	; 0xff
      *p++ = pixels.loadAndScale0();
     420:	f89d 1012 	ldrb.w	r1, [sp, #18]
     424:	fb01 3303 	mla	r3, r1, r3, r3
     428:	121b      	asrs	r3, r3, #8
     42a:	f802 3c03 	strb.w	r3, [r2, #-3]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
     42e:	9b00      	ldr	r3, [sp, #0]
     430:	7859      	ldrb	r1, [r3, #1]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
     432:	460b      	mov	r3, r1
     434:	b129      	cbz	r1, 442 <CPixelLEDController<(EOrder)10, 8, 255ul>::showColor(CRGB const&, int, CRGB)+0xa6>
/// @param j - second byte to add
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
     436:	f89d 300d 	ldrb.w	r3, [sp, #13]
     43a:	440b      	add	r3, r1
    if( t > 255) t = 255;
     43c:	2bff      	cmp	r3, #255	; 0xff
     43e:	bfa8      	it	ge
     440:	23ff      	movge	r3, #255	; 0xff
      *p++ = pixels.loadAndScale1();
     442:	f89d 1013 	ldrb.w	r1, [sp, #19]
     446:	fb01 3303 	mla	r3, r1, r3, r3
     44a:	121b      	asrs	r3, r3, #8
     44c:	f802 3c02 	strb.w	r3, [r2, #-2]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
     450:	9b00      	ldr	r3, [sp, #0]
     452:	7899      	ldrb	r1, [r3, #2]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
     454:	460b      	mov	r3, r1
     456:	b129      	cbz	r1, 464 <CPixelLEDController<(EOrder)10, 8, 255ul>::showColor(CRGB const&, int, CRGB)+0xc8>
/// @param j - second byte to add
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
     458:	f89d 300e 	ldrb.w	r3, [sp, #14]
     45c:	440b      	add	r3, r1
    if( t > 255) t = 255;
     45e:	2bff      	cmp	r3, #255	; 0xff
     460:	bfa8      	it	ge
     462:	23ff      	movge	r3, #255	; 0xff
      *p++ = pixels.loadAndScale2();
     464:	f89d 1014 	ldrb.w	r1, [sp, #20]
     468:	3203      	adds	r2, #3
     46a:	fb01 3303 	mla	r3, r1, r3, r3
     46e:	121b      	asrs	r3, r3, #8
     470:	f802 3c04 	strb.w	r3, [r2, #-4]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     474:	f89d 100f 	ldrb.w	r1, [sp, #15]
     478:	f89d 700c 	ldrb.w	r7, [sp, #12]
                d[1] = e[1] - d[1];
                d[2] = e[2] - d[2];
     47c:	f89d 000e 	ldrb.w	r0, [sp, #14]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     480:	1bcf      	subs	r7, r1, r7
                d[1] = e[1] - d[1];
                d[2] = e[2] - d[2];
     482:	f89d 1011 	ldrb.w	r1, [sp, #17]
        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
                d[1] = e[1] - d[1];
     486:	f89d 3010 	ldrb.w	r3, [sp, #16]
     48a:	f89d 500d 	ldrb.w	r5, [sp, #13]
                d[2] = e[2] - d[2];
     48e:	1a08      	subs	r0, r1, r0

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     490:	9902      	ldr	r1, [sp, #8]
        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
                d[1] = e[1] - d[1];
     492:	1b5d      	subs	r5, r3, r5

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     494:	9e00      	ldr	r6, [sp, #0]
     496:	3901      	subs	r1, #1
     498:	f99d 3015 	ldrsb.w	r3, [sp, #21]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     49c:	f88d 700c 	strb.w	r7, [sp, #12]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     4a0:	4433      	add	r3, r6
  virtual void showPixels(PixelController<RGB_ORDER, 8, 0xFF> & pixels) {
    _init(pixels.size());

    uint8_t *p = drawbuffer;

    while(pixels.has(1)) {
     4a2:	2900      	cmp	r1, #0
        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
                d[1] = e[1] - d[1];
     4a4:	f88d 500d 	strb.w	r5, [sp, #13]
                d[2] = e[2] - d[2];
     4a8:	f88d 000e 	strb.w	r0, [sp, #14]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     4ac:	9300      	str	r3, [sp, #0]
     4ae:	9102      	str	r1, [sp, #8]
     4b0:	dcad      	bgt.n	40e <CPixelLEDController<(EOrder)10, 8, 255ul>::showColor(CRGB const&, int, CRGB)+0x72>
      *p++ = pixels.loadAndScale1();
      *p++ = pixels.loadAndScale2();
      pixels.stepDithering();
      pixels.advanceData();
    }
    pserial->show();
     4b2:	69a0      	ldr	r0, [r4, #24]
     4b4:	f000 fbd6 	bl	c64 <WS2812Serial::show()>
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
  }
     4b8:	b00f      	add	sp, #60	; 0x3c
     4ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     4bc:	4a2f      	ldr	r2, [pc, #188]	; (57c <CPixelLEDController<(EOrder)10, 8, 255ul>::showColor(CRGB const&, int, CRGB)+0x1e0>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     4be:	7813      	ldrb	r3, [r2, #0]
     4c0:	3301      	adds	r3, #1
     4c2:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     4c6:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     4ca:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     4cc:	bf14      	ite	ne
     4ce:	2280      	movne	r2, #128	; 0x80
     4d0:	2200      	moveq	r2, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     4d2:	0798      	lsls	r0, r3, #30
     4d4:	d502      	bpl.n	4dc <CPixelLEDController<(EOrder)10, 8, 255ul>::showColor(CRGB const&, int, CRGB)+0x140>
     4d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     4da:	b2d2      	uxtb	r2, r2
                if(R & 0x04) { Q |= 0x20; }
     4dc:	075b      	lsls	r3, r3, #29
     4de:	f10d 0712 	add.w	r7, sp, #18
     4e2:	f10d 030f 	add.w	r3, sp, #15
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     4e6:	f44f 7e80 	mov.w	lr, #256	; 0x100

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
                if(R & 0x04) { Q |= 0x20; }
     4ea:	bf48      	it	mi
     4ec:	f042 0220 	orrmi.w	r2, r2, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     4f0:	3210      	adds	r2, #16
     4f2:	b2d2      	uxtb	r2, r2
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     4f4:	b1b1      	cbz	r1, 524 <CPixelLEDController<(EOrder)10, 8, 255ul>::showColor(CRGB const&, int, CRGB)+0x188>
     4f6:	fb9e f1f1 	sdiv	r1, lr, r1
     4fa:	b2c9      	uxtb	r1, r1
     4fc:	1c48      	adds	r0, r1, #1
     4fe:	b2c0      	uxtb	r0, r0
     500:	fb00 2502 	mla	r5, r0, r2, r2
     504:	7018      	strb	r0, [r3, #0]
     506:	122d      	asrs	r5, r5, #8
     508:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     50a:	b105      	cbz	r5, 50e <CPixelLEDController<(EOrder)10, 8, 255ul>::showColor(CRGB const&, int, CRGB)+0x172>
     50c:	3e01      	subs	r6, #1
     50e:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     512:	b100      	cbz	r0, 516 <CPixelLEDController<(EOrder)10, 8, 255ul>::showColor(CRGB const&, int, CRGB)+0x17a>
     514:	7019      	strb	r1, [r3, #0]
     516:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     518:	42bb      	cmp	r3, r7
     51a:	f43f af5e 	beq.w	3da <CPixelLEDController<(EOrder)10, 8, 255ul>::showColor(CRGB const&, int, CRGB)+0x3e>
     51e:	78d9      	ldrb	r1, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     520:	2900      	cmp	r1, #0
     522:	d1e8      	bne.n	4f6 <CPixelLEDController<(EOrder)10, 8, 255ul>::showColor(CRGB const&, int, CRGB)+0x15a>
     524:	7019      	strb	r1, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     526:	f803 1c03 	strb.w	r1, [r3, #-3]
     52a:	e7f4      	b.n	516 <CPixelLEDController<(EOrder)10, 8, 255ul>::showColor(CRGB const&, int, CRGB)+0x17a>
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     52c:	4620      	mov	r0, r4
     52e:	4669      	mov	r1, sp
     530:	4798      	blx	r3
  }
     532:	b00f      	add	sp, #60	; 0x3c
     534:	bdf0      	pop	{r4, r5, r6, r7, pc}
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
            }
        }

        __attribute__((always_inline)) inline int size() { return mLen; }
     536:	9e01      	ldr	r6, [sp, #4]
  WS2812Serial *pserial;
  uint8_t *drawbuffer,*framebuffer;

  void _init(int nLeds) {
    if (pserial == NULL) {
      drawbuffer = (uint8_t*)malloc(nLeds * 3);
     538:	eb06 0746 	add.w	r7, r6, r6, lsl #1
     53c:	4638      	mov	r0, r7
     53e:	f002 fdb3 	bl	30a8 <malloc>
     542:	61e0      	str	r0, [r4, #28]
      framebuffer = (uint8_t*)malloc(nLeds * 12);
     544:	00b8      	lsls	r0, r7, #2
     546:	f002 fdaf 	bl	30a8 <malloc>
     54a:	6220      	str	r0, [r4, #32]
      pserial = new WS2812Serial(nLeds, framebuffer, drawbuffer, DATA_PIN, WS2812_RGB);
     54c:	201c      	movs	r0, #28
     54e:	f002 f91d 	bl	278c <operator new(unsigned int)>
     552:	f04f 0e0e 	mov.w	lr, #14
     556:	6a27      	ldr	r7, [r4, #32]
     558:	22ff      	movs	r2, #255	; 0xff
     55a:	69e1      	ldr	r1, [r4, #28]
     55c:	61a0      	str	r0, [r4, #24]
     55e:	8006      	strh	r6, [r0, #0]
     560:	70c5      	strb	r5, [r0, #3]
     562:	60c5      	str	r5, [r0, #12]
     564:	6105      	str	r5, [r0, #16]
     566:	6185      	str	r5, [r0, #24]
     568:	f880 e002 	strb.w	lr, [r0, #2]
     56c:	6047      	str	r7, [r0, #4]
     56e:	6081      	str	r1, [r0, #8]
     570:	7502      	strb	r2, [r0, #20]
      pserial->begin();
     572:	f000 fa97 	bl	aa4 <WS2812Serial::begin()>
     576:	e744      	b.n	402 <CPixelLEDController<(EOrder)10, 8, 255ul>::showColor(CRGB const&, int, CRGB)+0x66>
     578:	00000089 	.word	0x00000089
     57c:	20000c8c 	.word	0x20000c8c

00000580 <CPixelLEDController<(EOrder)10, 8, 255ul>::show(CRGB const*, int, CRGB)>:

/// write the passed in rgb data out to the leds managed by this controller
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
     580:	b5f0      	push	{r4, r5, r6, r7, lr}
     582:	4604      	mov	r4, r0
     584:	b08f      	sub	sp, #60	; 0x3c

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
     586:	785d      	ldrb	r5, [r3, #1]
        b = rhs.b;
     588:	7898      	ldrb	r0, [r3, #2]
            mData += skip;
            mAdvance = (advance) ? 3+skip : 0;
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
     58a:	9100      	str	r1, [sp, #0]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     58c:	7819      	ldrb	r1, [r3, #0]
     58e:	7ca3      	ldrb	r3, [r4, #18]
     590:	9201      	str	r2, [sp, #4]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     592:	2b01      	cmp	r3, #1
            mData += skip;
            mAdvance = (advance) ? 3+skip : 0;
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
     594:	9202      	str	r2, [sp, #8]
     596:	f88d 1012 	strb.w	r1, [sp, #18]
        g = rhs.g;
     59a:	f88d 5013 	strb.w	r5, [sp, #19]
        b = rhs.b;
     59e:	f88d 0014 	strb.w	r0, [sp, #20]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     5a2:	f000 8082 	beq.w	6aa <CPixelLEDController<(EOrder)10, 8, 255ul>::show(CRGB const*, int, CRGB)+0x12a>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     5a6:	2300      	movs	r3, #0
     5a8:	f88d 3011 	strb.w	r3, [sp, #17]
     5ac:	f88d 3010 	strb.w	r3, [sp, #16]
     5b0:	f88d 300f 	strb.w	r3, [sp, #15]
     5b4:	f88d 300e 	strb.w	r3, [sp, #14]
     5b8:	f88d 300d 	strb.w	r3, [sp, #13]
     5bc:	f88d 300c 	strb.w	r3, [sp, #12]
            for(int i = 0; i < LANES; i++) { mOffsets[i] = other.mOffsets[i]; }

        }

        void initOffsets(int len) {
          int nOffset = 0;
     5c0:	2300      	movs	r3, #0
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
     5c2:	2503      	movs	r5, #3
     5c4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
     5c8:	a805      	add	r0, sp, #20

        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
     5ca:	4619      	mov	r1, r3
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
     5cc:	f88d 5015 	strb.w	r5, [sp, #21]

        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
     5d0:	3101      	adds	r1, #1
            mOffsets[i] = nOffset;
     5d2:	f840 3f04 	str.w	r3, [r0, #4]!
            if((1<<i) & MASK) { nOffset += (len * mAdvance); }
     5d6:	4413      	add	r3, r2

        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
     5d8:	2908      	cmp	r1, #8
     5da:	d1f9      	bne.n	5d0 <CPixelLEDController<(EOrder)10, 8, 255ul>::show(CRGB const*, int, CRGB)+0x50>
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     5dc:	6823      	ldr	r3, [r4, #0]
     5de:	4a63      	ldr	r2, [pc, #396]	; (76c <CPixelLEDController<(EOrder)10, 8, 255ul>::show(CRGB const*, int, CRGB)+0x1ec>)
     5e0:	699b      	ldr	r3, [r3, #24]
     5e2:	4293      	cmp	r3, r2
     5e4:	f040 809b 	bne.w	71e <CPixelLEDController<(EOrder)10, 8, 255ul>::show(CRGB const*, int, CRGB)+0x19e>
class CWS2812SerialController : public CPixelLEDController<RGB_ORDER, 8, 0xFF> {
  WS2812Serial *pserial;
  uint8_t *drawbuffer,*framebuffer;

  void _init(int nLeds) {
    if (pserial == NULL) {
     5e8:	69a5      	ldr	r5, [r4, #24]
     5ea:	2d00      	cmp	r5, #0
     5ec:	f000 809c 	beq.w	728 <CPixelLEDController<(EOrder)10, 8, 255ul>::show(CRGB const*, int, CRGB)+0x1a8>
  virtual void showPixels(PixelController<RGB_ORDER, 8, 0xFF> & pixels) {
    _init(pixels.size());

    uint8_t *p = drawbuffer;

    while(pixels.has(1)) {
     5f0:	9b02      	ldr	r3, [sp, #8]
  virtual void init() { /* do nothing yet */ }

  virtual void showPixels(PixelController<RGB_ORDER, 8, 0xFF> & pixels) {
    _init(pixels.size());

    uint8_t *p = drawbuffer;
     5f2:	69e2      	ldr	r2, [r4, #28]

    while(pixels.has(1)) {
     5f4:	2b00      	cmp	r3, #0
     5f6:	dd53      	ble.n	6a0 <CPixelLEDController<(EOrder)10, 8, 255ul>::show(CRGB const*, int, CRGB)+0x120>
     5f8:	3203      	adds	r2, #3
     5fa:	9b00      	ldr	r3, [sp, #0]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
     5fc:	7819      	ldrb	r1, [r3, #0]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
     5fe:	460b      	mov	r3, r1
     600:	b129      	cbz	r1, 60e <CPixelLEDController<(EOrder)10, 8, 255ul>::show(CRGB const*, int, CRGB)+0x8e>
/// @param j - second byte to add
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
     602:	f89d 300c 	ldrb.w	r3, [sp, #12]
     606:	440b      	add	r3, r1
    if( t > 255) t = 255;
     608:	2bff      	cmp	r3, #255	; 0xff
     60a:	bfa8      	it	ge
     60c:	23ff      	movge	r3, #255	; 0xff
      *p++ = pixels.loadAndScale0();
     60e:	f89d 1012 	ldrb.w	r1, [sp, #18]
     612:	fb01 3303 	mla	r3, r1, r3, r3
     616:	121b      	asrs	r3, r3, #8
     618:	f802 3c03 	strb.w	r3, [r2, #-3]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
     61c:	9b00      	ldr	r3, [sp, #0]
     61e:	7859      	ldrb	r1, [r3, #1]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
     620:	460b      	mov	r3, r1
     622:	b129      	cbz	r1, 630 <CPixelLEDController<(EOrder)10, 8, 255ul>::show(CRGB const*, int, CRGB)+0xb0>
/// @param j - second byte to add
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
     624:	f89d 300d 	ldrb.w	r3, [sp, #13]
     628:	440b      	add	r3, r1
    if( t > 255) t = 255;
     62a:	2bff      	cmp	r3, #255	; 0xff
     62c:	bfa8      	it	ge
     62e:	23ff      	movge	r3, #255	; 0xff
      *p++ = pixels.loadAndScale1();
     630:	f89d 1013 	ldrb.w	r1, [sp, #19]
     634:	fb01 3303 	mla	r3, r1, r3, r3
     638:	121b      	asrs	r3, r3, #8
     63a:	f802 3c02 	strb.w	r3, [r2, #-2]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
     63e:	9b00      	ldr	r3, [sp, #0]
     640:	7899      	ldrb	r1, [r3, #2]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
     642:	460b      	mov	r3, r1
     644:	b129      	cbz	r1, 652 <CPixelLEDController<(EOrder)10, 8, 255ul>::show(CRGB const*, int, CRGB)+0xd2>
/// @param j - second byte to add
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
     646:	f89d 300e 	ldrb.w	r3, [sp, #14]
     64a:	440b      	add	r3, r1
    if( t > 255) t = 255;
     64c:	2bff      	cmp	r3, #255	; 0xff
     64e:	bfa8      	it	ge
     650:	23ff      	movge	r3, #255	; 0xff
      *p++ = pixels.loadAndScale2();
     652:	f89d 1014 	ldrb.w	r1, [sp, #20]
     656:	3203      	adds	r2, #3
     658:	fb01 3303 	mla	r3, r1, r3, r3
     65c:	121b      	asrs	r3, r3, #8
     65e:	f802 3c04 	strb.w	r3, [r2, #-4]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     662:	f89d 100f 	ldrb.w	r1, [sp, #15]
     666:	f89d 700c 	ldrb.w	r7, [sp, #12]
                d[1] = e[1] - d[1];
                d[2] = e[2] - d[2];
     66a:	f89d 000e 	ldrb.w	r0, [sp, #14]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     66e:	1bcf      	subs	r7, r1, r7
                d[1] = e[1] - d[1];
                d[2] = e[2] - d[2];
     670:	f89d 1011 	ldrb.w	r1, [sp, #17]
        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
                d[1] = e[1] - d[1];
     674:	f89d 3010 	ldrb.w	r3, [sp, #16]
     678:	f89d 500d 	ldrb.w	r5, [sp, #13]
                d[2] = e[2] - d[2];
     67c:	1a08      	subs	r0, r1, r0

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     67e:	9902      	ldr	r1, [sp, #8]
        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
                d[1] = e[1] - d[1];
     680:	1b5d      	subs	r5, r3, r5

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     682:	9e00      	ldr	r6, [sp, #0]
     684:	3901      	subs	r1, #1
     686:	f99d 3015 	ldrsb.w	r3, [sp, #21]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     68a:	f88d 700c 	strb.w	r7, [sp, #12]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     68e:	4433      	add	r3, r6
  virtual void showPixels(PixelController<RGB_ORDER, 8, 0xFF> & pixels) {
    _init(pixels.size());

    uint8_t *p = drawbuffer;

    while(pixels.has(1)) {
     690:	2900      	cmp	r1, #0
        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
                d[1] = e[1] - d[1];
     692:	f88d 500d 	strb.w	r5, [sp, #13]
                d[2] = e[2] - d[2];
     696:	f88d 000e 	strb.w	r0, [sp, #14]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     69a:	9300      	str	r3, [sp, #0]
     69c:	9102      	str	r1, [sp, #8]
     69e:	dcad      	bgt.n	5fc <CPixelLEDController<(EOrder)10, 8, 255ul>::show(CRGB const*, int, CRGB)+0x7c>
      *p++ = pixels.loadAndScale1();
      *p++ = pixels.loadAndScale2();
      pixels.stepDithering();
      pixels.advanceData();
    }
    pserial->show();
     6a0:	69a0      	ldr	r0, [r4, #24]
     6a2:	f000 fadf 	bl	c64 <WS2812Serial::show()>
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
  }
     6a6:	b00f      	add	sp, #60	; 0x3c
     6a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     6aa:	4831      	ldr	r0, [pc, #196]	; (770 <CPixelLEDController<(EOrder)10, 8, 255ul>::show(CRGB const*, int, CRGB)+0x1f0>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     6ac:	7803      	ldrb	r3, [r0, #0]
     6ae:	3301      	adds	r3, #1
     6b0:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     6b4:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     6b8:	7003      	strb	r3, [r0, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     6ba:	bf14      	ite	ne
     6bc:	2080      	movne	r0, #128	; 0x80
     6be:	2000      	moveq	r0, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     6c0:	079d      	lsls	r5, r3, #30
     6c2:	d502      	bpl.n	6ca <CPixelLEDController<(EOrder)10, 8, 255ul>::show(CRGB const*, int, CRGB)+0x14a>
     6c4:	f040 0040 	orr.w	r0, r0, #64	; 0x40
     6c8:	b2c0      	uxtb	r0, r0
                if(R & 0x04) { Q |= 0x20; }
     6ca:	075b      	lsls	r3, r3, #29
     6cc:	f10d 0712 	add.w	r7, sp, #18
     6d0:	f10d 030f 	add.w	r3, sp, #15
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     6d4:	f44f 7e80 	mov.w	lr, #256	; 0x100

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
                if(R & 0x04) { Q |= 0x20; }
     6d8:	bf48      	it	mi
     6da:	f040 0020 	orrmi.w	r0, r0, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     6de:	3010      	adds	r0, #16
     6e0:	b2c0      	uxtb	r0, r0
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     6e2:	b1c1      	cbz	r1, 716 <CPixelLEDController<(EOrder)10, 8, 255ul>::show(CRGB const*, int, CRGB)+0x196>
     6e4:	fb9e f1f1 	sdiv	r1, lr, r1
     6e8:	b2c9      	uxtb	r1, r1
     6ea:	1c4d      	adds	r5, r1, #1
     6ec:	b2ed      	uxtb	r5, r5
     6ee:	fb05 0600 	mla	r6, r5, r0, r0
     6f2:	701d      	strb	r5, [r3, #0]
     6f4:	1236      	asrs	r6, r6, #8
     6f6:	fa5f fc86 	uxtb.w	ip, r6
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     6fa:	b10e      	cbz	r6, 700 <CPixelLEDController<(EOrder)10, 8, 255ul>::show(CRGB const*, int, CRGB)+0x180>
     6fc:	f10c 3cff 	add.w	ip, ip, #4294967295
     700:	f803 cc03 	strb.w	ip, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     704:	b105      	cbz	r5, 708 <CPixelLEDController<(EOrder)10, 8, 255ul>::show(CRGB const*, int, CRGB)+0x188>
     706:	7019      	strb	r1, [r3, #0]
     708:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     70a:	42bb      	cmp	r3, r7
     70c:	f43f af58 	beq.w	5c0 <CPixelLEDController<(EOrder)10, 8, 255ul>::show(CRGB const*, int, CRGB)+0x40>
     710:	78d9      	ldrb	r1, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     712:	2900      	cmp	r1, #0
     714:	d1e6      	bne.n	6e4 <CPixelLEDController<(EOrder)10, 8, 255ul>::show(CRGB const*, int, CRGB)+0x164>
     716:	7019      	strb	r1, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     718:	f803 1c03 	strb.w	r1, [r3, #-3]
     71c:	e7f4      	b.n	708 <CPixelLEDController<(EOrder)10, 8, 255ul>::show(CRGB const*, int, CRGB)+0x188>
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     71e:	4620      	mov	r0, r4
     720:	4669      	mov	r1, sp
     722:	4798      	blx	r3
  }
     724:	b00f      	add	sp, #60	; 0x3c
     726:	bdf0      	pop	{r4, r5, r6, r7, pc}
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
            }
        }

        __attribute__((always_inline)) inline int size() { return mLen; }
     728:	9e01      	ldr	r6, [sp, #4]
  WS2812Serial *pserial;
  uint8_t *drawbuffer,*framebuffer;

  void _init(int nLeds) {
    if (pserial == NULL) {
      drawbuffer = (uint8_t*)malloc(nLeds * 3);
     72a:	eb06 0746 	add.w	r7, r6, r6, lsl #1
     72e:	4638      	mov	r0, r7
     730:	f002 fcba 	bl	30a8 <malloc>
     734:	61e0      	str	r0, [r4, #28]
      framebuffer = (uint8_t*)malloc(nLeds * 12);
     736:	00b8      	lsls	r0, r7, #2
     738:	f002 fcb6 	bl	30a8 <malloc>
     73c:	6220      	str	r0, [r4, #32]
      pserial = new WS2812Serial(nLeds, framebuffer, drawbuffer, DATA_PIN, WS2812_RGB);
     73e:	201c      	movs	r0, #28
     740:	f002 f824 	bl	278c <operator new(unsigned int)>
     744:	f04f 0e0e 	mov.w	lr, #14
     748:	6a27      	ldr	r7, [r4, #32]
     74a:	22ff      	movs	r2, #255	; 0xff
     74c:	69e1      	ldr	r1, [r4, #28]
     74e:	61a0      	str	r0, [r4, #24]
     750:	8006      	strh	r6, [r0, #0]
     752:	70c5      	strb	r5, [r0, #3]
     754:	60c5      	str	r5, [r0, #12]
     756:	6105      	str	r5, [r0, #16]
     758:	6185      	str	r5, [r0, #24]
     75a:	f880 e002 	strb.w	lr, [r0, #2]
     75e:	6047      	str	r7, [r0, #4]
     760:	6081      	str	r1, [r0, #8]
     762:	7502      	strb	r2, [r0, #20]
      pserial->begin();
     764:	f000 f99e 	bl	aa4 <WS2812Serial::begin()>
     768:	e742      	b.n	5f0 <CPixelLEDController<(EOrder)10, 8, 255ul>::show(CRGB const*, int, CRGB)+0x70>
     76a:	bf00      	nop
     76c:	00000089 	.word	0x00000089
     770:	20000c8c 	.word	0x20000c8c

00000774 <setup>:
#define DATA_PIN 14

// Define the array of leds
CRGB leds[NUM_LEDS];

void setup() {
     774:	b570      	push	{r4, r5, r6, lr}
     776:	f640 31b8 	movw	r1, #3000	; 0xbb8
     77a:	482f      	ldr	r0, [pc, #188]	; (838 <setup+0xc4>)
     77c:	f000 f8cc 	bl	918 <VisualMicroDebug::init(unsigned long)>
     780:	f44f 4161 	mov.w	r1, #57600	; 0xe100
     784:	482c      	ldr	r0, [pc, #176]	; (838 <setup+0xc4>)
     786:	f000 f8c3 	bl	910 <VisualMicroDebug::begin(unsigned long)>
     78a:	2101      	movs	r1, #1
     78c:	482a      	ldr	r0, [pc, #168]	; (838 <setup+0xc4>)
     78e:	f000 f8a1 	bl	8d4 <VisualMicroDebug::outPacketStart(bool)>
     792:	2800      	cmp	r0, #0
     794:	d141      	bne.n	81a <setup+0xa6>
     796:	2100      	movs	r1, #0
     798:	4827      	ldr	r0, [pc, #156]	; (838 <setup+0xc4>)
     79a:	2201      	movs	r2, #1
     79c:	f000 f95a 	bl	a54 <VisualMicroDebug::start(bool, bool)>
     7a0:	2101      	movs	r1, #1
     7a2:	4825      	ldr	r0, [pc, #148]	; (838 <setup+0xc4>)
     7a4:	f000 f896 	bl	8d4 <VisualMicroDebug::outPacketStart(bool)>
     7a8:	b130      	cbz	r0, 7b8 <setup+0x44>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     7aa:	2106      	movs	r1, #6
     7ac:	4823      	ldr	r0, [pc, #140]	; (83c <setup+0xc8>)
     7ae:	f001 fedf 	bl	2570 <usb_serial_write>
     7b2:	4821      	ldr	r0, [pc, #132]	; (838 <setup+0xc4>)
     7b4:	f000 f8aa 	bl	90c <VisualMicroDebug::outPacketEnd()>
     7b8:	2109      	movs	r1, #9
     7ba:	4821      	ldr	r0, [pc, #132]	; (840 <setup+0xcc>)
     7bc:	f001 fed8 	bl	2570 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     7c0:	4820      	ldr	r0, [pc, #128]	; (844 <setup+0xd0>)
     7c2:	f001 ffe5 	bl	2790 <Print::println()>

#ifdef USE_WS2812SERIAL
	template<SWS2812 CHIPSET, int DATA_PIN, EOrder RGB_ORDER>
	static CLEDController &addLeds(struct CRGB *data, int nLedsOrOffset, int nLedsIfOffset = 0)
	{
		static CWS2812SerialController<DATA_PIN,RGB_ORDER> controller;
     7c6:	4820      	ldr	r0, [pc, #128]	; (848 <setup+0xd4>)
     7c8:	6803      	ldr	r3, [r0, #0]
     7ca:	f013 0201 	ands.w	r2, r3, #1
     7ce:	d11a      	bne.n	806 <setup+0x92>

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
     7d0:	4c1e      	ldr	r4, [pc, #120]	; (84c <setup+0xd8>)
    {
    }

    /// allow construction from a LEDColorCorrection enum
    inline CRGB( LEDColorCorrection colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     7d2:	21ff      	movs	r1, #255	; 0xff
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
     7d4:	4b1e      	ldr	r3, [pc, #120]	; (850 <setup+0xdc>)
     7d6:	2601      	movs	r6, #1
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
     7d8:	6825      	ldr	r5, [r4, #0]
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
     7da:	605a      	str	r2, [r3, #4]
     7dc:	615a      	str	r2, [r3, #20]
        m_pNext = NULL;
     7de:	609a      	str	r2, [r3, #8]
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
     7e0:	749e      	strb	r6, [r3, #18]
     7e2:	7319      	strb	r1, [r3, #12]
     7e4:	7359      	strb	r1, [r3, #13]
     7e6:	7399      	strb	r1, [r3, #14]

    }

    /// allow construction from a ColorTemperature enum
    inline CRGB( ColorTemperature colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     7e8:	73d9      	strb	r1, [r3, #15]
     7ea:	7419      	strb	r1, [r3, #16]
     7ec:	7459      	strb	r1, [r3, #17]
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
     7ee:	b305      	cbz	r5, 832 <setup+0xbe>
        if(m_pTail != NULL) { m_pTail->m_pNext = this; }
     7f0:	4a18      	ldr	r2, [pc, #96]	; (854 <setup+0xe0>)
     7f2:	6811      	ldr	r1, [r2, #0]
     7f4:	b101      	cbz	r1, 7f8 <setup+0x84>
     7f6:	608b      	str	r3, [r1, #8]
    }
  }
public:
  CWS2812SerialController() { pserial = NULL; }
     7f8:	4d17      	ldr	r5, [pc, #92]	; (858 <setup+0xe4>)
     7fa:	2400      	movs	r4, #0
     7fc:	2101      	movs	r1, #1
        m_pTail = this;
     7fe:	6013      	str	r3, [r2, #0]
     800:	601d      	str	r5, [r3, #0]
     802:	619c      	str	r4, [r3, #24]
     804:	6001      	str	r1, [r0, #0]
		return addLeds(&controller, data, nLedsOrOffset, nLedsIfOffset);
     806:	2300      	movs	r3, #0
     808:	2275      	movs	r2, #117	; 0x75
     80a:	4914      	ldr	r1, [pc, #80]	; (85c <setup+0xe8>)
     80c:	4810      	ldr	r0, [pc, #64]	; (850 <setup+0xdc>)
     80e:	f000 fc61 	bl	10d4 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>
	//@}
#endif

	/// Set the global brightness scaling
	/// @param scale a 0-255 value for how much to scale all leds before writing them out
	void setBrightness(uint8_t scale) { m_Scale = scale; }
     812:	4b13      	ldr	r3, [pc, #76]	; (860 <setup+0xec>)
     814:	2254      	movs	r2, #84	; 0x54
     816:	701a      	strb	r2, [r3, #0]
     818:	bd70      	pop	{r4, r5, r6, pc}
     81a:	2110      	movs	r1, #16
     81c:	4811      	ldr	r0, [pc, #68]	; (864 <setup+0xf0>)
     81e:	f001 fea7 	bl	2570 <usb_serial_write>
     822:	210a      	movs	r1, #10
     824:	4804      	ldr	r0, [pc, #16]	; (838 <setup+0xc4>)
     826:	f000 f849 	bl	8bc <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>
     82a:	4803      	ldr	r0, [pc, #12]	; (838 <setup+0xc4>)
     82c:	f000 f86e 	bl	90c <VisualMicroDebug::outPacketEnd()>
     830:	e7b1      	b.n	796 <setup+0x22>

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
     832:	6023      	str	r3, [r4, #0]
     834:	e7dc      	b.n	7f0 <setup+0x7c>
     836:	bf00      	nop
     838:	20000e18 	.word	0x20000e18
     83c:	20000038 	.word	0x20000038
     840:	20000040 	.word	0x20000040
     844:	20000408 	.word	0x20000408
     848:	20000c90 	.word	0x20000c90
     84c:	20000e70 	.word	0x20000e70
     850:	20000c94 	.word	0x20000c94
     854:	20000e80 	.word	0x20000e80
     858:	20000008 	.word	0x20000008
     85c:	20000cb8 	.word	0x20000cb8
     860:	20000e60 	.word	0x20000e60
     864:	20000024 	.word	0x20000024

00000868 <loop>:
	LEDS.setBrightness(84);
}

void fadeall() { for (int i = 0; i < NUM_LEDS; i++) { leds[i].nscale8(250); } }

void loop() {
     868:	b5f0      	push	{r4, r5, r6, r7, lr}
     86a:	2101      	movs	r1, #1
     86c:	b083      	sub	sp, #12
     86e:	4810      	ldr	r0, [pc, #64]	; (8b0 <loop+0x48>)
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
     870:	26ff      	movs	r6, #255	; 0xff
     872:	f001 fe7d 	bl	2570 <usb_serial_write>
     876:	4d0f      	ldr	r5, [pc, #60]	; (8b4 <loop+0x4c>)
	uint8_t hue = 100;
     878:	2364      	movs	r3, #100	; 0x64
     87a:	4f0f      	ldr	r7, [pc, #60]	; (8b8 <loop+0x50>)
	Serial.print("x");
	// First slide the led in one direction
	for (int i = 0; i < NUM_LEDS; i++) {
		// Set the i'th led to red
		leds[i] = CHSV(hue++, 255, 255);
     87c:	1c5c      	adds	r4, r3, #1
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
     87e:	4629      	mov	r1, r5
     880:	a801      	add	r0, sp, #4
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
     882:	f88d 3004 	strb.w	r3, [sp, #4]
     886:	b2e4      	uxtb	r4, r4
     888:	f88d 6005 	strb.w	r6, [sp, #5]
     88c:	f88d 6006 	strb.w	r6, [sp, #6]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
     890:	f000 fcd6 	bl	1240 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
	/// Update all our controllers with the current led colors, using the passed in brightness
	/// @param scale temporarily override the scale
	void show(uint8_t scale);

	/// Update all our controllers with the current led colors
	void show() { show(m_Scale); }
     894:	7839      	ldrb	r1, [r7, #0]
     896:	3503      	adds	r5, #3
     898:	4807      	ldr	r0, [pc, #28]	; (8b8 <loop+0x50>)
     89a:	f000 fc49 	bl	1130 <CFastLED::show(unsigned char)>
		// Show the leds
		FastLED.show();
		// Wait a little bit before we loop around and do it again
		delay(20);
     89e:	2014      	movs	r0, #20
     8a0:	f000 fd84 	bl	13ac <delay>

void loop() {
	uint8_t hue = 100;
	Serial.print("x");
	// First slide the led in one direction
	for (int i = 0; i < NUM_LEDS; i++) {
     8a4:	2cd9      	cmp	r4, #217	; 0xd9
     8a6:	4623      	mov	r3, r4
     8a8:	d1e8      	bne.n	87c <loop+0x14>
		// Show the leds
		FastLED.show();
		// Wait a little bit before we loop around and do it again
		delay(20);
	}
}
     8aa:	b003      	add	sp, #12
     8ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
     8ae:	bf00      	nop
     8b0:	2000004c 	.word	0x2000004c
     8b4:	20000cb8 	.word	0x20000cb8
     8b8:	20000e60 	.word	0x20000e60

000008bc <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>:
     8bc:	4804      	ldr	r0, [pc, #16]	; (8d0 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x14>)
     8be:	6802      	ldr	r2, [r0, #0]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
     8c0:	4411      	add	r1, r2
     8c2:	e001      	b.n	8c8 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0xc>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
     8c4:	4299      	cmp	r1, r3
     8c6:	d302      	bcc.n	8ce <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x12>
     8c8:	6803      	ldr	r3, [r0, #0]
     8ca:	429a      	cmp	r2, r3
     8cc:	d9fa      	bls.n	8c4 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x8>
     8ce:	4770      	bx	lr
     8d0:	20000e8c 	.word	0x20000e8c

000008d4 <VisualMicroDebug::outPacketStart(bool)>:
	return outPacketStart(false);
}


bool VisualMicroDebug::outPacketStart(bool noWait)
{
     8d4:	b410      	push	{r4}
     8d6:	4a0c      	ldr	r2, [pc, #48]	; (908 <VisualMicroDebug::outPacketStart(bool)+0x34>)
     8d8:	4604      	mov	r4, r0
	yield();
#endif


#if defined(VM_DEBUG_BANDWIDTH_THROTTLE_MS) //&& (VM_DBT != VM_DBT_NET_UDP)
	if (!noWait)
     8da:	b971      	cbnz	r1, 8fa <VisualMicroDebug::outPacketStart(bool)+0x26>
	{

		unsigned long ms_wait;
		ms_wait = (DBG_Millis() - lastPacketMS);
     8dc:	6841      	ldr	r1, [r0, #4]
     8de:	6813      	ldr	r3, [r2, #0]
     8e0:	1a59      	subs	r1, r3, r1
		if (ms_wait < VM_DEBUG_BANDWIDTH_THROTTLE_MS)
     8e2:	2931      	cmp	r1, #49	; 0x31
     8e4:	d809      	bhi.n	8fa <VisualMicroDebug::outPacketStart(bool)+0x26>
     8e6:	6810      	ldr	r0, [r2, #0]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
     8e8:	f100 0332 	add.w	r3, r0, #50	; 0x32
     8ec:	1a59      	subs	r1, r3, r1
     8ee:	e001      	b.n	8f4 <VisualMicroDebug::outPacketStart(bool)+0x20>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
     8f0:	4299      	cmp	r1, r3
     8f2:	d302      	bcc.n	8fa <VisualMicroDebug::outPacketStart(bool)+0x26>
     8f4:	6813      	ldr	r3, [r2, #0]
     8f6:	4298      	cmp	r0, r3
     8f8:	d9fa      	bls.n	8f0 <VisualMicroDebug::outPacketStart(bool)+0x1c>
     8fa:	6813      	ldr	r3, [r2, #0]
	transport->beginPacket();
#endif
#endif

	return true;
}
     8fc:	2001      	movs	r0, #1
			//DBG_YieldAndWait(3)
		//}
	}
	//XXX: this should really be after packet end!
	//1501 for cosa - lastPacketMS=millis();
	lastPacketMS = DBG_Millis();
     8fe:	6063      	str	r3, [r4, #4]
	transport->beginPacket();
#endif
#endif

	return true;
}
     900:	f85d 4b04 	ldr.w	r4, [sp], #4
     904:	4770      	bx	lr
     906:	bf00      	nop
     908:	20000e8c 	.word	0x20000e8c

0000090c <VisualMicroDebug::outPacketEnd()>:
     90c:	4770      	bx	lr
     90e:	bf00      	nop

00000910 <VisualMicroDebug::begin(unsigned long)>:
{

	//todo: detect usb type ports that need a delay
	//don't wait for the port unless we add a timeout and disable debug. because we might be discntected
	//todo: see if esp can handle this delay wuith wifi also connecting!
	delay(1000);
     910:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     914:	f000 bd4a 	b.w	13ac <delay>

00000918 <VisualMicroDebug::init(unsigned long)>:
	vmdebug.init();
	vmdebug.stats();
#endif


	baudRate = 0L; //gets a value later if required, only used by cosa for a re-begin!
     918:	2300      	movs	r3, #0
     91a:	6443      	str	r3, [r0, #68]	; 0x44

	lastPacketMS = 0L;
     91c:	6043      	str	r3, [r0, #4]

	//note: a delay at start causes esp8266 wifi to fail to connect!!
	//		the delay can also be switched off via board/platform.txt property=
	if (delayMs > 0)
     91e:	b141      	cbz	r1, 932 <VisualMicroDebug::init(unsigned long)+0x1a>
     920:	4804      	ldr	r0, [pc, #16]	; (934 <VisualMicroDebug::init(unsigned long)+0x1c>)
     922:	6802      	ldr	r2, [r0, #0]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
     924:	4411      	add	r1, r2
     926:	e001      	b.n	92c <VisualMicroDebug::init(unsigned long)+0x14>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
     928:	4299      	cmp	r1, r3
     92a:	d302      	bcc.n	932 <VisualMicroDebug::init(unsigned long)+0x1a>
     92c:	6803      	ldr	r3, [r0, #0]
     92e:	429a      	cmp	r2, r3
     930:	d9fa      	bls.n	928 <VisualMicroDebug::init(unsigned long)+0x10>
     932:	4770      	bx	lr
     934:	20000e8c 	.word	0x20000e8c

00000938 <VisualMicroDebug::sendContinuedACK(unsigned char)>:
}
#endif


void VisualMicroDebug::sendContinuedACK(uint8_t breakPointId)
{
     938:	b538      	push	{r3, r4, r5, lr}
     93a:	4c0f      	ldr	r4, [pc, #60]	; (978 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x40>)
     93c:	460d      	mov	r5, r1
     93e:	2106      	movs	r1, #6
     940:	6823      	ldr	r3, [r4, #0]
			//DBG_YieldAndWait(3)
		//}
	}
	//XXX: this should really be after packet end!
	//1501 for cosa - lastPacketMS=millis();
	lastPacketMS = DBG_Millis();
     942:	6043      	str	r3, [r0, #4]
     944:	480d      	ldr	r0, [pc, #52]	; (97c <VisualMicroDebug::sendContinuedACK(unsigned char)+0x44>)
     946:	f001 fe13 	bl	2570 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     94a:	220a      	movs	r2, #10
     94c:	2300      	movs	r3, #0
     94e:	4629      	mov	r1, r5
     950:	480b      	ldr	r0, [pc, #44]	; (980 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x48>)
     952:	f001 ff2d 	bl	27b0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     956:	2106      	movs	r1, #6
     958:	480a      	ldr	r0, [pc, #40]	; (984 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x4c>)
     95a:	f001 fe09 	bl	2570 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     95e:	4808      	ldr	r0, [pc, #32]	; (980 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x48>)
     960:	f001 ff16 	bl	2790 <Print::println()>
     964:	6822      	ldr	r2, [r4, #0]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
     966:	f102 0132 	add.w	r1, r2, #50	; 0x32
     96a:	e001      	b.n	970 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x38>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
     96c:	4299      	cmp	r1, r3
     96e:	d302      	bcc.n	976 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x3e>
     970:	6823      	ldr	r3, [r4, #0]
     972:	429a      	cmp	r2, r3
     974:	d9fa      	bls.n	96c <VisualMicroDebug::sendContinuedACK(unsigned char)+0x34>
     976:	bd38      	pop	{r3, r4, r5, pc}
     978:	20000e8c 	.word	0x20000e8c
     97c:	20000068 	.word	0x20000068
     980:	20000408 	.word	0x20000408
     984:	20000070 	.word	0x20000070

00000988 <VisualMicroDebug::breakWait(unsigned char)>:
#if defined(VM_DBT) //&& ( VM_DBT == VM_DBT_HARDWARESERIAL || VM_DBT == VM_DBT_FASTSERIAL)
//TODO: implement sturcture serial com!
//we never get called if break was not set during compliation
//return _vm_cmd so that we can setVariable if required (caller needs to know result)
uint8_t VisualMicroDebug::breakWait(uint8_t breakPointId)
{
     988:	b538      	push	{r3, r4, r5, lr}
	//console write not working yet
#if defined(VM_DBT) && (VM_DBT == VM_DBT_NET_CONSOLE)
	return 'c';
#endif

	if (!alwaysBreak)
     98a:	7e03      	ldrb	r3, [r0, #24]
     98c:	b90b      	cbnz	r3, 992 <VisualMicroDebug::breakWait(unsigned char)+0xa>
		case 'h':
			//Serial.println("Remote debug session started");
#if defined(VM_DBT) && (VM_DBT == VM_DBT_NET_UDP)
			alwaysBreak = true;
#endif
			return 'c';
     98e:	2063      	movs	r0, #99	; 0x63
	//sendContinuedACK(breakPointId);
	//return 'c'; //if we get here we are continuing!

	//	return '?'; //software serial rubbish detected?
	return 'e';
}
     990:	bd38      	pop	{r3, r4, r5, pc}
     992:	460d      	mov	r5, r1
     994:	4604      	mov	r4, r0
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
     996:	f001 fd85 	bl	24a4 <usb_serial_available>
#endif

	uint8_t b;

	//break/pause until we get a command
	if (available() == 0)
     99a:	f010 0fff 	tst.w	r0, #255	; 0xff
     99e:	d101      	bne.n	9a4 <VisualMicroDebug::breakWait(unsigned char)+0x1c>
		if (!UDPConnectionStarted) {
			return 'c';
		}
#endif

		return 'e';
     9a0:	2065      	movs	r0, #101	; 0x65
     9a2:	bd38      	pop	{r3, r4, r5, pc}
     9a4:	f001 fd7e 	bl	24a4 <usb_serial_available>
	//doh!  better if we have any key to continue so users data doesn't get lost so much. 
	//NOTE. pause/breakpoints are best used with dedicated port!
	//while(true)
	//{

	while (available() > 0)
     9a8:	f010 0fff 	tst.w	r0, #255	; 0xff
     9ac:	d0f8      	beq.n	9a0 <VisualMicroDebug::breakWait(unsigned char)+0x18>
        virtual int read() { return usb_serial_getchar(); }
     9ae:	f001 fdb9 	bl	2524 <usb_serial_getchar>
		//		while(VM_DEBUGGER_SOFT_TRANSPORT.available()>0)
		//		{
		//			b = VM_DEBUGGER_SOFT_TRANSPORT.read();
		//#endif
		//debug break commands
		switch (b)
     9b2:	b2c0      	uxtb	r0, r0
     9b4:	f1a0 0358 	sub.w	r3, r0, #88	; 0x58
     9b8:	2b1e      	cmp	r3, #30
     9ba:	d8f3      	bhi.n	9a4 <VisualMicroDebug::breakWait(unsigned char)+0x1c>
     9bc:	a201      	add	r2, pc, #4	; (adr r2, 9c4 <VisualMicroDebug::breakWait(unsigned char)+0x3c>)
     9be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     9c2:	bf00      	nop
     9c4:	00000a4d 	.word	0x00000a4d
     9c8:	000009a5 	.word	0x000009a5
     9cc:	000009a5 	.word	0x000009a5
     9d0:	000009a5 	.word	0x000009a5
     9d4:	000009a5 	.word	0x000009a5
     9d8:	000009a5 	.word	0x000009a5
     9dc:	000009a5 	.word	0x000009a5
     9e0:	000009a5 	.word	0x000009a5
     9e4:	000009a5 	.word	0x000009a5
     9e8:	000009a5 	.word	0x000009a5
     9ec:	000009a5 	.word	0x000009a5
     9f0:	00000a41 	.word	0x00000a41
     9f4:	000009a5 	.word	0x000009a5
     9f8:	000009a5 	.word	0x000009a5
     9fc:	000009a5 	.word	0x000009a5
     a00:	000009a5 	.word	0x000009a5
     a04:	0000098f 	.word	0x0000098f
     a08:	000009a5 	.word	0x000009a5
     a0c:	000009a5 	.word	0x000009a5
     a10:	000009a5 	.word	0x000009a5
     a14:	000009a5 	.word	0x000009a5
     a18:	000009a5 	.word	0x000009a5
     a1c:	000009a5 	.word	0x000009a5
     a20:	000009a5 	.word	0x000009a5
     a24:	000009a5 	.word	0x000009a5
     a28:	0000098f 	.word	0x0000098f
     a2c:	000009a5 	.word	0x000009a5
     a30:	000009a5 	.word	0x000009a5
     a34:	000009a5 	.word	0x000009a5
     a38:	000009a5 	.word	0x000009a5
     a3c:	00000991 	.word	0x00000991
		{

		case 'c':
			sendContinuedACK(breakPointId);
     a40:	4620      	mov	r0, r4
     a42:	4629      	mov	r1, r5
     a44:	f7ff ff78 	bl	938 <VisualMicroDebug::sendContinuedACK(unsigned char)>
			return 'c'; //if we get here we are continuing!
     a48:	2063      	movs	r0, #99	; 0x63
     a4a:	bd38      	pop	{r3, r4, r5, pc}
					  //	sendContinuedACK(breakPointId);
					  //	return;

					  //switch off break until re-start. for dev/testing
		case 'X':
			alwaysBreak = false;
     a4c:	2300      	movs	r3, #0
			return 'c';
     a4e:	2063      	movs	r0, #99	; 0x63
					  //	sendContinuedACK(breakPointId);
					  //	return;

					  //switch off break until re-start. for dev/testing
		case 'X':
			alwaysBreak = false;
     a50:	7623      	strb	r3, [r4, #24]
     a52:	bd38      	pop	{r3, r4, r5, pc}

00000a54 <VisualMicroDebug::start(bool, bool)>:
}
#endif


void VisualMicroDebug::start(bool waitForKeyToStart, bool _alwaysBreak)
{
     a54:	b570      	push	{r4, r5, r6, lr}
     a56:	4605      	mov	r5, r0
     a58:	4616      	mov	r6, r2
#if defined (VM_DEBUG_BREAKPAUSE)
	if (waitForKeyToStart)
     a5a:	b1a9      	cbz	r1, a88 <VisualMicroDebug::start(bool, bool)+0x34>
	{
		alwaysBreak = true;
     a5c:	2301      	movs	r3, #1
     a5e:	4c0b      	ldr	r4, [pc, #44]	; (a8c <VisualMicroDebug::start(bool, bool)+0x38>)
     a60:	7603      	strb	r3, [r0, #24]

		//server should know we are waiting sendMessage("Press any key to continue");
		while (breakWait(0) != 'c') {
     a62:	2100      	movs	r1, #0
     a64:	4628      	mov	r0, r5
     a66:	f7ff ff8f 	bl	988 <VisualMicroDebug::breakWait(unsigned char)>
     a6a:	2863      	cmp	r0, #99	; 0x63
     a6c:	d00c      	beq.n	a88 <VisualMicroDebug::start(bool, bool)+0x34>
     a6e:	6822      	ldr	r2, [r4, #0]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
     a70:	1c51      	adds	r1, r2, #1
     a72:	6823      	ldr	r3, [r4, #0]

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
     a74:	429a      	cmp	r2, r3
     a76:	d8f4      	bhi.n	a62 <VisualMicroDebug::start(bool, bool)+0xe>
     a78:	4299      	cmp	r1, r3
     a7a:	d2fa      	bcs.n	a72 <VisualMicroDebug::start(bool, bool)+0x1e>
	if (waitForKeyToStart)
	{
		alwaysBreak = true;

		//server should know we are waiting sendMessage("Press any key to continue");
		while (breakWait(0) != 'c') {
     a7c:	2100      	movs	r1, #0
     a7e:	4628      	mov	r0, r5
     a80:	f7ff ff82 	bl	988 <VisualMicroDebug::breakWait(unsigned char)>
     a84:	2863      	cmp	r0, #99	; 0x63
     a86:	d1f2      	bne.n	a6e <VisualMicroDebug::start(bool, bool)+0x1a>
			DBG_YieldAndWait(1);
		}
		//breakWait(0);
	}
	alwaysBreak = _alwaysBreak;
     a88:	762e      	strb	r6, [r5, #24]
     a8a:	bd70      	pop	{r4, r5, r6, pc}
     a8c:	20000e8c 	.word	0x20000e8c

00000a90 <_GLOBAL__sub_I__ZN16VisualMicroDebug16DBG_YieldAndWaitEm>:
	//wait if we have to
	//try to prevent new users from overloading bandwidth and filling windows buffer
	//can be overriden via preferences
	//defaults to 50ms; needs to allow time for windows to recover if it pauses, so we need to be slower than the extensions and debugger can process + a bit

	BreakStartMillis = 0L;
     a90:	4b03      	ldr	r3, [pc, #12]	; (aa0 <_GLOBAL__sub_I__ZN16VisualMicroDebug16DBG_YieldAndWaitEm+0x10>)
     a92:	2200      	movs	r2, #0
     a94:	609a      	str	r2, [r3, #8]
	BreakPrevMillis = 0L;
     a96:	60da      	str	r2, [r3, #12]
	InBreakMsgRepeatMS = 0L;
     a98:	611a      	str	r2, [r3, #16]
	InBreakMsgSent = 0L;
     a9a:	615a      	str	r2, [r3, #20]
     a9c:	4770      	bx	lr
     a9e:	bf00      	nop
     aa0:	20000e18 	.word	0x20000e18

00000aa4 <WS2812Serial::begin()>:
*/

#include "WS2812Serial.h"

bool WS2812Serial::begin()
{
     aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t hwtrigger;
#else	
	uint32_t divisor, portconfig, hwtrigger;
	KINETISK_UART_t *uart;
#endif
	switch (pin) {
     aa6:	7883      	ldrb	r3, [r0, #2]
     aa8:	3b01      	subs	r3, #1
     aaa:	2b26      	cmp	r3, #38	; 0x26
     aac:	f200 80a5 	bhi.w	bfa <WS2812Serial::begin()+0x156>
     ab0:	e8df f003 	tbb	[pc, r3]
     ab4:	a3a3a391 	.word	0xa3a3a391
     ab8:	9aa3a3a3 	.word	0x9aa3a3a3
     abc:	a3a3a3a3 	.word	0xa3a3a3a3
     ac0:	a3a36ba3 	.word	0xa3a36ba3
     ac4:	7da3a374 	.word	0x7da3a374
     ac8:	88a3a3a3 	.word	0x88a3a3a3
     acc:	a3a3a3a3 	.word	0xa3a3a3a3
     ad0:	a3a3a314 	.word	0xa3a3a314
     ad4:	a3a3a3a3 	.word	0xa3a3a3a3
     ad8:	a3a3      	.short	0xa3a3
     ada:	7d          	.byte	0x7d
     adb:	00          	.byte	0x00
		CCM_CCGR5 |= CCM_CCGR5_LPUART1(CCM_CCGR_ON);
		hwtrigger = DMAMUX_SOURCE_LPUART1_TX; 
		break;
	  case 29: // Serial7
		uart = &IMXRT_LPUART7; 
		CCM_CCGR5 |= CCM_CCGR5_LPUART7(CCM_CCGR_ON);
     adc:	4a4e      	ldr	r2, [pc, #312]	; (c18 <WS2812Serial::begin()+0x174>)
		uart = &IMXRT_LPUART1; 
		CCM_CCGR5 |= CCM_CCGR5_LPUART1(CCM_CCGR_ON);
		hwtrigger = DMAMUX_SOURCE_LPUART1_TX; 
		break;
	  case 29: // Serial7
		uart = &IMXRT_LPUART7; 
     ade:	494f      	ldr	r1, [pc, #316]	; (c1c <WS2812Serial::begin()+0x178>)
		CCM_CCGR5 |= CCM_CCGR5_LPUART7(CCM_CCGR_ON);
     ae0:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
		hwtrigger = DMAMUX_SOURCE_LPUART7_TX; 
		break;
     ae2:	4d4f      	ldr	r5, [pc, #316]	; (c20 <WS2812Serial::begin()+0x17c>)
		CCM_CCGR5 |= CCM_CCGR5_LPUART1(CCM_CCGR_ON);
		hwtrigger = DMAMUX_SOURCE_LPUART1_TX; 
		break;
	  case 29: // Serial7
		uart = &IMXRT_LPUART7; 
		CCM_CCGR5 |= CCM_CCGR5_LPUART7(CCM_CCGR_ON);
     ae4:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
		uart = &IMXRT_LPUART1; 
		CCM_CCGR5 |= CCM_CCGR5_LPUART1(CCM_CCGR_ON);
		hwtrigger = DMAMUX_SOURCE_LPUART1_TX; 
		break;
	  case 29: // Serial7
		uart = &IMXRT_LPUART7; 
     ae8:	6181      	str	r1, [r0, #24]
		CCM_CCGR5 |= CCM_CCGR5_LPUART7(CCM_CCGR_ON);
     aea:	67d3      	str	r3, [r2, #124]	; 0x7c
#endif		
#endif
	  default:
		return false; // pin not supported
	}
	if (!dma) {
     aec:	68c6      	ldr	r6, [r0, #12]
     aee:	4604      	mov	r4, r0
     af0:	2e00      	cmp	r6, #0
     af2:	f000 8086 	beq.w	c02 <WS2812Serial::begin()+0x15e>
		if (!dma) return false; // unable to allocate DMA channel
	}
#if defined(__IMXRT1062__)
	// Convert Baud
	// Computed values for 4mhz  
	uart->CTRL = 0;	// clear everything
     af6:	69a2      	ldr	r2, [r4, #24]
     af8:	2300      	movs	r3, #0
	uart->BAUD = LPUART_BAUD_OSR(5) | LPUART_BAUD_SBR(1) | LPUART_BAUD_TDMAE;  // set baud configure for transfer DMA
     afa:	494a      	ldr	r1, [pc, #296]	; (c24 <WS2812Serial::begin()+0x180>)
		if (!dma) return false; // unable to allocate DMA channel
	}
#if defined(__IMXRT1062__)
	// Convert Baud
	// Computed values for 4mhz  
	uart->CTRL = 0;	// clear everything
     afc:	6193      	str	r3, [r2, #24]
	uart->BAUD = LPUART_BAUD_OSR(5) | LPUART_BAUD_SBR(1) | LPUART_BAUD_TDMAE;  // set baud configure for transfer DMA
     afe:	6111      	str	r1, [r2, #16]
	uart->PINCFG = 0;
     b00:	60d3      	str	r3, [r2, #12]
	uint16_t tx_fifo_size = (((uart->FIFO >> 4) & 0x7) << 2);
     b02:	6a93      	ldr	r3, [r2, #40]	; 0x28
     b04:	089b      	lsrs	r3, r3, #2
     b06:	f003 031c 	and.w	r3, r3, #28
	uint8_t tx_water = (tx_fifo_size < 16) ? tx_fifo_size >> 1 : 7;
     b0a:	2b0f      	cmp	r3, #15
     b0c:	d877      	bhi.n	bfe <WS2812Serial::begin()+0x15a>
     b0e:	105b      	asrs	r3, r3, #1
     b10:	f003 0303 	and.w	r3, r3, #3
     b14:	b2db      	uxtb	r3, r3
//	uart->WATER = LPUART_WATER_TXWATER(1);	// guessing here? 
//	uart->FIFO = 0;	// disable the fifo.
	uart->WATER = LPUART_WATER_TXWATER(tx_water);
     b16:	62d3      	str	r3, [r2, #44]	; 0x2c
#if defined(ARDUINO_TEENSY41)
	if (pin == 35) pinmuxval = 1;
#endif
	*(portConfigRegister(pin)) = pinmuxval;

	dma->destination((volatile uint8_t&)uart->DATA);
     b18:	f102 001c 	add.w	r0, r2, #28
	uint16_t tx_fifo_size = (((uart->FIFO >> 4) & 0x7) << 2);
	uint8_t tx_water = (tx_fifo_size < 16) ? tx_fifo_size >> 1 : 7;
//	uart->WATER = LPUART_WATER_TXWATER(1);	// guessing here? 
//	uart->FIFO = 0;	// disable the fifo.
	uart->WATER = LPUART_WATER_TXWATER(tx_water);
	uart->FIFO |= LPUART_FIFO_TXFE;
     b1c:	6a91      	ldr	r1, [r2, #40]	; 0x28

	uart->CTRL = (LPUART_CTRL_TE /*| LPUART_CTRL_TIE */ | LPUART_CTRL_TXINV); // enable transmitter and invert
	// We need to configure the TX pin now.
	*(portControlRegister(pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
     b1e:	f04f 0ed9 	mov.w	lr, #217	; 0xd9
//	uart->WATER = LPUART_WATER_TXWATER(1);	// guessing here? 
//	uart->FIFO = 0;	// disable the fifo.
	uart->WATER = LPUART_WATER_TXWATER(tx_water);
	uart->FIFO |= LPUART_FIFO_TXFE;

	uart->CTRL = (LPUART_CTRL_TE /*| LPUART_CTRL_TIE */ | LPUART_CTRL_TXINV); // enable transmitter and invert
     b22:	4f41      	ldr	r7, [pc, #260]	; (c28 <WS2812Serial::begin()+0x184>)
	void destination(volatile signed char &p) { destination(*(volatile uint8_t *)&p); }
	void destination(volatile unsigned char &p) {
		TCD->DADDR = &p;
		TCD->DOFF = 0;
		TCD->ATTR_DST = 0;
		if ((uint32_t)&p < 0x40000000 || TCD->NBYTES == 0) TCD->NBYTES = 1;
     b24:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
	uint16_t tx_fifo_size = (((uart->FIFO >> 4) & 0x7) << 2);
	uint8_t tx_water = (tx_fifo_size < 16) ? tx_fifo_size >> 1 : 7;
//	uart->WATER = LPUART_WATER_TXWATER(1);	// guessing here? 
//	uart->FIFO = 0;	// disable the fifo.
	uart->WATER = LPUART_WATER_TXWATER(tx_water);
	uart->FIFO |= LPUART_FIFO_TXFE;
     b28:	f041 0180 	orr.w	r1, r1, #128	; 0x80

	uart->CTRL = (LPUART_CTRL_TE /*| LPUART_CTRL_TIE */ | LPUART_CTRL_TXINV); // enable transmitter and invert
	// We need to configure the TX pin now.
	*(portControlRegister(pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
     b2c:	4b3f      	ldr	r3, [pc, #252]	; (c2c <WS2812Serial::begin()+0x188>)
	uint16_t tx_fifo_size = (((uart->FIFO >> 4) & 0x7) << 2);
	uint8_t tx_water = (tx_fifo_size < 16) ? tx_fifo_size >> 1 : 7;
//	uart->WATER = LPUART_WATER_TXWATER(1);	// guessing here? 
//	uart->FIFO = 0;	// disable the fifo.
	uart->WATER = LPUART_WATER_TXWATER(tx_water);
	uart->FIFO |= LPUART_FIFO_TXFE;
     b2e:	6291      	str	r1, [r2, #40]	; 0x28
	// Use a single variable as the data destination.  Typically a register
	// for transmitting data to one of the hardware peripherals is used.
	void destination(volatile signed char &p) { destination(*(volatile uint8_t *)&p); }
	void destination(volatile unsigned char &p) {
		TCD->DADDR = &p;
		TCD->DOFF = 0;
     b30:	f04f 0100 	mov.w	r1, #0

	uart->CTRL = (LPUART_CTRL_TE /*| LPUART_CTRL_TIE */ | LPUART_CTRL_TXINV); // enable transmitter and invert
     b34:	6197      	str	r7, [r2, #24]
	*(portControlRegister(pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
	uint32_t pinmuxval = 2; // most of them use mux ALT2
#if defined(ARDUINO_TEENSY41)
	if (pin == 35) pinmuxval = 1;
#endif
	*(portConfigRegister(pin)) = pinmuxval;
     b36:	f04f 0702 	mov.w	r7, #2
	uart->WATER = LPUART_WATER_TXWATER(tx_water);
	uart->FIFO |= LPUART_FIFO_TXFE;

	uart->CTRL = (LPUART_CTRL_TE /*| LPUART_CTRL_TIE */ | LPUART_CTRL_TXINV); // enable transmitter and invert
	// We need to configure the TX pin now.
	*(portControlRegister(pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
     b3a:	78a2      	ldrb	r2, [r4, #2]
     b3c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
     b40:	6892      	ldr	r2, [r2, #8]
     b42:	f8c2 e000 	str.w	lr, [r2]
	uint32_t pinmuxval = 2; // most of them use mux ALT2
#if defined(ARDUINO_TEENSY41)
	if (pin == 35) pinmuxval = 1;
#endif
	*(portConfigRegister(pin)) = pinmuxval;
     b46:	78a2      	ldrb	r2, [r4, #2]
     b48:	eb03 1302 	add.w	r3, r3, r2, lsl #4

	// Use a single variable as the data destination.  Typically a register
	// for transmitting data to one of the hardware peripherals is used.
	void destination(volatile signed char &p) { destination(*(volatile uint8_t *)&p); }
	void destination(volatile unsigned char &p) {
		TCD->DADDR = &p;
     b4c:	6832      	ldr	r2, [r6, #0]
     b4e:	685b      	ldr	r3, [r3, #4]
     b50:	601f      	str	r7, [r3, #0]
     b52:	6110      	str	r0, [r2, #16]
		TCD->DOFF = 0;
     b54:	8291      	strh	r1, [r2, #20]
		TCD->ATTR_DST = 0;
     b56:	7191      	strb	r1, [r2, #6]
     b58:	6832      	ldr	r2, [r6, #0]
		if ((uint32_t)&p < 0x40000000 || TCD->NBYTES == 0) TCD->NBYTES = 1;
     b5a:	d301      	bcc.n	b60 <WS2812Serial::begin()+0xbc>
     b5c:	6893      	ldr	r3, [r2, #8]
     b5e:	b913      	cbnz	r3, b66 <WS2812Serial::begin()+0xc2>
     b60:	2301      	movs	r3, #1
     b62:	6093      	str	r3, [r2, #8]
     b64:	6832      	ldr	r2, [r6, #0]
     b66:	68e6      	ldr	r6, [r4, #12]
		TCD->DLASTSGA = 0;
     b68:	2300      	movs	r3, #0
	// trigger moves a single data unit, which is typically 8, 16 or
	// 32 bits.  If a channel is configured for 200 transfers

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
     b6a:	4831      	ldr	r0, [pc, #196]	; (c30 <WS2812Serial::begin()+0x18c>)
	void destination(volatile unsigned char &p) {
		TCD->DADDR = &p;
		TCD->DOFF = 0;
		TCD->ATTR_DST = 0;
		if ((uint32_t)&p < 0x40000000 || TCD->NBYTES == 0) TCD->NBYTES = 1;
		TCD->DLASTSGA = 0;
     b6c:	6193      	str	r3, [r2, #24]
	*(portConfigRegister(pin)) = portconfig;
	dma->destination(uart->D);
#endif 

	dma->triggerAtHardwareEvent(hwtrigger);
	memset(drawBuffer, 0, numled * 3);
     b6e:	4619      	mov	r1, r3
     b70:	8822      	ldrh	r2, [r4, #0]
	// trigger moves a single data unit, which is typically 8, 16 or
	// 32 bits.  If a channel is configured for 200 transfers

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
     b72:	7936      	ldrb	r6, [r6, #4]
     b74:	eb02 0242 	add.w	r2, r2, r2, lsl #1
		//mux = (volatile uint32_t *)&(DMAMUX_CHCFG0) + channel;
		*mux = 0;
     b78:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
     b7c:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
     b80:	68a0      	ldr	r0, [r4, #8]
     b82:	f002 fd51 	bl	3628 <memset>
	return true;
     b86:	2001      	movs	r0, #1
     b88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		CCM_CCGR1 |= CCM_CCGR1_LPUART4(CCM_CCGR_ON);
		hwtrigger = DMAMUX_SOURCE_LPUART4_TX; 
		break;
	  case 14: // Serial3
		uart = &IMXRT_LPUART2; 
		CCM_CCGR0 |= CCM_CCGR0_LPUART2(CCM_CCGR_ON);
     b8a:	4a23      	ldr	r2, [pc, #140]	; (c18 <WS2812Serial::begin()+0x174>)
		uart = &IMXRT_LPUART4; 
		CCM_CCGR1 |= CCM_CCGR1_LPUART4(CCM_CCGR_ON);
		hwtrigger = DMAMUX_SOURCE_LPUART4_TX; 
		break;
	  case 14: // Serial3
		uart = &IMXRT_LPUART2; 
     b8c:	4929      	ldr	r1, [pc, #164]	; (c34 <WS2812Serial::begin()+0x190>)
		CCM_CCGR0 |= CCM_CCGR0_LPUART2(CCM_CCGR_ON);
     b8e:	6e93      	ldr	r3, [r2, #104]	; 0x68
		hwtrigger = DMAMUX_SOURCE_LPUART2_TX; 
		break;
     b90:	4d29      	ldr	r5, [pc, #164]	; (c38 <WS2812Serial::begin()+0x194>)
		CCM_CCGR1 |= CCM_CCGR1_LPUART4(CCM_CCGR_ON);
		hwtrigger = DMAMUX_SOURCE_LPUART4_TX; 
		break;
	  case 14: // Serial3
		uart = &IMXRT_LPUART2; 
		CCM_CCGR0 |= CCM_CCGR0_LPUART2(CCM_CCGR_ON);
     b92:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
		uart = &IMXRT_LPUART4; 
		CCM_CCGR1 |= CCM_CCGR1_LPUART4(CCM_CCGR_ON);
		hwtrigger = DMAMUX_SOURCE_LPUART4_TX; 
		break;
	  case 14: // Serial3
		uart = &IMXRT_LPUART2; 
     b96:	6181      	str	r1, [r0, #24]
		CCM_CCGR0 |= CCM_CCGR0_LPUART2(CCM_CCGR_ON);
     b98:	6693      	str	r3, [r2, #104]	; 0x68
		hwtrigger = DMAMUX_SOURCE_LPUART2_TX; 
		break;
     b9a:	e7a7      	b.n	aec <WS2812Serial::begin()+0x48>
	  case 17: // Serial4
		uart = &IMXRT_LPUART3; 
		CCM_CCGR0 |= CCM_CCGR0_LPUART3(CCM_CCGR_ON);
     b9c:	4a1e      	ldr	r2, [pc, #120]	; (c18 <WS2812Serial::begin()+0x174>)
		uart = &IMXRT_LPUART2; 
		CCM_CCGR0 |= CCM_CCGR0_LPUART2(CCM_CCGR_ON);
		hwtrigger = DMAMUX_SOURCE_LPUART2_TX; 
		break;
	  case 17: // Serial4
		uart = &IMXRT_LPUART3; 
     b9e:	4927      	ldr	r1, [pc, #156]	; (c3c <WS2812Serial::begin()+0x198>)
		CCM_CCGR0 |= CCM_CCGR0_LPUART3(CCM_CCGR_ON);
     ba0:	6e93      	ldr	r3, [r2, #104]	; 0x68
		hwtrigger = DMAMUX_SOURCE_LPUART3_TX; 
		break;
     ba2:	4d27      	ldr	r5, [pc, #156]	; (c40 <WS2812Serial::begin()+0x19c>)
		CCM_CCGR0 |= CCM_CCGR0_LPUART2(CCM_CCGR_ON);
		hwtrigger = DMAMUX_SOURCE_LPUART2_TX; 
		break;
	  case 17: // Serial4
		uart = &IMXRT_LPUART3; 
		CCM_CCGR0 |= CCM_CCGR0_LPUART3(CCM_CCGR_ON);
     ba4:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
		uart = &IMXRT_LPUART2; 
		CCM_CCGR0 |= CCM_CCGR0_LPUART2(CCM_CCGR_ON);
		hwtrigger = DMAMUX_SOURCE_LPUART2_TX; 
		break;
	  case 17: // Serial4
		uart = &IMXRT_LPUART3; 
     ba8:	6181      	str	r1, [r0, #24]
		CCM_CCGR0 |= CCM_CCGR0_LPUART3(CCM_CCGR_ON);
     baa:	6693      	str	r3, [r2, #104]	; 0x68
		hwtrigger = DMAMUX_SOURCE_LPUART3_TX; 
		break;
     bac:	e79e      	b.n	aec <WS2812Serial::begin()+0x48>
	  case 39: // Serial5 alt
#elif defined(ARDUINO_TEENSY41)
	  case 47:
#endif
		uart = &IMXRT_LPUART8; 
		CCM_CCGR6 |= CCM_CCGR6_LPUART8(CCM_CCGR_ON);
     bae:	4a1a      	ldr	r2, [pc, #104]	; (c18 <WS2812Serial::begin()+0x174>)
#if defined(ARDUINO_TEENSY40)
	  case 39: // Serial5 alt
#elif defined(ARDUINO_TEENSY41)
	  case 47:
#endif
		uart = &IMXRT_LPUART8; 
     bb0:	4924      	ldr	r1, [pc, #144]	; (c44 <WS2812Serial::begin()+0x1a0>)
		CCM_CCGR6 |= CCM_CCGR6_LPUART8(CCM_CCGR_ON);
     bb2:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
		hwtrigger = DMAMUX_SOURCE_LPUART8_TX; 
		break;
     bb6:	4d24      	ldr	r5, [pc, #144]	; (c48 <WS2812Serial::begin()+0x1a4>)
	  case 39: // Serial5 alt
#elif defined(ARDUINO_TEENSY41)
	  case 47:
#endif
		uart = &IMXRT_LPUART8; 
		CCM_CCGR6 |= CCM_CCGR6_LPUART8(CCM_CCGR_ON);
     bb8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
#if defined(ARDUINO_TEENSY40)
	  case 39: // Serial5 alt
#elif defined(ARDUINO_TEENSY41)
	  case 47:
#endif
		uart = &IMXRT_LPUART8; 
     bbc:	6181      	str	r1, [r0, #24]
		CCM_CCGR6 |= CCM_CCGR6_LPUART8(CCM_CCGR_ON);
     bbe:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		hwtrigger = DMAMUX_SOURCE_LPUART8_TX; 
		break;
     bc2:	e793      	b.n	aec <WS2812Serial::begin()+0x48>
	  case 24: // Serial6
		uart = &IMXRT_LPUART1; 
		CCM_CCGR5 |= CCM_CCGR5_LPUART1(CCM_CCGR_ON);
     bc4:	4a14      	ldr	r2, [pc, #80]	; (c18 <WS2812Serial::begin()+0x174>)
		uart = &IMXRT_LPUART8; 
		CCM_CCGR6 |= CCM_CCGR6_LPUART8(CCM_CCGR_ON);
		hwtrigger = DMAMUX_SOURCE_LPUART8_TX; 
		break;
	  case 24: // Serial6
		uart = &IMXRT_LPUART1; 
     bc6:	4921      	ldr	r1, [pc, #132]	; (c4c <WS2812Serial::begin()+0x1a8>)
		CCM_CCGR5 |= CCM_CCGR5_LPUART1(CCM_CCGR_ON);
     bc8:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
		hwtrigger = DMAMUX_SOURCE_LPUART1_TX; 
		break;
     bca:	4d21      	ldr	r5, [pc, #132]	; (c50 <WS2812Serial::begin()+0x1ac>)
		CCM_CCGR6 |= CCM_CCGR6_LPUART8(CCM_CCGR_ON);
		hwtrigger = DMAMUX_SOURCE_LPUART8_TX; 
		break;
	  case 24: // Serial6
		uart = &IMXRT_LPUART1; 
		CCM_CCGR5 |= CCM_CCGR5_LPUART1(CCM_CCGR_ON);
     bcc:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
		uart = &IMXRT_LPUART8; 
		CCM_CCGR6 |= CCM_CCGR6_LPUART8(CCM_CCGR_ON);
		hwtrigger = DMAMUX_SOURCE_LPUART8_TX; 
		break;
	  case 24: // Serial6
		uart = &IMXRT_LPUART1; 
     bd0:	6181      	str	r1, [r0, #24]
		CCM_CCGR5 |= CCM_CCGR5_LPUART1(CCM_CCGR_ON);
     bd2:	67d3      	str	r3, [r2, #124]	; 0x7c
		hwtrigger = DMAMUX_SOURCE_LPUART1_TX; 
		break;
     bd4:	e78a      	b.n	aec <WS2812Serial::begin()+0x48>
	  case 1: // Serial1
#if defined(ARDUINO_TEENSY41)
	  case 53:
#endif
		uart = &IMXRT_LPUART6; 
		CCM_CCGR3 |= CCM_CCGR3_LPUART6(CCM_CCGR_ON);
     bd6:	4a10      	ldr	r2, [pc, #64]	; (c18 <WS2812Serial::begin()+0x174>)
#elif defined(__IMXRT1062__)
	  case 1: // Serial1
#if defined(ARDUINO_TEENSY41)
	  case 53:
#endif
		uart = &IMXRT_LPUART6; 
     bd8:	491e      	ldr	r1, [pc, #120]	; (c54 <WS2812Serial::begin()+0x1b0>)
		CCM_CCGR3 |= CCM_CCGR3_LPUART6(CCM_CCGR_ON);
     bda:	6f53      	ldr	r3, [r2, #116]	; 0x74
		hwtrigger = DMAMUX_SOURCE_LPUART6_TX; 
		break;
     bdc:	4d1e      	ldr	r5, [pc, #120]	; (c58 <WS2812Serial::begin()+0x1b4>)
	  case 1: // Serial1
#if defined(ARDUINO_TEENSY41)
	  case 53:
#endif
		uart = &IMXRT_LPUART6; 
		CCM_CCGR3 |= CCM_CCGR3_LPUART6(CCM_CCGR_ON);
     bde:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
#elif defined(__IMXRT1062__)
	  case 1: // Serial1
#if defined(ARDUINO_TEENSY41)
	  case 53:
#endif
		uart = &IMXRT_LPUART6; 
     be2:	6181      	str	r1, [r0, #24]
		CCM_CCGR3 |= CCM_CCGR3_LPUART6(CCM_CCGR_ON);
     be4:	6753      	str	r3, [r2, #116]	; 0x74
		hwtrigger = DMAMUX_SOURCE_LPUART6_TX; 
		break;
     be6:	e781      	b.n	aec <WS2812Serial::begin()+0x48>
	  case 8: // Serial2
		uart = &IMXRT_LPUART4; 
		CCM_CCGR1 |= CCM_CCGR1_LPUART4(CCM_CCGR_ON);
     be8:	4a0b      	ldr	r2, [pc, #44]	; (c18 <WS2812Serial::begin()+0x174>)
		uart = &IMXRT_LPUART6; 
		CCM_CCGR3 |= CCM_CCGR3_LPUART6(CCM_CCGR_ON);
		hwtrigger = DMAMUX_SOURCE_LPUART6_TX; 
		break;
	  case 8: // Serial2
		uart = &IMXRT_LPUART4; 
     bea:	491c      	ldr	r1, [pc, #112]	; (c5c <WS2812Serial::begin()+0x1b8>)
		CCM_CCGR1 |= CCM_CCGR1_LPUART4(CCM_CCGR_ON);
     bec:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
		hwtrigger = DMAMUX_SOURCE_LPUART4_TX; 
		break;
     bee:	4d1c      	ldr	r5, [pc, #112]	; (c60 <WS2812Serial::begin()+0x1bc>)
		CCM_CCGR3 |= CCM_CCGR3_LPUART6(CCM_CCGR_ON);
		hwtrigger = DMAMUX_SOURCE_LPUART6_TX; 
		break;
	  case 8: // Serial2
		uart = &IMXRT_LPUART4; 
		CCM_CCGR1 |= CCM_CCGR1_LPUART4(CCM_CCGR_ON);
     bf0:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
		uart = &IMXRT_LPUART6; 
		CCM_CCGR3 |= CCM_CCGR3_LPUART6(CCM_CCGR_ON);
		hwtrigger = DMAMUX_SOURCE_LPUART6_TX; 
		break;
	  case 8: // Serial2
		uart = &IMXRT_LPUART4; 
     bf4:	6181      	str	r1, [r0, #24]
		CCM_CCGR1 |= CCM_CCGR1_LPUART4(CCM_CCGR_ON);
     bf6:	66d3      	str	r3, [r2, #108]	; 0x6c
		hwtrigger = DMAMUX_SOURCE_LPUART4_TX; 
		break;
     bf8:	e778      	b.n	aec <WS2812Serial::begin()+0x48>
		hwtrigger = DMAMUX_SOURCE_LPUART5_TX; 
		break;
#endif		
#endif
	  default:
		return false; // pin not supported
     bfa:	2000      	movs	r0, #0
#endif 

	dma->triggerAtHardwareEvent(hwtrigger);
	memset(drawBuffer, 0, numled * 3);
	return true;
}
     bfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     bfe:	2303      	movs	r3, #3
     c00:	e789      	b.n	b16 <WS2812Serial::begin()+0x72>
#endif
	  default:
		return false; // pin not supported
	}
	if (!dma) {
		dma = new DMAChannel;
     c02:	2008      	movs	r0, #8
     c04:	f001 fdc2 	bl	278c <operator new(unsigned int)>
     c08:	4607      	mov	r7, r0
	/*************************************************/
	/**    Channel Allocation                       **/
	/*************************************************/

	DMAChannel() {
		begin();
     c0a:	4631      	mov	r1, r6
     c0c:	4606      	mov	r6, r0
     c0e:	f001 fd31 	bl	2674 <DMAChannel::begin(bool)>
     c12:	60e7      	str	r7, [r4, #12]
     c14:	e76f      	b.n	af6 <WS2812Serial::begin()+0x52>
     c16:	bf00      	nop
     c18:	400fc000 	.word	0x400fc000
     c1c:	4019c000 	.word	0x4019c000
     c20:	80000008 	.word	0x80000008
     c24:	05800001 	.word	0x05800001
     c28:	10080000 	.word	0x10080000
     c2c:	200000c0 	.word	0x200000c0
     c30:	400ec000 	.word	0x400ec000
     c34:	40188000 	.word	0x40188000
     c38:	80000042 	.word	0x80000042
     c3c:	4018c000 	.word	0x4018c000
     c40:	80000004 	.word	0x80000004
     c44:	401a0000 	.word	0x401a0000
     c48:	80000048 	.word	0x80000048
     c4c:	40184000 	.word	0x40184000
     c50:	80000002 	.word	0x80000002
     c54:	40198000 	.word	0x40198000
     c58:	80000046 	.word	0x80000046
     c5c:	40190000 	.word	0x40190000
     c60:	80000044 	.word	0x80000044

00000c64 <WS2812Serial::show()>:
	memset(drawBuffer, 0, numled * 3);
	return true;
}

void WS2812Serial::show()
{
     c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	while ((dma->CFG->DCR & DMA_DCR_ERQ)) {
		yield();
	}
#elif defined(__IMXRT1062__)
	//Serial.println("Show called");
	while ((DMA_ERQ & (1 << dma->channel))) {
     c68:	68c3      	ldr	r3, [r0, #12]
	memset(drawBuffer, 0, numled * 3);
	return true;
}

void WS2812Serial::show()
{
     c6a:	4604      	mov	r4, r0
	while ((dma->CFG->DCR & DMA_DCR_ERQ)) {
		yield();
	}
#elif defined(__IMXRT1062__)
	//Serial.println("Show called");
	while ((DMA_ERQ & (1 << dma->channel))) {
     c6c:	2501      	movs	r5, #1
     c6e:	4ecf      	ldr	r6, [pc, #828]	; (fac <WS2812Serial::show()+0x348>)
     c70:	e002      	b.n	c78 <WS2812Serial::show()+0x14>
		yield();
     c72:	f001 fdf1 	bl	2858 <yield>
	while ((dma->CFG->DCR & DMA_DCR_ERQ)) {
		yield();
	}
#elif defined(__IMXRT1062__)
	//Serial.println("Show called");
	while ((DMA_ERQ & (1 << dma->channel))) {
     c76:	68e3      	ldr	r3, [r4, #12]
     c78:	791b      	ldrb	r3, [r3, #4]
     c7a:	68f2      	ldr	r2, [r6, #12]
     c7c:	fa05 f303 	lsl.w	r3, r5, r3
     c80:	4213      	tst	r3, r2
     c82:	d1f6      	bne.n	c72 <WS2812Serial::show()+0xe>
		yield();
	}
	//Serial.println("After Yield");
#endif
	// copy drawing buffer to frame buffer
	if (config < 6) {
     c84:	78e3      	ldrb	r3, [r4, #3]
     c86:	2b05      	cmp	r3, #5
     c88:	d825      	bhi.n	cd6 <WS2812Serial::show()+0x72>
		// RGB
		const uint8_t *p = drawBuffer;
		const uint8_t *end = p + (numled * 3);
     c8a:	8822      	ldrh	r2, [r4, #0]
	//Serial.println("After Yield");
#endif
	// copy drawing buffer to frame buffer
	if (config < 6) {
		// RGB
		const uint8_t *p = drawBuffer;
     c8c:	68a0      	ldr	r0, [r4, #8]
		const uint8_t *end = p + (numled * 3);
     c8e:	eb02 0542 	add.w	r5, r2, r2, lsl #1
		uint8_t *fb = frameBuffer;
     c92:	6861      	ldr	r1, [r4, #4]
#endif
	// copy drawing buffer to frame buffer
	if (config < 6) {
		// RGB
		const uint8_t *p = drawBuffer;
		const uint8_t *end = p + (numled * 3);
     c94:	4405      	add	r5, r0
		uint8_t *fb = frameBuffer;
		while (p < end) {
     c96:	42a8      	cmp	r0, r5
     c98:	f080 820a 	bcs.w	10b0 <WS2812Serial::show()+0x44c>
     c9c:	3003      	adds	r0, #3
     c9e:	469c      	mov	ip, r3
			uint8_t b = *p++;
			uint8_t g = *p++;
			uint8_t r = *p++;
			uint32_t mult = brightness + 1;
     ca0:	7d27      	ldrb	r7, [r4, #20]
			b = (b * mult) >> 8;
     ca2:	f810 ec03 	ldrb.w	lr, [r0, #-3]
		uint8_t *fb = frameBuffer;
		while (p < end) {
			uint8_t b = *p++;
			uint8_t g = *p++;
			uint8_t r = *p++;
			uint32_t mult = brightness + 1;
     ca6:	3701      	adds	r7, #1
			b = (b * mult) >> 8;
			g = (g * mult) >> 8;
     ca8:	f810 6c02 	ldrb.w	r6, [r0, #-2]
			r = (r * mult) >> 8;
     cac:	f810 2c01 	ldrb.w	r2, [r0, #-1]
		while (p < end) {
			uint8_t b = *p++;
			uint8_t g = *p++;
			uint8_t r = *p++;
			uint32_t mult = brightness + 1;
			b = (b * mult) >> 8;
     cb0:	fb07 f30e 	mul.w	r3, r7, lr
			g = (g * mult) >> 8;
     cb4:	fb07 f606 	mul.w	r6, r7, r6
			r = (r * mult) >> 8;
     cb8:	fb07 f702 	mul.w	r7, r7, r2
		while (p < end) {
			uint8_t b = *p++;
			uint8_t g = *p++;
			uint8_t r = *p++;
			uint32_t mult = brightness + 1;
			b = (b * mult) >> 8;
     cbc:	ea4f 2e13 	mov.w	lr, r3, lsr #8
			g = (g * mult) >> 8;
     cc0:	0a36      	lsrs	r6, r6, #8
			r = (r * mult) >> 8;
     cc2:	0a3f      	lsrs	r7, r7, #8
			uint32_t n=0;
			switch (config) {
     cc4:	f1bc 0f05 	cmp.w	ip, #5
     cc8:	f200 81f9 	bhi.w	10be <WS2812Serial::show()+0x45a>
     ccc:	e8df f00c 	tbb	[pc, ip]
     cd0:	6f79838e 	.word	0x6f79838e
     cd4:	4264      	.short	0x4264
		}
		microseconds_per_led = 30;
		bytes_per_led = 12;
	} else {
		// RGBW
		const uint8_t *p = drawBuffer;
     cd6:	68a1      	ldr	r1, [r4, #8]
		const uint8_t *end = p + (numled * 4);
     cd8:	8825      	ldrh	r5, [r4, #0]
		uint8_t *fb = frameBuffer;
     cda:	6862      	ldr	r2, [r4, #4]
		microseconds_per_led = 30;
		bytes_per_led = 12;
	} else {
		// RGBW
		const uint8_t *p = drawBuffer;
		const uint8_t *end = p + (numled * 4);
     cdc:	eb01 0085 	add.w	r0, r1, r5, lsl #2
		uint8_t *fb = frameBuffer;
		while (p < end) {
     ce0:	4281      	cmp	r1, r0
     ce2:	f080 81e9 	bcs.w	10b8 <WS2812Serial::show()+0x454>
     ce6:	3104      	adds	r1, #4
			uint8_t b = *p++;
			uint8_t g = *p++;
			uint8_t r = *p++;
			uint8_t w = *p++;
			uint32_t mult = brightness + 1;
     ce8:	7d25      	ldrb	r5, [r4, #20]
			b = (b * mult) >> 8;
			g = (g * mult) >> 8;
			r = (r * mult) >> 8;
			w = (w * mult) >> 8;
			uint32_t n=0;
			switch (config) {
     cea:	1f9e      	subs	r6, r3, #6
			uint8_t g = *p++;
			uint8_t r = *p++;
			uint8_t w = *p++;
			uint32_t mult = brightness + 1;
			b = (b * mult) >> 8;
			g = (g * mult) >> 8;
     cec:	f811 ec03 	ldrb.w	lr, [r1, #-3]
		while (p < end) {
			uint8_t b = *p++;
			uint8_t g = *p++;
			uint8_t r = *p++;
			uint8_t w = *p++;
			uint32_t mult = brightness + 1;
     cf0:	3501      	adds	r5, #1
			b = (b * mult) >> 8;
     cf2:	f811 3c04 	ldrb.w	r3, [r1, #-4]
			g = (g * mult) >> 8;
			r = (r * mult) >> 8;
     cf6:	f811 7c02 	ldrb.w	r7, [r1, #-2]
			w = (w * mult) >> 8;
     cfa:	f811 cc01 	ldrb.w	ip, [r1, #-1]
			uint8_t b = *p++;
			uint8_t g = *p++;
			uint8_t r = *p++;
			uint8_t w = *p++;
			uint32_t mult = brightness + 1;
			b = (b * mult) >> 8;
     cfe:	fb05 f303 	mul.w	r3, r5, r3
			g = (g * mult) >> 8;
     d02:	fb05 fe0e 	mul.w	lr, r5, lr
			r = (r * mult) >> 8;
     d06:	fb05 f707 	mul.w	r7, r5, r7
			uint8_t b = *p++;
			uint8_t g = *p++;
			uint8_t r = *p++;
			uint8_t w = *p++;
			uint32_t mult = brightness + 1;
			b = (b * mult) >> 8;
     d0a:	ea4f 2813 	mov.w	r8, r3, lsr #8
			g = (g * mult) >> 8;
			r = (r * mult) >> 8;
			w = (w * mult) >> 8;
     d0e:	fb05 f50c 	mul.w	r5, r5, ip
			uint8_t g = *p++;
			uint8_t r = *p++;
			uint8_t w = *p++;
			uint32_t mult = brightness + 1;
			b = (b * mult) >> 8;
			g = (g * mult) >> 8;
     d12:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
			r = (r * mult) >> 8;
     d16:	0a3f      	lsrs	r7, r7, #8
			w = (w * mult) >> 8;
     d18:	0a2d      	lsrs	r5, r5, #8
			uint32_t n=0;
			switch (config) {
     d1a:	2e17      	cmp	r6, #23
     d1c:	f200 81d1 	bhi.w	10c2 <WS2812Serial::show()+0x45e>
     d20:	e8df f016 	tbh	[pc, r6, lsl #1]
     d24:	0146014b 	.word	0x0146014b
     d28:	013a013f 	.word	0x013a013f
     d2c:	012a0136 	.word	0x012a0136
     d30:	011a0126 	.word	0x011a0126
     d34:	01080115 	.word	0x01080115
     d38:	00ef00fc 	.word	0x00ef00fc
     d3c:	00e700eb 	.word	0x00e700eb
     d40:	00d700e3 	.word	0x00d700e3
     d44:	00af00bb 	.word	0x00af00bb
     d48:	009d00aa 	.word	0x009d00aa
     d4c:	00c600d3 	.word	0x00c600d3
     d50:	006e0091 	.word	0x006e0091
			  case WS2812_RGB: n = (r << 16) | (g << 8) | b; break;
			  case WS2812_RBG: n = (r << 16) | (b << 8) | g; break;
			  case WS2812_GRB: n = (g << 16) | (r << 8) | b; break;
			  case WS2812_GBR: n = (g << 16) | (b << 8) | r; break;
			  case WS2812_BRG: n = (b << 16) | (r << 8) | g; break;
			  case WS2812_BGR: n = (b << 16) | (g << 8) | r; break;
     d54:	ea4f 430e 	mov.w	r3, lr, lsl #16
     d58:	0236      	lsls	r6, r6, #8
     d5a:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
     d5e:	f406 437f 	and.w	r3, r6, #65280	; 0xff00
     d62:	4313      	orrs	r3, r2
     d64:	433b      	orrs	r3, r7
     d66:	f101 060c 	add.w	r6, r1, #12
			}
			const uint8_t *stop = fb + 12;
			do {
				uint8_t x = 0x08;
     d6a:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
     d6e:	bf0c      	ite	eq
     d70:	220f      	moveq	r2, #15
     d72:	2208      	movne	r2, #8
				if (!(n & 0x00800000)) x |= 0x07;
				if (!(n & 0x00400000)) x |= 0xE0;
     d74:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
				n <<= 2;
     d78:	ea4f 0383 	mov.w	r3, r3, lsl #2
			}
			const uint8_t *stop = fb + 12;
			do {
				uint8_t x = 0x08;
				if (!(n & 0x00800000)) x |= 0x07;
				if (!(n & 0x00400000)) x |= 0xE0;
     d7c:	bf08      	it	eq
     d7e:	f042 02e0 	orreq.w	r2, r2, #224	; 0xe0
				n <<= 2;
				*fb++ = x;
     d82:	f801 2b01 	strb.w	r2, [r1], #1
			} while (fb < stop);
     d86:	42b1      	cmp	r1, r6
     d88:	d1ef      	bne.n	d6a <WS2812Serial::show()+0x106>
	if (config < 6) {
		// RGB
		const uint8_t *p = drawBuffer;
		const uint8_t *end = p + (numled * 3);
		uint8_t *fb = frameBuffer;
		while (p < end) {
     d8a:	4285      	cmp	r5, r0
     d8c:	f240 811a 	bls.w	fc4 <WS2812Serial::show()+0x360>
     d90:	3003      	adds	r0, #3
     d92:	f894 c003 	ldrb.w	ip, [r4, #3]
     d96:	e783      	b.n	ca0 <WS2812Serial::show()+0x3c>
			switch (config) {
			  case WS2812_RGB: n = (r << 16) | (g << 8) | b; break;
			  case WS2812_RBG: n = (r << 16) | (b << 8) | g; break;
			  case WS2812_GRB: n = (g << 16) | (r << 8) | b; break;
			  case WS2812_GBR: n = (g << 16) | (b << 8) | r; break;
			  case WS2812_BRG: n = (b << 16) | (r << 8) | g; break;
     d98:	ea4f 430e 	mov.w	r3, lr, lsl #16
     d9c:	023a      	lsls	r2, r7, #8
     d9e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
     da2:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
     da6:	431a      	orrs	r2, r3
     da8:	ea42 0306 	orr.w	r3, r2, r6
     dac:	e7db      	b.n	d66 <WS2812Serial::show()+0x102>
			uint32_t n=0;
			switch (config) {
			  case WS2812_RGB: n = (r << 16) | (g << 8) | b; break;
			  case WS2812_RBG: n = (r << 16) | (b << 8) | g; break;
			  case WS2812_GRB: n = (g << 16) | (r << 8) | b; break;
			  case WS2812_GBR: n = (g << 16) | (b << 8) | r; break;
     dae:	0436      	lsls	r6, r6, #16
     db0:	ea4f 220e 	mov.w	r2, lr, lsl #8
     db4:	f406 067f 	and.w	r6, r6, #16711680	; 0xff0000
     db8:	f402 437f 	and.w	r3, r2, #65280	; 0xff00
     dbc:	4333      	orrs	r3, r6
     dbe:	433b      	orrs	r3, r7
     dc0:	e7d1      	b.n	d66 <WS2812Serial::show()+0x102>
			r = (r * mult) >> 8;
			uint32_t n=0;
			switch (config) {
			  case WS2812_RGB: n = (r << 16) | (g << 8) | b; break;
			  case WS2812_RBG: n = (r << 16) | (b << 8) | g; break;
			  case WS2812_GRB: n = (g << 16) | (r << 8) | b; break;
     dc2:	0433      	lsls	r3, r6, #16
     dc4:	023a      	lsls	r2, r7, #8
     dc6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
     dca:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
     dce:	431a      	orrs	r2, r3
     dd0:	ea42 030e 	orr.w	r3, r2, lr
     dd4:	e7c7      	b.n	d66 <WS2812Serial::show()+0x102>
			g = (g * mult) >> 8;
			r = (r * mult) >> 8;
			uint32_t n=0;
			switch (config) {
			  case WS2812_RGB: n = (r << 16) | (g << 8) | b; break;
			  case WS2812_RBG: n = (r << 16) | (b << 8) | g; break;
     dd6:	043b      	lsls	r3, r7, #16
     dd8:	ea4f 220e 	mov.w	r2, lr, lsl #8
     ddc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
     de0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
     de4:	431a      	orrs	r2, r3
     de6:	ea42 0306 	orr.w	r3, r2, r6
     dea:	e7bc      	b.n	d66 <WS2812Serial::show()+0x102>
			b = (b * mult) >> 8;
			g = (g * mult) >> 8;
			r = (r * mult) >> 8;
			uint32_t n=0;
			switch (config) {
			  case WS2812_RGB: n = (r << 16) | (g << 8) | b; break;
     dec:	043b      	lsls	r3, r7, #16
     dee:	0236      	lsls	r6, r6, #8
     df0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
     df4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
     df8:	431e      	orrs	r6, r3
     dfa:	ea46 030e 	orr.w	r3, r6, lr
     dfe:	e7b2      	b.n	d66 <WS2812Serial::show()+0x102>
			  case WS2812_RGWB: n = (r << 24) | (g << 16) | (w << 8) | b; break;
			  case WS2812_RBWG: n = (r << 24) | (b << 16) | (w << 8) | g; break;
			  case WS2812_GRWB: n = (g << 24) | (r << 16) | (w << 8) | b; break;
			  case WS2812_GBWR: n = (g << 24) | (b << 16) | (w << 8) | r; break;
			  case WS2812_BRWG: n = (b << 24) | (r << 16) | (w << 8) | g; break;
			  case WS2812_BGWR: n = (b << 24) | (g << 16) | (w << 8) | r; break;
     e00:	ea4f 460e 	mov.w	r6, lr, lsl #16
     e04:	022b      	lsls	r3, r5, #8
     e06:	ea47 6708 	orr.w	r7, r7, r8, lsl #24
     e0a:	f406 067f 	and.w	r6, r6, #16711680	; 0xff0000
     e0e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
     e12:	ea47 0506 	orr.w	r5, r7, r6
     e16:	432b      	orrs	r3, r5
     e18:	f102 0610 	add.w	r6, r2, #16
			}
			const uint8_t *stop = fb + 16;
			do {
				uint8_t x = 0x08;
     e1c:	2b00      	cmp	r3, #0
     e1e:	bfac      	ite	ge
     e20:	250f      	movge	r5, #15
     e22:	2508      	movlt	r5, #8
				if (!(n & 0x80000000)) x |= 0x07;
				if (!(n & 0x40000000)) x |= 0xE0;
     e24:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
				n <<= 2;
     e28:	ea4f 0383 	mov.w	r3, r3, lsl #2
			}
			const uint8_t *stop = fb + 16;
			do {
				uint8_t x = 0x08;
				if (!(n & 0x80000000)) x |= 0x07;
				if (!(n & 0x40000000)) x |= 0xE0;
     e2c:	bf08      	it	eq
     e2e:	f045 05e0 	orreq.w	r5, r5, #224	; 0xe0
				n <<= 2;
				*fb++ = x;
     e32:	f802 5b01 	strb.w	r5, [r2], #1
			} while (fb < stop);
     e36:	42b2      	cmp	r2, r6
     e38:	d1f0      	bne.n	e1c <WS2812Serial::show()+0x1b8>
	} else {
		// RGBW
		const uint8_t *p = drawBuffer;
		const uint8_t *end = p + (numled * 4);
		uint8_t *fb = frameBuffer;
		while (p < end) {
     e3a:	4288      	cmp	r0, r1
     e3c:	f240 8122 	bls.w	1084 <WS2812Serial::show()+0x420>
     e40:	3104      	adds	r1, #4
     e42:	78e3      	ldrb	r3, [r4, #3]
     e44:	e750      	b.n	ce8 <WS2812Serial::show()+0x84>
			  case WS2812_BWGR: n = (b << 24) | (w << 16) | (g << 8) | r; break;
			  case WS2812_RGWB: n = (r << 24) | (g << 16) | (w << 8) | b; break;
			  case WS2812_RBWG: n = (r << 24) | (b << 16) | (w << 8) | g; break;
			  case WS2812_GRWB: n = (g << 24) | (r << 16) | (w << 8) | b; break;
			  case WS2812_GBWR: n = (g << 24) | (b << 16) | (w << 8) | r; break;
			  case WS2812_BRWG: n = (b << 24) | (r << 16) | (w << 8) | g; break;
     e46:	043f      	lsls	r7, r7, #16
     e48:	ea4e 6608 	orr.w	r6, lr, r8, lsl #24
     e4c:	022b      	lsls	r3, r5, #8
     e4e:	f407 077f 	and.w	r7, r7, #16711680	; 0xff0000
     e52:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
     e56:	ea47 0506 	orr.w	r5, r7, r6
     e5a:	432b      	orrs	r3, r5
     e5c:	e7dc      	b.n	e18 <WS2812Serial::show()+0x1b4>
			  case WS2812_GWRB: n = (g << 24) | (w << 16) | (r << 8) | b; break;
			  case WS2812_GWBR: n = (g << 24) | (w << 16) | (b << 8) | r; break;
			  case WS2812_BWRG: n = (b << 24) | (w << 16) | (r << 8) | g; break;
			  case WS2812_BWGR: n = (b << 24) | (w << 16) | (g << 8) | r; break;
			  case WS2812_RGWB: n = (r << 24) | (g << 16) | (w << 8) | b; break;
			  case WS2812_RBWG: n = (r << 24) | (b << 16) | (w << 8) | g; break;
     e5e:	ea4f 4308 	mov.w	r3, r8, lsl #16
     e62:	ea4e 6707 	orr.w	r7, lr, r7, lsl #24
     e66:	f403 067f 	and.w	r6, r3, #16711680	; 0xff0000
     e6a:	022b      	lsls	r3, r5, #8
     e6c:	ea46 0507 	orr.w	r5, r6, r7
     e70:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
     e74:	432b      	orrs	r3, r5
     e76:	e7cf      	b.n	e18 <WS2812Serial::show()+0x1b4>
			  case WS2812_RWBG: n = (r << 24) | (w << 16) | (b << 8) | g; break;
			  case WS2812_GWRB: n = (g << 24) | (w << 16) | (r << 8) | b; break;
			  case WS2812_GWBR: n = (g << 24) | (w << 16) | (b << 8) | r; break;
			  case WS2812_BWRG: n = (b << 24) | (w << 16) | (r << 8) | g; break;
			  case WS2812_BWGR: n = (b << 24) | (w << 16) | (g << 8) | r; break;
			  case WS2812_RGWB: n = (r << 24) | (g << 16) | (w << 8) | b; break;
     e78:	ea4f 430e 	mov.w	r3, lr, lsl #16
     e7c:	ea48 6707 	orr.w	r7, r8, r7, lsl #24
     e80:	e7f1      	b.n	e66 <WS2812Serial::show()+0x202>
			  case WS2812_RWGB: n = (r << 24) | (w << 16) | (g << 8) | b; break;
			  case WS2812_RWBG: n = (r << 24) | (w << 16) | (b << 8) | g; break;
			  case WS2812_GWRB: n = (g << 24) | (w << 16) | (r << 8) | b; break;
			  case WS2812_GWBR: n = (g << 24) | (w << 16) | (b << 8) | r; break;
			  case WS2812_BWRG: n = (b << 24) | (w << 16) | (r << 8) | g; break;
			  case WS2812_BWGR: n = (b << 24) | (w << 16) | (g << 8) | r; break;
     e82:	042b      	lsls	r3, r5, #16
     e84:	ea47 6708 	orr.w	r7, r7, r8, lsl #24
     e88:	f403 057f 	and.w	r5, r3, #16711680	; 0xff0000
     e8c:	ea4f 230e 	mov.w	r3, lr, lsl #8
     e90:	433d      	orrs	r5, r7
     e92:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
     e96:	432b      	orrs	r3, r5
     e98:	e7be      	b.n	e18 <WS2812Serial::show()+0x1b4>
			  case WS2812_WBGR: n = (w << 24) | (b << 16) | (g << 8) | r; break;
			  case WS2812_RWGB: n = (r << 24) | (w << 16) | (g << 8) | b; break;
			  case WS2812_RWBG: n = (r << 24) | (w << 16) | (b << 8) | g; break;
			  case WS2812_GWRB: n = (g << 24) | (w << 16) | (r << 8) | b; break;
			  case WS2812_GWBR: n = (g << 24) | (w << 16) | (b << 8) | r; break;
			  case WS2812_BWRG: n = (b << 24) | (w << 16) | (r << 8) | g; break;
     e9a:	042b      	lsls	r3, r5, #16
     e9c:	ea4e 6608 	orr.w	r6, lr, r8, lsl #24
     ea0:	f403 057f 	and.w	r5, r3, #16711680	; 0xff0000
     ea4:	023b      	lsls	r3, r7, #8
     ea6:	4335      	orrs	r5, r6
     ea8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
     eac:	432b      	orrs	r3, r5
     eae:	e7b3      	b.n	e18 <WS2812Serial::show()+0x1b4>
			  case WS2812_BWGR: n = (b << 24) | (w << 16) | (g << 8) | r; break;
			  case WS2812_RGWB: n = (r << 24) | (g << 16) | (w << 8) | b; break;
			  case WS2812_RBWG: n = (r << 24) | (b << 16) | (w << 8) | g; break;
			  case WS2812_GRWB: n = (g << 24) | (r << 16) | (w << 8) | b; break;
			  case WS2812_GBWR: n = (g << 24) | (b << 16) | (w << 8) | r; break;
     eb0:	ea4f 4808 	mov.w	r8, r8, lsl #16
     eb4:	022b      	lsls	r3, r5, #8
     eb6:	ea47 670e 	orr.w	r7, r7, lr, lsl #24
     eba:	f408 067f 	and.w	r6, r8, #16711680	; 0xff0000
     ebe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
     ec2:	ea46 0507 	orr.w	r5, r6, r7
     ec6:	432b      	orrs	r3, r5
     ec8:	e7a6      	b.n	e18 <WS2812Serial::show()+0x1b4>
			  case WS2812_GWBR: n = (g << 24) | (w << 16) | (b << 8) | r; break;
			  case WS2812_BWRG: n = (b << 24) | (w << 16) | (r << 8) | g; break;
			  case WS2812_BWGR: n = (b << 24) | (w << 16) | (g << 8) | r; break;
			  case WS2812_RGWB: n = (r << 24) | (g << 16) | (w << 8) | b; break;
			  case WS2812_RBWG: n = (r << 24) | (b << 16) | (w << 8) | g; break;
			  case WS2812_GRWB: n = (g << 24) | (r << 16) | (w << 8) | b; break;
     eca:	043f      	lsls	r7, r7, #16
     ecc:	ea48 660e 	orr.w	r6, r8, lr, lsl #24
     ed0:	e7bc      	b.n	e4c <WS2812Serial::show()+0x1e8>
			  case WS2812_WBRG: n = (w << 24) | (b << 16) | (r << 8) | g; break;
			  case WS2812_WBGR: n = (w << 24) | (b << 16) | (g << 8) | r; break;
			  case WS2812_RWGB: n = (r << 24) | (w << 16) | (g << 8) | b; break;
			  case WS2812_RWBG: n = (r << 24) | (w << 16) | (b << 8) | g; break;
			  case WS2812_GWRB: n = (g << 24) | (w << 16) | (r << 8) | b; break;
			  case WS2812_GWBR: n = (g << 24) | (w << 16) | (b << 8) | r; break;
     ed2:	042b      	lsls	r3, r5, #16
     ed4:	ea47 670e 	orr.w	r7, r7, lr, lsl #24
     ed8:	f403 057f 	and.w	r5, r3, #16711680	; 0xff0000
     edc:	ea4f 2308 	mov.w	r3, r8, lsl #8
     ee0:	433d      	orrs	r5, r7
     ee2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
     ee6:	432b      	orrs	r3, r5
     ee8:	e796      	b.n	e18 <WS2812Serial::show()+0x1b4>
			  case WS2812_WGBR: n = (w << 24) | (g << 16) | (b << 8) | r; break;
			  case WS2812_WBRG: n = (w << 24) | (b << 16) | (r << 8) | g; break;
			  case WS2812_WBGR: n = (w << 24) | (b << 16) | (g << 8) | r; break;
			  case WS2812_RWGB: n = (r << 24) | (w << 16) | (g << 8) | b; break;
			  case WS2812_RWBG: n = (r << 24) | (w << 16) | (b << 8) | g; break;
			  case WS2812_GWRB: n = (g << 24) | (w << 16) | (r << 8) | b; break;
     eea:	042b      	lsls	r3, r5, #16
     eec:	ea48 660e 	orr.w	r6, r8, lr, lsl #24
     ef0:	e7d6      	b.n	ea0 <WS2812Serial::show()+0x23c>
			  case WS2812_WGRB: n = (w << 24) | (g << 16) | (r << 8) | b; break;
			  case WS2812_WGBR: n = (w << 24) | (g << 16) | (b << 8) | r; break;
			  case WS2812_WBRG: n = (w << 24) | (b << 16) | (r << 8) | g; break;
			  case WS2812_WBGR: n = (w << 24) | (b << 16) | (g << 8) | r; break;
			  case WS2812_RWGB: n = (r << 24) | (w << 16) | (g << 8) | b; break;
			  case WS2812_RWBG: n = (r << 24) | (w << 16) | (b << 8) | g; break;
     ef2:	042b      	lsls	r3, r5, #16
     ef4:	ea4e 6707 	orr.w	r7, lr, r7, lsl #24
     ef8:	e7ee      	b.n	ed8 <WS2812Serial::show()+0x274>
			  case WS2812_WRBG: n = (w << 24) | (r << 16) | (b << 8) | g; break;
			  case WS2812_WGRB: n = (w << 24) | (g << 16) | (r << 8) | b; break;
			  case WS2812_WGBR: n = (w << 24) | (g << 16) | (b << 8) | r; break;
			  case WS2812_WBRG: n = (w << 24) | (b << 16) | (r << 8) | g; break;
			  case WS2812_WBGR: n = (w << 24) | (b << 16) | (g << 8) | r; break;
			  case WS2812_RWGB: n = (r << 24) | (w << 16) | (g << 8) | b; break;
     efa:	042b      	lsls	r3, r5, #16
     efc:	ea48 6707 	orr.w	r7, r8, r7, lsl #24
     f00:	e7c2      	b.n	e88 <WS2812Serial::show()+0x224>
			  case WS2812_WRGB: n = (w << 24) | (r << 16) | (g << 8) | b; break;
			  case WS2812_WRBG: n = (w << 24) | (r << 16) | (b << 8) | g; break;
			  case WS2812_WGRB: n = (w << 24) | (g << 16) | (r << 8) | b; break;
			  case WS2812_WGBR: n = (w << 24) | (g << 16) | (b << 8) | r; break;
			  case WS2812_WBRG: n = (w << 24) | (b << 16) | (r << 8) | g; break;
			  case WS2812_WBGR: n = (w << 24) | (b << 16) | (g << 8) | r; break;
     f02:	ea4f 4308 	mov.w	r3, r8, lsl #16
     f06:	ea47 6505 	orr.w	r5, r7, r5, lsl #24
			switch (config) {
			  case WS2812_RGBW: n = (r << 24) | (g << 16) | (b << 8) | w; break;
			  case WS2812_RBGW: n = (r << 24) | (b << 16) | (g << 8) | w; break;
			  case WS2812_GRBW: n = (g << 24) | (r << 16) | (b << 8) | w; break;
			  case WS2812_GBRW: n = (g << 24) | (b << 16) | (r << 8) | w; break;
			  case WS2812_BRGW: n = (b << 24) | (r << 16) | (g << 8) | w; break;
     f0a:	f403 067f 	and.w	r6, r3, #16711680	; 0xff0000
     f0e:	ea4f 230e 	mov.w	r3, lr, lsl #8
     f12:	4335      	orrs	r5, r6
     f14:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
     f18:	432b      	orrs	r3, r5
     f1a:	e77d      	b.n	e18 <WS2812Serial::show()+0x1b4>
			  case WS2812_BGRW: n = (b << 24) | (b << 16) | (r << 8) | w; break;
			  case WS2812_WRGB: n = (w << 24) | (r << 16) | (g << 8) | b; break;
			  case WS2812_WRBG: n = (w << 24) | (r << 16) | (b << 8) | g; break;
			  case WS2812_WGRB: n = (w << 24) | (g << 16) | (r << 8) | b; break;
			  case WS2812_WGBR: n = (w << 24) | (g << 16) | (b << 8) | r; break;
			  case WS2812_WBRG: n = (w << 24) | (b << 16) | (r << 8) | g; break;
     f1c:	ea4f 4308 	mov.w	r3, r8, lsl #16
     f20:	ea4e 6505 	orr.w	r5, lr, r5, lsl #24
			  case WS2812_GBRW: n = (g << 24) | (b << 16) | (r << 8) | w; break;
			  case WS2812_BRGW: n = (b << 24) | (r << 16) | (g << 8) | w; break;
			  case WS2812_BGRW: n = (b << 24) | (b << 16) | (r << 8) | w; break;
			  case WS2812_WRGB: n = (w << 24) | (r << 16) | (g << 8) | b; break;
			  case WS2812_WRBG: n = (w << 24) | (r << 16) | (b << 8) | g; break;
			  case WS2812_WGRB: n = (w << 24) | (g << 16) | (r << 8) | b; break;
     f24:	f403 067f 	and.w	r6, r3, #16711680	; 0xff0000
     f28:	023b      	lsls	r3, r7, #8
     f2a:	4335      	orrs	r5, r6
     f2c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
     f30:	432b      	orrs	r3, r5
     f32:	e771      	b.n	e18 <WS2812Serial::show()+0x1b4>
			  case WS2812_WGBR: n = (w << 24) | (g << 16) | (b << 8) | r; break;
     f34:	ea4f 430e 	mov.w	r3, lr, lsl #16
     f38:	ea47 6505 	orr.w	r5, r7, r5, lsl #24
     f3c:	f403 067f 	and.w	r6, r3, #16711680	; 0xff0000
     f40:	ea4f 2308 	mov.w	r3, r8, lsl #8
     f44:	4335      	orrs	r5, r6
     f46:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
     f4a:	432b      	orrs	r3, r5
     f4c:	e764      	b.n	e18 <WS2812Serial::show()+0x1b4>
			  case WS2812_GBRW: n = (g << 24) | (b << 16) | (r << 8) | w; break;
			  case WS2812_BRGW: n = (b << 24) | (r << 16) | (g << 8) | w; break;
			  case WS2812_BGRW: n = (b << 24) | (b << 16) | (r << 8) | w; break;
			  case WS2812_WRGB: n = (w << 24) | (r << 16) | (g << 8) | b; break;
			  case WS2812_WRBG: n = (w << 24) | (r << 16) | (b << 8) | g; break;
			  case WS2812_WGRB: n = (w << 24) | (g << 16) | (r << 8) | b; break;
     f4e:	ea4f 430e 	mov.w	r3, lr, lsl #16
     f52:	ea48 6505 	orr.w	r5, r8, r5, lsl #24
     f56:	e7e5      	b.n	f24 <WS2812Serial::show()+0x2c0>
			  case WS2812_GRBW: n = (g << 24) | (r << 16) | (b << 8) | w; break;
			  case WS2812_GBRW: n = (g << 24) | (b << 16) | (r << 8) | w; break;
			  case WS2812_BRGW: n = (b << 24) | (r << 16) | (g << 8) | w; break;
			  case WS2812_BGRW: n = (b << 24) | (b << 16) | (r << 8) | w; break;
			  case WS2812_WRGB: n = (w << 24) | (r << 16) | (g << 8) | b; break;
			  case WS2812_WRBG: n = (w << 24) | (r << 16) | (b << 8) | g; break;
     f58:	043b      	lsls	r3, r7, #16
     f5a:	ea4e 6605 	orr.w	r6, lr, r5, lsl #24
     f5e:	f403 057f 	and.w	r5, r3, #16711680	; 0xff0000
     f62:	ea4f 2308 	mov.w	r3, r8, lsl #8
     f66:	4335      	orrs	r5, r6
     f68:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
     f6c:	432b      	orrs	r3, r5
     f6e:	e753      	b.n	e18 <WS2812Serial::show()+0x1b4>
			  case WS2812_RBGW: n = (r << 24) | (b << 16) | (g << 8) | w; break;
			  case WS2812_GRBW: n = (g << 24) | (r << 16) | (b << 8) | w; break;
			  case WS2812_GBRW: n = (g << 24) | (b << 16) | (r << 8) | w; break;
			  case WS2812_BRGW: n = (b << 24) | (r << 16) | (g << 8) | w; break;
			  case WS2812_BGRW: n = (b << 24) | (b << 16) | (r << 8) | w; break;
			  case WS2812_WRGB: n = (w << 24) | (r << 16) | (g << 8) | b; break;
     f70:	043b      	lsls	r3, r7, #16
     f72:	ea48 6505 	orr.w	r5, r8, r5, lsl #24
     f76:	e7c8      	b.n	f0a <WS2812Serial::show()+0x2a6>
			  case WS2812_RGBW: n = (r << 24) | (g << 16) | (b << 8) | w; break;
			  case WS2812_RBGW: n = (r << 24) | (b << 16) | (g << 8) | w; break;
			  case WS2812_GRBW: n = (g << 24) | (r << 16) | (b << 8) | w; break;
			  case WS2812_GBRW: n = (g << 24) | (b << 16) | (r << 8) | w; break;
			  case WS2812_BRGW: n = (b << 24) | (r << 16) | (g << 8) | w; break;
			  case WS2812_BGRW: n = (b << 24) | (b << 16) | (r << 8) | w; break;
     f78:	ea4f 4608 	mov.w	r6, r8, lsl #16
     f7c:	ea45 6508 	orr.w	r5, r5, r8, lsl #24
     f80:	f406 067f 	and.w	r6, r6, #16711680	; 0xff0000
     f84:	023b      	lsls	r3, r7, #8
     f86:	4335      	orrs	r5, r6
     f88:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
     f8c:	432b      	orrs	r3, r5
     f8e:	e743      	b.n	e18 <WS2812Serial::show()+0x1b4>
			switch (config) {
			  case WS2812_RGBW: n = (r << 24) | (g << 16) | (b << 8) | w; break;
			  case WS2812_RBGW: n = (r << 24) | (b << 16) | (g << 8) | w; break;
			  case WS2812_GRBW: n = (g << 24) | (r << 16) | (b << 8) | w; break;
			  case WS2812_GBRW: n = (g << 24) | (b << 16) | (r << 8) | w; break;
			  case WS2812_BRGW: n = (b << 24) | (r << 16) | (g << 8) | w; break;
     f90:	043b      	lsls	r3, r7, #16
     f92:	ea45 6508 	orr.w	r5, r5, r8, lsl #24
     f96:	e7b8      	b.n	f0a <WS2812Serial::show()+0x2a6>
			uint32_t n=0;
			switch (config) {
			  case WS2812_RGBW: n = (r << 24) | (g << 16) | (b << 8) | w; break;
			  case WS2812_RBGW: n = (r << 24) | (b << 16) | (g << 8) | w; break;
			  case WS2812_GRBW: n = (g << 24) | (r << 16) | (b << 8) | w; break;
			  case WS2812_GBRW: n = (g << 24) | (b << 16) | (r << 8) | w; break;
     f98:	ea4f 4308 	mov.w	r3, r8, lsl #16
     f9c:	ea45 650e 	orr.w	r5, r5, lr, lsl #24
     fa0:	e7c0      	b.n	f24 <WS2812Serial::show()+0x2c0>
			w = (w * mult) >> 8;
			uint32_t n=0;
			switch (config) {
			  case WS2812_RGBW: n = (r << 24) | (g << 16) | (b << 8) | w; break;
			  case WS2812_RBGW: n = (r << 24) | (b << 16) | (g << 8) | w; break;
			  case WS2812_GRBW: n = (g << 24) | (r << 16) | (b << 8) | w; break;
     fa2:	043b      	lsls	r3, r7, #16
     fa4:	ea45 660e 	orr.w	r6, r5, lr, lsl #24
     fa8:	e7d9      	b.n	f5e <WS2812Serial::show()+0x2fa>
     faa:	bf00      	nop
     fac:	400e8000 	.word	0x400e8000
			r = (r * mult) >> 8;
			w = (w * mult) >> 8;
			uint32_t n=0;
			switch (config) {
			  case WS2812_RGBW: n = (r << 24) | (g << 16) | (b << 8) | w; break;
			  case WS2812_RBGW: n = (r << 24) | (b << 16) | (g << 8) | w; break;
     fb0:	ea4f 4308 	mov.w	r3, r8, lsl #16
     fb4:	ea45 6507 	orr.w	r5, r5, r7, lsl #24
     fb8:	e7a7      	b.n	f0a <WS2812Serial::show()+0x2a6>
			g = (g * mult) >> 8;
			r = (r * mult) >> 8;
			w = (w * mult) >> 8;
			uint32_t n=0;
			switch (config) {
			  case WS2812_RGBW: n = (r << 24) | (g << 16) | (b << 8) | w; break;
     fba:	ea4f 430e 	mov.w	r3, lr, lsl #16
     fbe:	ea45 6507 	orr.w	r5, r5, r7, lsl #24
     fc2:	e7bb      	b.n	f3c <WS2812Serial::show()+0x2d8>
     fc4:	8825      	ldrh	r5, [r4, #0]
				n <<= 2;
				*fb++ = x;
			} while (fb < stop);
		}
		microseconds_per_led = 30;
		bytes_per_led = 12;
     fc6:	260c      	movs	r6, #12
				if (!(n & 0x00400000)) x |= 0xE0;
				n <<= 2;
				*fb++ = x;
			} while (fb < stop);
		}
		microseconds_per_led = 30;
     fc8:	231e      	movs	r3, #30
		}
		microseconds_per_led = 40;
		bytes_per_led = 16;
	}
	// wait 300us WS2812 reset time
	uint32_t min_elapsed = (numled * microseconds_per_led) + 300;
     fca:	fb03 f505 	mul.w	r5, r3, r5
	if (min_elapsed < 2500) min_elapsed = 2500;
     fce:	f640 12c3 	movw	r2, #2499	; 0x9c3
     fd2:	f640 13c4 	movw	r3, #2500	; 0x9c4
		}
		microseconds_per_led = 40;
		bytes_per_led = 16;
	}
	// wait 300us WS2812 reset time
	uint32_t min_elapsed = (numled * microseconds_per_led) + 300;
     fd6:	f505 7596 	add.w	r5, r5, #300	; 0x12c
	if (min_elapsed < 2500) min_elapsed = 2500;
     fda:	4295      	cmp	r5, r2
     fdc:	bf98      	it	ls
     fde:	461d      	movls	r5, r3
     fe0:	e001      	b.n	fe6 <WS2812Serial::show()+0x382>
	uint32_t m;
	while (1) {
		m = micros();
		if ((m - prior_micros) > min_elapsed) break;
		yield();
     fe2:	f001 fc39 	bl	2858 <yield>
	// wait 300us WS2812 reset time
	uint32_t min_elapsed = (numled * microseconds_per_led) + 300;
	if (min_elapsed < 2500) min_elapsed = 2500;
	uint32_t m;
	while (1) {
		m = micros();
     fe6:	f000 fa47 	bl	1478 <micros>
		if ((m - prior_micros) > min_elapsed) break;
     fea:	6923      	ldr	r3, [r4, #16]
     fec:	1ac3      	subs	r3, r0, r3
     fee:	429d      	cmp	r5, r3
     ff0:	d2f7      	bcs.n	fe2 <WS2812Serial::show()+0x37e>
	dma->CFG->DSR_BCR = numled * bytes_per_led;
	dma->CFG->DCR = DMA_DCR_ERQ | DMA_DCR_CS | DMA_DCR_SSIZE(1) |
		DMA_DCR_SINC | DMA_DCR_DSIZE(1) | DMA_DCR_D_REQ;
#elif defined(__IMXRT1062__)
	// See if we need to muck with DMA cache...
	if ((uint32_t)frameBuffer >= 0x20200000u)  arm_dcache_flush(frameBuffer, numled * bytes_per_led);
     ff2:	6865      	ldr	r5, [r4, #4]
     ff4:	4b34      	ldr	r3, [pc, #208]	; (10c8 <WS2812Serial::show()+0x464>)
	while (1) {
		m = micros();
		if ((m - prior_micros) > min_elapsed) break;
		yield();
	}
	prior_micros = m;
     ff6:	6120      	str	r0, [r4, #16]
	dma->CFG->DSR_BCR = numled * bytes_per_led;
	dma->CFG->DCR = DMA_DCR_ERQ | DMA_DCR_CS | DMA_DCR_SSIZE(1) |
		DMA_DCR_SINC | DMA_DCR_DSIZE(1) | DMA_DCR_D_REQ;
#elif defined(__IMXRT1062__)
	// See if we need to muck with DMA cache...
	if ((uint32_t)frameBuffer >= 0x20200000u)  arm_dcache_flush(frameBuffer, numled * bytes_per_led);
     ff8:	429d      	cmp	r5, r3
     ffa:	d910      	bls.n	101e <WS2812Serial::show()+0x3ba>
// in the future.  For data transmission, use arm_dcache_flush_delete().
__attribute__((always_inline, unused))
static inline void arm_dcache_flush(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
     ffc:	8822      	ldrh	r2, [r4, #0]
// typically used with special fields you will want to quickly access
// in the future.  For data transmission, use arm_dcache_flush_delete().
__attribute__((always_inline, unused))
static inline void arm_dcache_flush(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
     ffe:	f025 031f 	bic.w	r3, r5, #31
	uint32_t end_addr = (uint32_t)addr + size;
    1002:	fb06 5202 	mla	r2, r6, r2, r5
	asm volatile("": : :"memory");
	asm("dsb");
    1006:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCMVAC = location;
    100a:	4930      	ldr	r1, [pc, #192]	; (10cc <WS2812Serial::show()+0x468>)
    100c:	600b      	str	r3, [r1, #0]
		location += 32;
    100e:	3320      	adds	r3, #32
	} while (location < end_addr);
    1010:	429a      	cmp	r2, r3
    1012:	d8fb      	bhi.n	100c <WS2812Serial::show()+0x3a8>
	asm("dsb");
    1014:	f3bf 8f4f 	dsb	sy
	asm("isb");
    1018:	f3bf 8f6f 	isb	sy
    101c:	6865      	ldr	r5, [r4, #4]
	
	dma->sourceBuffer(frameBuffer, numled * bytes_per_led);
    101e:	68e1      	ldr	r1, [r4, #12]
	void sourceBuffer(volatile const signed char p[], unsigned int len) {
		sourceBuffer((volatile const uint8_t *)p, len); }
	void sourceBuffer(volatile const unsigned char p[], unsigned int len) {
		TCD->SADDR = p;
		TCD->SOFF = 1;
		TCD->ATTR_SRC = 0;
    1020:	2000      	movs	r0, #0
    1022:	8823      	ldrh	r3, [r4, #0]
	// buffer for transmitting data is used.
	void sourceBuffer(volatile const signed char p[], unsigned int len) {
		sourceBuffer((volatile const uint8_t *)p, len); }
	void sourceBuffer(volatile const unsigned char p[], unsigned int len) {
		TCD->SADDR = p;
		TCD->SOFF = 1;
    1024:	2701      	movs	r7, #1
	// Use a buffer (array of data) as the data source.  Typically a
	// buffer for transmitting data is used.
	void sourceBuffer(volatile const signed char p[], unsigned int len) {
		sourceBuffer((volatile const uint8_t *)p, len); }
	void sourceBuffer(volatile const unsigned char p[], unsigned int len) {
		TCD->SADDR = p;
    1026:	680a      	ldr	r2, [r1, #0]
    1028:	fb06 f303 	mul.w	r3, r6, r3
		TCD->SOFF = 1;
		TCD->ATTR_SRC = 0;
    102c:	71d0      	strb	r0, [r2, #7]
		TCD->NBYTES = 1;
    102e:	f8d1 e000 	ldr.w	lr, [r1]
		TCD->SLAST = -len;
		TCD->BITER = len;
    1032:	b298      	uxth	r0, r3
	// Use a buffer (array of data) as the data source.  Typically a
	// buffer for transmitting data is used.
	void sourceBuffer(volatile const signed char p[], unsigned int len) {
		sourceBuffer((volatile const uint8_t *)p, len); }
	void sourceBuffer(volatile const unsigned char p[], unsigned int len) {
		TCD->SADDR = p;
    1034:	6015      	str	r5, [r2, #0]
		TCD->SOFF = 1;
		TCD->ATTR_SRC = 0;
		TCD->NBYTES = 1;
		TCD->SLAST = -len;
    1036:	425b      	negs	r3, r3
	// buffer for transmitting data is used.
	void sourceBuffer(volatile const signed char p[], unsigned int len) {
		sourceBuffer((volatile const uint8_t *)p, len); }
	void sourceBuffer(volatile const unsigned char p[], unsigned int len) {
		TCD->SADDR = p;
		TCD->SOFF = 1;
    1038:	8097      	strh	r7, [r2, #4]
		TCD->ATTR_SRC = 0;
		TCD->NBYTES = 1;
    103a:	f8ce 7008 	str.w	r7, [lr, #8]
		TCD->SLAST = -len;
    103e:	680a      	ldr	r2, [r1, #0]
		TCD->BITER = len;
    1040:	83d0      	strh	r0, [r2, #30]
		TCD->CITER = len;
    1042:	6809      	ldr	r1, [r1, #0]
	void sourceBuffer(volatile const unsigned char p[], unsigned int len) {
		TCD->SADDR = p;
		TCD->SOFF = 1;
		TCD->ATTR_SRC = 0;
		TCD->NBYTES = 1;
		TCD->SLAST = -len;
    1044:	60d3      	str	r3, [r2, #12]
		TCD->BITER = len;
		TCD->CITER = len;
    1046:	82c8      	strh	r0, [r1, #22]
//	dma->transferSize(1);
	dma->transferCount(numled * bytes_per_led);
    1048:	68e1      	ldr	r1, [r4, #12]
    104a:	8823      	ldrh	r3, [r4, #0]
		}
	}

	// Set the number of transfers (number of triggers until complete)
	void transferCount(unsigned int len) {
		if (!(TCD->BITER & DMA_TCD_BITER_ELINK)) {
    104c:	680a      	ldr	r2, [r1, #0]
    104e:	fb06 f603 	mul.w	r6, r6, r3
    1052:	8bd3      	ldrh	r3, [r2, #30]
    1054:	041b      	lsls	r3, r3, #16
    1056:	d419      	bmi.n	108c <WS2812Serial::show()+0x428>
			if (len > 32767) return;
    1058:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
    105c:	d205      	bcs.n	106a <WS2812Serial::show()+0x406>
			TCD->BITER = len;
    105e:	b2b6      	uxth	r6, r6
    1060:	83d6      	strh	r6, [r2, #30]
			TCD->CITER = len;
    1062:	680b      	ldr	r3, [r1, #0]
    1064:	82de      	strh	r6, [r3, #22]
    1066:	68e1      	ldr	r1, [r4, #12]
    1068:	680a      	ldr	r2, [r1, #0]
	void interruptAtHalf(void) {
		TCD->CSR |= DMA_TCD_CSR_INTHALF;
	}

	void disableOnCompletion(void) {
		TCD->CSR |= DMA_TCD_CSR_DREQ;
    106a:	8b93      	ldrh	r3, [r2, #28]

	Serial.printf("SA:%x SO:%d AT:%x NB:%x SL:%d DA:%x DO: %d CI:%x DL:%x CS:%x BI:%x\n", (uint32_t)dma->TCD->SADDR,
	dma->TCD->SOFF, dma->TCD->ATTR, dma->TCD->NBYTES, dma->TCD->SLAST, (uint32_t)dma->TCD->DADDR, 
	dma->TCD->DOFF, dma->TCD->CITER, dma->TCD->DLASTSGA, dma->TCD->CSR, dma->TCD->BITER);
*/
	uart->STAT = 0;	// try clearing out the status
    106c:	2500      	movs	r5, #0
    106e:	69a4      	ldr	r4, [r4, #24]
    1070:	b29b      	uxth	r3, r3
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    1072:	4817      	ldr	r0, [pc, #92]	; (10d0 <WS2812Serial::show()+0x46c>)
	void interruptAtHalf(void) {
		TCD->CSR |= DMA_TCD_CSR_INTHALF;
	}

	void disableOnCompletion(void) {
		TCD->CSR |= DMA_TCD_CSR_DREQ;
    1074:	f043 0308 	orr.w	r3, r3, #8
    1078:	8393      	strh	r3, [r2, #28]
    107a:	6165      	str	r5, [r4, #20]
    107c:	790b      	ldrb	r3, [r1, #4]
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    107e:	76c3      	strb	r3, [r0, #27]
    1080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1084:	8825      	ldrh	r5, [r4, #0]
				n <<= 2;
				*fb++ = x;
			} while (fb < stop);
		}
		microseconds_per_led = 40;
		bytes_per_led = 16;
    1086:	2610      	movs	r6, #16
				if (!(n & 0x40000000)) x |= 0xE0;
				n <<= 2;
				*fb++ = x;
			} while (fb < stop);
		}
		microseconds_per_led = 40;
    1088:	2328      	movs	r3, #40	; 0x28
    108a:	e79e      	b.n	fca <WS2812Serial::show()+0x366>
		if (!(TCD->BITER & DMA_TCD_BITER_ELINK)) {
			if (len > 32767) return;
			TCD->BITER = len;
			TCD->CITER = len;
		} else {
			if (len > 511) return;
    108c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    1090:	d2eb      	bcs.n	106a <WS2812Serial::show()+0x406>
			TCD->BITER = (TCD->BITER & 0xFE00) | len;
    1092:	8bd3      	ldrh	r3, [r2, #30]
    1094:	b2b6      	uxth	r6, r6
    1096:	f403 437e 	and.w	r3, r3, #65024	; 0xfe00
    109a:	4333      	orrs	r3, r6
    109c:	83d3      	strh	r3, [r2, #30]
			TCD->CITER = (TCD->CITER & 0xFE00) | len;
    109e:	680a      	ldr	r2, [r1, #0]
    10a0:	8ad3      	ldrh	r3, [r2, #22]
    10a2:	f403 437e 	and.w	r3, r3, #65024	; 0xfe00
    10a6:	431e      	orrs	r6, r3
    10a8:	82d6      	strh	r6, [r2, #22]
    10aa:	68e1      	ldr	r1, [r4, #12]
    10ac:	680a      	ldr	r2, [r1, #0]
    10ae:	e7dc      	b.n	106a <WS2812Serial::show()+0x406>
	if (config < 6) {
		// RGB
		const uint8_t *p = drawBuffer;
		const uint8_t *end = p + (numled * 3);
		uint8_t *fb = frameBuffer;
		while (p < end) {
    10b0:	4615      	mov	r5, r2
				n <<= 2;
				*fb++ = x;
			} while (fb < stop);
		}
		microseconds_per_led = 30;
		bytes_per_led = 12;
    10b2:	260c      	movs	r6, #12
				if (!(n & 0x00400000)) x |= 0xE0;
				n <<= 2;
				*fb++ = x;
			} while (fb < stop);
		}
		microseconds_per_led = 30;
    10b4:	231e      	movs	r3, #30
    10b6:	e788      	b.n	fca <WS2812Serial::show()+0x366>
				n <<= 2;
				*fb++ = x;
			} while (fb < stop);
		}
		microseconds_per_led = 40;
		bytes_per_led = 16;
    10b8:	2610      	movs	r6, #16
				if (!(n & 0x40000000)) x |= 0xE0;
				n <<= 2;
				*fb++ = x;
			} while (fb < stop);
		}
		microseconds_per_led = 40;
    10ba:	2328      	movs	r3, #40	; 0x28
    10bc:	e785      	b.n	fca <WS2812Serial::show()+0x366>
			uint8_t r = *p++;
			uint32_t mult = brightness + 1;
			b = (b * mult) >> 8;
			g = (g * mult) >> 8;
			r = (r * mult) >> 8;
			uint32_t n=0;
    10be:	2300      	movs	r3, #0
    10c0:	e651      	b.n	d66 <WS2812Serial::show()+0x102>
			uint32_t mult = brightness + 1;
			b = (b * mult) >> 8;
			g = (g * mult) >> 8;
			r = (r * mult) >> 8;
			w = (w * mult) >> 8;
			uint32_t n=0;
    10c2:	2300      	movs	r3, #0
    10c4:	e6a8      	b.n	e18 <WS2812Serial::show()+0x1b4>
    10c6:	bf00      	nop
    10c8:	201fffff 	.word	0x201fffff
    10cc:	e000ef68 	.word	0xe000ef68
    10d0:	400e8000 	.word	0x400e8000

000010d4 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>:
	m_nPowerData = 0xFFFFFFFF;
}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
    10d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
    10d6:	1e1e      	subs	r6, r3, #0
	m_nPowerData = 0xFFFFFFFF;
}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
    10d8:	4604      	mov	r4, r0
    10da:	460f      	mov	r7, r1
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
    10dc:	dd0f      	ble.n	10fe <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x2a>
    10de:	eb02 0542 	add.w	r5, r2, r2, lsl #1
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
    10e2:	6823      	ldr	r3, [r4, #0]
    10e4:	4620      	mov	r0, r4
    10e6:	689b      	ldr	r3, [r3, #8]
    10e8:	4798      	blx	r3
    /// get the next controller in the chain after this one.  will return NULL at the end of the chain
    CLEDController *next() { return m_pNext; }

	/// set the default array of leds to be used by this controller
    CLEDController & setLeds(CRGB *data, int nLeds) {
        m_Data = data;
    10ea:	197a      	adds	r2, r7, r5
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
    10ec:	6823      	ldr	r3, [r4, #0]
    10ee:	6062      	str	r2, [r4, #4]
    10f0:	4a0c      	ldr	r2, [pc, #48]	; (1124 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x50>)
    10f2:	695b      	ldr	r3, [r3, #20]
        m_nLeds = nLeds;
    10f4:	6166      	str	r6, [r4, #20]
    10f6:	4293      	cmp	r3, r2
    10f8:	d104      	bne.n	1104 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x30>
	return *pLed;
}
    10fa:	4620      	mov	r0, r4
    10fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;
    10fe:	4616      	mov	r6, r2
    1100:	2500      	movs	r5, #0
    1102:	e7ee      	b.n	10e2 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0xe>

	pLed->init();
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
    1104:	4620      	mov	r0, r4
    1106:	4798      	blx	r3

void CFastLED::setMaxRefreshRate(uint16_t refresh, bool constrain) {
  if(constrain) {
    // if we're constraining, the new value of m_nMinMicros _must_ be higher than previously (because we're only
    // allowed to slow things down if constraining)
    if(refresh > 0) {
    1108:	2800      	cmp	r0, #0
    110a:	d0f6      	beq.n	10fa <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x26>
      m_nMinMicros = ( (1000000/refresh) >  m_nMinMicros) ? (1000000/refresh) : m_nMinMicros;
    110c:	4b06      	ldr	r3, [pc, #24]	; (1128 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x54>)
    110e:	4a07      	ldr	r2, [pc, #28]	; (112c <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x58>)
    1110:	fb93 f0f0 	sdiv	r0, r3, r0
    1114:	6853      	ldr	r3, [r2, #4]
    1116:	4298      	cmp	r0, r3
    1118:	bf38      	it	cc
    111a:	4618      	movcc	r0, r3
    111c:	6050      	str	r0, [r2, #4]

	pLed->init();
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
	return *pLed;
}
    111e:	4620      	mov	r0, r4
    1120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1122:	bf00      	nop
    1124:	00000081 	.word	0x00000081
    1128:	000f4240 	.word	0x000f4240
    112c:	20000e60 	.word	0x20000e60

00001130 <CFastLED::show(unsigned char)>:

void CFastLED::show(uint8_t scale) {
    1130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1134:	6843      	ldr	r3, [r0, #4]
    1136:	b083      	sub	sp, #12
    1138:	4606      	mov	r6, r0
    113a:	460f      	mov	r7, r1
    113c:	4c35      	ldr	r4, [pc, #212]	; (1214 <CFastLED::show(unsigned char)+0xe4>)
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    113e:	2b00      	cmp	r3, #0
    1140:	d15f      	bne.n	1202 <CFastLED::show(unsigned char)+0xd2>
	lastshow = micros();
    1142:	f000 f999 	bl	1478 <micros>

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    1146:	68f3      	ldr	r3, [r6, #12]
}

void CFastLED::show(uint8_t scale) {
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
	lastshow = micros();
    1148:	6020      	str	r0, [r4, #0]

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    114a:	b11b      	cbz	r3, 1154 <CFastLED::show(unsigned char)+0x24>
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
    114c:	4638      	mov	r0, r7
    114e:	68b1      	ldr	r1, [r6, #8]
    1150:	4798      	blx	r3
    1152:	4607      	mov	r7, r0
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    /// get the first led controller in the chain of controllers
    static CLEDController *head() { return m_pHead; }
    1154:	4b30      	ldr	r3, [pc, #192]	; (1218 <CFastLED::show(unsigned char)+0xe8>)
    1156:	681c      	ldr	r4, [r3, #0]
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    1158:	2c00      	cmp	r4, #0
    115a:	d037      	beq.n	11cc <CFastLED::show(unsigned char)+0x9c>

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    115c:	2500      	movs	r5, #0
		uint8_t d = pCur->getDither();
		if(m_nFPS < 100) { pCur->setDither(0); }
    115e:	8873      	ldrh	r3, [r6, #2]
    1160:	f894 8012 	ldrb.w	r8, [r4, #18]
    1164:	2b63      	cmp	r3, #99	; 0x63
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    1166:	6823      	ldr	r3, [r4, #0]
    1168:	6861      	ldr	r1, [r4, #4]

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    116a:	bf98      	it	ls
    116c:	74a5      	strbls	r5, [r4, #18]
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
    116e:	f88d 5004 	strb.w	r5, [sp, #4]
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    1172:	f8d3 9004 	ldr.w	r9, [r3, #4]
    1176:	f88d 5005 	strb.w	r5, [sp, #5]
    117a:	f88d 5006 	strb.w	r5, [sp, #6]
    117e:	6962      	ldr	r2, [r4, #20]
      #if defined(NO_CORRECTION) && (NO_CORRECTION==1)
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
    1180:	b1e7      	cbz	r7, 11bc <CFastLED::show(unsigned char)+0x8c>
    1182:	f104 000b 	add.w	r0, r4, #11
    1186:	f10d 0e04 	add.w	lr, sp, #4
    118a:	f104 0c0e 	add.w	ip, r4, #14
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
    118e:	f810 af01 	ldrb.w	sl, [r0, #1]!
                      uint8_t ct = colorTemperature.raw[i];
    1192:	f890 b003 	ldrb.w	fp, [r0, #3]
                      if(cc > 0 && ct > 0) {
    1196:	f1ba 0f00 	cmp.w	sl, #0
    119a:	d00b      	beq.n	11b4 <CFastLED::show(unsigned char)+0x84>
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    119c:	f10b 0301 	add.w	r3, fp, #1

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
                      uint8_t ct = colorTemperature.raw[i];
                      if(cc > 0 && ct > 0) {
    11a0:	f1bb 0f00 	cmp.w	fp, #0
    11a4:	d006      	beq.n	11b4 <CFastLED::show(unsigned char)+0x84>
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    11a6:	fb0a 3303 	mla	r3, sl, r3, r3
    11aa:	fb07 f303 	mul.w	r3, r7, r3
                          work /= 0x10000L;
                          adj.raw[i] = work & 0xFF;
    11ae:	0c1b      	lsrs	r3, r3, #16
    11b0:	f88e 3000 	strb.w	r3, [lr]
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
    11b4:	4560      	cmp	r0, ip
    11b6:	f10e 0e01 	add.w	lr, lr, #1
    11ba:	d1e8      	bne.n	118e <CFastLED::show(unsigned char)+0x5e>
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    11bc:	4620      	mov	r0, r4
    11be:	ab01      	add	r3, sp, #4
    11c0:	47c8      	blx	r9

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    11c2:	f884 8012 	strb.w	r8, [r4, #18]
    11c6:	68a4      	ldr	r4, [r4, #8]
	if(m_pPowerFunc) {
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    11c8:	2c00      	cmp	r4, #0
    11ca:	d1c8      	bne.n	115e <CFastLED::show(unsigned char)+0x2e>

void CFastLED::countFPS(int nFrames) {
  static int br = 0;
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
    11cc:	4813      	ldr	r0, [pc, #76]	; (121c <CFastLED::show(unsigned char)+0xec>)
    11ce:	6802      	ldr	r2, [r0, #0]
    11d0:	1c51      	adds	r1, r2, #1
    11d2:	2a18      	cmp	r2, #24
    11d4:	6001      	str	r1, [r0, #0]
    11d6:	dd11      	ble.n	11fc <CFastLED::show(unsigned char)+0xcc>
    11d8:	4d11      	ldr	r5, [pc, #68]	; (1220 <CFastLED::show(unsigned char)+0xf0>)
      uint32_t now = millis();
      now -= lastframe;
      if( now == 0 ) {
          now = 1; // prevent division by zero below
      }
      m_nFPS = (br * 1000) / now;
    11da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  static int br = 0;
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
      uint32_t now = millis();
      now -= lastframe;
    11de:	4c11      	ldr	r4, [pc, #68]	; (1224 <CFastLED::show(unsigned char)+0xf4>)
      if( now == 0 ) {
          now = 1; // prevent division by zero below
      }
      m_nFPS = (br * 1000) / now;
    br = 0;
    11e0:	2700      	movs	r7, #0
    11e2:	682a      	ldr	r2, [r5, #0]
      uint32_t now = millis();
      now -= lastframe;
      if( now == 0 ) {
          now = 1; // prevent division by zero below
      }
      m_nFPS = (br * 1000) / now;
    11e4:	fb03 f101 	mul.w	r1, r3, r1
  static int br = 0;
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
      uint32_t now = millis();
      now -= lastframe;
    11e8:	6823      	ldr	r3, [r4, #0]
    11ea:	682d      	ldr	r5, [r5, #0]
      if( now == 0 ) {
          now = 1; // prevent division by zero below
    11ec:	1ad3      	subs	r3, r2, r3
      }
      m_nFPS = (br * 1000) / now;
    br = 0;
    11ee:	6007      	str	r7, [r0, #0]
    lastframe = millis();
    11f0:	6025      	str	r5, [r4, #0]

  if(br++ >= nFrames) {
      uint32_t now = millis();
      now -= lastframe;
      if( now == 0 ) {
          now = 1; // prevent division by zero below
    11f2:	bf08      	it	eq
    11f4:	2301      	moveq	r3, #1
      }
      m_nFPS = (br * 1000) / now;
    11f6:	fbb1 f3f3 	udiv	r3, r1, r3
    11fa:	8073      	strh	r3, [r6, #2]
		pCur->showLeds(scale);
		pCur->setDither(d);
		pCur = pCur->next();
	}
	countFPS();
}
    11fc:	b003      	add	sp, #12
    11fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return *pLed;
}

void CFastLED::show(uint8_t scale) {
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    1202:	f000 f939 	bl	1478 <micros>
    1206:	6822      	ldr	r2, [r4, #0]
    1208:	6873      	ldr	r3, [r6, #4]
    120a:	1a80      	subs	r0, r0, r2
    120c:	4298      	cmp	r0, r3
    120e:	d396      	bcc.n	113e <CFastLED::show(unsigned char)+0xe>
    1210:	e797      	b.n	1142 <CFastLED::show(unsigned char)+0x12>
    1212:	bf00      	nop
    1214:	20000e78 	.word	0x20000e78
    1218:	20000e70 	.word	0x20000e70
    121c:	20000e74 	.word	0x20000e74
    1220:	20000e8c 	.word	0x20000e8c
    1224:	20000e7c 	.word	0x20000e7c

00001228 <_GLOBAL__sub_I_pSmartMatrix>:
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    1228:	4b04      	ldr	r3, [pc, #16]	; (123c <_GLOBAL__sub_I_pSmartMatrix+0x14>)
	m_nFPS = 0;
    122a:	2200      	movs	r2, #0
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    122c:	20ff      	movs	r0, #255	; 0xff
	m_nFPS = 0;
	m_pPowerFunc = NULL;
	m_nPowerData = 0xFFFFFFFF;
    122e:	f04f 31ff 	mov.w	r1, #4294967295

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
	m_nFPS = 0;
    1232:	805a      	strh	r2, [r3, #2]
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    1234:	7018      	strb	r0, [r3, #0]
	m_nFPS = 0;
	m_pPowerFunc = NULL;
	m_nPowerData = 0xFFFFFFFF;
    1236:	6099      	str	r1, [r3, #8]
CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
	m_nFPS = 0;
	m_pPowerFunc = NULL;
    1238:	60da      	str	r2, [r3, #12]
    123a:	4770      	bx	lr
    123c:	20000e60 	.word	0x20000e60

00001240 <hsv2rgb_rainbow(CHSV const&, CRGB&)>:
#define K171 171
#define K170 170
#define K85  85

void hsv2rgb_rainbow( const CHSV& hsv, CRGB& rgb)
{
    1240:	b4f0      	push	{r4, r5, r6, r7}
    // Gscale: what to scale green down by.
    // Depends GREATLY on your particular LEDs
    const uint8_t Gscale = 0;
    
    
    uint8_t hue = hsv.hue;
    1242:	7804      	ldrb	r4, [r0, #0]
    uint8_t sat = hsv.sat;
    1244:	7846      	ldrb	r6, [r0, #1]
    1246:	00e3      	lsls	r3, r4, #3
    uint8_t val = hsv.val;
    1248:	7882      	ldrb	r2, [r0, #2]
    
    uint8_t third = scale8( offset8, (256 / 3)); // max = 85
    
    uint8_t r, g, b;
    
    if( ! (hue & 0x80) ) {
    124a:	0625      	lsls	r5, r4, #24
    124c:	f003 00f8 	and.w	r0, r3, #248	; 0xf8
    1250:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    1254:	eb03 1303 	add.w	r3, r3, r3, lsl #4
    1258:	4403      	add	r3, r0
    125a:	f3c3 2307 	ubfx	r3, r3, #8, #8
    125e:	d45f      	bmi.n	1320 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xe0>
        // 0XX
        if( ! (hue & 0x40) ) {
    1260:	f004 0540 	and.w	r5, r4, #64	; 0x40
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
    1264:	f004 0420 	and.w	r4, r4, #32
    
    uint8_t r, g, b;
    
    if( ! (hue & 0x80) ) {
        // 0XX
        if( ! (hue & 0x40) ) {
    1268:	f005 07ff 	and.w	r7, r5, #255	; 0xff
    126c:	2d00      	cmp	r5, #0
    126e:	d146      	bne.n	12fe <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xbe>
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
    1270:	f004 00ff 	and.w	r0, r4, #255	; 0xff
    1274:	2c00      	cmp	r4, #0
    1276:	d06c      	beq.n	1352 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x112>
            } else {
                // 001
                //case 1: // O -> Y
                if( Y1 ) {
                    r = K171;
                    g = K85 + third ;
    1278:	3355      	adds	r3, #85	; 0x55
    127a:	b2dd      	uxtb	r5, r3
                FORCE_REFERENCE(b);
            } else {
                // 001
                //case 1: // O -> Y
                if( Y1 ) {
                    r = K171;
    127c:	24ab      	movs	r4, #171	; 0xab
                    g = K85 + third ;
                    b = 0;
    127e:	463b      	mov	r3, r7
    if( G2 ) g = g >> 1;
    if( Gscale ) g = scale8_video_LEAVING_R1_DIRTY( g, Gscale);
    
    // Scale down colors if we're desaturated at all
    // and add the brightness_floor to r, g, and b.
    if( sat != 255 ) {
    1280:	2eff      	cmp	r6, #255	; 0xff
    1282:	d01c      	beq.n	12be <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x7e>
        if( sat == 0) {
    1284:	2e00      	cmp	r6, #0
    1286:	d079      	beq.n	137c <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x13c>
            r = 255; b = 255; g = 255;
        } else {
            //nscale8x3_video( r, g, b, sat);
#if (FASTLED_SCALE8_FIXED==1)
            if( r ) r = scale8_LEAVING_R1_DIRTY( r, sat);
    1288:	b11c      	cbz	r4, 1292 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x52>
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    128a:	fb06 4404 	mla	r4, r6, r4, r4
    128e:	f3c4 2407 	ubfx	r4, r4, #8, #8
            if( g ) g = scale8_LEAVING_R1_DIRTY( g, sat);
    1292:	b11d      	cbz	r5, 129c <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x5c>
    1294:	fb06 5505 	mla	r5, r6, r5, r5
    1298:	f3c5 2507 	ubfx	r5, r5, #8, #8
            if( b ) b = scale8_LEAVING_R1_DIRTY( b, sat);
    129c:	b11b      	cbz	r3, 12a6 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x66>
    129e:	fb06 3303 	mla	r3, r6, r3, r3
    12a2:	f3c3 2307 	ubfx	r3, r3, #8, #8
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    12a6:	43f0      	mvns	r0, r6
    12a8:	b2c0      	uxtb	r0, r0
    12aa:	fb00 0000 	mla	r0, r0, r0, r0
    12ae:	f3c0 2007 	ubfx	r0, r0, #8, #8
            
            uint8_t desat = 255 - sat;
            desat = scale8( desat, desat);
            
            uint8_t brightness_floor = desat;
            r += brightness_floor;
    12b2:	4404      	add	r4, r0
            g += brightness_floor;
    12b4:	4405      	add	r5, r0
            b += brightness_floor;
    12b6:	4403      	add	r3, r0
            
            uint8_t desat = 255 - sat;
            desat = scale8( desat, desat);
            
            uint8_t brightness_floor = desat;
            r += brightness_floor;
    12b8:	b2e4      	uxtb	r4, r4
            g += brightness_floor;
    12ba:	b2ed      	uxtb	r5, r5
            b += brightness_floor;
    12bc:	b2db      	uxtb	r3, r3
        }
    }
    
    // Now scale everything down if we're at value < 255.
    if( val != 255 ) {
    12be:	2aff      	cmp	r2, #255	; 0xff
    12c0:	d018      	beq.n	12f4 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xb4>
/// If you are doing several 'scale8_video's in a row, use this, and
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_video_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1 || defined(LIB8_ATTINY)
    uint8_t j = (((int)i * (int)scale) >> 8) + ((i&&scale)?1:0);
    12c2:	fb12 f002 	smulbb	r0, r2, r2
    12c6:	3200      	adds	r2, #0
    12c8:	bf18      	it	ne
    12ca:	2201      	movne	r2, #1
    12cc:	eb02 2210 	add.w	r2, r2, r0, lsr #8
        
        val = scale8_video_LEAVING_R1_DIRTY( val, val);
        if( val == 0 ) {
    12d0:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    12d4:	d056      	beq.n	1384 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x144>
            r=0; g=0; b=0;
        } else {
            // nscale8x3_video( r, g, b, val);
#if (FASTLED_SCALE8_FIXED==1)
            if( r ) r = scale8_LEAVING_R1_DIRTY( r, val);
    12d6:	b11c      	cbz	r4, 12e0 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xa0>
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    12d8:	fb02 4404 	mla	r4, r2, r4, r4
    12dc:	f3c4 2407 	ubfx	r4, r4, #8, #8
            if( g ) g = scale8_LEAVING_R1_DIRTY( g, val);
    12e0:	b11d      	cbz	r5, 12ea <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xaa>
    12e2:	fb02 5505 	mla	r5, r2, r5, r5
    12e6:	f3c5 2507 	ubfx	r5, r5, #8, #8
            if( b ) b = scale8_LEAVING_R1_DIRTY( b, val);
    12ea:	b11b      	cbz	r3, 12f4 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xb4>
    12ec:	fb02 3303 	mla	r3, r2, r3, r3
    12f0:	f3c3 2307 	ubfx	r3, r3, #8, #8
    // It turns out that fixing it winds up costing more than
    // not fixing it.
    // To paraphrase Dr Bronner, profile! profile! profile!
    //asm volatile(  ""  :  :  : "r26", "r27" );
    //asm volatile (" movw r30, r26 \n" : : : "r30", "r31");
    rgb.r = r;
    12f4:	700c      	strb	r4, [r1, #0]
    rgb.g = g;
    12f6:	704d      	strb	r5, [r1, #1]
    rgb.b = b;
    12f8:	708b      	strb	r3, [r1, #2]
}
    12fa:	bcf0      	pop	{r4, r5, r6, r7}
    12fc:	4770      	bx	lr
                }
            }
        } else {
            //01X
            // section 2-3
            if( !  (hue & 0x20) ) {
    12fe:	f004 07ff 	and.w	r7, r4, #255	; 0xff
    1302:	bb5c      	cbnz	r4, 135c <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x11c>
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    1304:	eb00 04c0 	add.w	r4, r0, r0, lsl #3
                    g = K170 + third;
    1308:	3b56      	subs	r3, #86	; 0x56
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    130a:	eb00 0044 	add.w	r0, r0, r4, lsl #1
                    g = K170 + third;
    130e:	b2dd      	uxtb	r5, r3
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    1310:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    1314:	1204      	asrs	r4, r0, #8
    1316:	f1c4 04ab 	rsb	r4, r4, #171	; 0xab
    131a:	b2e4      	uxtb	r4, r4
                    g = K170 + third;
                    b = 0;
    131c:	463b      	mov	r3, r7
    131e:	e7af      	b.n	1280 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
            }
        }
    } else {
        // section 4-7
        // 1XX
        if( ! (hue & 0x40) ) {
    1320:	f004 0740 	and.w	r7, r4, #64	; 0x40
    1324:	f007 05ff 	and.w	r5, r7, #255	; 0xff
    1328:	b9e7      	cbnz	r7, 1364 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x124>
            // 10X
            if( ! ( hue & 0x20) ) {
    132a:	f004 0720 	and.w	r7, r4, #32
    132e:	f007 04ff 	and.w	r4, r7, #255	; 0xff
    1332:	2f00      	cmp	r7, #0
    1334:	d136      	bne.n	13a4 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x164>
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    1336:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
    133a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
    133e:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    1342:	f3c0 2007 	ubfx	r0, r0, #8, #8
                //case 4: // A -> B
                r = 0;
                FORCE_REFERENCE(r);
                //uint8_t twothirds = (third << 1);
                uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                g = K171 - twothirds; //K170?
    1346:	f1c0 05ab 	rsb	r5, r0, #171	; 0xab
                b = K85  + twothirds;
    134a:	3055      	adds	r0, #85	; 0x55
                //case 4: // A -> B
                r = 0;
                FORCE_REFERENCE(r);
                //uint8_t twothirds = (third << 1);
                uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                g = K171 - twothirds; //K170?
    134c:	b2ed      	uxtb	r5, r5
                b = K85  + twothirds;
    134e:	b2c3      	uxtb	r3, r0
    1350:	e796      	b.n	1280 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
                // 000
                //case 0: // R -> O
                r = K255 - third;
    1352:	43dc      	mvns	r4, r3
    1354:	b2e4      	uxtb	r4, r4
                g = third;
    1356:	461d      	mov	r5, r3
                b = 0;
    1358:	4603      	mov	r3, r0
    135a:	e791      	b.n	1280 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
                }
            } else {
                // 011
                // case 3: // G -> A
                r = 0;
                FORCE_REFERENCE(r);
    135c:	2400      	movs	r4, #0
                g = K255 - third;
    135e:	43dd      	mvns	r5, r3
    1360:	b2ed      	uxtb	r5, r5
    1362:	e78d      	b.n	1280 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
                FORCE_REFERENCE(g);
                b = K255 - third;
                
            }
        } else {
            if( !  (hue & 0x20)  ) {
    1364:	f004 0420 	and.w	r4, r4, #32
    1368:	f004 05ff 	and.w	r5, r4, #255	; 0xff
    136c:	b994      	cbnz	r4, 1394 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x154>
                // 110
                //case 6: // P -- K
                r = K85 + third;
    136e:	f103 0455 	add.w	r4, r3, #85	; 0x55
    1372:	b2e4      	uxtb	r4, r4
                g = 0;
                FORCE_REFERENCE(g);
                b = K171 - third;
    1374:	f1c3 03ab 	rsb	r3, r3, #171	; 0xab
    1378:	b2db      	uxtb	r3, r3
    137a:	e781      	b.n	1280 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
    
    // Scale down colors if we're desaturated at all
    // and add the brightness_floor to r, g, and b.
    if( sat != 255 ) {
        if( sat == 0) {
            r = 255; b = 255; g = 255;
    137c:	23ff      	movs	r3, #255	; 0xff
    137e:	461d      	mov	r5, r3
    1380:	461c      	mov	r4, r3
    1382:	e79c      	b.n	12be <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x7e>
    // Now scale everything down if we're at value < 255.
    if( val != 255 ) {
        
        val = scale8_video_LEAVING_R1_DIRTY( val, val);
        if( val == 0 ) {
            r=0; g=0; b=0;
    1384:	4615      	mov	r5, r2
    1386:	4614      	mov	r4, r2
    1388:	4613      	mov	r3, r2
    // It turns out that fixing it winds up costing more than
    // not fixing it.
    // To paraphrase Dr Bronner, profile! profile! profile!
    //asm volatile(  ""  :  :  : "r26", "r27" );
    //asm volatile (" movw r30, r26 \n" : : : "r30", "r31");
    rgb.r = r;
    138a:	700c      	strb	r4, [r1, #0]
    rgb.g = g;
    138c:	704d      	strb	r5, [r1, #1]
    rgb.b = b;
    138e:	708b      	strb	r3, [r1, #2]
}
    1390:	bcf0      	pop	{r4, r5, r6, r7}
    1392:	4770      	bx	lr
                b = K171 - third;
                
            } else {
                // 111
                //case 7: // K -> R
                r = K170 + third;
    1394:	f1a3 0456 	sub.w	r4, r3, #86	; 0x56
                g = 0;
                FORCE_REFERENCE(g);
    1398:	2500      	movs	r5, #0
                b = K171 - third;
                
            } else {
                // 111
                //case 7: // K -> R
                r = K170 + third;
    139a:	b2e4      	uxtb	r4, r4
                g = 0;
                FORCE_REFERENCE(g);
                b = K85 - third;
    139c:	f1c3 0355 	rsb	r3, r3, #85	; 0x55
    13a0:	b2db      	uxtb	r3, r3
    13a2:	e76d      	b.n	1280 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
                // 101
                //case 5: // B -> P
                r = third;
                g = 0;
                FORCE_REFERENCE(g);
                b = K255 - third;
    13a4:	43d8      	mvns	r0, r3
                b = K85  + twothirds;
                
            } else {
                // 101
                //case 5: // B -> P
                r = third;
    13a6:	461c      	mov	r4, r3
                g = 0;
                FORCE_REFERENCE(g);
                b = K255 - third;
    13a8:	b2c3      	uxtb	r3, r0
    13aa:	e769      	b.n	1280 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>

000013ac <delay>:

void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    13ac:	2800      	cmp	r0, #0
    13ae:	d057      	beq.n	1460 <delay+0xb4>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    13b0:	2201      	movs	r2, #1
{

}*/

void delay(uint32_t msec)
{
    13b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    13b6:	b085      	sub	sp, #20
    13b8:	4683      	mov	fp, r0
    13ba:	4c2a      	ldr	r4, [pc, #168]	; (1464 <delay+0xb8>)
    13bc:	4d2a      	ldr	r5, [pc, #168]	; (1468 <delay+0xbc>)
    13be:	4e2b      	ldr	r6, [pc, #172]	; (146c <delay+0xc0>)
    13c0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    13c4:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    13c8:	6828      	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    13ca:	6833      	ldr	r3, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    13cc:	e844 2100 	strex	r1, r2, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    13d0:	2900      	cmp	r1, #0
    13d2:	d1f7      	bne.n	13c4 <delay+0x18>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    13d4:	4f26      	ldr	r7, [pc, #152]	; (1470 <delay+0xc4>)
    13d6:	e9cd 8902 	strd	r8, r9, [sp, #8]
    13da:	683a      	ldr	r2, [r7, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    13dc:	1ad3      	subs	r3, r2, r3
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    13de:	4a25      	ldr	r2, [pc, #148]	; (1474 <delay+0xc8>)
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    13e0:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    13e4:	9701      	str	r7, [sp, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    13e6:	6812      	ldr	r2, [r2, #0]
    13e8:	2701      	movs	r7, #1
    13ea:	fba3 2302 	umull	r2, r3, r3, r2
	if (frac > 1000) frac = 1000;
    13ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    13f2:	4698      	mov	r8, r3
	if (frac > 1000) frac = 1000;
    13f4:	2300      	movs	r3, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    13f6:	428b      	cmp	r3, r1
    13f8:	bf08      	it	eq
    13fa:	4542      	cmpeq	r2, r8
    13fc:	bf2c      	ite	cs
    13fe:	46c2      	movcs	sl, r8
    1400:	46f2      	movcc	sl, lr
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    1402:	fb0e aa00 	mla	sl, lr, r0, sl
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    1406:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    140a:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    140c:	6831      	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    140e:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    1412:	2b00      	cmp	r3, #0
    1414:	d1f7      	bne.n	1406 <delay+0x5a>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    1416:	9801      	ldr	r0, [sp, #4]
    1418:	6800      	ldr	r0, [r0, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    141a:	1a41      	subs	r1, r0, r1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    141c:	4815      	ldr	r0, [pc, #84]	; (1474 <delay+0xc8>)
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    141e:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1422:	6800      	ldr	r0, [r0, #0]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    1424:	fb0e f202 	mul.w	r2, lr, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1428:	fba1 0100 	umull	r0, r1, r1, r0
	if (frac > 1000) frac = 1000;
    142c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    1430:	ebca 0202 	rsb	r2, sl, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1434:	4688      	mov	r8, r1
	if (frac > 1000) frac = 1000;
    1436:	2100      	movs	r1, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1438:	4299      	cmp	r1, r3
    143a:	bf08      	it	eq
    143c:	4540      	cmpeq	r0, r8
    143e:	bf2c      	ite	cs
    1440:	4643      	movcs	r3, r8
    1442:	4673      	movcc	r3, lr
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    1444:	441a      	add	r2, r3
    1446:	4572      	cmp	r2, lr
    1448:	d307      	bcc.n	145a <delay+0xae>
			if (--msec == 0) return;
    144a:	f1bb 0b01 	subs.w	fp, fp, #1
			start += 1000;
    144e:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
    1452:	d1d8      	bne.n	1406 <delay+0x5a>
			start += 1000;
		}
		yield();
	}
	// TODO...
}
    1454:	b005      	add	sp, #20
    1456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
			start += 1000;
		}
		yield();
    145a:	f001 f9fd 	bl	2858 <yield>
	}
    145e:	e7d2      	b.n	1406 <delay+0x5a>
    1460:	4770      	bx	lr
    1462:	bf00      	nop
    1464:	2000112c 	.word	0x2000112c
    1468:	20000e8c 	.word	0x20000e8c
    146c:	20000e84 	.word	0x20000e84
    1470:	e0001004 	.word	0xe0001004
    1474:	20000e88 	.word	0x20000e88

00001478 <micros>:
	// TODO...
}

uint32_t micros(void)
{
    1478:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
    147c:	4a12      	ldr	r2, [pc, #72]	; (14c8 <micros+0x50>)
    147e:	2601      	movs	r6, #1
    1480:	4d12      	ldr	r5, [pc, #72]	; (14cc <micros+0x54>)
    1482:	4c13      	ldr	r4, [pc, #76]	; (14d0 <micros+0x58>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    1484:	e852 3f00 	ldrex	r3, [r2]
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    1488:	6829      	ldr	r1, [r5, #0]
		scc = systick_cycle_count;
    148a:	6820      	ldr	r0, [r4, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    148c:	e842 6300 	strex	r3, r6, [r2]
	} while ( __STREXW(1, &systick_safe_read));
    1490:	2b00      	cmp	r3, #0
    1492:	d1f7      	bne.n	1484 <micros+0xc>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    1494:	4a0f      	ldr	r2, [pc, #60]	; (14d4 <micros+0x5c>)
    1496:	6816      	ldr	r6, [r2, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1498:	4f0f      	ldr	r7, [pc, #60]	; (14d8 <micros+0x60>)
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    149a:	1a32      	subs	r2, r6, r0
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
    149c:	f04f 0900 	mov.w	r9, #0
    14a0:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    14a4:	683e      	ldr	r6, [r7, #0]
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
	return usec;
    14a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    14aa:	4599      	cmp	r9, r3
    14ac:	fba2 6706 	umull	r6, r7, r2, r6
    14b0:	bf08      	it	eq
    14b2:	45b8      	cmpeq	r8, r7
    14b4:	463c      	mov	r4, r7
    14b6:	bf2c      	ite	cs
    14b8:	463c      	movcs	r4, r7
    14ba:	4604      	movcc	r4, r0
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
	return usec;
}
    14bc:	fb00 4001 	mla	r0, r0, r1, r4
    14c0:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
    14c4:	4770      	bx	lr
    14c6:	bf00      	nop
    14c8:	2000112c 	.word	0x2000112c
    14cc:	20000e8c 	.word	0x20000e8c
    14d0:	20000e84 	.word	0x20000e84
    14d4:	e0001004 	.word	0xe0001004
    14d8:	20000e88 	.word	0x20000e88

000014dc <unused_interrupt_vector>:
//  R0
// Code from :: https://community.nxp.com/thread/389002
__attribute__((naked))
void unused_interrupt_vector(void)
{
  __asm( ".syntax unified\n"
    14dc:	2004      	movs	r0, #4
    14de:	4671      	mov	r1, lr
    14e0:	4208      	tst	r0, r1
    14e2:	d003      	beq.n	14ec <_MSP>
    14e4:	f3ef 8009 	mrs	r0, PSP
    14e8:	f000 b808 	b.w	14fc <HardFault_HandlerC>

000014ec <_MSP>:
    14ec:	f3ef 8008 	mrs	r0, MSP
    14f0:	f000 b804 	b.w	14fc <HardFault_HandlerC>

000014f4 <startup_default_early_hook>:
         "B HardFault_HandlerC \n"
         "_MSP: \n"
         "MRS R0, MSP \n"
         "B HardFault_HandlerC \n"
         ".syntax divided\n") ;
}
    14f4:	4770      	bx	lr
    14f6:	bf00      	nop

000014f8 <startup_default_late_hook>:
uint8_t external_psram_size = 0;

extern int main (void);
void startup_default_early_hook(void) {}
void startup_early_hook(void)		__attribute__ ((weak, alias("startup_default_early_hook")));
void startup_default_late_hook(void) {}
    14f8:	4770      	bx	lr
    14fa:	bf00      	nop

000014fc <HardFault_HandlerC>:
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    14fc:	4b1b      	ldr	r3, [pc, #108]	; (156c <HardFault_HandlerC+0x70>)
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    14fe:	2105      	movs	r1, #5
    1500:	4a1b      	ldr	r2, [pc, #108]	; (1570 <HardFault_HandlerC+0x74>)
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    1502:	2038      	movs	r0, #56	; 0x38
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    1504:	b530      	push	{r4, r5, lr}
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    1506:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
  GPIO2_DR_SET = (1 << 3);
    150a:	2108      	movs	r1, #8
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    150c:	f8c2 0338 	str.w	r0, [r2, #824]	; 0x338
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    1510:	b083      	sub	sp, #12
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    1512:	685a      	ldr	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    1514:	4c17      	ldr	r4, [pc, #92]	; (1574 <HardFault_HandlerC+0x78>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    1516:	430a      	orrs	r2, r1
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    1518:	4817      	ldr	r0, [pc, #92]	; (1578 <HardFault_HandlerC+0x7c>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    151a:	605a      	str	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
    151c:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    1520:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88

  if ( F_CPU_ACTUAL >= 600000000 )
    1524:	6823      	ldr	r3, [r4, #0]
    1526:	4283      	cmp	r3, r0
    1528:	d902      	bls.n	1530 <HardFault_HandlerC+0x34>
    set_arm_clock(300000000);
    152a:	4814      	ldr	r0, [pc, #80]	; (157c <HardFault_HandlerC+0x80>)
    152c:	f001 faa6 	bl	2a7c <set_arm_clock>

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    1530:	4d0e      	ldr	r5, [pc, #56]	; (156c <HardFault_HandlerC+0x70>)
    1532:	2408      	movs	r4, #8
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    1534:	2000      	movs	r0, #0
    1536:	4a12      	ldr	r2, [pc, #72]	; (1580 <HardFault_HandlerC+0x84>)
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    1538:	4912      	ldr	r1, [pc, #72]	; (1584 <HardFault_HandlerC+0x88>)
  if ( F_CPU_ACTUAL >= 600000000 )
    set_arm_clock(300000000);

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    153a:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    153e:	9001      	str	r0, [sp, #4]
    1540:	9b01      	ldr	r3, [sp, #4]
    1542:	4293      	cmp	r3, r2
    1544:	d805      	bhi.n	1552 <HardFault_HandlerC+0x56>
    1546:	9b01      	ldr	r3, [sp, #4]
    1548:	3301      	adds	r3, #1
    154a:	9301      	str	r3, [sp, #4]
    154c:	9b01      	ldr	r3, [sp, #4]
    154e:	4293      	cmp	r3, r2
    1550:	d9f9      	bls.n	1546 <HardFault_HandlerC+0x4a>
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    1552:	f8c5 4088 	str.w	r4, [r5, #136]	; 0x88
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    1556:	9001      	str	r0, [sp, #4]
    1558:	9b01      	ldr	r3, [sp, #4]
    155a:	428b      	cmp	r3, r1
    155c:	d8ed      	bhi.n	153a <HardFault_HandlerC+0x3e>
    155e:	9b01      	ldr	r3, [sp, #4]
    1560:	3301      	adds	r3, #1
    1562:	9301      	str	r3, [sp, #4]
    1564:	9b01      	ldr	r3, [sp, #4]
    1566:	428b      	cmp	r3, r1
    1568:	d9f9      	bls.n	155e <HardFault_HandlerC+0x62>
    156a:	e7e6      	b.n	153a <HardFault_HandlerC+0x3e>
    156c:	401bc000 	.word	0x401bc000
    1570:	401f8000 	.word	0x401f8000
    1574:	20000420 	.word	0x20000420
    1578:	23c345ff 	.word	0x23c345ff
    157c:	11e1a300 	.word	0x11e1a300
    1580:	000f423f 	.word	0x000f423f
    1584:	0089543f 	.word	0x0089543f

00001588 <_sbrk>:

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
        char *prev = __brkval;
    1588:	4a09      	ldr	r2, [pc, #36]	; (15b0 <_sbrk+0x28>)
extern unsigned long _heap_end;

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
    158a:	b508      	push	{r3, lr}
        char *prev = __brkval;
    158c:	6813      	ldr	r3, [r2, #0]
        if (incr != 0) {
    158e:	b120      	cbz	r0, 159a <_sbrk+0x12>
                if (prev + incr > (char *)&_heap_end) {
    1590:	4418      	add	r0, r3
    1592:	4908      	ldr	r1, [pc, #32]	; (15b4 <_sbrk+0x2c>)
    1594:	4288      	cmp	r0, r1
    1596:	d802      	bhi.n	159e <_sbrk+0x16>
                        errno = ENOMEM;
                        return (void *)-1;
                }
                __brkval = prev + incr;
    1598:	6010      	str	r0, [r2, #0]
        }
        return prev;
}
    159a:	4618      	mov	r0, r3
    159c:	bd08      	pop	{r3, pc}
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    159e:	f001 fd55 	bl	304c <__errno>
    15a2:	220c      	movs	r2, #12
                        return (void *)-1;
    15a4:	f04f 33ff 	mov.w	r3, #4294967295
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    15a8:	6002      	str	r2, [r0, #0]
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    15aa:	4618      	mov	r0, r3
    15ac:	bd08      	pop	{r3, pc}
    15ae:	bf00      	nop
    15b0:	200003d8 	.word	0x200003d8
    15b4:	20280000 	.word	0x20280000

000015b8 <Panic_Temp_isr>:

static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
    15b8:	b672      	cpsid	i
  IOMUXC_GPR_GPR16 = 0x00000007;
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
    15ba:	4a06      	ldr	r2, [pc, #24]	; (15d4 <Panic_Temp_isr+0x1c>)
static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
  IOMUXC_GPR_GPR16 = 0x00000007;
    15bc:	2107      	movs	r1, #7
    15be:	4b06      	ldr	r3, [pc, #24]	; (15d8 <Panic_Temp_isr+0x20>)
    15c0:	6419      	str	r1, [r3, #64]	; 0x40
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
    15c2:	6b93      	ldr	r3, [r2, #56]	; 0x38
    15c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    15c8:	6393      	str	r3, [r2, #56]	; 0x38
  asm volatile ("dsb":::"memory");
    15ca:	f3bf 8f4f 	dsb	sy
  while (1) asm ("wfi");
    15ce:	bf30      	wfi
    15d0:	e7fd      	b.n	15ce <Panic_Temp_isr+0x16>
    15d2:	bf00      	nop
    15d4:	400d4000 	.word	0x400d4000
    15d8:	400ac000 	.word	0x400ac000

000015dc <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    15dc:	6b83      	ldr	r3, [r0, #56]	; 0x38
	}
}
#endif

static void schedule_transfer(endpoint_t *endpoint, uint32_t epmask, transfer_t *transfer)
{
    15de:	b4f0      	push	{r4, r5, r6, r7}
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    15e0:	b11b      	cbz	r3, 15ea <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    15e2:	6853      	ldr	r3, [r2, #4]
    15e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    15e8:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    15ea:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    15ec:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    15ee:	b1dc      	cbz	r4, 1628 <schedule_transfer+0x4c>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    15f0:	4b14      	ldr	r3, [pc, #80]	; (1644 <schedule_transfer+0x68>)
	__disable_irq();
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
    15f2:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    15f4:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    15f8:	420c      	tst	r4, r1
    15fa:	d11f      	bne.n	163c <schedule_transfer+0x60>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    15fc:	4d12      	ldr	r5, [pc, #72]	; (1648 <schedule_transfer+0x6c>)
    15fe:	682f      	ldr	r7, [r5, #0]
    1600:	e004      	b.n	160c <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    1602:	682c      	ldr	r4, [r5, #0]
    1604:	1be4      	subs	r4, r4, r7
    1606:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
    160a:	d20b      	bcs.n	1624 <schedule_transfer+0x48>
		if (USB1_ENDPTPRIME & epmask) goto end;
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    160c:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    1610:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    1614:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    1618:	f8d3 61b8 	ldr.w	r6, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    161c:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    1620:	0464      	lsls	r4, r4, #17
    1622:	d5ee      	bpl.n	1602 <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    1624:	4231      	tst	r1, r6
    1626:	d109      	bne.n	163c <schedule_transfer+0x60>
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
    1628:	2300      	movs	r3, #0
	USB1_ENDPTPRIME |= epmask;
    162a:	4c06      	ldr	r4, [pc, #24]	; (1644 <schedule_transfer+0x68>)
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
    162c:	6082      	str	r2, [r0, #8]
	endpoint->status = 0;
    162e:	60c3      	str	r3, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
    1630:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1634:	4319      	orrs	r1, r3
    1636:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    163a:	6302      	str	r2, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
    163c:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    163e:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    1640:	bcf0      	pop	{r4, r5, r6, r7}
    1642:	4770      	bx	lr
    1644:	402e0000 	.word	0x402e0000
    1648:	e0001004 	.word	0xe0001004

0000164c <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    164c:	b570      	push	{r4, r5, r6, lr}
    164e:	4606      	mov	r6, r0
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    1650:	6b00      	ldr	r0, [r0, #48]	; 0x30
	if (first == NULL) return;
    1652:	b190      	cbz	r0, 167a <run_callbacks+0x2e>
    1654:	4602      	mov	r2, r0
    1656:	2400      	movs	r4, #0
    1658:	e003      	b.n	1662 <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    165a:	6812      	ldr	r2, [r2, #0]
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
    165c:	3401      	adds	r4, #1
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
    165e:	2a01      	cmp	r2, #1
    1660:	d00c      	beq.n	167c <run_callbacks+0x30>

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
	transfer_t *t = first;
	while (1) {
		if (t->status & (1<<7)) {
    1662:	6853      	ldr	r3, [r2, #4]
    1664:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    1668:	d0f7      	beq.n	165a <run_callbacks+0xe>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
    166a:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    166c:	b12c      	cbz	r4, 167a <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
    166e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
			break;
		}
	}
	// do all the callbacks
	while (count) {
		transfer_t *next = (transfer_t *)first->next;
    1670:	6805      	ldr	r5, [r0, #0]
		ep->callback_function(first);
    1672:	4798      	blx	r3
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    1674:	3c01      	subs	r4, #1
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
		first = next;
    1676:	4628      	mov	r0, r5
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    1678:	d1f9      	bne.n	166e <run_callbacks+0x22>
    167a:	bd70      	pop	{r4, r5, r6, pc}
		count++;
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
			// reached end of list, all need callbacks, new list is empty
			//printf(" end of list\n");
			ep->first_transfer = NULL;
    167c:	6333      	str	r3, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
    167e:	6373      	str	r3, [r6, #52]	; 0x34
			break;
    1680:	e7f4      	b.n	166c <run_callbacks+0x20>
    1682:	bf00      	nop

00001684 <endpoint0_transmit.constprop.1>:
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
}

static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    1684:	b5f0      	push	{r4, r5, r6, r7, lr}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
    1686:	b9e1      	cbnz	r1, 16c2 <endpoint0_transmit.constprop.1+0x3e>
    1688:	4c21      	ldr	r4, [pc, #132]	; (1710 <endpoint0_transmit.constprop.1+0x8c>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    168a:	4922      	ldr	r1, [pc, #136]	; (1714 <endpoint0_transmit.constprop.1+0x90>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    168c:	2000      	movs	r0, #0
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    168e:	4b22      	ldr	r3, [pc, #136]	; (1718 <endpoint0_transmit.constprop.1+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1690:	2201      	movs	r2, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1692:	f04f 1501 	mov.w	r5, #65537	; 0x10001
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1696:	2680      	movs	r6, #128	; 0x80
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1698:	600a      	str	r2, [r1, #0]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
    169a:	461a      	mov	r2, r3
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    169c:	60a1      	str	r1, [r4, #8]
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    169e:	604e      	str	r6, [r1, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
    16a0:	60e0      	str	r0, [r4, #12]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    16a2:	f8c3 51bc 	str.w	r5, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    16a6:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    16aa:	4d1c      	ldr	r5, [pc, #112]	; (171c <endpoint0_transmit.constprop.1+0x98>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    16ac:	f044 0401 	orr.w	r4, r4, #1
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    16b0:	6088      	str	r0, [r1, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    16b2:	f8c3 41b0 	str.w	r4, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    16b6:	6028      	str	r0, [r5, #0]
	while (USB1_ENDPTPRIME) ;
    16b8:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    16bc:	2b00      	cmp	r3, #0
    16be:	d1fb      	bne.n	16b8 <endpoint0_transmit.constprop.1+0x34>
}
    16c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    16c2:	0409      	lsls	r1, r1, #16
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    16c4:	4b16      	ldr	r3, [pc, #88]	; (1720 <endpoint0_transmit.constprop.1+0x9c>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    16c6:	4d14      	ldr	r5, [pc, #80]	; (1718 <endpoint0_transmit.constprop.1+0x94>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    16c8:	2601      	movs	r6, #1
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    16ca:	4c11      	ldr	r4, [pc, #68]	; (1710 <endpoint0_transmit.constprop.1+0x8c>)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    16cc:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    16d0:	2200      	movs	r2, #0
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    16d2:	601e      	str	r6, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    16d4:	6059      	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    16d6:	f500 5c80 	add.w	ip, r0, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    16da:	64e2      	str	r2, [r4, #76]	; 0x4c
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    16dc:	f500 5e00 	add.w	lr, r0, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    16e0:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    16e2:	f500 5740 	add.w	r7, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    16e6:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    16ea:	f500 4680 	add.w	r6, r0, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
    16ee:	462a      	mov	r2, r5
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    16f0:	6098      	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    16f2:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    16f6:	f8c3 c00c 	str.w	ip, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    16fa:	f8c3 e010 	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    16fe:	615f      	str	r7, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    1700:	619e      	str	r6, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    1702:	f8c5 11b0 	str.w	r1, [r5, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    1706:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    170a:	2b00      	cmp	r3, #0
    170c:	d1fb      	bne.n	1706 <endpoint0_transmit.constprop.1+0x82>
    170e:	e7bc      	b.n	168a <endpoint0_transmit.constprop.1+0x6>
    1710:	20003000 	.word	0x20003000
    1714:	20002020 	.word	0x20002020
    1718:	402e0000 	.word	0x402e0000
    171c:	20000eb4 	.word	0x20000eb4
    1720:	20002000 	.word	0x20002000

00001724 <isr>:
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}


static void isr(void)
{
    1724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    1728:	4cac      	ldr	r4, [pc, #688]	; (19dc <isr+0x2b8>)
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}


static void isr(void)
{
    172a:	b083      	sub	sp, #12
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    172c:	f8d4 8144 	ldr.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    1730:	f018 0f01 	tst.w	r8, #1
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
	USB1_USBSTS = status;
    1734:	f8c4 8144 	str.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    1738:	d05e      	beq.n	17f8 <isr+0xd4>
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    173a:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    173e:	2b00      	cmp	r3, #0
    1740:	d055      	beq.n	17ee <isr+0xca>
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    1742:	f04f 1b01 	mov.w	fp, #65537	; 0x10001
    1746:	f8df 92bc 	ldr.w	r9, [pc, #700]	; 1a04 <isr+0x2e0>
    174a:	4ea5      	ldr	r6, [pc, #660]	; (19e0 <isr+0x2bc>)
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    174c:	4625      	mov	r5, r4
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    174e:	46da      	mov	sl, fp
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
    1750:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
    1754:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    1756:	6af2      	ldr	r2, [r6, #44]	; 0x2c
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    1758:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    175c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1760:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    1764:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    1768:	049f      	lsls	r7, r3, #18
    176a:	d5f5      	bpl.n	1758 <isr+0x34>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    176c:	f8d5 3140 	ldr.w	r3, [r5, #320]	; 0x140
    1770:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    1774:	f8c5 3140 	str.w	r3, [r5, #320]	; 0x140
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    1778:	f8c5 a1b4 	str.w	sl, [r5, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    177c:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    1780:	f013 1301 	ands.w	r3, r3, #65537	; 0x10001
    1784:	d1fa      	bne.n	177c <isr+0x58>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    1786:	b281      	uxth	r1, r0
    1788:	f240 6781 	movw	r7, #1665	; 0x681
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
    178c:	f8c9 3000 	str.w	r3, [r9]
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    1790:	42b9      	cmp	r1, r7
    1792:	f200 80b4 	bhi.w	18fe <isr+0x1da>
    1796:	f5b1 6fd0 	cmp.w	r1, #1664	; 0x680
    179a:	f080 81e9 	bcs.w	1b70 <isr+0x44c>
    179e:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
    17a2:	f000 816b 	beq.w	1a7c <isr+0x358>
    17a6:	f200 80f0 	bhi.w	198a <isr+0x266>
    17aa:	2980      	cmp	r1, #128	; 0x80
    17ac:	f000 8159 	beq.w	1a62 <isr+0x33e>
    17b0:	2982      	cmp	r1, #130	; 0x82
    17b2:	f040 80e2 	bne.w	197a <isr+0x256>
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
    17b6:	b292      	uxth	r2, r2
    17b8:	f002 017f 	and.w	r1, r2, #127	; 0x7f
		if (endpoint > 7) break;
    17bc:	2907      	cmp	r1, #7
    17be:	f200 80dc 	bhi.w	197a <isr+0x256>
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    17c2:	0089      	lsls	r1, r1, #2
    17c4:	4887      	ldr	r0, [pc, #540]	; (19e4 <isr+0x2c0>)
		reply_buffer[0] = 0;
    17c6:	4f88      	ldr	r7, [pc, #544]	; (19e8 <isr+0x2c4>)
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    17c8:	4408      	add	r0, r1
    17ca:	6801      	ldr	r1, [r0, #0]
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    17cc:	0610      	lsls	r0, r2, #24
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
    17ce:	703b      	strb	r3, [r7, #0]
		reply_buffer[1] = 0;
    17d0:	707b      	strb	r3, [r7, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    17d2:	f140 820c 	bpl.w	1bee <isr+0x4ca>
    17d6:	03ca      	lsls	r2, r1, #15
    17d8:	d501      	bpl.n	17de <isr+0xba>
			reply_buffer[0] = 1;
    17da:	2301      	movs	r3, #1
    17dc:	703b      	strb	r3, [r7, #0]
		}
		endpoint0_transmit(reply_buffer, 2, 0);
    17de:	2102      	movs	r1, #2
    17e0:	4881      	ldr	r0, [pc, #516]	; (19e8 <isr+0x2c4>)
    17e2:	f7ff ff4f 	bl	1684 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    17e6:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    17ea:	2b00      	cmp	r3, #0
    17ec:	d1b0      	bne.n	1750 <isr+0x2c>
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    17ee:	4a7b      	ldr	r2, [pc, #492]	; (19dc <isr+0x2b8>)
    17f0:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    17f4:	2b00      	cmp	r3, #0
    17f6:	d150      	bne.n	189a <isr+0x176>
			}
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
    17f8:	f018 0f40 	tst.w	r8, #64	; 0x40
    17fc:	d018      	beq.n	1830 <isr+0x10c>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    17fe:	4b77      	ldr	r3, [pc, #476]	; (19dc <isr+0x2b8>)
    1800:	f8d3 11ac 	ldr.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    1804:	461a      	mov	r2, r3
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    1806:	f8c3 11ac 	str.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    180a:	f8d3 11bc 	ldr.w	r1, [r3, #444]	; 0x1bc
    180e:	f8c3 11bc 	str.w	r1, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    1812:	f8d2 41b0 	ldr.w	r4, [r2, #432]	; 0x1b0
    1816:	4b71      	ldr	r3, [pc, #452]	; (19dc <isr+0x2b8>)
    1818:	2c00      	cmp	r4, #0
    181a:	d1fa      	bne.n	1812 <isr+0xee>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    181c:	f04f 32ff 	mov.w	r2, #4294967295
    1820:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    1824:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
			// we took too long to respond :(
			// TODO; is this ever really a problem?
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
    1828:	f000 fd1e 	bl	2268 <usb_serial_reset>
		#endif
		endpointN_notify_mask = 0;
    182c:	4b6f      	ldr	r3, [pc, #444]	; (19ec <isr+0x2c8>)
    182e:	601c      	str	r4, [r3, #0]
			// shut off USB - easier to see results in protocol analyzer
			//USB1_USBCMD &= ~USB_USBCMD_RS;
			//printf("shut off USB\n");
		//}
	}
	if (status & USB_USBSTS_TI0) {
    1830:	f018 7f80 	tst.w	r8, #16777216	; 0x1000000
    1834:	d003      	beq.n	183e <isr+0x11a>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    1836:	4b6e      	ldr	r3, [pc, #440]	; (19f0 <isr+0x2cc>)
    1838:	681b      	ldr	r3, [r3, #0]
    183a:	b103      	cbz	r3, 183e <isr+0x11a>
    183c:	4798      	blx	r3
	}
	if (status & USB_USBSTS_TI1) {
    183e:	f018 7f00 	tst.w	r8, #33554432	; 0x2000000
    1842:	d003      	beq.n	184c <isr+0x128>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    1844:	4b6b      	ldr	r3, [pc, #428]	; (19f4 <isr+0x2d0>)
    1846:	681b      	ldr	r3, [r3, #0]
    1848:	b103      	cbz	r3, 184c <isr+0x128>
    184a:	4798      	blx	r3
	}
	if (status & USB_USBSTS_PCI) {
    184c:	f018 0f04 	tst.w	r8, #4
    1850:	d008      	beq.n	1864 <isr+0x140>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    1852:	4b62      	ldr	r3, [pc, #392]	; (19dc <isr+0x2b8>)
    1854:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    1858:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    185c:	d04c      	beq.n	18f8 <isr+0x1d4>
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
    185e:	4b66      	ldr	r3, [pc, #408]	; (19f8 <isr+0x2d4>)
    1860:	2201      	movs	r2, #1
    1862:	701a      	strb	r2, [r3, #0]
		//printf("suspend\n");
	}
	if (status & USB_USBSTS_UEI) {
		//printf("error\n");
	}
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    1864:	4b5d      	ldr	r3, [pc, #372]	; (19dc <isr+0x2b8>)
    1866:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    186a:	0612      	lsls	r2, r2, #24
    186c:	d512      	bpl.n	1894 <isr+0x170>
    186e:	f018 0f80 	tst.w	r8, #128	; 0x80
    1872:	d00f      	beq.n	1894 <isr+0x170>
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
    1874:	4961      	ldr	r1, [pc, #388]	; (19fc <isr+0x2d8>)
    1876:	780a      	ldrb	r2, [r1, #0]
    1878:	b162      	cbz	r2, 1894 <isr+0x170>
			if (--usb_reboot_timer == 0) {
    187a:	3a01      	subs	r2, #1
    187c:	b2d2      	uxtb	r2, r2
    187e:	700a      	strb	r2, [r1, #0]
    1880:	b942      	cbnz	r2, 1894 <isr+0x170>
	__enable_irq();
}

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
    1882:	495f      	ldr	r1, [pc, #380]	; (1a00 <isr+0x2dc>)
    1884:	780a      	ldrb	r2, [r1, #0]
    1886:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    188a:	700a      	strb	r2, [r1, #0]
	if (sof_usage == 0) {
    188c:	2a00      	cmp	r2, #0
    188e:	f000 8232 	beq.w	1cf6 <isr+0x5d2>
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
			if (--usb_reboot_timer == 0) {
				usb_stop_sof_interrupts(NUM_INTERFACE);
				asm("bkpt #251"); // run bootloader
    1892:	befb      	bkpt	0x00fb
		#endif
		#ifdef FLIGHTSIM_INTERFACE
		usb_flightsim_flush_output();
		#endif
	}
}
    1894:	b003      	add	sp, #12
    1896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    189a:	495a      	ldr	r1, [pc, #360]	; (1a04 <isr+0x2e0>)
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
    189c:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    18a0:	6808      	ldr	r0, [r1, #0]
    18a2:	4203      	tst	r3, r0
    18a4:	f040 81e6 	bne.w	1c74 <isr+0x550>
				endpoint0_notify_mask = 0;
				endpoint0_complete();
			}
			completestatus &= endpointN_notify_mask;
    18a8:	4a50      	ldr	r2, [pc, #320]	; (19ec <isr+0x2c8>)
    18aa:	6815      	ldr	r5, [r2, #0]
#if 1
			if (completestatus) {
    18ac:	401d      	ands	r5, r3
    18ae:	d0a3      	beq.n	17f8 <isr+0xd4>

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
    18b0:	0c2f      	lsrs	r7, r5, #16
    18b2:	d00f      	beq.n	18d4 <isr+0x1b0>
    18b4:	4e4a      	ldr	r6, [pc, #296]	; (19e0 <isr+0x2bc>)
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
    18b6:	f04f 0901 	mov.w	r9, #1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
    18ba:	fa97 f4a7 	rbit	r4, r7
    18be:	fab4 f484 	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    18c2:	eb06 10c4 	add.w	r0, r6, r4, lsl #7
					tx &= ~(1<<p);
    18c6:	fa09 f404 	lsl.w	r4, r9, r4

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    18ca:	3040      	adds	r0, #64	; 0x40
    18cc:	f7ff febe 	bl	164c <run_callbacks>
#if 1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
    18d0:	43a7      	bics	r7, r4
    18d2:	d1f2      	bne.n	18ba <isr+0x196>
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
    18d4:	b2ad      	uxth	r5, r5
				while(rx) {
    18d6:	2d00      	cmp	r5, #0
    18d8:	d08e      	beq.n	17f8 <isr+0xd4>
    18da:	4e41      	ldr	r6, [pc, #260]	; (19e0 <isr+0x2bc>)
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
					rx &= ~(1<<p);
    18dc:	2701      	movs	r7, #1
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
    18de:	fa95 f4a5 	rbit	r4, r5
    18e2:	fab4 f484 	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2);
    18e6:	eb06 10c4 	add.w	r0, r6, r4, lsl #7
					rx &= ~(1<<p);
    18ea:	fa07 f404 	lsl.w	r4, r7, r4

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
    18ee:	f7ff fead 	bl	164c <run_callbacks>
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
    18f2:	43a5      	bics	r5, r4
    18f4:	d1f3      	bne.n	18de <isr+0x1ba>
    18f6:	e77f      	b.n	17f8 <isr+0xd4>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
		} else {
			//printf("port at 12 Mbit\n");
			usb_high_speed = 0;
    18f8:	4a3f      	ldr	r2, [pc, #252]	; (19f8 <isr+0x2d4>)
    18fa:	7013      	strb	r3, [r2, #0]
    18fc:	e7b2      	b.n	1864 <isr+0x140>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    18fe:	f242 0721 	movw	r7, #8225	; 0x2021
    1902:	42b9      	cmp	r1, r7
    1904:	d035      	beq.n	1972 <isr+0x24e>
    1906:	f200 8089 	bhi.w	1a1c <isr+0x2f8>
    190a:	f5b1 6f08 	cmp.w	r1, #2176	; 0x880
    190e:	f000 8121 	beq.w	1b54 <isr+0x430>
    1912:	f5b1 6f10 	cmp.w	r1, #2304	; 0x900
    1916:	d130      	bne.n	197a <isr+0x256>
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    1918:	f3c0 4007 	ubfx	r0, r0, #16, #8
    191c:	4a3a      	ldr	r2, [pc, #232]	; (1a08 <isr+0x2e4>)
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    191e:	493b      	ldr	r1, [pc, #236]	; (1a0c <isr+0x2e8>)
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    1920:	7010      	strb	r0, [r2, #0]
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    1922:	4f3b      	ldr	r7, [pc, #236]	; (1a10 <isr+0x2ec>)
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    1924:	4a3b      	ldr	r2, [pc, #236]	; (1a14 <isr+0x2f0>)
    1926:	9301      	str	r3, [sp, #4]
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    1928:	f8c5 71c8 	str.w	r7, [r5, #456]	; 0x1c8
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    192c:	f8c5 11cc 	str.w	r1, [r5, #460]	; 0x1cc
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    1930:	f8c5 21d0 	str.w	r2, [r5, #464]	; 0x1d0
		#endif
		#if defined(ENDPOINT7_CONFIG)
		USB1_ENDPTCTRL7 = ENDPOINT7_CONFIG;
		#endif
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_configure();
    1934:	f000 fc9a 	bl	226c <usb_serial_configure>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1938:	4a37      	ldr	r2, [pc, #220]	; (1a18 <isr+0x2f4>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    193a:	9b01      	ldr	r3, [sp, #4]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    193c:	2180      	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    193e:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1940:	64b2      	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1942:	6051      	str	r1, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1944:	6010      	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    1946:	64f3      	str	r3, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1948:	f8c5 b1bc 	str.w	fp, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    194c:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1950:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    1952:	f441 3280 	orr.w	r2, r1, #65536	; 0x10000
    1956:	f8c5 21b0 	str.w	r2, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    195a:	4a2a      	ldr	r2, [pc, #168]	; (1a04 <isr+0x2e0>)
    195c:	6013      	str	r3, [r2, #0]
	while (USB1_ENDPTPRIME) ;
    195e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1962:	2b00      	cmp	r3, #0
    1964:	d1fb      	bne.n	195e <isr+0x23a>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1966:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    196a:	2b00      	cmp	r3, #0
    196c:	f47f aef0 	bne.w	1750 <isr+0x2c>
    1970:	e73d      	b.n	17ee <isr+0xca>
		// fall through to next case, to always send ZLP ACK
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
    1972:	0c11      	lsrs	r1, r2, #16
    1974:	2907      	cmp	r1, #7
    1976:	f000 813e 	beq.w	1bf6 <isr+0x4d2>
			return;
		}
		break;
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    197a:	f8c4 b1c0 	str.w	fp, [r4, #448]	; 0x1c0
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    197e:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1982:	2b00      	cmp	r3, #0
    1984:	f47f aee4 	bne.w	1750 <isr+0x2c>
    1988:	e731      	b.n	17ee <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    198a:	f240 3702 	movw	r7, #770	; 0x302
    198e:	42b9      	cmp	r1, r7
    1990:	f000 80b0 	beq.w	1af4 <isr+0x3d0>
    1994:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
    1998:	d1ef      	bne.n	197a <isr+0x256>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    199a:	4a1f      	ldr	r2, [pc, #124]	; (1a18 <isr+0x2f4>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    199c:	2180      	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    199e:	2701      	movs	r7, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    19a0:	64f3      	str	r3, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    19a2:	64b2      	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    19a4:	6017      	str	r7, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    19a6:	6051      	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    19a8:	f8c5 b1bc 	str.w	fp, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    19ac:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    19b0:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    19b2:	f441 3380 	orr.w	r3, r1, #65536	; 0x10000
    19b6:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    19ba:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    19be:	2b00      	cmp	r3, #0
    19c0:	d1fb      	bne.n	19ba <isr+0x296>

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    19c2:	0c03      	lsrs	r3, r0, #16
    19c4:	065b      	lsls	r3, r3, #25
    19c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    19ca:	f8c5 3154 	str.w	r3, [r5, #340]	; 0x154
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    19ce:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    19d2:	2b00      	cmp	r3, #0
    19d4:	f47f aebc 	bne.w	1750 <isr+0x2c>
    19d8:	e709      	b.n	17ee <isr+0xca>
    19da:	bf00      	nop
    19dc:	402e0000 	.word	0x402e0000
    19e0:	20003000 	.word	0x20003000
    19e4:	402e01c0 	.word	0x402e01c0
    19e8:	20000ec8 	.word	0x20000ec8
    19ec:	20000ea4 	.word	0x20000ea4
    19f0:	20000ea0 	.word	0x20000ea0
    19f4:	20000eac 	.word	0x20000eac
    19f8:	20000eb0 	.word	0x20000eb0
    19fc:	20000eb8 	.word	0x20000eb8
    1a00:	20000ea8 	.word	0x20000ea8
    1a04:	20000eb4 	.word	0x20000eb4
    1a08:	20000ed8 	.word	0x20000ed8
    1a0c:	000200c8 	.word	0x000200c8
    1a10:	00cc0002 	.word	0x00cc0002
    1a14:	00c80002 	.word	0x00c80002
    1a18:	20002020 	.word	0x20002020
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    1a1c:	f242 2321 	movw	r3, #8737	; 0x2221
    1a20:	4299      	cmp	r1, r3
    1a22:	d05b      	beq.n	1adc <isr+0x3b8>
    1a24:	f242 3321 	movw	r3, #8993	; 0x2321
    1a28:	4299      	cmp	r1, r3
    1a2a:	d1a6      	bne.n	197a <isr+0x256>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1a2c:	4bb5      	ldr	r3, [pc, #724]	; (1d04 <isr+0x5e0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1a2e:	2280      	movs	r2, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    1a30:	2100      	movs	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1a32:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1a34:	64b3      	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1a36:	6018      	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1a38:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    1a3a:	64f1      	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1a3c:	f8c4 b1bc 	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1a40:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1a44:	6099      	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    1a46:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
    1a4a:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    1a4e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1a52:	2b00      	cmp	r3, #0
    1a54:	d1fb      	bne.n	1a4e <isr+0x32a>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1a56:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1a5a:	2b00      	cmp	r3, #0
    1a5c:	f47f ae78 	bne.w	1750 <isr+0x2c>
    1a60:	e6c5      	b.n	17ee <isr+0xca>
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    1a62:	4aa9      	ldr	r2, [pc, #676]	; (1d08 <isr+0x5e4>)
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
    1a64:	2102      	movs	r1, #2
    1a66:	4610      	mov	r0, r2
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    1a68:	7013      	strb	r3, [r2, #0]
		reply_buffer[1] = 0;
    1a6a:	7053      	strb	r3, [r2, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    1a6c:	f7ff fe0a 	bl	1684 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1a70:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1a74:	2b00      	cmp	r3, #0
    1a76:	f47f ae6b 	bne.w	1750 <isr+0x2c>
    1a7a:	e6b8      	b.n	17ee <isr+0xca>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    1a7c:	b292      	uxth	r2, r2
    1a7e:	f002 037f 	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    1a82:	2b07      	cmp	r3, #7
    1a84:	f63f af79 	bhi.w	197a <isr+0x256>
		dir = setup.wIndex & 0x80;
		if (dir) {
    1a88:	f012 0f80 	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    1a8c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1a90:	4a9e      	ldr	r2, [pc, #632]	; (1d0c <isr+0x5e8>)
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1a92:	f04f 0100 	mov.w	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1a96:	f04f 0001 	mov.w	r0, #1
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    1a9a:	441a      	add	r2, r3
    1a9c:	6813      	ldr	r3, [r2, #0]
    1a9e:	bf14      	ite	ne
    1aa0:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    1aa4:	f023 0301 	biceq.w	r3, r3, #1
    1aa8:	6013      	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1aaa:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1aac:	4b95      	ldr	r3, [pc, #596]	; (1d04 <isr+0x5e0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    1aae:	64f1      	str	r1, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1ab0:	64b3      	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1ab2:	6018      	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1ab4:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1ab6:	f8c4 b1bc 	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1aba:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1abe:	6099      	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    1ac0:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
    1ac4:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    1ac8:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1acc:	2b00      	cmp	r3, #0
    1ace:	d1fb      	bne.n	1ac8 <isr+0x3a4>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1ad0:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1ad4:	2b00      	cmp	r3, #0
    1ad6:	f47f ae3b 	bne.w	1750 <isr+0x2c>
    1ada:	e688      	b.n	17ee <isr+0xca>
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    1adc:	b292      	uxth	r2, r2
    1ade:	2a00      	cmp	r2, #0
    1ae0:	d1a4      	bne.n	1a2c <isr+0x308>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    1ae2:	4b8b      	ldr	r3, [pc, #556]	; (1d10 <isr+0x5ec>)
			usb_cdc_line_rtsdtr = setup.wValue;
    1ae4:	f3c0 4007 	ubfx	r0, r0, #16, #8
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    1ae8:	4a8a      	ldr	r2, [pc, #552]	; (1d14 <isr+0x5f0>)
    1aea:	6819      	ldr	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    1aec:	4b8a      	ldr	r3, [pc, #552]	; (1d18 <isr+0x5f4>)
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    1aee:	6011      	str	r1, [r2, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    1af0:	7018      	strb	r0, [r3, #0]
    1af2:	e79b      	b.n	1a2c <isr+0x308>
			reply_buffer[0] = 1;
		}
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    1af4:	b292      	uxth	r2, r2
    1af6:	f002 037f 	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    1afa:	2b07      	cmp	r3, #7
    1afc:	f63f af3d 	bhi.w	197a <isr+0x256>
		dir = setup.wIndex & 0x80;
		if (dir) {
    1b00:	f012 0f80 	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    1b04:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1b08:	4a80      	ldr	r2, [pc, #512]	; (1d0c <isr+0x5e8>)
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1b0a:	f04f 0100 	mov.w	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1b0e:	f04f 0001 	mov.w	r0, #1
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    1b12:	441a      	add	r2, r3
    1b14:	6813      	ldr	r3, [r2, #0]
    1b16:	bf14      	ite	ne
    1b18:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    1b1c:	f043 0301 	orreq.w	r3, r3, #1
    1b20:	6013      	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1b22:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1b24:	4b77      	ldr	r3, [pc, #476]	; (1d04 <isr+0x5e0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    1b26:	64f1      	str	r1, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1b28:	64b3      	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1b2a:	6018      	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1b2c:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1b2e:	f8c4 b1bc 	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1b32:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1b36:	6099      	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    1b38:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
    1b3c:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    1b40:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1b44:	2b00      	cmp	r3, #0
    1b46:	d1fb      	bne.n	1b40 <isr+0x41c>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1b48:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1b4c:	2b00      	cmp	r3, #0
    1b4e:	f47f adff 	bne.w	1750 <isr+0x2c>
    1b52:	e64c      	b.n	17ee <isr+0xca>
		usb_audio_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    1b54:	4a71      	ldr	r2, [pc, #452]	; (1d1c <isr+0x5f8>)
		endpoint0_transmit(reply_buffer, 1, 0);
    1b56:	2101      	movs	r1, #1
		usb_audio_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    1b58:	4b6b      	ldr	r3, [pc, #428]	; (1d08 <isr+0x5e4>)
    1b5a:	7812      	ldrb	r2, [r2, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    1b5c:	4618      	mov	r0, r3
		usb_audio_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    1b5e:	701a      	strb	r2, [r3, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    1b60:	f7ff fd90 	bl	1684 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1b64:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1b68:	2b00      	cmp	r3, #0
    1b6a:	f47f adf1 	bne.w	1750 <isr+0x2c>
    1b6e:	e63e      	b.n	17ee <isr+0xca>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    1b70:	4b6b      	ldr	r3, [pc, #428]	; (1d20 <isr+0x5fc>)
    1b72:	6859      	ldr	r1, [r3, #4]
    1b74:	2900      	cmp	r1, #0
    1b76:	f43f af00 	beq.w	197a <isr+0x256>
    1b7a:	0c00      	lsrs	r0, r0, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    1b7c:	fa1f fe82 	uxth.w	lr, r2
    1b80:	e004      	b.n	1b8c <isr+0x468>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    1b82:	330c      	adds	r3, #12
    1b84:	6859      	ldr	r1, [r3, #4]
    1b86:	2900      	cmp	r1, #0
    1b88:	f43f aef7 	beq.w	197a <isr+0x256>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    1b8c:	881f      	ldrh	r7, [r3, #0]
    1b8e:	4287      	cmp	r7, r0
    1b90:	d1f7      	bne.n	1b82 <isr+0x45e>
    1b92:	885f      	ldrh	r7, [r3, #2]
    1b94:	4577      	cmp	r7, lr
    1b96:	d1f4      	bne.n	1b82 <isr+0x45e>
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
    1b98:	0a07      	lsrs	r7, r0, #8
    1b9a:	2f03      	cmp	r7, #3
    1b9c:	f000 80e9 	beq.w	1d72 <isr+0x64e>
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
    1ba0:	891b      	ldrh	r3, [r3, #8]
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    1ba2:	0c12      	lsrs	r2, r2, #16
    1ba4:	4293      	cmp	r3, r2
    1ba6:	bf28      	it	cs
    1ba8:	4613      	movcs	r3, r2

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
    1baa:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    1bae:	f000 80d1 	beq.w	1d54 <isr+0x630>
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
    1bb2:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
    1bb6:	f000 808b 	beq.w	1cd0 <isr+0x5ac>
    1bba:	4f5a      	ldr	r7, [pc, #360]	; (1d24 <isr+0x600>)
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
					usb_descriptor_buffer[1] = 7;
				} else {
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    1bbc:	461a      	mov	r2, r3
    1bbe:	9301      	str	r3, [sp, #4]
    1bc0:	4638      	mov	r0, r7
    1bc2:	f000 fec1 	bl	2948 <memcpy>
    1bc6:	9b01      	ldr	r3, [sp, #4]
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    1bc8:	f027 021f 	bic.w	r2, r7, #31
	uint32_t end_addr = (uint32_t)addr + size;
    1bcc:	441f      	add	r7, r3
	asm volatile("": : :"memory");
	asm("dsb");
    1bce:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    1bd2:	4955      	ldr	r1, [pc, #340]	; (1d28 <isr+0x604>)
    1bd4:	600a      	str	r2, [r1, #0]
		location += 32;
    1bd6:	3220      	adds	r2, #32
	} while (location < end_addr);
    1bd8:	4297      	cmp	r7, r2
    1bda:	d8fa      	bhi.n	1bd2 <isr+0x4ae>
	asm("dsb");
    1bdc:	f3bf 8f4f 	dsb	sy
	asm("isb");
    1be0:	f3bf 8f6f 	isb	sy
				}
				// prep transmit
				arm_dcache_flush_delete(usb_descriptor_buffer, datalen);
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    1be4:	484f      	ldr	r0, [pc, #316]	; (1d24 <isr+0x600>)
    1be6:	4619      	mov	r1, r3
    1be8:	f7ff fd4c 	bl	1684 <endpoint0_transmit.constprop.1>
    1bec:	e5fb      	b.n	17e6 <isr+0xc2>
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    1bee:	07cb      	lsls	r3, r1, #31
    1bf0:	f57f adf5 	bpl.w	17de <isr+0xba>
    1bf4:	e5f1      	b.n	17da <isr+0xb6>
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    1bf6:	4f4d      	ldr	r7, [pc, #308]	; (1d2c <isr+0x608>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    1bf8:	f04f 0e01 	mov.w	lr, #1
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
    1bfc:	60f3      	str	r3, [r6, #12]
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    1bfe:	494c      	ldr	r1, [pc, #304]	; (1d30 <isr+0x60c>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    1c00:	4b4c      	ldr	r3, [pc, #304]	; (1d34 <isr+0x610>)
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    1c02:	6038      	str	r0, [r7, #0]
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    1c04:	f8c3 e000 	str.w	lr, [r3]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    1c08:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    1c0a:	60b3      	str	r3, [r6, #8]
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
    1c0c:	494a      	ldr	r1, [pc, #296]	; (1d38 <isr+0x614>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    1c0e:	f8d5 01b0 	ldr.w	r0, [r5, #432]	; 0x1b0
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    1c12:	607a      	str	r2, [r7, #4]
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    1c14:	f501 5780 	add.w	r7, r1, #4096	; 0x1000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    1c18:	ea40 020e 	orr.w	r2, r0, lr
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    1c1c:	6099      	str	r1, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    1c1e:	f501 5e00 	add.w	lr, r1, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    1c22:	f501 5040 	add.w	r0, r1, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    1c26:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    1c2a:	f8c5 21b0 	str.w	r2, [r5, #432]	; 0x1b0
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    1c2e:	60df      	str	r7, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    1c30:	f8c3 e010 	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    1c34:	6158      	str	r0, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    1c36:	6199      	str	r1, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
    1c38:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1c3c:	2b00      	cmp	r3, #0
    1c3e:	d1fb      	bne.n	1c38 <isr+0x514>
	}
	endpoint0_transfer_ack.next = 1;
    1c40:	4a30      	ldr	r2, [pc, #192]	; (1d04 <isr+0x5e0>)
    1c42:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1c44:	f248 0180 	movw	r1, #32896	; 0x8080
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    1c48:	64f3      	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1c4a:	6010      	str	r0, [r2, #0]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    1c4c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1c50:	64b2      	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1c52:	6051      	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1c54:	f8c5 b1bc 	str.w	fp, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1c58:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1c5c:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    1c5e:	ea41 0300 	orr.w	r3, r1, r0
    1c62:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    1c66:	f8c9 0000 	str.w	r0, [r9]
	while (USB1_ENDPTPRIME) ;
    1c6a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1c6e:	2b00      	cmp	r3, #0
    1c70:	d1fb      	bne.n	1c6a <isr+0x546>
    1c72:	e5b8      	b.n	17e6 <isr+0xc2>

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    1c74:	482d      	ldr	r0, [pc, #180]	; (1d2c <isr+0x608>)
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    1c76:	f242 0421 	movw	r4, #8225	; 0x2021
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    1c7a:	2600      	movs	r6, #0

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    1c7c:	8805      	ldrh	r5, [r0, #0]
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    1c7e:	600e      	str	r6, [r1, #0]

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    1c80:	42a5      	cmp	r5, r4

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    1c82:	6840      	ldr	r0, [r0, #4]
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    1c84:	f47f ae10 	bne.w	18a8 <isr+0x184>
    1c88:	b281      	uxth	r1, r0
    1c8a:	2900      	cmp	r1, #0
    1c8c:	f47f ae0c 	bne.w	18a8 <isr+0x184>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    1c90:	4929      	ldr	r1, [pc, #164]	; (1d38 <isr+0x614>)
    1c92:	4c2a      	ldr	r4, [pc, #168]	; (1d3c <isr+0x618>)
    1c94:	c903      	ldmia	r1, {r0, r1}
    1c96:	0c0d      	lsrs	r5, r1, #16
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    1c98:	2886      	cmp	r0, #134	; 0x86
	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    1c9a:	6020      	str	r0, [r4, #0]
    1c9c:	80a1      	strh	r1, [r4, #4]
    1c9e:	71a5      	strb	r5, [r4, #6]
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    1ca0:	f47f ae02 	bne.w	18a8 <isr+0x184>
}


void usb_start_sof_interrupts(int interface)
{
	__disable_irq();
    1ca4:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    1ca6:	4826      	ldr	r0, [pc, #152]	; (1d40 <isr+0x61c>)
    1ca8:	7801      	ldrb	r1, [r0, #0]
    1caa:	f041 0104 	orr.w	r1, r1, #4
    1cae:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    1cb0:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    1cb4:	0608      	lsls	r0, r1, #24
    1cb6:	d406      	bmi.n	1cc6 <isr+0x5a2>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    1cb8:	f041 0180 	orr.w	r1, r1, #128	; 0x80
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    1cbc:	2080      	movs	r0, #128	; 0x80
    1cbe:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    1cc2:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	}
	__enable_irq();
    1cc6:	b662      	cpsie	i
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
			usb_start_sof_interrupts(NUM_INTERFACE);
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    1cc8:	4a1e      	ldr	r2, [pc, #120]	; (1d44 <isr+0x620>)
    1cca:	2150      	movs	r1, #80	; 0x50
    1ccc:	7011      	strb	r1, [r2, #0]
    1cce:	e5eb      	b.n	18a8 <isr+0x184>
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    1cd0:	481d      	ldr	r0, [pc, #116]	; (1d48 <isr+0x624>)
					memcpy(usb_descriptor_buffer, src, datalen);
    1cd2:	461a      	mov	r2, r3
    1cd4:	4f13      	ldr	r7, [pc, #76]	; (1d24 <isr+0x600>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    1cd6:	f890 e000 	ldrb.w	lr, [r0]
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
    1cda:	491c      	ldr	r1, [pc, #112]	; (1d4c <isr+0x628>)
    1cdc:	481c      	ldr	r0, [pc, #112]	; (1d50 <isr+0x62c>)
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
    1cde:	9301      	str	r3, [sp, #4]
    1ce0:	f1be 0f00 	cmp.w	lr, #0
    1ce4:	bf08      	it	eq
    1ce6:	4601      	moveq	r1, r0
    1ce8:	4638      	mov	r0, r7
    1cea:	f000 fe2d 	bl	2948 <memcpy>
					usb_descriptor_buffer[1] = 7;
    1cee:	2207      	movs	r2, #7
    1cf0:	9b01      	ldr	r3, [sp, #4]
    1cf2:	707a      	strb	r2, [r7, #1]
    1cf4:	e768      	b.n	1bc8 <isr+0x4a4>

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
	if (sof_usage == 0) {
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    1cf6:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    1cfa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    1cfe:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    1d02:	e5c6      	b.n	1892 <isr+0x16e>
    1d04:	20002020 	.word	0x20002020
    1d08:	20000ec8 	.word	0x20000ec8
    1d0c:	402e01c0 	.word	0x402e01c0
    1d10:	20000e8c 	.word	0x20000e8c
    1d14:	20003288 	.word	0x20003288
    1d18:	20001028 	.word	0x20001028
    1d1c:	20000ed8 	.word	0x20000ed8
    1d20:	20000340 	.word	0x20000340
    1d24:	20200000 	.word	0x20200000
    1d28:	e000ef70 	.word	0xe000ef70
    1d2c:	20000ec0 	.word	0x20000ec0
    1d30:	00070080 	.word	0x00070080
    1d34:	20002000 	.word	0x20002000
    1d38:	20000ed0 	.word	0x20000ed0
    1d3c:	20003280 	.word	0x20003280
    1d40:	20000ea8 	.word	0x20000ea8
    1d44:	20000eb8 	.word	0x20000eb8
    1d48:	20000eb0 	.word	0x20000eb0
    1d4c:	60001694 	.word	0x60001694
    1d50:	600016d8 	.word	0x600016d8

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
    1d54:	480a      	ldr	r0, [pc, #40]	; (1d80 <isr+0x65c>)
					memcpy(usb_descriptor_buffer, src, datalen);
    1d56:	461a      	mov	r2, r3
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    1d58:	490a      	ldr	r1, [pc, #40]	; (1d84 <isr+0x660>)
					if (usb_high_speed) src = usb_config_descriptor_480;
    1d5a:	7807      	ldrb	r7, [r0, #0]
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    1d5c:	480a      	ldr	r0, [pc, #40]	; (1d88 <isr+0x664>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
    1d5e:	9301      	str	r3, [sp, #4]
    1d60:	2f00      	cmp	r7, #0
    1d62:	bf08      	it	eq
    1d64:	4601      	moveq	r1, r0
    1d66:	4809      	ldr	r0, [pc, #36]	; (1d8c <isr+0x668>)
    1d68:	f000 fdee 	bl	2948 <memcpy>
    1d6c:	4f07      	ldr	r7, [pc, #28]	; (1d8c <isr+0x668>)
    1d6e:	9b01      	ldr	r3, [sp, #4]
    1d70:	e72a      	b.n	1bc8 <isr+0x4a4>
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    1d72:	0c12      	lsrs	r2, r2, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
    1d74:	780b      	ldrb	r3, [r1, #0]
    1d76:	4293      	cmp	r3, r2
    1d78:	bf28      	it	cs
    1d7a:	4613      	movcs	r3, r2
    1d7c:	e719      	b.n	1bb2 <isr+0x48e>
    1d7e:	bf00      	nop
    1d80:	20000eb0 	.word	0x20000eb0
    1d84:	600016d8 	.word	0x600016d8
    1d88:	60001694 	.word	0x60001694
    1d8c:	20200000 	.word	0x20200000

00001d90 <usb_config_rx>:
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1d90:	2a00      	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    1d92:	f1a0 0202 	sub.w	r2, r0, #2
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    1d96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1d9a:	bf14      	ite	ne
    1d9c:	2700      	movne	r7, #0
    1d9e:	f04f 5700 	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    1da2:	2a02      	cmp	r2, #2
    1da4:	d901      	bls.n	1daa <usb_config_rx+0x1a>
    1da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    1daa:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
    1dae:	f8df 9040 	ldr.w	r9, [pc, #64]	; 1df0 <usb_config_rx+0x60>
    1db2:	460d      	mov	r5, r1
    1db4:	4604      	mov	r4, r0
    1db6:	eb0a 0609 	add.w	r6, sl, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    1dba:	2100      	movs	r1, #0
    1dbc:	2240      	movs	r2, #64	; 0x40
    1dbe:	4698      	mov	r8, r3
    1dc0:	4630      	mov	r0, r6
    1dc2:	f001 fc31 	bl	3628 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    1dc6:	2001      	movs	r0, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    1dc8:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
    1dcc:	f84a 1009 	str.w	r1, [sl, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    1dd0:	f8c6 8038 	str.w	r8, [r6, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    1dd4:	60b0      	str	r0, [r6, #8]
void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
    1dd6:	f1b8 0f00 	cmp.w	r8, #0
    1dda:	d0e4      	beq.n	1da6 <usb_config_rx+0x16>
    1ddc:	4b03      	ldr	r3, [pc, #12]	; (1dec <usb_config_rx+0x5c>)
    1dde:	40a0      	lsls	r0, r4
    1de0:	681c      	ldr	r4, [r3, #0]
    1de2:	4320      	orrs	r0, r4
    1de4:	6018      	str	r0, [r3, #0]
    1de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1dea:	bf00      	nop
    1dec:	20000ea4 	.word	0x20000ea4
    1df0:	20003000 	.word	0x20003000

00001df4 <usb_config_tx>:
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1df4:	2a00      	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    1df6:	f1a0 0202 	sub.w	r2, r0, #2
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    1dfa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1dfe:	bf14      	ite	ne
    1e00:	2700      	movne	r7, #0
    1e02:	f04f 5700 	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    1e06:	2a02      	cmp	r2, #2
    1e08:	d901      	bls.n	1e0e <usb_config_tx+0x1a>
    1e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    1e0e:	2240      	movs	r2, #64	; 0x40

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    1e10:	01c5      	lsls	r5, r0, #7
    1e12:	f8df 9044 	ldr.w	r9, [pc, #68]	; 1e58 <usb_config_tx+0x64>
    1e16:	4688      	mov	r8, r1
    1e18:	4415      	add	r5, r2
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    1e1a:	2100      	movs	r1, #0
    1e1c:	4604      	mov	r4, r0
    1e1e:	461e      	mov	r6, r3

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    1e20:	eb05 0a09 	add.w	sl, r5, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    1e24:	4650      	mov	r0, sl
    1e26:	f001 fbff 	bl	3628 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    1e2a:	2201      	movs	r2, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    1e2c:	ea47 4108 	orr.w	r1, r7, r8, lsl #16
    1e30:	f845 1009 	str.w	r1, [r5, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    1e34:	f8ca 6038 	str.w	r6, [sl, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    1e38:	f8ca 2008 	str.w	r2, [sl, #8]
void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    1e3c:	2e00      	cmp	r6, #0
    1e3e:	d0e4      	beq.n	1e0a <usb_config_tx+0x16>
    1e40:	f104 0010 	add.w	r0, r4, #16
    1e44:	4b03      	ldr	r3, [pc, #12]	; (1e54 <usb_config_tx+0x60>)
    1e46:	4082      	lsls	r2, r0
    1e48:	6818      	ldr	r0, [r3, #0]
    1e4a:	4302      	orrs	r2, r0
    1e4c:	601a      	str	r2, [r3, #0]
    1e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1e52:	bf00      	nop
    1e54:	20000ea4 	.word	0x20000ea4
    1e58:	20003000 	.word	0x20003000

00001e5c <usb_prepare_transfer>:


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    1e5c:	0412      	lsls	r2, r2, #16
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
    1e5e:	6081      	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
	transfer->pointer3 = addr + 12288;
	transfer->pointer4 = addr + 16384;
	transfer->callback_param = param;
    1e60:	61c3      	str	r3, [r0, #28]


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    1e62:	f042 0280 	orr.w	r2, r2, #128	; 0x80
}



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
    1e66:	b4f0      	push	{r4, r5, r6, r7}
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    1e68:	6042      	str	r2, [r0, #4]



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    1e6a:	2701      	movs	r7, #1
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    1e6c:	f501 5680 	add.w	r6, r1, #4096	; 0x1000
	transfer->pointer2 = addr + 8192;
    1e70:	f501 5500 	add.w	r5, r1, #8192	; 0x2000
	transfer->pointer3 = addr + 12288;
    1e74:	f501 5440 	add.w	r4, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    1e78:	f501 4280 	add.w	r2, r1, #16384	; 0x4000



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    1e7c:	6007      	str	r7, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    1e7e:	60c6      	str	r6, [r0, #12]
	transfer->pointer2 = addr + 8192;
    1e80:	6105      	str	r5, [r0, #16]
	transfer->pointer3 = addr + 12288;
    1e82:	6144      	str	r4, [r0, #20]
	transfer->pointer4 = addr + 16384;
    1e84:	6182      	str	r2, [r0, #24]
	transfer->callback_param = param;
}
    1e86:	bcf0      	pop	{r4, r5, r6, r7}
    1e88:	4770      	bx	lr
    1e8a:	bf00      	nop

00001e8c <usb_transmit>:
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    1e8c:	1e83      	subs	r3, r0, #2
    1e8e:	2b02      	cmp	r3, #2
    1e90:	d900      	bls.n	1e94 <usb_transmit+0x8>
    1e92:	4770      	bx	lr
		count--;
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    1e94:	b430      	push	{r4, r5}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    1e96:	4b06      	ldr	r3, [pc, #24]	; (1eb0 <usb_transmit+0x24>)
    1e98:	f100 0410 	add.w	r4, r0, #16
    1e9c:	2501      	movs	r5, #1
    1e9e:	460a      	mov	r2, r1
    1ea0:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    1ea4:	fa05 f104 	lsl.w	r1, r5, r4
}
    1ea8:	bc30      	pop	{r4, r5}
void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    1eaa:	f7ff bb97 	b.w	15dc <schedule_transfer>
    1eae:	bf00      	nop
    1eb0:	20003040 	.word	0x20003040

00001eb4 <usb_receive>:
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    1eb4:	1e83      	subs	r3, r0, #2
    1eb6:	2b02      	cmp	r3, #2
    1eb8:	d900      	bls.n	1ebc <usb_receive+0x8>
    1eba:	4770      	bx	lr
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
    1ebc:	b410      	push	{r4}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    1ebe:	4b05      	ldr	r3, [pc, #20]	; (1ed4 <usb_receive+0x20>)
    1ec0:	2401      	movs	r4, #1
    1ec2:	460a      	mov	r2, r1
    1ec4:	fa04 f100 	lsl.w	r1, r4, r0
    1ec8:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
}
    1ecc:	f85d 4b04 	ldr.w	r4, [sp], #4
void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    1ed0:	f7ff bb84 	b.w	15dc <schedule_transfer>
    1ed4:	20003000 	.word	0x20003000

00001ed8 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    1ed8:	6840      	ldr	r0, [r0, #4]
#endif
}
    1eda:	4770      	bx	lr

00001edc <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    1edc:	4a12      	ldr	r2, [pc, #72]	; (1f28 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    1ede:	4b13      	ldr	r3, [pc, #76]	; (1f2c <usb_init_serialnumber+0x50>)
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    1ee0:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    1ee4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    1ee8:	4298      	cmp	r0, r3
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    1eea:	b510      	push	{r4, lr}
    1eec:	b084      	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    1eee:	d802      	bhi.n	1ef6 <usb_init_serialnumber+0x1a>
    1ef0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    1ef4:	0040      	lsls	r0, r0, #1
    1ef6:	4c0e      	ldr	r4, [pc, #56]	; (1f30 <usb_init_serialnumber+0x54>)
	ultoa(num, buf, 10);
    1ef8:	a901      	add	r1, sp, #4
    1efa:	220a      	movs	r2, #10
    1efc:	f000 ff20 	bl	2d40 <ultoa>
    1f00:	a901      	add	r1, sp, #4
	for (i=0; i<10; i++) {
    1f02:	2300      	movs	r3, #0
    1f04:	4620      	mov	r0, r4
		char c = buf[i];
    1f06:	f811 2b01 	ldrb.w	r2, [r1], #1
    1f0a:	3301      	adds	r3, #1
		if (!c) break;
    1f0c:	b13a      	cbz	r2, 1f1e <usb_init_serialnumber+0x42>

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    1f0e:	2b0a      	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    1f10:	f820 2f02 	strh.w	r2, [r0, #2]!

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    1f14:	d1f7      	bne.n	1f06 <usb_init_serialnumber+0x2a>
    1f16:	2316      	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    1f18:	7023      	strb	r3, [r4, #0]
}
    1f1a:	b004      	add	sp, #16
    1f1c:	bd10      	pop	{r4, pc}
    1f1e:	005b      	lsls	r3, r3, #1
    1f20:	b2db      	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    1f22:	7023      	strb	r3, [r4, #0]
}
    1f24:	b004      	add	sp, #16
    1f26:	bd10      	pop	{r4, pc}
    1f28:	401f4400 	.word	0x401f4400
    1f2c:	0098967f 	.word	0x0098967f
    1f30:	200003f0 	.word	0x200003f0

00001f34 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    1f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    1f36:	4914      	ldr	r1, [pc, #80]	; (1f88 <rx_queue_transfer+0x54>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    1f38:	f44f 3700 	mov.w	r7, #131072	; 0x20000
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    1f3c:	4d13      	ldr	r5, [pc, #76]	; (1f8c <rx_queue_transfer+0x58>)
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    1f3e:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    1f40:	eb01 2440 	add.w	r4, r1, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    1f44:	4e12      	ldr	r6, [pc, #72]	; (1f90 <rx_queue_transfer+0x5c>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    1f46:	4a13      	ldr	r2, [pc, #76]	; (1f94 <rx_queue_transfer+0x60>)
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    1f48:	eb05 1540 	add.w	r5, r5, r0, lsl #5
    1f4c:	4621      	mov	r1, r4
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    1f4e:	6017      	str	r7, [r2, #0]
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    1f50:	4628      	mov	r0, r5
    1f52:	8832      	ldrh	r2, [r6, #0]
    1f54:	f7ff ff82 	bl	1e5c <usb_prepare_transfer>
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    1f58:	8831      	ldrh	r1, [r6, #0]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    1f5a:	f024 031f 	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    1f5e:	4421      	add	r1, r4
	asm volatile("": : :"memory");
	asm("dsb");
    1f60:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    1f64:	4a0c      	ldr	r2, [pc, #48]	; (1f98 <rx_queue_transfer+0x64>)
    1f66:	6013      	str	r3, [r2, #0]
		location += 32;
    1f68:	3320      	adds	r3, #32
	} while (location < end_addr);
    1f6a:	4299      	cmp	r1, r3
    1f6c:	d8fb      	bhi.n	1f66 <rx_queue_transfer+0x32>
	asm("dsb");
    1f6e:	f3bf 8f4f 	dsb	sy
	asm("isb");
    1f72:	f3bf 8f6f 	isb	sy
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    1f76:	2003      	movs	r0, #3
    1f78:	4629      	mov	r1, r5
    1f7a:	f7ff ff9b 	bl	1eb4 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    1f7e:	4b07      	ldr	r3, [pc, #28]	; (1f9c <rx_queue_transfer+0x68>)
    1f80:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1f84:	601a      	str	r2, [r3, #0]
    1f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1f88:	20200060 	.word	0x20200060
    1f8c:	20000f00 	.word	0x20000f00
    1f90:	2000100e 	.word	0x2000100e
    1f94:	e000e18c 	.word	0xe000e18c
    1f98:	e000ef5c 	.word	0xe000ef5c
    1f9c:	e000e10c 	.word	0xe000e10c

00001fa0 <rx_event>:
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    1fa0:	4a24      	ldr	r2, [pc, #144]	; (2034 <rx_event+0x94>)
    1fa2:	6843      	ldr	r3, [r0, #4]
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
    1fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    1fa8:	f3c3 430e 	ubfx	r3, r3, #16, #15
    1fac:	8814      	ldrh	r4, [r2, #0]
	int i = t->callback_param;
    1fae:	69c5      	ldr	r5, [r0, #28]
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    1fb0:	1ae4      	subs	r4, r4, r3
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    1fb2:	2c00      	cmp	r4, #0
    1fb4:	dd38      	ble.n	2028 <rx_event+0x88>
		// received a packet with data
		uint32_t head = rx_head;
    1fb6:	4920      	ldr	r1, [pc, #128]	; (2038 <rx_event+0x98>)
		if (head != rx_tail) {
    1fb8:	4a20      	ldr	r2, [pc, #128]	; (203c <rx_event+0x9c>)
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    1fba:	780b      	ldrb	r3, [r1, #0]
		if (head != rx_tail) {
    1fbc:	7812      	ldrb	r2, [r2, #0]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    1fbe:	b2db      	uxtb	r3, r3
		if (head != rx_tail) {
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    1fc0:	481f      	ldr	r0, [pc, #124]	; (2040 <rx_event+0xa0>)
			uint32_t count = rx_count[ii];
    1fc2:	4e20      	ldr	r6, [pc, #128]	; (2044 <rx_event+0xa4>)
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
		if (head != rx_tail) {
    1fc4:	4293      	cmp	r3, r2
    1fc6:	d007      	beq.n	1fd8 <rx_event+0x38>
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    1fc8:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    1fcc:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    1fd0:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    1fd4:	4294      	cmp	r4, r2
    1fd6:	d912      	bls.n	1ffe <rx_event+0x5e>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    1fd8:	3301      	adds	r3, #1
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
    1fda:	2200      	movs	r2, #0
    1fdc:	4f1a      	ldr	r7, [pc, #104]	; (2048 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    1fde:	2b08      	cmp	r3, #8
				// TODO: trigger serialEvent
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
    1fe0:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		rx_index[i] = 0;
    1fe4:	f827 2015 	strh.w	r2, [r7, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
		rx_head = head;
		rx_available += len;
    1fe8:	4e18      	ldr	r6, [pc, #96]	; (204c <rx_event+0xac>)
    1fea:	bf94      	ite	ls
    1fec:	b2da      	uxtbls	r2, r3
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    1fee:	4613      	movhi	r3, r2
		rx_list[head] = i;
		rx_head = head;
    1ff0:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    1ff2:	6832      	ldr	r2, [r6, #0]
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
    1ff4:	54c5      	strb	r5, [r0, r3]
		rx_head = head;
		rx_available += len;
    1ff6:	4414      	add	r4, r2
    1ff8:	6034      	str	r4, [r6, #0]
    1ffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    1ffe:	4b14      	ldr	r3, [pc, #80]	; (2050 <rx_event+0xb0>)
    2000:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    2004:	4622      	mov	r2, r4
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    2006:	4427      	add	r7, r4
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    2008:	eb03 2145 	add.w	r1, r3, r5, lsl #9
    200c:	4418      	add	r0, r3
    200e:	f000 fc9b 	bl	2948 <memcpy>
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
    2012:	4a0e      	ldr	r2, [pc, #56]	; (204c <rx_event+0xac>)
				rx_queue_transfer(i);
    2014:	4628      	mov	r0, r5
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    2016:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    201a:	6813      	ldr	r3, [r2, #0]
    201c:	441c      	add	r4, r3
    201e:	6014      	str	r4, [r2, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    2020:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
				rx_queue_transfer(i);
    2024:	f7ff bf86 	b.w	1f34 <rx_queue_transfer>
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    2028:	4628      	mov	r0, r5
	}
}
    202a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    202e:	f7ff bf81 	b.w	1f34 <rx_queue_transfer>
    2032:	bf00      	nop
    2034:	2000100e 	.word	0x2000100e
    2038:	20001024 	.word	0x20001024
    203c:	20001000 	.word	0x20001000
    2040:	20001004 	.word	0x20001004
    2044:	20001010 	.word	0x20001010
    2048:	20000edc 	.word	0x20000edc
    204c:	20001020 	.word	0x20001020
    2050:	20200060 	.word	0x20200060

00002054 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    2054:	4b1e      	ldr	r3, [pc, #120]	; (20d0 <usb_serial_flush_callback+0x7c>)
    2056:	781a      	ldrb	r2, [r3, #0]
    2058:	b95a      	cbnz	r2, 2072 <usb_serial_flush_callback+0x1e>
    205a:	f002 03ff 	and.w	r3, r2, #255	; 0xff
	if (!usb_configuration) return;
    205e:	4a1d      	ldr	r2, [pc, #116]	; (20d4 <usb_serial_flush_callback+0x80>)
    2060:	7812      	ldrb	r2, [r2, #0]
    2062:	b132      	cbz	r2, 2072 <usb_serial_flush_callback+0x1e>
	tx_available = 0;
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
    2064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
    2068:	4d1b      	ldr	r5, [pc, #108]	; (20d8 <usb_serial_flush_callback+0x84>)
    206a:	882a      	ldrh	r2, [r5, #0]
    206c:	b912      	cbnz	r2, 2074 <usb_serial_flush_callback+0x20>
    206e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2072:	4770      	bx	lr
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    2074:	4e19      	ldr	r6, [pc, #100]	; (20dc <usb_serial_flush_callback+0x88>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    2076:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    207a:	4f19      	ldr	r7, [pc, #100]	; (20e0 <usb_serial_flush_callback+0x8c>)
    207c:	7831      	ldrb	r1, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    207e:	4642      	mov	r2, r8
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    2080:	4c18      	ldr	r4, [pc, #96]	; (20e4 <usb_serial_flush_callback+0x90>)
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    2082:	eb07 1741 	add.w	r7, r7, r1, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    2086:	eb04 24c1 	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    208a:	4638      	mov	r0, r7
    208c:	4621      	mov	r1, r4
    208e:	f7ff fee5 	bl	1e5c <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    2092:	eb08 0204 	add.w	r2, r8, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    2096:	f024 011f 	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    209a:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    209e:	4b12      	ldr	r3, [pc, #72]	; (20e8 <usb_serial_flush_callback+0x94>)
    20a0:	6019      	str	r1, [r3, #0]
		location += 32;
    20a2:	3120      	adds	r1, #32
	} while (location < end_addr);
    20a4:	428a      	cmp	r2, r1
    20a6:	d8fb      	bhi.n	20a0 <usb_serial_flush_callback+0x4c>
	asm("dsb");
    20a8:	f3bf 8f4f 	dsb	sy
	asm("isb");
    20ac:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    20b0:	2004      	movs	r0, #4
    20b2:	4639      	mov	r1, r7
    20b4:	f7ff feea 	bl	1e8c <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    20b8:	7833      	ldrb	r3, [r6, #0]
    20ba:	4a08      	ldr	r2, [pc, #32]	; (20dc <usb_serial_flush_callback+0x88>)
    20bc:	3301      	adds	r3, #1
    20be:	b2db      	uxtb	r3, r3
    20c0:	2b03      	cmp	r3, #3
    20c2:	bf88      	it	hi
    20c4:	2300      	movhi	r3, #0
    20c6:	7013      	strb	r3, [r2, #0]
	tx_available = 0;
    20c8:	2300      	movs	r3, #0
    20ca:	802b      	strh	r3, [r5, #0]
    20cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    20d0:	20000eee 	.word	0x20000eee
    20d4:	20000ed8 	.word	0x20000ed8
    20d8:	20001026 	.word	0x20001026
    20dc:	20000eef 	.word	0x20000eef
    20e0:	20001040 	.word	0x20001040
    20e4:	20201060 	.word	0x20201060
    20e8:	e000ef70 	.word	0xe000ef70

000020ec <usb_serial_write.part.1>:
{
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
    20ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    20f0:	b085      	sub	sp, #20
    20f2:	9002      	str	r0, [sp, #8]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    20f4:	9101      	str	r1, [sp, #4]
    20f6:	2900      	cmp	r1, #0
    20f8:	f000 80a2 	beq.w	2240 <usb_serial_write.part.1+0x154>
    20fc:	2300      	movs	r3, #0
    20fe:	f8df 815c 	ldr.w	r8, [pc, #348]	; 225c <usb_serial_write.part.1+0x170>
    2102:	f8df 914c 	ldr.w	r9, [pc, #332]	; 2250 <usb_serial_write.part.1+0x164>
    2106:	9300      	str	r3, [sp, #0]
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
    2108:	4e4e      	ldr	r6, [pc, #312]	; (2244 <usb_serial_write.part.1+0x158>)
    210a:	f8b8 3000 	ldrh.w	r3, [r8]
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    210e:	f8df a150 	ldr.w	sl, [pc, #336]	; 2260 <usb_serial_write.part.1+0x174>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
	do {
		SCB_CACHE_DCCIMVAC = location;
    2112:	f8df b150 	ldr.w	fp, [pc, #336]	; 2264 <usb_serial_write.part.1+0x178>
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
    2116:	4a4c      	ldr	r2, [pc, #304]	; (2248 <usb_serial_write.part.1+0x15c>)
    2118:	7814      	ldrb	r4, [r2, #0]
    211a:	4a4c      	ldr	r2, [pc, #304]	; (224c <usb_serial_write.part.1+0x160>)
    211c:	eb02 1744 	add.w	r7, r2, r4, lsl #5
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    2120:	2b00      	cmp	r3, #0
    2122:	d16e      	bne.n	2202 <usb_serial_write.part.1+0x116>
    2124:	461d      	mov	r5, r3
    2126:	461c      	mov	r4, r3
    2128:	e014      	b.n	2154 <usb_serial_write.part.1+0x68>
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    212a:	f899 3000 	ldrb.w	r3, [r9]
				}
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
    212e:	b904      	cbnz	r4, 2132 <usb_serial_write.part.1+0x46>
				wait_begin_at = systick_millis_count;
    2130:	6835      	ldr	r5, [r6, #0]
    2132:	2401      	movs	r4, #1
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    2134:	2b00      	cmp	r3, #0
    2136:	d15e      	bne.n	21f6 <usb_serial_write.part.1+0x10a>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    2138:	6833      	ldr	r3, [r6, #0]
    213a:	1b5b      	subs	r3, r3, r5
    213c:	2b78      	cmp	r3, #120	; 0x78
    213e:	d879      	bhi.n	2234 <usb_serial_write.part.1+0x148>
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    2140:	f89a 3000 	ldrb.w	r3, [sl]
    2144:	2b00      	cmp	r3, #0
    2146:	d056      	beq.n	21f6 <usb_serial_write.part.1+0x10a>
			yield();
    2148:	f000 fb86 	bl	2858 <yield>
	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    214c:	f8b8 3000 	ldrh.w	r3, [r8]
    2150:	2b00      	cmp	r3, #0
    2152:	d154      	bne.n	21fe <usb_serial_write.part.1+0x112>
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
    2154:	4638      	mov	r0, r7
    2156:	f7ff febf 	bl	1ed8 <usb_transfer_status>
			if (!(status & 0x80)) {
    215a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    215e:	4a3c      	ldr	r2, [pc, #240]	; (2250 <usb_serial_write.part.1+0x164>)
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
			if (!(status & 0x80)) {
    2160:	d1e3      	bne.n	212a <usb_serial_write.part.1+0x3e>
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    2162:	f44f 6300 	mov.w	r3, #2048	; 0x800
    2166:	4a38      	ldr	r2, [pc, #224]	; (2248 <usb_serial_write.part.1+0x15c>)
				transmit_previous_timeout = 0;
    2168:	f889 0000 	strb.w	r0, [r9]
    216c:	7814      	ldrb	r4, [r2, #0]
    216e:	461a      	mov	r2, r3
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    2170:	f8a8 3000 	strh.w	r3, [r8]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    2174:	02e4      	lsls	r4, r4, #11
		if (size >= tx_available) {
    2176:	9d01      	ldr	r5, [sp, #4]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    2178:	4936      	ldr	r1, [pc, #216]	; (2254 <usb_serial_write.part.1+0x168>)
    217a:	4420      	add	r0, r4
		if (size >= tx_available) {
    217c:	4295      	cmp	r5, r2
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    217e:	4408      	add	r0, r1
		if (size >= tx_available) {
    2180:	d343      	bcc.n	220a <usb_serial_write.part.1+0x11e>
			memcpy(txdata, data, tx_available);
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    2182:	440c      	add	r4, r1
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
    2184:	9902      	ldr	r1, [sp, #8]
    2186:	f000 fbdf 	bl	2948 <memcpy>
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    218a:	2300      	movs	r3, #0
    218c:	4621      	mov	r1, r4
    218e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    2192:	4638      	mov	r0, r7
    2194:	f7ff fe62 	bl	1e5c <usb_prepare_transfer>
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    2198:	f024 031f 	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    219c:	f504 6400 	add.w	r4, r4, #2048	; 0x800
	asm volatile("": : :"memory");
	asm("dsb");
    21a0:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    21a4:	f8cb 3000 	str.w	r3, [fp]
		location += 32;
    21a8:	3320      	adds	r3, #32
	} while (location < end_addr);
    21aa:	429c      	cmp	r4, r3
    21ac:	d8fa      	bhi.n	21a4 <usb_serial_write.part.1+0xb8>
	asm("dsb");
    21ae:	f3bf 8f4f 	dsb	sy
	asm("isb");
    21b2:	f3bf 8f6f 	isb	sy
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    21b6:	2004      	movs	r0, #4
    21b8:	4639      	mov	r1, r7
    21ba:	f7ff fe67 	bl	1e8c <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    21be:	4b22      	ldr	r3, [pc, #136]	; (2248 <usb_serial_write.part.1+0x15c>)
    21c0:	4a21      	ldr	r2, [pc, #132]	; (2248 <usb_serial_write.part.1+0x15c>)
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
    21c2:	2100      	movs	r1, #0
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    21c4:	781b      	ldrb	r3, [r3, #0]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    21c6:	4824      	ldr	r0, [pc, #144]	; (2258 <usb_serial_write.part.1+0x16c>)
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    21c8:	3301      	adds	r3, #1
    21ca:	b2db      	uxtb	r3, r3
    21cc:	2b03      	cmp	r3, #3
    21ce:	bf88      	it	hi
    21d0:	2300      	movhi	r3, #0
    21d2:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    21d4:	f8b8 2000 	ldrh.w	r2, [r8]
			sent += tx_available;
    21d8:	9b00      	ldr	r3, [sp, #0]
			data += tx_available;
			tx_available = 0;
    21da:	f8a8 1000 	strh.w	r1, [r8]
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
			sent += tx_available;
    21de:	4413      	add	r3, r2
    21e0:	9300      	str	r3, [sp, #0]
			data += tx_available;
    21e2:	9b02      	ldr	r3, [sp, #8]
    21e4:	4413      	add	r3, r2
    21e6:	9302      	str	r3, [sp, #8]
    21e8:	460b      	mov	r3, r1
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    21ea:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    21ee:	9901      	ldr	r1, [sp, #4]
    21f0:	1a8a      	subs	r2, r1, r2
    21f2:	9201      	str	r2, [sp, #4]
    21f4:	d18f      	bne.n	2116 <usb_serial_write.part.1+0x2a>
    21f6:	9800      	ldr	r0, [sp, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    21f8:	b005      	add	sp, #20
    21fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    21fe:	4a12      	ldr	r2, [pc, #72]	; (2248 <usb_serial_write.part.1+0x15c>)
    2200:	7814      	ldrb	r4, [r2, #0]
    2202:	461a      	mov	r2, r3
    2204:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    2208:	e7b4      	b.n	2174 <usb_serial_write.part.1+0x88>
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
    220a:	9c01      	ldr	r4, [sp, #4]
    220c:	9902      	ldr	r1, [sp, #8]
    220e:	4622      	mov	r2, r4
    2210:	9303      	str	r3, [sp, #12]
    2212:	f000 fb99 	bl	2948 <memcpy>
			tx_available -= size;
    2216:	9b03      	ldr	r3, [sp, #12]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    2218:	4a0f      	ldr	r2, [pc, #60]	; (2258 <usb_serial_write.part.1+0x16c>)
    221a:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
    221e:	1b1b      	subs	r3, r3, r4
    2220:	f8a8 3000 	strh.w	r3, [r8]
    2224:	9b00      	ldr	r3, [sp, #0]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    2226:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    222a:	4618      	mov	r0, r3
    222c:	4420      	add	r0, r4
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    222e:	b005      	add	sp, #20
    2230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    2234:	2301      	movs	r3, #1
				return sent;
    2236:	9800      	ldr	r0, [sp, #0]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    2238:	7013      	strb	r3, [r2, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    223a:	b005      	add	sp, #20
    223c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    2240:	9801      	ldr	r0, [sp, #4]
    2242:	e7d9      	b.n	21f8 <usb_serial_write.part.1+0x10c>
    2244:	20000e8c 	.word	0x20000e8c
    2248:	20000eef 	.word	0x20000eef
    224c:	20001040 	.word	0x20001040
    2250:	20001025 	.word	0x20001025
    2254:	20201060 	.word	0x20201060
    2258:	402e0000 	.word	0x402e0000
    225c:	20001026 	.word	0x20001026
    2260:	20000ed8 	.word	0x20000ed8
    2264:	e000ef70 	.word	0xe000ef70

00002268 <usb_serial_reset>:
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);


void usb_serial_reset(void)
{
    2268:	4770      	bx	lr
    226a:	bf00      	nop

0000226c <usb_serial_configure>:
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    226c:	4b31      	ldr	r3, [pc, #196]	; (2334 <usb_serial_configure+0xc8>)
	printf("usb_serial_reset\n");
	// deallocate all transfer descriptors
}

void usb_serial_configure(void)
{
    226e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    2272:	781b      	ldrb	r3, [r3, #0]
		tx_packet_size = CDC_TX_SIZE_480;
    2274:	4f30      	ldr	r7, [pc, #192]	; (2338 <usb_serial_configure+0xcc>)
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    2276:	2b00      	cmp	r3, #0
    2278:	d054      	beq.n	2324 <usb_serial_configure+0xb8>
		tx_packet_size = CDC_TX_SIZE_480;
    227a:	f44f 7300 	mov.w	r3, #512	; 0x200
		rx_packet_size = CDC_RX_SIZE_480;
    227e:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 236c <usb_serial_configure+0x100>
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
    2282:	803b      	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    2284:	f8a8 3000 	strh.w	r3, [r8]
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    2288:	2100      	movs	r1, #0
    228a:	2280      	movs	r2, #128	; 0x80
    228c:	482b      	ldr	r0, [pc, #172]	; (233c <usb_serial_configure+0xd0>)
	tx_head = 0;
    228e:	460d      	mov	r5, r1
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    2290:	4e2b      	ldr	r6, [pc, #172]	; (2340 <usb_serial_configure+0xd4>)
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    2292:	f001 f9c9 	bl	3628 <memset>
	tx_head = 0;
    2296:	4c2b      	ldr	r4, [pc, #172]	; (2344 <usb_serial_configure+0xd8>)
	tx_available = 0;
    2298:	4b2b      	ldr	r3, [pc, #172]	; (2348 <usb_serial_configure+0xdc>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    229a:	4629      	mov	r1, r5
    229c:	f44f 7280 	mov.w	r2, #256	; 0x100
    22a0:	482a      	ldr	r0, [pc, #168]	; (234c <usb_serial_configure+0xe0>)
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    22a2:	7025      	strb	r5, [r4, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    22a4:	462c      	mov	r4, r5
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    22a6:	801d      	strh	r5, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    22a8:	f001 f9be 	bl	3628 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    22ac:	6035      	str	r5, [r6, #0]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    22ae:	462b      	mov	r3, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    22b0:	6075      	str	r5, [r6, #4]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    22b2:	462a      	mov	r2, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    22b4:	60b5      	str	r5, [r6, #8]
    22b6:	60f5      	str	r5, [r6, #12]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    22b8:	4925      	ldr	r1, [pc, #148]	; (2350 <usb_serial_configure+0xe4>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    22ba:	4e26      	ldr	r6, [pc, #152]	; (2354 <usb_serial_configure+0xe8>)
	rx_head = 0;
	rx_tail = 0;
    22bc:	4826      	ldr	r0, [pc, #152]	; (2358 <usb_serial_configure+0xec>)
	rx_available = 0;
    22be:	f8df e0b0 	ldr.w	lr, [pc, #176]	; 2370 <usb_serial_configure+0x104>
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    22c2:	700d      	strb	r5, [r1, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    22c4:	2110      	movs	r1, #16
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
    22c6:	7005      	strb	r5, [r0, #0]
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    22c8:	2002      	movs	r0, #2
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    22ca:	6035      	str	r5, [r6, #0]
    22cc:	6075      	str	r5, [r6, #4]
    22ce:	60b5      	str	r5, [r6, #8]
    22d0:	60f5      	str	r5, [r6, #12]
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
    22d2:	f8ce 5000 	str.w	r5, [lr]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    22d6:	f7ff fd8d 	bl	1df4 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    22da:	f8b8 1000 	ldrh.w	r1, [r8]
    22de:	462a      	mov	r2, r5
    22e0:	4b1e      	ldr	r3, [pc, #120]	; (235c <usb_serial_configure+0xf0>)
    22e2:	2003      	movs	r0, #3
    22e4:	f7ff fd54 	bl	1d90 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    22e8:	462b      	mov	r3, r5
    22ea:	8839      	ldrh	r1, [r7, #0]
    22ec:	2201      	movs	r2, #1
    22ee:	2004      	movs	r0, #4
    22f0:	f7ff fd80 	bl	1df4 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    22f4:	4620      	mov	r0, r4
    22f6:	3401      	adds	r4, #1
    22f8:	f7ff fe1c 	bl	1f34 <rx_queue_transfer>
    22fc:	2c08      	cmp	r4, #8
    22fe:	d1f9      	bne.n	22f4 <usb_serial_configure+0x88>
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
	USB1_GPTIMER0CTRL = 0;
    2300:	4b17      	ldr	r3, [pc, #92]	; (2360 <usb_serial_configure+0xf4>)
	USB1_GPTIMER0LD = microseconds - 1;
    2302:	224a      	movs	r2, #74	; 0x4a
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    2304:	4817      	ldr	r0, [pc, #92]	; (2364 <usb_serial_configure+0xf8>)
	USB1_GPTIMER0CTRL = 0;
    2306:	2100      	movs	r1, #0
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    2308:	4c17      	ldr	r4, [pc, #92]	; (2368 <usb_serial_configure+0xfc>)
    230a:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    230c:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    2310:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    2314:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    2318:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    231c:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    2320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    2324:	2340      	movs	r3, #64	; 0x40
		rx_packet_size = CDC_RX_SIZE_12;
    2326:	f8df 8044 	ldr.w	r8, [pc, #68]	; 236c <usb_serial_configure+0x100>
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    232a:	803b      	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_12;
    232c:	f8a8 3000 	strh.w	r3, [r8]
    2330:	e7aa      	b.n	2288 <usb_serial_configure+0x1c>
    2332:	bf00      	nop
    2334:	20000eb0 	.word	0x20000eb0
    2338:	20000eec 	.word	0x20000eec
    233c:	20001040 	.word	0x20001040
    2340:	20001010 	.word	0x20001010
    2344:	20000eef 	.word	0x20000eef
    2348:	20001026 	.word	0x20001026
    234c:	20000f00 	.word	0x20000f00
    2350:	20001024 	.word	0x20001024
    2354:	20000edc 	.word	0x20000edc
    2358:	20001000 	.word	0x20001000
    235c:	00001fa1 	.word	0x00001fa1
    2360:	402e0000 	.word	0x402e0000
    2364:	20000ea0 	.word	0x20000ea0
    2368:	00002055 	.word	0x00002055
    236c:	2000100e 	.word	0x2000100e
    2370:	20001020 	.word	0x20001020

00002374 <usb_serial_read>:
int usb_serial_read(void *buffer, uint32_t size)
{
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    2374:	4b31      	ldr	r3, [pc, #196]	; (243c <usb_serial_read+0xc8>)
    2376:	f44f 3200 	mov.w	r2, #131072	; 0x20000

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    237a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    237e:	601a      	str	r2, [r3, #0]

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    2380:	b083      	sub	sp, #12
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    2382:	4b2f      	ldr	r3, [pc, #188]	; (2440 <usb_serial_read+0xcc>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    2384:	4689      	mov	r9, r1
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    2386:	781c      	ldrb	r4, [r3, #0]
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    2388:	2900      	cmp	r1, #0
    238a:	d053      	beq.n	2434 <usb_serial_read+0xc0>
    238c:	4b2d      	ldr	r3, [pc, #180]	; (2444 <usb_serial_read+0xd0>)
    238e:	b2e4      	uxtb	r4, r4
    2390:	781b      	ldrb	r3, [r3, #0]
    2392:	429c      	cmp	r4, r3
    2394:	d050      	beq.n	2438 <usb_serial_read+0xc4>
    2396:	4682      	mov	sl, r0
    2398:	2700      	movs	r7, #0
    239a:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 245c <usb_serial_read+0xe8>
		if (++tail > RX_NUM) tail = 0;
    239e:	3401      	adds	r4, #1
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    23a0:	4b29      	ldr	r3, [pc, #164]	; (2448 <usb_serial_read+0xd4>)
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
    23a2:	ebc7 0809 	rsb	r8, r7, r9
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    23a6:	4650      	mov	r0, sl
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    23a8:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    23aa:	9301      	str	r3, [sp, #4]
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
    23ac:	4b27      	ldr	r3, [pc, #156]	; (244c <usb_serial_read+0xd8>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    23ae:	bf28      	it	cs
    23b0:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    23b2:	5d1d      	ldrb	r5, [r3, r4]
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    23b4:	4b24      	ldr	r3, [pc, #144]	; (2448 <usb_serial_read+0xd4>)
    23b6:	f833 e015 	ldrh.w	lr, [r3, r5, lsl #1]
    23ba:	4b25      	ldr	r3, [pc, #148]	; (2450 <usb_serial_read+0xdc>)
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    23bc:	eb0e 2145 	add.w	r1, lr, r5, lsl #9
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    23c0:	f833 6015 	ldrh.w	r6, [r3, r5, lsl #1]
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    23c4:	4b23      	ldr	r3, [pc, #140]	; (2454 <usb_serial_read+0xe0>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    23c6:	ebce 0606 	rsb	r6, lr, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    23ca:	4419      	add	r1, r3
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    23cc:	45b0      	cmp	r8, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    23ce:	4632      	mov	r2, r6
			p += avail;
			rx_available -= avail;
			count += avail;
    23d0:	4437      	add	r7, r6
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    23d2:	d219      	bcs.n	2408 <usb_serial_read+0x94>
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    23d4:	eb0e 2145 	add.w	r1, lr, r5, lsl #9
    23d8:	4642      	mov	r2, r8
    23da:	4419      	add	r1, r3
    23dc:	f000 fab4 	bl	2948 <memcpy>
			rx_available -= len;
			rx_index[i] += len;
    23e0:	9b01      	ldr	r3, [sp, #4]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    23e2:	f8db 1000 	ldr.w	r1, [fp]
    23e6:	4648      	mov	r0, r9
			rx_index[i] += len;
    23e8:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    23ec:	ebc8 0101 	rsb	r1, r8, r1
			rx_index[i] += len;
    23f0:	4490      	add	r8, r2
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    23f2:	f8cb 1000 	str.w	r1, [fp]
			rx_index[i] += len;
    23f6:	f823 8015 	strh.w	r8, [r3, r5, lsl #1]
			count += avail;
			rx_tail = tail;
			rx_queue_transfer(i);
		}
	}
	NVIC_ENABLE_IRQ(IRQ_USB1);
    23fa:	4b17      	ldr	r3, [pc, #92]	; (2458 <usb_serial_read+0xe4>)
    23fc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    2400:	601a      	str	r2, [r3, #0]
	return count;
}
    2402:	b003      	add	sp, #12
    2404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    2408:	f000 fa9e 	bl	2948 <memcpy>
			p += avail;
			rx_available -= avail;
    240c:	f8db 2000 	ldr.w	r2, [fp]
			count += avail;
			rx_tail = tail;
    2410:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
    2412:	4628      	mov	r0, r5
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
			rx_available -= avail;
    2414:	1b92      	subs	r2, r2, r6
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
    2416:	44b2      	add	sl, r6
			rx_available -= avail;
    2418:	f8cb 2000 	str.w	r2, [fp]
			count += avail;
			rx_tail = tail;
    241c:	4a08      	ldr	r2, [pc, #32]	; (2440 <usb_serial_read+0xcc>)
    241e:	7013      	strb	r3, [r2, #0]
			rx_queue_transfer(i);
    2420:	f7ff fd88 	bl	1f34 <rx_queue_transfer>

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    2424:	45b9      	cmp	r9, r7
    2426:	d903      	bls.n	2430 <usb_serial_read+0xbc>
    2428:	4b06      	ldr	r3, [pc, #24]	; (2444 <usb_serial_read+0xd0>)
    242a:	781b      	ldrb	r3, [r3, #0]
    242c:	429c      	cmp	r4, r3
    242e:	d1b6      	bne.n	239e <usb_serial_read+0x2a>
    2430:	4638      	mov	r0, r7
    2432:	e7e2      	b.n	23fa <usb_serial_read+0x86>
    2434:	4608      	mov	r0, r1
    2436:	e7e0      	b.n	23fa <usb_serial_read+0x86>
    2438:	2000      	movs	r0, #0
    243a:	e7de      	b.n	23fa <usb_serial_read+0x86>
    243c:	e000e18c 	.word	0xe000e18c
    2440:	20001000 	.word	0x20001000
    2444:	20001024 	.word	0x20001024
    2448:	20000edc 	.word	0x20000edc
    244c:	20001004 	.word	0x20001004
    2450:	20001010 	.word	0x20001010
    2454:	20200060 	.word	0x20200060
    2458:	e000e10c 	.word	0xe000e10c
    245c:	20001020 	.word	0x20001020

00002460 <usb_serial_peekchar>:
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    2460:	4b0b      	ldr	r3, [pc, #44]	; (2490 <usb_serial_peekchar+0x30>)
	if (tail == rx_head) return -1;
    2462:	4a0c      	ldr	r2, [pc, #48]	; (2494 <usb_serial_peekchar+0x34>)
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    2464:	781b      	ldrb	r3, [r3, #0]
	if (tail == rx_head) return -1;
    2466:	7812      	ldrb	r2, [r2, #0]
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    2468:	b2db      	uxtb	r3, r3
	if (tail == rx_head) return -1;
    246a:	4293      	cmp	r3, r2
    246c:	d00d      	beq.n	248a <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    246e:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    2470:	4809      	ldr	r0, [pc, #36]	; (2498 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    2472:	4a0a      	ldr	r2, [pc, #40]	; (249c <usb_serial_peekchar+0x3c>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    2474:	2b09      	cmp	r3, #9
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    2476:	490a      	ldr	r1, [pc, #40]	; (24a0 <usb_serial_peekchar+0x40>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    2478:	bf28      	it	cs
    247a:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    247c:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    247e:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
    2482:	eb02 2343 	add.w	r3, r2, r3, lsl #9
    2486:	5c58      	ldrb	r0, [r3, r1]
    2488:	4770      	bx	lr

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
    248a:	f04f 30ff 	mov.w	r0, #4294967295
	if (++tail > RX_NUM) tail = 0;
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
}
    248e:	4770      	bx	lr
    2490:	20001000 	.word	0x20001000
    2494:	20001024 	.word	0x20001024
    2498:	20001004 	.word	0x20001004
    249c:	20200060 	.word	0x20200060
    24a0:	20000edc 	.word	0x20000edc

000024a4 <usb_serial_available>:

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	return rx_available;
    24a4:	4b01      	ldr	r3, [pc, #4]	; (24ac <usb_serial_available+0x8>)
    24a6:	6818      	ldr	r0, [r3, #0]
}
    24a8:	4770      	bx	lr
    24aa:	bf00      	nop
    24ac:	20001020 	.word	0x20001020

000024b0 <usb_serial_flush_input>:

// discard any buffered input
void usb_serial_flush_input(void)
{
    24b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    24b4:	4e15      	ldr	r6, [pc, #84]	; (250c <usb_serial_flush_input+0x5c>)
	while (tail != rx_head) {
    24b6:	4d16      	ldr	r5, [pc, #88]	; (2510 <usb_serial_flush_input+0x60>)
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    24b8:	7834      	ldrb	r4, [r6, #0]
	while (tail != rx_head) {
    24ba:	782b      	ldrb	r3, [r5, #0]
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    24bc:	b2e4      	uxtb	r4, r4
	while (tail != rx_head) {
    24be:	429c      	cmp	r4, r3
    24c0:	d021      	beq.n	2506 <usb_serial_flush_input+0x56>
    24c2:	f8df 9054 	ldr.w	r9, [pc, #84]	; 2518 <usb_serial_flush_input+0x68>
    24c6:	f8df b054 	ldr.w	fp, [pc, #84]	; 251c <usb_serial_flush_input+0x6c>
    24ca:	f8df 8054 	ldr.w	r8, [pc, #84]	; 2520 <usb_serial_flush_input+0x70>
    24ce:	4f11      	ldr	r7, [pc, #68]	; (2514 <usb_serial_flush_input+0x64>)
		if (++tail > RX_NUM) tail = 0;
    24d0:	3401      	adds	r4, #1
    24d2:	2c08      	cmp	r4, #8
    24d4:	fa5f fa84 	uxtb.w	sl, r4
    24d8:	d901      	bls.n	24de <usb_serial_flush_input+0x2e>
    24da:	2400      	movs	r4, #0
    24dc:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
    24de:	f819 1004 	ldrb.w	r1, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    24e2:	f8db 2000 	ldr.w	r2, [fp]
    24e6:	f838 3011 	ldrh.w	r3, [r8, r1, lsl #1]
		rx_queue_transfer(i);
    24ea:	4608      	mov	r0, r1
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		rx_available -= rx_count[i] - rx_index[i];
    24ec:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
    24f0:	1a5b      	subs	r3, r3, r1
    24f2:	1ad3      	subs	r3, r2, r3
    24f4:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
    24f8:	f7ff fd1c 	bl	1f34 <rx_queue_transfer>
		rx_tail = tail;
    24fc:	f886 a000 	strb.w	sl, [r6]

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
    2500:	782b      	ldrb	r3, [r5, #0]
    2502:	429c      	cmp	r4, r3
    2504:	d1e4      	bne.n	24d0 <usb_serial_flush_input+0x20>
    2506:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    250a:	bf00      	nop
    250c:	20001000 	.word	0x20001000
    2510:	20001024 	.word	0x20001024
    2514:	20000edc 	.word	0x20000edc
    2518:	20001004 	.word	0x20001004
    251c:	20001020 	.word	0x20001020
    2520:	20001010 	.word	0x20001010

00002524 <usb_serial_getchar>:
}


// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    2524:	b500      	push	{lr}
    2526:	b083      	sub	sp, #12
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
    2528:	2101      	movs	r1, #1
    252a:	f10d 0007 	add.w	r0, sp, #7
    252e:	f7ff ff21 	bl	2374 <usb_serial_read>
    2532:	b120      	cbz	r0, 253e <usb_serial_getchar+0x1a>
    2534:	f89d 0007 	ldrb.w	r0, [sp, #7]
	return -1;
}
    2538:	b003      	add	sp, #12
    253a:	f85d fb04 	ldr.w	pc, [sp], #4
// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
	return -1;
    253e:	f04f 30ff 	mov.w	r0, #4294967295
    2542:	e7f9      	b.n	2538 <usb_serial_getchar+0x14>

00002544 <usb_serial_putchar>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    2544:	4b09      	ldr	r3, [pc, #36]	; (256c <usb_serial_putchar+0x28>)
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    2546:	b500      	push	{lr}
    2548:	b083      	sub	sp, #12
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    254a:	781b      	ldrb	r3, [r3, #0]
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    254c:	f88d 0007 	strb.w	r0, [sp, #7]
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    2550:	b923      	cbnz	r3, 255c <usb_serial_putchar+0x18>
    2552:	f003 00ff 	and.w	r0, r3, #255	; 0xff

// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
	return usb_serial_write(&c, 1);
}
    2556:	b003      	add	sp, #12
    2558:	f85d fb04 	ldr.w	pc, [sp], #4
    255c:	2101      	movs	r1, #1
    255e:	f10d 0007 	add.w	r0, sp, #7
    2562:	f7ff fdc3 	bl	20ec <usb_serial_write.part.1>
    2566:	b003      	add	sp, #12
    2568:	f85d fb04 	ldr.w	pc, [sp], #4
    256c:	20000ed8 	.word	0x20000ed8

00002570 <usb_serial_write>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    2570:	4b04      	ldr	r3, [pc, #16]	; (2584 <usb_serial_write+0x14>)
    2572:	781b      	ldrb	r3, [r3, #0]
    2574:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    2578:	b10b      	cbz	r3, 257e <usb_serial_write+0xe>
    257a:	f7ff bdb7 	b.w	20ec <usb_serial_write.part.1>
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    257e:	4610      	mov	r0, r2
    2580:	4770      	bx	lr
    2582:	bf00      	nop
    2584:	20000ed8 	.word	0x20000ed8

00002588 <usb_serial_write_buffer_free>:

int usb_serial_write_buffer_free(void)
{
    2588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    258c:	2400      	movs	r4, #0
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
    258e:	f8df 8040 	ldr.w	r8, [pc, #64]	; 25d0 <usb_serial_write_buffer_free+0x48>
    2592:	2301      	movs	r3, #1
    2594:	4d0c      	ldr	r5, [pc, #48]	; (25c8 <usb_serial_write_buffer_free+0x40>)
	return sent;
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
    2596:	4627      	mov	r7, r4
    2598:	4e0c      	ldr	r6, [pc, #48]	; (25cc <usb_serial_write_buffer_free+0x44>)
	tx_noautoflush = 1;
    259a:	f888 3000 	strb.w	r3, [r8]
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    259e:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    25a0:	4628      	mov	r0, r5
    25a2:	3520      	adds	r5, #32
int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    25a4:	42a3      	cmp	r3, r4

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    25a6:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
    25aa:	d005      	beq.n	25b8 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    25ac:	f7ff fc94 	bl	1ed8 <usb_transfer_status>
    25b0:	0603      	lsls	r3, r0, #24
    25b2:	bf58      	it	pl
    25b4:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    25b8:	2c04      	cmp	r4, #4
    25ba:	d1f0      	bne.n	259e <usb_serial_write_buffer_free+0x16>
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    25bc:	2300      	movs	r3, #0
	return sum;
}
    25be:	4638      	mov	r0, r7
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    25c0:	f888 3000 	strb.w	r3, [r8]
	return sum;
}
    25c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    25c8:	20001040 	.word	0x20001040
    25cc:	20000eef 	.word	0x20000eef
    25d0:	20000eee 	.word	0x20000eee

000025d4 <usb_serial_flush_output>:

void usb_serial_flush_output(void)
{
    25d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	if (!usb_configuration) return;
    25d8:	4b1f      	ldr	r3, [pc, #124]	; (2658 <usb_serial_flush_output+0x84>)
    25da:	781b      	ldrb	r3, [r3, #0]
    25dc:	b113      	cbz	r3, 25e4 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    25de:	4d1f      	ldr	r5, [pc, #124]	; (265c <usb_serial_flush_output+0x88>)
    25e0:	882a      	ldrh	r2, [r5, #0]
    25e2:	b90a      	cbnz	r2, 25e8 <usb_serial_flush_output+0x14>
    25e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    25e8:	f8df 8084 	ldr.w	r8, [pc, #132]	; 2670 <usb_serial_flush_output+0x9c>
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    25ec:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    25f0:	4e1b      	ldr	r6, [pc, #108]	; (2660 <usb_serial_flush_output+0x8c>)
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    25f2:	f04f 0e01 	mov.w	lr, #1
	transfer_t *xfer = tx_transfer + tx_head;
    25f6:	f898 1000 	ldrb.w	r1, [r8]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    25fa:	464a      	mov	r2, r9

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    25fc:	4c19      	ldr	r4, [pc, #100]	; (2664 <usb_serial_flush_output+0x90>)
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    25fe:	2300      	movs	r3, #0
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    2600:	eb06 1641 	add.w	r6, r6, r1, lsl #5
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    2604:	4f18      	ldr	r7, [pc, #96]	; (2668 <usb_serial_flush_output+0x94>)
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    2606:	eb04 24c1 	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    260a:	4630      	mov	r0, r6
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    260c:	f887 e000 	strb.w	lr, [r7]
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    2610:	4621      	mov	r1, r4
    2612:	f7ff fc23 	bl	1e5c <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    2616:	eb09 0204 	add.w	r2, r9, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    261a:	f024 011f 	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    261e:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    2622:	4b12      	ldr	r3, [pc, #72]	; (266c <usb_serial_flush_output+0x98>)
    2624:	6019      	str	r1, [r3, #0]
		location += 32;
    2626:	3120      	adds	r1, #32
	} while (location < end_addr);
    2628:	428a      	cmp	r2, r1
    262a:	d8fb      	bhi.n	2624 <usb_serial_flush_output+0x50>
	asm("dsb");
    262c:	f3bf 8f4f 	dsb	sy
	asm("isb");
    2630:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    2634:	2004      	movs	r0, #4
    2636:	4631      	mov	r1, r6
    2638:	f7ff fc28 	bl	1e8c <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    263c:	f898 3000 	ldrb.w	r3, [r8]
    2640:	4a0b      	ldr	r2, [pc, #44]	; (2670 <usb_serial_flush_output+0x9c>)
    2642:	3301      	adds	r3, #1
    2644:	b2db      	uxtb	r3, r3
    2646:	2b03      	cmp	r3, #3
    2648:	bf88      	it	hi
    264a:	2300      	movhi	r3, #0
    264c:	7013      	strb	r3, [r2, #0]
	tx_available = 0;
    264e:	2300      	movs	r3, #0
    2650:	802b      	strh	r3, [r5, #0]
	tx_noautoflush = 0;
    2652:	703b      	strb	r3, [r7, #0]
    2654:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2658:	20000ed8 	.word	0x20000ed8
    265c:	20001026 	.word	0x20001026
    2660:	20001040 	.word	0x20001040
    2664:	20201060 	.word	0x20201060
    2668:	20000eee 	.word	0x20000eee
    266c:	e000ef70 	.word	0xe000ef70
    2670:	20000eef 	.word	0x20000eef

00002674 <DMAChannel::begin(bool)>:
#warning "CR is defined as something?"
#endif


void DMAChannel::begin(bool force_initialization)
{
    2674:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t ch = 0;

	__disable_irq();
    2676:	b672      	cpsid	i
	if (!force_initialization && TCD && channel < DMA_MAX_CHANNELS
    2678:	b989      	cbnz	r1, 269e <DMAChannel::begin(bool)+0x2a>
    267a:	6802      	ldr	r2, [r0, #0]
    267c:	b17a      	cbz	r2, 269e <DMAChannel::begin(bool)+0x2a>
    267e:	7903      	ldrb	r3, [r0, #4]
    2680:	2b0f      	cmp	r3, #15
    2682:	d80c      	bhi.n	269e <DMAChannel::begin(bool)+0x2a>
	  && (dma_channel_allocated_mask & (1 << channel))
    2684:	4c1f      	ldr	r4, [pc, #124]	; (2704 <DMAChannel::begin(bool)+0x90>)
    2686:	8821      	ldrh	r1, [r4, #0]
    2688:	fa41 f503 	asr.w	r5, r1, r3
    268c:	07ed      	lsls	r5, r5, #31
    268e:	d508      	bpl.n	26a2 <DMAChannel::begin(bool)+0x2e>
	  && (uint32_t)TCD == (uint32_t)(0x400E9000 + channel * 32)) {
    2690:	4d1d      	ldr	r5, [pc, #116]	; (2708 <DMAChannel::begin(bool)+0x94>)
    2692:	441d      	add	r5, r3
    2694:	ebb2 1f45 	cmp.w	r2, r5, lsl #5
    2698:	d103      	bne.n	26a2 <DMAChannel::begin(bool)+0x2e>
		// DMA channel already allocated
		__enable_irq();
    269a:	b662      	cpsie	i
		return;
    269c:	e00e      	b.n	26bc <DMAChannel::begin(bool)+0x48>
    269e:	4c19      	ldr	r4, [pc, #100]	; (2704 <DMAChannel::begin(bool)+0x90>)
    26a0:	8821      	ldrh	r1, [r4, #0]
#warning "CR is defined as something?"
#endif


void DMAChannel::begin(bool force_initialization)
{
    26a2:	2300      	movs	r3, #0
		// DMA channel already allocated
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
    26a4:	fa41 f203 	asr.w	r2, r1, r3
    26a8:	f012 0201 	ands.w	r2, r2, #1
    26ac:	d008      	beq.n	26c0 <DMAChannel::begin(bool)+0x4c>
			dma_channel_allocated_mask |= (1 << ch);
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
    26ae:	3301      	adds	r3, #1
    26b0:	2b10      	cmp	r3, #16
    26b2:	d1f7      	bne.n	26a4 <DMAChannel::begin(bool)+0x30>
			__enable_irq();
    26b4:	b662      	cpsie	i
			TCD = (TCD_t *)0;
    26b6:	2200      	movs	r2, #0
			channel = DMA_MAX_CHANNELS;
    26b8:	7103      	strb	r3, [r0, #4]
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
			__enable_irq();
			TCD = (TCD_t *)0;
    26ba:	6002      	str	r2, [r0, #0]
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
}
    26bc:	bcf0      	pop	{r4, r5, r6, r7}
    26be:	4770      	bx	lr
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
			dma_channel_allocated_mask |= (1 << ch);
    26c0:	2501      	movs	r5, #1
    26c2:	409d      	lsls	r5, r3
    26c4:	4329      	orrs	r1, r5
    26c6:	8021      	strh	r1, [r4, #0]
			__enable_irq();
    26c8:	b662      	cpsie	i
			// attempts to use this object will hardfault
		}
	}
	channel = ch;

	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    26ca:	4e10      	ldr	r6, [pc, #64]	; (270c <DMAChannel::begin(bool)+0x98>)
			channel = DMA_MAX_CHANNELS;
			return; // no more channels available
			// attempts to use this object will hardfault
		}
	}
	channel = ch;
    26cc:	b2dc      	uxtb	r4, r3
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    26ce:	490e      	ldr	r1, [pc, #56]	; (2708 <DMAChannel::begin(bool)+0x94>)
		}
	}
	channel = ch;

	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
    26d0:	f240 4782 	movw	r7, #1154	; 0x482
			channel = DMA_MAX_CHANNELS;
			return; // no more channels available
			// attempts to use this object will hardfault
		}
	}
	channel = ch;
    26d4:	7104      	strb	r4, [r0, #4]
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    26d6:	4419      	add	r1, r3
			// attempts to use this object will hardfault
		}
	}
	channel = ch;

	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    26d8:	6ff5      	ldr	r5, [r6, #124]	; 0x7c
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    26da:	014b      	lsls	r3, r1, #5
			// attempts to use this object will hardfault
		}
	}
	channel = ch;

	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    26dc:	f045 05c0 	orr.w	r5, r5, #192	; 0xc0
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
    26e0:	490b      	ldr	r1, [pc, #44]	; (2710 <DMAChannel::begin(bool)+0x9c>)
			// attempts to use this object will hardfault
		}
	}
	channel = ch;

	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    26e2:	67f5      	str	r5, [r6, #124]	; 0x7c
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
    26e4:	600f      	str	r7, [r1, #0]
	DMA_CERQ = ch;
    26e6:	768c      	strb	r4, [r1, #26]
	DMA_CERR = ch;
    26e8:	778c      	strb	r4, [r1, #30]
	DMA_CEEI = ch;
    26ea:	760c      	strb	r4, [r1, #24]
	DMA_CINT = ch;
    26ec:	77cc      	strb	r4, [r1, #31]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    26ee:	6003      	str	r3, [r0, #0]
	uint32_t *p = (uint32_t *)TCD;
	*p++ = 0;
    26f0:	601a      	str	r2, [r3, #0]
	*p++ = 0;
    26f2:	605a      	str	r2, [r3, #4]
	*p++ = 0;
    26f4:	609a      	str	r2, [r3, #8]
	*p++ = 0;
    26f6:	60da      	str	r2, [r3, #12]
	*p++ = 0;
    26f8:	611a      	str	r2, [r3, #16]
	*p++ = 0;
    26fa:	615a      	str	r2, [r3, #20]
	*p++ = 0;
    26fc:	619a      	str	r2, [r3, #24]
	*p++ = 0;
    26fe:	61da      	str	r2, [r3, #28]
}
    2700:	bcf0      	pop	{r4, r5, r6, r7}
    2702:	4770      	bx	lr
    2704:	200010c0 	.word	0x200010c0
    2708:	02007480 	.word	0x02007480
    270c:	400fc000 	.word	0x400fc000
    2710:	400e8000 	.word	0x400e8000

00002714 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    2714:	b570      	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    2716:	f3ef 8110 	mrs	r1, PRIMASK
		__disable_irq();
    271a:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    271c:	4c0c      	ldr	r4, [pc, #48]	; (2750 <EventResponder::runFromInterrupt()+0x3c>)
    271e:	6823      	ldr	r3, [r4, #0]
		if (first) {
    2720:	b18b      	cbz	r3, 2746 <EventResponder::runFromInterrupt()+0x32>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    2722:	4e0c      	ldr	r6, [pc, #48]	; (2754 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    2724:	2500      	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    2726:	695a      	ldr	r2, [r3, #20]
    2728:	6022      	str	r2, [r4, #0]
			if (firstInterrupt) {
    272a:	b17a      	cbz	r2, 274c <EventResponder::runFromInterrupt()+0x38>
				firstInterrupt->_prev = nullptr;
    272c:	6195      	str	r5, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    272e:	b901      	cbnz	r1, 2732 <EventResponder::runFromInterrupt()+0x1e>
    2730:	b662      	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    2732:	775d      	strb	r5, [r3, #29]
			(*(first->_function))(*first);
    2734:	4618      	mov	r0, r3
    2736:	689b      	ldr	r3, [r3, #8]
    2738:	4798      	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    273a:	f3ef 8110 	mrs	r1, PRIMASK
		__disable_irq();
    273e:	b672      	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    2740:	6823      	ldr	r3, [r4, #0]
		if (first) {
    2742:	2b00      	cmp	r3, #0
    2744:	d1ef      	bne.n	2726 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    2746:	b901      	cbnz	r1, 274a <EventResponder::runFromInterrupt()+0x36>
    2748:	b662      	cpsie	i
    274a:	bd70      	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    274c:	6032      	str	r2, [r6, #0]
    274e:	e7ee      	b.n	272e <EventResponder::runFromInterrupt()+0x1a>
    2750:	200010c4 	.word	0x200010c4
    2754:	200010c8 	.word	0x200010c8

00002758 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

extern "C" void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    2758:	f7ff bfdc 	b.w	2714 <EventResponder::runFromInterrupt()>

0000275c <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    275c:	4a04      	ldr	r2, [pc, #16]	; (2770 <systick_isr+0x14>)
    275e:	4b05      	ldr	r3, [pc, #20]	; (2774 <systick_isr+0x18>)
    2760:	6811      	ldr	r1, [r2, #0]
	systick_millis_count++;
    2762:	4a05      	ldr	r2, [pc, #20]	; (2778 <systick_isr+0x1c>)
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    2764:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    2766:	6813      	ldr	r3, [r2, #0]
    2768:	3301      	adds	r3, #1
    276a:	6013      	str	r3, [r2, #0]
    276c:	4770      	bx	lr
    276e:	bf00      	nop
    2770:	e0001004 	.word	0xe0001004
    2774:	20000e84 	.word	0x20000e84
    2778:	20000e8c 	.word	0x20000e8c

0000277c <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    277c:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    277e:	f7fd fff9 	bl	774 <setup>
	while (1) {
		loop();
    2782:	f7fe f871 	bl	868 <loop>
		yield();
    2786:	f000 f867 	bl	2858 <yield>
    278a:	e7fa      	b.n	2782 <main+0x6>

0000278c <operator new(unsigned int)>:
    278c:	f000 bc8c 	b.w	30a8 <malloc>

00002790 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    2790:	b510      	push	{r4, lr}
	uint8_t buf[2]={'\r', '\n'};
    2792:	4c06      	ldr	r4, [pc, #24]	; (27ac <Print::println()+0x1c>)
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    2794:	b082      	sub	sp, #8
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    2796:	6803      	ldr	r3, [r0, #0]
    2798:	2202      	movs	r2, #2
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    279a:	8824      	ldrh	r4, [r4, #0]
	return write(buf, 2);
    279c:	a901      	add	r1, sp, #4
    279e:	685b      	ldr	r3, [r3, #4]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    27a0:	f8ad 4004 	strh.w	r4, [sp, #4]
	return write(buf, 2);
    27a4:	4798      	blx	r3
}
    27a6:	b002      	add	sp, #8
    27a8:	bd10      	pop	{r4, pc}
    27aa:	bf00      	nop
    27ac:	200003ac 	.word	0x200003ac

000027b0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	return vdprintf((int)this, (const char *)format, ap);
#endif
}

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    27b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    27b2:	4606      	mov	r6, r0
    27b4:	b08b      	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    27b6:	2a00      	cmp	r2, #0
    27b8:	d033      	beq.n	2822 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    27ba:	2a01      	cmp	r2, #1
    27bc:	bf08      	it	eq
    27be:	220a      	moveq	r2, #10
	}


	if (n == 0) {
    27c0:	b351      	cbz	r1, 2818 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    27c2:	2521      	movs	r5, #33	; 0x21
    27c4:	e000      	b.n	27c8 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    27c6:	b2fd      	uxtb	r5, r7
    27c8:	1e6f      	subs	r7, r5, #1
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    27ca:	fbb1 f4f2 	udiv	r4, r1, r2
    27ce:	fb02 1114 	mls	r1, r2, r4, r1
    27d2:	b2c8      	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    27d4:	2909      	cmp	r1, #9
    27d6:	f100 0137 	add.w	r1, r0, #55	; 0x37
    27da:	f100 0030 	add.w	r0, r0, #48	; 0x30
    27de:	bf88      	it	hi
    27e0:	b2c8      	uxtbhi	r0, r1
			n /= base;
			if (n == 0) break;
    27e2:	4621      	mov	r1, r4
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    27e4:	ac0a      	add	r4, sp, #40	; 0x28
    27e6:	bf98      	it	ls
    27e8:	b2c0      	uxtbls	r0, r0
    27ea:	442c      	add	r4, r5
    27ec:	f804 0c24 	strb.w	r0, [r4, #-36]
			n /= base;
			if (n == 0) break;
    27f0:	2900      	cmp	r1, #0
    27f2:	d1e8      	bne.n	27c6 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    27f4:	b133      	cbz	r3, 2804 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    27f6:	3d01      	subs	r5, #1
		buf[i] = '-';
    27f8:	ab0a      	add	r3, sp, #40	; 0x28
    27fa:	222d      	movs	r2, #45	; 0x2d
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
		i--;
    27fc:	b2ed      	uxtb	r5, r5
		buf[i] = '-';
    27fe:	442b      	add	r3, r5
    2800:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    2804:	6833      	ldr	r3, [r6, #0]
    2806:	a901      	add	r1, sp, #4
    2808:	f1c5 0222 	rsb	r2, r5, #34	; 0x22
    280c:	4630      	mov	r0, r6
    280e:	4429      	add	r1, r5
    2810:	685b      	ldr	r3, [r3, #4]
    2812:	4798      	blx	r3
}
    2814:	b00b      	add	sp, #44	; 0x2c
    2816:	bdf0      	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    2818:	2230      	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    281a:	2521      	movs	r5, #33	; 0x21
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    281c:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
    2820:	e7e8      	b.n	27f4 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    2822:	6803      	ldr	r3, [r0, #0]
    2824:	b2c9      	uxtb	r1, r1
    2826:	681b      	ldr	r3, [r3, #0]
    2828:	4798      	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    282a:	b00b      	add	sp, #44	; 0x2c
    282c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    282e:	bf00      	nop

00002830 <usb_serial_class::clear()>:
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    2830:	f7ff be3e 	b.w	24b0 <usb_serial_flush_input>

00002834 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    2834:	f7ff be14 	b.w	2460 <usb_serial_peekchar>

00002838 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    2838:	f7ff be74 	b.w	2524 <usb_serial_getchar>

0000283c <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    283c:	f7ff be32 	b.w	24a4 <usb_serial_available>

00002840 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    2840:	f7ff bec8 	b.w	25d4 <usb_serial_flush_output>

00002844 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    2844:	f7ff bea0 	b.w	2588 <usb_serial_write_buffer_free>

00002848 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    2848:	4608      	mov	r0, r1
    284a:	4611      	mov	r1, r2
    284c:	f7ff be90 	b.w	2570 <usb_serial_write>

00002850 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    2850:	4608      	mov	r0, r1
    2852:	f7ff be77 	b.w	2544 <usb_serial_putchar>
    2856:	bf00      	nop

00002858 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    2858:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    285c:	4e32      	ldr	r6, [pc, #200]	; (2928 <yield+0xd0>)
    285e:	7833      	ldrb	r3, [r6, #0]
    2860:	b193      	cbz	r3, 2888 <yield+0x30>
	if (running) return; // TODO: does this need to be atomic?
    2862:	4f32      	ldr	r7, [pc, #200]	; (292c <yield+0xd4>)
    2864:	783a      	ldrb	r2, [r7, #0]
    2866:	b97a      	cbnz	r2, 2888 <yield+0x30>
	running = 1;
    2868:	2201      	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    286a:	07d9      	lsls	r1, r3, #31
void yield(void)
{
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    286c:	703a      	strb	r2, [r7, #0]


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    286e:	d437      	bmi.n	28e0 <yield+0x88>
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();
    2870:	079a      	lsls	r2, r3, #30
    2872:	d419      	bmi.n	28a8 <yield+0x50>

	running = 0;
    2874:	2200      	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    2876:	075b      	lsls	r3, r3, #29
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();

	running = 0;
    2878:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    287a:	d505      	bpl.n	2888 <yield+0x30>
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    287c:	4b2c      	ldr	r3, [pc, #176]	; (2930 <yield+0xd8>)
    287e:	681a      	ldr	r2, [r3, #0]
    2880:	b112      	cbz	r2, 2888 <yield+0x30>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    2882:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    2886:	b10a      	cbz	r2, 288c <yield+0x34>
    2888:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    288c:	f3ef 8010 	mrs	r0, PRIMASK
		__disable_irq();
    2890:	b672      	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    2892:	681a      	ldr	r2, [r3, #0]
		if (first == nullptr) {
    2894:	b11a      	cbz	r2, 289e <yield+0x46>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    2896:	4c27      	ldr	r4, [pc, #156]	; (2934 <yield+0xdc>)
    2898:	7821      	ldrb	r1, [r4, #0]
    289a:	2900      	cmp	r1, #0
    289c:	d02f      	beq.n	28fe <yield+0xa6>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    289e:	2800      	cmp	r0, #0
    28a0:	d1f2      	bne.n	2888 <yield+0x30>
    28a2:	b662      	cpsie	i
    28a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    28a8:	f8df 8094 	ldr.w	r8, [pc, #148]	; 2940 <yield+0xe8>
    28ac:	f898 2000 	ldrb.w	r2, [r8]
    28b0:	2a00      	cmp	r2, #0
    28b2:	d0df      	beq.n	2874 <yield+0x1c>
    28b4:	2400      	movs	r4, #0
    28b6:	f8df 908c 	ldr.w	r9, [pc, #140]	; 2944 <yield+0xec>
    28ba:	e005      	b.n	28c8 <yield+0x70>
    28bc:	3401      	adds	r4, #1
    28be:	f898 3000 	ldrb.w	r3, [r8]
    28c2:	b2e4      	uxtb	r4, r4
    28c4:	42a3      	cmp	r3, r4
    28c6:	d913      	bls.n	28f0 <yield+0x98>
			s_serials_with_serial_events[i]->doYieldCode();
    28c8:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
	static HardwareSerial 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    28cc:	682b      	ldr	r3, [r5, #0]
    28ce:	4628      	mov	r0, r5
    28d0:	691b      	ldr	r3, [r3, #16]
    28d2:	4798      	blx	r3
    28d4:	2800      	cmp	r0, #0
    28d6:	d0f1      	beq.n	28bc <yield+0x64>
    28d8:	696b      	ldr	r3, [r5, #20]
    28da:	689b      	ldr	r3, [r3, #8]
    28dc:	4798      	blx	r3
    28de:	e7ed      	b.n	28bc <yield+0x64>
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    28e0:	f7ff fde0 	bl	24a4 <usb_serial_available>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    28e4:	b9d0      	cbnz	r0, 291c <yield+0xc4>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    28e6:	4b14      	ldr	r3, [pc, #80]	; (2938 <yield+0xe0>)
    28e8:	781b      	ldrb	r3, [r3, #0]
    28ea:	b91b      	cbnz	r3, 28f4 <yield+0x9c>
    28ec:	7833      	ldrb	r3, [r6, #0]
    28ee:	e7bf      	b.n	2870 <yield+0x18>
    28f0:	7833      	ldrb	r3, [r6, #0]
    28f2:	e7bf      	b.n	2874 <yield+0x1c>
    28f4:	7833      	ldrb	r3, [r6, #0]
    28f6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    28fa:	7033      	strb	r3, [r6, #0]
    28fc:	e7b8      	b.n	2870 <yield+0x18>
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    28fe:	2601      	movs	r6, #1
		firstYield = first->_next;
    2900:	6955      	ldr	r5, [r2, #20]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    2902:	7026      	strb	r6, [r4, #0]
		firstYield = first->_next;
    2904:	601d      	str	r5, [r3, #0]
		if (firstYield) {
    2906:	b165      	cbz	r5, 2922 <yield+0xca>
			firstYield->_prev = nullptr;
    2908:	61a9      	str	r1, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    290a:	b900      	cbnz	r0, 290e <yield+0xb6>
    290c:	b662      	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    290e:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    2910:	6893      	ldr	r3, [r2, #8]
    2912:	4610      	mov	r0, r2
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    2914:	7755      	strb	r5, [r2, #29]
		(*(first->_function))(*first);
    2916:	4798      	blx	r3
		runningFromYield = false;
    2918:	7025      	strb	r5, [r4, #0]
    291a:	e7b5      	b.n	2888 <yield+0x30>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    291c:	f000 fb94 	bl	3048 <serialEvent()>
    2920:	e7e1      	b.n	28e6 <yield+0x8e>
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    2922:	4b06      	ldr	r3, [pc, #24]	; (293c <yield+0xe4>)
    2924:	601d      	str	r5, [r3, #0]
    2926:	e7f0      	b.n	290a <yield+0xb2>
    2928:	20000418 	.word	0x20000418
    292c:	200010d5 	.word	0x200010d5
    2930:	200010d0 	.word	0x200010d0
    2934:	200010d4 	.word	0x200010d4
    2938:	60001726 	.word	0x60001726
    293c:	200010cc 	.word	0x200010cc
    2940:	200010f4 	.word	0x200010f4
    2944:	200010d8 	.word	0x200010d8

00002948 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    2948:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    294a:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    294e:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    2952:	d16d      	bne.n	2a30 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    2954:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    2956:	d341      	bcc.n	29dc <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    2958:	f851 3b04 	ldr.w	r3, [r1], #4
    295c:	f840 3b04 	str.w	r3, [r0], #4
    2960:	f851 3b04 	ldr.w	r3, [r1], #4
    2964:	f840 3b04 	str.w	r3, [r0], #4
    2968:	f851 3b04 	ldr.w	r3, [r1], #4
    296c:	f840 3b04 	str.w	r3, [r0], #4
    2970:	f851 3b04 	ldr.w	r3, [r1], #4
    2974:	f840 3b04 	str.w	r3, [r0], #4
    2978:	f851 3b04 	ldr.w	r3, [r1], #4
    297c:	f840 3b04 	str.w	r3, [r0], #4
    2980:	f851 3b04 	ldr.w	r3, [r1], #4
    2984:	f840 3b04 	str.w	r3, [r0], #4
    2988:	f851 3b04 	ldr.w	r3, [r1], #4
    298c:	f840 3b04 	str.w	r3, [r0], #4
    2990:	f851 3b04 	ldr.w	r3, [r1], #4
    2994:	f840 3b04 	str.w	r3, [r0], #4
    2998:	f851 3b04 	ldr.w	r3, [r1], #4
    299c:	f840 3b04 	str.w	r3, [r0], #4
    29a0:	f851 3b04 	ldr.w	r3, [r1], #4
    29a4:	f840 3b04 	str.w	r3, [r0], #4
    29a8:	f851 3b04 	ldr.w	r3, [r1], #4
    29ac:	f840 3b04 	str.w	r3, [r0], #4
    29b0:	f851 3b04 	ldr.w	r3, [r1], #4
    29b4:	f840 3b04 	str.w	r3, [r0], #4
    29b8:	f851 3b04 	ldr.w	r3, [r1], #4
    29bc:	f840 3b04 	str.w	r3, [r0], #4
    29c0:	f851 3b04 	ldr.w	r3, [r1], #4
    29c4:	f840 3b04 	str.w	r3, [r0], #4
    29c8:	f851 3b04 	ldr.w	r3, [r1], #4
    29cc:	f840 3b04 	str.w	r3, [r0], #4
    29d0:	f851 3b04 	ldr.w	r3, [r1], #4
    29d4:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    29d8:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    29da:	d2bd      	bcs.n	2958 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    29dc:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    29de:	d311      	bcc.n	2a04 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    29e0:	f851 3b04 	ldr.w	r3, [r1], #4
    29e4:	f840 3b04 	str.w	r3, [r0], #4
    29e8:	f851 3b04 	ldr.w	r3, [r1], #4
    29ec:	f840 3b04 	str.w	r3, [r0], #4
    29f0:	f851 3b04 	ldr.w	r3, [r1], #4
    29f4:	f840 3b04 	str.w	r3, [r0], #4
    29f8:	f851 3b04 	ldr.w	r3, [r1], #4
    29fc:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    2a00:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    2a02:	d2ed      	bcs.n	29e0 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    2a04:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    2a06:	d305      	bcc.n	2a14 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    2a08:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    2a0c:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    2a10:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    2a12:	d2f9      	bcs.n	2a08 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    2a14:	3204      	adds	r2, #4
	beq	.Ldone
    2a16:	d008      	beq.n	2a2a <memcpy+0xe2>

	lsls	r2, r2, #31
    2a18:	07d2      	lsls	r2, r2, #31
	itt ne
    2a1a:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    2a1c:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    2a20:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    2a24:	d301      	bcc.n	2a2a <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    2a26:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    2a28:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    2a2a:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    2a2c:	4770      	bx	lr
    2a2e:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    2a30:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    2a32:	d313      	bcc.n	2a5c <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    2a34:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    2a36:	d08d      	beq.n	2954 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    2a38:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    2a3c:	d08a      	beq.n	2954 <memcpy+0xc>

	rsb	r3, #4
    2a3e:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    2a42:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    2a44:	07db      	lsls	r3, r3, #31
	itt ne
    2a46:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    2a48:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    2a4c:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    2a50:	d380      	bcc.n	2954 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    2a52:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    2a56:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    2a5a:	e77b      	b.n	2954 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    2a5c:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    2a5e:	d3d9      	bcc.n	2a14 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    2a60:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    2a62:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    2a66:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    2a6a:	d2f9      	bcs.n	2a60 <memcpy+0x118>

	ldrb	r3, [r1]
    2a6c:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    2a6e:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    2a70:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    2a72:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    2a74:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    2a76:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    2a78:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    2a7a:	4770      	bx	lr

00002a7c <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    2a7c:	4a96      	ldr	r2, [pc, #600]	; (2cd8 <set_arm_clock+0x25c>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    2a7e:	4b97      	ldr	r3, [pc, #604]	; (2cdc <set_arm_clock+0x260>)
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    2a80:	4290      	cmp	r0, r2
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
    2a82:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;
    2a86:	4c96      	ldr	r4, [pc, #600]	; (2ce0 <set_arm_clock+0x264>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    2a88:	f8d3 e014 	ldr.w	lr, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    2a8c:	6999      	ldr	r1, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    2a8e:	68e6      	ldr	r6, [r4, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    2a90:	d91c      	bls.n	2acc <set_arm_clock+0x50>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    2a92:	4b94      	ldr	r3, [pc, #592]	; (2ce4 <set_arm_clock+0x268>)
    2a94:	4298      	cmp	r0, r3
    2a96:	f240 8115 	bls.w	2cc4 <set_arm_clock+0x248>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    2a9a:	4b93      	ldr	r3, [pc, #588]	; (2ce8 <set_arm_clock+0x26c>)
    2a9c:	f240 6527 	movw	r5, #1575	; 0x627
    2aa0:	4f92      	ldr	r7, [pc, #584]	; (2cec <set_arm_clock+0x270>)
    2aa2:	4403      	add	r3, r0
    2aa4:	4c92      	ldr	r4, [pc, #584]	; (2cf0 <set_arm_clock+0x274>)
    2aa6:	0a1a      	lsrs	r2, r3, #8
    2aa8:	fba7 3202 	umull	r3, r2, r7, r2
    2aac:	09d3      	lsrs	r3, r2, #7
    2aae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2ab2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    2ab6:	f202 43e2 	addw	r3, r2, #1250	; 0x4e2
    2aba:	42ab      	cmp	r3, r5
    2abc:	bf28      	it	cs
    2abe:	462b      	movcs	r3, r5
    2ac0:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
    2ac4:	fba4 3503 	umull	r3, r5, r4, r3
    2ac8:	08ed      	lsrs	r5, r5, #3
    2aca:	e004      	b.n	2ad6 <set_arm_clock+0x5a>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24000000) {
    2acc:	4d89      	ldr	r5, [pc, #548]	; (2cf4 <set_arm_clock+0x278>)
    2ace:	42a8      	cmp	r0, r5
    2ad0:	bf94      	ite	ls
    2ad2:	2506      	movls	r5, #6
    2ad4:	250e      	movhi	r5, #14
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    2ad6:	4a81      	ldr	r2, [pc, #516]	; (2cdc <set_arm_clock+0x260>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    2ad8:	f006 071f 	and.w	r7, r6, #31
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    2adc:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    2ae0:	42af      	cmp	r7, r5
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    2ae2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    2ae6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    2aea:	d20a      	bcs.n	2b02 <set_arm_clock+0x86>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    2aec:	4b7c      	ldr	r3, [pc, #496]	; (2ce0 <set_arm_clock+0x264>)

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    2aee:	f026 061f 	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    2af2:	461a      	mov	r2, r3
	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    2af4:	432e      	orrs	r6, r5
		DCDC_REG3 = dcdc;
    2af6:	60de      	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    2af8:	6813      	ldr	r3, [r2, #0]
    2afa:	2b00      	cmp	r3, #0
    2afc:	dafc      	bge.n	2af8 <set_arm_clock+0x7c>
    2afe:	f006 071f 	and.w	r7, r6, #31
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    2b02:	f01e 7300 	ands.w	r3, lr, #33554432	; 0x2000000
    2b06:	d131      	bne.n	2b6c <set_arm_clock+0xf0>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    2b08:	4c7b      	ldr	r4, [pc, #492]	; (2cf8 <set_arm_clock+0x27c>)
    2b0a:	4a7c      	ldr	r2, [pc, #496]	; (2cfc <set_arm_clock+0x280>)
    2b0c:	f8d4 c010 	ldr.w	ip, [r4, #16]
    2b10:	4614      	mov	r4, r2
    2b12:	ea0c 0202 	and.w	r2, ip, r2
    2b16:	42a2      	cmp	r2, r4
    2b18:	bf0a      	itet	eq
    2b1a:	f04f 53c0 	moveq.w	r3, #402653184	; 0x18000000
    2b1e:	f44f 5280 	movne.w	r2, #4096	; 0x1000
    2b22:	2200      	moveq	r2, #0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    2b24:	ea8e 0403 	eor.w	r4, lr, r3
    2b28:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    2b2c:	d008      	beq.n	2b40 <set_arm_clock+0xc4>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    2b2e:	f02e 5e60 	bic.w	lr, lr, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    2b32:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
			CCM_CBCDR = cbcdr;
    2b36:	4c69      	ldr	r4, [pc, #420]	; (2cdc <set_arm_clock+0x260>)
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    2b38:	ea43 0e0e 	orr.w	lr, r3, lr
			CCM_CBCDR = cbcdr;
    2b3c:	f8c4 e014 	str.w	lr, [r4, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    2b40:	ea81 0302 	eor.w	r3, r1, r2
    2b44:	f413 5f40 	tst.w	r3, #12288	; 0x3000
    2b48:	d008      	beq.n	2b5c <set_arm_clock+0xe0>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    2b4a:	4b64      	ldr	r3, [pc, #400]	; (2cdc <set_arm_clock+0x260>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    2b4c:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    2b50:	4311      	orrs	r1, r2
			CCM_CBCMR = cbcmr;
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    2b52:	461a      	mov	r2, r3
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    2b54:	6199      	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    2b56:	6c93      	ldr	r3, [r2, #72]	; 0x48
    2b58:	071c      	lsls	r4, r3, #28
    2b5a:	d4fc      	bmi.n	2b56 <set_arm_clock+0xda>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    2b5c:	f04e 7e00 	orr.w	lr, lr, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    2b60:	4a5e      	ldr	r2, [pc, #376]	; (2cdc <set_arm_clock+0x260>)
    2b62:	f8c2 e014 	str.w	lr, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    2b66:	6c93      	ldr	r3, [r2, #72]	; 0x48
    2b68:	0699      	lsls	r1, r3, #26
    2b6a:	d4fc      	bmi.n	2b66 <set_arm_clock+0xea>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
    2b6c:	2101      	movs	r1, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    2b6e:	4c64      	ldr	r4, [pc, #400]	; (2d00 <set_arm_clock+0x284>)
	}

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
    2b70:	460a      	mov	r2, r1
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    2b72:	fb01 f302 	mul.w	r3, r1, r2
    2b76:	fb00 f303 	mul.w	r3, r0, r3
    2b7a:	42a3      	cmp	r3, r4
    2b7c:	d809      	bhi.n	2b92 <set_arm_clock+0x116>
		if (div_arm < 8) {
    2b7e:	2a07      	cmp	r2, #7
    2b80:	f200 8095 	bhi.w	2cae <set_arm_clock+0x232>
			div_arm = div_arm + 1;
    2b84:	3201      	adds	r2, #1
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    2b86:	fb01 f302 	mul.w	r3, r1, r2
    2b8a:	fb00 f303 	mul.w	r3, r0, r3
    2b8e:	42a3      	cmp	r3, r4
    2b90:	d9f5      	bls.n	2b7e <set_arm_clock+0x102>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    2b92:	485c      	ldr	r0, [pc, #368]	; (2d04 <set_arm_clock+0x288>)
    2b94:	4c5c      	ldr	r4, [pc, #368]	; (2d08 <set_arm_clock+0x28c>)
    2b96:	4418      	add	r0, r3
    2b98:	fba4 0300 	umull	r0, r3, r4, r0
    2b9c:	0d1b      	lsrs	r3, r3, #20
	if (mult > 108) mult = 108;
    2b9e:	2b6c      	cmp	r3, #108	; 0x6c
    2ba0:	f200 808b 	bhi.w	2cba <set_arm_clock+0x23e>
	if (mult < 54) mult = 54;
    2ba4:	2b35      	cmp	r3, #53	; 0x35
    2ba6:	f200 808f 	bhi.w	2cc8 <set_arm_clock+0x24c>
    2baa:	f8df 8188 	ldr.w	r8, [pc, #392]	; 2d34 <set_arm_clock+0x2b8>
    2bae:	2336      	movs	r3, #54	; 0x36
    2bb0:	4856      	ldr	r0, [pc, #344]	; (2d0c <set_arm_clock+0x290>)

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    2bb2:	f8df c144 	ldr.w	ip, [pc, #324]	; 2cf8 <set_arm_clock+0x27c>
    2bb6:	4c56      	ldr	r4, [pc, #344]	; (2d10 <set_arm_clock+0x294>)
    2bb8:	f8dc 9000 	ldr.w	r9, [ip]
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    2bbc:	fbb0 f0f2 	udiv	r0, r0, r2

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    2bc0:	ea09 0404 	and.w	r4, r9, r4
    2bc4:	4544      	cmp	r4, r8
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    2bc6:	fbb0 f0f1 	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    2bca:	d00b      	beq.n	2be4 <set_arm_clock+0x168>
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    2bcc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    2bd0:	f44f 5880 	mov.w	r8, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    2bd4:	4664      	mov	r4, ip
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    2bd6:	f8cc 8000 	str.w	r8, [ip]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    2bda:	f8cc 3000 	str.w	r3, [ip]
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    2bde:	6823      	ldr	r3, [r4, #0]
    2be0:	2b00      	cmp	r3, #0
    2be2:	dafc      	bge.n	2bde <set_arm_clock+0x162>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    2be4:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 2cdc <set_arm_clock+0x260>
    2be8:	3a01      	subs	r2, #1
    2bea:	f8dc 3010 	ldr.w	r3, [ip, #16]
    2bee:	f003 0307 	and.w	r3, r3, #7
    2bf2:	4293      	cmp	r3, r2
    2bf4:	d007      	beq.n	2c06 <set_arm_clock+0x18a>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    2bf6:	f002 0207 	and.w	r2, r2, #7
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    2bfa:	4664      	mov	r4, ip
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    2bfc:	f8cc 2010 	str.w	r2, [ip, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    2c00:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    2c02:	03db      	lsls	r3, r3, #15
    2c04:	d4fc      	bmi.n	2c00 <set_arm_clock+0x184>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    2c06:	3901      	subs	r1, #1
    2c08:	0289      	lsls	r1, r1, #10
    2c0a:	ea8e 0301 	eor.w	r3, lr, r1
    2c0e:	f413 5fe0 	tst.w	r3, #7168	; 0x1c00
    2c12:	d00c      	beq.n	2c2e <set_arm_clock+0x1b2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
		CCM_CBCDR = cbcdr;
    2c14:	4b31      	ldr	r3, [pc, #196]	; (2cdc <set_arm_clock+0x260>)
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    2c16:	f42e 5ee0 	bic.w	lr, lr, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    2c1a:	f401 51e0 	and.w	r1, r1, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    2c1e:	461a      	mov	r2, r3
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    2c20:	ea41 0e0e 	orr.w	lr, r1, lr
		CCM_CBCDR = cbcdr;
    2c24:	f8c3 e014 	str.w	lr, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    2c28:	6c93      	ldr	r3, [r2, #72]	; 0x48
    2c2a:	0799      	lsls	r1, r3, #30
    2c2c:	d4fc      	bmi.n	2c28 <set_arm_clock+0x1ac>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    2c2e:	4b39      	ldr	r3, [pc, #228]	; (2d14 <set_arm_clock+0x298>)
    2c30:	4939      	ldr	r1, [pc, #228]	; (2d18 <set_arm_clock+0x29c>)
    2c32:	4403      	add	r3, r0
    2c34:	09db      	lsrs	r3, r3, #7
    2c36:	fba1 3103 	umull	r3, r1, r1, r3
    2c3a:	0b09      	lsrs	r1, r1, #12
    2c3c:	2904      	cmp	r1, #4
    2c3e:	bf28      	it	cs
    2c40:	2104      	movcs	r1, #4
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    2c42:	1e4b      	subs	r3, r1, #1
    2c44:	021b      	lsls	r3, r3, #8
    2c46:	ea8e 0203 	eor.w	r2, lr, r3
    2c4a:	f412 7f40 	tst.w	r2, #768	; 0x300
    2c4e:	d007      	beq.n	2c60 <set_arm_clock+0x1e4>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    2c50:	f42e 7e40 	bic.w	lr, lr, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    2c54:	f403 7340 	and.w	r3, r3, #768	; 0x300
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    2c58:	4a20      	ldr	r2, [pc, #128]	; (2cdc <set_arm_clock+0x260>)

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    2c5a:	ea43 030e 	orr.w	r3, r3, lr
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    2c5e:	6153      	str	r3, [r2, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    2c60:	4b1e      	ldr	r3, [pc, #120]	; (2cdc <set_arm_clock+0x260>)
    2c62:	695c      	ldr	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    2c64:	461a      	mov	r2, r3
		CCM_CBCDR = cbcdr;
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    2c66:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
    2c6a:	615c      	str	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    2c6c:	6c93      	ldr	r3, [r2, #72]	; 0x48
    2c6e:	069b      	lsls	r3, r3, #26
    2c70:	d4fc      	bmi.n	2c6c <set_arm_clock+0x1f0>

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2c72:	4b2a      	ldr	r3, [pc, #168]	; (2d1c <set_arm_clock+0x2a0>)
    2c74:	f04f 32ff 	mov.w	r2, #4294967295
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    2c78:	4c29      	ldr	r4, [pc, #164]	; (2d20 <set_arm_clock+0x2a4>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    2c7a:	42bd      	cmp	r5, r7
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2c7c:	fba3 e300 	umull	lr, r3, r3, r0
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    2c80:	6020      	str	r0, [r4, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2c82:	ea4f 4393 	mov.w	r3, r3, lsr #18
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    2c86:	4c27      	ldr	r4, [pc, #156]	; (2d24 <set_arm_clock+0x2a8>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2c88:	fbb2 f3f3 	udiv	r3, r2, r3
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    2c8c:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2c90:	4a25      	ldr	r2, [pc, #148]	; (2d28 <set_arm_clock+0x2ac>)
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    2c92:	6021      	str	r1, [r4, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2c94:	6013      	str	r3, [r2, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    2c96:	d208      	bcs.n	2caa <set_arm_clock+0x22e>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    2c98:	4b11      	ldr	r3, [pc, #68]	; (2ce0 <set_arm_clock+0x264>)
	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    2c9a:	f026 061f 	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    2c9e:	461a      	mov	r2, r3

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    2ca0:	432e      	orrs	r6, r5
		DCDC_REG3 = dcdc;
    2ca2:	60de      	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    2ca4:	6813      	ldr	r3, [r2, #0]
    2ca6:	2b00      	cmp	r3, #0
    2ca8:	dafc      	bge.n	2ca4 <set_arm_clock+0x228>
	}

	return frequency;
}
    2caa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
    2cae:	2904      	cmp	r1, #4
    2cb0:	f63f af6f 	bhi.w	2b92 <set_arm_clock+0x116>
				div_ahb = div_ahb + 1;
    2cb4:	3101      	adds	r1, #1
				div_arm = 1;
    2cb6:	2201      	movs	r2, #1
    2cb8:	e75b      	b.n	2b72 <set_arm_clock+0xf6>
    2cba:	f8df 807c 	ldr.w	r8, [pc, #124]	; 2d38 <set_arm_clock+0x2bc>
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
    2cbe:	236c      	movs	r3, #108	; 0x6c
    2cc0:	481a      	ldr	r0, [pc, #104]	; (2d2c <set_arm_clock+0x2b0>)
    2cc2:	e776      	b.n	2bb2 <set_arm_clock+0x136>
    2cc4:	2512      	movs	r5, #18
    2cc6:	e706      	b.n	2ad6 <set_arm_clock+0x5a>
    2cc8:	4819      	ldr	r0, [pc, #100]	; (2d30 <set_arm_clock+0x2b4>)
    2cca:	f8df 8070 	ldr.w	r8, [pc, #112]	; 2d3c <set_arm_clock+0x2c0>
    2cce:	fb00 f003 	mul.w	r0, r0, r3
    2cd2:	ea43 0808 	orr.w	r8, r3, r8
    2cd6:	e76c      	b.n	2bb2 <set_arm_clock+0x136>
    2cd8:	1f78a400 	.word	0x1f78a400
    2cdc:	400fc000 	.word	0x400fc000
    2ce0:	40080000 	.word	0x40080000
    2ce4:	23c34600 	.word	0x23c34600
    2ce8:	dc3cba00 	.word	0xdc3cba00
    2cec:	004cb223 	.word	0x004cb223
    2cf0:	51eb851f 	.word	0x51eb851f
    2cf4:	016e3600 	.word	0x016e3600
    2cf8:	400d8000 	.word	0x400d8000
    2cfc:	80003040 	.word	0x80003040
    2d00:	269fb1ff 	.word	0x269fb1ff
    2d04:	005b8d80 	.word	0x005b8d80
    2d08:	165e9f81 	.word	0x165e9f81
    2d0c:	269fb200 	.word	0x269fb200
    2d10:	8001307f 	.word	0x8001307f
    2d14:	08f0d17f 	.word	0x08f0d17f
    2d18:	00e5109f 	.word	0x00e5109f
    2d1c:	431bde83 	.word	0x431bde83
    2d20:	20000420 	.word	0x20000420
    2d24:	2000041c 	.word	0x2000041c
    2d28:	20000e88 	.word	0x20000e88
    2d2c:	4d3f6400 	.word	0x4d3f6400
    2d30:	00b71b00 	.word	0x00b71b00
    2d34:	80002036 	.word	0x80002036
    2d38:	8000206c 	.word	0x8000206c
    2d3c:	80002000 	.word	0x80002000

00002d40 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    2d40:	b4f0      	push	{r4, r5, r6, r7}
    2d42:	1e4e      	subs	r6, r1, #1
	unsigned digit;
	int i=0, j;
    2d44:	2500      	movs	r5, #0
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    2d46:	4637      	mov	r7, r6
    2d48:	e000      	b.n	2d4c <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    2d4a:	3501      	adds	r5, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    2d4c:	fbb0 f3f2 	udiv	r3, r0, r2
    2d50:	fb02 0013 	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    2d54:	f100 0437 	add.w	r4, r0, #55	; 0x37
    2d58:	2809      	cmp	r0, #9
    2d5a:	f100 0030 	add.w	r0, r0, #48	; 0x30
    2d5e:	b2e4      	uxtb	r4, r4
    2d60:	bf98      	it	ls
    2d62:	b2c4      	uxtbls	r4, r0
		val /= radix;
		if (val == 0) break;
    2d64:	4618      	mov	r0, r3
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    2d66:	f807 4f01 	strb.w	r4, [r7, #1]!
		val /= radix;
		if (val == 0) break;
    2d6a:	2b00      	cmp	r3, #0
    2d6c:	d1ed      	bne.n	2d4a <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    2d6e:	194a      	adds	r2, r1, r5
    2d70:	7053      	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    2d72:	b14d      	cbz	r5, 2d88 <ultoa+0x48>
    2d74:	3301      	adds	r3, #1
		t = buf[j];
    2d76:	f816 4f01 	ldrb.w	r4, [r6, #1]!
		buf[j] = buf[i];
    2d7a:	7817      	ldrb	r7, [r2, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    2d7c:	1ae8      	subs	r0, r5, r3
		t = buf[j];
		buf[j] = buf[i];
    2d7e:	7037      	strb	r7, [r6, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    2d80:	4283      	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    2d82:	f802 4901 	strb.w	r4, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    2d86:	dbf5      	blt.n	2d74 <ultoa+0x34>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    2d88:	4608      	mov	r0, r1
    2d8a:	bcf0      	pop	{r4, r5, r6, r7}
    2d8c:	4770      	bx	lr
    2d8e:	bf00      	nop

00002d90 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    2d90:	48a4      	ldr	r0, [pc, #656]	; (3024 <pwm_init+0x294>)
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    2d92:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    2d96:	4ba4      	ldr	r3, [pc, #656]	; (3028 <pwm_init+0x298>)
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    2d98:	6f82      	ldr	r2, [r0, #120]	; 0x78
    2d9a:	f442 027f 	orr.w	r2, r2, #16711680	; 0xff0000
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

void pwm_init(void)
{
    2d9e:	b5f0      	push	{r4, r5, r6, r7, lr}
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    2da0:	6782      	str	r2, [r0, #120]	; 0x78
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    2da2:	2500      	movs	r5, #0
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    2da4:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    2da8:	f44f 4670 	mov.w	r6, #61440	; 0xf000
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    2dac:	4c9f      	ldr	r4, [pc, #636]	; (302c <pwm_init+0x29c>)
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    2dae:	f44f 4e60 	mov.w	lr, #57344	; 0xe000

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    2db2:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    2db4:	f44f 6780 	mov.w	r7, #1024	; 0x400
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    2db8:	4314      	orrs	r4, r2
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    2dba:	462a      	mov	r2, r5
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    2dbc:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    2dc0:	f8a3 618c 	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    2dc4:	f248 26b8 	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    2dc8:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    2dcc:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    2dd0:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
    2dd4:	b280      	uxth	r0, r0
    2dd6:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
    2dda:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
    2dde:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    2de2:	4b91      	ldr	r3, [pc, #580]	; (3028 <pwm_init+0x298>)
	for (i=0; i < 4; i++) {
    2de4:	3101      	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    2de6:	2500      	movs	r5, #0
    2de8:	0140      	lsls	r0, r0, #5
    2dea:	461c      	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    2dec:	2904      	cmp	r1, #4
    2dee:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    2df0:	f8a3 e004 	strh.w	lr, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    2df4:	80df      	strh	r7, [r3, #6]
		p->SM[i].OCTRL = 0;
    2df6:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    2df8:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    2dfa:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    2dfc:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    2dfe:	81de      	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    2e00:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    2e02:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    2e04:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    2e06:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    2e08:	d1e9      	bne.n	2dde <pwm_init+0x4e>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2e0a:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    2e0e:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    2e12:	4b87      	ldr	r3, [pc, #540]	; (3030 <pwm_init+0x2a0>)
    2e14:	f44f 4670 	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2e18:	b280      	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    2e1a:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    2e1c:	f44f 4760 	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    2e20:	462a      	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2e22:	ea40 000c 	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    2e26:	f44f 6e80 	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2e2a:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    2e2e:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
    2e32:	b280      	uxth	r0, r0
    2e34:	f440 6070 	orr.w	r0, r0, #3840	; 0xf00
    2e38:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    2e3c:	f8a3 618c 	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    2e40:	f248 26b8 	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    2e44:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    2e48:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    2e4c:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
    2e50:	b280      	uxth	r0, r0
    2e52:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
    2e56:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
    2e5a:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    2e5e:	4b74      	ldr	r3, [pc, #464]	; (3030 <pwm_init+0x2a0>)
	for (i=0; i < 4; i++) {
    2e60:	3101      	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    2e62:	2500      	movs	r5, #0
    2e64:	0140      	lsls	r0, r0, #5
    2e66:	461c      	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    2e68:	2904      	cmp	r1, #4
    2e6a:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    2e6c:	809f      	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    2e6e:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    2e72:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    2e74:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    2e76:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    2e78:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    2e7a:	81de      	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    2e7c:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    2e7e:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    2e80:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    2e82:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    2e84:	d1e9      	bne.n	2e5a <pwm_init+0xca>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2e86:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    2e8a:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    2e8e:	4b69      	ldr	r3, [pc, #420]	; (3034 <pwm_init+0x2a4>)
    2e90:	f44f 4670 	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2e94:	b280      	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    2e96:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    2e98:	f44f 4760 	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    2e9c:	462a      	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2e9e:	ea40 000c 	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    2ea2:	f44f 6e80 	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2ea6:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    2eaa:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
    2eae:	b280      	uxth	r0, r0
    2eb0:	f440 6070 	orr.w	r0, r0, #3840	; 0xf00
    2eb4:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    2eb8:	f8a3 618c 	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    2ebc:	f248 26b8 	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    2ec0:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    2ec4:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    2ec8:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
    2ecc:	b280      	uxth	r0, r0
    2ece:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
    2ed2:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
    2ed6:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    2eda:	4b56      	ldr	r3, [pc, #344]	; (3034 <pwm_init+0x2a4>)
	for (i=0; i < 4; i++) {
    2edc:	3101      	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    2ede:	2500      	movs	r5, #0
    2ee0:	0140      	lsls	r0, r0, #5
    2ee2:	461c      	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    2ee4:	2904      	cmp	r1, #4
    2ee6:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    2ee8:	809f      	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    2eea:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    2eee:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    2ef0:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    2ef2:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    2ef4:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    2ef6:	81de      	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    2ef8:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    2efa:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    2efc:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    2efe:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    2f00:	d1e9      	bne.n	2ed6 <pwm_init+0x146>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2f02:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    2f06:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    2f0a:	4b4b      	ldr	r3, [pc, #300]	; (3038 <pwm_init+0x2a8>)
    2f0c:	f44f 4770 	mov.w	r7, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2f10:	b280      	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    2f12:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    2f14:	f44f 4660 	mov.w	r6, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    2f18:	462a      	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2f1a:	ea40 000c 	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    2f1e:	f44f 6e80 	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2f22:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    2f26:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
    2f2a:	b280      	uxth	r0, r0
    2f2c:	f440 6070 	orr.w	r0, r0, #3840	; 0xf00
    2f30:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    2f34:	f8a3 718c 	strh.w	r7, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    2f38:	f248 27b8 	movw	r7, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    2f3c:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    2f40:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    2f44:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
    2f48:	b280      	uxth	r0, r0
    2f4a:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
    2f4e:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
    2f52:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    2f56:	4b38      	ldr	r3, [pc, #224]	; (3038 <pwm_init+0x2a8>)
	for (i=0; i < 4; i++) {
    2f58:	3101      	adds	r1, #1
    2f5a:	0140      	lsls	r0, r0, #5
    2f5c:	461c      	mov	r4, r3
    2f5e:	2904      	cmp	r1, #4
    2f60:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    2f62:	809e      	strh	r6, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    2f64:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    2f68:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    2f6a:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    2f6c:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    2f6e:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    2f70:	81df      	strh	r7, [r3, #14]
		p->SM[i].VAL2 = 0;
    2f72:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    2f74:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    2f76:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    2f78:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    2f7a:	d1ea      	bne.n	2f52 <pwm_init+0x1c2>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2f7c:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    2f80:	270f      	movs	r7, #15

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    2f82:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    2f84:	f241 0601 	movw	r6, #4097	; 0x1001
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2f88:	b29b      	uxth	r3, r3
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    2f8a:	f645 5ec0 	movw	lr, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    2f8e:	4611      	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    2f90:	f243 0526 	movw	r5, #12326	; 0x3026
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2f94:	433b      	orrs	r3, r7
    2f96:	f8a4 3188 	strh.w	r3, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    2f9a:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
    2f9e:	b29b      	uxth	r3, r3
    2fa0:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    2fa4:	f8a4 3188 	strh.w	r3, [r4, #392]	; 0x188
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    2fa8:	0150      	lsls	r0, r2, #5
    2faa:	4b24      	ldr	r3, [pc, #144]	; (303c <pwm_init+0x2ac>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    2fac:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    2fae:	4403      	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    2fb0:	2a04      	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    2fb2:	8199      	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    2fb4:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    2fb6:	81df      	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    2fb8:	829e      	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    2fba:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    2fbe:	8019      	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    2fc0:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    2fc2:	819d      	strh	r5, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    2fc4:	d1f0      	bne.n	2fa8 <pwm_init+0x218>
    2fc6:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    2fc8:	270f      	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    2fca:	f241 0601 	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    2fce:	f645 55c0 	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    2fd2:	4611      	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    2fd4:	f243 0426 	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    2fd8:	0150      	lsls	r0, r2, #5
    2fda:	4b19      	ldr	r3, [pc, #100]	; (3040 <pwm_init+0x2b0>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    2fdc:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    2fde:	4403      	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    2fe0:	2a04      	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    2fe2:	8199      	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    2fe4:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    2fe6:	81df      	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    2fe8:	829e      	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    2fea:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    2fec:	8019      	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    2fee:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    2ff0:	819c      	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    2ff2:	d1f1      	bne.n	2fd8 <pwm_init+0x248>
    2ff4:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    2ff6:	270f      	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    2ff8:	f241 0601 	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    2ffc:	f645 55c0 	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    3000:	4611      	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    3002:	f243 0426 	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    3006:	0150      	lsls	r0, r2, #5
    3008:	4b0e      	ldr	r3, [pc, #56]	; (3044 <pwm_init+0x2b4>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    300a:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    300c:	4403      	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    300e:	2a04      	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    3010:	8199      	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    3012:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    3014:	81df      	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    3016:	829e      	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    3018:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    301a:	8019      	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    301c:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    301e:	819c      	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    3020:	d1f1      	bne.n	3006 <pwm_init+0x276>
	flexpwm_init(&IMXRT_FLEXPWM3);
	flexpwm_init(&IMXRT_FLEXPWM4);
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    3022:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3024:	400fc000 	.word	0x400fc000
    3028:	403dc000 	.word	0x403dc000
    302c:	fc030000 	.word	0xfc030000
    3030:	403e0000 	.word	0x403e0000
    3034:	403e4000 	.word	0x403e4000
    3038:	403e8000 	.word	0x403e8000
    303c:	401dc000 	.word	0x401dc000
    3040:	401e0000 	.word	0x401e0000
    3044:	401e4000 	.word	0x401e4000

00003048 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
    3048:	4770      	bx	lr
    304a:	bf00      	nop

0000304c <__errno>:
    304c:	4b01      	ldr	r3, [pc, #4]	; (3054 <__errno+0x8>)
    304e:	6818      	ldr	r0, [r3, #0]
    3050:	4770      	bx	lr
    3052:	bf00      	nop
    3054:	20000850 	.word	0x20000850

00003058 <__libc_init_array>:
    3058:	b570      	push	{r4, r5, r6, lr}
    305a:	4e0f      	ldr	r6, [pc, #60]	; (3098 <__libc_init_array+0x40>)
    305c:	4d0f      	ldr	r5, [pc, #60]	; (309c <__libc_init_array+0x44>)
    305e:	1b76      	subs	r6, r6, r5
    3060:	10b6      	asrs	r6, r6, #2
    3062:	bf18      	it	ne
    3064:	2400      	movne	r4, #0
    3066:	d005      	beq.n	3074 <__libc_init_array+0x1c>
    3068:	3401      	adds	r4, #1
    306a:	f855 3b04 	ldr.w	r3, [r5], #4
    306e:	4798      	blx	r3
    3070:	42a6      	cmp	r6, r4
    3072:	d1f9      	bne.n	3068 <__libc_init_array+0x10>
    3074:	4e0a      	ldr	r6, [pc, #40]	; (30a0 <__libc_init_array+0x48>)
    3076:	4d0b      	ldr	r5, [pc, #44]	; (30a4 <__libc_init_array+0x4c>)
    3078:	1b76      	subs	r6, r6, r5
    307a:	f000 fc71 	bl	3960 <___init_veneer>
    307e:	10b6      	asrs	r6, r6, #2
    3080:	bf18      	it	ne
    3082:	2400      	movne	r4, #0
    3084:	d006      	beq.n	3094 <__libc_init_array+0x3c>
    3086:	3401      	adds	r4, #1
    3088:	f855 3b04 	ldr.w	r3, [r5], #4
    308c:	4798      	blx	r3
    308e:	42a6      	cmp	r6, r4
    3090:	d1f9      	bne.n	3086 <__libc_init_array+0x2e>
    3092:	bd70      	pop	{r4, r5, r6, pc}
    3094:	bd70      	pop	{r4, r5, r6, pc}
    3096:	bf00      	nop
    3098:	60001780 	.word	0x60001780
    309c:	60001780 	.word	0x60001780
    30a0:	6000178c 	.word	0x6000178c
    30a4:	60001780 	.word	0x60001780

000030a8 <malloc>:
    30a8:	4b02      	ldr	r3, [pc, #8]	; (30b4 <malloc+0xc>)
    30aa:	4601      	mov	r1, r0
    30ac:	6818      	ldr	r0, [r3, #0]
    30ae:	f000 b803 	b.w	30b8 <_malloc_r>
    30b2:	bf00      	nop
    30b4:	20000850 	.word	0x20000850

000030b8 <_malloc_r>:
    30b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    30bc:	f101 050b 	add.w	r5, r1, #11
    30c0:	2d16      	cmp	r5, #22
    30c2:	b083      	sub	sp, #12
    30c4:	4606      	mov	r6, r0
    30c6:	f240 809f 	bls.w	3208 <_malloc_r+0x150>
    30ca:	f035 0507 	bics.w	r5, r5, #7
    30ce:	f100 80bf 	bmi.w	3250 <_malloc_r+0x198>
    30d2:	42a9      	cmp	r1, r5
    30d4:	f200 80bc 	bhi.w	3250 <_malloc_r+0x198>
    30d8:	f000 faf4 	bl	36c4 <__malloc_lock>
    30dc:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
    30e0:	f0c0 829c 	bcc.w	361c <_malloc_r+0x564>
    30e4:	0a6b      	lsrs	r3, r5, #9
    30e6:	f000 80ba 	beq.w	325e <_malloc_r+0x1a6>
    30ea:	2b04      	cmp	r3, #4
    30ec:	f200 8183 	bhi.w	33f6 <_malloc_r+0x33e>
    30f0:	09a8      	lsrs	r0, r5, #6
    30f2:	f100 0e39 	add.w	lr, r0, #57	; 0x39
    30f6:	ea4f 034e 	mov.w	r3, lr, lsl #1
    30fa:	3038      	adds	r0, #56	; 0x38
    30fc:	4fc4      	ldr	r7, [pc, #784]	; (3410 <_malloc_r+0x358>)
    30fe:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    3102:	f1a3 0108 	sub.w	r1, r3, #8
    3106:	685c      	ldr	r4, [r3, #4]
    3108:	42a1      	cmp	r1, r4
    310a:	d107      	bne.n	311c <_malloc_r+0x64>
    310c:	e0ac      	b.n	3268 <_malloc_r+0x1b0>
    310e:	2a00      	cmp	r2, #0
    3110:	f280 80ac 	bge.w	326c <_malloc_r+0x1b4>
    3114:	68e4      	ldr	r4, [r4, #12]
    3116:	42a1      	cmp	r1, r4
    3118:	f000 80a6 	beq.w	3268 <_malloc_r+0x1b0>
    311c:	6863      	ldr	r3, [r4, #4]
    311e:	f023 0303 	bic.w	r3, r3, #3
    3122:	1b5a      	subs	r2, r3, r5
    3124:	2a0f      	cmp	r2, #15
    3126:	ddf2      	ble.n	310e <_malloc_r+0x56>
    3128:	49b9      	ldr	r1, [pc, #740]	; (3410 <_malloc_r+0x358>)
    312a:	693c      	ldr	r4, [r7, #16]
    312c:	f101 0e08 	add.w	lr, r1, #8
    3130:	4574      	cmp	r4, lr
    3132:	f000 81b3 	beq.w	349c <_malloc_r+0x3e4>
    3136:	6863      	ldr	r3, [r4, #4]
    3138:	f023 0303 	bic.w	r3, r3, #3
    313c:	1b5a      	subs	r2, r3, r5
    313e:	2a0f      	cmp	r2, #15
    3140:	f300 8199 	bgt.w	3476 <_malloc_r+0x3be>
    3144:	2a00      	cmp	r2, #0
    3146:	f8c1 e014 	str.w	lr, [r1, #20]
    314a:	f8c1 e010 	str.w	lr, [r1, #16]
    314e:	f280 809e 	bge.w	328e <_malloc_r+0x1d6>
    3152:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    3156:	f080 8167 	bcs.w	3428 <_malloc_r+0x370>
    315a:	08db      	lsrs	r3, r3, #3
    315c:	f103 0c01 	add.w	ip, r3, #1
    3160:	2201      	movs	r2, #1
    3162:	109b      	asrs	r3, r3, #2
    3164:	fa02 f303 	lsl.w	r3, r2, r3
    3168:	684a      	ldr	r2, [r1, #4]
    316a:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
    316e:	f8c4 8008 	str.w	r8, [r4, #8]
    3172:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
    3176:	431a      	orrs	r2, r3
    3178:	f1a9 0308 	sub.w	r3, r9, #8
    317c:	60e3      	str	r3, [r4, #12]
    317e:	604a      	str	r2, [r1, #4]
    3180:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
    3184:	f8c8 400c 	str.w	r4, [r8, #12]
    3188:	1083      	asrs	r3, r0, #2
    318a:	2401      	movs	r4, #1
    318c:	409c      	lsls	r4, r3
    318e:	4294      	cmp	r4, r2
    3190:	f200 808a 	bhi.w	32a8 <_malloc_r+0x1f0>
    3194:	4214      	tst	r4, r2
    3196:	d106      	bne.n	31a6 <_malloc_r+0xee>
    3198:	f020 0003 	bic.w	r0, r0, #3
    319c:	0064      	lsls	r4, r4, #1
    319e:	4214      	tst	r4, r2
    31a0:	f100 0004 	add.w	r0, r0, #4
    31a4:	d0fa      	beq.n	319c <_malloc_r+0xe4>
    31a6:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    31aa:	46cc      	mov	ip, r9
    31ac:	4680      	mov	r8, r0
    31ae:	f8dc 100c 	ldr.w	r1, [ip, #12]
    31b2:	458c      	cmp	ip, r1
    31b4:	d107      	bne.n	31c6 <_malloc_r+0x10e>
    31b6:	e173      	b.n	34a0 <_malloc_r+0x3e8>
    31b8:	2a00      	cmp	r2, #0
    31ba:	f280 8181 	bge.w	34c0 <_malloc_r+0x408>
    31be:	68c9      	ldr	r1, [r1, #12]
    31c0:	458c      	cmp	ip, r1
    31c2:	f000 816d 	beq.w	34a0 <_malloc_r+0x3e8>
    31c6:	684b      	ldr	r3, [r1, #4]
    31c8:	f023 0303 	bic.w	r3, r3, #3
    31cc:	1b5a      	subs	r2, r3, r5
    31ce:	2a0f      	cmp	r2, #15
    31d0:	ddf2      	ble.n	31b8 <_malloc_r+0x100>
    31d2:	460c      	mov	r4, r1
    31d4:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    31d8:	f854 8f08 	ldr.w	r8, [r4, #8]!
    31dc:	194b      	adds	r3, r1, r5
    31de:	f045 0501 	orr.w	r5, r5, #1
    31e2:	604d      	str	r5, [r1, #4]
    31e4:	f042 0101 	orr.w	r1, r2, #1
    31e8:	f8c8 c00c 	str.w	ip, [r8, #12]
    31ec:	4630      	mov	r0, r6
    31ee:	f8cc 8008 	str.w	r8, [ip, #8]
    31f2:	617b      	str	r3, [r7, #20]
    31f4:	613b      	str	r3, [r7, #16]
    31f6:	f8c3 e00c 	str.w	lr, [r3, #12]
    31fa:	f8c3 e008 	str.w	lr, [r3, #8]
    31fe:	6059      	str	r1, [r3, #4]
    3200:	509a      	str	r2, [r3, r2]
    3202:	f000 fa61 	bl	36c8 <__malloc_unlock>
    3206:	e01f      	b.n	3248 <_malloc_r+0x190>
    3208:	2910      	cmp	r1, #16
    320a:	d821      	bhi.n	3250 <_malloc_r+0x198>
    320c:	f000 fa5a 	bl	36c4 <__malloc_lock>
    3210:	2510      	movs	r5, #16
    3212:	2306      	movs	r3, #6
    3214:	2002      	movs	r0, #2
    3216:	4f7e      	ldr	r7, [pc, #504]	; (3410 <_malloc_r+0x358>)
    3218:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    321c:	f1a3 0208 	sub.w	r2, r3, #8
    3220:	685c      	ldr	r4, [r3, #4]
    3222:	4294      	cmp	r4, r2
    3224:	f000 8145 	beq.w	34b2 <_malloc_r+0x3fa>
    3228:	6863      	ldr	r3, [r4, #4]
    322a:	68e1      	ldr	r1, [r4, #12]
    322c:	68a5      	ldr	r5, [r4, #8]
    322e:	f023 0303 	bic.w	r3, r3, #3
    3232:	4423      	add	r3, r4
    3234:	4630      	mov	r0, r6
    3236:	685a      	ldr	r2, [r3, #4]
    3238:	60e9      	str	r1, [r5, #12]
    323a:	f042 0201 	orr.w	r2, r2, #1
    323e:	608d      	str	r5, [r1, #8]
    3240:	605a      	str	r2, [r3, #4]
    3242:	f000 fa41 	bl	36c8 <__malloc_unlock>
    3246:	3408      	adds	r4, #8
    3248:	4620      	mov	r0, r4
    324a:	b003      	add	sp, #12
    324c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3250:	2400      	movs	r4, #0
    3252:	230c      	movs	r3, #12
    3254:	4620      	mov	r0, r4
    3256:	6033      	str	r3, [r6, #0]
    3258:	b003      	add	sp, #12
    325a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    325e:	2380      	movs	r3, #128	; 0x80
    3260:	f04f 0e40 	mov.w	lr, #64	; 0x40
    3264:	203f      	movs	r0, #63	; 0x3f
    3266:	e749      	b.n	30fc <_malloc_r+0x44>
    3268:	4670      	mov	r0, lr
    326a:	e75d      	b.n	3128 <_malloc_r+0x70>
    326c:	4423      	add	r3, r4
    326e:	68e1      	ldr	r1, [r4, #12]
    3270:	685a      	ldr	r2, [r3, #4]
    3272:	68a5      	ldr	r5, [r4, #8]
    3274:	f042 0201 	orr.w	r2, r2, #1
    3278:	60e9      	str	r1, [r5, #12]
    327a:	4630      	mov	r0, r6
    327c:	608d      	str	r5, [r1, #8]
    327e:	605a      	str	r2, [r3, #4]
    3280:	f000 fa22 	bl	36c8 <__malloc_unlock>
    3284:	3408      	adds	r4, #8
    3286:	4620      	mov	r0, r4
    3288:	b003      	add	sp, #12
    328a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    328e:	4423      	add	r3, r4
    3290:	4630      	mov	r0, r6
    3292:	685a      	ldr	r2, [r3, #4]
    3294:	f042 0201 	orr.w	r2, r2, #1
    3298:	605a      	str	r2, [r3, #4]
    329a:	f000 fa15 	bl	36c8 <__malloc_unlock>
    329e:	3408      	adds	r4, #8
    32a0:	4620      	mov	r0, r4
    32a2:	b003      	add	sp, #12
    32a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    32a8:	68bc      	ldr	r4, [r7, #8]
    32aa:	6863      	ldr	r3, [r4, #4]
    32ac:	f023 0803 	bic.w	r8, r3, #3
    32b0:	45a8      	cmp	r8, r5
    32b2:	d304      	bcc.n	32be <_malloc_r+0x206>
    32b4:	ebc5 0308 	rsb	r3, r5, r8
    32b8:	2b0f      	cmp	r3, #15
    32ba:	f300 808c 	bgt.w	33d6 <_malloc_r+0x31e>
    32be:	4b55      	ldr	r3, [pc, #340]	; (3414 <_malloc_r+0x35c>)
    32c0:	f8df 9160 	ldr.w	r9, [pc, #352]	; 3424 <_malloc_r+0x36c>
    32c4:	681a      	ldr	r2, [r3, #0]
    32c6:	f8d9 3000 	ldr.w	r3, [r9]
    32ca:	3301      	adds	r3, #1
    32cc:	442a      	add	r2, r5
    32ce:	eb04 0a08 	add.w	sl, r4, r8
    32d2:	f000 8160 	beq.w	3596 <_malloc_r+0x4de>
    32d6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    32da:	320f      	adds	r2, #15
    32dc:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
    32e0:	f022 020f 	bic.w	r2, r2, #15
    32e4:	4611      	mov	r1, r2
    32e6:	4630      	mov	r0, r6
    32e8:	9201      	str	r2, [sp, #4]
    32ea:	f000 f9ef 	bl	36cc <_sbrk_r>
    32ee:	f1b0 3fff 	cmp.w	r0, #4294967295
    32f2:	4683      	mov	fp, r0
    32f4:	9a01      	ldr	r2, [sp, #4]
    32f6:	f000 8158 	beq.w	35aa <_malloc_r+0x4f2>
    32fa:	4582      	cmp	sl, r0
    32fc:	f200 80fc 	bhi.w	34f8 <_malloc_r+0x440>
    3300:	4b45      	ldr	r3, [pc, #276]	; (3418 <_malloc_r+0x360>)
    3302:	6819      	ldr	r1, [r3, #0]
    3304:	45da      	cmp	sl, fp
    3306:	4411      	add	r1, r2
    3308:	6019      	str	r1, [r3, #0]
    330a:	f000 8153 	beq.w	35b4 <_malloc_r+0x4fc>
    330e:	f8d9 0000 	ldr.w	r0, [r9]
    3312:	f8df e110 	ldr.w	lr, [pc, #272]	; 3424 <_malloc_r+0x36c>
    3316:	3001      	adds	r0, #1
    3318:	bf1b      	ittet	ne
    331a:	ebca 0a0b 	rsbne	sl, sl, fp
    331e:	4451      	addne	r1, sl
    3320:	f8ce b000 	streq.w	fp, [lr]
    3324:	6019      	strne	r1, [r3, #0]
    3326:	f01b 0107 	ands.w	r1, fp, #7
    332a:	f000 8117 	beq.w	355c <_malloc_r+0x4a4>
    332e:	f1c1 0008 	rsb	r0, r1, #8
    3332:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
    3336:	4483      	add	fp, r0
    3338:	3108      	adds	r1, #8
    333a:	445a      	add	r2, fp
    333c:	f3c2 020b 	ubfx	r2, r2, #0, #12
    3340:	ebc2 0901 	rsb	r9, r2, r1
    3344:	4649      	mov	r1, r9
    3346:	4630      	mov	r0, r6
    3348:	9301      	str	r3, [sp, #4]
    334a:	f000 f9bf 	bl	36cc <_sbrk_r>
    334e:	1c43      	adds	r3, r0, #1
    3350:	9b01      	ldr	r3, [sp, #4]
    3352:	f000 813f 	beq.w	35d4 <_malloc_r+0x51c>
    3356:	ebcb 0200 	rsb	r2, fp, r0
    335a:	444a      	add	r2, r9
    335c:	f042 0201 	orr.w	r2, r2, #1
    3360:	6819      	ldr	r1, [r3, #0]
    3362:	f8c7 b008 	str.w	fp, [r7, #8]
    3366:	4449      	add	r1, r9
    3368:	42bc      	cmp	r4, r7
    336a:	f8cb 2004 	str.w	r2, [fp, #4]
    336e:	6019      	str	r1, [r3, #0]
    3370:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 3418 <_malloc_r+0x360>
    3374:	d016      	beq.n	33a4 <_malloc_r+0x2ec>
    3376:	f1b8 0f0f 	cmp.w	r8, #15
    337a:	f240 80fd 	bls.w	3578 <_malloc_r+0x4c0>
    337e:	6862      	ldr	r2, [r4, #4]
    3380:	f1a8 030c 	sub.w	r3, r8, #12
    3384:	f023 0307 	bic.w	r3, r3, #7
    3388:	18e0      	adds	r0, r4, r3
    338a:	f002 0201 	and.w	r2, r2, #1
    338e:	f04f 0e05 	mov.w	lr, #5
    3392:	431a      	orrs	r2, r3
    3394:	2b0f      	cmp	r3, #15
    3396:	6062      	str	r2, [r4, #4]
    3398:	f8c0 e004 	str.w	lr, [r0, #4]
    339c:	f8c0 e008 	str.w	lr, [r0, #8]
    33a0:	f200 811c 	bhi.w	35dc <_malloc_r+0x524>
    33a4:	4b1d      	ldr	r3, [pc, #116]	; (341c <_malloc_r+0x364>)
    33a6:	68bc      	ldr	r4, [r7, #8]
    33a8:	681a      	ldr	r2, [r3, #0]
    33aa:	4291      	cmp	r1, r2
    33ac:	bf88      	it	hi
    33ae:	6019      	strhi	r1, [r3, #0]
    33b0:	4b1b      	ldr	r3, [pc, #108]	; (3420 <_malloc_r+0x368>)
    33b2:	681a      	ldr	r2, [r3, #0]
    33b4:	4291      	cmp	r1, r2
    33b6:	6862      	ldr	r2, [r4, #4]
    33b8:	bf88      	it	hi
    33ba:	6019      	strhi	r1, [r3, #0]
    33bc:	f022 0203 	bic.w	r2, r2, #3
    33c0:	4295      	cmp	r5, r2
    33c2:	eba2 0305 	sub.w	r3, r2, r5
    33c6:	d801      	bhi.n	33cc <_malloc_r+0x314>
    33c8:	2b0f      	cmp	r3, #15
    33ca:	dc04      	bgt.n	33d6 <_malloc_r+0x31e>
    33cc:	4630      	mov	r0, r6
    33ce:	f000 f97b 	bl	36c8 <__malloc_unlock>
    33d2:	2400      	movs	r4, #0
    33d4:	e738      	b.n	3248 <_malloc_r+0x190>
    33d6:	1962      	adds	r2, r4, r5
    33d8:	f043 0301 	orr.w	r3, r3, #1
    33dc:	f045 0501 	orr.w	r5, r5, #1
    33e0:	6065      	str	r5, [r4, #4]
    33e2:	4630      	mov	r0, r6
    33e4:	60ba      	str	r2, [r7, #8]
    33e6:	6053      	str	r3, [r2, #4]
    33e8:	f000 f96e 	bl	36c8 <__malloc_unlock>
    33ec:	3408      	adds	r4, #8
    33ee:	4620      	mov	r0, r4
    33f0:	b003      	add	sp, #12
    33f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    33f6:	2b14      	cmp	r3, #20
    33f8:	d971      	bls.n	34de <_malloc_r+0x426>
    33fa:	2b54      	cmp	r3, #84	; 0x54
    33fc:	f200 80a4 	bhi.w	3548 <_malloc_r+0x490>
    3400:	0b28      	lsrs	r0, r5, #12
    3402:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
    3406:	ea4f 034e 	mov.w	r3, lr, lsl #1
    340a:	306e      	adds	r0, #110	; 0x6e
    340c:	e676      	b.n	30fc <_malloc_r+0x44>
    340e:	bf00      	nop
    3410:	20000854 	.word	0x20000854
    3414:	20001100 	.word	0x20001100
    3418:	20001104 	.word	0x20001104
    341c:	200010fc 	.word	0x200010fc
    3420:	200010f8 	.word	0x200010f8
    3424:	20000c60 	.word	0x20000c60
    3428:	0a5a      	lsrs	r2, r3, #9
    342a:	2a04      	cmp	r2, #4
    342c:	d95e      	bls.n	34ec <_malloc_r+0x434>
    342e:	2a14      	cmp	r2, #20
    3430:	f200 80b3 	bhi.w	359a <_malloc_r+0x4e2>
    3434:	f102 015c 	add.w	r1, r2, #92	; 0x5c
    3438:	0049      	lsls	r1, r1, #1
    343a:	325b      	adds	r2, #91	; 0x5b
    343c:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
    3440:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
    3444:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 3624 <_malloc_r+0x56c>
    3448:	f1ac 0c08 	sub.w	ip, ip, #8
    344c:	458c      	cmp	ip, r1
    344e:	f000 8088 	beq.w	3562 <_malloc_r+0x4aa>
    3452:	684a      	ldr	r2, [r1, #4]
    3454:	f022 0203 	bic.w	r2, r2, #3
    3458:	4293      	cmp	r3, r2
    345a:	d202      	bcs.n	3462 <_malloc_r+0x3aa>
    345c:	6889      	ldr	r1, [r1, #8]
    345e:	458c      	cmp	ip, r1
    3460:	d1f7      	bne.n	3452 <_malloc_r+0x39a>
    3462:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    3466:	687a      	ldr	r2, [r7, #4]
    3468:	f8c4 c00c 	str.w	ip, [r4, #12]
    346c:	60a1      	str	r1, [r4, #8]
    346e:	f8cc 4008 	str.w	r4, [ip, #8]
    3472:	60cc      	str	r4, [r1, #12]
    3474:	e688      	b.n	3188 <_malloc_r+0xd0>
    3476:	1963      	adds	r3, r4, r5
    3478:	f042 0701 	orr.w	r7, r2, #1
    347c:	f045 0501 	orr.w	r5, r5, #1
    3480:	6065      	str	r5, [r4, #4]
    3482:	4630      	mov	r0, r6
    3484:	614b      	str	r3, [r1, #20]
    3486:	610b      	str	r3, [r1, #16]
    3488:	f8c3 e00c 	str.w	lr, [r3, #12]
    348c:	f8c3 e008 	str.w	lr, [r3, #8]
    3490:	605f      	str	r7, [r3, #4]
    3492:	509a      	str	r2, [r3, r2]
    3494:	3408      	adds	r4, #8
    3496:	f000 f917 	bl	36c8 <__malloc_unlock>
    349a:	e6d5      	b.n	3248 <_malloc_r+0x190>
    349c:	684a      	ldr	r2, [r1, #4]
    349e:	e673      	b.n	3188 <_malloc_r+0xd0>
    34a0:	f108 0801 	add.w	r8, r8, #1
    34a4:	f018 0f03 	tst.w	r8, #3
    34a8:	f10c 0c08 	add.w	ip, ip, #8
    34ac:	f47f ae7f 	bne.w	31ae <_malloc_r+0xf6>
    34b0:	e030      	b.n	3514 <_malloc_r+0x45c>
    34b2:	68dc      	ldr	r4, [r3, #12]
    34b4:	42a3      	cmp	r3, r4
    34b6:	bf08      	it	eq
    34b8:	3002      	addeq	r0, #2
    34ba:	f43f ae35 	beq.w	3128 <_malloc_r+0x70>
    34be:	e6b3      	b.n	3228 <_malloc_r+0x170>
    34c0:	440b      	add	r3, r1
    34c2:	460c      	mov	r4, r1
    34c4:	685a      	ldr	r2, [r3, #4]
    34c6:	68c9      	ldr	r1, [r1, #12]
    34c8:	f854 5f08 	ldr.w	r5, [r4, #8]!
    34cc:	f042 0201 	orr.w	r2, r2, #1
    34d0:	605a      	str	r2, [r3, #4]
    34d2:	4630      	mov	r0, r6
    34d4:	60e9      	str	r1, [r5, #12]
    34d6:	608d      	str	r5, [r1, #8]
    34d8:	f000 f8f6 	bl	36c8 <__malloc_unlock>
    34dc:	e6b4      	b.n	3248 <_malloc_r+0x190>
    34de:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
    34e2:	f103 005b 	add.w	r0, r3, #91	; 0x5b
    34e6:	ea4f 034e 	mov.w	r3, lr, lsl #1
    34ea:	e607      	b.n	30fc <_malloc_r+0x44>
    34ec:	099a      	lsrs	r2, r3, #6
    34ee:	f102 0139 	add.w	r1, r2, #57	; 0x39
    34f2:	0049      	lsls	r1, r1, #1
    34f4:	3238      	adds	r2, #56	; 0x38
    34f6:	e7a1      	b.n	343c <_malloc_r+0x384>
    34f8:	42bc      	cmp	r4, r7
    34fa:	4b4a      	ldr	r3, [pc, #296]	; (3624 <_malloc_r+0x56c>)
    34fc:	f43f af00 	beq.w	3300 <_malloc_r+0x248>
    3500:	689c      	ldr	r4, [r3, #8]
    3502:	6862      	ldr	r2, [r4, #4]
    3504:	f022 0203 	bic.w	r2, r2, #3
    3508:	e75a      	b.n	33c0 <_malloc_r+0x308>
    350a:	f859 3908 	ldr.w	r3, [r9], #-8
    350e:	4599      	cmp	r9, r3
    3510:	f040 8082 	bne.w	3618 <_malloc_r+0x560>
    3514:	f010 0f03 	tst.w	r0, #3
    3518:	f100 30ff 	add.w	r0, r0, #4294967295
    351c:	d1f5      	bne.n	350a <_malloc_r+0x452>
    351e:	687b      	ldr	r3, [r7, #4]
    3520:	ea23 0304 	bic.w	r3, r3, r4
    3524:	607b      	str	r3, [r7, #4]
    3526:	0064      	lsls	r4, r4, #1
    3528:	429c      	cmp	r4, r3
    352a:	f63f aebd 	bhi.w	32a8 <_malloc_r+0x1f0>
    352e:	2c00      	cmp	r4, #0
    3530:	f43f aeba 	beq.w	32a8 <_malloc_r+0x1f0>
    3534:	421c      	tst	r4, r3
    3536:	4640      	mov	r0, r8
    3538:	f47f ae35 	bne.w	31a6 <_malloc_r+0xee>
    353c:	0064      	lsls	r4, r4, #1
    353e:	421c      	tst	r4, r3
    3540:	f100 0004 	add.w	r0, r0, #4
    3544:	d0fa      	beq.n	353c <_malloc_r+0x484>
    3546:	e62e      	b.n	31a6 <_malloc_r+0xee>
    3548:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    354c:	d818      	bhi.n	3580 <_malloc_r+0x4c8>
    354e:	0be8      	lsrs	r0, r5, #15
    3550:	f100 0e78 	add.w	lr, r0, #120	; 0x78
    3554:	ea4f 034e 	mov.w	r3, lr, lsl #1
    3558:	3077      	adds	r0, #119	; 0x77
    355a:	e5cf      	b.n	30fc <_malloc_r+0x44>
    355c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    3560:	e6eb      	b.n	333a <_malloc_r+0x282>
    3562:	2101      	movs	r1, #1
    3564:	f8d8 3004 	ldr.w	r3, [r8, #4]
    3568:	1092      	asrs	r2, r2, #2
    356a:	fa01 f202 	lsl.w	r2, r1, r2
    356e:	431a      	orrs	r2, r3
    3570:	f8c8 2004 	str.w	r2, [r8, #4]
    3574:	4661      	mov	r1, ip
    3576:	e777      	b.n	3468 <_malloc_r+0x3b0>
    3578:	2301      	movs	r3, #1
    357a:	f8cb 3004 	str.w	r3, [fp, #4]
    357e:	e725      	b.n	33cc <_malloc_r+0x314>
    3580:	f240 5254 	movw	r2, #1364	; 0x554
    3584:	4293      	cmp	r3, r2
    3586:	d820      	bhi.n	35ca <_malloc_r+0x512>
    3588:	0ca8      	lsrs	r0, r5, #18
    358a:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
    358e:	ea4f 034e 	mov.w	r3, lr, lsl #1
    3592:	307c      	adds	r0, #124	; 0x7c
    3594:	e5b2      	b.n	30fc <_malloc_r+0x44>
    3596:	3210      	adds	r2, #16
    3598:	e6a4      	b.n	32e4 <_malloc_r+0x22c>
    359a:	2a54      	cmp	r2, #84	; 0x54
    359c:	d826      	bhi.n	35ec <_malloc_r+0x534>
    359e:	0b1a      	lsrs	r2, r3, #12
    35a0:	f102 016f 	add.w	r1, r2, #111	; 0x6f
    35a4:	0049      	lsls	r1, r1, #1
    35a6:	326e      	adds	r2, #110	; 0x6e
    35a8:	e748      	b.n	343c <_malloc_r+0x384>
    35aa:	68bc      	ldr	r4, [r7, #8]
    35ac:	6862      	ldr	r2, [r4, #4]
    35ae:	f022 0203 	bic.w	r2, r2, #3
    35b2:	e705      	b.n	33c0 <_malloc_r+0x308>
    35b4:	f3ca 000b 	ubfx	r0, sl, #0, #12
    35b8:	2800      	cmp	r0, #0
    35ba:	f47f aea8 	bne.w	330e <_malloc_r+0x256>
    35be:	4442      	add	r2, r8
    35c0:	68bb      	ldr	r3, [r7, #8]
    35c2:	f042 0201 	orr.w	r2, r2, #1
    35c6:	605a      	str	r2, [r3, #4]
    35c8:	e6ec      	b.n	33a4 <_malloc_r+0x2ec>
    35ca:	23fe      	movs	r3, #254	; 0xfe
    35cc:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
    35d0:	207e      	movs	r0, #126	; 0x7e
    35d2:	e593      	b.n	30fc <_malloc_r+0x44>
    35d4:	2201      	movs	r2, #1
    35d6:	f04f 0900 	mov.w	r9, #0
    35da:	e6c1      	b.n	3360 <_malloc_r+0x2a8>
    35dc:	f104 0108 	add.w	r1, r4, #8
    35e0:	4630      	mov	r0, r6
    35e2:	f000 f8d3 	bl	378c <_free_r>
    35e6:	f8d9 1000 	ldr.w	r1, [r9]
    35ea:	e6db      	b.n	33a4 <_malloc_r+0x2ec>
    35ec:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    35f0:	d805      	bhi.n	35fe <_malloc_r+0x546>
    35f2:	0bda      	lsrs	r2, r3, #15
    35f4:	f102 0178 	add.w	r1, r2, #120	; 0x78
    35f8:	0049      	lsls	r1, r1, #1
    35fa:	3277      	adds	r2, #119	; 0x77
    35fc:	e71e      	b.n	343c <_malloc_r+0x384>
    35fe:	f240 5154 	movw	r1, #1364	; 0x554
    3602:	428a      	cmp	r2, r1
    3604:	d805      	bhi.n	3612 <_malloc_r+0x55a>
    3606:	0c9a      	lsrs	r2, r3, #18
    3608:	f102 017d 	add.w	r1, r2, #125	; 0x7d
    360c:	0049      	lsls	r1, r1, #1
    360e:	327c      	adds	r2, #124	; 0x7c
    3610:	e714      	b.n	343c <_malloc_r+0x384>
    3612:	21fe      	movs	r1, #254	; 0xfe
    3614:	227e      	movs	r2, #126	; 0x7e
    3616:	e711      	b.n	343c <_malloc_r+0x384>
    3618:	687b      	ldr	r3, [r7, #4]
    361a:	e784      	b.n	3526 <_malloc_r+0x46e>
    361c:	08e8      	lsrs	r0, r5, #3
    361e:	1c43      	adds	r3, r0, #1
    3620:	005b      	lsls	r3, r3, #1
    3622:	e5f8      	b.n	3216 <_malloc_r+0x15e>
    3624:	20000854 	.word	0x20000854

00003628 <memset>:
    3628:	b470      	push	{r4, r5, r6}
    362a:	0784      	lsls	r4, r0, #30
    362c:	d046      	beq.n	36bc <memset+0x94>
    362e:	1e54      	subs	r4, r2, #1
    3630:	2a00      	cmp	r2, #0
    3632:	d041      	beq.n	36b8 <memset+0x90>
    3634:	b2cd      	uxtb	r5, r1
    3636:	4603      	mov	r3, r0
    3638:	e002      	b.n	3640 <memset+0x18>
    363a:	1e62      	subs	r2, r4, #1
    363c:	b3e4      	cbz	r4, 36b8 <memset+0x90>
    363e:	4614      	mov	r4, r2
    3640:	f803 5b01 	strb.w	r5, [r3], #1
    3644:	079a      	lsls	r2, r3, #30
    3646:	d1f8      	bne.n	363a <memset+0x12>
    3648:	2c03      	cmp	r4, #3
    364a:	d92e      	bls.n	36aa <memset+0x82>
    364c:	b2cd      	uxtb	r5, r1
    364e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    3652:	2c0f      	cmp	r4, #15
    3654:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    3658:	d919      	bls.n	368e <memset+0x66>
    365a:	f103 0210 	add.w	r2, r3, #16
    365e:	4626      	mov	r6, r4
    3660:	3e10      	subs	r6, #16
    3662:	2e0f      	cmp	r6, #15
    3664:	f842 5c10 	str.w	r5, [r2, #-16]
    3668:	f842 5c0c 	str.w	r5, [r2, #-12]
    366c:	f842 5c08 	str.w	r5, [r2, #-8]
    3670:	f842 5c04 	str.w	r5, [r2, #-4]
    3674:	f102 0210 	add.w	r2, r2, #16
    3678:	d8f2      	bhi.n	3660 <memset+0x38>
    367a:	f1a4 0210 	sub.w	r2, r4, #16
    367e:	f022 020f 	bic.w	r2, r2, #15
    3682:	f004 040f 	and.w	r4, r4, #15
    3686:	3210      	adds	r2, #16
    3688:	2c03      	cmp	r4, #3
    368a:	4413      	add	r3, r2
    368c:	d90d      	bls.n	36aa <memset+0x82>
    368e:	461e      	mov	r6, r3
    3690:	4622      	mov	r2, r4
    3692:	3a04      	subs	r2, #4
    3694:	2a03      	cmp	r2, #3
    3696:	f846 5b04 	str.w	r5, [r6], #4
    369a:	d8fa      	bhi.n	3692 <memset+0x6a>
    369c:	1f22      	subs	r2, r4, #4
    369e:	f022 0203 	bic.w	r2, r2, #3
    36a2:	3204      	adds	r2, #4
    36a4:	4413      	add	r3, r2
    36a6:	f004 0403 	and.w	r4, r4, #3
    36aa:	b12c      	cbz	r4, 36b8 <memset+0x90>
    36ac:	b2c9      	uxtb	r1, r1
    36ae:	441c      	add	r4, r3
    36b0:	f803 1b01 	strb.w	r1, [r3], #1
    36b4:	42a3      	cmp	r3, r4
    36b6:	d1fb      	bne.n	36b0 <memset+0x88>
    36b8:	bc70      	pop	{r4, r5, r6}
    36ba:	4770      	bx	lr
    36bc:	4614      	mov	r4, r2
    36be:	4603      	mov	r3, r0
    36c0:	e7c2      	b.n	3648 <memset+0x20>
    36c2:	bf00      	nop

000036c4 <__malloc_lock>:
    36c4:	4770      	bx	lr
    36c6:	bf00      	nop

000036c8 <__malloc_unlock>:
    36c8:	4770      	bx	lr
    36ca:	bf00      	nop

000036cc <_sbrk_r>:
    36cc:	b538      	push	{r3, r4, r5, lr}
    36ce:	4c07      	ldr	r4, [pc, #28]	; (36ec <_sbrk_r+0x20>)
    36d0:	2300      	movs	r3, #0
    36d2:	4605      	mov	r5, r0
    36d4:	4608      	mov	r0, r1
    36d6:	6023      	str	r3, [r4, #0]
    36d8:	f7fd ff56 	bl	1588 <_sbrk>
    36dc:	1c43      	adds	r3, r0, #1
    36de:	d000      	beq.n	36e2 <_sbrk_r+0x16>
    36e0:	bd38      	pop	{r3, r4, r5, pc}
    36e2:	6823      	ldr	r3, [r4, #0]
    36e4:	2b00      	cmp	r3, #0
    36e6:	d0fb      	beq.n	36e0 <_sbrk_r+0x14>
    36e8:	602b      	str	r3, [r5, #0]
    36ea:	bd38      	pop	{r3, r4, r5, pc}
    36ec:	2000328c 	.word	0x2000328c

000036f0 <_malloc_trim_r>:
    36f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    36f2:	4f23      	ldr	r7, [pc, #140]	; (3780 <_malloc_trim_r+0x90>)
    36f4:	460c      	mov	r4, r1
    36f6:	4606      	mov	r6, r0
    36f8:	f7ff ffe4 	bl	36c4 <__malloc_lock>
    36fc:	68bb      	ldr	r3, [r7, #8]
    36fe:	685d      	ldr	r5, [r3, #4]
    3700:	f025 0503 	bic.w	r5, r5, #3
    3704:	1b29      	subs	r1, r5, r4
    3706:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
    370a:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
    370e:	f021 010f 	bic.w	r1, r1, #15
    3712:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
    3716:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    371a:	db07      	blt.n	372c <_malloc_trim_r+0x3c>
    371c:	2100      	movs	r1, #0
    371e:	4630      	mov	r0, r6
    3720:	f7ff ffd4 	bl	36cc <_sbrk_r>
    3724:	68bb      	ldr	r3, [r7, #8]
    3726:	442b      	add	r3, r5
    3728:	4298      	cmp	r0, r3
    372a:	d004      	beq.n	3736 <_malloc_trim_r+0x46>
    372c:	4630      	mov	r0, r6
    372e:	f7ff ffcb 	bl	36c8 <__malloc_unlock>
    3732:	2000      	movs	r0, #0
    3734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3736:	4261      	negs	r1, r4
    3738:	4630      	mov	r0, r6
    373a:	f7ff ffc7 	bl	36cc <_sbrk_r>
    373e:	3001      	adds	r0, #1
    3740:	d00d      	beq.n	375e <_malloc_trim_r+0x6e>
    3742:	4b10      	ldr	r3, [pc, #64]	; (3784 <_malloc_trim_r+0x94>)
    3744:	68ba      	ldr	r2, [r7, #8]
    3746:	6819      	ldr	r1, [r3, #0]
    3748:	1b2d      	subs	r5, r5, r4
    374a:	f045 0501 	orr.w	r5, r5, #1
    374e:	4630      	mov	r0, r6
    3750:	1b09      	subs	r1, r1, r4
    3752:	6055      	str	r5, [r2, #4]
    3754:	6019      	str	r1, [r3, #0]
    3756:	f7ff ffb7 	bl	36c8 <__malloc_unlock>
    375a:	2001      	movs	r0, #1
    375c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    375e:	2100      	movs	r1, #0
    3760:	4630      	mov	r0, r6
    3762:	f7ff ffb3 	bl	36cc <_sbrk_r>
    3766:	68ba      	ldr	r2, [r7, #8]
    3768:	1a83      	subs	r3, r0, r2
    376a:	2b0f      	cmp	r3, #15
    376c:	ddde      	ble.n	372c <_malloc_trim_r+0x3c>
    376e:	4c06      	ldr	r4, [pc, #24]	; (3788 <_malloc_trim_r+0x98>)
    3770:	4904      	ldr	r1, [pc, #16]	; (3784 <_malloc_trim_r+0x94>)
    3772:	6824      	ldr	r4, [r4, #0]
    3774:	f043 0301 	orr.w	r3, r3, #1
    3778:	1b00      	subs	r0, r0, r4
    377a:	6053      	str	r3, [r2, #4]
    377c:	6008      	str	r0, [r1, #0]
    377e:	e7d5      	b.n	372c <_malloc_trim_r+0x3c>
    3780:	20000854 	.word	0x20000854
    3784:	20001104 	.word	0x20001104
    3788:	20000c60 	.word	0x20000c60

0000378c <_free_r>:
    378c:	2900      	cmp	r1, #0
    378e:	d045      	beq.n	381c <_free_r+0x90>
    3790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3794:	460d      	mov	r5, r1
    3796:	4680      	mov	r8, r0
    3798:	f7ff ff94 	bl	36c4 <__malloc_lock>
    379c:	f855 7c04 	ldr.w	r7, [r5, #-4]
    37a0:	496a      	ldr	r1, [pc, #424]	; (394c <_free_r+0x1c0>)
    37a2:	f027 0301 	bic.w	r3, r7, #1
    37a6:	f1a5 0408 	sub.w	r4, r5, #8
    37aa:	18e2      	adds	r2, r4, r3
    37ac:	688e      	ldr	r6, [r1, #8]
    37ae:	6850      	ldr	r0, [r2, #4]
    37b0:	42b2      	cmp	r2, r6
    37b2:	f020 0003 	bic.w	r0, r0, #3
    37b6:	d062      	beq.n	387e <_free_r+0xf2>
    37b8:	07fe      	lsls	r6, r7, #31
    37ba:	6050      	str	r0, [r2, #4]
    37bc:	d40b      	bmi.n	37d6 <_free_r+0x4a>
    37be:	f855 7c08 	ldr.w	r7, [r5, #-8]
    37c2:	1be4      	subs	r4, r4, r7
    37c4:	f101 0e08 	add.w	lr, r1, #8
    37c8:	68a5      	ldr	r5, [r4, #8]
    37ca:	4575      	cmp	r5, lr
    37cc:	443b      	add	r3, r7
    37ce:	d06f      	beq.n	38b0 <_free_r+0x124>
    37d0:	68e7      	ldr	r7, [r4, #12]
    37d2:	60ef      	str	r7, [r5, #12]
    37d4:	60bd      	str	r5, [r7, #8]
    37d6:	1815      	adds	r5, r2, r0
    37d8:	686d      	ldr	r5, [r5, #4]
    37da:	07ed      	lsls	r5, r5, #31
    37dc:	d542      	bpl.n	3864 <_free_r+0xd8>
    37de:	f043 0201 	orr.w	r2, r3, #1
    37e2:	6062      	str	r2, [r4, #4]
    37e4:	50e3      	str	r3, [r4, r3]
    37e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    37ea:	d218      	bcs.n	381e <_free_r+0x92>
    37ec:	08db      	lsrs	r3, r3, #3
    37ee:	1c5a      	adds	r2, r3, #1
    37f0:	684d      	ldr	r5, [r1, #4]
    37f2:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
    37f6:	60a7      	str	r7, [r4, #8]
    37f8:	2001      	movs	r0, #1
    37fa:	109b      	asrs	r3, r3, #2
    37fc:	fa00 f303 	lsl.w	r3, r0, r3
    3800:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
    3804:	431d      	orrs	r5, r3
    3806:	3808      	subs	r0, #8
    3808:	60e0      	str	r0, [r4, #12]
    380a:	604d      	str	r5, [r1, #4]
    380c:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
    3810:	60fc      	str	r4, [r7, #12]
    3812:	4640      	mov	r0, r8
    3814:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3818:	f7ff bf56 	b.w	36c8 <__malloc_unlock>
    381c:	4770      	bx	lr
    381e:	0a5a      	lsrs	r2, r3, #9
    3820:	2a04      	cmp	r2, #4
    3822:	d853      	bhi.n	38cc <_free_r+0x140>
    3824:	099a      	lsrs	r2, r3, #6
    3826:	f102 0739 	add.w	r7, r2, #57	; 0x39
    382a:	007f      	lsls	r7, r7, #1
    382c:	f102 0538 	add.w	r5, r2, #56	; 0x38
    3830:	eb01 0087 	add.w	r0, r1, r7, lsl #2
    3834:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
    3838:	4944      	ldr	r1, [pc, #272]	; (394c <_free_r+0x1c0>)
    383a:	3808      	subs	r0, #8
    383c:	4290      	cmp	r0, r2
    383e:	d04d      	beq.n	38dc <_free_r+0x150>
    3840:	6851      	ldr	r1, [r2, #4]
    3842:	f021 0103 	bic.w	r1, r1, #3
    3846:	428b      	cmp	r3, r1
    3848:	d202      	bcs.n	3850 <_free_r+0xc4>
    384a:	6892      	ldr	r2, [r2, #8]
    384c:	4290      	cmp	r0, r2
    384e:	d1f7      	bne.n	3840 <_free_r+0xb4>
    3850:	68d0      	ldr	r0, [r2, #12]
    3852:	60e0      	str	r0, [r4, #12]
    3854:	60a2      	str	r2, [r4, #8]
    3856:	6084      	str	r4, [r0, #8]
    3858:	60d4      	str	r4, [r2, #12]
    385a:	4640      	mov	r0, r8
    385c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3860:	f7ff bf32 	b.w	36c8 <__malloc_unlock>
    3864:	6895      	ldr	r5, [r2, #8]
    3866:	4f3a      	ldr	r7, [pc, #232]	; (3950 <_free_r+0x1c4>)
    3868:	42bd      	cmp	r5, r7
    386a:	4403      	add	r3, r0
    386c:	d03f      	beq.n	38ee <_free_r+0x162>
    386e:	68d0      	ldr	r0, [r2, #12]
    3870:	60e8      	str	r0, [r5, #12]
    3872:	f043 0201 	orr.w	r2, r3, #1
    3876:	6085      	str	r5, [r0, #8]
    3878:	6062      	str	r2, [r4, #4]
    387a:	50e3      	str	r3, [r4, r3]
    387c:	e7b3      	b.n	37e6 <_free_r+0x5a>
    387e:	07ff      	lsls	r7, r7, #31
    3880:	4403      	add	r3, r0
    3882:	d407      	bmi.n	3894 <_free_r+0x108>
    3884:	f855 2c08 	ldr.w	r2, [r5, #-8]
    3888:	1aa4      	subs	r4, r4, r2
    388a:	4413      	add	r3, r2
    388c:	68a0      	ldr	r0, [r4, #8]
    388e:	68e2      	ldr	r2, [r4, #12]
    3890:	60c2      	str	r2, [r0, #12]
    3892:	6090      	str	r0, [r2, #8]
    3894:	4a2f      	ldr	r2, [pc, #188]	; (3954 <_free_r+0x1c8>)
    3896:	6812      	ldr	r2, [r2, #0]
    3898:	f043 0001 	orr.w	r0, r3, #1
    389c:	4293      	cmp	r3, r2
    389e:	6060      	str	r0, [r4, #4]
    38a0:	608c      	str	r4, [r1, #8]
    38a2:	d3b6      	bcc.n	3812 <_free_r+0x86>
    38a4:	4b2c      	ldr	r3, [pc, #176]	; (3958 <_free_r+0x1cc>)
    38a6:	4640      	mov	r0, r8
    38a8:	6819      	ldr	r1, [r3, #0]
    38aa:	f7ff ff21 	bl	36f0 <_malloc_trim_r>
    38ae:	e7b0      	b.n	3812 <_free_r+0x86>
    38b0:	1811      	adds	r1, r2, r0
    38b2:	6849      	ldr	r1, [r1, #4]
    38b4:	07c9      	lsls	r1, r1, #31
    38b6:	d444      	bmi.n	3942 <_free_r+0x1b6>
    38b8:	6891      	ldr	r1, [r2, #8]
    38ba:	68d2      	ldr	r2, [r2, #12]
    38bc:	60ca      	str	r2, [r1, #12]
    38be:	4403      	add	r3, r0
    38c0:	f043 0001 	orr.w	r0, r3, #1
    38c4:	6091      	str	r1, [r2, #8]
    38c6:	6060      	str	r0, [r4, #4]
    38c8:	50e3      	str	r3, [r4, r3]
    38ca:	e7a2      	b.n	3812 <_free_r+0x86>
    38cc:	2a14      	cmp	r2, #20
    38ce:	d817      	bhi.n	3900 <_free_r+0x174>
    38d0:	f102 075c 	add.w	r7, r2, #92	; 0x5c
    38d4:	007f      	lsls	r7, r7, #1
    38d6:	f102 055b 	add.w	r5, r2, #91	; 0x5b
    38da:	e7a9      	b.n	3830 <_free_r+0xa4>
    38dc:	10aa      	asrs	r2, r5, #2
    38de:	684b      	ldr	r3, [r1, #4]
    38e0:	2501      	movs	r5, #1
    38e2:	fa05 f202 	lsl.w	r2, r5, r2
    38e6:	4313      	orrs	r3, r2
    38e8:	604b      	str	r3, [r1, #4]
    38ea:	4602      	mov	r2, r0
    38ec:	e7b1      	b.n	3852 <_free_r+0xc6>
    38ee:	f043 0201 	orr.w	r2, r3, #1
    38f2:	614c      	str	r4, [r1, #20]
    38f4:	610c      	str	r4, [r1, #16]
    38f6:	60e5      	str	r5, [r4, #12]
    38f8:	60a5      	str	r5, [r4, #8]
    38fa:	6062      	str	r2, [r4, #4]
    38fc:	50e3      	str	r3, [r4, r3]
    38fe:	e788      	b.n	3812 <_free_r+0x86>
    3900:	2a54      	cmp	r2, #84	; 0x54
    3902:	d806      	bhi.n	3912 <_free_r+0x186>
    3904:	0b1a      	lsrs	r2, r3, #12
    3906:	f102 076f 	add.w	r7, r2, #111	; 0x6f
    390a:	007f      	lsls	r7, r7, #1
    390c:	f102 056e 	add.w	r5, r2, #110	; 0x6e
    3910:	e78e      	b.n	3830 <_free_r+0xa4>
    3912:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    3916:	d806      	bhi.n	3926 <_free_r+0x19a>
    3918:	0bda      	lsrs	r2, r3, #15
    391a:	f102 0778 	add.w	r7, r2, #120	; 0x78
    391e:	007f      	lsls	r7, r7, #1
    3920:	f102 0577 	add.w	r5, r2, #119	; 0x77
    3924:	e784      	b.n	3830 <_free_r+0xa4>
    3926:	f240 5054 	movw	r0, #1364	; 0x554
    392a:	4282      	cmp	r2, r0
    392c:	d806      	bhi.n	393c <_free_r+0x1b0>
    392e:	0c9a      	lsrs	r2, r3, #18
    3930:	f102 077d 	add.w	r7, r2, #125	; 0x7d
    3934:	007f      	lsls	r7, r7, #1
    3936:	f102 057c 	add.w	r5, r2, #124	; 0x7c
    393a:	e779      	b.n	3830 <_free_r+0xa4>
    393c:	27fe      	movs	r7, #254	; 0xfe
    393e:	257e      	movs	r5, #126	; 0x7e
    3940:	e776      	b.n	3830 <_free_r+0xa4>
    3942:	f043 0201 	orr.w	r2, r3, #1
    3946:	6062      	str	r2, [r4, #4]
    3948:	50e3      	str	r3, [r4, r3]
    394a:	e762      	b.n	3812 <_free_r+0x86>
    394c:	20000854 	.word	0x20000854
    3950:	2000085c 	.word	0x2000085c
    3954:	20000c5c 	.word	0x20000c5c
    3958:	20001100 	.word	0x20001100
    395c:	00000000 	.word	0x00000000

00003960 <___init_veneer>:
    3960:	f85f f000 	ldr.w	pc, [pc]	; 3964 <___init_veneer+0x4>
    3964:	60001729 	.word	0x60001729
	...

Disassembly of section .fini:

00003970 <_fini>:
    3970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3972:	bf00      	nop
