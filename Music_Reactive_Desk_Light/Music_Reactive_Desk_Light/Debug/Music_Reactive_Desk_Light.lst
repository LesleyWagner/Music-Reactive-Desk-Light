
C:\Users\lesle\AppData\Local\Temp\VMBuilds\Music_Reactive_Desk_Light\teensy40\Debug/Music_Reactive_Desk_Light.ino.elf:     file format elf32-littlearm


Disassembly of section .text.progmem:

60000000 <FlexSPI_NOR_Config>:
60000000:	46 43 46 42 00 00 01 56 00 00 00 00 01 01 02 00     FCFB...V........
	...
60000044:	01 04 03 00 00 00 00 00 00 00 00 00 00 00 20 00     .............. .
	...
60000080:	eb 04 18 0a 06 32 04 26 00 00 00 00 00 00 00 00     .....2.&........
60000090:	05 04 04 24 00 00 00 00 00 00 00 00 00 00 00 00     ...$............
	...
600000b0:	06 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
600000d0:	20 04 18 08 00 00 00 00 00 00 00 00 00 00 00 00      ...............
	...
60000100:	d8 04 18 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
60000110:	02 04 18 08 04 20 00 00 00 00 00 00 00 00 00 00     ..... ..........
	...
60000130:	60 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     `...............
	...
600001c0:	00 01 00 00 00 10 00 00 01 00 00 00 00 00 00 00     ................
600001d0:	00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
60000200:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000210:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000220:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000230:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000240:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000250:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000260:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000270:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000280:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000290:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000300:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000310:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000320:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000330:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000340:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000350:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000360:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000370:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000380:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000390:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000400:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000410:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000420:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000430:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000440:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000450:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000460:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000470:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000480:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000490:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000500:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000510:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000520:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000530:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000540:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000550:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000560:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000570:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000580:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000590:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000600:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000610:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000620:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000630:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000640:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000650:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000660:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000670:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000680:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000690:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000700:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000710:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000720:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000730:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000740:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000750:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000760:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000770:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000780:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000790:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000800:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000810:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000820:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000830:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000840:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000850:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000860:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000870:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000880:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000890:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000900:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000910:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000920:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000930:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000940:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000950:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000960:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000970:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000980:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000990:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000aa0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ab0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ac0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ad0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ae0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000af0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ba0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000be0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bf0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ca0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ce0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cf0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000da0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000db0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000dc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000dd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000de0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000df0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ea0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000eb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ec0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ed0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ee0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ef0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fa0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fe0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ff0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................

60001000 <ImageVectorTable>:
60001000:	d1 00 20 40 2c 10 00 60 00 00 00 00 00 00 00 00     .. @,..`........
60001010:	20 10 00 60 00 10 00 60 00 00 00 00 00 00 00 00      ..`...`........

60001020 <BootData>:
60001020:	00 00 00 60 30 93 01 00 00 00 00 00                 ...`0.......

6000102c <vector_table>:
6000102c:	00 00 01 20 35 10 00 60                             ... 5..`

60001034 <ResetHandler>:
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001034:	4b76      	ldr	r3, [pc, #472]	; (60001210 <ResetHandler+0x1dc>)
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001036:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103a:	4a76      	ldr	r2, [pc, #472]	; (60001214 <ResetHandler+0x1e0>)
	IOMUXC_GPR_GPR16 = 0x00200007;
6000103c:	4876      	ldr	r0, [pc, #472]	; (60001218 <ResetHandler+0x1e4>)
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103e:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001040:	6418      	str	r0, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001042:	4a76      	ldr	r2, [pc, #472]	; (6000121c <ResetHandler+0x1e8>)
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001044:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001046:	4695      	mov	sp, r2
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001048:	4a75      	ldr	r2, [pc, #468]	; (60001220 <ResetHandler+0x1ec>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
6000104a:	f503 3330 	add.w	r3, r3, #180224	; 0x2c000
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
6000104e:	4975      	ldr	r1, [pc, #468]	; (60001224 <ResetHandler+0x1f0>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001050:	2008      	movs	r0, #8
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001052:	428a      	cmp	r2, r1
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001054:	f8c3 0154 	str.w	r0, [r3, #340]	; 0x154
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001058:	d00f      	beq.n	6000107a <ResetHandler+0x46>
	while (dest < dest_end) {
6000105a:	4b73      	ldr	r3, [pc, #460]	; (60001228 <ResetHandler+0x1f4>)
6000105c:	429a      	cmp	r2, r3
6000105e:	d20c      	bcs.n	6000107a <ResetHandler+0x46>
60001060:	43d4      	mvns	r4, r2
60001062:	4608      	mov	r0, r1
60001064:	4423      	add	r3, r4
60001066:	f023 0303 	bic.w	r3, r3, #3
6000106a:	3304      	adds	r3, #4
6000106c:	440b      	add	r3, r1
		*dest++ = *src++;
6000106e:	f850 1b04 	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001072:	4298      	cmp	r0, r3
		*dest++ = *src++;
60001074:	f842 1b04 	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001078:	d1f9      	bne.n	6000106e <ResetHandler+0x3a>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
6000107a:	4a6c      	ldr	r2, [pc, #432]	; (6000122c <ResetHandler+0x1f8>)
6000107c:	496c      	ldr	r1, [pc, #432]	; (60001230 <ResetHandler+0x1fc>)
6000107e:	428a      	cmp	r2, r1
60001080:	d00f      	beq.n	600010a2 <ResetHandler+0x6e>
	while (dest < dest_end) {
60001082:	4b6c      	ldr	r3, [pc, #432]	; (60001234 <ResetHandler+0x200>)
60001084:	429a      	cmp	r2, r3
60001086:	d20c      	bcs.n	600010a2 <ResetHandler+0x6e>
60001088:	43d4      	mvns	r4, r2
6000108a:	4608      	mov	r0, r1
6000108c:	4423      	add	r3, r4
6000108e:	f023 0303 	bic.w	r3, r3, #3
60001092:	3304      	adds	r3, #4
60001094:	440b      	add	r3, r1
		*dest++ = *src++;
60001096:	f850 1b04 	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
6000109a:	4298      	cmp	r0, r3
		*dest++ = *src++;
6000109c:	f842 1b04 	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
600010a0:	d1f9      	bne.n	60001096 <ResetHandler+0x62>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010a2:	4a65      	ldr	r2, [pc, #404]	; (60001238 <ResetHandler+0x204>)
600010a4:	4b65      	ldr	r3, [pc, #404]	; (6000123c <ResetHandler+0x208>)
600010a6:	429a      	cmp	r2, r3
600010a8:	d20b      	bcs.n	600010c2 <ResetHandler+0x8e>
600010aa:	43d0      	mvns	r0, r2
600010ac:	4611      	mov	r1, r2
		*dest++ = 0;
600010ae:	2400      	movs	r4, #0
600010b0:	4403      	add	r3, r0
600010b2:	f023 0303 	bic.w	r3, r3, #3
600010b6:	3304      	adds	r3, #4
600010b8:	4413      	add	r3, r2
600010ba:	f841 4b04 	str.w	r4, [r1], #4
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010be:	428b      	cmp	r3, r1
600010c0:	d1fb      	bne.n	600010ba <ResetHandler+0x86>
	memory_copy(&_stext, &_stextload, &_etext);
	memory_copy(&_sdata, &_sdataload, &_edata);
	memory_clear(&_sbss, &_ebss);

	// enable FPU
	SCB_CPACR = 0x00F00000;
600010c2:	4a5f      	ldr	r2, [pc, #380]	; (60001240 <ResetHandler+0x20c>)
600010c4:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
600010c8:	4b5e      	ldr	r3, [pc, #376]	; (60001244 <ResetHandler+0x210>)
600010ca:	6011      	str	r1, [r2, #0]
600010cc:	f503 7130 	add.w	r1, r3, #704	; 0x2c0
600010d0:	4a5d      	ldr	r2, [pc, #372]	; (60001248 <ResetHandler+0x214>)

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
600010d2:	f843 2f04 	str.w	r2, [r3, #4]!
600010d6:	4299      	cmp	r1, r3
600010d8:	d1fb      	bne.n	600010d2 <ResetHandler+0x9e>
600010da:	4b5c      	ldr	r3, [pc, #368]	; (6000124c <ResetHandler+0x218>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600010dc:	2180      	movs	r1, #128	; 0x80
600010de:	4a5c      	ldr	r2, [pc, #368]	; (60001250 <ResetHandler+0x21c>)
600010e0:	f803 1b01 	strb.w	r1, [r3], #1
600010e4:	4293      	cmp	r3, r2
600010e6:	d1fb      	bne.n	600010e0 <ResetHandler+0xac>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600010e8:	4c5a      	ldr	r4, [pc, #360]	; (60001254 <ResetHandler+0x220>)
600010ea:	f04f 3780 	mov.w	r7, #2155905152	; 0x80808080
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600010ee:	4e5a      	ldr	r6, [pc, #360]	; (60001258 <ResetHandler+0x224>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010f0:	f04f 32ff 	mov.w	r2, #4294967295
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010f4:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 60001298 <ResetHandler+0x264>
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
600010f8:	2500      	movs	r5, #0

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600010fa:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 6000129c <ResetHandler+0x268>
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600010fe:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 600012a0 <ResetHandler+0x26c>
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
60001102:	4b56      	ldr	r3, [pc, #344]	; (6000125c <ResetHandler+0x228>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001104:	4942      	ldr	r1, [pc, #264]	; (60001210 <ResetHandler+0x1dc>)
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
60001106:	f8c3 a000 	str.w	sl, [r3]
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
6000110a:	f8c4 7104 	str.w	r7, [r4, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000110e:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001112:	f8c4 70f4 	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001116:	f8c4 80f0 	str.w	r8, [r4, #240]	; 0xf0
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
6000111a:	69f3      	ldr	r3, [r6, #28]
6000111c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
60001120:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001124:	61f3      	str	r3, [r6, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
60001126:	6a73      	ldr	r3, [r6, #36]	; 0x24
60001128:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
6000112c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001130:	6273      	str	r3, [r6, #36]	; 0x24

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001132:	668a      	str	r2, [r1, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
60001134:	66ca      	str	r2, [r1, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001136:	670a      	str	r2, [r1, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001138:	674a      	str	r2, [r1, #116]	; 0x74
	// must enable PRINT_DEBUG_STUFF in debug/print.h
	printf_debug_init();
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
6000113a:	f000 f8b3 	bl	600012a4 <configure_cache>
extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000113e:	4a48      	ldr	r2, [pc, #288]	; (60001260 <ResetHandler+0x22c>)
60001140:	2063      	movs	r0, #99	; 0x63
	SYST_CVR = 0;
60001142:	4b48      	ldr	r3, [pc, #288]	; (60001264 <ResetHandler+0x230>)
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
60001144:	4948      	ldr	r1, [pc, #288]	; (60001268 <ResetHandler+0x234>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001146:	6010      	str	r0, [r2, #0]
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001148:	2203      	movs	r2, #3
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
6000114a:	601d      	str	r5, [r3, #0]
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
6000114c:	f8ca 1038 	str.w	r1, [sl, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001150:	f843 2c08 	str.w	r2, [r3, #-8]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001154:	4945      	ldr	r1, [pc, #276]	; (6000126c <ResetHandler+0x238>)
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001156:	4a46      	ldr	r2, [pc, #280]	; (60001270 <ResetHandler+0x23c>)

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
60001158:	4846      	ldr	r0, [pc, #280]	; (60001274 <ResetHandler+0x240>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000115a:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000115e:	680b      	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001160:	4a45      	ldr	r2, [pc, #276]	; (60001278 <ResetHandler+0x244>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001162:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
60001166:	f8ca 003c 	str.w	r0, [sl, #60]	; 0x3c
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000116a:	4844      	ldr	r0, [pc, #272]	; (6000127c <ResetHandler+0x248>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000116c:	600b      	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000116e:	6813      	ldr	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001170:	4943      	ldr	r1, [pc, #268]	; (60001280 <ResetHandler+0x24c>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001172:	f043 0301 	orr.w	r3, r3, #1
60001176:	6013      	str	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001178:	6803      	ldr	r3, [r0, #0]
6000117a:	600b      	str	r3, [r1, #0]
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
	configure_systick();
	usb_pll_start();	
6000117c:	f000 f90e 	bl	6000139c <usb_pll_start>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001180:	f8c4 7104 	str.w	r7, [r4, #260]	; 0x104
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001184:	483f      	ldr	r0, [pc, #252]	; (60001284 <ResetHandler+0x250>)

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001186:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000118a:	f8c4 70f4 	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000118e:	f8c4 80f0 	str.w	r8, [r4, #240]	; 0xf0
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001192:	f000 fad1 	bl	60001738 <__set_arm_clock_veneer>
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?
60001196:	bf00      	nop
60001198:	bf00      	nop
6000119a:	bf00      	nop
6000119c:	bf00      	nop

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000119e:	6ef1      	ldr	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
600011a0:	4a39      	ldr	r2, [pc, #228]	; (60001288 <ResetHandler+0x254>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
600011a2:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
	PIT_TCTRL1 = 0;
	PIT_TCTRL2 = 0;
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011a6:	4b39      	ldr	r3, [pc, #228]	; (6000128c <ResetHandler+0x258>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
600011a8:	66f1      	str	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
600011aa:	6015      	str	r5, [r2, #0]
	PIT_TCTRL0 = 0;
600011ac:	f8c2 5108 	str.w	r5, [r2, #264]	; 0x108
	PIT_TCTRL1 = 0;
600011b0:	f8c2 5118 	str.w	r5, [r2, #280]	; 0x118
	PIT_TCTRL2 = 0;
600011b4:	f8c2 5128 	str.w	r5, [r2, #296]	; 0x128
	PIT_TCTRL3 = 0;
600011b8:	f8c2 5138 	str.w	r5, [r2, #312]	; 0x138

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
600011be:	07d2      	lsls	r2, r2, #31
600011c0:	d408      	bmi.n	600011d4 <ResetHandler+0x1a0>
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011c2:	f642 6215 	movw	r2, #11797	; 0x2e15
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
600011c6:	4932      	ldr	r1, [pc, #200]	; (60001290 <ResetHandler+0x25c>)
600011c8:	6559      	str	r1, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011ca:	651a      	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
600011cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
600011ce:	f042 0201 	orr.w	r2, r2, #1
600011d2:	639a      	str	r2, [r3, #56]	; 0x38
	}
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600011d4:	4a2d      	ldr	r2, [pc, #180]	; (6000128c <ResetHandler+0x258>)
600011d6:	4c2f      	ldr	r4, [pc, #188]	; (60001294 <ResetHandler+0x260>)
600011d8:	6893      	ldr	r3, [r2, #8]
600011da:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
600011de:	6093      	str	r3, [r2, #8]

#ifdef ARDUINO_TEENSY41
	configure_external_ram();
#endif
	startup_early_hook();
600011e0:	f000 faae 	bl	60001740 <__startup_early_hook_veneer>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
600011e4:	6823      	ldr	r3, [r4, #0]
	while (millis() < 20) ; // wait at least 20ms before starting USB
600011e6:	2b13      	cmp	r3, #19
600011e8:	d9fc      	bls.n	600011e4 <ResetHandler+0x1b0>
	usb_init();
600011ea:	f000 f997 	bl	6000151c <usb_init>
	analog_init();
600011ee:	f000 fa0b 	bl	60001608 <analog_init>
	pwm_init();
600011f2:	f000 fab1 	bl	60001758 <__pwm_init_veneer>
	tempmon_init();
600011f6:	f000 f903 	bl	60001400 <tempmon_init>

	startup_late_hook();
600011fa:	f000 faa5 	bl	60001748 <__startup_late_hook_veneer>
600011fe:	6823      	ldr	r3, [r4, #0]
	while (millis() < 300) ; // wait at least 300ms before calling user code
60001200:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
60001204:	d3fb      	bcc.n	600011fe <ResetHandler+0x1ca>
	//printf("before C++ constructors\n");
	__libc_init_array();
60001206:	f000 faaf 	bl	60001768 <____libc_init_array_veneer>
	//printf("after C++ constructors\n");
	//printf("before setup\n");
	main();
6000120a:	f000 fab1 	bl	60001770 <__main_veneer>
6000120e:	e7fe      	b.n	6000120e <ResetHandler+0x1da>
60001210:	400ac000 	.word	0x400ac000
60001214:	aaaaaaab 	.word	0xaaaaaaab
60001218:	00200007 	.word	0x00200007
6000121c:	20078000 	.word	0x20078000
60001220:	00000000 	.word	0x00000000
60001224:	60001790 	.word	0x60001790
60001228:	000050b0 	.word	0x000050b0
6000122c:	20000000 	.word	0x20000000
60001230:	60006844 	.word	0x60006844
60001234:	20012af0 	.word	0x20012af0
60001238:	20012af0 	.word	0x20012af0
6000123c:	200252c0 	.word	0x200252c0
60001240:	e000ed88 	.word	0xe000ed88
60001244:	200233fc 	.word	0x200233fc
60001248:	0000253d 	.word	0x0000253d
6000124c:	e000e400 	.word	0xe000e400
60001250:	e000e4a0 	.word	0xe000e4a0
60001254:	400d8000 	.word	0x400d8000
60001258:	400fc000 	.word	0x400fc000
6000125c:	e000ed08 	.word	0xe000ed08
60001260:	e000e014 	.word	0xe000e014
60001264:	e000e018 	.word	0xe000e018
60001268:	000037b9 	.word	0x000037b9
6000126c:	e000edfc 	.word	0xe000edfc
60001270:	20200000 	.word	0x20200000
60001274:	000037bd 	.word	0x000037bd
60001278:	e0001000 	.word	0xe0001000
6000127c:	e0001004 	.word	0xe0001004
60001280:	20022db4 	.word	0x20022db4
60001284:	23c34600 	.word	0x23c34600
60001288:	40084000 	.word	0x40084000
6000128c:	400d4000 	.word	0x400d4000
60001290:	56c00000 	.word	0x56c00000
60001294:	20022dbc 	.word	0x20022dbc
60001298:	20023400 	.word	0x20023400
6000129c:	2018101b 	.word	0x2018101b
600012a0:	13110d0c 	.word	0x13110d0c

600012a4 <configure_cache>:
#define SIZE_2G		(SCB_MPU_RASR_SIZE(30) | SCB_MPU_RASR_ENABLE)
#define SIZE_4G		(SCB_MPU_RASR_SIZE(31) | SCB_MPU_RASR_ENABLE)
#define REGION(n)	(SCB_MPU_RBAR_REGION(n) | SCB_MPU_RBAR_VALID)

FLASHMEM void configure_cache(void)
{
600012a4:	b5f0      	push	{r4, r5, r6, r7, lr}
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600012a6:	4a28      	ldr	r2, [pc, #160]	; (60001348 <configure_cache+0xa4>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600012a8:	2000      	movs	r0, #0

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600012aa:	4b28      	ldr	r3, [pc, #160]	; (6000134c <configure_cache+0xa8>)
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600012ac:	f04f 0c10 	mov.w	ip, #16
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600012b0:	4c27      	ldr	r4, [pc, #156]	; (60001350 <configure_cache+0xac>)

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600012b2:	2711      	movs	r7, #17

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600012b4:	f8df e0d8 	ldr.w	lr, [pc, #216]	; 60001390 <configure_cache+0xec>
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600012b8:	2612      	movs	r6, #18
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600012ba:	6020      	str	r0, [r4, #0]
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600012bc:	2501      	movs	r5, #1
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600012be:	f8c2 c000 	str.w	ip, [r2]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600012c2:	f8c3 e000 	str.w	lr, [r3]
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600012c6:	6017      	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600012c8:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 60001394 <configure_cache+0xf0>

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600012cc:	4f21      	ldr	r7, [pc, #132]	; (60001354 <configure_cache+0xb0>)
	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600012ce:	f8c3 e000 	str.w	lr, [r3]

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600012d2:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600012d4:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600012d6:	4e20      	ldr	r6, [pc, #128]	; (60001358 <configure_cache+0xb4>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600012d8:	4f20      	ldr	r7, [pc, #128]	; (6000135c <configure_cache+0xb8>)
	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600012da:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600012dc:	4920      	ldr	r1, [pc, #128]	; (60001360 <configure_cache+0xbc>)
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600012de:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600012e0:	4e20      	ldr	r6, [pc, #128]	; (60001364 <configure_cache+0xc0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600012e2:	f041 0115 	orr.w	r1, r1, #21

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600012e6:	4f20      	ldr	r7, [pc, #128]	; (60001368 <configure_cache+0xc4>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600012e8:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600012ea:	601f      	str	r7, [r3, #0]
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600012ec:	f507 3740 	add.w	r7, r7, #196608	; 0x30000

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600012f0:	4e1e      	ldr	r6, [pc, #120]	; (6000136c <configure_cache+0xc8>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600012f2:	6011      	str	r1, [r2, #0]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600012f4:	3702      	adds	r7, #2

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600012f6:	601e      	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600012f8:	f8df e09c 	ldr.w	lr, [pc, #156]	; 60001398 <configure_cache+0xf4>
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600012fc:	4e1c      	ldr	r6, [pc, #112]	; (60001370 <configure_cache+0xcc>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600012fe:	491d      	ldr	r1, [pc, #116]	; (60001374 <configure_cache+0xd0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001300:	f8c2 e000 	str.w	lr, [r2]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001304:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001306:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001308:	4f1b      	ldr	r7, [pc, #108]	; (60001378 <configure_cache+0xd4>)

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
6000130a:	6019      	str	r1, [r3, #0]

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
6000130c:	4e1b      	ldr	r6, [pc, #108]	; (6000137c <configure_cache+0xd8>)

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000130e:	491c      	ldr	r1, [pc, #112]	; (60001380 <configure_cache+0xdc>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001310:	6017      	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001312:	601e      	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;
60001314:	4f1b      	ldr	r7, [pc, #108]	; (60001384 <configure_cache+0xe0>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001316:	6011      	str	r1, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001318:	4e1b      	ldr	r6, [pc, #108]	; (60001388 <configure_cache+0xe4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
6000131a:	491c      	ldr	r1, [pc, #112]	; (6000138c <configure_cache+0xe8>)

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;
6000131c:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000131e:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001320:	6019      	str	r1, [r3, #0]

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001322:	6025      	str	r5, [r4, #0]

	// cache enable, ARM DDI0403E, pg 628
	asm("dsb");
60001324:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001328:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
6000132c:	f8c3 01b0 	str.w	r0, [r3, #432]	; 0x1b0

	asm("dsb");
60001330:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001334:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001338:	f852 3c88 	ldr.w	r3, [r2, #-136]
6000133c:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
60001340:	f842 3c88 	str.w	r3, [r2, #-136]
60001344:	bdf0      	pop	{r4, r5, r6, r7, pc}
60001346:	bf00      	nop
60001348:	e000ed9c 	.word	0xe000ed9c
6000134c:	e000eda0 	.word	0xe000eda0
60001350:	e000ed94 	.word	0xe000ed94
60001354:	00100009 	.word	0x00100009
60001358:	00200013 	.word	0x00200013
6000135c:	07020021 	.word	0x07020021
60001360:	200252c0 	.word	0x200252c0
60001364:	20000014 	.word	0x20000014
60001368:	13080025 	.word	0x13080025
6000136c:	10000009 	.word	0x10000009
60001370:	40000017 	.word	0x40000017
60001374:	13100033 	.word	0x13100033
60001378:	60000018 	.word	0x60000018
6000137c:	070b002f 	.word	0x070b002f
60001380:	70000019 	.word	0x70000019
60001384:	170b0037 	.word	0x170b0037
60001388:	7000001a 	.word	0x7000001a
6000138c:	130b002f 	.word	0x130b002f
60001390:	1000003f 	.word	0x1000003f
60001394:	03080025 	.word	0x03080025
60001398:	20200016 	.word	0x20200016

6000139c <usb_pll_start>:

#endif // ARDUINO_TEENSY41


FLASHMEM void usb_pll_start()
{
6000139c:	b4f0      	push	{r4, r5, r6, r7}
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000139e:	4a17      	ldr	r2, [pc, #92]	; (600013fc <usb_pll_start+0x60>)
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
600013a0:	2740      	movs	r7, #64	; 0x40
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
600013a2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
600013a6:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
600013aa:	f44f 5500 	mov.w	r5, #8192	; 0x2000
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
600013ae:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
600013b2:	f243 0042 	movw	r0, #12354	; 0x3042


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
600013b6:	6913      	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
600013b8:	f013 0f02 	tst.w	r3, #2
600013bc:	d006      	beq.n	600013cc <usb_pll_start+0x30>
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
600013be:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
600013c0:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
600013c2:	6190      	str	r0, [r2, #24]


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
600013c4:	6913      	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
600013c6:	f013 0f02 	tst.w	r3, #2
600013ca:	d1f8      	bne.n	600013be <usb_pll_start+0x22>
				CCM_ANALOG_PLL_USB1_DIV_SELECT |		// use 480 MHz
				CCM_ANALOG_PLL_USB1_ENABLE |			// disable
				CCM_ANALOG_PLL_USB1_EN_USB_CLKS;		// disable usb
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
600013cc:	f413 5f00 	tst.w	r3, #8192	; 0x2000
600013d0:	d101      	bne.n	600013d6 <usb_pll_start+0x3a>
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
600013d2:	6155      	str	r5, [r2, #20]
			continue;
600013d4:	e7ef      	b.n	600013b6 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
600013d6:	f413 5f80 	tst.w	r3, #4096	; 0x1000
600013da:	d101      	bne.n	600013e0 <usb_pll_start+0x44>
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
600013dc:	6156      	str	r6, [r2, #20]
			continue;
600013de:	e7ea      	b.n	600013b6 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
600013e0:	2b00      	cmp	r3, #0
600013e2:	dae8      	bge.n	600013b6 <usb_pll_start+0x1a>
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
600013e4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
600013e8:	d001      	beq.n	600013ee <usb_pll_start+0x52>
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
600013ea:	6191      	str	r1, [r2, #24]
			continue;
600013ec:	e7e3      	b.n	600013b6 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
600013ee:	065b      	lsls	r3, r3, #25
600013f0:	d401      	bmi.n	600013f6 <usb_pll_start+0x5a>
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
600013f2:	6157      	str	r7, [r2, #20]
			continue;
600013f4:	e7df      	b.n	600013b6 <usb_pll_start+0x1a>
		}
		return; // everything is as it should be  :-)
	}
}
600013f6:	bcf0      	pop	{r4, r5, r6, r7}
600013f8:	4770      	bx	lr
600013fa:	bf00      	nop
600013fc:	400d8000 	.word	0x400d8000

60001400 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001400:	4a3b      	ldr	r2, [pc, #236]	; (600014f0 <tempmon_init+0xf0>)
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001402:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001406:	493b      	ldr	r1, [pc, #236]	; (600014f4 <tempmon_init+0xf4>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001408:	2000      	movs	r0, #0
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
6000140a:	6813      	ldr	r3, [r2, #0]
  asm volatile ("dsb":::"memory");
  while (1) asm ("wfi");
}

FLASHMEM void tempmon_init(void)
{
6000140c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
6000140e:	f023 0301 	bic.w	r3, r3, #1

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001412:	2403      	movs	r4, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001414:	f8df e100 	ldr.w	lr, [pc, #256]	; 60001518 <tempmon_init+0x118>
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001418:	6013      	str	r3, [r2, #0]

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
6000141a:	f8c2 4090 	str.w	r4, [r2, #144]	; 0x90
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
6000141e:	f8d1 30e0 	ldr.w	r3, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
60001422:	4f35      	ldr	r7, [pc, #212]	; (600014f8 <tempmon_init+0xf8>)
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001424:	b2dd      	uxtb	r5, r3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001426:	f3c3 240b 	ubfx	r4, r3, #8, #12
6000142a:	4e34      	ldr	r6, [pc, #208]	; (600014fc <tempmon_init+0xfc>)
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
6000142c:	ebc4 5313 	rsb	r3, r4, r3, lsr #20
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001430:	ee07 5a90 	vmov	s15, r5
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001434:	f1a5 0155 	sub.w	r1, r5, #85	; 0x55
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001438:	f8ce 5000 	str.w	r5, [lr]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
6000143c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001440:	eb03 0583 	add.w	r5, r3, r3, lsl #2
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001444:	ee07 4a90 	vmov	s15, r4
60001448:	fb03 f101 	mul.w	r1, r3, r1
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
6000144c:	603b      	str	r3, [r7, #0]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000144e:	eb03 1383 	add.w	r3, r3, r3, lsl #6
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001452:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001456:	ee07 1a90 	vmov	s15, r1
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000145a:	1b49      	subs	r1, r1, r5
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
6000145c:	ee77 6a66 	vsub.f32	s13, s14, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001460:	eeb8 7a67 	vcvt.f32.u32	s14, s15
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001464:	4d26      	ldr	r5, [pc, #152]	; (60001500 <tempmon_init+0x100>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001466:	ee07 1a90 	vmov	s15, r1
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000146a:	440b      	add	r3, r1
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
6000146c:	edc5 6a00 	vstr	s13, [r5]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001470:	eef8 7a67 	vcvt.f32.u32	s15, s15
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001474:	6034      	str	r4, [r6, #0]
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001476:	eec7 5a26 	vdiv.f32	s11, s14, s13
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
6000147a:	4e22      	ldr	r6, [pc, #136]	; (60001504 <tempmon_init+0x104>)
6000147c:	6815      	ldr	r5, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000147e:	4922      	ldr	r1, [pc, #136]	; (60001508 <tempmon_init+0x108>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001480:	4c22      	ldr	r4, [pc, #136]	; (6000150c <tempmon_init+0x10c>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001482:	ee87 6aa6 	vdiv.f32	s12, s15, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001486:	ee07 3a90 	vmov	s15, r3
6000148a:	4b21      	ldr	r3, [pc, #132]	; (60001510 <tempmon_init+0x110>)
6000148c:	f8c6 3140 	str.w	r3, [r6, #320]	; 0x140
60001490:	eef8 7a67 	vcvt.f32.u32	s15, s15
60001494:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001498:	ee75 5a85 	vadd.f32	s11, s11, s10
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000149c:	ee76 6a05 	vadd.f32	s13, s12, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600014a0:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600014a4:	eefc 6ae6 	vcvt.u32.f32	s13, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600014a8:	ee15 3a90 	vmov	r3, s11
600014ac:	ea45 5303 	orr.w	r3, r5, r3, lsl #20
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600014b0:	ee16 5a90 	vmov	r5, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600014b4:	ee77 7a05 	vadd.f32	s15, s14, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600014b8:	6013      	str	r3, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600014ba:	ea01 4105 	and.w	r1, r1, r5, lsl #16
600014be:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600014c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600014c6:	430b      	orrs	r3, r1
600014c8:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600014cc:	ee17 3a90 	vmov	r3, s15
600014d0:	f8d2 1110 	ldr.w	r1, [r2, #272]	; 0x110
600014d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
600014d8:	430b      	orrs	r3, r1
600014da:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
600014de:	6813      	ldr	r3, [r2, #0]
600014e0:	f043 0302 	orr.w	r3, r3, #2
600014e4:	6013      	str	r3, [r2, #0]

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600014e6:	7020      	strb	r0, [r4, #0]
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
600014e8:	4b0a      	ldr	r3, [pc, #40]	; (60001514 <tempmon_init+0x114>)
600014ea:	2201      	movs	r2, #1
600014ec:	601a      	str	r2, [r3, #0]
600014ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
600014f0:	400d8180 	.word	0x400d8180
600014f4:	401f4400 	.word	0x401f4400
600014f8:	20022dc8 	.word	0x20022dc8
600014fc:	20022dcc 	.word	0x20022dcc
60001500:	20022dc4 	.word	0x20022dc4
60001504:	20023400 	.word	0x20023400
60001508:	0fff0000 	.word	0x0fff0000
6000150c:	e000e440 	.word	0xe000e440
60001510:	00002619 	.word	0x00002619
60001514:	e000e108 	.word	0xe000e108
60001518:	20022dc0 	.word	0x20022dc0

6000151c <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
6000151c:	4b30      	ldr	r3, [pc, #192]	; (600015e0 <usb_init+0xc4>)
6000151e:	f640 7261 	movw	r2, #3937	; 0xf61

static void run_callbacks(endpoint_t *ep);


FLASHMEM void usb_init(void)
{
60001522:	b570      	push	{r4, r5, r6, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001524:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001528:	f240 4504 	movw	r5, #1028	; 0x404
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
6000152c:	f000 f924 	bl	60001778 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001530:	492c      	ldr	r1, [pc, #176]	; (600015e4 <usb_init+0xc8>)
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001532:	482d      	ldr	r0, [pc, #180]	; (600015e8 <usb_init+0xcc>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001534:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001538:	4c2c      	ldr	r4, [pc, #176]	; (600015ec <usb_init+0xd0>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000153a:	f042 0203 	orr.w	r2, r2, #3
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
6000153e:	4b2c      	ldr	r3, [pc, #176]	; (600015f0 <usb_init+0xd4>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001540:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001544:	f8c0 5160 	str.w	r5, [r0, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001548:	6822      	ldr	r2, [r4, #0]
6000154a:	4013      	ands	r3, r2
6000154c:	b91b      	cbnz	r3, 60001556 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
6000154e:	f8d0 31a8 	ldr.w	r3, [r0, #424]	; 0x1a8
60001552:	079a      	lsls	r2, r3, #30
60001554:	d01a      	beq.n	6000158c <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001556:	4b24      	ldr	r3, [pc, #144]	; (600015e8 <usb_init+0xcc>)
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001558:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
6000155c:	4a23      	ldr	r2, [pc, #140]	; (600015ec <usb_init+0xd0>)
6000155e:	6351      	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001560:	461a      	mov	r2, r3
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001562:	f8d3 1140 	ldr.w	r1, [r3, #320]	; 0x140
60001566:	f041 0102 	orr.w	r1, r1, #2
6000156a:	f8c3 1140 	str.w	r1, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
6000156e:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001572:	079b      	lsls	r3, r3, #30
60001574:	d4fb      	bmi.n	6000156e <usb_init+0x52>
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001576:	f44f 3000 	mov.w	r0, #131072	; 0x20000
6000157a:	491e      	ldr	r1, [pc, #120]	; (600015f4 <usb_init+0xd8>)
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
6000157c:	4b1b      	ldr	r3, [pc, #108]	; (600015ec <usb_init+0xd0>)
6000157e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001582:	6008      	str	r0, [r1, #0]
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001584:	2019      	movs	r0, #25
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001586:	639a      	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001588:	f000 f8ea 	bl	60001760 <__delay_veneer>
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000158c:	4d1a      	ldr	r5, [pc, #104]	; (600015f8 <usb_init+0xdc>)
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
6000158e:	2200      	movs	r2, #0
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001590:	4b16      	ldr	r3, [pc, #88]	; (600015ec <usb_init+0xd0>)
60001592:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001596:	4c14      	ldr	r4, [pc, #80]	; (600015e8 <usb_init+0xcc>)
60001598:	260a      	movs	r6, #10
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
6000159a:	6399      	str	r1, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000159c:	4628      	mov	r0, r5
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
6000159e:	601a      	str	r2, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600015a0:	4611      	mov	r1, r2
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600015a2:	f8c4 61a8 	str.w	r6, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600015a6:	f44f 7220 	mov.w	r2, #640	; 0x280
600015aa:	f000 f8d1 	bl	60001750 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600015ae:	f44f 0681 	mov.w	r6, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
600015b2:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600015b6:	f240 1343 	movw	r3, #323	; 0x143
600015ba:	4a10      	ldr	r2, [pc, #64]	; (600015fc <usb_init+0xe0>)
600015bc:	4910      	ldr	r1, [pc, #64]	; (60001600 <usb_init+0xe4>)
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600015be:	602e      	str	r6, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
600015c0:	6428      	str	r0, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
600015c2:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
600015c6:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600015ca:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
600015ce:	4a0d      	ldr	r2, [pc, #52]	; (60001604 <usb_init+0xe8>)
600015d0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
600015d4:	2301      	movs	r3, #1
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
600015d6:	6011      	str	r1, [r2, #0]
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
600015d8:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
600015dc:	bd70      	pop	{r4, r5, r6, pc}
600015de:	bf00      	nop
600015e0:	400d8000 	.word	0x400d8000
600015e4:	400fc000 	.word	0x400fc000
600015e8:	402e0000 	.word	0x402e0000
600015ec:	400d9000 	.word	0x400d9000
600015f0:	001e1c00 	.word	0x001e1c00
600015f4:	e000e28c 	.word	0xe000e28c
600015f8:	20025000 	.word	0x20025000
600015fc:	20023400 	.word	0x20023400
60001600:	00002785 	.word	0x00002785
60001604:	e000e10c 	.word	0xe000e10c

60001608 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001608:	4b11      	ldr	r3, [pc, #68]	; (60001650 <analog_init+0x48>)
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
6000160a:	4912      	ldr	r1, [pc, #72]	; (60001654 <analog_init+0x4c>)
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000160c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
6000160e:	460a      	mov	r2, r1
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001610:	f440 3040 	orr.w	r0, r0, #196608	; 0x30000
}

#define MAX_ADC_CLOCK 20000000

FLASHMEM void analog_init(void)
{
60001614:	b430      	push	{r4, r5}
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001616:	66d8      	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001618:	f240 6537 	movw	r5, #1591	; 0x637
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
6000161c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
6000161e:	24a0      	movs	r4, #160	; 0xa0
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001620:	f440 7040 	orr.w	r0, r0, #768	; 0x300
60001624:	66d8      	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001626:	644d      	str	r5, [r1, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001628:	648c      	str	r4, [r1, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
6000162a:	6c93      	ldr	r3, [r2, #72]	; 0x48
6000162c:	061b      	lsls	r3, r3, #24
6000162e:	d4fc      	bmi.n	6000162a <analog_init+0x22>
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001630:	4b09      	ldr	r3, [pc, #36]	; (60001658 <analog_init+0x50>)
60001632:	f240 6037 	movw	r0, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001636:	21a0      	movs	r1, #160	; 0xa0
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
60001638:	461a      	mov	r2, r3
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
6000163a:	6458      	str	r0, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
6000163c:	6499      	str	r1, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
6000163e:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001640:	f013 0380 	ands.w	r3, r3, #128	; 0x80
60001644:	d1fb      	bne.n	6000163e <analog_init+0x36>
	calibrating = 0;
60001646:	4a05      	ldr	r2, [pc, #20]	; (6000165c <analog_init+0x54>)
60001648:	7013      	strb	r3, [r2, #0]
}
6000164a:	bc30      	pop	{r4, r5}
6000164c:	4770      	bx	lr
6000164e:	bf00      	nop
60001650:	400fc000 	.word	0x400fc000
60001654:	400c4000 	.word	0x400c4000
60001658:	400c8000 	.word	0x400c8000
6000165c:	20022ff6 	.word	0x20022ff6

60001660 <usb_string_product_name_default>:
60001660:	00550316 00420053 00530020 00720065     ..U.S.B. .S.e.r.
60001670:	00610069 0000006c                       i.a.l...

60001678 <usb_string_manufacturer_name_default>:
60001678:	00540318 00650065 0073006e 00640079     ..T.e.e.n.s.y.d.
60001688:	00690075 006f006e                       u.i.n.o.

60001690 <string0>:
60001690:	04090304                                ....

60001694 <usb_config_descriptor_12>:
60001694:	00430209 c0000102 00040932 02020100     ..C.....2.......
600016a4:	24050001 05011000 01010124 06022404     ...$....$....$..
600016b4:	00062405 82050701 10001003 00010409     .$..............
600016c4:	00000a02 03050700 00004002 02840507     .........@......
600016d4:	00000040                                @...

600016d8 <usb_config_descriptor_480>:
600016d8:	00430209 c0000102 00040932 02020100     ..C.....2.......
600016e8:	24050001 05011000 01010124 06022404     ...$....$....$..
600016f8:	00062405 82050701 05001003 00010409     .$..............
60001708:	00000a02 03050700 00020002 02840507     ................
60001718:	00000200                                ....

6000171c <qualifier_descriptor>:
6000171c:	0200060a 40000002 ff010001                       .......@..

60001726 <_serialEvent_default>:
60001726:	b5f8ff01                                         ..

60001728 <_init>:
60001728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
6000172a:	bf00      	nop
6000172c:	bcf8      	pop	{r3, r4, r5, r6, r7}
6000172e:	bc08      	pop	{r3}
60001730:	469e      	mov	lr, r3
60001732:	4770      	bx	lr
60001734:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

60001738 <__set_arm_clock_veneer>:
60001738:	f85f f000 	ldr.w	pc, [pc]	; 6000173c <__set_arm_clock_veneer+0x4>
6000173c:	00001e11 	.word	0x00001e11

60001740 <__startup_early_hook_veneer>:
60001740:	f85f f000 	ldr.w	pc, [pc]	; 60001744 <__startup_early_hook_veneer+0x4>
60001744:	00002555 	.word	0x00002555

60001748 <__startup_late_hook_veneer>:
60001748:	f85f f000 	ldr.w	pc, [pc]	; 6000174c <__startup_late_hook_veneer+0x4>
6000174c:	00002559 	.word	0x00002559

60001750 <__memset_veneer>:
60001750:	f85f f000 	ldr.w	pc, [pc]	; 60001754 <__memset_veneer+0x4>
60001754:	00004d71 	.word	0x00004d71

60001758 <__pwm_init_veneer>:
60001758:	f85f f000 	ldr.w	pc, [pc]	; 6000175c <__pwm_init_veneer+0x4>
6000175c:	00002285 	.word	0x00002285

60001760 <__delay_veneer>:
60001760:	f85f f000 	ldr.w	pc, [pc]	; 60001764 <__delay_veneer+0x4>
60001764:	000020d5 	.word	0x000020d5

60001768 <____libc_init_array_veneer>:
60001768:	f85f f000 	ldr.w	pc, [pc]	; 6000176c <____libc_init_array_veneer+0x4>
6000176c:	000047a1 	.word	0x000047a1

60001770 <__main_veneer>:
60001770:	f85f f000 	ldr.w	pc, [pc]	; 60001774 <__main_veneer+0x4>
60001774:	000037dd 	.word	0x000037dd

60001778 <__usb_init_serialnumber_veneer>:
60001778:	f85f f000 	ldr.w	pc, [pc]	; 6000177c <__usb_init_serialnumber_veneer+0x4>
6000177c:	00002f3d 	.word	0x00002f3d

60001780 <__init_array_start>:
60001780:	00000045 	.word	0x00000045
60001784:	00000cb9 	.word	0x00000cb9
60001788:	000014f5 	.word	0x000014f5
6000178c:	00001c8d 	.word	0x00001c8d

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <__do_global_dtors_aux>:
    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);

    return tmeas;
      20:	4c05b510 	.word	0x4c05b510
      24:	7823      	ldrb	r3, [r4, #0]
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);
      26:	b933      	.short	0xb933

    return tmeas;
      28:	4b04      	ldr	r3, [pc, #16]	; (3c <_teensy_model_identifier+0x18>)
      2a:	b113      	.short	0xb113
      2c:	4804      	ldr	r0, [pc, #16]	; (40 <_teensy_model_identifier+0x1c>)
      2e:	f3af      	.short	0xf3af
      30:	8000      	strh	r0, [r0, #0]
      32:	2301      	movs	r3, #1
      34:	7023      	strb	r3, [r4, #0]
      36:	bd10      	pop	{r4, pc}
      38:	20012af0 	.word	0x20012af0
      3c:	0000      	movs	r0, r0
      3e:	0000      	.short	0x0000
}
      40:	50b4      	str	r4, [r6, r2]
	...

00000044 <frame_dummy>:
      44:	b5104b08 	.word	0xb5104b08
      48:	b11b      	cbz	r3, 52 <frame_dummy+0xe>
      4a:	4908      	.short	0x4908
      4c:	4808      	ldr	r0, [pc, #32]	; (70 <frame_dummy+0x2c>)
      4e:	f3af      	.short	0xf3af
      50:	8000      	strh	r0, [r0, #0]
      52:	4808      	.short	0x4808
      54:	6803      	ldr	r3, [r0, #0]
      56:	b903      	.short	0xb903
      58:	bd10      	pop	{r4, pc}
      5a:	4b07      	ldr	r3, [pc, #28]	; (78 <frame_dummy+0x34>)
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      5c:	2b00      	cmp	r3, #0
      5e:	d0fb      	.short	0xd0fb
      60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      64:	bf004718 	.word	0xbf004718
      mode |= ADC_CFG_AVGS(2);
      mode1 |= ADC_CFG_AVGS(2);

    } else if (num >= 8) {
      mode |= ADC_CFG_AVGS(1);
      mode1 |= ADC_CFG_AVGS(1);
      68:	0000      	movs	r0, r0
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      6a:	0000      	.short	0x0000
  ADC2_CFG = mode1;
  
  if(num >= 4){
      6c:	2af4      	cmp	r2, #244	; 0xf4
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
  ADC2_CFG = mode1;
      6e:	2001      	movs	r0, #1
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      70:	000050b4 	.word	0x000050b4
  ADC2_CFG = mode1;
  
  if(num >= 4){
      74:	2af0      	cmp	r2, #240	; 0xf0
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
  }
}
      76:	2001      	.short	0x2001
      78:	0000      	movs	r0, r0
	...

0000007c <CLEDController::size()>:
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
        }
    }

    /// How many leds does this controller manage?
    virtual int size() { return m_nLeds; }
      7c:	6940      	ldr	r0, [r0, #20]
      7e:	4770      	bx	lr

00000080 <CLEDController::getMaxRefreshRate() const>:
              }

              return adj;
      #endif
    }
    virtual uint16_t getMaxRefreshRate() const { return 0; }
      80:	2000      	movs	r0, #0
      82:	4770      	bx	lr

00000084 <readAdc()>:
	*   \return the last converted value.
	*   If single-ended and 16 bits it's necessary to typecast it to an unsigned type (like uint16_t),
	*   otherwise values larger than 3.3/2 V are interpreted as negative!
	*/
	int analogReadContinuous() __attribute__((always_inline)) {
		return (int16_t)(int32_t)adc_regs.R0;
      84:	490a4b09 	.word	0x490a4b09
      88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
/*
* ADC interrupt callback function. Executes when an ADC conversion has completed.
* Read the ADC sample and store it in an array.
*/
void readAdc(void) {
    samples[sampleCounter] = ADC0.analogReadContinuous() * 26; // scale samples to maximise resolution (* 26)
      8a:	680a      	ldr	r2, [r1, #0]
      8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      8e:	4809      	ldr	r0, [pc, #36]	; (b4 <readAdc()+0x30>)

/*
* ADC interrupt callback function. Executes when an ADC conversion has completed.
* Read the ADC sample and store it in an array.
*/
void readAdc(void) {
      90:	b430      	push	{r4, r5}
    samples[sampleCounter] = ADC0.analogReadContinuous() * 26; // scale samples to maximise resolution (* 26)
      92:	eb03 0443 	add.w	r4, r3, r3, lsl #1
    sampleCounter++;
      96:	1c55      	adds	r5, r2, #1
/*
* ADC interrupt callback function. Executes when an ADC conversion has completed.
* Read the ADC sample and store it in an array.
*/
void readAdc(void) {
    samples[sampleCounter] = ADC0.analogReadContinuous() * 26; // scale samples to maximise resolution (* 26)
      98:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    sampleCounter++;
      9c:	600d      	str	r5, [r1, #0]
/*
* ADC interrupt callback function. Executes when an ADC conversion has completed.
* Read the ADC sample and store it in an array.
*/
void readAdc(void) {
    samples[sampleCounter] = ADC0.analogReadContinuous() * 26; // scale samples to maximise resolution (* 26)
      9e:	005b      	lsls	r3, r3, #1
      a0:	3012f820 	.word	0x3012f820
    sampleCounter++;
    asm("DSB");
      a4:	f3bf 8f4f 	dsb	sy
      a8:	bc30      	pop	{r4, r5}
      aa:	4770      	bx	lr
      ac:	20022cd4 	.word	0x20022cd4
      b0:	acc4      	add	r4, sp, #784	; 0x310
      b2:	2001      	movs	r0, #1
      b4:	2001ecd4 	.word	0x2001ecd4

000000b8 <CWS2812SerialController<14, (EOrder)10>::init()>:
    }
  }
public:
  CWS2812SerialController() { pserial = NULL; }

  virtual void init() { /* do nothing yet */ }
      b8:	4770      	bx	lr

  if(br++ >= nFrames) {
      uint32_t now = millis();
      now -= lastframe;
      if( now == 0 ) {
          now = 1; // prevent division by zero below
      ba:	bf00      	.short	0xbf00

000000bc <CWS2812SerialController<14, (EOrder)10>::showPixels(PixelController<(EOrder)10, 8, 255ul>&)>:
      }
      m_nFPS = (br * 1000) / now;
    br = 0;
      bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    lastframe = millis();
      be:	6985      	.short	0x6985

  if(br++ >= nFrames) {
      uint32_t now = millis();
      now -= lastframe;
      if( now == 0 ) {
          now = 1; // prevent division by zero below
      c0:	b083      	sub	sp, #12
      c2:	4604      	.short	0x4604
      }
      m_nFPS = (br * 1000) / now;
      c4:	2d00      	cmp	r5, #0
      c6:	d051      	.short	0xd051
      c8:	688b      	ldr	r3, [r1, #8]
		pCur->showColor(color, scale);
		pCur->setDither(d);
		pCur = pCur->next();
	}
	countFPS();
}
      ca:	69e2      	.short	0x69e2
      cc:	2b00      	cmp	r3, #0
      ce:	dd47      	ble.n	160 <CWS2812SerialController<14, (EOrder)10>::showPixels(PixelController<(EOrder)10, 8, 255ul>&)+0xa4>
		return *pCur;
	}
}

void CFastLED::showColor(const struct CRGB & color, uint8_t scale) {
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
      d0:	680b3203 	.word	0x680b3203
      d4:	7818      	ldrb	r0, [r3, #0]
      d6:	4603      	.short	0x4603
      d8:	b120      	cbz	r0, e4 <CWS2812SerialController<14, (EOrder)10>::showPixels(PixelController<(EOrder)10, 8, 255ul>&)+0x28>
      da:	7b0b      	.short	0x7b0b
      dc:	4403      	add	r3, r0
      de:	2bff      	.short	0x2bff
      e0:	bfa8      	it	ge
      e2:	23ff      	.short	0x23ff
      e4:	7c88      	ldrb	r0, [r1, #18]
      e6:	fb00 3303 	mlage	r3, r0, r3, r3
      ea:	121b      	.short	0x121b
      ec:	f802 3c03 	strb.w	r3, [r2, #-3]
      f0:	7858680b 	.word	0x7858680b
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
      f4:	4603      	mov	r3, r0
      f6:	b120      	.short	0xb120
/// @param j - second byte to add
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
      f8:	7b4b      	ldrb	r3, [r1, #13]
      fa:	4403      	.short	0x4403
    if( t > 255) t = 255;
      fc:	2bff      	cmp	r3, #255	; 0xff
      fe:	bfa8      	.short	0xbfa8
     100:	23ff      	movge	r3, #255	; 0xff

    uint8_t *p = drawbuffer;

    while(pixels.has(1)) {
      *p++ = pixels.loadAndScale0();
      *p++ = pixels.loadAndScale1();
     102:	7cc8      	ldrb	r0, [r1, #19]
     104:	3303fb00 	.word	0x3303fb00
     108:	121b      	asrs	r3, r3, #8
     10a:	f802      	.short	0xf802
     10c:	3c02      	subs	r4, #2
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
     10e:	680b      	ldr	r3, [r1, #0]
     110:	46037898 	.word	0x46037898
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
     114:	b120      	cbz	r0, 120 <CWS2812SerialController<14, (EOrder)10>::showPixels(PixelController<(EOrder)10, 8, 255ul>&)+0x64>
/// @param j - second byte to add
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
     116:	7b8b      	.short	0x7b8b
     118:	4403      	add	r3, r0
    if( t > 255) t = 255;
     11a:	2bff      	.short	0x2bff
     11c:	bfa8      	it	ge
     11e:	23ff      	.short	0x23ff
      *p++ = pixels.loadAndScale2();
     120:	7d08      	ldrb	r0, [r1, #20]
     122:	3203      	.short	0x3203
     124:	fb00 3303 	mla	r3, r0, r3, r3
     128:	f802121b 	.word	0xf802121b
     12c:	3c04      	subs	r4, #4

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     12e:	7bc8      	ldrbge	r0, [r1, #15]
     130:	e00cf891 	.word	0xe00cf891
                d[1] = e[1] - d[1];
                d[2] = e[2] - d[2];
     134:	7b8d      	ldrb	r5, [r1, #14]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     136:	ebce      	.short	0xebce
     138:	0e00      	lsrs	r0, r0, #24
                d[1] = e[1] - d[1];
                d[2] = e[2] - d[2];
     13a:	7c48      	.short	0x7c48
        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
                d[1] = e[1] - d[1];
     13c:	7c0b      	ldrb	r3, [r1, #16]
     13e:	7b4f      	.short	0x7b4f
                d[2] = e[2] - d[2];
     140:	1b45      	subs	r5, r0, r5

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     142:	6888      	ldr	r0, [r1, #8]
        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
                d[1] = e[1] - d[1];
     144:	1bdf      	subs	r7, r3, r7

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     146:	680e      	ldr	r6, [r1, #0]
     148:	f9913801 	.word	0xf9913801
     14c:	3015      	adds	r0, #21

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     14e:	f881      	.short	0xf881
     150:	e00c      	b.n	16c <CWS2812SerialController<14, (EOrder)10>::showPixels(PixelController<(EOrder)10, 8, 255ul>&)+0xb0>

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     152:	4433      	.short	0x4433
  virtual void showPixels(PixelController<RGB_ORDER, 8, 0xFF> & pixels) {
    _init(pixels.size());

    uint8_t *p = drawbuffer;

    while(pixels.has(1)) {
     154:	2800      	cmp	r0, #0
        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
                d[1] = e[1] - d[1];
     156:	734f      	.short	0x734f
                d[2] = e[2] - d[2];
     158:	738d      	strb	r5, [r1, #14]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     15a:	600b      	.short	0x600b
     15c:	6088      	str	r0, [r1, #8]
     15e:	dcb9      	bgt.n	d4 <CWS2812SerialController<14, (EOrder)10>::showPixels(PixelController<(EOrder)10, 8, 255ul>&)+0x18>
      *p++ = pixels.loadAndScale1();
      *p++ = pixels.loadAndScale2();
      pixels.stepDithering();
      pixels.advanceData();
    }
    pserial->show();
     160:	b00369a0 	.word	0xb00369a0
  }
     164:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      *p++ = pixels.loadAndScale1();
      *p++ = pixels.loadAndScale2();
      pixels.stepDithering();
      pixels.advanceData();
    }
    pserial->show();
     168:	baaef001 	.word	0xbaaef001
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
            }
        }

        __attribute__((always_inline)) inline int size() { return mLen; }
     16c:	684e      	ldr	r6, [r1, #4]
     16e:	9101      	.short	0x9101
  WS2812Serial *pserial;
  uint8_t *drawbuffer,*framebuffer;

  void _init(int nLeds) {
    if (pserial == NULL) {
      drawbuffer = (uint8_t*)malloc(nLeds * 3);
     170:	eb06 0746 	add.w	r7, r6, r6, lsl #1
     174:	f0044638 	.word	0xf0044638
     178:	fb3b 61e0 			; <UNDEFINED> instruction: 0xfb3b61e0
      framebuffer = (uint8_t*)malloc(nLeds * 12);
     17c:	f00400b8 	.word	0xf00400b8
     180:	fb37 6220 			; <UNDEFINED> instruction: 0xfb376220
      pserial = new WS2812Serial(nLeds, framebuffer, drawbuffer, DATA_PIN, WS2812_RGB);
     184:	f003201c 	.word	0xf003201c
     188:	fb31 f04f 			; <UNDEFINED> instruction: 0xfb31f04f

class WS2812Serial {
public:
	constexpr WS2812Serial(uint16_t num, void *fb, void *db, uint8_t pin, uint8_t cfg) :
		numled(num), pin(pin), config(cfg),
		frameBuffer((uint8_t *)fb), drawBuffer((uint8_t *)db) {
     18c:	6a270e0e 	.word	0x6a270e0e
     190:	22ff      	movs	r2, #255	; 0xff
     192:	70c5      	.short	0x70c5
     194:	60c5      	str	r5, [r0, #12]
     196:	6105      	.short	0x6105
     198:	69e56185 	.word	0x69e56185
     19c:	61a0      	str	r0, [r4, #24]
     19e:	8006      	.short	0x8006
     1a0:	f880 e002 	strb.w	lr, [r0, #2]
     1a4:	60856047 	.word	0x60856047
     1a8:	7502      	strb	r2, [r0, #20]
      pserial->begin();
     1aa:	f001 f9ad 	bl	1508 <WS2812Serial::begin()>
     1ae:	9901      	.short	0x9901
     1b0:	e78a      	b.n	c8 <CWS2812SerialController<14, (EOrder)10>::showPixels(PixelController<(EOrder)10, 8, 255ul>&)+0xc>
	// lets configure up our CTRL register value
	uint32_t ctrl = CTRL_TX_INACTIVE;

	// Now process the bits in the Format value passed in
	// Bits 0-2 - Parity plus 9  bit. 
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
     1b2:	bf00      	.short	0xbf00

000001b4 <CLEDController::clearLeds(int)>:

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     1b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     1b6:	2300      	.short	0x2300
     1b8:	b091      	sub	sp, #68	; 0x44
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
     1ba:	6805      	ldr	r5, [r0, #0]
     1bc:	4a81      	ldr	r2, [pc, #516]	; (3c4 <CLEDController::clearLeds(int)+0x210>)
     1be:	f88d      	.short	0xf88d
     1c0:	3000      	adds	r0, #0
     1c2:	f88d      	.short	0xf88d
     1c4:	3001      	adds	r0, #1
     1c6:	f88d 3002 	strb.w	r3, [sp, #2]
     1ca:	682e      	ldr	r6, [r5, #0]
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
     1cc:	3004f88d 	.word	0x3004f88d
     1d0:	4296      	cmp	r6, r2
     1d2:	f88d 3005 	strb.w	r3, [sp, #5]
     1d6:	f88d 3006 	strb.w	r3, [sp, #6]
     1da:	f040      	.short	0xf040
     1dc:	80c7      	strh	r7, [r0, #6]
     1de:	7c82      	.short	0x7c82
     1e0:	4604      	mov	r4, r0
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     1e2:	9103      	.short	0x9103
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     1e4:	2a01      	cmp	r2, #1
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     1e6:	9104      	str	r1, [sp, #16]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     1e8:	f88d 301a 	strb.w	r3, [sp, #26]
        g = rhs.g;
     1ec:	f88d 301b 	strb.w	r3, [sp, #27]
        b = rhs.b;
     1f0:	f88d 301c 	strb.w	r3, [sp, #28]
     1f4:	d008f8cd 	.word	0xd008f8cd
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     1f8:	d07b      	beq.n	2f2 <CLEDController::clearLeds(int)+0x13e>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     1fa:	f88d      	.short	0xf88d
     1fc:	3019      	adds	r0, #25
     1fe:	f88d      	.short	0xf88d
     200:	3018      	adds	r0, #24
     202:	f88d      	.short	0xf88d
     204:	3017      	adds	r0, #23
     206:	f88d      	.short	0xf88d
     208:	3016      	adds	r0, #22
     20a:	f88d      	.short	0xf88d
     20c:	3015      	adds	r0, #21
     20e:	f88d      	.short	0xf88d
     210:	3014      	adds	r0, #20
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     212:	2000      	.short	0x2000
     214:	ab07      	add	r3, sp, #28
     216:	a90f      	add	r1, sp, #60	; 0x3c
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     218:	4602      	mov	r2, r0
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     21a:	f88d 001d 	strb.w	r0, [sp, #29]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     21e:	f843 2f04 	str.w	r2, [r3, #4]!

        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
     222:	428b      	cmp	r3, r1
     224:	d1fb      	bne.n	21e <CLEDController::clearLeds(int)+0x6a>
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     226:	69ab      	ldr	r3, [r5, #24]
     228:	4a67      	ldr	r2, [pc, #412]	; (3c8 <CLEDController::clearLeds(int)+0x214>)
     22a:	4293      	cmp	r3, r2
     22c:	f040 80a4 	bne.w	378 <CLEDController::clearLeds(int)+0x1c4>
class CWS2812SerialController : public CPixelLEDController<RGB_ORDER, 8, 0xFF> {
  WS2812Serial *pserial;
  uint8_t *drawbuffer,*framebuffer;

  void _init(int nLeds) {
    if (pserial == NULL) {
     230:	69a5      	ldr	r5, [r4, #24]
     232:	2d00      	cmp	r5, #0
     234:	f000 80a5 	beq.w	382 <CLEDController::clearLeds(int)+0x1ce>
  virtual void showPixels(PixelController<RGB_ORDER, 8, 0xFF> & pixels) {
    _init(pixels.size());

    uint8_t *p = drawbuffer;

    while(pixels.has(1)) {
     238:	9b04      	ldr	r3, [sp, #16]
  virtual void init() { /* do nothing yet */ }

  virtual void showPixels(PixelController<RGB_ORDER, 8, 0xFF> & pixels) {
    _init(pixels.size());

    uint8_t *p = drawbuffer;
     23a:	69e2      	ldr	r2, [r4, #28]

    while(pixels.has(1)) {
     23c:	2b00      	cmp	r3, #0
     23e:	dd53      	ble.n	2e8 <CLEDController::clearLeds(int)+0x134>
     240:	3203      	adds	r2, #3
     242:	9b02      	ldr	r3, [sp, #8]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
     244:	7819      	ldrb	r1, [r3, #0]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
     246:	460b      	mov	r3, r1
     248:	b129      	cbz	r1, 256 <CLEDController::clearLeds(int)+0xa2>
/// @param j - second byte to add
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
     24a:	f89d 3014 	ldrb.w	r3, [sp, #20]
     24e:	440b      	add	r3, r1
    if( t > 255) t = 255;
     250:	2bff      	cmp	r3, #255	; 0xff
     252:	bfa8      	it	ge
     254:	23ff      	movge	r3, #255	; 0xff
      *p++ = pixels.loadAndScale0();
     256:	f89d 101a 	ldrb.w	r1, [sp, #26]
     25a:	fb01 3303 	mla	r3, r1, r3, r3
     25e:	121b      	asrs	r3, r3, #8
     260:	f802 3c03 	strb.w	r3, [r2, #-3]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
     264:	9b02      	ldr	r3, [sp, #8]
     266:	7859      	ldrb	r1, [r3, #1]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
     268:	460b      	mov	r3, r1
     26a:	b129      	cbz	r1, 278 <CLEDController::clearLeds(int)+0xc4>
/// @param j - second byte to add
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
     26c:	f89d 3015 	ldrb.w	r3, [sp, #21]
     270:	440b      	add	r3, r1
    if( t > 255) t = 255;
     272:	2bff      	cmp	r3, #255	; 0xff
     274:	bfa8      	it	ge
     276:	23ff      	movge	r3, #255	; 0xff
      *p++ = pixels.loadAndScale1();
     278:	f89d 101b 	ldrb.w	r1, [sp, #27]
     27c:	fb01 3303 	mla	r3, r1, r3, r3
     280:	121b      	asrs	r3, r3, #8
     282:	f802 3c02 	strb.w	r3, [r2, #-2]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
     286:	9b02      	ldr	r3, [sp, #8]
     288:	7899      	ldrb	r1, [r3, #2]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
     28a:	460b      	mov	r3, r1
     28c:	b129      	cbz	r1, 29a <CLEDController::clearLeds(int)+0xe6>
/// @param j - second byte to add
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
     28e:	f89d 3016 	ldrb.w	r3, [sp, #22]
     292:	440b      	add	r3, r1
    if( t > 255) t = 255;
     294:	2bff      	cmp	r3, #255	; 0xff
     296:	bfa8      	it	ge
     298:	23ff      	movge	r3, #255	; 0xff
      *p++ = pixels.loadAndScale2();
     29a:	f89d 101c 	ldrb.w	r1, [sp, #28]
     29e:	3203      	adds	r2, #3
     2a0:	fb01 3303 	mla	r3, r1, r3, r3
     2a4:	121b      	asrs	r3, r3, #8
     2a6:	f802 3c04 	strb.w	r3, [r2, #-4]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     2aa:	f89d 1017 	ldrb.w	r1, [sp, #23]
     2ae:	f89d 7014 	ldrb.w	r7, [sp, #20]
                d[1] = e[1] - d[1];
                d[2] = e[2] - d[2];
     2b2:	f89d 0016 	ldrb.w	r0, [sp, #22]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     2b6:	1bcf      	subs	r7, r1, r7
                d[1] = e[1] - d[1];
                d[2] = e[2] - d[2];
     2b8:	f89d 1019 	ldrb.w	r1, [sp, #25]
        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
                d[1] = e[1] - d[1];
     2bc:	f89d 3018 	ldrb.w	r3, [sp, #24]
     2c0:	f89d 5015 	ldrb.w	r5, [sp, #21]
                d[2] = e[2] - d[2];
     2c4:	1a08      	subs	r0, r1, r0

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     2c6:	9904      	ldr	r1, [sp, #16]
        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
                d[1] = e[1] - d[1];
     2c8:	1b5d      	subs	r5, r3, r5

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     2ca:	9e02      	ldr	r6, [sp, #8]
     2cc:	3901      	subs	r1, #1
     2ce:	f99d 301d 	ldrsb.w	r3, [sp, #29]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     2d2:	f88d 7014 	strb.w	r7, [sp, #20]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     2d6:	4433      	add	r3, r6
  virtual void showPixels(PixelController<RGB_ORDER, 8, 0xFF> & pixels) {
    _init(pixels.size());

    uint8_t *p = drawbuffer;

    while(pixels.has(1)) {
     2d8:	2900      	cmp	r1, #0
        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
                d[1] = e[1] - d[1];
     2da:	f88d 5015 	strb.w	r5, [sp, #21]
                d[2] = e[2] - d[2];
     2de:	f88d 0016 	strb.w	r0, [sp, #22]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     2e2:	9302      	str	r3, [sp, #8]
     2e4:	9104      	str	r1, [sp, #16]
     2e6:	dcad      	bgt.n	244 <CLEDController::clearLeds(int)+0x90>
      *p++ = pixels.loadAndScale1();
      *p++ = pixels.loadAndScale2();
      pixels.stepDithering();
      pixels.advanceData();
    }
    pserial->show();
     2e8:	69a0      	ldr	r0, [r4, #24]
     2ea:	f001 f9ed 	bl	16c8 <WS2812Serial::show()>

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     2ee:	b011      	add	sp, #68	; 0x44
     2f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     2f2:	4a36      	ldr	r2, [pc, #216]	; (3cc <CLEDController::clearLeds(int)+0x218>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     2f4:	7813      	ldrb	r3, [r2, #0]
     2f6:	3301      	adds	r3, #1
     2f8:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     2fc:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     300:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     302:	bf14      	ite	ne
     304:	2180      	movne	r1, #128	; 0x80
     306:	2100      	moveq	r1, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     308:	079a      	lsls	r2, r3, #30
     30a:	d502      	bpl.n	312 <CLEDController::clearLeds(int)+0x15e>
     30c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
     310:	b2c9      	uxtb	r1, r1
                if(R & 0x04) { Q |= 0x20; }
     312:	075b      	lsls	r3, r3, #29
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     314:	f04f 0200 	mov.w	r2, #0
     318:	f10d 0317 	add.w	r3, sp, #23
     31c:	f10d 071a 	add.w	r7, sp, #26

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
                if(R & 0x04) { Q |= 0x20; }
     320:	bf48      	it	mi
     322:	f041 0120 	orrmi.w	r1, r1, #32
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     326:	f44f 7e80 	mov.w	lr, #256	; 0x100
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     32a:	3110      	adds	r1, #16
     32c:	b2c9      	uxtb	r1, r1
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     32e:	b1aa      	cbz	r2, 35c <CLEDController::clearLeds(int)+0x1a8>
     330:	fb9e f2f2 	sdiv	r2, lr, r2
     334:	b2d2      	uxtb	r2, r2
     336:	1c50      	adds	r0, r2, #1
     338:	b2c0      	uxtb	r0, r0
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
     33a:	fb00 1501 	mla	r5, r0, r1, r1
     33e:	7018      	strb	r0, [r3, #0]
     340:	122d      	asrs	r5, r5, #8
     342:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     344:	b105      	cbz	r5, 348 <CLEDController::clearLeds(int)+0x194>
     346:	3e01      	subs	r6, #1
     348:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     34c:	b100      	cbz	r0, 350 <CLEDController::clearLeds(int)+0x19c>
     34e:	701a      	strb	r2, [r3, #0]
     350:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     352:	42bb      	cmp	r3, r7
     354:	d008      	beq.n	368 <CLEDController::clearLeds(int)+0x1b4>
     356:	78da      	ldrb	r2, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     358:	2a00      	cmp	r2, #0
     35a:	d1e9      	bne.n	330 <CLEDController::clearLeds(int)+0x17c>
     35c:	701a      	strb	r2, [r3, #0]
     35e:	3301      	adds	r3, #1
                    d[i] = scale8(Q, e[i]);
     360:	f803 2c04 	strb.w	r2, [r3, #-4]
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     364:	42bb      	cmp	r3, r7
     366:	d1f6      	bne.n	356 <CLEDController::clearLeds(int)+0x1a2>
     368:	6825      	ldr	r5, [r4, #0]
     36a:	e752      	b.n	212 <CLEDController::clearLeds(int)+0x5e>
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
     36c:	460a      	mov	r2, r1
     36e:	ab01      	add	r3, sp, #4
     370:	4669      	mov	r1, sp
     372:	47b0      	blx	r6

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     374:	b011      	add	sp, #68	; 0x44
     376:	bdf0      	pop	{r4, r5, r6, r7, pc}
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     378:	4620      	mov	r0, r4
     37a:	a902      	add	r1, sp, #8
     37c:	4798      	blx	r3

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     37e:	b011      	add	sp, #68	; 0x44
     380:	bdf0      	pop	{r4, r5, r6, r7, pc}
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
            }
        }

        __attribute__((always_inline)) inline int size() { return mLen; }
     382:	9e03      	ldr	r6, [sp, #12]
  WS2812Serial *pserial;
  uint8_t *drawbuffer,*framebuffer;

  void _init(int nLeds) {
    if (pserial == NULL) {
      drawbuffer = (uint8_t*)malloc(nLeds * 3);
     384:	eb06 0746 	add.w	r7, r6, r6, lsl #1
     388:	4638      	mov	r0, r7
     38a:	f004 fa31 	bl	47f0 <malloc>
     38e:	61e0      	str	r0, [r4, #28]
      framebuffer = (uint8_t*)malloc(nLeds * 12);
     390:	00b8      	lsls	r0, r7, #2
     392:	f004 fa2d 	bl	47f0 <malloc>
     396:	6220      	str	r0, [r4, #32]
      pserial = new WS2812Serial(nLeds, framebuffer, drawbuffer, DATA_PIN, WS2812_RGB);
     398:	201c      	movs	r0, #28
     39a:	f003 fa27 	bl	37ec <operator new(unsigned int)>
     39e:	f04f 0e0e 	mov.w	lr, #14
     3a2:	6a27      	ldr	r7, [r4, #32]
     3a4:	22ff      	movs	r2, #255	; 0xff
     3a6:	69e1      	ldr	r1, [r4, #28]
     3a8:	61a0      	str	r0, [r4, #24]
     3aa:	8006      	strh	r6, [r0, #0]
     3ac:	70c5      	strb	r5, [r0, #3]
     3ae:	60c5      	str	r5, [r0, #12]
     3b0:	6105      	str	r5, [r0, #16]
     3b2:	6185      	str	r5, [r0, #24]
     3b4:	f880 e002 	strb.w	lr, [r0, #2]
     3b8:	6047      	str	r7, [r0, #4]
     3ba:	6081      	str	r1, [r0, #8]
     3bc:	7502      	strb	r2, [r0, #20]
      pserial->begin();
     3be:	f001 f8a3 	bl	1508 <WS2812Serial::begin()>
     3c2:	e739      	b.n	238 <CLEDController::clearLeds(int)+0x84>
     3c4:	000003d1 	.word	0x000003d1
     3c8:	000000bd 	.word	0x000000bd
     3cc:	20012b0c 	.word	0x20012b0c

000003d0 <CPixelLEDController<(EOrder)10, 8, 255ul>::showColor(CRGB const&, int, CRGB)>:

  /// set all the leds on the controller to a given color
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
     3d0:	b5f0      	push	{r4, r5, r6, r7, lr}
     3d2:	4604      	mov	r4, r0
     3d4:	b08f      	sub	sp, #60	; 0x3c

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
     3d6:	785d      	ldrb	r5, [r3, #1]
        b = rhs.b;
     3d8:	7898      	ldrb	r0, [r3, #2]
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     3da:	9100      	str	r1, [sp, #0]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     3dc:	7819      	ldrb	r1, [r3, #0]
     3de:	7ca3      	ldrb	r3, [r4, #18]
     3e0:	9201      	str	r2, [sp, #4]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     3e2:	2b01      	cmp	r3, #1
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     3e4:	9202      	str	r2, [sp, #8]
     3e6:	f88d 1012 	strb.w	r1, [sp, #18]
        g = rhs.g;
     3ea:	f88d 5013 	strb.w	r5, [sp, #19]
        b = rhs.b;
     3ee:	f88d 0014 	strb.w	r0, [sp, #20]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     3f2:	d07d      	beq.n	4f0 <CPixelLEDController<(EOrder)10, 8, 255ul>::showColor(CRGB const&, int, CRGB)+0x120>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     3f4:	2300      	movs	r3, #0
     3f6:	f88d 3011 	strb.w	r3, [sp, #17]
     3fa:	f88d 3010 	strb.w	r3, [sp, #16]
     3fe:	f88d 300f 	strb.w	r3, [sp, #15]
     402:	f88d 300e 	strb.w	r3, [sp, #14]
     406:	f88d 300d 	strb.w	r3, [sp, #13]
     40a:	f88d 300c 	strb.w	r3, [sp, #12]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     40e:	2000      	movs	r0, #0
     410:	ab05      	add	r3, sp, #20
     412:	a90d      	add	r1, sp, #52	; 0x34
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     414:	4602      	mov	r2, r0
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     416:	f88d 0015 	strb.w	r0, [sp, #21]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     41a:	f843 2f04 	str.w	r2, [r3, #4]!

        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
     41e:	428b      	cmp	r3, r1
     420:	d1fb      	bne.n	41a <CPixelLEDController<(EOrder)10, 8, 255ul>::showColor(CRGB const&, int, CRGB)+0x4a>
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     422:	6823      	ldr	r3, [r4, #0]
     424:	4a61      	ldr	r2, [pc, #388]	; (5ac <CPixelLEDController<(EOrder)10, 8, 255ul>::showColor(CRGB const&, int, CRGB)+0x1dc>)
     426:	699b      	ldr	r3, [r3, #24]
     428:	4293      	cmp	r3, r2
     42a:	f040 8099 	bne.w	560 <CPixelLEDController<(EOrder)10, 8, 255ul>::showColor(CRGB const&, int, CRGB)+0x190>
class CWS2812SerialController : public CPixelLEDController<RGB_ORDER, 8, 0xFF> {
  WS2812Serial *pserial;
  uint8_t *drawbuffer,*framebuffer;

  void _init(int nLeds) {
    if (pserial == NULL) {
     42e:	69a5      	ldr	r5, [r4, #24]
     430:	2d00      	cmp	r5, #0
     432:	f000 809a 	beq.w	56a <CPixelLEDController<(EOrder)10, 8, 255ul>::showColor(CRGB const&, int, CRGB)+0x19a>
  virtual void showPixels(PixelController<RGB_ORDER, 8, 0xFF> & pixels) {
    _init(pixels.size());

    uint8_t *p = drawbuffer;

    while(pixels.has(1)) {
     436:	9b02      	ldr	r3, [sp, #8]
  virtual void init() { /* do nothing yet */ }

  virtual void showPixels(PixelController<RGB_ORDER, 8, 0xFF> & pixels) {
    _init(pixels.size());

    uint8_t *p = drawbuffer;
     438:	69e2      	ldr	r2, [r4, #28]

    while(pixels.has(1)) {
     43a:	2b00      	cmp	r3, #0
     43c:	dd53      	ble.n	4e6 <CPixelLEDController<(EOrder)10, 8, 255ul>::showColor(CRGB const&, int, CRGB)+0x116>
     43e:	3203      	adds	r2, #3
     440:	9b00      	ldr	r3, [sp, #0]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
     442:	7819      	ldrb	r1, [r3, #0]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
     444:	460b      	mov	r3, r1
     446:	b129      	cbz	r1, 454 <CPixelLEDController<(EOrder)10, 8, 255ul>::showColor(CRGB const&, int, CRGB)+0x84>
/// @param j - second byte to add
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
     448:	f89d 300c 	ldrb.w	r3, [sp, #12]
     44c:	440b      	add	r3, r1
    if( t > 255) t = 255;
     44e:	2bff      	cmp	r3, #255	; 0xff
     450:	bfa8      	it	ge
     452:	23ff      	movge	r3, #255	; 0xff
      *p++ = pixels.loadAndScale0();
     454:	f89d 1012 	ldrb.w	r1, [sp, #18]
     458:	fb01 3303 	mla	r3, r1, r3, r3
     45c:	121b      	asrs	r3, r3, #8
     45e:	f802 3c03 	strb.w	r3, [r2, #-3]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
     462:	9b00      	ldr	r3, [sp, #0]
     464:	7859      	ldrb	r1, [r3, #1]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
     466:	460b      	mov	r3, r1
     468:	b129      	cbz	r1, 476 <CPixelLEDController<(EOrder)10, 8, 255ul>::showColor(CRGB const&, int, CRGB)+0xa6>
/// @param j - second byte to add
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
     46a:	f89d 300d 	ldrb.w	r3, [sp, #13]
     46e:	440b      	add	r3, r1
    if( t > 255) t = 255;
     470:	2bff      	cmp	r3, #255	; 0xff
     472:	bfa8      	it	ge
     474:	23ff      	movge	r3, #255	; 0xff
      *p++ = pixels.loadAndScale1();
     476:	f89d 1013 	ldrb.w	r1, [sp, #19]
     47a:	fb01 3303 	mla	r3, r1, r3, r3
     47e:	121b      	asrs	r3, r3, #8
     480:	f802 3c02 	strb.w	r3, [r2, #-2]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
     484:	9b00      	ldr	r3, [sp, #0]
     486:	7899      	ldrb	r1, [r3, #2]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
     488:	460b      	mov	r3, r1
     48a:	b129      	cbz	r1, 498 <CPixelLEDController<(EOrder)10, 8, 255ul>::showColor(CRGB const&, int, CRGB)+0xc8>
/// @param j - second byte to add
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
     48c:	f89d 300e 	ldrb.w	r3, [sp, #14]
     490:	440b      	add	r3, r1
    if( t > 255) t = 255;
     492:	2bff      	cmp	r3, #255	; 0xff
     494:	bfa8      	it	ge
     496:	23ff      	movge	r3, #255	; 0xff
      *p++ = pixels.loadAndScale2();
     498:	f89d 1014 	ldrb.w	r1, [sp, #20]
     49c:	3203      	adds	r2, #3
     49e:	fb01 3303 	mla	r3, r1, r3, r3
     4a2:	121b      	asrs	r3, r3, #8
     4a4:	f802 3c04 	strb.w	r3, [r2, #-4]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     4a8:	f89d 100f 	ldrb.w	r1, [sp, #15]
     4ac:	f89d 700c 	ldrb.w	r7, [sp, #12]
                d[1] = e[1] - d[1];
                d[2] = e[2] - d[2];
     4b0:	f89d 000e 	ldrb.w	r0, [sp, #14]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     4b4:	1bcf      	subs	r7, r1, r7
                d[1] = e[1] - d[1];
                d[2] = e[2] - d[2];
     4b6:	f89d 1011 	ldrb.w	r1, [sp, #17]
        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
                d[1] = e[1] - d[1];
     4ba:	f89d 3010 	ldrb.w	r3, [sp, #16]
     4be:	f89d 500d 	ldrb.w	r5, [sp, #13]
                d[2] = e[2] - d[2];
     4c2:	1a08      	subs	r0, r1, r0

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     4c4:	9902      	ldr	r1, [sp, #8]
        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
                d[1] = e[1] - d[1];
     4c6:	1b5d      	subs	r5, r3, r5

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     4c8:	9e00      	ldr	r6, [sp, #0]
     4ca:	3901      	subs	r1, #1
     4cc:	f99d 3015 	ldrsb.w	r3, [sp, #21]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     4d0:	f88d 700c 	strb.w	r7, [sp, #12]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     4d4:	4433      	add	r3, r6
  virtual void showPixels(PixelController<RGB_ORDER, 8, 0xFF> & pixels) {
    _init(pixels.size());

    uint8_t *p = drawbuffer;

    while(pixels.has(1)) {
     4d6:	2900      	cmp	r1, #0
        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
                d[1] = e[1] - d[1];
     4d8:	f88d 500d 	strb.w	r5, [sp, #13]
                d[2] = e[2] - d[2];
     4dc:	f88d 000e 	strb.w	r0, [sp, #14]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     4e0:	9300      	str	r3, [sp, #0]
     4e2:	9102      	str	r1, [sp, #8]
     4e4:	dcad      	bgt.n	442 <CPixelLEDController<(EOrder)10, 8, 255ul>::showColor(CRGB const&, int, CRGB)+0x72>
      *p++ = pixels.loadAndScale1();
      *p++ = pixels.loadAndScale2();
      pixels.stepDithering();
      pixels.advanceData();
    }
    pserial->show();
     4e6:	69a0      	ldr	r0, [r4, #24]
     4e8:	f001 f8ee 	bl	16c8 <WS2812Serial::show()>
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
  }
     4ec:	b00f      	add	sp, #60	; 0x3c
     4ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     4f0:	4a2f      	ldr	r2, [pc, #188]	; (5b0 <CPixelLEDController<(EOrder)10, 8, 255ul>::showColor(CRGB const&, int, CRGB)+0x1e0>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     4f2:	7813      	ldrb	r3, [r2, #0]
     4f4:	3301      	adds	r3, #1
     4f6:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     4fa:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     4fe:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     500:	bf14      	ite	ne
     502:	2280      	movne	r2, #128	; 0x80
     504:	2200      	moveq	r2, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     506:	0798      	lsls	r0, r3, #30
     508:	d502      	bpl.n	510 <CPixelLEDController<(EOrder)10, 8, 255ul>::showColor(CRGB const&, int, CRGB)+0x140>
     50a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     50e:	b2d2      	uxtb	r2, r2
                if(R & 0x04) { Q |= 0x20; }
     510:	075b      	lsls	r3, r3, #29
     512:	f10d 0712 	add.w	r7, sp, #18
     516:	f10d 030f 	add.w	r3, sp, #15
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     51a:	f44f 7e80 	mov.w	lr, #256	; 0x100

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
                if(R & 0x04) { Q |= 0x20; }
     51e:	bf48      	it	mi
     520:	f042 0220 	orrmi.w	r2, r2, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     524:	3210      	adds	r2, #16
     526:	b2d2      	uxtb	r2, r2
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     528:	b1b1      	cbz	r1, 558 <CPixelLEDController<(EOrder)10, 8, 255ul>::showColor(CRGB const&, int, CRGB)+0x188>
     52a:	fb9e f1f1 	sdiv	r1, lr, r1
     52e:	b2c9      	uxtb	r1, r1
     530:	1c48      	adds	r0, r1, #1
     532:	b2c0      	uxtb	r0, r0
     534:	fb00 2502 	mla	r5, r0, r2, r2
     538:	7018      	strb	r0, [r3, #0]
     53a:	122d      	asrs	r5, r5, #8
     53c:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     53e:	b105      	cbz	r5, 542 <CPixelLEDController<(EOrder)10, 8, 255ul>::showColor(CRGB const&, int, CRGB)+0x172>
     540:	3e01      	subs	r6, #1
     542:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     546:	b100      	cbz	r0, 54a <CPixelLEDController<(EOrder)10, 8, 255ul>::showColor(CRGB const&, int, CRGB)+0x17a>
     548:	7019      	strb	r1, [r3, #0]
     54a:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     54c:	42bb      	cmp	r3, r7
     54e:	f43f af5e 	beq.w	40e <CPixelLEDController<(EOrder)10, 8, 255ul>::showColor(CRGB const&, int, CRGB)+0x3e>
     552:	78d9      	ldrb	r1, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     554:	2900      	cmp	r1, #0
     556:	d1e8      	bne.n	52a <CPixelLEDController<(EOrder)10, 8, 255ul>::showColor(CRGB const&, int, CRGB)+0x15a>
     558:	7019      	strb	r1, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     55a:	f803 1c03 	strb.w	r1, [r3, #-3]
     55e:	e7f4      	b.n	54a <CPixelLEDController<(EOrder)10, 8, 255ul>::showColor(CRGB const&, int, CRGB)+0x17a>
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     560:	4620      	mov	r0, r4
     562:	4669      	mov	r1, sp
     564:	4798      	blx	r3
  }
     566:	b00f      	add	sp, #60	; 0x3c
     568:	bdf0      	pop	{r4, r5, r6, r7, pc}
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
            }
        }

        __attribute__((always_inline)) inline int size() { return mLen; }
     56a:	9e01      	ldr	r6, [sp, #4]
  WS2812Serial *pserial;
  uint8_t *drawbuffer,*framebuffer;

  void _init(int nLeds) {
    if (pserial == NULL) {
      drawbuffer = (uint8_t*)malloc(nLeds * 3);
     56c:	eb06 0746 	add.w	r7, r6, r6, lsl #1
     570:	4638      	mov	r0, r7
     572:	f004 f93d 	bl	47f0 <malloc>
     576:	61e0      	str	r0, [r4, #28]
      framebuffer = (uint8_t*)malloc(nLeds * 12);
     578:	00b8      	lsls	r0, r7, #2
     57a:	f004 f939 	bl	47f0 <malloc>
     57e:	6220      	str	r0, [r4, #32]
      pserial = new WS2812Serial(nLeds, framebuffer, drawbuffer, DATA_PIN, WS2812_RGB);
     580:	201c      	movs	r0, #28
     582:	f003 f933 	bl	37ec <operator new(unsigned int)>
     586:	f04f 0e0e 	mov.w	lr, #14
     58a:	6a27      	ldr	r7, [r4, #32]
     58c:	22ff      	movs	r2, #255	; 0xff
     58e:	69e1      	ldr	r1, [r4, #28]
     590:	61a0      	str	r0, [r4, #24]
     592:	8006      	strh	r6, [r0, #0]
     594:	70c5      	strb	r5, [r0, #3]
     596:	60c5      	str	r5, [r0, #12]
     598:	6105      	str	r5, [r0, #16]
     59a:	6185      	str	r5, [r0, #24]
     59c:	f880 e002 	strb.w	lr, [r0, #2]
     5a0:	6047      	str	r7, [r0, #4]
     5a2:	6081      	str	r1, [r0, #8]
     5a4:	7502      	strb	r2, [r0, #20]
      pserial->begin();
     5a6:	f000 ffaf 	bl	1508 <WS2812Serial::begin()>
     5aa:	e744      	b.n	436 <CPixelLEDController<(EOrder)10, 8, 255ul>::showColor(CRGB const&, int, CRGB)+0x66>
     5ac:	000000bd 	.word	0x000000bd
     5b0:	20012b0c 	.word	0x20012b0c

000005b4 <CPixelLEDController<(EOrder)10, 8, 255ul>::show(CRGB const*, int, CRGB)>:

/// write the passed in rgb data out to the leds managed by this controller
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
     5b4:	b5f0      	push	{r4, r5, r6, r7, lr}
     5b6:	4604      	mov	r4, r0
     5b8:	b08f      	sub	sp, #60	; 0x3c

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
     5ba:	785d      	ldrb	r5, [r3, #1]
        b = rhs.b;
     5bc:	7898      	ldrb	r0, [r3, #2]
            mData += skip;
            mAdvance = (advance) ? 3+skip : 0;
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
     5be:	9100      	str	r1, [sp, #0]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     5c0:	7819      	ldrb	r1, [r3, #0]
     5c2:	7ca3      	ldrb	r3, [r4, #18]
     5c4:	9201      	str	r2, [sp, #4]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     5c6:	2b01      	cmp	r3, #1
            mData += skip;
            mAdvance = (advance) ? 3+skip : 0;
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
     5c8:	9202      	str	r2, [sp, #8]
     5ca:	f88d 1012 	strb.w	r1, [sp, #18]
        g = rhs.g;
     5ce:	f88d 5013 	strb.w	r5, [sp, #19]
        b = rhs.b;
     5d2:	f88d 0014 	strb.w	r0, [sp, #20]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     5d6:	f000 8082 	beq.w	6de <CPixelLEDController<(EOrder)10, 8, 255ul>::show(CRGB const*, int, CRGB)+0x12a>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     5da:	2300      	movs	r3, #0
     5dc:	f88d 3011 	strb.w	r3, [sp, #17]
     5e0:	f88d 3010 	strb.w	r3, [sp, #16]
     5e4:	f88d 300f 	strb.w	r3, [sp, #15]
     5e8:	f88d 300e 	strb.w	r3, [sp, #14]
     5ec:	f88d 300d 	strb.w	r3, [sp, #13]
     5f0:	f88d 300c 	strb.w	r3, [sp, #12]
            for(int i = 0; i < LANES; i++) { mOffsets[i] = other.mOffsets[i]; }

        }

        void initOffsets(int len) {
          int nOffset = 0;
     5f4:	2300      	movs	r3, #0
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
     5f6:	2503      	movs	r5, #3
     5f8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
     5fc:	a805      	add	r0, sp, #20

        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
     5fe:	4619      	mov	r1, r3
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
     600:	f88d 5015 	strb.w	r5, [sp, #21]

        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
     604:	3101      	adds	r1, #1
            mOffsets[i] = nOffset;
     606:	f840 3f04 	str.w	r3, [r0, #4]!
            if((1<<i) & MASK) { nOffset += (len * mAdvance); }
     60a:	4413      	add	r3, r2

        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
     60c:	2908      	cmp	r1, #8
     60e:	d1f9      	bne.n	604 <CPixelLEDController<(EOrder)10, 8, 255ul>::show(CRGB const*, int, CRGB)+0x50>
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     610:	6823      	ldr	r3, [r4, #0]
     612:	4a63      	ldr	r2, [pc, #396]	; (7a0 <CPixelLEDController<(EOrder)10, 8, 255ul>::show(CRGB const*, int, CRGB)+0x1ec>)
     614:	699b      	ldr	r3, [r3, #24]
     616:	4293      	cmp	r3, r2
     618:	f040 809b 	bne.w	752 <CPixelLEDController<(EOrder)10, 8, 255ul>::show(CRGB const*, int, CRGB)+0x19e>
class CWS2812SerialController : public CPixelLEDController<RGB_ORDER, 8, 0xFF> {
  WS2812Serial *pserial;
  uint8_t *drawbuffer,*framebuffer;

  void _init(int nLeds) {
    if (pserial == NULL) {
     61c:	69a5      	ldr	r5, [r4, #24]
     61e:	2d00      	cmp	r5, #0
     620:	f000 809c 	beq.w	75c <CPixelLEDController<(EOrder)10, 8, 255ul>::show(CRGB const*, int, CRGB)+0x1a8>
  virtual void showPixels(PixelController<RGB_ORDER, 8, 0xFF> & pixels) {
    _init(pixels.size());

    uint8_t *p = drawbuffer;

    while(pixels.has(1)) {
     624:	9b02      	ldr	r3, [sp, #8]
  virtual void init() { /* do nothing yet */ }

  virtual void showPixels(PixelController<RGB_ORDER, 8, 0xFF> & pixels) {
    _init(pixels.size());

    uint8_t *p = drawbuffer;
     626:	69e2      	ldr	r2, [r4, #28]

    while(pixels.has(1)) {
     628:	2b00      	cmp	r3, #0
     62a:	dd53      	ble.n	6d4 <CPixelLEDController<(EOrder)10, 8, 255ul>::show(CRGB const*, int, CRGB)+0x120>
     62c:	3203      	adds	r2, #3
     62e:	9b00      	ldr	r3, [sp, #0]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
     630:	7819      	ldrb	r1, [r3, #0]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
     632:	460b      	mov	r3, r1
     634:	b129      	cbz	r1, 642 <CPixelLEDController<(EOrder)10, 8, 255ul>::show(CRGB const*, int, CRGB)+0x8e>
/// @param j - second byte to add
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
     636:	f89d 300c 	ldrb.w	r3, [sp, #12]
     63a:	440b      	add	r3, r1
    if( t > 255) t = 255;
     63c:	2bff      	cmp	r3, #255	; 0xff
     63e:	bfa8      	it	ge
     640:	23ff      	movge	r3, #255	; 0xff
      *p++ = pixels.loadAndScale0();
     642:	f89d 1012 	ldrb.w	r1, [sp, #18]
     646:	fb01 3303 	mla	r3, r1, r3, r3
     64a:	121b      	asrs	r3, r3, #8
     64c:	f802 3c03 	strb.w	r3, [r2, #-3]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
     650:	9b00      	ldr	r3, [sp, #0]
     652:	7859      	ldrb	r1, [r3, #1]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
     654:	460b      	mov	r3, r1
     656:	b129      	cbz	r1, 664 <CPixelLEDController<(EOrder)10, 8, 255ul>::show(CRGB const*, int, CRGB)+0xb0>
/// @param j - second byte to add
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
     658:	f89d 300d 	ldrb.w	r3, [sp, #13]
     65c:	440b      	add	r3, r1
    if( t > 255) t = 255;
     65e:	2bff      	cmp	r3, #255	; 0xff
     660:	bfa8      	it	ge
     662:	23ff      	movge	r3, #255	; 0xff
      *p++ = pixels.loadAndScale1();
     664:	f89d 1013 	ldrb.w	r1, [sp, #19]
     668:	fb01 3303 	mla	r3, r1, r3, r3
     66c:	121b      	asrs	r3, r3, #8
     66e:	f802 3c02 	strb.w	r3, [r2, #-2]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
     672:	9b00      	ldr	r3, [sp, #0]
     674:	7899      	ldrb	r1, [r3, #2]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
     676:	460b      	mov	r3, r1
     678:	b129      	cbz	r1, 686 <CPixelLEDController<(EOrder)10, 8, 255ul>::show(CRGB const*, int, CRGB)+0xd2>
/// @param j - second byte to add
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
     67a:	f89d 300e 	ldrb.w	r3, [sp, #14]
     67e:	440b      	add	r3, r1
    if( t > 255) t = 255;
     680:	2bff      	cmp	r3, #255	; 0xff
     682:	bfa8      	it	ge
     684:	23ff      	movge	r3, #255	; 0xff
      *p++ = pixels.loadAndScale2();
     686:	f89d 1014 	ldrb.w	r1, [sp, #20]
     68a:	3203      	adds	r2, #3
     68c:	fb01 3303 	mla	r3, r1, r3, r3
     690:	121b      	asrs	r3, r3, #8
     692:	f802 3c04 	strb.w	r3, [r2, #-4]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     696:	f89d 100f 	ldrb.w	r1, [sp, #15]
     69a:	f89d 700c 	ldrb.w	r7, [sp, #12]
                d[1] = e[1] - d[1];
                d[2] = e[2] - d[2];
     69e:	f89d 000e 	ldrb.w	r0, [sp, #14]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     6a2:	1bcf      	subs	r7, r1, r7
                d[1] = e[1] - d[1];
                d[2] = e[2] - d[2];
     6a4:	f89d 1011 	ldrb.w	r1, [sp, #17]
        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
                d[1] = e[1] - d[1];
     6a8:	f89d 3010 	ldrb.w	r3, [sp, #16]
     6ac:	f89d 500d 	ldrb.w	r5, [sp, #13]
                d[2] = e[2] - d[2];
     6b0:	1a08      	subs	r0, r1, r0

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     6b2:	9902      	ldr	r1, [sp, #8]
        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
                d[1] = e[1] - d[1];
     6b4:	1b5d      	subs	r5, r3, r5

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     6b6:	9e00      	ldr	r6, [sp, #0]
     6b8:	3901      	subs	r1, #1
     6ba:	f99d 3015 	ldrsb.w	r3, [sp, #21]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     6be:	f88d 700c 	strb.w	r7, [sp, #12]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     6c2:	4433      	add	r3, r6
  virtual void showPixels(PixelController<RGB_ORDER, 8, 0xFF> & pixels) {
    _init(pixels.size());

    uint8_t *p = drawbuffer;

    while(pixels.has(1)) {
     6c4:	2900      	cmp	r1, #0
        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
                d[1] = e[1] - d[1];
     6c6:	f88d 500d 	strb.w	r5, [sp, #13]
                d[2] = e[2] - d[2];
     6ca:	f88d 000e 	strb.w	r0, [sp, #14]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     6ce:	9300      	str	r3, [sp, #0]
     6d0:	9102      	str	r1, [sp, #8]
     6d2:	dcad      	bgt.n	630 <CPixelLEDController<(EOrder)10, 8, 255ul>::show(CRGB const*, int, CRGB)+0x7c>
      *p++ = pixels.loadAndScale1();
      *p++ = pixels.loadAndScale2();
      pixels.stepDithering();
      pixels.advanceData();
    }
    pserial->show();
     6d4:	69a0      	ldr	r0, [r4, #24]
     6d6:	f000 fff7 	bl	16c8 <WS2812Serial::show()>
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
  }
     6da:	b00f      	add	sp, #60	; 0x3c
     6dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     6de:	4831      	ldr	r0, [pc, #196]	; (7a4 <CPixelLEDController<(EOrder)10, 8, 255ul>::show(CRGB const*, int, CRGB)+0x1f0>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     6e0:	7803      	ldrb	r3, [r0, #0]
     6e2:	3301      	adds	r3, #1
     6e4:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     6e8:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     6ec:	7003      	strb	r3, [r0, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     6ee:	bf14      	ite	ne
     6f0:	2080      	movne	r0, #128	; 0x80
     6f2:	2000      	moveq	r0, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     6f4:	079d      	lsls	r5, r3, #30
     6f6:	d502      	bpl.n	6fe <CPixelLEDController<(EOrder)10, 8, 255ul>::show(CRGB const*, int, CRGB)+0x14a>
     6f8:	f040 0040 	orr.w	r0, r0, #64	; 0x40
     6fc:	b2c0      	uxtb	r0, r0
                if(R & 0x04) { Q |= 0x20; }
     6fe:	075b      	lsls	r3, r3, #29
     700:	f10d 0712 	add.w	r7, sp, #18
     704:	f10d 030f 	add.w	r3, sp, #15
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     708:	f44f 7e80 	mov.w	lr, #256	; 0x100

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
                if(R & 0x04) { Q |= 0x20; }
     70c:	bf48      	it	mi
     70e:	f040 0020 	orrmi.w	r0, r0, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     712:	3010      	adds	r0, #16
     714:	b2c0      	uxtb	r0, r0
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     716:	b1c1      	cbz	r1, 74a <CPixelLEDController<(EOrder)10, 8, 255ul>::show(CRGB const*, int, CRGB)+0x196>
     718:	fb9e f1f1 	sdiv	r1, lr, r1
     71c:	b2c9      	uxtb	r1, r1
     71e:	1c4d      	adds	r5, r1, #1
     720:	b2ed      	uxtb	r5, r5
     722:	fb05 0600 	mla	r6, r5, r0, r0
     726:	701d      	strb	r5, [r3, #0]
     728:	1236      	asrs	r6, r6, #8
     72a:	fa5f fc86 	uxtb.w	ip, r6
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     72e:	b10e      	cbz	r6, 734 <CPixelLEDController<(EOrder)10, 8, 255ul>::show(CRGB const*, int, CRGB)+0x180>
     730:	f10c 3cff 	add.w	ip, ip, #4294967295
     734:	f803 cc03 	strb.w	ip, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     738:	b105      	cbz	r5, 73c <CPixelLEDController<(EOrder)10, 8, 255ul>::show(CRGB const*, int, CRGB)+0x188>
     73a:	7019      	strb	r1, [r3, #0]
     73c:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     73e:	42bb      	cmp	r3, r7
     740:	f43f af58 	beq.w	5f4 <CPixelLEDController<(EOrder)10, 8, 255ul>::show(CRGB const*, int, CRGB)+0x40>
     744:	78d9      	ldrb	r1, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     746:	2900      	cmp	r1, #0
     748:	d1e6      	bne.n	718 <CPixelLEDController<(EOrder)10, 8, 255ul>::show(CRGB const*, int, CRGB)+0x164>
     74a:	7019      	strb	r1, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     74c:	f803 1c03 	strb.w	r1, [r3, #-3]
     750:	e7f4      	b.n	73c <CPixelLEDController<(EOrder)10, 8, 255ul>::show(CRGB const*, int, CRGB)+0x188>
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     752:	4620      	mov	r0, r4
     754:	4669      	mov	r1, sp
     756:	4798      	blx	r3
  }
     758:	b00f      	add	sp, #60	; 0x3c
     75a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
            }
        }

        __attribute__((always_inline)) inline int size() { return mLen; }
     75c:	9e01      	ldr	r6, [sp, #4]
  WS2812Serial *pserial;
  uint8_t *drawbuffer,*framebuffer;

  void _init(int nLeds) {
    if (pserial == NULL) {
      drawbuffer = (uint8_t*)malloc(nLeds * 3);
     75e:	eb06 0746 	add.w	r7, r6, r6, lsl #1
     762:	4638      	mov	r0, r7
     764:	f004 f844 	bl	47f0 <malloc>
     768:	61e0      	str	r0, [r4, #28]
      framebuffer = (uint8_t*)malloc(nLeds * 12);
     76a:	00b8      	lsls	r0, r7, #2
     76c:	f004 f840 	bl	47f0 <malloc>
     770:	6220      	str	r0, [r4, #32]
      pserial = new WS2812Serial(nLeds, framebuffer, drawbuffer, DATA_PIN, WS2812_RGB);
     772:	201c      	movs	r0, #28
     774:	f003 f83a 	bl	37ec <operator new(unsigned int)>
     778:	f04f 0e0e 	mov.w	lr, #14
     77c:	6a27      	ldr	r7, [r4, #32]
     77e:	22ff      	movs	r2, #255	; 0xff
     780:	69e1      	ldr	r1, [r4, #28]
     782:	61a0      	str	r0, [r4, #24]
     784:	8006      	strh	r6, [r0, #0]
     786:	70c5      	strb	r5, [r0, #3]
     788:	60c5      	str	r5, [r0, #12]
     78a:	6105      	str	r5, [r0, #16]
     78c:	6185      	str	r5, [r0, #24]
     78e:	f880 e002 	strb.w	lr, [r0, #2]
     792:	6047      	str	r7, [r0, #4]
     794:	6081      	str	r1, [r0, #8]
     796:	7502      	strb	r2, [r0, #20]
      pserial->begin();
     798:	f000 feb6 	bl	1508 <WS2812Serial::begin()>
     79c:	e742      	b.n	624 <CPixelLEDController<(EOrder)10, 8, 255ul>::show(CRGB const*, int, CRGB)+0x70>
     79e:	bf00      	nop
     7a0:	000000bd 	.word	0x000000bd
     7a4:	20012b0c 	.word	0x20012b0c

000007a8 <setup>:
double rms;
double peak;

arm_rfft_instance_q15 fftInstance;

void setup() {
     7a8:	b570      	push	{r4, r5, r6, lr}
     7aa:	f640 31b8 	movw	r1, #3000	; 0xbb8
     7ae:	4843      	ldr	r0, [pc, #268]	; (8bc <setup+0x114>)
     7b0:	f000 fde4 	bl	137c <VisualMicroDebug::init(unsigned long)>
     7b4:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
     7b8:	4840      	ldr	r0, [pc, #256]	; (8bc <setup+0x114>)
     7ba:	f000 fddb 	bl	1374 <VisualMicroDebug::begin(unsigned long)>
     7be:	2101      	movs	r1, #1
     7c0:	483e      	ldr	r0, [pc, #248]	; (8bc <setup+0x114>)
     7c2:	f000 fdb9 	bl	1338 <VisualMicroDebug::outPacketStart(bool)>
     7c6:	2800      	cmp	r0, #0
     7c8:	d16a      	bne.n	8a0 <setup+0xf8>
     7ca:	2100      	movs	r1, #0
     7cc:	483b      	ldr	r0, [pc, #236]	; (8bc <setup+0x114>)
     7ce:	2201      	movs	r2, #1
     7d0:	f000 fe72 	bl	14b8 <VisualMicroDebug::start(bool, bool)>
     7d4:	2101      	movs	r1, #1
     7d6:	4839      	ldr	r0, [pc, #228]	; (8bc <setup+0x114>)
     7d8:	f000 fdae 	bl	1338 <VisualMicroDebug::outPacketStart(bool)>
     7dc:	b130      	cbz	r0, 7ec <setup+0x44>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     7de:	2106      	movs	r1, #6
     7e0:	4837      	ldr	r0, [pc, #220]	; (8c0 <setup+0x118>)
     7e2:	f002 fef5 	bl	35d0 <usb_serial_write>
     7e6:	4835      	ldr	r0, [pc, #212]	; (8bc <setup+0x114>)
     7e8:	f000 fdc2 	bl	1370 <VisualMicroDebug::outPacketEnd()>
    pinMode(A1, INPUT);
     7ec:	2100      	movs	r1, #0
     7ee:	200f      	movs	r0, #15
     7f0:	f001 fd08 	bl	2204 <pinMode>
    pinMode(dataPin, OUTPUT);
     7f4:	200e      	movs	r0, #14
     7f6:	2101      	movs	r1, #1
     7f8:	f001 fd04 	bl	2204 <pinMode>

#ifdef USE_WS2812SERIAL
	template<SWS2812 CHIPSET, int DATA_PIN, EOrder RGB_ORDER>
	static CLEDController &addLeds(struct CRGB *data, int nLedsOrOffset, int nLedsIfOffset = 0)
	{
		static CWS2812SerialController<DATA_PIN,RGB_ORDER> controller;
     7fc:	4831      	ldr	r0, [pc, #196]	; (8c4 <setup+0x11c>)
     7fe:	6803      	ldr	r3, [r0, #0]
     800:	f013 0201 	ands.w	r2, r3, #1
     804:	d11b      	bne.n	83e <setup+0x96>

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
     806:	4c30      	ldr	r4, [pc, #192]	; (8c8 <setup+0x120>)
    {
    }

    /// allow construction from a LEDColorCorrection enum
    inline CRGB( LEDColorCorrection colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     808:	21ff      	movs	r1, #255	; 0xff
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
     80a:	4b30      	ldr	r3, [pc, #192]	; (8cc <setup+0x124>)
     80c:	2601      	movs	r6, #1
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
     80e:	6825      	ldr	r5, [r4, #0]
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
     810:	605a      	str	r2, [r3, #4]
     812:	615a      	str	r2, [r3, #20]
        m_pNext = NULL;
     814:	609a      	str	r2, [r3, #8]
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
     816:	749e      	strb	r6, [r3, #18]
     818:	7319      	strb	r1, [r3, #12]
     81a:	7359      	strb	r1, [r3, #13]
     81c:	7399      	strb	r1, [r3, #14]

    }

    /// allow construction from a ColorTemperature enum
    inline CRGB( ColorTemperature colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     81e:	73d9      	strb	r1, [r3, #15]
     820:	7419      	strb	r1, [r3, #16]
     822:	7459      	strb	r1, [r3, #17]
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
     824:	2d00      	cmp	r5, #0
     826:	d047      	beq.n	8b8 <setup+0x110>
        if(m_pTail != NULL) { m_pTail->m_pNext = this; }
     828:	4a29      	ldr	r2, [pc, #164]	; (8d0 <setup+0x128>)
     82a:	6811      	ldr	r1, [r2, #0]
     82c:	b101      	cbz	r1, 830 <setup+0x88>
     82e:	608b      	str	r3, [r1, #8]
    }
  }
public:
  CWS2812SerialController() { pserial = NULL; }
     830:	4d28      	ldr	r5, [pc, #160]	; (8d4 <setup+0x12c>)
     832:	2400      	movs	r4, #0
     834:	2101      	movs	r1, #1
        m_pTail = this;
     836:	6013      	str	r3, [r2, #0]
     838:	601d      	str	r5, [r3, #0]
     83a:	619c      	str	r4, [r3, #24]
     83c:	6001      	str	r1, [r0, #0]
		return addLeds(&controller, data, nLedsOrOffset, nLedsIfOffset);
     83e:	2300      	movs	r3, #0
     840:	2275      	movs	r2, #117	; 0x75
     842:	4925      	ldr	r1, [pc, #148]	; (8d8 <setup+0x130>)
     844:	4821      	ldr	r0, [pc, #132]	; (8cc <setup+0x124>)
     846:	f001 f977 	bl	1b38 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>
	//@}
#endif

	/// Set the global brightness scaling
	/// @param scale a 0-255 value for how much to scale all leds before writing them out
	void setBrightness(uint8_t scale) { m_Scale = scale; }
     84a:	4b24      	ldr	r3, [pc, #144]	; (8dc <setup+0x134>)
     84c:	2254      	movs	r2, #84	; 0x54

    LEDS.addLeds<WS2812SERIAL, dataPin, RGB>(leds, numLeds);
    LEDS.setBrightness(84);

    // setup the ADC
    ADC0.setReference(ADC_REFERENCE::REF_3V3);
     84e:	2100      	movs	r1, #0
     850:	4823      	ldr	r0, [pc, #140]	; (8e0 <setup+0x138>)
     852:	701a      	strb	r2, [r3, #0]
     854:	f000 fab0 	bl	db8 <My_ADC::setReference(ADC_settings::ADC_REFERENCE)>
    ADC0.setResolution(12); // resolution of 12 bits
     858:	210c      	movs	r1, #12
     85a:	4821      	ldr	r0, [pc, #132]	; (8e0 <setup+0x138>)
     85c:	f000 fad0 	bl	e00 <My_ADC::setResolution(unsigned char)>
    ADC0.setConversionSpeed(ADC_CONVERSION_SPEED::ADACK_20); // ADC asynchronous clock 20 MHz
     860:	2104      	movs	r1, #4
     862:	481f      	ldr	r0, [pc, #124]	; (8e0 <setup+0x138>)
     864:	f000 fb10 	bl	e88 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)>
    ADC0.setSamplingSpeed(ADC_SAMPLING_SPEED::LOW_MED_SPEED); // 16 ADCK cycles
     868:	2102      	movs	r1, #2
     86a:	481d      	ldr	r0, [pc, #116]	; (8e0 <setup+0x138>)
     86c:	f000 fc30 	bl	10d0 <My_ADC::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)>
    ADC0.setAveraging(8); // take the average of 8 readings
     870:	2108      	movs	r1, #8
     872:	481b      	ldr	r0, [pc, #108]	; (8e0 <setup+0x138>)
     874:	f000 fc9a 	bl	11ac <My_ADC::setAveraging(unsigned char)>
    ADC0.recalibrate();
     878:	4819      	ldr	r0, [pc, #100]	; (8e0 <setup+0x138>)
     87a:	f000 fa89 	bl	d90 <My_ADC::recalibrate()>

    ADC0.setOffset(sampleBias, true); // remove sample bias from ADC result
     87e:	2201      	movs	r2, #1
     880:	f240 51f2 	movw	r1, #1522	; 0x5f2
     884:	4816      	ldr	r0, [pc, #88]	; (8e0 <setup+0x138>)
     886:	f000 fd13 	bl	12b0 <My_ADC::setOffset(short, bool)>
    ADC0.enableInterrupts(readAdc, ADC_IR_Priority);
     88a:	4916      	ldr	r1, [pc, #88]	; (8e4 <setup+0x13c>)
     88c:	4814      	ldr	r0, [pc, #80]	; (8e0 <setup+0x138>)
     88e:	2240      	movs	r2, #64	; 0x40
     890:	f000 fce2 	bl	1258 <My_ADC::enableInterrupts(void (*)(), unsigned char)>
    ADC0.startContinuous(A1);
     894:	210f      	movs	r1, #15
     896:	4812      	ldr	r0, [pc, #72]	; (8e0 <setup+0x138>)
}
     898:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ADC0.setAveraging(8); // take the average of 8 readings
    ADC0.recalibrate();

    ADC0.setOffset(sampleBias, true); // remove sample bias from ADC result
    ADC0.enableInterrupts(readAdc, ADC_IR_Priority);
    ADC0.startContinuous(A1);
     89c:	f000 bd10 	b.w	12c0 <My_ADC::startContinuous(unsigned char)>
     8a0:	2110      	movs	r1, #16
     8a2:	4811      	ldr	r0, [pc, #68]	; (8e8 <setup+0x140>)
     8a4:	f002 fe94 	bl	35d0 <usb_serial_write>
double rms;
double peak;

arm_rfft_instance_q15 fftInstance;

void setup() {
     8a8:	210a      	movs	r1, #10
     8aa:	4804      	ldr	r0, [pc, #16]	; (8bc <setup+0x114>)
     8ac:	f000 fd38 	bl	1320 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>
     8b0:	4802      	ldr	r0, [pc, #8]	; (8bc <setup+0x114>)
     8b2:	f000 fd5d 	bl	1370 <VisualMicroDebug::outPacketEnd()>
     8b6:	e788      	b.n	7ca <setup+0x22>

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
     8b8:	6023      	str	r3, [r4, #0]
     8ba:	e7b5      	b.n	828 <setup+0x80>
     8bc:	20022d48 	.word	0x20022d48
     8c0:	20000038 	.word	0x20000038
     8c4:	20012b10 	.word	0x20012b10
     8c8:	20022da0 	.word	0x20022da0
     8cc:	20012b14 	.word	0x20012b14
     8d0:	20022db0 	.word	0x20022db0
     8d4:	20000008 	.word	0x20000008
     8d8:	20012b38 	.word	0x20012b38
     8dc:	20022d90 	.word	0x20022d90
     8e0:	20022cd4 	.word	0x20022cd4
     8e4:	00000085 	.word	0x00000085
     8e8:	20000024 	.word	0x20000024

000008ec <loop>:
void loop() {
    // long micros1, micros2;
    // micros1 = micros();
    // Sample window = 75.4 ms, fundamental frequency 13.3 Hz (4 readings)
    // Sample window = 150.7 ms, fundamental frequency 6.63 Hz (8 readings)
    if (sampleCounter == N_SAMPLES - 1) {
     8ec:	49d1      	ldr	r1, [pc, #836]	; (c34 <loop+0x348>)
     8ee:	f641 73ff 	movw	r3, #8191	; 0x1fff
     8f2:	680a      	ldr	r2, [r1, #0]
     8f4:	429a      	cmp	r2, r3
     8f6:	d000      	beq.n	8fa <loop+0xe>
     8f8:	4770      	bx	lr
     8fa:	4bcf      	ldr	r3, [pc, #828]	; (c38 <loop+0x34c>)
     8fc:	4acf      	ldr	r2, [pc, #828]	; (c3c <loop+0x350>)
     8fe:	f503 4080 	add.w	r0, r3, #16384	; 0x4000
    ADC0.setOffset(sampleBias, true); // remove sample bias from ADC result
    ADC0.enableInterrupts(readAdc, ADC_IR_Priority);
    ADC0.startContinuous(A1);
}

void loop() {
     902:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    // micros1 = micros();
    // Sample window = 75.4 ms, fundamental frequency 13.3 Hz (4 readings)
    // Sample window = 150.7 ms, fundamental frequency 6.63 Hz (8 readings)
    if (sampleCounter == N_SAMPLES - 1) {
        // ADC0.stopContinuous();
        sampleCounter = 0;
     906:	2400      	movs	r4, #0
    ADC0.setOffset(sampleBias, true); // remove sample bias from ADC result
    ADC0.enableInterrupts(readAdc, ADC_IR_Priority);
    ADC0.startContinuous(A1);
}

void loop() {
     908:	b085      	sub	sp, #20
    // micros1 = micros();
    // Sample window = 75.4 ms, fundamental frequency 13.3 Hz (4 readings)
    // Sample window = 150.7 ms, fundamental frequency 6.63 Hz (8 readings)
    if (sampleCounter == N_SAMPLES - 1) {
        // ADC0.stopContinuous();
        sampleCounter = 0;
     90a:	600c      	str	r4, [r1, #0]

        // copy samples over to fft array
        for (int i = 0; i < N_SAMPLES; i++) {
            fftSamples[i] = samples[i];
     90c:	f833 1f02 	ldrh.w	r1, [r3, #2]!
    if (sampleCounter == N_SAMPLES - 1) {
        // ADC0.stopContinuous();
        sampleCounter = 0;

        // copy samples over to fft array
        for (int i = 0; i < N_SAMPLES; i++) {
     910:	4283      	cmp	r3, r0
            fftSamples[i] = samples[i];
     912:	f822 1f02 	strh.w	r1, [r2, #2]!
    if (sampleCounter == N_SAMPLES - 1) {
        // ADC0.stopContinuous();
        sampleCounter = 0;

        // copy samples over to fft array
        for (int i = 0; i < N_SAMPLES; i++) {
     916:	d1f9      	bne.n	90c <loop+0x20>
            fftSamples[i] = samples[i];
        }

        arm_rfft_init_q15(&fftInstance, N_SAMPLES, 0, 1);
     918:	2301      	movs	r3, #1
     91a:	2200      	movs	r2, #0
     91c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
     920:	48c7      	ldr	r0, [pc, #796]	; (c40 <loop+0x354>)
     922:	f003 f9c3 	bl	3cac <arm_rfft_init_q15>
        arm_rfft_q15(&fftInstance, fftSamples, fftOutput); // Q13.3 output format
     926:	4ac7      	ldr	r2, [pc, #796]	; (c44 <loop+0x358>)
     928:	49c7      	ldr	r1, [pc, #796]	; (c48 <loop+0x35c>)
        bass[0] = 0;
        bass[1] = 0;
        mid[0] = 0;
        mid[1] = 0;
        treble[0] = 0;
        treble[1] = 0;
     92a:	f04f 0a00 	mov.w	sl, #0
        for (int i = 0; i < N_SAMPLES; i++) {
            fftSamples[i] = samples[i];
        }

        arm_rfft_init_q15(&fftInstance, N_SAMPLES, 0, 1);
        arm_rfft_q15(&fftInstance, fftSamples, fftOutput); // Q13.3 output format
     92e:	48c4      	ldr	r0, [pc, #784]	; (c40 <loop+0x354>)
     930:	f003 f95c 	bl	3bec <arm_rfft_q15>
     934:	f8df e30c 	ldr.w	lr, [pc, #780]	; c44 <loop+0x358>
        bass[0] = 0;
        bass[1] = 0;
        mid[0] = 0;
        mid[1] = 0;
        treble[0] = 0;
        treble[1] = 0;
     938:	2302      	movs	r3, #2
     93a:	46d3      	mov	fp, sl
     93c:	4672      	mov	r2, lr
        for (iFFT = 2; (iFFT >> 1) * fundamentalFreq < bassUpper; iFFT += 2) {
            bass[0] += abs(fftOutput[iFFT]);
     93e:	f9b2 0004 	ldrsh.w	r0, [r2, #4]
        bass[1] = 0;
        mid[0] = 0;
        mid[1] = 0;
        treble[0] = 0;
        treble[1] = 0;
        for (iFFT = 2; (iFFT >> 1) * fundamentalFreq < bassUpper; iFFT += 2) {
     942:	3302      	adds	r3, #2
            bass[0] += abs(fftOutput[iFFT]);
            bass[1] += abs(fftOutput[iFFT + 1]);
     944:	f9b2 1006 	ldrsh.w	r1, [r2, #6]
     948:	3204      	adds	r2, #4
        mid[0] = 0;
        mid[1] = 0;
        treble[0] = 0;
        treble[1] = 0;
        for (iFFT = 2; (iFFT >> 1) * fundamentalFreq < bassUpper; iFFT += 2) {
            bass[0] += abs(fftOutput[iFFT]);
     94a:	2800      	cmp	r0, #0
     94c:	bfb8      	it	lt
     94e:	4240      	neglt	r0, r0
            bass[1] += abs(fftOutput[iFFT + 1]);
     950:	2900      	cmp	r1, #0
     952:	bfb8      	it	lt
     954:	4249      	neglt	r1, r1
        bass[1] = 0;
        mid[0] = 0;
        mid[1] = 0;
        treble[0] = 0;
        treble[1] = 0;
        for (iFFT = 2; (iFFT >> 1) * fundamentalFreq < bassUpper; iFFT += 2) {
     956:	2b48      	cmp	r3, #72	; 0x48
            bass[0] += abs(fftOutput[iFFT]);
     958:	4483      	add	fp, r0
            bass[1] += abs(fftOutput[iFFT + 1]);
     95a:	448a      	add	sl, r1
        bass[1] = 0;
        mid[0] = 0;
        mid[1] = 0;
        treble[0] = 0;
        treble[1] = 0;
        for (iFFT = 2; (iFFT >> 1) * fundamentalFreq < bassUpper; iFFT += 2) {
     95c:	d1ef      	bne.n	93e <loop+0x52>
     95e:	2700      	movs	r7, #0
     960:	4eba      	ldr	r6, [pc, #744]	; (c4c <loop+0x360>)
            bass[0] += abs(fftOutput[iFFT]);
            bass[1] += abs(fftOutput[iFFT + 1]);
        }

        // Add up fft real and complex magnitudes for midrange frequencies, [300, 1500] Hz
        for (iFFT; (iFFT >> 1) * fundamentalFreq < midUpper; iFFT += 2) {
     962:	f643 2897 	movw	r8, #14999	; 0x3a97
        bass[1] = 0;
        mid[0] = 0;
        mid[1] = 0;
        treble[0] = 0;
        treble[1] = 0;
        for (iFFT = 2; (iFFT >> 1) * fundamentalFreq < bassUpper; iFFT += 2) {
     966:	46bc      	mov	ip, r7
            bass[1] += abs(fftOutput[iFFT + 1]);
        }

        // Add up fft real and complex magnitudes for midrange frequencies, [300, 1500] Hz
        for (iFFT; (iFFT >> 1) * fundamentalFreq < midUpper; iFFT += 2) {
            mid[0] += abs(fftOutput[iFFT]);
     968:	f93e 4013 	ldrsh.w	r4, [lr, r3, lsl #1]
            bass[0] += abs(fftOutput[iFFT]);
            bass[1] += abs(fftOutput[iFFT + 1]);
        }

        // Add up fft real and complex magnitudes for midrange frequencies, [300, 1500] Hz
        for (iFFT; (iFFT >> 1) * fundamentalFreq < midUpper; iFFT += 2) {
     96c:	3302      	adds	r3, #2
            mid[0] += abs(fftOutput[iFFT]);
            mid[1] += abs(fftOutput[iFFT + 1]);
     96e:	f9b6 1002 	ldrsh.w	r1, [r6, #2]
     972:	3604      	adds	r6, #4
            bass[0] += abs(fftOutput[iFFT]);
            bass[1] += abs(fftOutput[iFFT + 1]);
        }

        // Add up fft real and complex magnitudes for midrange frequencies, [300, 1500] Hz
        for (iFFT; (iFFT >> 1) * fundamentalFreq < midUpper; iFFT += 2) {
     974:	105a      	asrs	r2, r3, #1
            mid[0] += abs(fftOutput[iFFT]);
     976:	2c00      	cmp	r4, #0
     978:	48b2      	ldr	r0, [pc, #712]	; (c44 <loop+0x358>)
            bass[0] += abs(fftOutput[iFFT]);
            bass[1] += abs(fftOutput[iFFT + 1]);
        }

        // Add up fft real and complex magnitudes for midrange frequencies, [300, 1500] Hz
        for (iFFT; (iFFT >> 1) * fundamentalFreq < midUpper; iFFT += 2) {
     97a:	eb02 05c2 	add.w	r5, r2, r2, lsl #3
            mid[0] += abs(fftOutput[iFFT]);
     97e:	bfb8      	it	lt
     980:	4264      	neglt	r4, r4
            mid[1] += abs(fftOutput[iFFT + 1]);
     982:	2900      	cmp	r1, #0
            bass[0] += abs(fftOutput[iFFT]);
            bass[1] += abs(fftOutput[iFFT + 1]);
        }

        // Add up fft real and complex magnitudes for midrange frequencies, [300, 1500] Hz
        for (iFFT; (iFFT >> 1) * fundamentalFreq < midUpper; iFFT += 2) {
     984:	ebc2 02c5 	rsb	r2, r2, r5, lsl #3
            mid[0] += abs(fftOutput[iFFT]);
     988:	44a4      	add	ip, r4
            mid[1] += abs(fftOutput[iFFT + 1]);
     98a:	bfb8      	it	lt
     98c:	4249      	neglt	r1, r1
            bass[0] += abs(fftOutput[iFFT]);
            bass[1] += abs(fftOutput[iFFT + 1]);
        }

        // Add up fft real and complex magnitudes for midrange frequencies, [300, 1500] Hz
        for (iFFT; (iFFT >> 1) * fundamentalFreq < midUpper; iFFT += 2) {
     98e:	4542      	cmp	r2, r8
            mid[0] += abs(fftOutput[iFFT]);
            mid[1] += abs(fftOutput[iFFT + 1]);
     990:	440f      	add	r7, r1
            bass[0] += abs(fftOutput[iFFT]);
            bass[1] += abs(fftOutput[iFFT + 1]);
        }

        // Add up fft real and complex magnitudes for midrange frequencies, [300, 1500] Hz
        for (iFFT; (iFFT >> 1) * fundamentalFreq < midUpper; iFFT += 2) {
     992:	dde9      	ble.n	968 <loop+0x7c>
     994:	ea4f 210c 	mov.w	r1, ip, lsl #8
            mid[0] += abs(fftOutput[iFFT]);
            mid[1] += abs(fftOutput[iFFT + 1]);
        }

        // Add up fft real and complex magnitudes for treble frequencies, [1500, 5000] Hz
        for (iFFT; (iFFT >> 1) * fundamentalFreq < trebleUpper; iFFT += 2) {
     998:	f24c 394f 	movw	r9, #49999	; 0xc34f
     99c:	f8df 82c0 	ldr.w	r8, [pc, #704]	; c60 <loop+0x374>
     9a0:	9100      	str	r1, [sp, #0]
     9a2:	454a      	cmp	r2, r9
     9a4:	ea4f 2107 	mov.w	r1, r7, lsl #8
     9a8:	9101      	str	r1, [sp, #4]
     9aa:	f300 8180 	bgt.w	cae <loop+0x3c2>
     9ae:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     9b2:	2600      	movs	r6, #0
     9b4:	4460      	add	r0, ip
     9b6:	4637      	mov	r7, r6
     9b8:	3302      	adds	r3, #2
            treble[0] += abs(fftOutput[iFFT]);
     9ba:	f93e 400c 	ldrsh.w	r4, [lr, ip]
            treble[1] += abs(fftOutput[iFFT + 1]);
     9be:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
     9c2:	3004      	adds	r0, #4
            mid[0] += abs(fftOutput[iFFT]);
            mid[1] += abs(fftOutput[iFFT + 1]);
        }

        // Add up fft real and complex magnitudes for treble frequencies, [1500, 5000] Hz
        for (iFFT; (iFFT >> 1) * fundamentalFreq < trebleUpper; iFFT += 2) {
     9c4:	105a      	asrs	r2, r3, #1
            treble[0] += abs(fftOutput[iFFT]);
     9c6:	2c00      	cmp	r4, #0
     9c8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
            mid[0] += abs(fftOutput[iFFT]);
            mid[1] += abs(fftOutput[iFFT + 1]);
        }

        // Add up fft real and complex magnitudes for treble frequencies, [1500, 5000] Hz
        for (iFFT; (iFFT >> 1) * fundamentalFreq < trebleUpper; iFFT += 2) {
     9cc:	eb02 05c2 	add.w	r5, r2, r2, lsl #3
            treble[0] += abs(fftOutput[iFFT]);
     9d0:	bfb8      	it	lt
     9d2:	4264      	neglt	r4, r4
            treble[1] += abs(fftOutput[iFFT + 1]);
     9d4:	2900      	cmp	r1, #0
            mid[0] += abs(fftOutput[iFFT]);
            mid[1] += abs(fftOutput[iFFT + 1]);
        }

        // Add up fft real and complex magnitudes for treble frequencies, [1500, 5000] Hz
        for (iFFT; (iFFT >> 1) * fundamentalFreq < trebleUpper; iFFT += 2) {
     9d6:	ebc2 02c5 	rsb	r2, r2, r5, lsl #3
            treble[0] += abs(fftOutput[iFFT]);
     9da:	4427      	add	r7, r4
            treble[1] += abs(fftOutput[iFFT + 1]);
     9dc:	bfb8      	it	lt
     9de:	4249      	neglt	r1, r1
            mid[0] += abs(fftOutput[iFFT]);
            mid[1] += abs(fftOutput[iFFT + 1]);
        }

        // Add up fft real and complex magnitudes for treble frequencies, [1500, 5000] Hz
        for (iFFT; (iFFT >> 1) * fundamentalFreq < trebleUpper; iFFT += 2) {
     9e0:	454a      	cmp	r2, r9
            treble[0] += abs(fftOutput[iFFT]);
            treble[1] += abs(fftOutput[iFFT + 1]);
     9e2:	440e      	add	r6, r1
            mid[0] += abs(fftOutput[iFFT]);
            mid[1] += abs(fftOutput[iFFT + 1]);
        }

        // Add up fft real and complex magnitudes for treble frequencies, [1500, 5000] Hz
        for (iFFT; (iFFT >> 1) * fundamentalFreq < trebleUpper; iFFT += 2) {
     9e4:	dde8      	ble.n	9b8 <loop+0xcc>
     9e6:	023f      	lsls	r7, r7, #8
     9e8:	0236      	lsls	r6, r6, #8
            treble[0] += abs(fftOutput[iFFT]);
            treble[1] += abs(fftOutput[iFFT + 1]);
        }
        bass[0] <<= 8;
     9ea:	4899      	ldr	r0, [pc, #612]	; (c50 <loop+0x364>)
        bass[1] <<= 8;
     9ec:	ea4f 230a 	mov.w	r3, sl, lsl #8
        //    for (int j = (sizeof * fftOutput) - 1; j >= 0; j--) {
        //        Serial.print(p6[j], HEX);
        //    }
        //    Serial.println();*/
        //}
        arm_cmplx_mag_q31(bass, &bassAmplitude, 1); // output is in Q2,30 format
     9f0:	4d98      	ldr	r5, [pc, #608]	; (c54 <loop+0x368>)
        // Add up fft real and complex magnitudes for treble frequencies, [1500, 5000] Hz
        for (iFFT; (iFFT >> 1) * fundamentalFreq < trebleUpper; iFFT += 2) {
            treble[0] += abs(fftOutput[iFFT]);
            treble[1] += abs(fftOutput[iFFT + 1]);
        }
        bass[0] <<= 8;
     9f2:	ea4f 220b 	mov.w	r2, fp, lsl #8
        bass[1] <<= 8;
     9f6:	6043      	str	r3, [r0, #4]
        mid[0] <<= 8;
        mid[1] <<= 8;
     9f8:	9b01      	ldr	r3, [sp, #4]
            treble[0] += abs(fftOutput[iFFT]);
            treble[1] += abs(fftOutput[iFFT + 1]);
        }
        bass[0] <<= 8;
        bass[1] <<= 8;
        mid[0] <<= 8;
     9fa:	9900      	ldr	r1, [sp, #0]
        //        Serial.print(p6[j], HEX);
        //    }
        //    Serial.println();*/
        //}
        arm_cmplx_mag_q31(bass, &bassAmplitude, 1); // output is in Q2,30 format
        arm_cmplx_mag_q31(mid, &midAmplitude, 1); // output is in Q2,30 format
     9fc:	4c96      	ldr	r4, [pc, #600]	; (c58 <loop+0x36c>)
            treble[1] += abs(fftOutput[iFFT + 1]);
        }
        bass[0] <<= 8;
        bass[1] <<= 8;
        mid[0] <<= 8;
        mid[1] <<= 8;
     9fe:	f8c8 3004 	str.w	r3, [r8, #4]
        treble[0] <<= 8;
     a02:	4b96      	ldr	r3, [pc, #600]	; (c5c <loop+0x370>)
            treble[0] += abs(fftOutput[iFFT]);
            treble[1] += abs(fftOutput[iFFT + 1]);
        }
        bass[0] <<= 8;
        bass[1] <<= 8;
        mid[0] <<= 8;
     a04:	f8c8 1000 	str.w	r1, [r8]
        //    for (int j = (sizeof * fftOutput) - 1; j >= 0; j--) {
        //        Serial.print(p6[j], HEX);
        //    }
        //    Serial.println();*/
        //}
        arm_cmplx_mag_q31(bass, &bassAmplitude, 1); // output is in Q2,30 format
     a08:	4629      	mov	r1, r5
        // Add up fft real and complex magnitudes for treble frequencies, [1500, 5000] Hz
        for (iFFT; (iFFT >> 1) * fundamentalFreq < trebleUpper; iFFT += 2) {
            treble[0] += abs(fftOutput[iFFT]);
            treble[1] += abs(fftOutput[iFFT + 1]);
        }
        bass[0] <<= 8;
     a0a:	6002      	str	r2, [r0, #0]
        //    for (int j = (sizeof * fftOutput) - 1; j >= 0; j--) {
        //        Serial.print(p6[j], HEX);
        //    }
        //    Serial.println();*/
        //}
        arm_cmplx_mag_q31(bass, &bassAmplitude, 1); // output is in Q2,30 format
     a0c:	2201      	movs	r2, #1
        arm_cmplx_mag_q31(mid, &midAmplitude, 1); // output is in Q2,30 format
        arm_cmplx_mag_q31(treble, &trebleAmplitude, 1); // output is in Q2,30 format
     a0e:	f8df 8270 	ldr.w	r8, [pc, #624]	; c80 <loop+0x394>
        }
        bass[0] <<= 8;
        bass[1] <<= 8;
        mid[0] <<= 8;
        mid[1] <<= 8;
        treble[0] <<= 8;
     a12:	601f      	str	r7, [r3, #0]
        treble[1] <<= 8;
     a14:	605e      	str	r6, [r3, #4]
        //    for (int j = (sizeof * fftOutput) - 1; j >= 0; j--) {
        //        Serial.print(p6[j], HEX);
        //    }
        //    Serial.println();*/
        //}
        arm_cmplx_mag_q31(bass, &bassAmplitude, 1); // output is in Q2,30 format
     a16:	f003 f9d1 	bl	3dbc <arm_cmplx_mag_q31>
        arm_cmplx_mag_q31(mid, &midAmplitude, 1); // output is in Q2,30 format
     a1a:	4621      	mov	r1, r4
     a1c:	2201      	movs	r2, #1
     a1e:	4890      	ldr	r0, [pc, #576]	; (c60 <loop+0x374>)
     a20:	f003 f9cc 	bl	3dbc <arm_cmplx_mag_q31>
        arm_cmplx_mag_q31(treble, &trebleAmplitude, 1); // output is in Q2,30 format
     a24:	4641      	mov	r1, r8
     a26:	2201      	movs	r2, #1
     a28:	488c      	ldr	r0, [pc, #560]	; (c5c <loop+0x370>)
     a2a:	f003 f9c7 	bl	3dbc <arm_cmplx_mag_q31>
        Serial.println(bassAmplitude);
        Serial.print("Mid: ");
        Serial.println(midAmplitude);
        Serial.print("Treble: ");
        Serial.println(trebleAmplitude);*/
        bassLedsOn = numLedsBy3 * bassAmplitude / maxBass;
     a2e:	6829      	ldr	r1, [r5, #0]
        midLedsOn = numLedsBy3 * midAmplitude / maxMid;
     a30:	6822      	ldr	r2, [r4, #0]
        trebleLedsOn = numLedsBy3 * trebleAmplitude / maxTreble;
     a32:	f8d8 3000 	ldr.w	r3, [r8]
        Serial.println(bassAmplitude);
        Serial.print("Mid: ");
        Serial.println(midAmplitude);
        Serial.print("Treble: ");
        Serial.println(trebleAmplitude);*/
        bassLedsOn = numLedsBy3 * bassAmplitude / maxBass;
     a36:	eb01 0e81 	add.w	lr, r1, r1, lsl #2
     a3a:	4d8a      	ldr	r5, [pc, #552]	; (c64 <loop+0x378>)
        midLedsOn = numLedsBy3 * midAmplitude / maxMid;
     a3c:	eb02 0782 	add.w	r7, r2, r2, lsl #2
     a40:	4c89      	ldr	r4, [pc, #548]	; (c68 <loop+0x37c>)
        trebleLedsOn = numLedsBy3 * trebleAmplitude / maxTreble;
     a42:	eb03 0683 	add.w	r6, r3, r3, lsl #2
     a46:	4889      	ldr	r0, [pc, #548]	; (c6c <loop+0x380>)
        Serial.println(bassAmplitude);
        Serial.print("Mid: ");
        Serial.println(midAmplitude);
        Serial.print("Treble: ");
        Serial.println(trebleAmplitude);*/
        bassLedsOn = numLedsBy3 * bassAmplitude / maxBass;
     a48:	ebc1 01ce 	rsb	r1, r1, lr, lsl #3
     a4c:	682d      	ldr	r5, [r5, #0]
        midLedsOn = numLedsBy3 * midAmplitude / maxMid;
     a4e:	ebc2 02c7 	rsb	r2, r2, r7, lsl #3
        trebleLedsOn = numLedsBy3 * trebleAmplitude / maxTreble;
     a52:	6800      	ldr	r0, [r0, #0]
     a54:	ebc3 03c6 	rsb	r3, r3, r6, lsl #3
        Serial.print("Mid: ");
        Serial.println(midAmplitude);
        Serial.print("Treble: ");
        Serial.println(trebleAmplitude);*/
        bassLedsOn = numLedsBy3 * bassAmplitude / maxBass;
        midLedsOn = numLedsBy3 * midAmplitude / maxMid;
     a58:	6824      	ldr	r4, [r4, #0]
        Serial.println(bassAmplitude);
        Serial.print("Mid: ");
        Serial.println(midAmplitude);
        Serial.print("Treble: ");
        Serial.println(trebleAmplitude);*/
        bassLedsOn = numLedsBy3 * bassAmplitude / maxBass;
     a5a:	f8df a228 	ldr.w	sl, [pc, #552]	; c84 <loop+0x398>
        midLedsOn = numLedsBy3 * midAmplitude / maxMid;
        trebleLedsOn = numLedsBy3 * trebleAmplitude / maxTreble;
     a5e:	4f84      	ldr	r7, [pc, #528]	; (c70 <loop+0x384>)
        Serial.println(bassAmplitude);
        Serial.print("Mid: ");
        Serial.println(midAmplitude);
        Serial.print("Treble: ");
        Serial.println(trebleAmplitude);*/
        bassLedsOn = numLedsBy3 * bassAmplitude / maxBass;
     a60:	fb91 f1f5 	sdiv	r1, r1, r5
        midLedsOn = numLedsBy3 * midAmplitude / maxMid;
        trebleLedsOn = numLedsBy3 * trebleAmplitude / maxTreble;
     a64:	fb93 f3f0 	sdiv	r3, r3, r0
        Serial.print("Mid: ");
        Serial.println(midAmplitude);
        Serial.print("Treble: ");
        Serial.println(trebleAmplitude);*/
        bassLedsOn = numLedsBy3 * bassAmplitude / maxBass;
        midLedsOn = numLedsBy3 * midAmplitude / maxMid;
     a68:	fb92 f2f4 	sdiv	r2, r2, r4
        Serial.println(bassAmplitude);
        Serial.print("Mid: ");
        Serial.println(midAmplitude);
        Serial.print("Treble: ");
        Serial.println(trebleAmplitude);*/
        bassLedsOn = numLedsBy3 * bassAmplitude / maxBass;
     a6c:	b209      	sxth	r1, r1
        midLedsOn = numLedsBy3 * midAmplitude / maxMid;
     a6e:	4881      	ldr	r0, [pc, #516]	; (c74 <loop+0x388>)
     a70:	b212      	sxth	r2, r2
        trebleLedsOn = numLedsBy3 * trebleAmplitude / maxTreble;
     a72:	b21b      	sxth	r3, r3
        if (bassLedsOn > numLedsBy3) bassLedsOn = numLedsBy3;
     a74:	2927      	cmp	r1, #39	; 0x27
        Serial.println(bassAmplitude);
        Serial.print("Mid: ");
        Serial.println(midAmplitude);
        Serial.print("Treble: ");
        Serial.println(trebleAmplitude);*/
        bassLedsOn = numLedsBy3 * bassAmplitude / maxBass;
     a76:	f8aa 1000 	strh.w	r1, [sl]
        midLedsOn = numLedsBy3 * midAmplitude / maxMid;
     a7a:	8002      	strh	r2, [r0, #0]
        trebleLedsOn = numLedsBy3 * trebleAmplitude / maxTreble;
     a7c:	803b      	strh	r3, [r7, #0]
        if (bassLedsOn > numLedsBy3) bassLedsOn = numLedsBy3;
     a7e:	dd03      	ble.n	a88 <loop+0x19c>
     a80:	2027      	movs	r0, #39	; 0x27
     a82:	4601      	mov	r1, r0
     a84:	f8aa 0000 	strh.w	r0, [sl]
        if (midLedsOn > numLedsBy3) midLedsOn = numLedsBy3;
     a88:	2a27      	cmp	r2, #39	; 0x27
     a8a:	dd02      	ble.n	a92 <loop+0x1a6>
     a8c:	2227      	movs	r2, #39	; 0x27
     a8e:	4879      	ldr	r0, [pc, #484]	; (c74 <loop+0x388>)
     a90:	8002      	strh	r2, [r0, #0]
        if (trebleLedsOn > numLedsBy3) trebleLedsOn = numLedsBy3;
     a92:	2b27      	cmp	r3, #39	; 0x27
     a94:	f300 80cb 	bgt.w	c2e <loop+0x342>
        Serial.print("Treble leds: ");
        Serial.println(trebleLedsOn);*/

        uint8_t hue = 100;
        int ledCounter;
        for (ledCounter = 0; ledCounter < bassLedsOn; ledCounter++) {
     a98:	2900      	cmp	r1, #0
     a9a:	f340 80fd 	ble.w	c98 <loop+0x3ac>
     a9e:	4b76      	ldr	r3, [pc, #472]	; (c78 <loop+0x38c>)
     aa0:	f04f 0900 	mov.w	r9, #0
     aa4:	2464      	movs	r4, #100	; 0x64
     aa6:	ae03      	add	r6, sp, #12
     aa8:	469b      	mov	fp, r3
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
     aaa:	f04f 08ff 	mov.w	r8, #255	; 0xff
     aae:	9300      	str	r3, [sp, #0]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
     ab0:	4659      	mov	r1, fp
     ab2:	4630      	mov	r0, r6
            leds[ledCounter] = CHSV(hue++, 255, 255);
     ab4:	1c65      	adds	r5, r4, #1
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
     ab6:	f88d 400c 	strb.w	r4, [sp, #12]
     aba:	f88d 800d 	strb.w	r8, [sp, #13]
        Serial.print("Treble leds: ");
        Serial.println(trebleLedsOn);*/

        uint8_t hue = 100;
        int ledCounter;
        for (ledCounter = 0; ledCounter < bassLedsOn; ledCounter++) {
     abe:	f109 0901 	add.w	r9, r9, #1
     ac2:	f88d 800e 	strb.w	r8, [sp, #14]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
     ac6:	f001 f8ed 	bl	1ca4 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
     aca:	f9ba 3000 	ldrsh.w	r3, [sl]
            leds[ledCounter] = CHSV(hue++, 255, 255);
     ace:	b2ed      	uxtb	r5, r5
     ad0:	f10b 0b03 	add.w	fp, fp, #3
        Serial.print("Treble leds: ");
        Serial.println(trebleLedsOn);*/

        uint8_t hue = 100;
        int ledCounter;
        for (ledCounter = 0; ledCounter < bassLedsOn; ledCounter++) {
     ad4:	454b      	cmp	r3, r9
            leds[ledCounter] = CHSV(hue++, 255, 255);
     ad6:	462c      	mov	r4, r5
        Serial.print("Treble leds: ");
        Serial.println(trebleLedsOn);*/

        uint8_t hue = 100;
        int ledCounter;
        for (ledCounter = 0; ledCounter < bassLedsOn; ledCounter++) {
     ad8:	dcea      	bgt.n	ab0 <loop+0x1c4>
            leds[ledCounter] = CHSV(hue++, 255, 255);
        }
        for (; ledCounter < numLedsBy3; ledCounter++) {
     ada:	f1b9 0f26 	cmp.w	r9, #38	; 0x26
     ade:	dc1c      	bgt.n	b1a <loop+0x22e>
     ae0:	eb09 0249 	add.w	r2, r9, r9, lsl #1
     ae4:	9b00      	ldr	r3, [sp, #0]
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
     ae6:	f04f 0bff 	mov.w	fp, #255	; 0xff
     aea:	f04f 0a00 	mov.w	sl, #0
     aee:	eb03 0802 	add.w	r8, r3, r2
            leds[ledCounter] = CHSV(hue++, 255, 0);
     af2:	1c6c      	adds	r4, r5, #1
        uint8_t hue = 100;
        int ledCounter;
        for (ledCounter = 0; ledCounter < bassLedsOn; ledCounter++) {
            leds[ledCounter] = CHSV(hue++, 255, 255);
        }
        for (; ledCounter < numLedsBy3; ledCounter++) {
     af4:	f109 0901 	add.w	r9, r9, #1
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
     af8:	4641      	mov	r1, r8
     afa:	4630      	mov	r0, r6
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
     afc:	f88d 500c 	strb.w	r5, [sp, #12]
            leds[ledCounter] = CHSV(hue++, 255, 0);
     b00:	b2e4      	uxtb	r4, r4
     b02:	f88d b00d 	strb.w	fp, [sp, #13]
     b06:	f108 0803 	add.w	r8, r8, #3
     b0a:	f88d a00e 	strb.w	sl, [sp, #14]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
     b0e:	f001 f8c9 	bl	1ca4 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
        uint8_t hue = 100;
        int ledCounter;
        for (ledCounter = 0; ledCounter < bassLedsOn; ledCounter++) {
            leds[ledCounter] = CHSV(hue++, 255, 255);
        }
        for (; ledCounter < numLedsBy3; ledCounter++) {
     b12:	f1b9 0f27 	cmp.w	r9, #39	; 0x27
            leds[ledCounter] = CHSV(hue++, 255, 0);
     b16:	4625      	mov	r5, r4
        uint8_t hue = 100;
        int ledCounter;
        for (ledCounter = 0; ledCounter < bassLedsOn; ledCounter++) {
            leds[ledCounter] = CHSV(hue++, 255, 255);
        }
        for (; ledCounter < numLedsBy3; ledCounter++) {
     b18:	d1eb      	bne.n	af2 <loop+0x206>
            leds[ledCounter] = CHSV(hue++, 255, 0);
        }
        for (ledCounter = 0; ledCounter < midLedsOn; ledCounter++) {
     b1a:	4b56      	ldr	r3, [pc, #344]	; (c74 <loop+0x388>)
     b1c:	f9b3 3000 	ldrsh.w	r3, [r3]
     b20:	2b00      	cmp	r3, #0
     b22:	f340 80c0 	ble.w	ca6 <loop+0x3ba>
     b26:	f8df b160 	ldr.w	fp, [pc, #352]	; c88 <loop+0x39c>
     b2a:	f04f 0a00 	mov.w	sl, #0
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
     b2e:	f04f 08ff 	mov.w	r8, #255	; 0xff
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
     b32:	4659      	mov	r1, fp
     b34:	4630      	mov	r0, r6
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
     b36:	f88d 400c 	strb.w	r4, [sp, #12]
            leds[ledCounter + numLedsBy3] = CHSV(hue++, 255, 255);
     b3a:	1c65      	adds	r5, r4, #1
     b3c:	f88d 800d 	strb.w	r8, [sp, #13]
            leds[ledCounter] = CHSV(hue++, 255, 255);
        }
        for (; ledCounter < numLedsBy3; ledCounter++) {
            leds[ledCounter] = CHSV(hue++, 255, 0);
        }
        for (ledCounter = 0; ledCounter < midLedsOn; ledCounter++) {
     b40:	f10a 0a01 	add.w	sl, sl, #1
     b44:	f88d 800e 	strb.w	r8, [sp, #14]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
     b48:	f001 f8ac 	bl	1ca4 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
     b4c:	4b49      	ldr	r3, [pc, #292]	; (c74 <loop+0x388>)
            leds[ledCounter + numLedsBy3] = CHSV(hue++, 255, 255);
     b4e:	b2ed      	uxtb	r5, r5
     b50:	f10b 0b03 	add.w	fp, fp, #3
            leds[ledCounter] = CHSV(hue++, 255, 255);
        }
        for (; ledCounter < numLedsBy3; ledCounter++) {
            leds[ledCounter] = CHSV(hue++, 255, 0);
        }
        for (ledCounter = 0; ledCounter < midLedsOn; ledCounter++) {
     b54:	f9b3 3000 	ldrsh.w	r3, [r3]
            leds[ledCounter + numLedsBy3] = CHSV(hue++, 255, 255);
     b58:	462c      	mov	r4, r5
            leds[ledCounter] = CHSV(hue++, 255, 255);
        }
        for (; ledCounter < numLedsBy3; ledCounter++) {
            leds[ledCounter] = CHSV(hue++, 255, 0);
        }
        for (ledCounter = 0; ledCounter < midLedsOn; ledCounter++) {
     b5a:	4553      	cmp	r3, sl
     b5c:	dce9      	bgt.n	b32 <loop+0x246>
            leds[ledCounter + numLedsBy3] = CHSV(hue++, 255, 255);
        }
        for (; ledCounter < numLedsBy3; ledCounter++) {
     b5e:	f1ba 0f26 	cmp.w	sl, #38	; 0x26
     b62:	dc1e      	bgt.n	ba2 <loop+0x2b6>
     b64:	f10a 0327 	add.w	r3, sl, #39	; 0x27
     b68:	9a00      	ldr	r2, [sp, #0]
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
     b6a:	f04f 0bff 	mov.w	fp, #255	; 0xff
     b6e:	f04f 0900 	mov.w	r9, #0
     b72:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     b76:	eb02 0803 	add.w	r8, r2, r3
            leds[ledCounter + numLedsBy3] = CHSV(hue++, 255, 0);
     b7a:	1c6c      	adds	r4, r5, #1
            leds[ledCounter] = CHSV(hue++, 255, 0);
        }
        for (ledCounter = 0; ledCounter < midLedsOn; ledCounter++) {
            leds[ledCounter + numLedsBy3] = CHSV(hue++, 255, 255);
        }
        for (; ledCounter < numLedsBy3; ledCounter++) {
     b7c:	f10a 0a01 	add.w	sl, sl, #1
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
     b80:	4641      	mov	r1, r8
     b82:	4630      	mov	r0, r6
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
     b84:	f88d 500c 	strb.w	r5, [sp, #12]
            leds[ledCounter + numLedsBy3] = CHSV(hue++, 255, 0);
     b88:	b2e4      	uxtb	r4, r4
     b8a:	f88d b00d 	strb.w	fp, [sp, #13]
     b8e:	f108 0803 	add.w	r8, r8, #3
     b92:	f88d 900e 	strb.w	r9, [sp, #14]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
     b96:	f001 f885 	bl	1ca4 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
            leds[ledCounter] = CHSV(hue++, 255, 0);
        }
        for (ledCounter = 0; ledCounter < midLedsOn; ledCounter++) {
            leds[ledCounter + numLedsBy3] = CHSV(hue++, 255, 255);
        }
        for (; ledCounter < numLedsBy3; ledCounter++) {
     b9a:	f1ba 0f27 	cmp.w	sl, #39	; 0x27
            leds[ledCounter + numLedsBy3] = CHSV(hue++, 255, 0);
     b9e:	4625      	mov	r5, r4
            leds[ledCounter] = CHSV(hue++, 255, 0);
        }
        for (ledCounter = 0; ledCounter < midLedsOn; ledCounter++) {
            leds[ledCounter + numLedsBy3] = CHSV(hue++, 255, 255);
        }
        for (; ledCounter < numLedsBy3; ledCounter++) {
     ba0:	d1eb      	bne.n	b7a <loop+0x28e>
            leds[ledCounter + numLedsBy3] = CHSV(hue++, 255, 0);
        }
        for (ledCounter = 0; ledCounter < trebleLedsOn; ledCounter++) {
     ba2:	f9b7 3000 	ldrsh.w	r3, [r7]
     ba6:	2b00      	cmp	r3, #0
     ba8:	dd72      	ble.n	c90 <loop+0x3a4>
     baa:	f8df a0e0 	ldr.w	sl, [pc, #224]	; c8c <loop+0x3a0>
     bae:	f04f 0900 	mov.w	r9, #0
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
     bb2:	f04f 0bff 	mov.w	fp, #255	; 0xff
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
     bb6:	4651      	mov	r1, sl
     bb8:	4630      	mov	r0, r6
            leds[ledCounter + numLedsBy3 * 2] = CHSV(hue++, 255, 255);
     bba:	1c65      	adds	r5, r4, #1
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
     bbc:	f88d 400c 	strb.w	r4, [sp, #12]
     bc0:	f88d b00d 	strb.w	fp, [sp, #13]
            leds[ledCounter + numLedsBy3] = CHSV(hue++, 255, 255);
        }
        for (; ledCounter < numLedsBy3; ledCounter++) {
            leds[ledCounter + numLedsBy3] = CHSV(hue++, 255, 0);
        }
        for (ledCounter = 0; ledCounter < trebleLedsOn; ledCounter++) {
     bc4:	f109 0901 	add.w	r9, r9, #1
     bc8:	f88d b00e 	strb.w	fp, [sp, #14]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
     bcc:	f001 f86a 	bl	1ca4 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
     bd0:	f9b7 3000 	ldrsh.w	r3, [r7]
            leds[ledCounter + numLedsBy3 * 2] = CHSV(hue++, 255, 255);
     bd4:	b2ed      	uxtb	r5, r5
     bd6:	f10a 0a03 	add.w	sl, sl, #3
            leds[ledCounter + numLedsBy3] = CHSV(hue++, 255, 255);
        }
        for (; ledCounter < numLedsBy3; ledCounter++) {
            leds[ledCounter + numLedsBy3] = CHSV(hue++, 255, 0);
        }
        for (ledCounter = 0; ledCounter < trebleLedsOn; ledCounter++) {
     bda:	454b      	cmp	r3, r9
            leds[ledCounter + numLedsBy3 * 2] = CHSV(hue++, 255, 255);
     bdc:	462c      	mov	r4, r5
            leds[ledCounter + numLedsBy3] = CHSV(hue++, 255, 255);
        }
        for (; ledCounter < numLedsBy3; ledCounter++) {
            leds[ledCounter + numLedsBy3] = CHSV(hue++, 255, 0);
        }
        for (ledCounter = 0; ledCounter < trebleLedsOn; ledCounter++) {
     bde:	dcea      	bgt.n	bb6 <loop+0x2ca>
            leds[ledCounter + numLedsBy3 * 2] = CHSV(hue++, 255, 255);
        }
        for (; ledCounter < numLedsBy3; ledCounter++) {
     be0:	f1b9 0f26 	cmp.w	r9, #38	; 0x26
     be4:	dc1c      	bgt.n	c20 <loop+0x334>
     be6:	f109 034e 	add.w	r3, r9, #78	; 0x4e
     bea:	9a00      	ldr	r2, [sp, #0]
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
     bec:	27ff      	movs	r7, #255	; 0xff
     bee:	2400      	movs	r4, #0
     bf0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     bf4:	441a      	add	r2, r3
     bf6:	4690      	mov	r8, r2
            leds[ledCounter + numLedsBy3 * 2] = CHSV(hue++, 255, 0);
     bf8:	1c6b      	adds	r3, r5, #1
            leds[ledCounter + numLedsBy3] = CHSV(hue++, 255, 0);
        }
        for (ledCounter = 0; ledCounter < trebleLedsOn; ledCounter++) {
            leds[ledCounter + numLedsBy3 * 2] = CHSV(hue++, 255, 255);
        }
        for (; ledCounter < numLedsBy3; ledCounter++) {
     bfa:	f109 0901 	add.w	r9, r9, #1
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
     bfe:	4641      	mov	r1, r8
     c00:	4630      	mov	r0, r6
            leds[ledCounter + numLedsBy3 * 2] = CHSV(hue++, 255, 0);
     c02:	b2db      	uxtb	r3, r3
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
     c04:	f88d 500c 	strb.w	r5, [sp, #12]
     c08:	f88d 700d 	strb.w	r7, [sp, #13]
     c0c:	f108 0803 	add.w	r8, r8, #3
     c10:	461d      	mov	r5, r3
     c12:	f88d 400e 	strb.w	r4, [sp, #14]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
     c16:	f001 f845 	bl	1ca4 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
            leds[ledCounter + numLedsBy3] = CHSV(hue++, 255, 0);
        }
        for (ledCounter = 0; ledCounter < trebleLedsOn; ledCounter++) {
            leds[ledCounter + numLedsBy3 * 2] = CHSV(hue++, 255, 255);
        }
        for (; ledCounter < numLedsBy3; ledCounter++) {
     c1a:	f1b9 0f27 	cmp.w	r9, #39	; 0x27
     c1e:	d1eb      	bne.n	bf8 <loop+0x30c>
	/// Update all our controllers with the current led colors, using the passed in brightness
	/// @param scale temporarily override the scale
	void show(uint8_t scale);

	/// Update all our controllers with the current led colors
	void show() { show(m_Scale); }
     c20:	4816      	ldr	r0, [pc, #88]	; (c7c <loop+0x390>)
     c22:	7801      	ldrb	r1, [r0, #0]
     c24:	f000 ffb6 	bl	1b94 <CFastLED::show(unsigned char)>
        FastLED.show();
    }
    // micros2 = micros();
    // Serial.print("Time to compute fft: ");
    // Serial.println(micros2 - micros1);
}
     c28:	b005      	add	sp, #20
     c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        bassLedsOn = numLedsBy3 * bassAmplitude / maxBass;
        midLedsOn = numLedsBy3 * midAmplitude / maxMid;
        trebleLedsOn = numLedsBy3 * trebleAmplitude / maxTreble;
        if (bassLedsOn > numLedsBy3) bassLedsOn = numLedsBy3;
        if (midLedsOn > numLedsBy3) midLedsOn = numLedsBy3;
        if (trebleLedsOn > numLedsBy3) trebleLedsOn = numLedsBy3;
     c2e:	2327      	movs	r3, #39	; 0x27
     c30:	803b      	strh	r3, [r7, #0]
     c32:	e731      	b.n	a98 <loop+0x1ac>
     c34:	2001acc4 	.word	0x2001acc4
     c38:	2001ecd2 	.word	0x2001ecd2
     c3c:	2001acce 	.word	0x2001acce
     c40:	20012ca0 	.word	0x20012ca0
     c44:	20012cc0 	.word	0x20012cc0
     c48:	2001acd0 	.word	0x2001acd0
     c4c:	20012d50 	.word	0x20012d50
     c50:	20012c98 	.word	0x20012c98
     c54:	2001acc0 	.word	0x2001acc0
     c58:	20022d44 	.word	0x20022d44
     c5c:	2001acc8 	.word	0x2001acc8
     c60:	20022d3c 	.word	0x20022d3c
     c64:	20012260 	.word	0x20012260
     c68:	2001225c 	.word	0x2001225c
     c6c:	20012258 	.word	0x20012258
     c70:	20012cba 	.word	0x20012cba
     c74:	2001ecd0 	.word	0x2001ecd0
     c78:	20012b38 	.word	0x20012b38
     c7c:	20022d90 	.word	0x20022d90
     c80:	20012cbc 	.word	0x20012cbc
     c84:	20012cb8 	.word	0x20012cb8
     c88:	20012bad 	.word	0x20012bad
     c8c:	20012c22 	.word	0x20012c22
            leds[ledCounter + numLedsBy3] = CHSV(hue++, 255, 255);
        }
        for (; ledCounter < numLedsBy3; ledCounter++) {
            leds[ledCounter + numLedsBy3] = CHSV(hue++, 255, 0);
        }
        for (ledCounter = 0; ledCounter < trebleLedsOn; ledCounter++) {
     c90:	4625      	mov	r5, r4
     c92:	f04f 0900 	mov.w	r9, #0
     c96:	e7a6      	b.n	be6 <loop+0x2fa>
     c98:	4b06      	ldr	r3, [pc, #24]	; (cb4 <loop+0x3c8>)
        Serial.print("Treble leds: ");
        Serial.println(trebleLedsOn);*/

        uint8_t hue = 100;
        int ledCounter;
        for (ledCounter = 0; ledCounter < bassLedsOn; ledCounter++) {
     c9a:	2564      	movs	r5, #100	; 0x64
     c9c:	f04f 0900 	mov.w	r9, #0
     ca0:	ae03      	add	r6, sp, #12
     ca2:	9300      	str	r3, [sp, #0]
     ca4:	e71c      	b.n	ae0 <loop+0x1f4>
            leds[ledCounter] = CHSV(hue++, 255, 255);
        }
        for (; ledCounter < numLedsBy3; ledCounter++) {
            leds[ledCounter] = CHSV(hue++, 255, 0);
        }
        for (ledCounter = 0; ledCounter < midLedsOn; ledCounter++) {
     ca6:	4625      	mov	r5, r4
     ca8:	f04f 0a00 	mov.w	sl, #0
     cac:	e75a      	b.n	b64 <loop+0x278>
            mid[0] += abs(fftOutput[iFFT]);
            mid[1] += abs(fftOutput[iFFT + 1]);
        }

        // Add up fft real and complex magnitudes for treble frequencies, [1500, 5000] Hz
        for (iFFT; (iFFT >> 1) * fundamentalFreq < trebleUpper; iFFT += 2) {
     cae:	2600      	movs	r6, #0
     cb0:	4637      	mov	r7, r6
     cb2:	e69a      	b.n	9ea <loop+0xfe>
     cb4:	20012b38 	.word	0x20012b38

00000cb8 <_GLOBAL__sub_I_ADC0>:
#define ADC_IR_Priority 64 // interrupt priority
#define N_SAMPLES 8192 // number of samples

void readAdc(void);

My_ADC ADC0(0);
     cb8:	2100      	movs	r1, #0
     cba:	4801      	ldr	r0, [pc, #4]	; (cc0 <_GLOBAL__sub_I_ADC0+0x8>)
     cbc:	f000 b802 	b.w	cc4 <My_ADC::My_ADC(unsigned char)>
     cc0:	20022cd4 	.word	0x20022cd4

00000cc4 <My_ADC::My_ADC(unsigned char)>:
/* Constructor
*   Point the registers to the correct ADC module
*   Copy the correct channel2sc1a
*   Call init
*/
My_ADC::My_ADC(uint8_t ADC_number) : ADC_num(ADC_number), channel2sc1a(ADC_num ? channel2sc1aADC1 : channel2sc1aADC0),
     cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
     cc6:	4604      	mov	r4, r0
#ifdef ADC_USE_PDB
	,
	PDB0_CHnC1(ADC_num ? PDB0_CH1C1 : PDB0_CH0C1)
#endif
	,
	XBAR_IN(ADC_num ? XBARA1_IN_QTIMER4_TIMER3 : XBARA1_IN_QTIMER4_TIMER0), XBAR_OUT(ADC_num ? XBARA1_OUT_ADC_ETC_TRIG10 : XBARA1_OUT_ADC_ETC_TRIG00), QTIMER4_INDEX(ADC_num ? 3 : 0), ADC_ETC_TRIGGER_INDEX(ADC_num ? 4 : 0), IRQ_ADC(ADC_num ? IRQ_NUMBER_t::IRQ_ADC2 : IRQ_NUMBER_t::IRQ_ADC1) {
     cc8:	7501      	strb	r1, [r0, #20]
     cca:	2900      	cmp	r1, #0
     ccc:	d03d      	beq.n	d4a <My_ADC::My_ADC(unsigned char)+0x86>
     cce:	2600      	movs	r6, #0
     cd0:	2344      	movs	r3, #68	; 0x44
     cd2:	f100 054c 	add.w	r5, r0, #76	; 0x4c
     cd6:	2727      	movs	r7, #39	; 0x27
     cd8:	206b      	movs	r0, #107	; 0x6b
     cda:	2103      	movs	r1, #3
     cdc:	2204      	movs	r2, #4
     cde:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
     ce2:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
     ce6:	f104 0630 	add.w	r6, r4, #48	; 0x30
     cea:	4b23      	ldr	r3, [pc, #140]	; (d78 <My_ADC::My_ADC(unsigned char)+0xb4>)
     cec:	6225      	str	r5, [r4, #32]
     cee:	f884 7025 	strb.w	r7, [r4, #37]	; 0x25
     cf2:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
     cf6:	f884 1027 	strb.w	r1, [r4, #39]	; 0x27
     cfa:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
     cfe:	f8df e080 	ldr.w	lr, [pc, #128]	; d80 <My_ADC::My_ADC(unsigned char)+0xbc>

/* Initialize stuff: Set initial ADC settings via corresponding functions.
* 
*/
void My_ADC::analog_init() {
	calibrating = 0;
     d02:	f04f 0c00 	mov.w	ip, #0
#ifdef ADC_USE_PDB
	,
	PDB0_CHnC1(ADC_num ? PDB0_CH1C1 : PDB0_CH0C1)
#endif
	,
	XBAR_IN(ADC_num ? XBARA1_IN_QTIMER4_TIMER3 : XBARA1_IN_QTIMER4_TIMER0), XBAR_OUT(ADC_num ? XBARA1_OUT_ADC_ETC_TRIG10 : XBARA1_OUT_ADC_ETC_TRIG00), QTIMER4_INDEX(ADC_num ? 3 : 0), ADC_ETC_TRIGGER_INDEX(ADC_num ? 4 : 0), IRQ_ADC(ADC_num ? IRQ_NUMBER_t::IRQ_ADC2 : IRQ_NUMBER_t::IRQ_ADC1) {
     d06:	62e3      	str	r3, [r4, #44]	; 0x2c
     d08:	f8de 0000 	ldr.w	r0, [lr]
     d0c:	4677      	mov	r7, lr
     d0e:	f8de 1004 	ldr.w	r1, [lr, #4]
     d12:	f8de 2008 	ldr.w	r2, [lr, #8]
     d16:	f8de 300c 	ldr.w	r3, [lr, #12]
     d1a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
     d1c:	f8de 0010 	ldr.w	r0, [lr, #16]
     d20:	f8de 1014 	ldr.w	r1, [lr, #20]
     d24:	f8de 2018 	ldr.w	r2, [lr, #24]
     d28:	c607      	stmia	r6!, {r0, r1, r2}
     d2a:	f857 0f1c 	ldr.w	r0, [r7, #28]!
     d2e:	6879      	ldr	r1, [r7, #4]
     d30:	68ba      	ldr	r2, [r7, #8]
     d32:	68fb      	ldr	r3, [r7, #12]
     d34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
     d36:	6938      	ldr	r0, [r7, #16]
     d38:	6979      	ldr	r1, [r7, #20]
     d3a:	69ba      	ldr	r2, [r7, #24]
     d3c:	c507      	stmia	r5!, {r0, r1, r2}

/* Initialize stuff: Set initial ADC settings via corresponding functions.
* 
*/
void My_ADC::analog_init() {
	calibrating = 0;
     d3e:	f884 c015 	strb.w	ip, [r4, #21]
#endif
	,
	XBAR_IN(ADC_num ? XBARA1_IN_QTIMER4_TIMER3 : XBARA1_IN_QTIMER4_TIMER0), XBAR_OUT(ADC_num ? XBARA1_OUT_ADC_ETC_TRIG10 : XBARA1_OUT_ADC_ETC_TRIG00), QTIMER4_INDEX(ADC_num ? 3 : 0), ADC_ETC_TRIGGER_INDEX(ADC_num ? 4 : 0), IRQ_ADC(ADC_num ? IRQ_NUMBER_t::IRQ_ADC2 : IRQ_NUMBER_t::IRQ_ADC1) {
	// call our init
	analog_init();
}
     d42:	4620      	mov	r0, r4
/* Initialize stuff: Set initial ADC settings via corresponding functions.
* 
*/
void My_ADC::analog_init() {
	calibrating = 0;
	fail_flag = ADC_ERROR::CLEAR; // clear all errors
     d44:	f8a4 c012 	strh.w	ip, [r4, #18]
#endif
	,
	XBAR_IN(ADC_num ? XBARA1_IN_QTIMER4_TIMER3 : XBARA1_IN_QTIMER4_TIMER0), XBAR_OUT(ADC_num ? XBARA1_OUT_ADC_ETC_TRIG10 : XBARA1_OUT_ADC_ETC_TRIG00), QTIMER4_INDEX(ADC_num ? 3 : 0), ADC_ETC_TRIGGER_INDEX(ADC_num ? 4 : 0), IRQ_ADC(ADC_num ? IRQ_NUMBER_t::IRQ_ADC2 : IRQ_NUMBER_t::IRQ_ADC1) {
	// call our init
	analog_init();
}
     d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
#ifdef ADC_USE_PDB
	,
	PDB0_CHnC1(ADC_num ? PDB0_CH1C1 : PDB0_CH0C1)
#endif
	,
	XBAR_IN(ADC_num ? XBARA1_IN_QTIMER4_TIMER3 : XBARA1_IN_QTIMER4_TIMER0), XBAR_OUT(ADC_num ? XBARA1_OUT_ADC_ETC_TRIG10 : XBARA1_OUT_ADC_ETC_TRIG00), QTIMER4_INDEX(ADC_num ? 3 : 0), ADC_ETC_TRIGGER_INDEX(ADC_num ? 4 : 0), IRQ_ADC(ADC_num ? IRQ_NUMBER_t::IRQ_ADC2 : IRQ_NUMBER_t::IRQ_ADC1) {
     d4a:	f100 0630 	add.w	r6, r0, #48	; 0x30
     d4e:	2724      	movs	r7, #36	; 0x24
     d50:	2067      	movs	r0, #103	; 0x67
     d52:	2243      	movs	r2, #67	; 0x43
     d54:	4b09      	ldr	r3, [pc, #36]	; (d7c <My_ADC::My_ADC(unsigned char)+0xb8>)
     d56:	f104 054c 	add.w	r5, r4, #76	; 0x4c
     d5a:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
     d5e:	f884 1027 	strb.w	r1, [r4, #39]	; 0x27
     d62:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
     d66:	6226      	str	r6, [r4, #32]
     d68:	f884 7025 	strb.w	r7, [r4, #37]	; 0x25
     d6c:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
     d70:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
     d74:	e7c3      	b.n	cfe <My_ADC::My_ADC(unsigned char)+0x3a>
     d76:	bf00      	nop
     d78:	400c8000 	.word	0x400c8000
     d7c:	400c4000 	.word	0x400c4000
     d80:	20000040 	.word	0x20000040

00000d84 <My_ADC::wait_for_cal()>:
*
*/
void My_ADC::wait_for_cal(void) {

	// wait for calibration to finish
	while (atomic::getBitFlag(adc_regs.GC, ADC_GC_CAL)) { // Bit ADC_GC_CAL in register GC cleared when calib. finishes.
     d84:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
     d86:	2200      	movs	r2, #0
    }

    template <typename T>
    __attribute__((always_inline)) inline volatile bool getBitFlag(volatile T &reg, T flag)
    {
        return (volatile bool)((reg)&flag) >> (31 - __builtin_clzl(flag));
     d88:	6c99      	ldr	r1, [r3, #72]	; 0x48
     d8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	}
	if (atomic::getBitFlag(adc_regs.GS, ADC_GS_CALF)) { // calibration failed
		fail_flag |= ADC_ERROR::CALIB; // the user should know and recalibrate manually
	}

	calibrating = 0;
     d8c:	7542      	strb	r2, [r0, #21]
     d8e:	4770      	bx	lr

00000d90 <My_ADC::recalibrate()>:
}

// starts calibration
void My_ADC::calibrate() {

	__disable_irq();
     d90:	b672      	cpsid	i

	calibrating = 1;
     d92:	2201      	movs	r2, #1
	atomic::clearBitFlag(adc_regs.GS, ADC_GS_CALF);
     d94:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
// starts calibration
void My_ADC::calibrate() {

	__disable_irq();

	calibrating = 1;
     d96:	7542      	strb	r2, [r0, #21]
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
     d98:	b672      	cpsid	i
        reg &= ~flag;
     d9a:	6cca      	ldr	r2, [r1, #76]	; 0x4c
     d9c:	f022 0202 	bic.w	r2, r2, #2
     da0:	64ca      	str	r2, [r1, #76]	; 0x4c
        __enable_irq();
     da2:	b662      	cpsie	i
	atomic::clearBitFlag(adc_regs.GS, ADC_GS_CALF);
	atomic::setBitFlag(adc_regs.GC, ADC_GC_CAL);
     da4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c

#elif defined(__IMXRT1062__) // Teensy 4
    template <typename T>
    __attribute__((always_inline)) inline void setBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
     da6:	b672      	cpsid	i
        reg |= flag;
     da8:	6c93      	ldr	r3, [r2, #72]	; 0x48
     daa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     dae:	6493      	str	r3, [r2, #72]	; 0x48
        __enable_irq();
     db0:	b662      	cpsie	i

	__enable_irq();
     db2:	b662      	cpsie	i
/** Usually it's not necessary to call this function directly, but do it if the "environment" changed
*   significantly since the program was started.
*/
void My_ADC::recalibrate() {
	calibrate();
	wait_for_cal();
     db4:	f7ff bfe6 	b.w	d84 <My_ADC::wait_for_cal()>

00000db8 <My_ADC::setReference(ADC_settings::ADC_REFERENCE)>:
*  Use ADC_REF_3V3, ADC_REF_1V2 (not for Teensy LC) or ADC_REF_EXT
*/
void My_ADC::setReference(ADC_REFERENCE type) {
	ADC_REF_SOURCE ref_type = static_cast<ADC_REF_SOURCE>(type); // cast to source type, that is, either internal or default

	if (analog_reference_internal == ref_type) { // don't need to change anything
     db8:	7f43      	ldrb	r3, [r0, #29]
     dba:	428b      	cmp	r3, r1
     dbc:	d014      	beq.n	de8 <My_ADC::setReference(ADC_settings::ADC_REFERENCE)+0x30>
		return;
	}

	if (ref_type == ADC_REF_SOURCE::REF_ALT) { // 1.2V ref for Teensy 3.x, 3.3 VDD for Teensy LC
     dbe:	2901      	cmp	r1, #1
     dc0:	d01c      	beq.n	dfc <My_ADC::setReference(ADC_settings::ADC_REFERENCE)+0x44>
		VREF::start(); // enable VREF if Teensy 3.x
#endif

		analog_reference_internal = ADC_REF_SOURCE::REF_ALT;
	}
	else if (ref_type == ADC_REF_SOURCE::REF_DEFAULT) {   // ext ref for all Teensys, vcc also for Teensy 3.x
     dc2:	b191      	cbz	r1, dea <My_ADC::setReference(ADC_settings::ADC_REFERENCE)+0x32>
}

// starts calibration
void My_ADC::calibrate() {

	__disable_irq();
     dc4:	b672      	cpsid	i

	calibrating = 1;
     dc6:	2301      	movs	r3, #1
	atomic::clearBitFlag(adc_regs.GS, ADC_GS_CALF);
     dc8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
// starts calibration
void My_ADC::calibrate() {

	__disable_irq();

	calibrating = 1;
     dca:	7543      	strb	r3, [r0, #21]
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
     dcc:	b672      	cpsid	i
        reg &= ~flag;
     dce:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
     dd0:	f023 0302 	bic.w	r3, r3, #2
     dd4:	64d3      	str	r3, [r2, #76]	; 0x4c
        __enable_irq();
     dd6:	b662      	cpsie	i
	atomic::clearBitFlag(adc_regs.GS, ADC_GS_CALF);
	atomic::setBitFlag(adc_regs.GC, ADC_GC_CAL);
     dd8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c

#elif defined(__IMXRT1062__) // Teensy 4
    template <typename T>
    __attribute__((always_inline)) inline void setBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
     dda:	b672      	cpsid	i
        reg |= flag;
     ddc:	6c93      	ldr	r3, [r2, #72]	; 0x48
     dde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     de2:	6493      	str	r3, [r2, #72]	; 0x48
        __enable_irq();
     de4:	b662      	cpsie	i

	__enable_irq();
     de6:	b662      	cpsie	i
     de8:	4770      	bx	lr

#ifdef ADC_USE_INTERNAL_VREF
		VREF::stop(); // disable 1.2V reference source when using the external ref (p. 102, 3.7.1.7)
#endif

		analog_reference_internal = ADC_REF_SOURCE::REF_DEFAULT;
     dea:	7741      	strb	r1, [r0, #29]
		atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_REFSEL(3));
     dec:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
     dee:	b672      	cpsid	i
        reg &= ~flag;
     df0:	6c53      	ldr	r3, [r2, #68]	; 0x44
     df2:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
     df6:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
     df8:	b662      	cpsie	i
     dfa:	e7e3      	b.n	dc4 <My_ADC::setReference(ADC_settings::ADC_REFERENCE)+0xc>
// internal reference requested
#ifdef ADC_USE_INTERNAL_VREF
		VREF::start(); // enable VREF if Teensy 3.x
#endif

		analog_reference_internal = ADC_REF_SOURCE::REF_ALT;
     dfc:	7741      	strb	r1, [r0, #29]
     dfe:	e7e1      	b.n	dc4 <My_ADC::setReference(ADC_settings::ADC_REFERENCE)+0xc>

00000e00 <My_ADC::setResolution(unsigned char)>:
*  If you want something in between (11 bits single-ended for example) select the inmediate higher
*  and shift the result one to the right.
*
*  It doesn't recalibrate
*/
void My_ADC::setResolution(uint8_t bits) {
     e00:	b538      	push	{r3, r4, r5, lr}

	if (analog_res_bits == bits) {
     e02:	7dc3      	ldrb	r3, [r0, #23]
     e04:	428b      	cmp	r3, r1
     e06:	d00a      	beq.n	e1e <My_ADC::setResolution(unsigned char)+0x1e>
		return;
	}

	if (calibrating)
     e08:	7d43      	ldrb	r3, [r0, #21]
     e0a:	4604      	mov	r4, r0
     e0c:	460d      	mov	r5, r1
     e0e:	b93b      	cbnz	r3, e20 <My_ADC::setResolution(unsigned char)+0x20>
		wait_for_cal();

	// conversion resolution
	// single-ended 8 bits is the same as differential 9 bits, etc.
	if (bits == 8) {
     e10:	2d08      	cmp	r5, #8
     e12:	d009      	beq.n	e28 <My_ADC::setResolution(unsigned char)+0x28>
		atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_MODE(3));
		analog_max_val = 255; // diff mode 9 bits has 1 bit for sign, so max value is the same as single 8 bits
	}
	else if (bits == 10) {
     e14:	2d0a      	cmp	r5, #10
     e16:	d012      	beq.n	e3e <My_ADC::setResolution(unsigned char)+0x3e>
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_MODE(3), ADC_CFG_MODE(1));
		analog_max_val = 1023;
	}
	else if (bits == 12) {
     e18:	2d0c      	cmp	r5, #12
     e1a:	d022      	beq.n	e62 <My_ADC::setResolution(unsigned char)+0x62>
	}
	else {
		// error
	}

	analog_res_bits = bits;
     e1c:	75e5      	strb	r5, [r4, #23]
     e1e:	bd38      	pop	{r3, r4, r5, pc}
	if (analog_res_bits == bits) {
		return;
	}

	if (calibrating)
		wait_for_cal();
     e20:	f7ff ffb0 	bl	d84 <My_ADC::wait_for_cal()>

	// conversion resolution
	// single-ended 8 bits is the same as differential 9 bits, etc.
	if (bits == 8) {
     e24:	2d08      	cmp	r5, #8
     e26:	d1f5      	bne.n	e14 <My_ADC::setResolution(unsigned char)+0x14>
		atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_MODE(3));
     e28:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
     e2a:	b672      	cpsid	i
        reg &= ~flag;
     e2c:	6c53      	ldr	r3, [r2, #68]	; 0x44
     e2e:	f023 030c 	bic.w	r3, r3, #12
     e32:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
     e34:	b662      	cpsie	i
		analog_max_val = 255; // diff mode 9 bits has 1 bit for sign, so max value is the same as single 8 bits
     e36:	23ff      	movs	r3, #255	; 0xff
	}
	else {
		// error
	}

	analog_res_bits = bits;
     e38:	75e5      	strb	r5, [r4, #23]

	// conversion resolution
	// single-ended 8 bits is the same as differential 9 bits, etc.
	if (bits == 8) {
		atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_MODE(3));
		analog_max_val = 255; // diff mode 9 bits has 1 bit for sign, so max value is the same as single 8 bits
     e3a:	61a3      	str	r3, [r4, #24]
     e3c:	e7ef      	b.n	e1e <My_ADC::setResolution(unsigned char)+0x1e>
	}
	else if (bits == 10) {
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_MODE(3), ADC_CFG_MODE(1));
     e3e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c

#elif defined(__IMXRT1062__) // Teensy 4
    template <typename T>
    __attribute__((always_inline)) inline void setBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
     e40:	b672      	cpsid	i
        reg |= flag;
     e42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
     e44:	f042 0204 	orr.w	r2, r2, #4
     e48:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
     e4a:	b662      	cpsie	i
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
     e4c:	b672      	cpsid	i
        reg &= ~flag;
     e4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
     e50:	f022 0208 	bic.w	r2, r2, #8
     e54:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
     e56:	b662      	cpsie	i
		analog_max_val = 1023;
     e58:	f240 33ff 	movw	r3, #1023	; 0x3ff
	}
	else {
		// error
	}

	analog_res_bits = bits;
     e5c:	75e5      	strb	r5, [r4, #23]
		atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_MODE(3));
		analog_max_val = 255; // diff mode 9 bits has 1 bit for sign, so max value is the same as single 8 bits
	}
	else if (bits == 10) {
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_MODE(3), ADC_CFG_MODE(1));
		analog_max_val = 1023;
     e5e:	61a3      	str	r3, [r4, #24]
     e60:	e7dd      	b.n	e1e <My_ADC::setResolution(unsigned char)+0x1e>
	}
	else if (bits == 12) {
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_MODE(3), ADC_CFG_MODE(2));
     e62:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
     e64:	b672      	cpsid	i
        reg &= ~flag;
     e66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
     e68:	f022 0204 	bic.w	r2, r2, #4
     e6c:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
     e6e:	b662      	cpsie	i

#elif defined(__IMXRT1062__) // Teensy 4
    template <typename T>
    __attribute__((always_inline)) inline void setBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
     e70:	b672      	cpsid	i
        reg |= flag;
     e72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
     e74:	f042 0208 	orr.w	r2, r2, #8
     e78:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
     e7a:	b662      	cpsie	i
		analog_max_val = 4095;
     e7c:	f640 73ff 	movw	r3, #4095	; 0xfff
	}
	else {
		// error
	}

	analog_res_bits = bits;
     e80:	75e5      	strb	r5, [r4, #23]
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_MODE(3), ADC_CFG_MODE(1));
		analog_max_val = 1023;
	}
	else if (bits == 12) {
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_MODE(3), ADC_CFG_MODE(2));
		analog_max_val = 4095;
     e82:	61a3      	str	r3, [r4, #24]
     e84:	e7cb      	b.n	e1e <My_ADC::setResolution(unsigned char)+0x1e>
     e86:	bf00      	nop

00000e88 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)>:
* HIGH_SPEED adds +6 ADCK.
* VERY_HIGH_SPEED is the highest possible sampling speed (0 ADCK added).
*/
void My_ADC::setConversionSpeed(ADC_CONVERSION_SPEED speed) {

	if (speed == conversion_speed) { // no change
     e88:	7f83      	ldrb	r3, [r0, #30]
     e8a:	428b      	cmp	r3, r1
* LOW_SPEED adds +16 ADCK.
* MED_SPEED adds +10 ADCK.
* HIGH_SPEED adds +6 ADCK.
* VERY_HIGH_SPEED is the highest possible sampling speed (0 ADCK added).
*/
void My_ADC::setConversionSpeed(ADC_CONVERSION_SPEED speed) {
     e8c:	b470      	push	{r4, r5, r6}

	if (speed == conversion_speed) { // no change
     e8e:	d00d      	beq.n	eac <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x24>
	//if (calibrating) wait_for_cal();

	bool is_adack = false;
	uint32_t ADC_CFG1_speed = 0; // store the clock and divisor (set to 0 to avoid warnings)

	switch (speed) {
     e90:	2904      	cmp	r1, #4
     e92:	d806      	bhi.n	ea2 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x1a>
     e94:	e8df f011 	tbh	[pc, r1, lsl #1]
     e98:	007a002b 	.word	0x007a002b
     e9c:	00c500a0 	.word	0x00c500a0
     ea0:	000c      	.short	0x000c
        return static_cast<ADC_ERROR>(static_cast<uint16_t>(lhs) & static_cast<uint16_t>(rhs));
    }
    //! |= operator for ADC_ERRORs, it changes the left hand side ADC_ERROR. @internal
    inline ADC_ERROR operator|=(volatile ADC_ERROR &lhs, ADC_ERROR rhs)
    {
        return lhs = static_cast<ADC_ERROR>(static_cast<uint16_t>(lhs) | static_cast<uint16_t>(rhs));
     ea2:	8a43      	ldrh	r3, [r0, #18]
     ea4:	b29b      	uxth	r3, r3
     ea6:	f043 0301 	orr.w	r3, r3, #1
     eaa:	8243      	strh	r3, [r0, #18]
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADICLK(3), ADC_CFG1_speed & ADC_CFG_ADICLK(3)); // bus or bus/2
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADIV(3), ADC_CFG1_speed & ADC_CFG_ADIV(3));     // divisor for the clock source
	}

	conversion_speed = speed;
}
     eac:	bc70      	pop	{r4, r5, r6}
     eae:	4770      	bx	lr
	case ADC_CONVERSION_SPEED::ADACK_10:
		atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADHSC);
		is_adack = true;
		break;
	case ADC_CONVERSION_SPEED::ADACK_20:
		atomic::setBitFlag(adc_regs.CFG, ADC_CFG_ADHSC);
     eb0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c

#elif defined(__IMXRT1062__) // Teensy 4
    template <typename T>
    __attribute__((always_inline)) inline void setBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
     eb2:	b672      	cpsid	i
        reg |= flag;
     eb4:	6c53      	ldr	r3, [r2, #68]	; 0x44
     eb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     eba:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
     ebc:	b662      	cpsie	i
		return;
	}

	if (is_adack) {
		// async clock source, independent of the bus clock
		atomic::setBitFlag(adc_regs.CFG, ADC_CFG_ADICLK(3)); // select ADACK as clock source
     ebe:	6ac2      	ldr	r2, [r0, #44]	; 0x2c

#elif defined(__IMXRT1062__) // Teensy 4
    template <typename T>
    __attribute__((always_inline)) inline void setBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
     ec0:	b672      	cpsid	i
        reg |= flag;
     ec2:	6c53      	ldr	r3, [r2, #68]	; 0x44
     ec4:	f043 0303 	orr.w	r3, r3, #3
     ec8:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
     eca:	b662      	cpsie	i
		atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADIV(3)); // select no dividers
     ecc:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
     ece:	b672      	cpsid	i
        reg &= ~flag;
     ed0:	6c53      	ldr	r3, [r2, #68]	; 0x44
     ed2:	f023 0360 	bic.w	r3, r3, #96	; 0x60
     ed6:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
     ed8:	b662      	cpsie	i
		atomic::setBitFlag(adc_regs.GC, ADC_GC_ADACKEN);
     eda:	6ac2      	ldr	r2, [r0, #44]	; 0x2c

#elif defined(__IMXRT1062__) // Teensy 4
    template <typename T>
    __attribute__((always_inline)) inline void setBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
     edc:	b672      	cpsid	i
        reg |= flag;
     ede:	6c93      	ldr	r3, [r2, #72]	; 0x48
     ee0:	f043 0301 	orr.w	r3, r3, #1
     ee4:	6493      	str	r3, [r2, #72]	; 0x48
        __enable_irq();
     ee6:	b662      	cpsie	i
		atomic::clearBitFlag(adc_regs.GC, ADC_GC_ADACKEN);                                          // disable async
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADICLK(3), ADC_CFG1_speed & ADC_CFG_ADICLK(3)); // bus or bus/2
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADIV(3), ADC_CFG1_speed & ADC_CFG_ADIV(3));     // divisor for the clock source
	}

	conversion_speed = speed;
     ee8:	7781      	strb	r1, [r0, #30]
}
     eea:	bc70      	pop	{r4, r5, r6}
     eec:	4770      	bx	lr
	uint32_t ADC_CFG1_speed = 0; // store the clock and divisor (set to 0 to avoid warnings)

	switch (speed) {
		// normal bus clock
	case ADC_CONVERSION_SPEED::LOW_SPEED:
		atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADHSC);
     eee:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
     ef0:	b672      	cpsid	i
        reg &= ~flag;
     ef2:	6c53      	ldr	r3, [r2, #68]	; 0x44
     ef4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
     ef8:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
     efa:	b662      	cpsie	i
		atomic::setBitFlag(adc_regs.CFG, ADC_CFG_ADLPC);
     efc:	6ac2      	ldr	r2, [r0, #44]	; 0x2c

#elif defined(__IMXRT1062__) // Teensy 4
    template <typename T>
    __attribute__((always_inline)) inline void setBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
     efe:	b672      	cpsid	i
        reg |= flag;
     f00:	6c53      	ldr	r3, [r2, #68]	; 0x44
     f02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     f06:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
     f08:	b662      	cpsie	i
		// ADC_CFG1_speed = ADC_CFG1_LOW_SPEED;
		ADC_CFG1_speed = get_CFG_LOW_SPEED(ADC_F_BUS);
     f0a:	4b69      	ldr	r3, [pc, #420]	; (10b0 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x228>)
    }

    //! ADC_CFG1_LOW_SPEED is the lowest freq for 16 bits @internal
    constexpr uint32_t get_CFG_LOW_SPEED(uint32_t f_adc_clock)
    {
        if (f_adc_clock / 16 >= ADC_MIN_FREQ_16BITS)
     f0c:	4a69      	ldr	r2, [pc, #420]	; (10b4 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x22c>)
     f0e:	681b      	ldr	r3, [r3, #0]
     f10:	4293      	cmp	r3, r2
     f12:	f200 80b0 	bhi.w	1076 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x1ee>
        {
            return (ADC_LIB_CFG1_ADIV(3) + ADC_LIB_CFG1_ADICLK(1));
        }
        else if (f_adc_clock / 8 >= ADC_MIN_FREQ_16BITS)
     f16:	f1a2 72f4 	sub.w	r2, r2, #31981568	; 0x1e80000
     f1a:	f5a2 4290 	sub.w	r2, r2, #18432	; 0x4800
     f1e:	4293      	cmp	r3, r2
     f20:	d87b      	bhi.n	101a <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x192>
        {
            return (ADC_LIB_CFG1_ADIV(3) + ADC_LIB_CFG1_ADICLK(0));
        }
        else if (f_adc_clock / 4 >= ADC_MIN_FREQ_16BITS)
     f22:	4a65      	ldr	r2, [pc, #404]	; (10b8 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x230>)
     f24:	4293      	cmp	r3, r2
     f26:	f200 80bd 	bhi.w	10a4 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x21c>
        {
            return (ADC_LIB_CFG1_ADIV(2) + ADC_LIB_CFG1_ADICLK(0));
        }
        else if (f_adc_clock / 2 >= ADC_MIN_FREQ_16BITS)
     f2a:	4a64      	ldr	r2, [pc, #400]	; (10bc <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x234>)
     f2c:	4293      	cmp	r3, r2
     f2e:	f240 809e 	bls.w	106e <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x1e6>
    }

    //! ADC_CFG1_HI_SPEED_16_BITS is the highest freq for 16 bits @internal
    constexpr uint32_t get_CFG_HI_SPEED_16_BITS(uint32_t f_adc_clock)
    {
        if (f_adc_clock <= ADC_MAX_FREQ_16BITS)
     f32:	2300      	movs	r3, #0
     f34:	2601      	movs	r6, #1
     f36:	461d      	mov	r5, r3
		atomic::setBitFlag(adc_regs.GC, ADC_GC_ADACKEN);
	}
	else {
		// normal bus clock used - disable the internal asynchronous clock
		// total speed can be: bus, bus/2, bus/4, bus/8 or bus/16.
		atomic::clearBitFlag(adc_regs.GC, ADC_GC_ADACKEN);                                          // disable async
     f38:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
     f3a:	b672      	cpsid	i
        reg &= ~flag;
     f3c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
     f3e:	f022 0201 	bic.w	r2, r2, #1
     f42:	64a2      	str	r2, [r4, #72]	; 0x48
        __enable_irq();
     f44:	b662      	cpsie	i
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADICLK(3), ADC_CFG1_speed & ADC_CFG_ADICLK(3)); // bus or bus/2
     f46:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
            }
        }
        else
        { // 2 bits
            // lsb first
            if ((state >> __builtin_ctzl(flag)) & 0x1)
     f48:	2b00      	cmp	r3, #0
     f4a:	f000 8082 	beq.w	1052 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x1ca>

#elif defined(__IMXRT1062__) // Teensy 4
    template <typename T>
    __attribute__((always_inline)) inline void setBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
     f4e:	b672      	cpsid	i
        reg |= flag;
     f50:	6c53      	ldr	r3, [r2, #68]	; 0x44
     f52:	f043 0301 	orr.w	r3, r3, #1
     f56:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
     f58:	b662      	cpsie	i
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
     f5a:	b672      	cpsid	i
        reg &= ~flag;
     f5c:	6c53      	ldr	r3, [r2, #68]	; 0x44
     f5e:	f023 0302 	bic.w	r3, r3, #2
     f62:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
     f64:	b662      	cpsie	i
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADIV(3), ADC_CFG1_speed & ADC_CFG_ADIV(3));     // divisor for the clock source
     f66:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
            }
        }
        else
        { // 2 bits
            // lsb first
            if ((state >> __builtin_ctzl(flag)) & 0x1)
     f68:	2e00      	cmp	r6, #0
     f6a:	d062      	beq.n	1032 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x1aa>

#elif defined(__IMXRT1062__) // Teensy 4
    template <typename T>
    __attribute__((always_inline)) inline void setBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
     f6c:	b672      	cpsid	i
        reg |= flag;
     f6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
     f70:	f042 0220 	orr.w	r2, r2, #32
     f74:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
     f76:	b662      	cpsie	i
            else
            { // lsb is 0
                clearBitFlag(reg, (uint32_t)(1 << __builtin_ctzl(flag)));
            }
            // msb
            if ((state >> (31 - __builtin_clzl(flag))) & 0x1)
     f78:	2d00      	cmp	r5, #0
     f7a:	d062      	beq.n	1042 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x1ba>

#elif defined(__IMXRT1062__) // Teensy 4
    template <typename T>
    __attribute__((always_inline)) inline void setBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
     f7c:	b672      	cpsid	i
        reg |= flag;
     f7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
     f80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     f84:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
     f86:	b662      	cpsie	i
	}

	conversion_speed = speed;
     f88:	7781      	strb	r1, [r0, #30]
     f8a:	e7ae      	b.n	eea <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x62>
		atomic::setBitFlag(adc_regs.CFG, ADC_CFG_ADLPC);
		// ADC_CFG1_speed = ADC_CFG1_LOW_SPEED;
		ADC_CFG1_speed = get_CFG_LOW_SPEED(ADC_F_BUS);
		break;
	case ADC_CONVERSION_SPEED::MED_SPEED:
		atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADHSC);
     f8c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
     f8e:	b672      	cpsid	i
        reg &= ~flag;
     f90:	6c53      	ldr	r3, [r2, #68]	; 0x44
     f92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
     f96:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
     f98:	b662      	cpsie	i
		atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADLPC);
     f9a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
     f9c:	b672      	cpsid	i
        reg &= ~flag;
     f9e:	6c53      	ldr	r3, [r2, #68]	; 0x44
     fa0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
     fa4:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
     fa6:	b662      	cpsie	i
		ADC_CFG1_speed = get_CFG_MEDIUM_SPEED(ADC_F_BUS);
     fa8:	4b41      	ldr	r3, [pc, #260]	; (10b0 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x228>)
    }

    //! ADC_CFG1_LOW_SPEED is the lowest freq for 16 bits @internal
    constexpr uint32_t get_CFG_LOW_SPEED(uint32_t f_adc_clock)
    {
        if (f_adc_clock / 16 >= ADC_MIN_FREQ_16BITS)
     faa:	4a42      	ldr	r2, [pc, #264]	; (10b4 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x22c>)
     fac:	681b      	ldr	r3, [r3, #0]
     fae:	4293      	cmp	r3, r2
     fb0:	d865      	bhi.n	107e <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x1f6>
        {
            return (ADC_LIB_CFG1_ADIV(3) + ADC_LIB_CFG1_ADICLK(1));
        }
        else if (f_adc_clock / 8 >= ADC_MIN_FREQ_16BITS)
     fb2:	f1a2 72f4 	sub.w	r2, r2, #31981568	; 0x1e80000
     fb6:	f5a2 4290 	sub.w	r2, r2, #18432	; 0x4800
     fba:	4293      	cmp	r3, r2
     fbc:	d950      	bls.n	1060 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x1d8>
    }

    //! ADC_CFG1_HI_SPEED_16_BITS is the highest freq for 16 bits @internal
    constexpr uint32_t get_CFG_HI_SPEED_16_BITS(uint32_t f_adc_clock)
    {
        if (f_adc_clock <= ADC_MAX_FREQ_16BITS)
     fbe:	4a40      	ldr	r2, [pc, #256]	; (10c0 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x238>)
     fc0:	4293      	cmp	r3, r2
     fc2:	d9b6      	bls.n	f32 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xaa>
        {
            return (ADC_LIB_CFG1_ADIV(0) + ADC_LIB_CFG1_ADICLK(0));
        }
        else if (f_adc_clock / 2 <= ADC_MAX_FREQ_16BITS)
        {
            return (ADC_LIB_CFG1_ADIV(1) + ADC_LIB_CFG1_ADICLK(0));
     fc4:	2320      	movs	r3, #32
     fc6:	3320      	adds	r3, #32
     fc8:	f003 0560 	and.w	r5, r3, #96	; 0x60
     fcc:	f003 0301 	and.w	r3, r3, #1
     fd0:	f3c5 1640 	ubfx	r6, r5, #5, #1
     fd4:	09ad      	lsrs	r5, r5, #6
     fd6:	e7af      	b.n	f38 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xb0>
		break;
	case ADC_CONVERSION_SPEED::HIGH_SPEED:
		atomic::setBitFlag(adc_regs.CFG, ADC_CFG_ADHSC);
     fd8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c

#elif defined(__IMXRT1062__) // Teensy 4
    template <typename T>
    __attribute__((always_inline)) inline void setBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
     fda:	b672      	cpsid	i
        reg |= flag;
     fdc:	6c53      	ldr	r3, [r2, #68]	; 0x44
     fde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     fe2:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
     fe4:	b662      	cpsie	i
		atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADLPC);
     fe6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
     fe8:	b672      	cpsid	i
        reg &= ~flag;
     fea:	6c53      	ldr	r3, [r2, #68]	; 0x44
     fec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
     ff0:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
     ff2:	b662      	cpsie	i
		ADC_CFG1_speed = get_CFG_HIGH_SPEED(ADC_F_BUS);
     ff4:	4b2e      	ldr	r3, [pc, #184]	; (10b0 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x228>)
    }

    //! ADC_CFG1_HI_SPEED is the highest freq for under 16 bits @internal
    constexpr uint32_t get_CFG_HIGH_SPEED(uint32_t f_adc_clock)
    {
        if (f_adc_clock <= ADC_MAX_FREQ)
     ff6:	4a32      	ldr	r2, [pc, #200]	; (10c0 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x238>)
     ff8:	681b      	ldr	r3, [r3, #0]
     ffa:	4293      	cmp	r3, r2
     ffc:	d937      	bls.n	106e <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x1e6>
        {
            return (ADC_LIB_CFG1_ADIV(0) + ADC_LIB_CFG1_ADICLK(0));
        }
        else if (f_adc_clock / 2 <= ADC_MAX_FREQ)
     ffe:	4a31      	ldr	r2, [pc, #196]	; (10c4 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x23c>)
    1000:	4293      	cmp	r3, r2
    1002:	d996      	bls.n	f32 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xaa>
        {
            return (ADC_LIB_CFG1_ADIV(1) + ADC_LIB_CFG1_ADICLK(0));
        }
        else if (f_adc_clock / 4 <= ADC_MAX_FREQ)
    1004:	4a30      	ldr	r2, [pc, #192]	; (10c8 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x240>)
    1006:	4293      	cmp	r3, r2
    1008:	d94c      	bls.n	10a4 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x21c>
        {
            return (ADC_LIB_CFG1_ADIV(2) + ADC_LIB_CFG1_ADICLK(0));
        }
        else if (f_adc_clock / 8 <= ADC_MAX_FREQ)
    100a:	f102 6218 	add.w	r2, r2, #159383552	; 0x9800000
    100e:	f502 2216 	add.w	r2, r2, #614400	; 0x96000
    1012:	f602 0204 	addw	r2, r2, #2052	; 0x804
    1016:	4293      	cmp	r3, r2
    1018:	d82d      	bhi.n	1076 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x1ee>
        }
        else if (f_adc_clock / 8 >= ADC_MIN_FREQ_16BITS)
        {
            return (ADC_LIB_CFG1_ADIV(3) + ADC_LIB_CFG1_ADICLK(0));
        }
        else if (f_adc_clock / 4 >= ADC_MIN_FREQ_16BITS)
    101a:	2501      	movs	r5, #1
    101c:	2300      	movs	r3, #0
    101e:	462e      	mov	r6, r5
    1020:	e78a      	b.n	f38 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xb0>
		break;
		// adack - async clock source, independent of the bus clock
// fADK = 10 or 20 MHz
	case ADC_CONVERSION_SPEED::ADACK_10:
		atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADHSC);
    1022:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    1024:	b672      	cpsid	i
        reg &= ~flag;
    1026:	6c53      	ldr	r3, [r2, #68]	; 0x44
    1028:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    102c:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
    102e:	b662      	cpsie	i
		is_adack = true;
		break;
    1030:	e745      	b.n	ebe <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x36>
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    1032:	b672      	cpsid	i
        reg &= ~flag;
    1034:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    1036:	f022 0220 	bic.w	r2, r2, #32
    103a:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
    103c:	b662      	cpsie	i
            else
            { // lsb is 0
                clearBitFlag(reg, (uint32_t)(1 << __builtin_ctzl(flag)));
            }
            // msb
            if ((state >> (31 - __builtin_clzl(flag))) & 0x1)
    103e:	2d00      	cmp	r5, #0
    1040:	d19c      	bne.n	f7c <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xf4>
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    1042:	b672      	cpsid	i
        reg &= ~flag;
    1044:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    1046:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    104a:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
    104c:	b662      	cpsie	i
		atomic::clearBitFlag(adc_regs.GC, ADC_GC_ADACKEN);                                          // disable async
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADICLK(3), ADC_CFG1_speed & ADC_CFG_ADICLK(3)); // bus or bus/2
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADIV(3), ADC_CFG1_speed & ADC_CFG_ADIV(3));     // divisor for the clock source
	}

	conversion_speed = speed;
    104e:	7781      	strb	r1, [r0, #30]
    1050:	e74b      	b.n	eea <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x62>
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    1052:	b672      	cpsid	i
        reg &= ~flag;
    1054:	6c53      	ldr	r3, [r2, #68]	; 0x44
    1056:	f023 0301 	bic.w	r3, r3, #1
    105a:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
    105c:	b662      	cpsie	i
    105e:	e77c      	b.n	f5a <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xd2>
    1060:	f5a2 0274 	sub.w	r2, r2, #15990784	; 0xf40000
    1064:	f5a2 5210 	sub.w	r2, r2, #9216	; 0x2400
    1068:	4293      	cmp	r3, r2
    106a:	f63f af62 	bhi.w	f32 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xaa>
    106e:	2300      	movs	r3, #0
    1070:	461d      	mov	r5, r3
    1072:	461e      	mov	r6, r3
    1074:	e760      	b.n	f38 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xb0>
    1076:	2301      	movs	r3, #1
    1078:	461d      	mov	r5, r3
    107a:	461e      	mov	r6, r3
    107c:	e75c      	b.n	f38 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xb0>
    {
        if (f_adc_clock <= ADC_MAX_FREQ_16BITS)
        {
            return (ADC_LIB_CFG1_ADIV(0) + ADC_LIB_CFG1_ADICLK(0));
        }
        else if (f_adc_clock / 2 <= ADC_MAX_FREQ_16BITS)
    107e:	4a11      	ldr	r2, [pc, #68]	; (10c4 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x23c>)
    1080:	4293      	cmp	r3, r2
    1082:	d90f      	bls.n	10a4 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x21c>
        {
            return (ADC_LIB_CFG1_ADIV(1) + ADC_LIB_CFG1_ADICLK(0));
        }
        else if (f_adc_clock / 4 <= ADC_MAX_FREQ_16BITS)
    1084:	4a10      	ldr	r2, [pc, #64]	; (10c8 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x240>)
    1086:	4293      	cmp	r3, r2
    1088:	d910      	bls.n	10ac <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x224>
        {
            return (ADC_LIB_CFG1_ADIV(2) + ADC_LIB_CFG1_ADICLK(0));
        }
        else if (f_adc_clock / 8 <= ADC_MAX_FREQ_16BITS)
    108a:	4a10      	ldr	r2, [pc, #64]	; (10cc <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x244>)
        {
            return (ADC_LIB_CFG1_ADIV(3) + ADC_LIB_CFG1_ADICLK(0));
        }
        else
        {
            return (ADC_LIB_CFG1_ADIV(3) + ADC_LIB_CFG1_ADICLK(1));
    108c:	4293      	cmp	r3, r2
    108e:	bf94      	ite	ls
    1090:	2360      	movls	r3, #96	; 0x60
    1092:	2361      	movhi	r3, #97	; 0x61
    1094:	f003 0560 	and.w	r5, r3, #96	; 0x60
    1098:	f003 0301 	and.w	r3, r3, #1
    109c:	f3c5 1640 	ubfx	r6, r5, #5, #1
    10a0:	09ad      	lsrs	r5, r5, #6
    10a2:	e749      	b.n	f38 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xb0>
    {
        if (f_adc_clock <= ADC_MAX_FREQ_16BITS)
        {
            return (ADC_LIB_CFG1_ADIV(0) + ADC_LIB_CFG1_ADICLK(0));
        }
        else if (f_adc_clock / 2 <= ADC_MAX_FREQ_16BITS)
    10a4:	2300      	movs	r3, #0
    10a6:	2501      	movs	r5, #1
    10a8:	461e      	mov	r6, r3
    10aa:	e745      	b.n	f38 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xb0>
        {
            return (ADC_LIB_CFG1_ADIV(1) + ADC_LIB_CFG1_ADICLK(0));
        }
        else if (f_adc_clock / 4 <= ADC_MAX_FREQ_16BITS)
        {
            return (ADC_LIB_CFG1_ADIV(2) + ADC_LIB_CFG1_ADICLK(0));
    10ac:	2340      	movs	r3, #64	; 0x40
    10ae:	e78a      	b.n	fc6 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x13e>
    10b0:	20012264 	.word	0x20012264
    10b4:	03d08fff 	.word	0x03d08fff
    10b8:	00f423ff 	.word	0x00f423ff
    10bc:	007a11ff 	.word	0x007a11ff
    10c0:	02625a00 	.word	0x02625a00
    10c4:	04c4b401 	.word	0x04c4b401
    10c8:	09896803 	.word	0x09896803
    10cc:	1312d007 	.word	0x1312d007

000010d0 <My_ADC::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)>:
* MED_HIGH_SPEED takes 9 ADCK.
* HIGH_SPEED takes 7 ADCK.
* HIGH_VERY_HIGH_SPEED takes 5 ADCK
* VERY_HIGH_SPEED is the highest possible sampling speed (3 ADCK)
*/
void My_ADC::setSamplingSpeed(ADC_SAMPLING_SPEED speed) {
    10d0:	b538      	push	{r3, r4, r5, lr}
	if (calibrating)
    10d2:	7d43      	ldrb	r3, [r0, #21]
* MED_HIGH_SPEED takes 9 ADCK.
* HIGH_SPEED takes 7 ADCK.
* HIGH_VERY_HIGH_SPEED takes 5 ADCK
* VERY_HIGH_SPEED is the highest possible sampling speed (3 ADCK)
*/
void My_ADC::setSamplingSpeed(ADC_SAMPLING_SPEED speed) {
    10d4:	4604      	mov	r4, r0
    10d6:	460d      	mov	r5, r1
	if (calibrating)
    10d8:	b9eb      	cbnz	r3, 1116 <My_ADC::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0x46>
		wait_for_cal();

	switch (speed) {
    10da:	2d07      	cmp	r5, #7
    10dc:	d819      	bhi.n	1112 <My_ADC::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0x42>
    10de:	e8df f005 	tbb	[pc, r5]
    10e2:	331d      	.short	0x331d
    10e4:	59534d40 	.word	0x59534d40
    10e8:	045f      	.short	0x045f
	case ADC_SAMPLING_SPEED::HIGH_VERY_HIGH_SPEED:
		atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADLSMP); // long sampling time disabled
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADSTS(3), ADC_CFG_ADSTS(1));
		break;
	case ADC_SAMPLING_SPEED::VERY_HIGH_SPEED:
		atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADLSMP); // long sampling time disabled
    10ea:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    10ec:	b672      	cpsid	i
        reg &= ~flag;
    10ee:	6c53      	ldr	r3, [r2, #68]	; 0x44
    10f0:	f023 0310 	bic.w	r3, r3, #16
    10f4:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
    10f6:	b662      	cpsie	i
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADSTS(3), ADC_CFG_ADSTS(0));
    10f8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    10fa:	b672      	cpsid	i
        reg &= ~flag;
    10fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    10fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    1102:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
    1104:	b662      	cpsie	i
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    1106:	b672      	cpsid	i
        reg &= ~flag;
    1108:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    110a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    110e:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
    1110:	b662      	cpsie	i
		break;
	}
	sampling_speed = speed;
    1112:	77e5      	strb	r5, [r4, #31]
    1114:	bd38      	pop	{r3, r4, r5, pc}
* HIGH_VERY_HIGH_SPEED takes 5 ADCK
* VERY_HIGH_SPEED is the highest possible sampling speed (3 ADCK)
*/
void My_ADC::setSamplingSpeed(ADC_SAMPLING_SPEED speed) {
	if (calibrating)
		wait_for_cal();
    1116:	f7ff fe35 	bl	d84 <My_ADC::wait_for_cal()>
    111a:	e7de      	b.n	10da <My_ADC::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0xa>

	switch (speed) {
	case ADC_SAMPLING_SPEED::VERY_LOW_SPEED:
		atomic::setBitFlag(adc_regs.CFG, ADC_CFG_ADLSMP); // long sampling time enable
    111c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c

#elif defined(__IMXRT1062__) // Teensy 4
    template <typename T>
    __attribute__((always_inline)) inline void setBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    111e:	b672      	cpsid	i
        reg |= flag;
    1120:	6c53      	ldr	r3, [r2, #68]	; 0x44
    1122:	f043 0310 	orr.w	r3, r3, #16

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
        reg &= ~flag;
    1126:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
    1128:	b662      	cpsie	i
		atomic::setBitFlag(adc_regs.CFG, ADC_CFG_ADLSMP); // long sampling time enable
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADSTS(3), ADC_CFG_ADSTS(0));
		break;
	case ADC_SAMPLING_SPEED::MED_HIGH_SPEED:
		atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADLSMP); // long sampling time disabled
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADSTS(3), ADC_CFG_ADSTS(3));
    112a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c

#elif defined(__IMXRT1062__) // Teensy 4
    template <typename T>
    __attribute__((always_inline)) inline void setBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    112c:	b672      	cpsid	i
        reg |= flag;
    112e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    1130:	f442 7280 	orr.w	r2, r2, #256	; 0x100

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
        reg &= ~flag;
    1134:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
    1136:	b662      	cpsie	i

#elif defined(__IMXRT1062__) // Teensy 4
    template <typename T>
    __attribute__((always_inline)) inline void setBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    1138:	b672      	cpsid	i
        reg |= flag;
    113a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    113c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    1140:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
    1142:	b662      	cpsie	i
	case ADC_SAMPLING_SPEED::VERY_HIGH_SPEED:
		atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADLSMP); // long sampling time disabled
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADSTS(3), ADC_CFG_ADSTS(0));
		break;
	}
	sampling_speed = speed;
    1144:	77e5      	strb	r5, [r4, #31]
    1146:	bd38      	pop	{r3, r4, r5, pc}
	case ADC_SAMPLING_SPEED::VERY_LOW_SPEED:
		atomic::setBitFlag(adc_regs.CFG, ADC_CFG_ADLSMP); // long sampling time enable
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADSTS(3), ADC_CFG_ADSTS(3));
		break;
	case ADC_SAMPLING_SPEED::LOW_SPEED:
		atomic::setBitFlag(adc_regs.CFG, ADC_CFG_ADLSMP); // long sampling time enable
    1148:	6ae2      	ldr	r2, [r4, #44]	; 0x2c

#elif defined(__IMXRT1062__) // Teensy 4
    template <typename T>
    __attribute__((always_inline)) inline void setBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    114a:	b672      	cpsid	i
        reg |= flag;
    114c:	6c53      	ldr	r3, [r2, #68]	; 0x44
    114e:	f043 0310 	orr.w	r3, r3, #16
    1152:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
    1154:	b662      	cpsie	i
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADSTS(3), ADC_CFG_ADSTS(2));
    1156:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    1158:	b672      	cpsid	i
        reg &= ~flag;
    115a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    115c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    1160:	e7e8      	b.n	1134 <My_ADC::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0x64>
		break;
	case ADC_SAMPLING_SPEED::LOW_MED_SPEED:
		atomic::setBitFlag(adc_regs.CFG, ADC_CFG_ADLSMP); // long sampling time enable
    1162:	6ae2      	ldr	r2, [r4, #44]	; 0x2c

#elif defined(__IMXRT1062__) // Teensy 4
    template <typename T>
    __attribute__((always_inline)) inline void setBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    1164:	b672      	cpsid	i
        reg |= flag;
    1166:	6c53      	ldr	r3, [r2, #68]	; 0x44
    1168:	f043 0310 	orr.w	r3, r3, #16

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
        reg &= ~flag;
    116c:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
    116e:	b662      	cpsie	i
		atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADLSMP); // long sampling time disabled
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADSTS(3), ADC_CFG_ADSTS(2));
		break;
	case ADC_SAMPLING_SPEED::HIGH_VERY_HIGH_SPEED:
		atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADLSMP); // long sampling time disabled
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADSTS(3), ADC_CFG_ADSTS(1));
    1170:	6ae3      	ldr	r3, [r4, #44]	; 0x2c

#elif defined(__IMXRT1062__) // Teensy 4
    template <typename T>
    __attribute__((always_inline)) inline void setBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    1172:	b672      	cpsid	i
        reg |= flag;
    1174:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    1176:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    117a:	e7c2      	b.n	1102 <My_ADC::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0x32>
	case ADC_SAMPLING_SPEED::LOW_MED_SPEED:
		atomic::setBitFlag(adc_regs.CFG, ADC_CFG_ADLSMP); // long sampling time enable
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADSTS(3), ADC_CFG_ADSTS(1));
		break;
	case ADC_SAMPLING_SPEED::MED_SPEED:
		atomic::setBitFlag(adc_regs.CFG, ADC_CFG_ADLSMP); // long sampling time enable
    117c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c

#elif defined(__IMXRT1062__) // Teensy 4
    template <typename T>
    __attribute__((always_inline)) inline void setBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    117e:	b672      	cpsid	i
        reg |= flag;
    1180:	6c53      	ldr	r3, [r2, #68]	; 0x44
    1182:	f043 0310 	orr.w	r3, r3, #16
    1186:	e7b5      	b.n	10f4 <My_ADC::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0x24>
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADSTS(3), ADC_CFG_ADSTS(0));
		break;
	case ADC_SAMPLING_SPEED::MED_HIGH_SPEED:
		atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADLSMP); // long sampling time disabled
    1188:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    118a:	b672      	cpsid	i
        reg &= ~flag;
    118c:	6c53      	ldr	r3, [r2, #68]	; 0x44
    118e:	f023 0310 	bic.w	r3, r3, #16
    1192:	e7c8      	b.n	1126 <My_ADC::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0x56>
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADSTS(3), ADC_CFG_ADSTS(3));
		break;
	case ADC_SAMPLING_SPEED::HIGH_SPEED:
		atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADLSMP); // long sampling time disabled
    1194:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    1196:	b672      	cpsid	i
        reg &= ~flag;
    1198:	6c53      	ldr	r3, [r2, #68]	; 0x44
    119a:	f023 0310 	bic.w	r3, r3, #16
    119e:	e7d8      	b.n	1152 <My_ADC::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0x82>
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADSTS(3), ADC_CFG_ADSTS(2));
		break;
	case ADC_SAMPLING_SPEED::HIGH_VERY_HIGH_SPEED:
		atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADLSMP); // long sampling time disabled
    11a0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    11a2:	b672      	cpsid	i
        reg &= ~flag;
    11a4:	6c53      	ldr	r3, [r2, #68]	; 0x44
    11a6:	f023 0310 	bic.w	r3, r3, #16
    11aa:	e7df      	b.n	116c <My_ADC::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0x9c>

000011ac <My_ADC::setAveraging(unsigned char)>:
}

/* Set the number of averages: 0, 4, 8, 16 or 32.
*
*/
void My_ADC::setAveraging(uint8_t num) {
    11ac:	b538      	push	{r3, r4, r5, lr}

	if (calibrating)
    11ae:	7d43      	ldrb	r3, [r0, #21]
}

/* Set the number of averages: 0, 4, 8, 16 or 32.
*
*/
void My_ADC::setAveraging(uint8_t num) {
    11b0:	4604      	mov	r4, r0
    11b2:	460d      	mov	r5, r1

	if (calibrating)
    11b4:	bb13      	cbnz	r3, 11fc <My_ADC::setAveraging(unsigned char)+0x50>
		wait_for_cal();

	if (num <= 1) {
    11b6:	2d01      	cmp	r5, #1
		num = 0;
		// ADC_SC3_avge = 0;
		atomic::clearBitFlag(adc_regs.GC, ADC_GC_AVGE);
    11b8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
void My_ADC::setAveraging(uint8_t num) {

	if (calibrating)
		wait_for_cal();

	if (num <= 1) {
    11ba:	d924      	bls.n	1206 <My_ADC::setAveraging(unsigned char)+0x5a>

#elif defined(__IMXRT1062__) // Teensy 4
    template <typename T>
    __attribute__((always_inline)) inline void setBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    11bc:	b672      	cpsid	i
        reg |= flag;
    11be:	6c93      	ldr	r3, [r2, #72]	; 0x48
    11c0:	f043 0320 	orr.w	r3, r3, #32
    11c4:	6493      	str	r3, [r2, #72]	; 0x48
        __enable_irq();
    11c6:	b662      	cpsie	i
	}
	else {
		// ADC_SC3_avge = 1;
		atomic::setBitFlag(adc_regs.GC, ADC_GC_AVGE);

		if (num <= 4) {
    11c8:	2d04      	cmp	r5, #4
    11ca:	d90d      	bls.n	11e8 <My_ADC::setAveraging(unsigned char)+0x3c>
			num = 4;
			// ADC_SC3_avgs0 = 0;
			// ADC_SC3_avgs1 = 0;
			atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_AVGS(3));
		}
		else if (num <= 8) {
    11cc:	2d08      	cmp	r5, #8
    11ce:	d933      	bls.n	1238 <My_ADC::setAveraging(unsigned char)+0x8c>
			num = 8;
			// ADC_SC3_avgs0 = 1;
			// ADC_SC3_avgs1 = 0;
			atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_AVGS(3), ADC_CFG_AVGS(1));
		}
		else if (num <= 16) {
    11d0:	2d10      	cmp	r5, #16
    11d2:	d921      	bls.n	1218 <My_ADC::setAveraging(unsigned char)+0x6c>
		}
		else {
			num = 32;
			// ADC_SC3_avgs0 = 1;
			// ADC_SC3_avgs1 = 1;
			atomic::setBitFlag(adc_regs.CFG, ADC_CFG_AVGS(3));
    11d4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c

#elif defined(__IMXRT1062__) // Teensy 4
    template <typename T>
    __attribute__((always_inline)) inline void setBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    11d6:	b672      	cpsid	i
        reg |= flag;
    11d8:	6c53      	ldr	r3, [r2, #68]	; 0x44
    11da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
    11de:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
    11e0:	b662      	cpsie	i
			// ADC_SC3_avgs0 = 0;
			// ADC_SC3_avgs1 = 1;
			atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_AVGS(3), ADC_CFG_AVGS(2));
		}
		else {
			num = 32;
    11e2:	2320      	movs	r3, #32
			// ADC_SC3_avgs0 = 1;
			// ADC_SC3_avgs1 = 1;
			atomic::setBitFlag(adc_regs.CFG, ADC_CFG_AVGS(3));
		}
	}
	analog_num_average = num;
    11e4:	7723      	strb	r3, [r4, #28]
    11e6:	bd38      	pop	{r3, r4, r5, pc}

		if (num <= 4) {
			num = 4;
			// ADC_SC3_avgs0 = 0;
			// ADC_SC3_avgs1 = 0;
			atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_AVGS(3));
    11e8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    11ea:	b672      	cpsid	i
        reg &= ~flag;
    11ec:	6c53      	ldr	r3, [r2, #68]	; 0x44
    11ee:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
    11f2:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
    11f4:	b662      	cpsie	i
	else {
		// ADC_SC3_avge = 1;
		atomic::setBitFlag(adc_regs.GC, ADC_GC_AVGE);

		if (num <= 4) {
			num = 4;
    11f6:	2304      	movs	r3, #4
			// ADC_SC3_avgs0 = 1;
			// ADC_SC3_avgs1 = 1;
			atomic::setBitFlag(adc_regs.CFG, ADC_CFG_AVGS(3));
		}
	}
	analog_num_average = num;
    11f8:	7723      	strb	r3, [r4, #28]
    11fa:	bd38      	pop	{r3, r4, r5, pc}
*
*/
void My_ADC::setAveraging(uint8_t num) {

	if (calibrating)
		wait_for_cal();
    11fc:	f7ff fdc2 	bl	d84 <My_ADC::wait_for_cal()>

	if (num <= 1) {
    1200:	2d01      	cmp	r5, #1
		num = 0;
		// ADC_SC3_avge = 0;
		atomic::clearBitFlag(adc_regs.GC, ADC_GC_AVGE);
    1202:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
void My_ADC::setAveraging(uint8_t num) {

	if (calibrating)
		wait_for_cal();

	if (num <= 1) {
    1204:	d8da      	bhi.n	11bc <My_ADC::setAveraging(unsigned char)+0x10>
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    1206:	b672      	cpsid	i
        reg &= ~flag;
    1208:	6c93      	ldr	r3, [r2, #72]	; 0x48
    120a:	f023 0320 	bic.w	r3, r3, #32
    120e:	6493      	str	r3, [r2, #72]	; 0x48
        __enable_irq();
    1210:	b662      	cpsie	i
		num = 0;
    1212:	2300      	movs	r3, #0
			// ADC_SC3_avgs0 = 1;
			// ADC_SC3_avgs1 = 1;
			atomic::setBitFlag(adc_regs.CFG, ADC_CFG_AVGS(3));
		}
	}
	analog_num_average = num;
    1214:	7723      	strb	r3, [r4, #28]
    1216:	bd38      	pop	{r3, r4, r5, pc}
		}
		else if (num <= 16) {
			num = 16;
			// ADC_SC3_avgs0 = 0;
			// ADC_SC3_avgs1 = 1;
			atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_AVGS(3), ADC_CFG_AVGS(2));
    1218:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    121a:	b672      	cpsid	i
        reg &= ~flag;
    121c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    121e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    1222:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
    1224:	b662      	cpsie	i

#elif defined(__IMXRT1062__) // Teensy 4
    template <typename T>
    __attribute__((always_inline)) inline void setBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    1226:	b672      	cpsid	i
        reg |= flag;
    1228:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    122a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    122e:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
    1230:	b662      	cpsie	i
			// ADC_SC3_avgs0 = 1;
			// ADC_SC3_avgs1 = 0;
			atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_AVGS(3), ADC_CFG_AVGS(1));
		}
		else if (num <= 16) {
			num = 16;
    1232:	2310      	movs	r3, #16
			// ADC_SC3_avgs0 = 1;
			// ADC_SC3_avgs1 = 1;
			atomic::setBitFlag(adc_regs.CFG, ADC_CFG_AVGS(3));
		}
	}
	analog_num_average = num;
    1234:	7723      	strb	r3, [r4, #28]
    1236:	bd38      	pop	{r3, r4, r5, pc}
		}
		else if (num <= 8) {
			num = 8;
			// ADC_SC3_avgs0 = 1;
			// ADC_SC3_avgs1 = 0;
			atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_AVGS(3), ADC_CFG_AVGS(1));
    1238:	6ae3      	ldr	r3, [r4, #44]	; 0x2c

#elif defined(__IMXRT1062__) // Teensy 4
    template <typename T>
    __attribute__((always_inline)) inline void setBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    123a:	b672      	cpsid	i
        reg |= flag;
    123c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    123e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    1242:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
    1244:	b662      	cpsie	i
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    1246:	b672      	cpsid	i
        reg &= ~flag;
    1248:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    124a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    124e:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
    1250:	b662      	cpsie	i
			// ADC_SC3_avgs0 = 0;
			// ADC_SC3_avgs1 = 0;
			atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_AVGS(3));
		}
		else if (num <= 8) {
			num = 8;
    1252:	2308      	movs	r3, #8
			// ADC_SC3_avgs0 = 1;
			// ADC_SC3_avgs1 = 1;
			atomic::setBitFlag(adc_regs.CFG, ADC_CFG_AVGS(3));
		}
	}
	analog_num_average = num;
    1254:	7723      	strb	r3, [r4, #28]
    1256:	bd38      	pop	{r3, r4, r5, pc}

00001258 <My_ADC::enableInterrupts(void (*)(), unsigned char)>:
}

/* Enable interrupts: An ADC Interrupt will be raised when the conversion is completed
*  (including hardware averages and if the comparison (if any) is true).
*/
void My_ADC::enableInterrupts(void (*isr)(void), uint8_t priority) {
    1258:	b570      	push	{r4, r5, r6, lr}
	if (calibrating)
    125a:	7d43      	ldrb	r3, [r0, #21]
}

/* Enable interrupts: An ADC Interrupt will be raised when the conversion is completed
*  (including hardware averages and if the comparison (if any) is true).
*/
void My_ADC::enableInterrupts(void (*isr)(void), uint8_t priority) {
    125c:	4604      	mov	r4, r0
    125e:	460d      	mov	r5, r1
    1260:	4616      	mov	r6, r2
	if (calibrating)
    1262:	b10b      	cbz	r3, 1268 <My_ADC::enableInterrupts(void (*)(), unsigned char)+0x10>
		wait_for_cal();
    1264:	f7ff fd8e 	bl	d84 <My_ADC::wait_for_cal()>

	atomic::setBitFlag(adc_regs.HC0, ADC_HC_AIEN);
    1268:	6ae0      	ldr	r0, [r4, #44]	; 0x2c

#elif defined(__IMXRT1062__) // Teensy 4
    template <typename T>
    __attribute__((always_inline)) inline void setBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    126a:	b672      	cpsid	i
        reg |= flag;
    126c:	6803      	ldr	r3, [r0, #0]
    126e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1272:	6003      	str	r3, [r0, #0]
        __enable_irq();
    1274:	b662      	cpsie	i
#define DMA_NUM_CHANNELS        32

#ifdef __cplusplus
extern "C" void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    1276:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
	interrupts_enabled = true;
    127a:	2001      	movs	r0, #1
    127c:	4a09      	ldr	r2, [pc, #36]	; (12a4 <My_ADC::enableInterrupts(void (*)(), unsigned char)+0x4c>)
    127e:	3310      	adds	r3, #16
    1280:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
    1284:	f842 5023 	str.w	r5, [r2, r3, lsl #2]

	attachInterruptVector(IRQ_ADC, isr);
	NVIC_SET_PRIORITY(IRQ_ADC, priority);
    1288:	4b07      	ldr	r3, [pc, #28]	; (12a8 <My_ADC::enableInterrupts(void (*)(), unsigned char)+0x50>)
    128a:	f894 5029 	ldrb.w	r5, [r4, #41]	; 0x29
	NVIC_ENABLE_IRQ(IRQ_ADC);
    128e:	4907      	ldr	r1, [pc, #28]	; (12ac <My_ADC::enableInterrupts(void (*)(), unsigned char)+0x54>)

	atomic::setBitFlag(adc_regs.HC0, ADC_HC_AIEN);
	interrupts_enabled = true;

	attachInterruptVector(IRQ_ADC, isr);
	NVIC_SET_PRIORITY(IRQ_ADC, priority);
    1290:	54ee      	strb	r6, [r5, r3]
	NVIC_ENABLE_IRQ(IRQ_ADC);
    1292:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    1296:	f003 021f 	and.w	r2, r3, #31
    129a:	115b      	asrs	r3, r3, #5
    129c:	4090      	lsls	r0, r2
    129e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    12a2:	bd70      	pop	{r4, r5, r6, pc}
    12a4:	20023400 	.word	0x20023400
    12a8:	e000e400 	.word	0xe000e400
    12ac:	e000e100 	.word	0xe000e100

000012b0 <My_ADC::setOffset(short, bool)>:
	*   Should be set before conversion is started.
	*   @param offset: value to be subtracted from or added to the ADC result.
	*	@param subtract: true when the offset is subtracted; false when it is added.
	*/
void My_ADC::setOffset(int16_t offset, bool subtract) {
	adc_regs.OFS = ADC_OFS_OFS(offset) | (subtract << 12);
    12b0:	f3c1 010b 	ubfx	r1, r1, #0, #12
    12b4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    12b6:	ea41 3202 	orr.w	r2, r1, r2, lsl #12
    12ba:	655a      	str	r2, [r3, #84]	; 0x54
    12bc:	4770      	bx	lr
    12be:	bf00      	nop

000012c0 <My_ADC::startContinuous(unsigned char)>:
//////////////// INFORMATION ABOUT VALID PINS //////////////////

// check whether the pin is a valid analog pin
bool My_ADC::checkPin(uint8_t pin) {

	if (pin > ADC_MAX_PIN) {
    12c0:	291b      	cmp	r1, #27

/* Starts continuous conversion on the pin
 * It returns as soon as the ADC is set, use analogReadContinuous() to read the values
 * Set the resolution, number of averages and voltage reference using the appropriate functions BEFORE calling this function
*/
bool My_ADC::startContinuous(uint8_t pin) {
    12c2:	b538      	push	{r3, r4, r5, lr}
    12c4:	4604      	mov	r4, r0
//////////////// INFORMATION ABOUT VALID PINS //////////////////

// check whether the pin is a valid analog pin
bool My_ADC::checkPin(uint8_t pin) {

	if (pin > ADC_MAX_PIN) {
    12c6:	d820      	bhi.n	130a <My_ADC::startContinuous(unsigned char)+0x4a>
		return false; // all others are invalid
	}

	// translate pin number to SC1A number, that also contains MUX a or b info.
	const uint8_t sc1a_pin = channel2sc1a[pin];
    12c8:	6a03      	ldr	r3, [r0, #32]

	// check for valid pin
	if ((sc1a_pin & ADC_SC1A_CHANNELS) == ADC_SC1A_PIN_INVALID) {
    12ca:	5c5b      	ldrb	r3, [r3, r1]
    12cc:	f003 031f 	and.w	r3, r3, #31
    12d0:	2b1f      	cmp	r3, #31
    12d2:	d01a      	beq.n	130a <My_ADC::startContinuous(unsigned char)+0x4a>
		fail_flag |= ADC_ERROR::WRONG_PIN;
		return false;
	}

	// check for calibration before setting channels,
	if (calibrating)
    12d4:	7d43      	ldrb	r3, [r0, #21]
    12d6:	460d      	mov	r5, r1
    12d8:	b9f3      	cbnz	r3, 1318 <My_ADC::startContinuous(unsigned char)+0x58>
		wait_for_cal();

	// increase the counter of measurements
	num_measurements++;
    12da:	7c63      	ldrb	r3, [r4, #17]
	void disablePGA();
#endif

	//! Set continuous conversion mode
	void continuousMode() __attribute__((always_inline)) {
		atomic::setBitFlag(adc_regs.GC, ADC_GC_ADCO);
    12dc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    12de:	3301      	adds	r3, #1
    12e0:	7463      	strb	r3, [r4, #17]

#elif defined(__IMXRT1062__) // Teensy 4
    template <typename T>
    __attribute__((always_inline)) inline void setBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    12e2:	b672      	cpsid	i
        reg |= flag;
    12e4:	6c93      	ldr	r3, [r2, #72]	; 0x48
    12e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    12ea:	6493      	str	r3, [r2, #72]	; 0x48
        __enable_irq();
    12ec:	b662      	cpsie	i
// Doesn't do any of the checks on the pin
// It doesn't change the continuous conversion bit
void My_ADC::startReadFast(uint8_t pin) {

	// translate pin number to SC1A number, that also contains MUX a or b info.
	const uint8_t sc1a_pin = channel2sc1a[pin];
    12ee:	6a23      	ldr	r3, [r4, #32]
    12f0:	5d5b      	ldrb	r3, [r3, r5]

	// select pin for single-ended mode and start conversion, enable interrupts if requested
	__disable_irq();
    12f2:	b672      	cpsid	i
	adc_regs.HC0 = (sc1a_pin & ADC_SC1A_CHANNELS) + interrupts_enabled * ADC_HC_AIEN;
    12f4:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
    12f8:	f003 031f 	and.w	r3, r3, #31
    12fc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    12fe:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
    1302:	6013      	str	r3, [r2, #0]

	__enable_irq();
    1304:	b662      	cpsie	i
	// set continuous conversion flag
	continuousMode();

	startReadFast(pin);

	return true;
    1306:	2001      	movs	r0, #1
    1308:	bd38      	pop	{r3, r4, r5, pc}
        return static_cast<ADC_ERROR>(static_cast<uint16_t>(lhs) & static_cast<uint16_t>(rhs));
    }
    //! |= operator for ADC_ERRORs, it changes the left hand side ADC_ERROR. @internal
    inline ADC_ERROR operator|=(volatile ADC_ERROR &lhs, ADC_ERROR rhs)
    {
        return lhs = static_cast<ADC_ERROR>(static_cast<uint16_t>(lhs) | static_cast<uint16_t>(rhs));
    130a:	8a63      	ldrh	r3, [r4, #18]
bool My_ADC::startContinuous(uint8_t pin) {

	// check whether the pin is correct
	if (!checkPin(pin)) {
		fail_flag |= ADC_ERROR::WRONG_PIN;
		return false;
    130c:	2000      	movs	r0, #0
    130e:	b29b      	uxth	r3, r3
    1310:	f043 0304 	orr.w	r3, r3, #4
    1314:	8263      	strh	r3, [r4, #18]
    1316:	bd38      	pop	{r3, r4, r5, pc}
	}

	// check for calibration before setting channels,
	if (calibrating)
		wait_for_cal();
    1318:	f7ff fd34 	bl	d84 <My_ADC::wait_for_cal()>
    131c:	e7dd      	b.n	12da <My_ADC::startContinuous(unsigned char)+0x1a>
    131e:	bf00      	nop

00001320 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>:
    1320:	4804      	ldr	r0, [pc, #16]	; (1334 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x14>)
    1322:	6802      	ldr	r2, [r0, #0]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    1324:	4411      	add	r1, r2
    1326:	e001      	b.n	132c <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0xc>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    1328:	4299      	cmp	r1, r3
    132a:	d302      	bcc.n	1332 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x12>
    132c:	6803      	ldr	r3, [r0, #0]
    132e:	429a      	cmp	r2, r3
    1330:	d9fa      	bls.n	1328 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x8>
    1332:	4770      	bx	lr
    1334:	20022dbc 	.word	0x20022dbc

00001338 <VisualMicroDebug::outPacketStart(bool)>:
	return outPacketStart(false);
}


bool VisualMicroDebug::outPacketStart(bool noWait)
{
    1338:	b410      	push	{r4}
    133a:	4a0c      	ldr	r2, [pc, #48]	; (136c <VisualMicroDebug::outPacketStart(bool)+0x34>)
    133c:	4604      	mov	r4, r0
	yield();
#endif


#if defined(VM_DEBUG_BANDWIDTH_THROTTLE_MS) //&& (VM_DBT != VM_DBT_NET_UDP)
	if (!noWait)
    133e:	b971      	cbnz	r1, 135e <VisualMicroDebug::outPacketStart(bool)+0x26>
	{

		unsigned long ms_wait;
		ms_wait = (DBG_Millis() - lastPacketMS);
    1340:	6841      	ldr	r1, [r0, #4]
    1342:	6813      	ldr	r3, [r2, #0]
    1344:	1a59      	subs	r1, r3, r1
		if (ms_wait < VM_DEBUG_BANDWIDTH_THROTTLE_MS)
    1346:	2931      	cmp	r1, #49	; 0x31
    1348:	d809      	bhi.n	135e <VisualMicroDebug::outPacketStart(bool)+0x26>
    134a:	6810      	ldr	r0, [r2, #0]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    134c:	f100 0332 	add.w	r3, r0, #50	; 0x32
    1350:	1a59      	subs	r1, r3, r1
    1352:	e001      	b.n	1358 <VisualMicroDebug::outPacketStart(bool)+0x20>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    1354:	4299      	cmp	r1, r3
    1356:	d302      	bcc.n	135e <VisualMicroDebug::outPacketStart(bool)+0x26>
    1358:	6813      	ldr	r3, [r2, #0]
    135a:	4298      	cmp	r0, r3
    135c:	d9fa      	bls.n	1354 <VisualMicroDebug::outPacketStart(bool)+0x1c>
    135e:	6813      	ldr	r3, [r2, #0]
	transport->beginPacket();
#endif
#endif

	return true;
}
    1360:	2001      	movs	r0, #1
			//DBG_YieldAndWait(3)
		//}
	}
	//XXX: this should really be after packet end!
	//1501 for cosa - lastPacketMS=millis();
	lastPacketMS = DBG_Millis();
    1362:	6063      	str	r3, [r4, #4]
	transport->beginPacket();
#endif
#endif

	return true;
}
    1364:	f85d 4b04 	ldr.w	r4, [sp], #4
    1368:	4770      	bx	lr
    136a:	bf00      	nop
    136c:	20022dbc 	.word	0x20022dbc

00001370 <VisualMicroDebug::outPacketEnd()>:
    1370:	4770      	bx	lr
    1372:	bf00      	nop

00001374 <VisualMicroDebug::begin(unsigned long)>:
{

	//todo: detect usb type ports that need a delay
	//don't wait for the port unless we add a timeout and disable debug. because we might be discntected
	//todo: see if esp can handle this delay wuith wifi also connecting!
	delay(1000);
    1374:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    1378:	f000 beac 	b.w	20d4 <delay>

0000137c <VisualMicroDebug::init(unsigned long)>:
	vmdebug.init();
	vmdebug.stats();
#endif


	baudRate = 0L; //gets a value later if required, only used by cosa for a re-begin!
    137c:	2300      	movs	r3, #0
    137e:	6443      	str	r3, [r0, #68]	; 0x44

	lastPacketMS = 0L;
    1380:	6043      	str	r3, [r0, #4]

	//note: a delay at start causes esp8266 wifi to fail to connect!!
	//		the delay can also be switched off via board/platform.txt property=
	if (delayMs > 0)
    1382:	b141      	cbz	r1, 1396 <VisualMicroDebug::init(unsigned long)+0x1a>
    1384:	4804      	ldr	r0, [pc, #16]	; (1398 <VisualMicroDebug::init(unsigned long)+0x1c>)
    1386:	6802      	ldr	r2, [r0, #0]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    1388:	4411      	add	r1, r2
    138a:	e001      	b.n	1390 <VisualMicroDebug::init(unsigned long)+0x14>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    138c:	4299      	cmp	r1, r3
    138e:	d302      	bcc.n	1396 <VisualMicroDebug::init(unsigned long)+0x1a>
    1390:	6803      	ldr	r3, [r0, #0]
    1392:	429a      	cmp	r2, r3
    1394:	d9fa      	bls.n	138c <VisualMicroDebug::init(unsigned long)+0x10>
    1396:	4770      	bx	lr
    1398:	20022dbc 	.word	0x20022dbc

0000139c <VisualMicroDebug::sendContinuedACK(unsigned char)>:
}
#endif


void VisualMicroDebug::sendContinuedACK(uint8_t breakPointId)
{
    139c:	b538      	push	{r3, r4, r5, lr}
    139e:	4c0f      	ldr	r4, [pc, #60]	; (13dc <VisualMicroDebug::sendContinuedACK(unsigned char)+0x40>)
    13a0:	460d      	mov	r5, r1
    13a2:	2106      	movs	r1, #6
    13a4:	6823      	ldr	r3, [r4, #0]
			//DBG_YieldAndWait(3)
		//}
	}
	//XXX: this should really be after packet end!
	//1501 for cosa - lastPacketMS=millis();
	lastPacketMS = DBG_Millis();
    13a6:	6043      	str	r3, [r0, #4]
    13a8:	480d      	ldr	r0, [pc, #52]	; (13e0 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x44>)
    13aa:	f002 f911 	bl	35d0 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    13ae:	220a      	movs	r2, #10
    13b0:	2300      	movs	r3, #0
    13b2:	4629      	mov	r1, r5
    13b4:	480b      	ldr	r0, [pc, #44]	; (13e4 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x48>)
    13b6:	f002 fa2b 	bl	3810 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    13ba:	2106      	movs	r1, #6
    13bc:	480a      	ldr	r0, [pc, #40]	; (13e8 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x4c>)
    13be:	f002 f907 	bl	35d0 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    13c2:	4808      	ldr	r0, [pc, #32]	; (13e4 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x48>)
    13c4:	f002 fa14 	bl	37f0 <Print::println()>
    13c8:	6822      	ldr	r2, [r4, #0]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    13ca:	f102 0132 	add.w	r1, r2, #50	; 0x32
    13ce:	e001      	b.n	13d4 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x38>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    13d0:	4299      	cmp	r1, r3
    13d2:	d302      	bcc.n	13da <VisualMicroDebug::sendContinuedACK(unsigned char)+0x3e>
    13d4:	6823      	ldr	r3, [r4, #0]
    13d6:	429a      	cmp	r2, r3
    13d8:	d9fa      	bls.n	13d0 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x34>
    13da:	bd38      	pop	{r3, r4, r5, pc}
    13dc:	20022dbc 	.word	0x20022dbc
    13e0:	20000090 	.word	0x20000090
    13e4:	2001229c 	.word	0x2001229c
    13e8:	20000098 	.word	0x20000098

000013ec <VisualMicroDebug::breakWait(unsigned char)>:
#if defined(VM_DBT) //&& ( VM_DBT == VM_DBT_HARDWARESERIAL || VM_DBT == VM_DBT_FASTSERIAL)
//TODO: implement sturcture serial com!
//we never get called if break was not set during compliation
//return _vm_cmd so that we can setVariable if required (caller needs to know result)
uint8_t VisualMicroDebug::breakWait(uint8_t breakPointId)
{
    13ec:	b538      	push	{r3, r4, r5, lr}
	//console write not working yet
#if defined(VM_DBT) && (VM_DBT == VM_DBT_NET_CONSOLE)
	return 'c';
#endif

	if (!alwaysBreak)
    13ee:	7e03      	ldrb	r3, [r0, #24]
    13f0:	b90b      	cbnz	r3, 13f6 <VisualMicroDebug::breakWait(unsigned char)+0xa>
		case 'h':
			//Serial.println("Remote debug session started");
#if defined(VM_DBT) && (VM_DBT == VM_DBT_NET_UDP)
			alwaysBreak = true;
#endif
			return 'c';
    13f2:	2063      	movs	r0, #99	; 0x63
	//sendContinuedACK(breakPointId);
	//return 'c'; //if we get here we are continuing!

	//	return '?'; //software serial rubbish detected?
	return 'e';
}
    13f4:	bd38      	pop	{r3, r4, r5, pc}
    13f6:	460d      	mov	r5, r1
    13f8:	4604      	mov	r4, r0
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    13fa:	f002 f883 	bl	3504 <usb_serial_available>
#endif

	uint8_t b;

	//break/pause until we get a command
	if (available() == 0)
    13fe:	f010 0fff 	tst.w	r0, #255	; 0xff
    1402:	d101      	bne.n	1408 <VisualMicroDebug::breakWait(unsigned char)+0x1c>
		if (!UDPConnectionStarted) {
			return 'c';
		}
#endif

		return 'e';
    1404:	2065      	movs	r0, #101	; 0x65
    1406:	bd38      	pop	{r3, r4, r5, pc}
    1408:	f002 f87c 	bl	3504 <usb_serial_available>
	//doh!  better if we have any key to continue so users data doesn't get lost so much. 
	//NOTE. pause/breakpoints are best used with dedicated port!
	//while(true)
	//{

	while (available() > 0)
    140c:	f010 0fff 	tst.w	r0, #255	; 0xff
    1410:	d0f8      	beq.n	1404 <VisualMicroDebug::breakWait(unsigned char)+0x18>
        virtual int read() { return usb_serial_getchar(); }
    1412:	f002 f8b7 	bl	3584 <usb_serial_getchar>
		//		while(VM_DEBUGGER_SOFT_TRANSPORT.available()>0)
		//		{
		//			b = VM_DEBUGGER_SOFT_TRANSPORT.read();
		//#endif
		//debug break commands
		switch (b)
    1416:	b2c0      	uxtb	r0, r0
    1418:	f1a0 0358 	sub.w	r3, r0, #88	; 0x58
    141c:	2b1e      	cmp	r3, #30
    141e:	d8f3      	bhi.n	1408 <VisualMicroDebug::breakWait(unsigned char)+0x1c>
    1420:	a201      	add	r2, pc, #4	; (adr r2, 1428 <VisualMicroDebug::breakWait(unsigned char)+0x3c>)
    1422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1426:	bf00      	nop
    1428:	000014b1 	.word	0x000014b1
    142c:	00001409 	.word	0x00001409
    1430:	00001409 	.word	0x00001409
    1434:	00001409 	.word	0x00001409
    1438:	00001409 	.word	0x00001409
    143c:	00001409 	.word	0x00001409
    1440:	00001409 	.word	0x00001409
    1444:	00001409 	.word	0x00001409
    1448:	00001409 	.word	0x00001409
    144c:	00001409 	.word	0x00001409
    1450:	00001409 	.word	0x00001409
    1454:	000014a5 	.word	0x000014a5
    1458:	00001409 	.word	0x00001409
    145c:	00001409 	.word	0x00001409
    1460:	00001409 	.word	0x00001409
    1464:	00001409 	.word	0x00001409
    1468:	000013f3 	.word	0x000013f3
    146c:	00001409 	.word	0x00001409
    1470:	00001409 	.word	0x00001409
    1474:	00001409 	.word	0x00001409
    1478:	00001409 	.word	0x00001409
    147c:	00001409 	.word	0x00001409
    1480:	00001409 	.word	0x00001409
    1484:	00001409 	.word	0x00001409
    1488:	00001409 	.word	0x00001409
    148c:	000013f3 	.word	0x000013f3
    1490:	00001409 	.word	0x00001409
    1494:	00001409 	.word	0x00001409
    1498:	00001409 	.word	0x00001409
    149c:	00001409 	.word	0x00001409
    14a0:	000013f5 	.word	0x000013f5
		{

		case 'c':
			sendContinuedACK(breakPointId);
    14a4:	4620      	mov	r0, r4
    14a6:	4629      	mov	r1, r5
    14a8:	f7ff ff78 	bl	139c <VisualMicroDebug::sendContinuedACK(unsigned char)>
			return 'c'; //if we get here we are continuing!
    14ac:	2063      	movs	r0, #99	; 0x63
    14ae:	bd38      	pop	{r3, r4, r5, pc}
					  //	sendContinuedACK(breakPointId);
					  //	return;

					  //switch off break until re-start. for dev/testing
		case 'X':
			alwaysBreak = false;
    14b0:	2300      	movs	r3, #0
			return 'c';
    14b2:	2063      	movs	r0, #99	; 0x63
					  //	sendContinuedACK(breakPointId);
					  //	return;

					  //switch off break until re-start. for dev/testing
		case 'X':
			alwaysBreak = false;
    14b4:	7623      	strb	r3, [r4, #24]
    14b6:	bd38      	pop	{r3, r4, r5, pc}

000014b8 <VisualMicroDebug::start(bool, bool)>:
}
#endif


void VisualMicroDebug::start(bool waitForKeyToStart, bool _alwaysBreak)
{
    14b8:	b570      	push	{r4, r5, r6, lr}
    14ba:	4605      	mov	r5, r0
    14bc:	4616      	mov	r6, r2
#if defined (VM_DEBUG_BREAKPAUSE)
	if (waitForKeyToStart)
    14be:	b1a9      	cbz	r1, 14ec <VisualMicroDebug::start(bool, bool)+0x34>
	{
		alwaysBreak = true;
    14c0:	2301      	movs	r3, #1
    14c2:	4c0b      	ldr	r4, [pc, #44]	; (14f0 <VisualMicroDebug::start(bool, bool)+0x38>)
    14c4:	7603      	strb	r3, [r0, #24]

		//server should know we are waiting sendMessage("Press any key to continue");
		while (breakWait(0) != 'c') {
    14c6:	2100      	movs	r1, #0
    14c8:	4628      	mov	r0, r5
    14ca:	f7ff ff8f 	bl	13ec <VisualMicroDebug::breakWait(unsigned char)>
    14ce:	2863      	cmp	r0, #99	; 0x63
    14d0:	d00c      	beq.n	14ec <VisualMicroDebug::start(bool, bool)+0x34>
    14d2:	6822      	ldr	r2, [r4, #0]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    14d4:	1c51      	adds	r1, r2, #1
    14d6:	6823      	ldr	r3, [r4, #0]

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    14d8:	429a      	cmp	r2, r3
    14da:	d8f4      	bhi.n	14c6 <VisualMicroDebug::start(bool, bool)+0xe>
    14dc:	4299      	cmp	r1, r3
    14de:	d2fa      	bcs.n	14d6 <VisualMicroDebug::start(bool, bool)+0x1e>
	if (waitForKeyToStart)
	{
		alwaysBreak = true;

		//server should know we are waiting sendMessage("Press any key to continue");
		while (breakWait(0) != 'c') {
    14e0:	2100      	movs	r1, #0
    14e2:	4628      	mov	r0, r5
    14e4:	f7ff ff82 	bl	13ec <VisualMicroDebug::breakWait(unsigned char)>
    14e8:	2863      	cmp	r0, #99	; 0x63
    14ea:	d1f2      	bne.n	14d2 <VisualMicroDebug::start(bool, bool)+0x1a>
			DBG_YieldAndWait(1);
		}
		//breakWait(0);
	}
	alwaysBreak = _alwaysBreak;
    14ec:	762e      	strb	r6, [r5, #24]
    14ee:	bd70      	pop	{r4, r5, r6, pc}
    14f0:	20022dbc 	.word	0x20022dbc

000014f4 <_GLOBAL__sub_I__ZN16VisualMicroDebug16DBG_YieldAndWaitEm>:
	//wait if we have to
	//try to prevent new users from overloading bandwidth and filling windows buffer
	//can be overriden via preferences
	//defaults to 50ms; needs to allow time for windows to recover if it pauses, so we need to be slower than the extensions and debugger can process + a bit

	BreakStartMillis = 0L;
    14f4:	4b03      	ldr	r3, [pc, #12]	; (1504 <_GLOBAL__sub_I__ZN16VisualMicroDebug16DBG_YieldAndWaitEm+0x10>)
    14f6:	2200      	movs	r2, #0
    14f8:	609a      	str	r2, [r3, #8]
	BreakPrevMillis = 0L;
    14fa:	60da      	str	r2, [r3, #12]
	InBreakMsgRepeatMS = 0L;
    14fc:	611a      	str	r2, [r3, #16]
	InBreakMsgSent = 0L;
    14fe:	615a      	str	r2, [r3, #20]
    1500:	4770      	bx	lr
    1502:	bf00      	nop
    1504:	20022d48 	.word	0x20022d48

00001508 <WS2812Serial::begin()>:
*/

#include "WS2812Serial.h"

bool WS2812Serial::begin()
{
    1508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t hwtrigger;
#else	
	uint32_t divisor, portconfig, hwtrigger;
	KINETISK_UART_t *uart;
#endif
	switch (pin) {
    150a:	7883      	ldrb	r3, [r0, #2]
    150c:	3b01      	subs	r3, #1
    150e:	2b26      	cmp	r3, #38	; 0x26
    1510:	f200 80a5 	bhi.w	165e <WS2812Serial::begin()+0x156>
    1514:	e8df f003 	tbb	[pc, r3]
    1518:	a3a3a391 	.word	0xa3a3a391
    151c:	9aa3a3a3 	.word	0x9aa3a3a3
    1520:	a3a3a3a3 	.word	0xa3a3a3a3
    1524:	a3a36ba3 	.word	0xa3a36ba3
    1528:	7da3a374 	.word	0x7da3a374
    152c:	88a3a3a3 	.word	0x88a3a3a3
    1530:	a3a3a3a3 	.word	0xa3a3a3a3
    1534:	a3a3a314 	.word	0xa3a3a314
    1538:	a3a3a3a3 	.word	0xa3a3a3a3
    153c:	a3a3      	.short	0xa3a3
    153e:	7d          	.byte	0x7d
    153f:	00          	.byte	0x00
		CCM_CCGR5 |= CCM_CCGR5_LPUART1(CCM_CCGR_ON);
		hwtrigger = DMAMUX_SOURCE_LPUART1_TX; 
		break;
	  case 29: // Serial7
		uart = &IMXRT_LPUART7; 
		CCM_CCGR5 |= CCM_CCGR5_LPUART7(CCM_CCGR_ON);
    1540:	4a4e      	ldr	r2, [pc, #312]	; (167c <WS2812Serial::begin()+0x174>)
		uart = &IMXRT_LPUART1; 
		CCM_CCGR5 |= CCM_CCGR5_LPUART1(CCM_CCGR_ON);
		hwtrigger = DMAMUX_SOURCE_LPUART1_TX; 
		break;
	  case 29: // Serial7
		uart = &IMXRT_LPUART7; 
    1542:	494f      	ldr	r1, [pc, #316]	; (1680 <WS2812Serial::begin()+0x178>)
		CCM_CCGR5 |= CCM_CCGR5_LPUART7(CCM_CCGR_ON);
    1544:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
		hwtrigger = DMAMUX_SOURCE_LPUART7_TX; 
		break;
    1546:	4d4f      	ldr	r5, [pc, #316]	; (1684 <WS2812Serial::begin()+0x17c>)
		CCM_CCGR5 |= CCM_CCGR5_LPUART1(CCM_CCGR_ON);
		hwtrigger = DMAMUX_SOURCE_LPUART1_TX; 
		break;
	  case 29: // Serial7
		uart = &IMXRT_LPUART7; 
		CCM_CCGR5 |= CCM_CCGR5_LPUART7(CCM_CCGR_ON);
    1548:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
		uart = &IMXRT_LPUART1; 
		CCM_CCGR5 |= CCM_CCGR5_LPUART1(CCM_CCGR_ON);
		hwtrigger = DMAMUX_SOURCE_LPUART1_TX; 
		break;
	  case 29: // Serial7
		uart = &IMXRT_LPUART7; 
    154c:	6181      	str	r1, [r0, #24]
		CCM_CCGR5 |= CCM_CCGR5_LPUART7(CCM_CCGR_ON);
    154e:	67d3      	str	r3, [r2, #124]	; 0x7c
#endif		
#endif
	  default:
		return false; // pin not supported
	}
	if (!dma) {
    1550:	68c6      	ldr	r6, [r0, #12]
    1552:	4604      	mov	r4, r0
    1554:	2e00      	cmp	r6, #0
    1556:	f000 8086 	beq.w	1666 <WS2812Serial::begin()+0x15e>
		if (!dma) return false; // unable to allocate DMA channel
	}
#if defined(__IMXRT1062__)
	// Convert Baud
	// Computed values for 4mhz  
	uart->CTRL = 0;	// clear everything
    155a:	69a2      	ldr	r2, [r4, #24]
    155c:	2300      	movs	r3, #0
	uart->BAUD = LPUART_BAUD_OSR(5) | LPUART_BAUD_SBR(1) | LPUART_BAUD_TDMAE;  // set baud configure for transfer DMA
    155e:	494a      	ldr	r1, [pc, #296]	; (1688 <WS2812Serial::begin()+0x180>)
		if (!dma) return false; // unable to allocate DMA channel
	}
#if defined(__IMXRT1062__)
	// Convert Baud
	// Computed values for 4mhz  
	uart->CTRL = 0;	// clear everything
    1560:	6193      	str	r3, [r2, #24]
	uart->BAUD = LPUART_BAUD_OSR(5) | LPUART_BAUD_SBR(1) | LPUART_BAUD_TDMAE;  // set baud configure for transfer DMA
    1562:	6111      	str	r1, [r2, #16]
	uart->PINCFG = 0;
    1564:	60d3      	str	r3, [r2, #12]
	uint16_t tx_fifo_size = (((uart->FIFO >> 4) & 0x7) << 2);
    1566:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1568:	089b      	lsrs	r3, r3, #2
    156a:	f003 031c 	and.w	r3, r3, #28
	uint8_t tx_water = (tx_fifo_size < 16) ? tx_fifo_size >> 1 : 7;
    156e:	2b0f      	cmp	r3, #15
    1570:	d877      	bhi.n	1662 <WS2812Serial::begin()+0x15a>
    1572:	105b      	asrs	r3, r3, #1
    1574:	f003 0303 	and.w	r3, r3, #3
    1578:	b2db      	uxtb	r3, r3
//	uart->WATER = LPUART_WATER_TXWATER(1);	// guessing here? 
//	uart->FIFO = 0;	// disable the fifo.
	uart->WATER = LPUART_WATER_TXWATER(tx_water);
    157a:	62d3      	str	r3, [r2, #44]	; 0x2c
#if defined(ARDUINO_TEENSY41)
	if (pin == 35) pinmuxval = 1;
#endif
	*(portConfigRegister(pin)) = pinmuxval;

	dma->destination((volatile uint8_t&)uart->DATA);
    157c:	f102 001c 	add.w	r0, r2, #28
	uint16_t tx_fifo_size = (((uart->FIFO >> 4) & 0x7) << 2);
	uint8_t tx_water = (tx_fifo_size < 16) ? tx_fifo_size >> 1 : 7;
//	uart->WATER = LPUART_WATER_TXWATER(1);	// guessing here? 
//	uart->FIFO = 0;	// disable the fifo.
	uart->WATER = LPUART_WATER_TXWATER(tx_water);
	uart->FIFO |= LPUART_FIFO_TXFE;
    1580:	6a91      	ldr	r1, [r2, #40]	; 0x28

	uart->CTRL = (LPUART_CTRL_TE /*| LPUART_CTRL_TIE */ | LPUART_CTRL_TXINV); // enable transmitter and invert
	// We need to configure the TX pin now.
	*(portControlRegister(pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
    1582:	f04f 0ed9 	mov.w	lr, #217	; 0xd9
//	uart->WATER = LPUART_WATER_TXWATER(1);	// guessing here? 
//	uart->FIFO = 0;	// disable the fifo.
	uart->WATER = LPUART_WATER_TXWATER(tx_water);
	uart->FIFO |= LPUART_FIFO_TXFE;

	uart->CTRL = (LPUART_CTRL_TE /*| LPUART_CTRL_TIE */ | LPUART_CTRL_TXINV); // enable transmitter and invert
    1586:	4f41      	ldr	r7, [pc, #260]	; (168c <WS2812Serial::begin()+0x184>)
	void destination(volatile signed char &p) { destination(*(volatile uint8_t *)&p); }
	void destination(volatile unsigned char &p) {
		TCD->DADDR = &p;
		TCD->DOFF = 0;
		TCD->ATTR_DST = 0;
		if ((uint32_t)&p < 0x40000000 || TCD->NBYTES == 0) TCD->NBYTES = 1;
    1588:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
	uint16_t tx_fifo_size = (((uart->FIFO >> 4) & 0x7) << 2);
	uint8_t tx_water = (tx_fifo_size < 16) ? tx_fifo_size >> 1 : 7;
//	uart->WATER = LPUART_WATER_TXWATER(1);	// guessing here? 
//	uart->FIFO = 0;	// disable the fifo.
	uart->WATER = LPUART_WATER_TXWATER(tx_water);
	uart->FIFO |= LPUART_FIFO_TXFE;
    158c:	f041 0180 	orr.w	r1, r1, #128	; 0x80

	uart->CTRL = (LPUART_CTRL_TE /*| LPUART_CTRL_TIE */ | LPUART_CTRL_TXINV); // enable transmitter and invert
	// We need to configure the TX pin now.
	*(portControlRegister(pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
    1590:	4b3f      	ldr	r3, [pc, #252]	; (1690 <WS2812Serial::begin()+0x188>)
	uint16_t tx_fifo_size = (((uart->FIFO >> 4) & 0x7) << 2);
	uint8_t tx_water = (tx_fifo_size < 16) ? tx_fifo_size >> 1 : 7;
//	uart->WATER = LPUART_WATER_TXWATER(1);	// guessing here? 
//	uart->FIFO = 0;	// disable the fifo.
	uart->WATER = LPUART_WATER_TXWATER(tx_water);
	uart->FIFO |= LPUART_FIFO_TXFE;
    1592:	6291      	str	r1, [r2, #40]	; 0x28
	// Use a single variable as the data destination.  Typically a register
	// for transmitting data to one of the hardware peripherals is used.
	void destination(volatile signed char &p) { destination(*(volatile uint8_t *)&p); }
	void destination(volatile unsigned char &p) {
		TCD->DADDR = &p;
		TCD->DOFF = 0;
    1594:	f04f 0100 	mov.w	r1, #0

	uart->CTRL = (LPUART_CTRL_TE /*| LPUART_CTRL_TIE */ | LPUART_CTRL_TXINV); // enable transmitter and invert
    1598:	6197      	str	r7, [r2, #24]
	*(portControlRegister(pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
	uint32_t pinmuxval = 2; // most of them use mux ALT2
#if defined(ARDUINO_TEENSY41)
	if (pin == 35) pinmuxval = 1;
#endif
	*(portConfigRegister(pin)) = pinmuxval;
    159a:	f04f 0702 	mov.w	r7, #2
	uart->WATER = LPUART_WATER_TXWATER(tx_water);
	uart->FIFO |= LPUART_FIFO_TXFE;

	uart->CTRL = (LPUART_CTRL_TE /*| LPUART_CTRL_TIE */ | LPUART_CTRL_TXINV); // enable transmitter and invert
	// We need to configure the TX pin now.
	*(portControlRegister(pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
    159e:	78a2      	ldrb	r2, [r4, #2]
    15a0:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    15a4:	6892      	ldr	r2, [r2, #8]
    15a6:	f8c2 e000 	str.w	lr, [r2]
	uint32_t pinmuxval = 2; // most of them use mux ALT2
#if defined(ARDUINO_TEENSY41)
	if (pin == 35) pinmuxval = 1;
#endif
	*(portConfigRegister(pin)) = pinmuxval;
    15aa:	78a2      	ldrb	r2, [r4, #2]
    15ac:	eb03 1302 	add.w	r3, r3, r2, lsl #4

	// Use a single variable as the data destination.  Typically a register
	// for transmitting data to one of the hardware peripherals is used.
	void destination(volatile signed char &p) { destination(*(volatile uint8_t *)&p); }
	void destination(volatile unsigned char &p) {
		TCD->DADDR = &p;
    15b0:	6832      	ldr	r2, [r6, #0]
    15b2:	685b      	ldr	r3, [r3, #4]
    15b4:	601f      	str	r7, [r3, #0]
    15b6:	6110      	str	r0, [r2, #16]
		TCD->DOFF = 0;
    15b8:	8291      	strh	r1, [r2, #20]
		TCD->ATTR_DST = 0;
    15ba:	7191      	strb	r1, [r2, #6]
    15bc:	6832      	ldr	r2, [r6, #0]
		if ((uint32_t)&p < 0x40000000 || TCD->NBYTES == 0) TCD->NBYTES = 1;
    15be:	d301      	bcc.n	15c4 <WS2812Serial::begin()+0xbc>
    15c0:	6893      	ldr	r3, [r2, #8]
    15c2:	b913      	cbnz	r3, 15ca <WS2812Serial::begin()+0xc2>
    15c4:	2301      	movs	r3, #1
    15c6:	6093      	str	r3, [r2, #8]
    15c8:	6832      	ldr	r2, [r6, #0]
    15ca:	68e6      	ldr	r6, [r4, #12]
		TCD->DLASTSGA = 0;
    15cc:	2300      	movs	r3, #0
	// trigger moves a single data unit, which is typically 8, 16 or
	// 32 bits.  If a channel is configured for 200 transfers

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
    15ce:	4831      	ldr	r0, [pc, #196]	; (1694 <WS2812Serial::begin()+0x18c>)
	void destination(volatile unsigned char &p) {
		TCD->DADDR = &p;
		TCD->DOFF = 0;
		TCD->ATTR_DST = 0;
		if ((uint32_t)&p < 0x40000000 || TCD->NBYTES == 0) TCD->NBYTES = 1;
		TCD->DLASTSGA = 0;
    15d0:	6193      	str	r3, [r2, #24]
	*(portConfigRegister(pin)) = portconfig;
	dma->destination(uart->D);
#endif 

	dma->triggerAtHardwareEvent(hwtrigger);
	memset(drawBuffer, 0, numled * 3);
    15d2:	4619      	mov	r1, r3
    15d4:	8822      	ldrh	r2, [r4, #0]
	// trigger moves a single data unit, which is typically 8, 16 or
	// 32 bits.  If a channel is configured for 200 transfers

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
    15d6:	7936      	ldrb	r6, [r6, #4]
    15d8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
		//mux = (volatile uint32_t *)&(DMAMUX_CHCFG0) + channel;
		*mux = 0;
    15dc:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
    15e0:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
    15e4:	68a0      	ldr	r0, [r4, #8]
    15e6:	f003 fbc3 	bl	4d70 <memset>
	return true;
    15ea:	2001      	movs	r0, #1
    15ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		CCM_CCGR1 |= CCM_CCGR1_LPUART4(CCM_CCGR_ON);
		hwtrigger = DMAMUX_SOURCE_LPUART4_TX; 
		break;
	  case 14: // Serial3
		uart = &IMXRT_LPUART2; 
		CCM_CCGR0 |= CCM_CCGR0_LPUART2(CCM_CCGR_ON);
    15ee:	4a23      	ldr	r2, [pc, #140]	; (167c <WS2812Serial::begin()+0x174>)
		uart = &IMXRT_LPUART4; 
		CCM_CCGR1 |= CCM_CCGR1_LPUART4(CCM_CCGR_ON);
		hwtrigger = DMAMUX_SOURCE_LPUART4_TX; 
		break;
	  case 14: // Serial3
		uart = &IMXRT_LPUART2; 
    15f0:	4929      	ldr	r1, [pc, #164]	; (1698 <WS2812Serial::begin()+0x190>)
		CCM_CCGR0 |= CCM_CCGR0_LPUART2(CCM_CCGR_ON);
    15f2:	6e93      	ldr	r3, [r2, #104]	; 0x68
		hwtrigger = DMAMUX_SOURCE_LPUART2_TX; 
		break;
    15f4:	4d29      	ldr	r5, [pc, #164]	; (169c <WS2812Serial::begin()+0x194>)
		CCM_CCGR1 |= CCM_CCGR1_LPUART4(CCM_CCGR_ON);
		hwtrigger = DMAMUX_SOURCE_LPUART4_TX; 
		break;
	  case 14: // Serial3
		uart = &IMXRT_LPUART2; 
		CCM_CCGR0 |= CCM_CCGR0_LPUART2(CCM_CCGR_ON);
    15f6:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
		uart = &IMXRT_LPUART4; 
		CCM_CCGR1 |= CCM_CCGR1_LPUART4(CCM_CCGR_ON);
		hwtrigger = DMAMUX_SOURCE_LPUART4_TX; 
		break;
	  case 14: // Serial3
		uart = &IMXRT_LPUART2; 
    15fa:	6181      	str	r1, [r0, #24]
		CCM_CCGR0 |= CCM_CCGR0_LPUART2(CCM_CCGR_ON);
    15fc:	6693      	str	r3, [r2, #104]	; 0x68
		hwtrigger = DMAMUX_SOURCE_LPUART2_TX; 
		break;
    15fe:	e7a7      	b.n	1550 <WS2812Serial::begin()+0x48>
	  case 17: // Serial4
		uart = &IMXRT_LPUART3; 
		CCM_CCGR0 |= CCM_CCGR0_LPUART3(CCM_CCGR_ON);
    1600:	4a1e      	ldr	r2, [pc, #120]	; (167c <WS2812Serial::begin()+0x174>)
		uart = &IMXRT_LPUART2; 
		CCM_CCGR0 |= CCM_CCGR0_LPUART2(CCM_CCGR_ON);
		hwtrigger = DMAMUX_SOURCE_LPUART2_TX; 
		break;
	  case 17: // Serial4
		uart = &IMXRT_LPUART3; 
    1602:	4927      	ldr	r1, [pc, #156]	; (16a0 <WS2812Serial::begin()+0x198>)
		CCM_CCGR0 |= CCM_CCGR0_LPUART3(CCM_CCGR_ON);
    1604:	6e93      	ldr	r3, [r2, #104]	; 0x68
		hwtrigger = DMAMUX_SOURCE_LPUART3_TX; 
		break;
    1606:	4d27      	ldr	r5, [pc, #156]	; (16a4 <WS2812Serial::begin()+0x19c>)
		CCM_CCGR0 |= CCM_CCGR0_LPUART2(CCM_CCGR_ON);
		hwtrigger = DMAMUX_SOURCE_LPUART2_TX; 
		break;
	  case 17: // Serial4
		uart = &IMXRT_LPUART3; 
		CCM_CCGR0 |= CCM_CCGR0_LPUART3(CCM_CCGR_ON);
    1608:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
		uart = &IMXRT_LPUART2; 
		CCM_CCGR0 |= CCM_CCGR0_LPUART2(CCM_CCGR_ON);
		hwtrigger = DMAMUX_SOURCE_LPUART2_TX; 
		break;
	  case 17: // Serial4
		uart = &IMXRT_LPUART3; 
    160c:	6181      	str	r1, [r0, #24]
		CCM_CCGR0 |= CCM_CCGR0_LPUART3(CCM_CCGR_ON);
    160e:	6693      	str	r3, [r2, #104]	; 0x68
		hwtrigger = DMAMUX_SOURCE_LPUART3_TX; 
		break;
    1610:	e79e      	b.n	1550 <WS2812Serial::begin()+0x48>
	  case 39: // Serial5 alt
#elif defined(ARDUINO_TEENSY41)
	  case 47:
#endif
		uart = &IMXRT_LPUART8; 
		CCM_CCGR6 |= CCM_CCGR6_LPUART8(CCM_CCGR_ON);
    1612:	4a1a      	ldr	r2, [pc, #104]	; (167c <WS2812Serial::begin()+0x174>)
#if defined(ARDUINO_TEENSY40)
	  case 39: // Serial5 alt
#elif defined(ARDUINO_TEENSY41)
	  case 47:
#endif
		uart = &IMXRT_LPUART8; 
    1614:	4924      	ldr	r1, [pc, #144]	; (16a8 <WS2812Serial::begin()+0x1a0>)
		CCM_CCGR6 |= CCM_CCGR6_LPUART8(CCM_CCGR_ON);
    1616:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
		hwtrigger = DMAMUX_SOURCE_LPUART8_TX; 
		break;
    161a:	4d24      	ldr	r5, [pc, #144]	; (16ac <WS2812Serial::begin()+0x1a4>)
	  case 39: // Serial5 alt
#elif defined(ARDUINO_TEENSY41)
	  case 47:
#endif
		uart = &IMXRT_LPUART8; 
		CCM_CCGR6 |= CCM_CCGR6_LPUART8(CCM_CCGR_ON);
    161c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
#if defined(ARDUINO_TEENSY40)
	  case 39: // Serial5 alt
#elif defined(ARDUINO_TEENSY41)
	  case 47:
#endif
		uart = &IMXRT_LPUART8; 
    1620:	6181      	str	r1, [r0, #24]
		CCM_CCGR6 |= CCM_CCGR6_LPUART8(CCM_CCGR_ON);
    1622:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		hwtrigger = DMAMUX_SOURCE_LPUART8_TX; 
		break;
    1626:	e793      	b.n	1550 <WS2812Serial::begin()+0x48>
	  case 24: // Serial6
		uart = &IMXRT_LPUART1; 
		CCM_CCGR5 |= CCM_CCGR5_LPUART1(CCM_CCGR_ON);
    1628:	4a14      	ldr	r2, [pc, #80]	; (167c <WS2812Serial::begin()+0x174>)
		uart = &IMXRT_LPUART8; 
		CCM_CCGR6 |= CCM_CCGR6_LPUART8(CCM_CCGR_ON);
		hwtrigger = DMAMUX_SOURCE_LPUART8_TX; 
		break;
	  case 24: // Serial6
		uart = &IMXRT_LPUART1; 
    162a:	4921      	ldr	r1, [pc, #132]	; (16b0 <WS2812Serial::begin()+0x1a8>)
		CCM_CCGR5 |= CCM_CCGR5_LPUART1(CCM_CCGR_ON);
    162c:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
		hwtrigger = DMAMUX_SOURCE_LPUART1_TX; 
		break;
    162e:	4d21      	ldr	r5, [pc, #132]	; (16b4 <WS2812Serial::begin()+0x1ac>)
		CCM_CCGR6 |= CCM_CCGR6_LPUART8(CCM_CCGR_ON);
		hwtrigger = DMAMUX_SOURCE_LPUART8_TX; 
		break;
	  case 24: // Serial6
		uart = &IMXRT_LPUART1; 
		CCM_CCGR5 |= CCM_CCGR5_LPUART1(CCM_CCGR_ON);
    1630:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
		uart = &IMXRT_LPUART8; 
		CCM_CCGR6 |= CCM_CCGR6_LPUART8(CCM_CCGR_ON);
		hwtrigger = DMAMUX_SOURCE_LPUART8_TX; 
		break;
	  case 24: // Serial6
		uart = &IMXRT_LPUART1; 
    1634:	6181      	str	r1, [r0, #24]
		CCM_CCGR5 |= CCM_CCGR5_LPUART1(CCM_CCGR_ON);
    1636:	67d3      	str	r3, [r2, #124]	; 0x7c
		hwtrigger = DMAMUX_SOURCE_LPUART1_TX; 
		break;
    1638:	e78a      	b.n	1550 <WS2812Serial::begin()+0x48>
	  case 1: // Serial1
#if defined(ARDUINO_TEENSY41)
	  case 53:
#endif
		uart = &IMXRT_LPUART6; 
		CCM_CCGR3 |= CCM_CCGR3_LPUART6(CCM_CCGR_ON);
    163a:	4a10      	ldr	r2, [pc, #64]	; (167c <WS2812Serial::begin()+0x174>)
#elif defined(__IMXRT1062__)
	  case 1: // Serial1
#if defined(ARDUINO_TEENSY41)
	  case 53:
#endif
		uart = &IMXRT_LPUART6; 
    163c:	491e      	ldr	r1, [pc, #120]	; (16b8 <WS2812Serial::begin()+0x1b0>)
		CCM_CCGR3 |= CCM_CCGR3_LPUART6(CCM_CCGR_ON);
    163e:	6f53      	ldr	r3, [r2, #116]	; 0x74
		hwtrigger = DMAMUX_SOURCE_LPUART6_TX; 
		break;
    1640:	4d1e      	ldr	r5, [pc, #120]	; (16bc <WS2812Serial::begin()+0x1b4>)
	  case 1: // Serial1
#if defined(ARDUINO_TEENSY41)
	  case 53:
#endif
		uart = &IMXRT_LPUART6; 
		CCM_CCGR3 |= CCM_CCGR3_LPUART6(CCM_CCGR_ON);
    1642:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
#elif defined(__IMXRT1062__)
	  case 1: // Serial1
#if defined(ARDUINO_TEENSY41)
	  case 53:
#endif
		uart = &IMXRT_LPUART6; 
    1646:	6181      	str	r1, [r0, #24]
		CCM_CCGR3 |= CCM_CCGR3_LPUART6(CCM_CCGR_ON);
    1648:	6753      	str	r3, [r2, #116]	; 0x74
		hwtrigger = DMAMUX_SOURCE_LPUART6_TX; 
		break;
    164a:	e781      	b.n	1550 <WS2812Serial::begin()+0x48>
	  case 8: // Serial2
		uart = &IMXRT_LPUART4; 
		CCM_CCGR1 |= CCM_CCGR1_LPUART4(CCM_CCGR_ON);
    164c:	4a0b      	ldr	r2, [pc, #44]	; (167c <WS2812Serial::begin()+0x174>)
		uart = &IMXRT_LPUART6; 
		CCM_CCGR3 |= CCM_CCGR3_LPUART6(CCM_CCGR_ON);
		hwtrigger = DMAMUX_SOURCE_LPUART6_TX; 
		break;
	  case 8: // Serial2
		uart = &IMXRT_LPUART4; 
    164e:	491c      	ldr	r1, [pc, #112]	; (16c0 <WS2812Serial::begin()+0x1b8>)
		CCM_CCGR1 |= CCM_CCGR1_LPUART4(CCM_CCGR_ON);
    1650:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
		hwtrigger = DMAMUX_SOURCE_LPUART4_TX; 
		break;
    1652:	4d1c      	ldr	r5, [pc, #112]	; (16c4 <WS2812Serial::begin()+0x1bc>)
		CCM_CCGR3 |= CCM_CCGR3_LPUART6(CCM_CCGR_ON);
		hwtrigger = DMAMUX_SOURCE_LPUART6_TX; 
		break;
	  case 8: // Serial2
		uart = &IMXRT_LPUART4; 
		CCM_CCGR1 |= CCM_CCGR1_LPUART4(CCM_CCGR_ON);
    1654:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
		uart = &IMXRT_LPUART6; 
		CCM_CCGR3 |= CCM_CCGR3_LPUART6(CCM_CCGR_ON);
		hwtrigger = DMAMUX_SOURCE_LPUART6_TX; 
		break;
	  case 8: // Serial2
		uart = &IMXRT_LPUART4; 
    1658:	6181      	str	r1, [r0, #24]
		CCM_CCGR1 |= CCM_CCGR1_LPUART4(CCM_CCGR_ON);
    165a:	66d3      	str	r3, [r2, #108]	; 0x6c
		hwtrigger = DMAMUX_SOURCE_LPUART4_TX; 
		break;
    165c:	e778      	b.n	1550 <WS2812Serial::begin()+0x48>
		hwtrigger = DMAMUX_SOURCE_LPUART5_TX; 
		break;
#endif		
#endif
	  default:
		return false; // pin not supported
    165e:	2000      	movs	r0, #0
#endif 

	dma->triggerAtHardwareEvent(hwtrigger);
	memset(drawBuffer, 0, numled * 3);
	return true;
}
    1660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1662:	2303      	movs	r3, #3
    1664:	e789      	b.n	157a <WS2812Serial::begin()+0x72>
#endif
	  default:
		return false; // pin not supported
	}
	if (!dma) {
		dma = new DMAChannel;
    1666:	2008      	movs	r0, #8
    1668:	f002 f8c0 	bl	37ec <operator new(unsigned int)>
    166c:	4607      	mov	r7, r0
	/*************************************************/
	/**    Channel Allocation                       **/
	/*************************************************/

	DMAChannel() {
		begin();
    166e:	4631      	mov	r1, r6
    1670:	4606      	mov	r6, r0
    1672:	f002 f82f 	bl	36d4 <DMAChannel::begin(bool)>
    1676:	60e7      	str	r7, [r4, #12]
    1678:	e76f      	b.n	155a <WS2812Serial::begin()+0x52>
    167a:	bf00      	nop
    167c:	400fc000 	.word	0x400fc000
    1680:	4019c000 	.word	0x4019c000
    1684:	80000008 	.word	0x80000008
    1688:	05800001 	.word	0x05800001
    168c:	10080000 	.word	0x10080000
    1690:	200000e8 	.word	0x200000e8
    1694:	400ec000 	.word	0x400ec000
    1698:	40188000 	.word	0x40188000
    169c:	80000042 	.word	0x80000042
    16a0:	4018c000 	.word	0x4018c000
    16a4:	80000004 	.word	0x80000004
    16a8:	401a0000 	.word	0x401a0000
    16ac:	80000048 	.word	0x80000048
    16b0:	40184000 	.word	0x40184000
    16b4:	80000002 	.word	0x80000002
    16b8:	40198000 	.word	0x40198000
    16bc:	80000046 	.word	0x80000046
    16c0:	40190000 	.word	0x40190000
    16c4:	80000044 	.word	0x80000044

000016c8 <WS2812Serial::show()>:
	memset(drawBuffer, 0, numled * 3);
	return true;
}

void WS2812Serial::show()
{
    16c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	while ((dma->CFG->DCR & DMA_DCR_ERQ)) {
		yield();
	}
#elif defined(__IMXRT1062__)
	//Serial.println("Show called");
	while ((DMA_ERQ & (1 << dma->channel))) {
    16cc:	68c3      	ldr	r3, [r0, #12]
	memset(drawBuffer, 0, numled * 3);
	return true;
}

void WS2812Serial::show()
{
    16ce:	4604      	mov	r4, r0
	while ((dma->CFG->DCR & DMA_DCR_ERQ)) {
		yield();
	}
#elif defined(__IMXRT1062__)
	//Serial.println("Show called");
	while ((DMA_ERQ & (1 << dma->channel))) {
    16d0:	2501      	movs	r5, #1
    16d2:	4ecf      	ldr	r6, [pc, #828]	; (1a10 <WS2812Serial::show()+0x348>)
    16d4:	e002      	b.n	16dc <WS2812Serial::show()+0x14>
		yield();
    16d6:	f002 f8ef 	bl	38b8 <yield>
	while ((dma->CFG->DCR & DMA_DCR_ERQ)) {
		yield();
	}
#elif defined(__IMXRT1062__)
	//Serial.println("Show called");
	while ((DMA_ERQ & (1 << dma->channel))) {
    16da:	68e3      	ldr	r3, [r4, #12]
    16dc:	791b      	ldrb	r3, [r3, #4]
    16de:	68f2      	ldr	r2, [r6, #12]
    16e0:	fa05 f303 	lsl.w	r3, r5, r3
    16e4:	4213      	tst	r3, r2
    16e6:	d1f6      	bne.n	16d6 <WS2812Serial::show()+0xe>
		yield();
	}
	//Serial.println("After Yield");
#endif
	// copy drawing buffer to frame buffer
	if (config < 6) {
    16e8:	78e3      	ldrb	r3, [r4, #3]
    16ea:	2b05      	cmp	r3, #5
    16ec:	d825      	bhi.n	173a <WS2812Serial::show()+0x72>
		// RGB
		const uint8_t *p = drawBuffer;
		const uint8_t *end = p + (numled * 3);
    16ee:	8822      	ldrh	r2, [r4, #0]
	//Serial.println("After Yield");
#endif
	// copy drawing buffer to frame buffer
	if (config < 6) {
		// RGB
		const uint8_t *p = drawBuffer;
    16f0:	68a0      	ldr	r0, [r4, #8]
		const uint8_t *end = p + (numled * 3);
    16f2:	eb02 0542 	add.w	r5, r2, r2, lsl #1
		uint8_t *fb = frameBuffer;
    16f6:	6861      	ldr	r1, [r4, #4]
#endif
	// copy drawing buffer to frame buffer
	if (config < 6) {
		// RGB
		const uint8_t *p = drawBuffer;
		const uint8_t *end = p + (numled * 3);
    16f8:	4405      	add	r5, r0
		uint8_t *fb = frameBuffer;
		while (p < end) {
    16fa:	42a8      	cmp	r0, r5
    16fc:	f080 820a 	bcs.w	1b14 <WS2812Serial::show()+0x44c>
    1700:	3003      	adds	r0, #3
    1702:	469c      	mov	ip, r3
			uint8_t b = *p++;
			uint8_t g = *p++;
			uint8_t r = *p++;
			uint32_t mult = brightness + 1;
    1704:	7d27      	ldrb	r7, [r4, #20]
			b = (b * mult) >> 8;
    1706:	f810 ec03 	ldrb.w	lr, [r0, #-3]
		uint8_t *fb = frameBuffer;
		while (p < end) {
			uint8_t b = *p++;
			uint8_t g = *p++;
			uint8_t r = *p++;
			uint32_t mult = brightness + 1;
    170a:	3701      	adds	r7, #1
			b = (b * mult) >> 8;
			g = (g * mult) >> 8;
    170c:	f810 6c02 	ldrb.w	r6, [r0, #-2]
			r = (r * mult) >> 8;
    1710:	f810 2c01 	ldrb.w	r2, [r0, #-1]
		while (p < end) {
			uint8_t b = *p++;
			uint8_t g = *p++;
			uint8_t r = *p++;
			uint32_t mult = brightness + 1;
			b = (b * mult) >> 8;
    1714:	fb07 f30e 	mul.w	r3, r7, lr
			g = (g * mult) >> 8;
    1718:	fb07 f606 	mul.w	r6, r7, r6
			r = (r * mult) >> 8;
    171c:	fb07 f702 	mul.w	r7, r7, r2
		while (p < end) {
			uint8_t b = *p++;
			uint8_t g = *p++;
			uint8_t r = *p++;
			uint32_t mult = brightness + 1;
			b = (b * mult) >> 8;
    1720:	ea4f 2e13 	mov.w	lr, r3, lsr #8
			g = (g * mult) >> 8;
    1724:	0a36      	lsrs	r6, r6, #8
			r = (r * mult) >> 8;
    1726:	0a3f      	lsrs	r7, r7, #8
			uint32_t n=0;
			switch (config) {
    1728:	f1bc 0f05 	cmp.w	ip, #5
    172c:	f200 81f9 	bhi.w	1b22 <WS2812Serial::show()+0x45a>
    1730:	e8df f00c 	tbb	[pc, ip]
    1734:	6f79838e 	.word	0x6f79838e
    1738:	4264      	.short	0x4264
		}
		microseconds_per_led = 30;
		bytes_per_led = 12;
	} else {
		// RGBW
		const uint8_t *p = drawBuffer;
    173a:	68a1      	ldr	r1, [r4, #8]
		const uint8_t *end = p + (numled * 4);
    173c:	8825      	ldrh	r5, [r4, #0]
		uint8_t *fb = frameBuffer;
    173e:	6862      	ldr	r2, [r4, #4]
		microseconds_per_led = 30;
		bytes_per_led = 12;
	} else {
		// RGBW
		const uint8_t *p = drawBuffer;
		const uint8_t *end = p + (numled * 4);
    1740:	eb01 0085 	add.w	r0, r1, r5, lsl #2
		uint8_t *fb = frameBuffer;
		while (p < end) {
    1744:	4281      	cmp	r1, r0
    1746:	f080 81e9 	bcs.w	1b1c <WS2812Serial::show()+0x454>
    174a:	3104      	adds	r1, #4
			uint8_t b = *p++;
			uint8_t g = *p++;
			uint8_t r = *p++;
			uint8_t w = *p++;
			uint32_t mult = brightness + 1;
    174c:	7d25      	ldrb	r5, [r4, #20]
			b = (b * mult) >> 8;
			g = (g * mult) >> 8;
			r = (r * mult) >> 8;
			w = (w * mult) >> 8;
			uint32_t n=0;
			switch (config) {
    174e:	1f9e      	subs	r6, r3, #6
			uint8_t g = *p++;
			uint8_t r = *p++;
			uint8_t w = *p++;
			uint32_t mult = brightness + 1;
			b = (b * mult) >> 8;
			g = (g * mult) >> 8;
    1750:	f811 ec03 	ldrb.w	lr, [r1, #-3]
		while (p < end) {
			uint8_t b = *p++;
			uint8_t g = *p++;
			uint8_t r = *p++;
			uint8_t w = *p++;
			uint32_t mult = brightness + 1;
    1754:	3501      	adds	r5, #1
			b = (b * mult) >> 8;
    1756:	f811 3c04 	ldrb.w	r3, [r1, #-4]
			g = (g * mult) >> 8;
			r = (r * mult) >> 8;
    175a:	f811 7c02 	ldrb.w	r7, [r1, #-2]
			w = (w * mult) >> 8;
    175e:	f811 cc01 	ldrb.w	ip, [r1, #-1]
			uint8_t b = *p++;
			uint8_t g = *p++;
			uint8_t r = *p++;
			uint8_t w = *p++;
			uint32_t mult = brightness + 1;
			b = (b * mult) >> 8;
    1762:	fb05 f303 	mul.w	r3, r5, r3
			g = (g * mult) >> 8;
    1766:	fb05 fe0e 	mul.w	lr, r5, lr
			r = (r * mult) >> 8;
    176a:	fb05 f707 	mul.w	r7, r5, r7
			uint8_t b = *p++;
			uint8_t g = *p++;
			uint8_t r = *p++;
			uint8_t w = *p++;
			uint32_t mult = brightness + 1;
			b = (b * mult) >> 8;
    176e:	ea4f 2813 	mov.w	r8, r3, lsr #8
			g = (g * mult) >> 8;
			r = (r * mult) >> 8;
			w = (w * mult) >> 8;
    1772:	fb05 f50c 	mul.w	r5, r5, ip
			uint8_t g = *p++;
			uint8_t r = *p++;
			uint8_t w = *p++;
			uint32_t mult = brightness + 1;
			b = (b * mult) >> 8;
			g = (g * mult) >> 8;
    1776:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
			r = (r * mult) >> 8;
    177a:	0a3f      	lsrs	r7, r7, #8
			w = (w * mult) >> 8;
    177c:	0a2d      	lsrs	r5, r5, #8
			uint32_t n=0;
			switch (config) {
    177e:	2e17      	cmp	r6, #23
    1780:	f200 81d1 	bhi.w	1b26 <WS2812Serial::show()+0x45e>
    1784:	e8df f016 	tbh	[pc, r6, lsl #1]
    1788:	0146014b 	.word	0x0146014b
    178c:	013a013f 	.word	0x013a013f
    1790:	012a0136 	.word	0x012a0136
    1794:	011a0126 	.word	0x011a0126
    1798:	01080115 	.word	0x01080115
    179c:	00ef00fc 	.word	0x00ef00fc
    17a0:	00e700eb 	.word	0x00e700eb
    17a4:	00d700e3 	.word	0x00d700e3
    17a8:	00af00bb 	.word	0x00af00bb
    17ac:	009d00aa 	.word	0x009d00aa
    17b0:	00c600d3 	.word	0x00c600d3
    17b4:	006e0091 	.word	0x006e0091
			  case WS2812_RGB: n = (r << 16) | (g << 8) | b; break;
			  case WS2812_RBG: n = (r << 16) | (b << 8) | g; break;
			  case WS2812_GRB: n = (g << 16) | (r << 8) | b; break;
			  case WS2812_GBR: n = (g << 16) | (b << 8) | r; break;
			  case WS2812_BRG: n = (b << 16) | (r << 8) | g; break;
			  case WS2812_BGR: n = (b << 16) | (g << 8) | r; break;
    17b8:	ea4f 430e 	mov.w	r3, lr, lsl #16
    17bc:	0236      	lsls	r6, r6, #8
    17be:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
    17c2:	f406 437f 	and.w	r3, r6, #65280	; 0xff00
    17c6:	4313      	orrs	r3, r2
    17c8:	433b      	orrs	r3, r7
    17ca:	f101 060c 	add.w	r6, r1, #12
			}
			const uint8_t *stop = fb + 12;
			do {
				uint8_t x = 0x08;
    17ce:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
    17d2:	bf0c      	ite	eq
    17d4:	220f      	moveq	r2, #15
    17d6:	2208      	movne	r2, #8
				if (!(n & 0x00800000)) x |= 0x07;
				if (!(n & 0x00400000)) x |= 0xE0;
    17d8:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
				n <<= 2;
    17dc:	ea4f 0383 	mov.w	r3, r3, lsl #2
			}
			const uint8_t *stop = fb + 12;
			do {
				uint8_t x = 0x08;
				if (!(n & 0x00800000)) x |= 0x07;
				if (!(n & 0x00400000)) x |= 0xE0;
    17e0:	bf08      	it	eq
    17e2:	f042 02e0 	orreq.w	r2, r2, #224	; 0xe0
				n <<= 2;
				*fb++ = x;
    17e6:	f801 2b01 	strb.w	r2, [r1], #1
			} while (fb < stop);
    17ea:	42b1      	cmp	r1, r6
    17ec:	d1ef      	bne.n	17ce <WS2812Serial::show()+0x106>
	if (config < 6) {
		// RGB
		const uint8_t *p = drawBuffer;
		const uint8_t *end = p + (numled * 3);
		uint8_t *fb = frameBuffer;
		while (p < end) {
    17ee:	4285      	cmp	r5, r0
    17f0:	f240 811a 	bls.w	1a28 <WS2812Serial::show()+0x360>
    17f4:	3003      	adds	r0, #3
    17f6:	f894 c003 	ldrb.w	ip, [r4, #3]
    17fa:	e783      	b.n	1704 <WS2812Serial::show()+0x3c>
			switch (config) {
			  case WS2812_RGB: n = (r << 16) | (g << 8) | b; break;
			  case WS2812_RBG: n = (r << 16) | (b << 8) | g; break;
			  case WS2812_GRB: n = (g << 16) | (r << 8) | b; break;
			  case WS2812_GBR: n = (g << 16) | (b << 8) | r; break;
			  case WS2812_BRG: n = (b << 16) | (r << 8) | g; break;
    17fc:	ea4f 430e 	mov.w	r3, lr, lsl #16
    1800:	023a      	lsls	r2, r7, #8
    1802:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    1806:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
    180a:	431a      	orrs	r2, r3
    180c:	ea42 0306 	orr.w	r3, r2, r6
    1810:	e7db      	b.n	17ca <WS2812Serial::show()+0x102>
			uint32_t n=0;
			switch (config) {
			  case WS2812_RGB: n = (r << 16) | (g << 8) | b; break;
			  case WS2812_RBG: n = (r << 16) | (b << 8) | g; break;
			  case WS2812_GRB: n = (g << 16) | (r << 8) | b; break;
			  case WS2812_GBR: n = (g << 16) | (b << 8) | r; break;
    1812:	0436      	lsls	r6, r6, #16
    1814:	ea4f 220e 	mov.w	r2, lr, lsl #8
    1818:	f406 067f 	and.w	r6, r6, #16711680	; 0xff0000
    181c:	f402 437f 	and.w	r3, r2, #65280	; 0xff00
    1820:	4333      	orrs	r3, r6
    1822:	433b      	orrs	r3, r7
    1824:	e7d1      	b.n	17ca <WS2812Serial::show()+0x102>
			r = (r * mult) >> 8;
			uint32_t n=0;
			switch (config) {
			  case WS2812_RGB: n = (r << 16) | (g << 8) | b; break;
			  case WS2812_RBG: n = (r << 16) | (b << 8) | g; break;
			  case WS2812_GRB: n = (g << 16) | (r << 8) | b; break;
    1826:	0433      	lsls	r3, r6, #16
    1828:	023a      	lsls	r2, r7, #8
    182a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    182e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
    1832:	431a      	orrs	r2, r3
    1834:	ea42 030e 	orr.w	r3, r2, lr
    1838:	e7c7      	b.n	17ca <WS2812Serial::show()+0x102>
			g = (g * mult) >> 8;
			r = (r * mult) >> 8;
			uint32_t n=0;
			switch (config) {
			  case WS2812_RGB: n = (r << 16) | (g << 8) | b; break;
			  case WS2812_RBG: n = (r << 16) | (b << 8) | g; break;
    183a:	043b      	lsls	r3, r7, #16
    183c:	ea4f 220e 	mov.w	r2, lr, lsl #8
    1840:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    1844:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
    1848:	431a      	orrs	r2, r3
    184a:	ea42 0306 	orr.w	r3, r2, r6
    184e:	e7bc      	b.n	17ca <WS2812Serial::show()+0x102>
			b = (b * mult) >> 8;
			g = (g * mult) >> 8;
			r = (r * mult) >> 8;
			uint32_t n=0;
			switch (config) {
			  case WS2812_RGB: n = (r << 16) | (g << 8) | b; break;
    1850:	043b      	lsls	r3, r7, #16
    1852:	0236      	lsls	r6, r6, #8
    1854:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    1858:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
    185c:	431e      	orrs	r6, r3
    185e:	ea46 030e 	orr.w	r3, r6, lr
    1862:	e7b2      	b.n	17ca <WS2812Serial::show()+0x102>
			  case WS2812_RGWB: n = (r << 24) | (g << 16) | (w << 8) | b; break;
			  case WS2812_RBWG: n = (r << 24) | (b << 16) | (w << 8) | g; break;
			  case WS2812_GRWB: n = (g << 24) | (r << 16) | (w << 8) | b; break;
			  case WS2812_GBWR: n = (g << 24) | (b << 16) | (w << 8) | r; break;
			  case WS2812_BRWG: n = (b << 24) | (r << 16) | (w << 8) | g; break;
			  case WS2812_BGWR: n = (b << 24) | (g << 16) | (w << 8) | r; break;
    1864:	ea4f 460e 	mov.w	r6, lr, lsl #16
    1868:	022b      	lsls	r3, r5, #8
    186a:	ea47 6708 	orr.w	r7, r7, r8, lsl #24
    186e:	f406 067f 	and.w	r6, r6, #16711680	; 0xff0000
    1872:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    1876:	ea47 0506 	orr.w	r5, r7, r6
    187a:	432b      	orrs	r3, r5
    187c:	f102 0610 	add.w	r6, r2, #16
			}
			const uint8_t *stop = fb + 16;
			do {
				uint8_t x = 0x08;
    1880:	2b00      	cmp	r3, #0
    1882:	bfac      	ite	ge
    1884:	250f      	movge	r5, #15
    1886:	2508      	movlt	r5, #8
				if (!(n & 0x80000000)) x |= 0x07;
				if (!(n & 0x40000000)) x |= 0xE0;
    1888:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
				n <<= 2;
    188c:	ea4f 0383 	mov.w	r3, r3, lsl #2
			}
			const uint8_t *stop = fb + 16;
			do {
				uint8_t x = 0x08;
				if (!(n & 0x80000000)) x |= 0x07;
				if (!(n & 0x40000000)) x |= 0xE0;
    1890:	bf08      	it	eq
    1892:	f045 05e0 	orreq.w	r5, r5, #224	; 0xe0
				n <<= 2;
				*fb++ = x;
    1896:	f802 5b01 	strb.w	r5, [r2], #1
			} while (fb < stop);
    189a:	42b2      	cmp	r2, r6
    189c:	d1f0      	bne.n	1880 <WS2812Serial::show()+0x1b8>
	} else {
		// RGBW
		const uint8_t *p = drawBuffer;
		const uint8_t *end = p + (numled * 4);
		uint8_t *fb = frameBuffer;
		while (p < end) {
    189e:	4288      	cmp	r0, r1
    18a0:	f240 8122 	bls.w	1ae8 <WS2812Serial::show()+0x420>
    18a4:	3104      	adds	r1, #4
    18a6:	78e3      	ldrb	r3, [r4, #3]
    18a8:	e750      	b.n	174c <WS2812Serial::show()+0x84>
			  case WS2812_BWGR: n = (b << 24) | (w << 16) | (g << 8) | r; break;
			  case WS2812_RGWB: n = (r << 24) | (g << 16) | (w << 8) | b; break;
			  case WS2812_RBWG: n = (r << 24) | (b << 16) | (w << 8) | g; break;
			  case WS2812_GRWB: n = (g << 24) | (r << 16) | (w << 8) | b; break;
			  case WS2812_GBWR: n = (g << 24) | (b << 16) | (w << 8) | r; break;
			  case WS2812_BRWG: n = (b << 24) | (r << 16) | (w << 8) | g; break;
    18aa:	043f      	lsls	r7, r7, #16
    18ac:	ea4e 6608 	orr.w	r6, lr, r8, lsl #24
    18b0:	022b      	lsls	r3, r5, #8
    18b2:	f407 077f 	and.w	r7, r7, #16711680	; 0xff0000
    18b6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    18ba:	ea47 0506 	orr.w	r5, r7, r6
    18be:	432b      	orrs	r3, r5
    18c0:	e7dc      	b.n	187c <WS2812Serial::show()+0x1b4>
			  case WS2812_GWRB: n = (g << 24) | (w << 16) | (r << 8) | b; break;
			  case WS2812_GWBR: n = (g << 24) | (w << 16) | (b << 8) | r; break;
			  case WS2812_BWRG: n = (b << 24) | (w << 16) | (r << 8) | g; break;
			  case WS2812_BWGR: n = (b << 24) | (w << 16) | (g << 8) | r; break;
			  case WS2812_RGWB: n = (r << 24) | (g << 16) | (w << 8) | b; break;
			  case WS2812_RBWG: n = (r << 24) | (b << 16) | (w << 8) | g; break;
    18c2:	ea4f 4308 	mov.w	r3, r8, lsl #16
    18c6:	ea4e 6707 	orr.w	r7, lr, r7, lsl #24
    18ca:	f403 067f 	and.w	r6, r3, #16711680	; 0xff0000
    18ce:	022b      	lsls	r3, r5, #8
    18d0:	ea46 0507 	orr.w	r5, r6, r7
    18d4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    18d8:	432b      	orrs	r3, r5
    18da:	e7cf      	b.n	187c <WS2812Serial::show()+0x1b4>
			  case WS2812_RWBG: n = (r << 24) | (w << 16) | (b << 8) | g; break;
			  case WS2812_GWRB: n = (g << 24) | (w << 16) | (r << 8) | b; break;
			  case WS2812_GWBR: n = (g << 24) | (w << 16) | (b << 8) | r; break;
			  case WS2812_BWRG: n = (b << 24) | (w << 16) | (r << 8) | g; break;
			  case WS2812_BWGR: n = (b << 24) | (w << 16) | (g << 8) | r; break;
			  case WS2812_RGWB: n = (r << 24) | (g << 16) | (w << 8) | b; break;
    18dc:	ea4f 430e 	mov.w	r3, lr, lsl #16
    18e0:	ea48 6707 	orr.w	r7, r8, r7, lsl #24
    18e4:	e7f1      	b.n	18ca <WS2812Serial::show()+0x202>
			  case WS2812_RWGB: n = (r << 24) | (w << 16) | (g << 8) | b; break;
			  case WS2812_RWBG: n = (r << 24) | (w << 16) | (b << 8) | g; break;
			  case WS2812_GWRB: n = (g << 24) | (w << 16) | (r << 8) | b; break;
			  case WS2812_GWBR: n = (g << 24) | (w << 16) | (b << 8) | r; break;
			  case WS2812_BWRG: n = (b << 24) | (w << 16) | (r << 8) | g; break;
			  case WS2812_BWGR: n = (b << 24) | (w << 16) | (g << 8) | r; break;
    18e6:	042b      	lsls	r3, r5, #16
    18e8:	ea47 6708 	orr.w	r7, r7, r8, lsl #24
    18ec:	f403 057f 	and.w	r5, r3, #16711680	; 0xff0000
    18f0:	ea4f 230e 	mov.w	r3, lr, lsl #8
    18f4:	433d      	orrs	r5, r7
    18f6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    18fa:	432b      	orrs	r3, r5
    18fc:	e7be      	b.n	187c <WS2812Serial::show()+0x1b4>
			  case WS2812_WBGR: n = (w << 24) | (b << 16) | (g << 8) | r; break;
			  case WS2812_RWGB: n = (r << 24) | (w << 16) | (g << 8) | b; break;
			  case WS2812_RWBG: n = (r << 24) | (w << 16) | (b << 8) | g; break;
			  case WS2812_GWRB: n = (g << 24) | (w << 16) | (r << 8) | b; break;
			  case WS2812_GWBR: n = (g << 24) | (w << 16) | (b << 8) | r; break;
			  case WS2812_BWRG: n = (b << 24) | (w << 16) | (r << 8) | g; break;
    18fe:	042b      	lsls	r3, r5, #16
    1900:	ea4e 6608 	orr.w	r6, lr, r8, lsl #24
    1904:	f403 057f 	and.w	r5, r3, #16711680	; 0xff0000
    1908:	023b      	lsls	r3, r7, #8
    190a:	4335      	orrs	r5, r6
    190c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    1910:	432b      	orrs	r3, r5
    1912:	e7b3      	b.n	187c <WS2812Serial::show()+0x1b4>
			  case WS2812_BWGR: n = (b << 24) | (w << 16) | (g << 8) | r; break;
			  case WS2812_RGWB: n = (r << 24) | (g << 16) | (w << 8) | b; break;
			  case WS2812_RBWG: n = (r << 24) | (b << 16) | (w << 8) | g; break;
			  case WS2812_GRWB: n = (g << 24) | (r << 16) | (w << 8) | b; break;
			  case WS2812_GBWR: n = (g << 24) | (b << 16) | (w << 8) | r; break;
    1914:	ea4f 4808 	mov.w	r8, r8, lsl #16
    1918:	022b      	lsls	r3, r5, #8
    191a:	ea47 670e 	orr.w	r7, r7, lr, lsl #24
    191e:	f408 067f 	and.w	r6, r8, #16711680	; 0xff0000
    1922:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    1926:	ea46 0507 	orr.w	r5, r6, r7
    192a:	432b      	orrs	r3, r5
    192c:	e7a6      	b.n	187c <WS2812Serial::show()+0x1b4>
			  case WS2812_GWBR: n = (g << 24) | (w << 16) | (b << 8) | r; break;
			  case WS2812_BWRG: n = (b << 24) | (w << 16) | (r << 8) | g; break;
			  case WS2812_BWGR: n = (b << 24) | (w << 16) | (g << 8) | r; break;
			  case WS2812_RGWB: n = (r << 24) | (g << 16) | (w << 8) | b; break;
			  case WS2812_RBWG: n = (r << 24) | (b << 16) | (w << 8) | g; break;
			  case WS2812_GRWB: n = (g << 24) | (r << 16) | (w << 8) | b; break;
    192e:	043f      	lsls	r7, r7, #16
    1930:	ea48 660e 	orr.w	r6, r8, lr, lsl #24
    1934:	e7bc      	b.n	18b0 <WS2812Serial::show()+0x1e8>
			  case WS2812_WBRG: n = (w << 24) | (b << 16) | (r << 8) | g; break;
			  case WS2812_WBGR: n = (w << 24) | (b << 16) | (g << 8) | r; break;
			  case WS2812_RWGB: n = (r << 24) | (w << 16) | (g << 8) | b; break;
			  case WS2812_RWBG: n = (r << 24) | (w << 16) | (b << 8) | g; break;
			  case WS2812_GWRB: n = (g << 24) | (w << 16) | (r << 8) | b; break;
			  case WS2812_GWBR: n = (g << 24) | (w << 16) | (b << 8) | r; break;
    1936:	042b      	lsls	r3, r5, #16
    1938:	ea47 670e 	orr.w	r7, r7, lr, lsl #24
    193c:	f403 057f 	and.w	r5, r3, #16711680	; 0xff0000
    1940:	ea4f 2308 	mov.w	r3, r8, lsl #8
    1944:	433d      	orrs	r5, r7
    1946:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    194a:	432b      	orrs	r3, r5
    194c:	e796      	b.n	187c <WS2812Serial::show()+0x1b4>
			  case WS2812_WGBR: n = (w << 24) | (g << 16) | (b << 8) | r; break;
			  case WS2812_WBRG: n = (w << 24) | (b << 16) | (r << 8) | g; break;
			  case WS2812_WBGR: n = (w << 24) | (b << 16) | (g << 8) | r; break;
			  case WS2812_RWGB: n = (r << 24) | (w << 16) | (g << 8) | b; break;
			  case WS2812_RWBG: n = (r << 24) | (w << 16) | (b << 8) | g; break;
			  case WS2812_GWRB: n = (g << 24) | (w << 16) | (r << 8) | b; break;
    194e:	042b      	lsls	r3, r5, #16
    1950:	ea48 660e 	orr.w	r6, r8, lr, lsl #24
    1954:	e7d6      	b.n	1904 <WS2812Serial::show()+0x23c>
			  case WS2812_WGRB: n = (w << 24) | (g << 16) | (r << 8) | b; break;
			  case WS2812_WGBR: n = (w << 24) | (g << 16) | (b << 8) | r; break;
			  case WS2812_WBRG: n = (w << 24) | (b << 16) | (r << 8) | g; break;
			  case WS2812_WBGR: n = (w << 24) | (b << 16) | (g << 8) | r; break;
			  case WS2812_RWGB: n = (r << 24) | (w << 16) | (g << 8) | b; break;
			  case WS2812_RWBG: n = (r << 24) | (w << 16) | (b << 8) | g; break;
    1956:	042b      	lsls	r3, r5, #16
    1958:	ea4e 6707 	orr.w	r7, lr, r7, lsl #24
    195c:	e7ee      	b.n	193c <WS2812Serial::show()+0x274>
			  case WS2812_WRBG: n = (w << 24) | (r << 16) | (b << 8) | g; break;
			  case WS2812_WGRB: n = (w << 24) | (g << 16) | (r << 8) | b; break;
			  case WS2812_WGBR: n = (w << 24) | (g << 16) | (b << 8) | r; break;
			  case WS2812_WBRG: n = (w << 24) | (b << 16) | (r << 8) | g; break;
			  case WS2812_WBGR: n = (w << 24) | (b << 16) | (g << 8) | r; break;
			  case WS2812_RWGB: n = (r << 24) | (w << 16) | (g << 8) | b; break;
    195e:	042b      	lsls	r3, r5, #16
    1960:	ea48 6707 	orr.w	r7, r8, r7, lsl #24
    1964:	e7c2      	b.n	18ec <WS2812Serial::show()+0x224>
			  case WS2812_WRGB: n = (w << 24) | (r << 16) | (g << 8) | b; break;
			  case WS2812_WRBG: n = (w << 24) | (r << 16) | (b << 8) | g; break;
			  case WS2812_WGRB: n = (w << 24) | (g << 16) | (r << 8) | b; break;
			  case WS2812_WGBR: n = (w << 24) | (g << 16) | (b << 8) | r; break;
			  case WS2812_WBRG: n = (w << 24) | (b << 16) | (r << 8) | g; break;
			  case WS2812_WBGR: n = (w << 24) | (b << 16) | (g << 8) | r; break;
    1966:	ea4f 4308 	mov.w	r3, r8, lsl #16
    196a:	ea47 6505 	orr.w	r5, r7, r5, lsl #24
			switch (config) {
			  case WS2812_RGBW: n = (r << 24) | (g << 16) | (b << 8) | w; break;
			  case WS2812_RBGW: n = (r << 24) | (b << 16) | (g << 8) | w; break;
			  case WS2812_GRBW: n = (g << 24) | (r << 16) | (b << 8) | w; break;
			  case WS2812_GBRW: n = (g << 24) | (b << 16) | (r << 8) | w; break;
			  case WS2812_BRGW: n = (b << 24) | (r << 16) | (g << 8) | w; break;
    196e:	f403 067f 	and.w	r6, r3, #16711680	; 0xff0000
    1972:	ea4f 230e 	mov.w	r3, lr, lsl #8
    1976:	4335      	orrs	r5, r6
    1978:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    197c:	432b      	orrs	r3, r5
    197e:	e77d      	b.n	187c <WS2812Serial::show()+0x1b4>
			  case WS2812_BGRW: n = (b << 24) | (b << 16) | (r << 8) | w; break;
			  case WS2812_WRGB: n = (w << 24) | (r << 16) | (g << 8) | b; break;
			  case WS2812_WRBG: n = (w << 24) | (r << 16) | (b << 8) | g; break;
			  case WS2812_WGRB: n = (w << 24) | (g << 16) | (r << 8) | b; break;
			  case WS2812_WGBR: n = (w << 24) | (g << 16) | (b << 8) | r; break;
			  case WS2812_WBRG: n = (w << 24) | (b << 16) | (r << 8) | g; break;
    1980:	ea4f 4308 	mov.w	r3, r8, lsl #16
    1984:	ea4e 6505 	orr.w	r5, lr, r5, lsl #24
			  case WS2812_GBRW: n = (g << 24) | (b << 16) | (r << 8) | w; break;
			  case WS2812_BRGW: n = (b << 24) | (r << 16) | (g << 8) | w; break;
			  case WS2812_BGRW: n = (b << 24) | (b << 16) | (r << 8) | w; break;
			  case WS2812_WRGB: n = (w << 24) | (r << 16) | (g << 8) | b; break;
			  case WS2812_WRBG: n = (w << 24) | (r << 16) | (b << 8) | g; break;
			  case WS2812_WGRB: n = (w << 24) | (g << 16) | (r << 8) | b; break;
    1988:	f403 067f 	and.w	r6, r3, #16711680	; 0xff0000
    198c:	023b      	lsls	r3, r7, #8
    198e:	4335      	orrs	r5, r6
    1990:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    1994:	432b      	orrs	r3, r5
    1996:	e771      	b.n	187c <WS2812Serial::show()+0x1b4>
			  case WS2812_WGBR: n = (w << 24) | (g << 16) | (b << 8) | r; break;
    1998:	ea4f 430e 	mov.w	r3, lr, lsl #16
    199c:	ea47 6505 	orr.w	r5, r7, r5, lsl #24
    19a0:	f403 067f 	and.w	r6, r3, #16711680	; 0xff0000
    19a4:	ea4f 2308 	mov.w	r3, r8, lsl #8
    19a8:	4335      	orrs	r5, r6
    19aa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    19ae:	432b      	orrs	r3, r5
    19b0:	e764      	b.n	187c <WS2812Serial::show()+0x1b4>
			  case WS2812_GBRW: n = (g << 24) | (b << 16) | (r << 8) | w; break;
			  case WS2812_BRGW: n = (b << 24) | (r << 16) | (g << 8) | w; break;
			  case WS2812_BGRW: n = (b << 24) | (b << 16) | (r << 8) | w; break;
			  case WS2812_WRGB: n = (w << 24) | (r << 16) | (g << 8) | b; break;
			  case WS2812_WRBG: n = (w << 24) | (r << 16) | (b << 8) | g; break;
			  case WS2812_WGRB: n = (w << 24) | (g << 16) | (r << 8) | b; break;
    19b2:	ea4f 430e 	mov.w	r3, lr, lsl #16
    19b6:	ea48 6505 	orr.w	r5, r8, r5, lsl #24
    19ba:	e7e5      	b.n	1988 <WS2812Serial::show()+0x2c0>
			  case WS2812_GRBW: n = (g << 24) | (r << 16) | (b << 8) | w; break;
			  case WS2812_GBRW: n = (g << 24) | (b << 16) | (r << 8) | w; break;
			  case WS2812_BRGW: n = (b << 24) | (r << 16) | (g << 8) | w; break;
			  case WS2812_BGRW: n = (b << 24) | (b << 16) | (r << 8) | w; break;
			  case WS2812_WRGB: n = (w << 24) | (r << 16) | (g << 8) | b; break;
			  case WS2812_WRBG: n = (w << 24) | (r << 16) | (b << 8) | g; break;
    19bc:	043b      	lsls	r3, r7, #16
    19be:	ea4e 6605 	orr.w	r6, lr, r5, lsl #24
    19c2:	f403 057f 	and.w	r5, r3, #16711680	; 0xff0000
    19c6:	ea4f 2308 	mov.w	r3, r8, lsl #8
    19ca:	4335      	orrs	r5, r6
    19cc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    19d0:	432b      	orrs	r3, r5
    19d2:	e753      	b.n	187c <WS2812Serial::show()+0x1b4>
			  case WS2812_RBGW: n = (r << 24) | (b << 16) | (g << 8) | w; break;
			  case WS2812_GRBW: n = (g << 24) | (r << 16) | (b << 8) | w; break;
			  case WS2812_GBRW: n = (g << 24) | (b << 16) | (r << 8) | w; break;
			  case WS2812_BRGW: n = (b << 24) | (r << 16) | (g << 8) | w; break;
			  case WS2812_BGRW: n = (b << 24) | (b << 16) | (r << 8) | w; break;
			  case WS2812_WRGB: n = (w << 24) | (r << 16) | (g << 8) | b; break;
    19d4:	043b      	lsls	r3, r7, #16
    19d6:	ea48 6505 	orr.w	r5, r8, r5, lsl #24
    19da:	e7c8      	b.n	196e <WS2812Serial::show()+0x2a6>
			  case WS2812_RGBW: n = (r << 24) | (g << 16) | (b << 8) | w; break;
			  case WS2812_RBGW: n = (r << 24) | (b << 16) | (g << 8) | w; break;
			  case WS2812_GRBW: n = (g << 24) | (r << 16) | (b << 8) | w; break;
			  case WS2812_GBRW: n = (g << 24) | (b << 16) | (r << 8) | w; break;
			  case WS2812_BRGW: n = (b << 24) | (r << 16) | (g << 8) | w; break;
			  case WS2812_BGRW: n = (b << 24) | (b << 16) | (r << 8) | w; break;
    19dc:	ea4f 4608 	mov.w	r6, r8, lsl #16
    19e0:	ea45 6508 	orr.w	r5, r5, r8, lsl #24
    19e4:	f406 067f 	and.w	r6, r6, #16711680	; 0xff0000
    19e8:	023b      	lsls	r3, r7, #8
    19ea:	4335      	orrs	r5, r6
    19ec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    19f0:	432b      	orrs	r3, r5
    19f2:	e743      	b.n	187c <WS2812Serial::show()+0x1b4>
			switch (config) {
			  case WS2812_RGBW: n = (r << 24) | (g << 16) | (b << 8) | w; break;
			  case WS2812_RBGW: n = (r << 24) | (b << 16) | (g << 8) | w; break;
			  case WS2812_GRBW: n = (g << 24) | (r << 16) | (b << 8) | w; break;
			  case WS2812_GBRW: n = (g << 24) | (b << 16) | (r << 8) | w; break;
			  case WS2812_BRGW: n = (b << 24) | (r << 16) | (g << 8) | w; break;
    19f4:	043b      	lsls	r3, r7, #16
    19f6:	ea45 6508 	orr.w	r5, r5, r8, lsl #24
    19fa:	e7b8      	b.n	196e <WS2812Serial::show()+0x2a6>
			uint32_t n=0;
			switch (config) {
			  case WS2812_RGBW: n = (r << 24) | (g << 16) | (b << 8) | w; break;
			  case WS2812_RBGW: n = (r << 24) | (b << 16) | (g << 8) | w; break;
			  case WS2812_GRBW: n = (g << 24) | (r << 16) | (b << 8) | w; break;
			  case WS2812_GBRW: n = (g << 24) | (b << 16) | (r << 8) | w; break;
    19fc:	ea4f 4308 	mov.w	r3, r8, lsl #16
    1a00:	ea45 650e 	orr.w	r5, r5, lr, lsl #24
    1a04:	e7c0      	b.n	1988 <WS2812Serial::show()+0x2c0>
			w = (w * mult) >> 8;
			uint32_t n=0;
			switch (config) {
			  case WS2812_RGBW: n = (r << 24) | (g << 16) | (b << 8) | w; break;
			  case WS2812_RBGW: n = (r << 24) | (b << 16) | (g << 8) | w; break;
			  case WS2812_GRBW: n = (g << 24) | (r << 16) | (b << 8) | w; break;
    1a06:	043b      	lsls	r3, r7, #16
    1a08:	ea45 660e 	orr.w	r6, r5, lr, lsl #24
    1a0c:	e7d9      	b.n	19c2 <WS2812Serial::show()+0x2fa>
    1a0e:	bf00      	nop
    1a10:	400e8000 	.word	0x400e8000
			r = (r * mult) >> 8;
			w = (w * mult) >> 8;
			uint32_t n=0;
			switch (config) {
			  case WS2812_RGBW: n = (r << 24) | (g << 16) | (b << 8) | w; break;
			  case WS2812_RBGW: n = (r << 24) | (b << 16) | (g << 8) | w; break;
    1a14:	ea4f 4308 	mov.w	r3, r8, lsl #16
    1a18:	ea45 6507 	orr.w	r5, r5, r7, lsl #24
    1a1c:	e7a7      	b.n	196e <WS2812Serial::show()+0x2a6>
			g = (g * mult) >> 8;
			r = (r * mult) >> 8;
			w = (w * mult) >> 8;
			uint32_t n=0;
			switch (config) {
			  case WS2812_RGBW: n = (r << 24) | (g << 16) | (b << 8) | w; break;
    1a1e:	ea4f 430e 	mov.w	r3, lr, lsl #16
    1a22:	ea45 6507 	orr.w	r5, r5, r7, lsl #24
    1a26:	e7bb      	b.n	19a0 <WS2812Serial::show()+0x2d8>
    1a28:	8825      	ldrh	r5, [r4, #0]
				n <<= 2;
				*fb++ = x;
			} while (fb < stop);
		}
		microseconds_per_led = 30;
		bytes_per_led = 12;
    1a2a:	260c      	movs	r6, #12
				if (!(n & 0x00400000)) x |= 0xE0;
				n <<= 2;
				*fb++ = x;
			} while (fb < stop);
		}
		microseconds_per_led = 30;
    1a2c:	231e      	movs	r3, #30
		}
		microseconds_per_led = 40;
		bytes_per_led = 16;
	}
	// wait 300us WS2812 reset time
	uint32_t min_elapsed = (numled * microseconds_per_led) + 300;
    1a2e:	fb03 f505 	mul.w	r5, r3, r5
	if (min_elapsed < 2500) min_elapsed = 2500;
    1a32:	f640 12c3 	movw	r2, #2499	; 0x9c3
    1a36:	f640 13c4 	movw	r3, #2500	; 0x9c4
		}
		microseconds_per_led = 40;
		bytes_per_led = 16;
	}
	// wait 300us WS2812 reset time
	uint32_t min_elapsed = (numled * microseconds_per_led) + 300;
    1a3a:	f505 7596 	add.w	r5, r5, #300	; 0x12c
	if (min_elapsed < 2500) min_elapsed = 2500;
    1a3e:	4295      	cmp	r5, r2
    1a40:	bf98      	it	ls
    1a42:	461d      	movls	r5, r3
    1a44:	e001      	b.n	1a4a <WS2812Serial::show()+0x382>
	uint32_t m;
	while (1) {
		m = micros();
		if ((m - prior_micros) > min_elapsed) break;
		yield();
    1a46:	f001 ff37 	bl	38b8 <yield>
	// wait 300us WS2812 reset time
	uint32_t min_elapsed = (numled * microseconds_per_led) + 300;
	if (min_elapsed < 2500) min_elapsed = 2500;
	uint32_t m;
	while (1) {
		m = micros();
    1a4a:	f000 fba9 	bl	21a0 <micros>
		if ((m - prior_micros) > min_elapsed) break;
    1a4e:	6923      	ldr	r3, [r4, #16]
    1a50:	1ac3      	subs	r3, r0, r3
    1a52:	429d      	cmp	r5, r3
    1a54:	d2f7      	bcs.n	1a46 <WS2812Serial::show()+0x37e>
	dma->CFG->DSR_BCR = numled * bytes_per_led;
	dma->CFG->DCR = DMA_DCR_ERQ | DMA_DCR_CS | DMA_DCR_SSIZE(1) |
		DMA_DCR_SINC | DMA_DCR_DSIZE(1) | DMA_DCR_D_REQ;
#elif defined(__IMXRT1062__)
	// See if we need to muck with DMA cache...
	if ((uint32_t)frameBuffer >= 0x20200000u)  arm_dcache_flush(frameBuffer, numled * bytes_per_led);
    1a56:	6865      	ldr	r5, [r4, #4]
    1a58:	4b34      	ldr	r3, [pc, #208]	; (1b2c <WS2812Serial::show()+0x464>)
	while (1) {
		m = micros();
		if ((m - prior_micros) > min_elapsed) break;
		yield();
	}
	prior_micros = m;
    1a5a:	6120      	str	r0, [r4, #16]
	dma->CFG->DSR_BCR = numled * bytes_per_led;
	dma->CFG->DCR = DMA_DCR_ERQ | DMA_DCR_CS | DMA_DCR_SSIZE(1) |
		DMA_DCR_SINC | DMA_DCR_DSIZE(1) | DMA_DCR_D_REQ;
#elif defined(__IMXRT1062__)
	// See if we need to muck with DMA cache...
	if ((uint32_t)frameBuffer >= 0x20200000u)  arm_dcache_flush(frameBuffer, numled * bytes_per_led);
    1a5c:	429d      	cmp	r5, r3
    1a5e:	d910      	bls.n	1a82 <WS2812Serial::show()+0x3ba>
// in the future.  For data transmission, use arm_dcache_flush_delete().
__attribute__((always_inline, unused))
static inline void arm_dcache_flush(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    1a60:	8822      	ldrh	r2, [r4, #0]
// typically used with special fields you will want to quickly access
// in the future.  For data transmission, use arm_dcache_flush_delete().
__attribute__((always_inline, unused))
static inline void arm_dcache_flush(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    1a62:	f025 031f 	bic.w	r3, r5, #31
	uint32_t end_addr = (uint32_t)addr + size;
    1a66:	fb06 5202 	mla	r2, r6, r2, r5
	asm volatile("": : :"memory");
	asm("dsb");
    1a6a:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCMVAC = location;
    1a6e:	4930      	ldr	r1, [pc, #192]	; (1b30 <WS2812Serial::show()+0x468>)
    1a70:	600b      	str	r3, [r1, #0]
		location += 32;
    1a72:	3320      	adds	r3, #32
	} while (location < end_addr);
    1a74:	429a      	cmp	r2, r3
    1a76:	d8fb      	bhi.n	1a70 <WS2812Serial::show()+0x3a8>
	asm("dsb");
    1a78:	f3bf 8f4f 	dsb	sy
	asm("isb");
    1a7c:	f3bf 8f6f 	isb	sy
    1a80:	6865      	ldr	r5, [r4, #4]
	
	dma->sourceBuffer(frameBuffer, numled * bytes_per_led);
    1a82:	68e1      	ldr	r1, [r4, #12]
	void sourceBuffer(volatile const signed char p[], unsigned int len) {
		sourceBuffer((volatile const uint8_t *)p, len); }
	void sourceBuffer(volatile const unsigned char p[], unsigned int len) {
		TCD->SADDR = p;
		TCD->SOFF = 1;
		TCD->ATTR_SRC = 0;
    1a84:	2000      	movs	r0, #0
    1a86:	8823      	ldrh	r3, [r4, #0]
	// buffer for transmitting data is used.
	void sourceBuffer(volatile const signed char p[], unsigned int len) {
		sourceBuffer((volatile const uint8_t *)p, len); }
	void sourceBuffer(volatile const unsigned char p[], unsigned int len) {
		TCD->SADDR = p;
		TCD->SOFF = 1;
    1a88:	2701      	movs	r7, #1
	// Use a buffer (array of data) as the data source.  Typically a
	// buffer for transmitting data is used.
	void sourceBuffer(volatile const signed char p[], unsigned int len) {
		sourceBuffer((volatile const uint8_t *)p, len); }
	void sourceBuffer(volatile const unsigned char p[], unsigned int len) {
		TCD->SADDR = p;
    1a8a:	680a      	ldr	r2, [r1, #0]
    1a8c:	fb06 f303 	mul.w	r3, r6, r3
		TCD->SOFF = 1;
		TCD->ATTR_SRC = 0;
    1a90:	71d0      	strb	r0, [r2, #7]
		TCD->NBYTES = 1;
    1a92:	f8d1 e000 	ldr.w	lr, [r1]
		TCD->SLAST = -len;
		TCD->BITER = len;
    1a96:	b298      	uxth	r0, r3
	// Use a buffer (array of data) as the data source.  Typically a
	// buffer for transmitting data is used.
	void sourceBuffer(volatile const signed char p[], unsigned int len) {
		sourceBuffer((volatile const uint8_t *)p, len); }
	void sourceBuffer(volatile const unsigned char p[], unsigned int len) {
		TCD->SADDR = p;
    1a98:	6015      	str	r5, [r2, #0]
		TCD->SOFF = 1;
		TCD->ATTR_SRC = 0;
		TCD->NBYTES = 1;
		TCD->SLAST = -len;
    1a9a:	425b      	negs	r3, r3
	// buffer for transmitting data is used.
	void sourceBuffer(volatile const signed char p[], unsigned int len) {
		sourceBuffer((volatile const uint8_t *)p, len); }
	void sourceBuffer(volatile const unsigned char p[], unsigned int len) {
		TCD->SADDR = p;
		TCD->SOFF = 1;
    1a9c:	8097      	strh	r7, [r2, #4]
		TCD->ATTR_SRC = 0;
		TCD->NBYTES = 1;
    1a9e:	f8ce 7008 	str.w	r7, [lr, #8]
		TCD->SLAST = -len;
    1aa2:	680a      	ldr	r2, [r1, #0]
		TCD->BITER = len;
    1aa4:	83d0      	strh	r0, [r2, #30]
		TCD->CITER = len;
    1aa6:	6809      	ldr	r1, [r1, #0]
	void sourceBuffer(volatile const unsigned char p[], unsigned int len) {
		TCD->SADDR = p;
		TCD->SOFF = 1;
		TCD->ATTR_SRC = 0;
		TCD->NBYTES = 1;
		TCD->SLAST = -len;
    1aa8:	60d3      	str	r3, [r2, #12]
		TCD->BITER = len;
		TCD->CITER = len;
    1aaa:	82c8      	strh	r0, [r1, #22]
//	dma->transferSize(1);
	dma->transferCount(numled * bytes_per_led);
    1aac:	68e1      	ldr	r1, [r4, #12]
    1aae:	8823      	ldrh	r3, [r4, #0]
		}
	}

	// Set the number of transfers (number of triggers until complete)
	void transferCount(unsigned int len) {
		if (!(TCD->BITER & DMA_TCD_BITER_ELINK)) {
    1ab0:	680a      	ldr	r2, [r1, #0]
    1ab2:	fb06 f603 	mul.w	r6, r6, r3
    1ab6:	8bd3      	ldrh	r3, [r2, #30]
    1ab8:	041b      	lsls	r3, r3, #16
    1aba:	d419      	bmi.n	1af0 <WS2812Serial::show()+0x428>
			if (len > 32767) return;
    1abc:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
    1ac0:	d205      	bcs.n	1ace <WS2812Serial::show()+0x406>
			TCD->BITER = len;
    1ac2:	b2b6      	uxth	r6, r6
    1ac4:	83d6      	strh	r6, [r2, #30]
			TCD->CITER = len;
    1ac6:	680b      	ldr	r3, [r1, #0]
    1ac8:	82de      	strh	r6, [r3, #22]
    1aca:	68e1      	ldr	r1, [r4, #12]
    1acc:	680a      	ldr	r2, [r1, #0]
	void interruptAtHalf(void) {
		TCD->CSR |= DMA_TCD_CSR_INTHALF;
	}

	void disableOnCompletion(void) {
		TCD->CSR |= DMA_TCD_CSR_DREQ;
    1ace:	8b93      	ldrh	r3, [r2, #28]

	Serial.printf("SA:%x SO:%d AT:%x NB:%x SL:%d DA:%x DO: %d CI:%x DL:%x CS:%x BI:%x\n", (uint32_t)dma->TCD->SADDR,
	dma->TCD->SOFF, dma->TCD->ATTR, dma->TCD->NBYTES, dma->TCD->SLAST, (uint32_t)dma->TCD->DADDR, 
	dma->TCD->DOFF, dma->TCD->CITER, dma->TCD->DLASTSGA, dma->TCD->CSR, dma->TCD->BITER);
*/
	uart->STAT = 0;	// try clearing out the status
    1ad0:	2500      	movs	r5, #0
    1ad2:	69a4      	ldr	r4, [r4, #24]
    1ad4:	b29b      	uxth	r3, r3
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    1ad6:	4817      	ldr	r0, [pc, #92]	; (1b34 <WS2812Serial::show()+0x46c>)
	void interruptAtHalf(void) {
		TCD->CSR |= DMA_TCD_CSR_INTHALF;
	}

	void disableOnCompletion(void) {
		TCD->CSR |= DMA_TCD_CSR_DREQ;
    1ad8:	f043 0308 	orr.w	r3, r3, #8
    1adc:	8393      	strh	r3, [r2, #28]
    1ade:	6165      	str	r5, [r4, #20]
    1ae0:	790b      	ldrb	r3, [r1, #4]
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    1ae2:	76c3      	strb	r3, [r0, #27]
    1ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1ae8:	8825      	ldrh	r5, [r4, #0]
				n <<= 2;
				*fb++ = x;
			} while (fb < stop);
		}
		microseconds_per_led = 40;
		bytes_per_led = 16;
    1aea:	2610      	movs	r6, #16
				if (!(n & 0x40000000)) x |= 0xE0;
				n <<= 2;
				*fb++ = x;
			} while (fb < stop);
		}
		microseconds_per_led = 40;
    1aec:	2328      	movs	r3, #40	; 0x28
    1aee:	e79e      	b.n	1a2e <WS2812Serial::show()+0x366>
		if (!(TCD->BITER & DMA_TCD_BITER_ELINK)) {
			if (len > 32767) return;
			TCD->BITER = len;
			TCD->CITER = len;
		} else {
			if (len > 511) return;
    1af0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    1af4:	d2eb      	bcs.n	1ace <WS2812Serial::show()+0x406>
			TCD->BITER = (TCD->BITER & 0xFE00) | len;
    1af6:	8bd3      	ldrh	r3, [r2, #30]
    1af8:	b2b6      	uxth	r6, r6
    1afa:	f403 437e 	and.w	r3, r3, #65024	; 0xfe00
    1afe:	4333      	orrs	r3, r6
    1b00:	83d3      	strh	r3, [r2, #30]
			TCD->CITER = (TCD->CITER & 0xFE00) | len;
    1b02:	680a      	ldr	r2, [r1, #0]
    1b04:	8ad3      	ldrh	r3, [r2, #22]
    1b06:	f403 437e 	and.w	r3, r3, #65024	; 0xfe00
    1b0a:	431e      	orrs	r6, r3
    1b0c:	82d6      	strh	r6, [r2, #22]
    1b0e:	68e1      	ldr	r1, [r4, #12]
    1b10:	680a      	ldr	r2, [r1, #0]
    1b12:	e7dc      	b.n	1ace <WS2812Serial::show()+0x406>
	if (config < 6) {
		// RGB
		const uint8_t *p = drawBuffer;
		const uint8_t *end = p + (numled * 3);
		uint8_t *fb = frameBuffer;
		while (p < end) {
    1b14:	4615      	mov	r5, r2
				n <<= 2;
				*fb++ = x;
			} while (fb < stop);
		}
		microseconds_per_led = 30;
		bytes_per_led = 12;
    1b16:	260c      	movs	r6, #12
				if (!(n & 0x00400000)) x |= 0xE0;
				n <<= 2;
				*fb++ = x;
			} while (fb < stop);
		}
		microseconds_per_led = 30;
    1b18:	231e      	movs	r3, #30
    1b1a:	e788      	b.n	1a2e <WS2812Serial::show()+0x366>
				n <<= 2;
				*fb++ = x;
			} while (fb < stop);
		}
		microseconds_per_led = 40;
		bytes_per_led = 16;
    1b1c:	2610      	movs	r6, #16
				if (!(n & 0x40000000)) x |= 0xE0;
				n <<= 2;
				*fb++ = x;
			} while (fb < stop);
		}
		microseconds_per_led = 40;
    1b1e:	2328      	movs	r3, #40	; 0x28
    1b20:	e785      	b.n	1a2e <WS2812Serial::show()+0x366>
			uint8_t r = *p++;
			uint32_t mult = brightness + 1;
			b = (b * mult) >> 8;
			g = (g * mult) >> 8;
			r = (r * mult) >> 8;
			uint32_t n=0;
    1b22:	2300      	movs	r3, #0
    1b24:	e651      	b.n	17ca <WS2812Serial::show()+0x102>
			uint32_t mult = brightness + 1;
			b = (b * mult) >> 8;
			g = (g * mult) >> 8;
			r = (r * mult) >> 8;
			w = (w * mult) >> 8;
			uint32_t n=0;
    1b26:	2300      	movs	r3, #0
    1b28:	e6a8      	b.n	187c <WS2812Serial::show()+0x1b4>
    1b2a:	bf00      	nop
    1b2c:	201fffff 	.word	0x201fffff
    1b30:	e000ef68 	.word	0xe000ef68
    1b34:	400e8000 	.word	0x400e8000

00001b38 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>:
	m_nPowerData = 0xFFFFFFFF;
}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
    1b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
    1b3a:	1e1e      	subs	r6, r3, #0
	m_nPowerData = 0xFFFFFFFF;
}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
    1b3c:	4604      	mov	r4, r0
    1b3e:	460f      	mov	r7, r1
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
    1b40:	dd0f      	ble.n	1b62 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x2a>
    1b42:	eb02 0542 	add.w	r5, r2, r2, lsl #1
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
    1b46:	6823      	ldr	r3, [r4, #0]
    1b48:	4620      	mov	r0, r4
    1b4a:	689b      	ldr	r3, [r3, #8]
    1b4c:	4798      	blx	r3
    /// get the next controller in the chain after this one.  will return NULL at the end of the chain
    CLEDController *next() { return m_pNext; }

	/// set the default array of leds to be used by this controller
    CLEDController & setLeds(CRGB *data, int nLeds) {
        m_Data = data;
    1b4e:	197a      	adds	r2, r7, r5
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
    1b50:	6823      	ldr	r3, [r4, #0]
    1b52:	6062      	str	r2, [r4, #4]
    1b54:	4a0c      	ldr	r2, [pc, #48]	; (1b88 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x50>)
    1b56:	695b      	ldr	r3, [r3, #20]
        m_nLeds = nLeds;
    1b58:	6166      	str	r6, [r4, #20]
    1b5a:	4293      	cmp	r3, r2
    1b5c:	d104      	bne.n	1b68 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x30>
	return *pLed;
}
    1b5e:	4620      	mov	r0, r4
    1b60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;
    1b62:	4616      	mov	r6, r2
    1b64:	2500      	movs	r5, #0
    1b66:	e7ee      	b.n	1b46 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0xe>

	pLed->init();
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
    1b68:	4620      	mov	r0, r4
    1b6a:	4798      	blx	r3

void CFastLED::setMaxRefreshRate(uint16_t refresh, bool constrain) {
  if(constrain) {
    // if we're constraining, the new value of m_nMinMicros _must_ be higher than previously (because we're only
    // allowed to slow things down if constraining)
    if(refresh > 0) {
    1b6c:	2800      	cmp	r0, #0
    1b6e:	d0f6      	beq.n	1b5e <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x26>
      m_nMinMicros = ( (1000000/refresh) >  m_nMinMicros) ? (1000000/refresh) : m_nMinMicros;
    1b70:	4b06      	ldr	r3, [pc, #24]	; (1b8c <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x54>)
    1b72:	4a07      	ldr	r2, [pc, #28]	; (1b90 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x58>)
    1b74:	fb93 f0f0 	sdiv	r0, r3, r0
    1b78:	6853      	ldr	r3, [r2, #4]
    1b7a:	4298      	cmp	r0, r3
    1b7c:	bf38      	it	cc
    1b7e:	4618      	movcc	r0, r3
    1b80:	6050      	str	r0, [r2, #4]

	pLed->init();
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
	return *pLed;
}
    1b82:	4620      	mov	r0, r4
    1b84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1b86:	bf00      	nop
    1b88:	00000081 	.word	0x00000081
    1b8c:	000f4240 	.word	0x000f4240
    1b90:	20022d90 	.word	0x20022d90

00001b94 <CFastLED::show(unsigned char)>:

void CFastLED::show(uint8_t scale) {
    1b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1b98:	6843      	ldr	r3, [r0, #4]
    1b9a:	b083      	sub	sp, #12
    1b9c:	4606      	mov	r6, r0
    1b9e:	460f      	mov	r7, r1
    1ba0:	4c35      	ldr	r4, [pc, #212]	; (1c78 <CFastLED::show(unsigned char)+0xe4>)
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    1ba2:	2b00      	cmp	r3, #0
    1ba4:	d15f      	bne.n	1c66 <CFastLED::show(unsigned char)+0xd2>
	lastshow = micros();
    1ba6:	f000 fafb 	bl	21a0 <micros>

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    1baa:	68f3      	ldr	r3, [r6, #12]
}

void CFastLED::show(uint8_t scale) {
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
	lastshow = micros();
    1bac:	6020      	str	r0, [r4, #0]

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    1bae:	b11b      	cbz	r3, 1bb8 <CFastLED::show(unsigned char)+0x24>
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
    1bb0:	4638      	mov	r0, r7
    1bb2:	68b1      	ldr	r1, [r6, #8]
    1bb4:	4798      	blx	r3
    1bb6:	4607      	mov	r7, r0
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    /// get the first led controller in the chain of controllers
    static CLEDController *head() { return m_pHead; }
    1bb8:	4b30      	ldr	r3, [pc, #192]	; (1c7c <CFastLED::show(unsigned char)+0xe8>)
    1bba:	681c      	ldr	r4, [r3, #0]
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    1bbc:	2c00      	cmp	r4, #0
    1bbe:	d037      	beq.n	1c30 <CFastLED::show(unsigned char)+0x9c>

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    1bc0:	2500      	movs	r5, #0
		uint8_t d = pCur->getDither();
		if(m_nFPS < 100) { pCur->setDither(0); }
    1bc2:	8873      	ldrh	r3, [r6, #2]
    1bc4:	f894 8012 	ldrb.w	r8, [r4, #18]
    1bc8:	2b63      	cmp	r3, #99	; 0x63
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    1bca:	6823      	ldr	r3, [r4, #0]
    1bcc:	6861      	ldr	r1, [r4, #4]

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    1bce:	bf98      	it	ls
    1bd0:	74a5      	strbls	r5, [r4, #18]
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
    1bd2:	f88d 5004 	strb.w	r5, [sp, #4]
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    1bd6:	f8d3 9004 	ldr.w	r9, [r3, #4]
    1bda:	f88d 5005 	strb.w	r5, [sp, #5]
    1bde:	f88d 5006 	strb.w	r5, [sp, #6]
    1be2:	6962      	ldr	r2, [r4, #20]
      #if defined(NO_CORRECTION) && (NO_CORRECTION==1)
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
    1be4:	b1e7      	cbz	r7, 1c20 <CFastLED::show(unsigned char)+0x8c>
    1be6:	f104 000b 	add.w	r0, r4, #11
    1bea:	f10d 0e04 	add.w	lr, sp, #4
    1bee:	f104 0c0e 	add.w	ip, r4, #14
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
    1bf2:	f810 af01 	ldrb.w	sl, [r0, #1]!
                      uint8_t ct = colorTemperature.raw[i];
    1bf6:	f890 b003 	ldrb.w	fp, [r0, #3]
                      if(cc > 0 && ct > 0) {
    1bfa:	f1ba 0f00 	cmp.w	sl, #0
    1bfe:	d00b      	beq.n	1c18 <CFastLED::show(unsigned char)+0x84>
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    1c00:	f10b 0301 	add.w	r3, fp, #1

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
                      uint8_t ct = colorTemperature.raw[i];
                      if(cc > 0 && ct > 0) {
    1c04:	f1bb 0f00 	cmp.w	fp, #0
    1c08:	d006      	beq.n	1c18 <CFastLED::show(unsigned char)+0x84>
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    1c0a:	fb0a 3303 	mla	r3, sl, r3, r3
    1c0e:	fb07 f303 	mul.w	r3, r7, r3
                          work /= 0x10000L;
                          adj.raw[i] = work & 0xFF;
    1c12:	0c1b      	lsrs	r3, r3, #16
    1c14:	f88e 3000 	strb.w	r3, [lr]
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
    1c18:	4560      	cmp	r0, ip
    1c1a:	f10e 0e01 	add.w	lr, lr, #1
    1c1e:	d1e8      	bne.n	1bf2 <CFastLED::show(unsigned char)+0x5e>
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    1c20:	4620      	mov	r0, r4
    1c22:	ab01      	add	r3, sp, #4
    1c24:	47c8      	blx	r9

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    1c26:	f884 8012 	strb.w	r8, [r4, #18]
    1c2a:	68a4      	ldr	r4, [r4, #8]
	if(m_pPowerFunc) {
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    1c2c:	2c00      	cmp	r4, #0
    1c2e:	d1c8      	bne.n	1bc2 <CFastLED::show(unsigned char)+0x2e>

void CFastLED::countFPS(int nFrames) {
  static int br = 0;
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
    1c30:	4813      	ldr	r0, [pc, #76]	; (1c80 <CFastLED::show(unsigned char)+0xec>)
    1c32:	6802      	ldr	r2, [r0, #0]
    1c34:	1c51      	adds	r1, r2, #1
    1c36:	2a18      	cmp	r2, #24
    1c38:	6001      	str	r1, [r0, #0]
    1c3a:	dd11      	ble.n	1c60 <CFastLED::show(unsigned char)+0xcc>
    1c3c:	4d11      	ldr	r5, [pc, #68]	; (1c84 <CFastLED::show(unsigned char)+0xf0>)
      uint32_t now = millis();
      now -= lastframe;
      if( now == 0 ) {
          now = 1; // prevent division by zero below
      }
      m_nFPS = (br * 1000) / now;
    1c3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  static int br = 0;
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
      uint32_t now = millis();
      now -= lastframe;
    1c42:	4c11      	ldr	r4, [pc, #68]	; (1c88 <CFastLED::show(unsigned char)+0xf4>)
      if( now == 0 ) {
          now = 1; // prevent division by zero below
      }
      m_nFPS = (br * 1000) / now;
    br = 0;
    1c44:	2700      	movs	r7, #0
    1c46:	682a      	ldr	r2, [r5, #0]
      uint32_t now = millis();
      now -= lastframe;
      if( now == 0 ) {
          now = 1; // prevent division by zero below
      }
      m_nFPS = (br * 1000) / now;
    1c48:	fb03 f101 	mul.w	r1, r3, r1
  static int br = 0;
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
      uint32_t now = millis();
      now -= lastframe;
    1c4c:	6823      	ldr	r3, [r4, #0]
    1c4e:	682d      	ldr	r5, [r5, #0]
      if( now == 0 ) {
          now = 1; // prevent division by zero below
    1c50:	1ad3      	subs	r3, r2, r3
      }
      m_nFPS = (br * 1000) / now;
    br = 0;
    1c52:	6007      	str	r7, [r0, #0]
    lastframe = millis();
    1c54:	6025      	str	r5, [r4, #0]

  if(br++ >= nFrames) {
      uint32_t now = millis();
      now -= lastframe;
      if( now == 0 ) {
          now = 1; // prevent division by zero below
    1c56:	bf08      	it	eq
    1c58:	2301      	moveq	r3, #1
      }
      m_nFPS = (br * 1000) / now;
    1c5a:	fbb1 f3f3 	udiv	r3, r1, r3
    1c5e:	8073      	strh	r3, [r6, #2]
		pCur->showLeds(scale);
		pCur->setDither(d);
		pCur = pCur->next();
	}
	countFPS();
}
    1c60:	b003      	add	sp, #12
    1c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return *pLed;
}

void CFastLED::show(uint8_t scale) {
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    1c66:	f000 fa9b 	bl	21a0 <micros>
    1c6a:	6822      	ldr	r2, [r4, #0]
    1c6c:	6873      	ldr	r3, [r6, #4]
    1c6e:	1a80      	subs	r0, r0, r2
    1c70:	4298      	cmp	r0, r3
    1c72:	d396      	bcc.n	1ba2 <CFastLED::show(unsigned char)+0xe>
    1c74:	e797      	b.n	1ba6 <CFastLED::show(unsigned char)+0x12>
    1c76:	bf00      	nop
    1c78:	20022da8 	.word	0x20022da8
    1c7c:	20022da0 	.word	0x20022da0
    1c80:	20022da4 	.word	0x20022da4
    1c84:	20022dbc 	.word	0x20022dbc
    1c88:	20022dac 	.word	0x20022dac

00001c8c <_GLOBAL__sub_I_pSmartMatrix>:
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    1c8c:	4b04      	ldr	r3, [pc, #16]	; (1ca0 <_GLOBAL__sub_I_pSmartMatrix+0x14>)
	m_nFPS = 0;
    1c8e:	2200      	movs	r2, #0
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    1c90:	20ff      	movs	r0, #255	; 0xff
	m_nFPS = 0;
	m_pPowerFunc = NULL;
	m_nPowerData = 0xFFFFFFFF;
    1c92:	f04f 31ff 	mov.w	r1, #4294967295

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
	m_nFPS = 0;
    1c96:	805a      	strh	r2, [r3, #2]
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    1c98:	7018      	strb	r0, [r3, #0]
	m_nFPS = 0;
	m_pPowerFunc = NULL;
	m_nPowerData = 0xFFFFFFFF;
    1c9a:	6099      	str	r1, [r3, #8]
CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
	m_nFPS = 0;
	m_pPowerFunc = NULL;
    1c9c:	60da      	str	r2, [r3, #12]
    1c9e:	4770      	bx	lr
    1ca0:	20022d90 	.word	0x20022d90

00001ca4 <hsv2rgb_rainbow(CHSV const&, CRGB&)>:
#define K171 171
#define K170 170
#define K85  85

void hsv2rgb_rainbow( const CHSV& hsv, CRGB& rgb)
{
    1ca4:	b4f0      	push	{r4, r5, r6, r7}
    // Gscale: what to scale green down by.
    // Depends GREATLY on your particular LEDs
    const uint8_t Gscale = 0;
    
    
    uint8_t hue = hsv.hue;
    1ca6:	7804      	ldrb	r4, [r0, #0]
    uint8_t sat = hsv.sat;
    1ca8:	7846      	ldrb	r6, [r0, #1]
    1caa:	00e3      	lsls	r3, r4, #3
    uint8_t val = hsv.val;
    1cac:	7882      	ldrb	r2, [r0, #2]
    
    uint8_t third = scale8( offset8, (256 / 3)); // max = 85
    
    uint8_t r, g, b;
    
    if( ! (hue & 0x80) ) {
    1cae:	0625      	lsls	r5, r4, #24
    1cb0:	f003 00f8 	and.w	r0, r3, #248	; 0xf8
    1cb4:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    1cb8:	eb03 1303 	add.w	r3, r3, r3, lsl #4
    1cbc:	4403      	add	r3, r0
    1cbe:	f3c3 2307 	ubfx	r3, r3, #8, #8
    1cc2:	d45f      	bmi.n	1d84 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xe0>
        // 0XX
        if( ! (hue & 0x40) ) {
    1cc4:	f004 0540 	and.w	r5, r4, #64	; 0x40
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
    1cc8:	f004 0420 	and.w	r4, r4, #32
    
    uint8_t r, g, b;
    
    if( ! (hue & 0x80) ) {
        // 0XX
        if( ! (hue & 0x40) ) {
    1ccc:	f005 07ff 	and.w	r7, r5, #255	; 0xff
    1cd0:	2d00      	cmp	r5, #0
    1cd2:	d146      	bne.n	1d62 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xbe>
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
    1cd4:	f004 00ff 	and.w	r0, r4, #255	; 0xff
    1cd8:	2c00      	cmp	r4, #0
    1cda:	d06c      	beq.n	1db6 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x112>
            } else {
                // 001
                //case 1: // O -> Y
                if( Y1 ) {
                    r = K171;
                    g = K85 + third ;
    1cdc:	3355      	adds	r3, #85	; 0x55
    1cde:	b2dd      	uxtb	r5, r3
                FORCE_REFERENCE(b);
            } else {
                // 001
                //case 1: // O -> Y
                if( Y1 ) {
                    r = K171;
    1ce0:	24ab      	movs	r4, #171	; 0xab
                    g = K85 + third ;
                    b = 0;
    1ce2:	463b      	mov	r3, r7
    if( G2 ) g = g >> 1;
    if( Gscale ) g = scale8_video_LEAVING_R1_DIRTY( g, Gscale);
    
    // Scale down colors if we're desaturated at all
    // and add the brightness_floor to r, g, and b.
    if( sat != 255 ) {
    1ce4:	2eff      	cmp	r6, #255	; 0xff
    1ce6:	d01c      	beq.n	1d22 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x7e>
        if( sat == 0) {
    1ce8:	2e00      	cmp	r6, #0
    1cea:	d079      	beq.n	1de0 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x13c>
            r = 255; b = 255; g = 255;
        } else {
            //nscale8x3_video( r, g, b, sat);
#if (FASTLED_SCALE8_FIXED==1)
            if( r ) r = scale8_LEAVING_R1_DIRTY( r, sat);
    1cec:	b11c      	cbz	r4, 1cf6 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x52>
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    1cee:	fb06 4404 	mla	r4, r6, r4, r4
    1cf2:	f3c4 2407 	ubfx	r4, r4, #8, #8
            if( g ) g = scale8_LEAVING_R1_DIRTY( g, sat);
    1cf6:	b11d      	cbz	r5, 1d00 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x5c>
    1cf8:	fb06 5505 	mla	r5, r6, r5, r5
    1cfc:	f3c5 2507 	ubfx	r5, r5, #8, #8
            if( b ) b = scale8_LEAVING_R1_DIRTY( b, sat);
    1d00:	b11b      	cbz	r3, 1d0a <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x66>
    1d02:	fb06 3303 	mla	r3, r6, r3, r3
    1d06:	f3c3 2307 	ubfx	r3, r3, #8, #8
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    1d0a:	43f0      	mvns	r0, r6
    1d0c:	b2c0      	uxtb	r0, r0
    1d0e:	fb00 0000 	mla	r0, r0, r0, r0
    1d12:	f3c0 2007 	ubfx	r0, r0, #8, #8
            
            uint8_t desat = 255 - sat;
            desat = scale8( desat, desat);
            
            uint8_t brightness_floor = desat;
            r += brightness_floor;
    1d16:	4404      	add	r4, r0
            g += brightness_floor;
    1d18:	4405      	add	r5, r0
            b += brightness_floor;
    1d1a:	4403      	add	r3, r0
            
            uint8_t desat = 255 - sat;
            desat = scale8( desat, desat);
            
            uint8_t brightness_floor = desat;
            r += brightness_floor;
    1d1c:	b2e4      	uxtb	r4, r4
            g += brightness_floor;
    1d1e:	b2ed      	uxtb	r5, r5
            b += brightness_floor;
    1d20:	b2db      	uxtb	r3, r3
        }
    }
    
    // Now scale everything down if we're at value < 255.
    if( val != 255 ) {
    1d22:	2aff      	cmp	r2, #255	; 0xff
    1d24:	d018      	beq.n	1d58 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xb4>
/// If you are doing several 'scale8_video's in a row, use this, and
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_video_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1 || defined(LIB8_ATTINY)
    uint8_t j = (((int)i * (int)scale) >> 8) + ((i&&scale)?1:0);
    1d26:	fb12 f002 	smulbb	r0, r2, r2
    1d2a:	3200      	adds	r2, #0
    1d2c:	bf18      	it	ne
    1d2e:	2201      	movne	r2, #1
    1d30:	eb02 2210 	add.w	r2, r2, r0, lsr #8
        
        val = scale8_video_LEAVING_R1_DIRTY( val, val);
        if( val == 0 ) {
    1d34:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    1d38:	d056      	beq.n	1de8 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x144>
            r=0; g=0; b=0;
        } else {
            // nscale8x3_video( r, g, b, val);
#if (FASTLED_SCALE8_FIXED==1)
            if( r ) r = scale8_LEAVING_R1_DIRTY( r, val);
    1d3a:	b11c      	cbz	r4, 1d44 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xa0>
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    1d3c:	fb02 4404 	mla	r4, r2, r4, r4
    1d40:	f3c4 2407 	ubfx	r4, r4, #8, #8
            if( g ) g = scale8_LEAVING_R1_DIRTY( g, val);
    1d44:	b11d      	cbz	r5, 1d4e <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xaa>
    1d46:	fb02 5505 	mla	r5, r2, r5, r5
    1d4a:	f3c5 2507 	ubfx	r5, r5, #8, #8
            if( b ) b = scale8_LEAVING_R1_DIRTY( b, val);
    1d4e:	b11b      	cbz	r3, 1d58 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xb4>
    1d50:	fb02 3303 	mla	r3, r2, r3, r3
    1d54:	f3c3 2307 	ubfx	r3, r3, #8, #8
    // It turns out that fixing it winds up costing more than
    // not fixing it.
    // To paraphrase Dr Bronner, profile! profile! profile!
    //asm volatile(  ""  :  :  : "r26", "r27" );
    //asm volatile (" movw r30, r26 \n" : : : "r30", "r31");
    rgb.r = r;
    1d58:	700c      	strb	r4, [r1, #0]
    rgb.g = g;
    1d5a:	704d      	strb	r5, [r1, #1]
    rgb.b = b;
    1d5c:	708b      	strb	r3, [r1, #2]
}
    1d5e:	bcf0      	pop	{r4, r5, r6, r7}
    1d60:	4770      	bx	lr
                }
            }
        } else {
            //01X
            // section 2-3
            if( !  (hue & 0x20) ) {
    1d62:	f004 07ff 	and.w	r7, r4, #255	; 0xff
    1d66:	bb5c      	cbnz	r4, 1dc0 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x11c>
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    1d68:	eb00 04c0 	add.w	r4, r0, r0, lsl #3
                    g = K170 + third;
    1d6c:	3b56      	subs	r3, #86	; 0x56
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    1d6e:	eb00 0044 	add.w	r0, r0, r4, lsl #1
                    g = K170 + third;
    1d72:	b2dd      	uxtb	r5, r3
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    1d74:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    1d78:	1204      	asrs	r4, r0, #8
    1d7a:	f1c4 04ab 	rsb	r4, r4, #171	; 0xab
    1d7e:	b2e4      	uxtb	r4, r4
                    g = K170 + third;
                    b = 0;
    1d80:	463b      	mov	r3, r7
    1d82:	e7af      	b.n	1ce4 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
            }
        }
    } else {
        // section 4-7
        // 1XX
        if( ! (hue & 0x40) ) {
    1d84:	f004 0740 	and.w	r7, r4, #64	; 0x40
    1d88:	f007 05ff 	and.w	r5, r7, #255	; 0xff
    1d8c:	b9e7      	cbnz	r7, 1dc8 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x124>
            // 10X
            if( ! ( hue & 0x20) ) {
    1d8e:	f004 0720 	and.w	r7, r4, #32
    1d92:	f007 04ff 	and.w	r4, r7, #255	; 0xff
    1d96:	2f00      	cmp	r7, #0
    1d98:	d136      	bne.n	1e08 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x164>
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    1d9a:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
    1d9e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
    1da2:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    1da6:	f3c0 2007 	ubfx	r0, r0, #8, #8
                //case 4: // A -> B
                r = 0;
                FORCE_REFERENCE(r);
                //uint8_t twothirds = (third << 1);
                uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                g = K171 - twothirds; //K170?
    1daa:	f1c0 05ab 	rsb	r5, r0, #171	; 0xab
                b = K85  + twothirds;
    1dae:	3055      	adds	r0, #85	; 0x55
                //case 4: // A -> B
                r = 0;
                FORCE_REFERENCE(r);
                //uint8_t twothirds = (third << 1);
                uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                g = K171 - twothirds; //K170?
    1db0:	b2ed      	uxtb	r5, r5
                b = K85  + twothirds;
    1db2:	b2c3      	uxtb	r3, r0
    1db4:	e796      	b.n	1ce4 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
                // 000
                //case 0: // R -> O
                r = K255 - third;
    1db6:	43dc      	mvns	r4, r3
    1db8:	b2e4      	uxtb	r4, r4
                g = third;
    1dba:	461d      	mov	r5, r3
                b = 0;
    1dbc:	4603      	mov	r3, r0
    1dbe:	e791      	b.n	1ce4 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
                }
            } else {
                // 011
                // case 3: // G -> A
                r = 0;
                FORCE_REFERENCE(r);
    1dc0:	2400      	movs	r4, #0
                g = K255 - third;
    1dc2:	43dd      	mvns	r5, r3
    1dc4:	b2ed      	uxtb	r5, r5
    1dc6:	e78d      	b.n	1ce4 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
                FORCE_REFERENCE(g);
                b = K255 - third;
                
            }
        } else {
            if( !  (hue & 0x20)  ) {
    1dc8:	f004 0420 	and.w	r4, r4, #32
    1dcc:	f004 05ff 	and.w	r5, r4, #255	; 0xff
    1dd0:	b994      	cbnz	r4, 1df8 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x154>
                // 110
                //case 6: // P -- K
                r = K85 + third;
    1dd2:	f103 0455 	add.w	r4, r3, #85	; 0x55
    1dd6:	b2e4      	uxtb	r4, r4
                g = 0;
                FORCE_REFERENCE(g);
                b = K171 - third;
    1dd8:	f1c3 03ab 	rsb	r3, r3, #171	; 0xab
    1ddc:	b2db      	uxtb	r3, r3
    1dde:	e781      	b.n	1ce4 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
    
    // Scale down colors if we're desaturated at all
    // and add the brightness_floor to r, g, and b.
    if( sat != 255 ) {
        if( sat == 0) {
            r = 255; b = 255; g = 255;
    1de0:	23ff      	movs	r3, #255	; 0xff
    1de2:	461d      	mov	r5, r3
    1de4:	461c      	mov	r4, r3
    1de6:	e79c      	b.n	1d22 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x7e>
    // Now scale everything down if we're at value < 255.
    if( val != 255 ) {
        
        val = scale8_video_LEAVING_R1_DIRTY( val, val);
        if( val == 0 ) {
            r=0; g=0; b=0;
    1de8:	4615      	mov	r5, r2
    1dea:	4614      	mov	r4, r2
    1dec:	4613      	mov	r3, r2
    // It turns out that fixing it winds up costing more than
    // not fixing it.
    // To paraphrase Dr Bronner, profile! profile! profile!
    //asm volatile(  ""  :  :  : "r26", "r27" );
    //asm volatile (" movw r30, r26 \n" : : : "r30", "r31");
    rgb.r = r;
    1dee:	700c      	strb	r4, [r1, #0]
    rgb.g = g;
    1df0:	704d      	strb	r5, [r1, #1]
    rgb.b = b;
    1df2:	708b      	strb	r3, [r1, #2]
}
    1df4:	bcf0      	pop	{r4, r5, r6, r7}
    1df6:	4770      	bx	lr
                b = K171 - third;
                
            } else {
                // 111
                //case 7: // K -> R
                r = K170 + third;
    1df8:	f1a3 0456 	sub.w	r4, r3, #86	; 0x56
                g = 0;
                FORCE_REFERENCE(g);
    1dfc:	2500      	movs	r5, #0
                b = K171 - third;
                
            } else {
                // 111
                //case 7: // K -> R
                r = K170 + third;
    1dfe:	b2e4      	uxtb	r4, r4
                g = 0;
                FORCE_REFERENCE(g);
                b = K85 - third;
    1e00:	f1c3 0355 	rsb	r3, r3, #85	; 0x55
    1e04:	b2db      	uxtb	r3, r3
    1e06:	e76d      	b.n	1ce4 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
                // 101
                //case 5: // B -> P
                r = third;
                g = 0;
                FORCE_REFERENCE(g);
                b = K255 - third;
    1e08:	43d8      	mvns	r0, r3
                b = K85  + twothirds;
                
            } else {
                // 101
                //case 5: // B -> P
                r = third;
    1e0a:	461c      	mov	r4, r3
                g = 0;
                FORCE_REFERENCE(g);
                b = K255 - third;
    1e0c:	b2c3      	uxtb	r3, r0
    1e0e:	e769      	b.n	1ce4 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>

00001e10 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    1e10:	4a96      	ldr	r2, [pc, #600]	; (206c <set_arm_clock+0x25c>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    1e12:	4b97      	ldr	r3, [pc, #604]	; (2070 <set_arm_clock+0x260>)
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    1e14:	4290      	cmp	r0, r2
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
    1e16:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;
    1e1a:	4c96      	ldr	r4, [pc, #600]	; (2074 <set_arm_clock+0x264>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    1e1c:	f8d3 e014 	ldr.w	lr, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    1e20:	6999      	ldr	r1, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    1e22:	68e6      	ldr	r6, [r4, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    1e24:	d91c      	bls.n	1e60 <set_arm_clock+0x50>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    1e26:	4b94      	ldr	r3, [pc, #592]	; (2078 <set_arm_clock+0x268>)
    1e28:	4298      	cmp	r0, r3
    1e2a:	f240 8115 	bls.w	2058 <set_arm_clock+0x248>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    1e2e:	4b93      	ldr	r3, [pc, #588]	; (207c <set_arm_clock+0x26c>)
    1e30:	f240 6527 	movw	r5, #1575	; 0x627
    1e34:	4f92      	ldr	r7, [pc, #584]	; (2080 <set_arm_clock+0x270>)
    1e36:	4403      	add	r3, r0
    1e38:	4c92      	ldr	r4, [pc, #584]	; (2084 <set_arm_clock+0x274>)
    1e3a:	0a1a      	lsrs	r2, r3, #8
    1e3c:	fba7 3202 	umull	r3, r2, r7, r2
    1e40:	09d3      	lsrs	r3, r2, #7
    1e42:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    1e46:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    1e4a:	f202 43e2 	addw	r3, r2, #1250	; 0x4e2
    1e4e:	42ab      	cmp	r3, r5
    1e50:	bf28      	it	cs
    1e52:	462b      	movcs	r3, r5
    1e54:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
    1e58:	fba4 3503 	umull	r3, r5, r4, r3
    1e5c:	08ed      	lsrs	r5, r5, #3
    1e5e:	e004      	b.n	1e6a <set_arm_clock+0x5a>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24000000) {
    1e60:	4d89      	ldr	r5, [pc, #548]	; (2088 <set_arm_clock+0x278>)
    1e62:	42a8      	cmp	r0, r5
    1e64:	bf94      	ite	ls
    1e66:	2506      	movls	r5, #6
    1e68:	250e      	movhi	r5, #14
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    1e6a:	4a81      	ldr	r2, [pc, #516]	; (2070 <set_arm_clock+0x260>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    1e6c:	f006 071f 	and.w	r7, r6, #31
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    1e70:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    1e74:	42af      	cmp	r7, r5
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    1e76:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    1e7a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    1e7e:	d20a      	bcs.n	1e96 <set_arm_clock+0x86>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    1e80:	4b7c      	ldr	r3, [pc, #496]	; (2074 <set_arm_clock+0x264>)

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    1e82:	f026 061f 	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    1e86:	461a      	mov	r2, r3
	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    1e88:	432e      	orrs	r6, r5
		DCDC_REG3 = dcdc;
    1e8a:	60de      	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    1e8c:	6813      	ldr	r3, [r2, #0]
    1e8e:	2b00      	cmp	r3, #0
    1e90:	dafc      	bge.n	1e8c <set_arm_clock+0x7c>
    1e92:	f006 071f 	and.w	r7, r6, #31
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    1e96:	f01e 7300 	ands.w	r3, lr, #33554432	; 0x2000000
    1e9a:	d131      	bne.n	1f00 <set_arm_clock+0xf0>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    1e9c:	4c7b      	ldr	r4, [pc, #492]	; (208c <set_arm_clock+0x27c>)
    1e9e:	4a7c      	ldr	r2, [pc, #496]	; (2090 <set_arm_clock+0x280>)
    1ea0:	f8d4 c010 	ldr.w	ip, [r4, #16]
    1ea4:	4614      	mov	r4, r2
    1ea6:	ea0c 0202 	and.w	r2, ip, r2
    1eaa:	42a2      	cmp	r2, r4
    1eac:	bf0a      	itet	eq
    1eae:	f04f 53c0 	moveq.w	r3, #402653184	; 0x18000000
    1eb2:	f44f 5280 	movne.w	r2, #4096	; 0x1000
    1eb6:	2200      	moveq	r2, #0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    1eb8:	ea8e 0403 	eor.w	r4, lr, r3
    1ebc:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    1ec0:	d008      	beq.n	1ed4 <set_arm_clock+0xc4>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    1ec2:	f02e 5e60 	bic.w	lr, lr, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    1ec6:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
			CCM_CBCDR = cbcdr;
    1eca:	4c69      	ldr	r4, [pc, #420]	; (2070 <set_arm_clock+0x260>)
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    1ecc:	ea43 0e0e 	orr.w	lr, r3, lr
			CCM_CBCDR = cbcdr;
    1ed0:	f8c4 e014 	str.w	lr, [r4, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    1ed4:	ea81 0302 	eor.w	r3, r1, r2
    1ed8:	f413 5f40 	tst.w	r3, #12288	; 0x3000
    1edc:	d008      	beq.n	1ef0 <set_arm_clock+0xe0>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    1ede:	4b64      	ldr	r3, [pc, #400]	; (2070 <set_arm_clock+0x260>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    1ee0:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    1ee4:	4311      	orrs	r1, r2
			CCM_CBCMR = cbcmr;
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    1ee6:	461a      	mov	r2, r3
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    1ee8:	6199      	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    1eea:	6c93      	ldr	r3, [r2, #72]	; 0x48
    1eec:	071c      	lsls	r4, r3, #28
    1eee:	d4fc      	bmi.n	1eea <set_arm_clock+0xda>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    1ef0:	f04e 7e00 	orr.w	lr, lr, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    1ef4:	4a5e      	ldr	r2, [pc, #376]	; (2070 <set_arm_clock+0x260>)
    1ef6:	f8c2 e014 	str.w	lr, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    1efa:	6c93      	ldr	r3, [r2, #72]	; 0x48
    1efc:	0699      	lsls	r1, r3, #26
    1efe:	d4fc      	bmi.n	1efa <set_arm_clock+0xea>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
    1f00:	2101      	movs	r1, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    1f02:	4c64      	ldr	r4, [pc, #400]	; (2094 <set_arm_clock+0x284>)
	}

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
    1f04:	460a      	mov	r2, r1
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    1f06:	fb01 f302 	mul.w	r3, r1, r2
    1f0a:	fb00 f303 	mul.w	r3, r0, r3
    1f0e:	42a3      	cmp	r3, r4
    1f10:	d809      	bhi.n	1f26 <set_arm_clock+0x116>
		if (div_arm < 8) {
    1f12:	2a07      	cmp	r2, #7
    1f14:	f200 8095 	bhi.w	2042 <set_arm_clock+0x232>
			div_arm = div_arm + 1;
    1f18:	3201      	adds	r2, #1
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    1f1a:	fb01 f302 	mul.w	r3, r1, r2
    1f1e:	fb00 f303 	mul.w	r3, r0, r3
    1f22:	42a3      	cmp	r3, r4
    1f24:	d9f5      	bls.n	1f12 <set_arm_clock+0x102>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    1f26:	485c      	ldr	r0, [pc, #368]	; (2098 <set_arm_clock+0x288>)
    1f28:	4c5c      	ldr	r4, [pc, #368]	; (209c <set_arm_clock+0x28c>)
    1f2a:	4418      	add	r0, r3
    1f2c:	fba4 0300 	umull	r0, r3, r4, r0
    1f30:	0d1b      	lsrs	r3, r3, #20
	if (mult > 108) mult = 108;
    1f32:	2b6c      	cmp	r3, #108	; 0x6c
    1f34:	f200 808b 	bhi.w	204e <set_arm_clock+0x23e>
	if (mult < 54) mult = 54;
    1f38:	2b35      	cmp	r3, #53	; 0x35
    1f3a:	f200 808f 	bhi.w	205c <set_arm_clock+0x24c>
    1f3e:	f8df 8188 	ldr.w	r8, [pc, #392]	; 20c8 <set_arm_clock+0x2b8>
    1f42:	2336      	movs	r3, #54	; 0x36
    1f44:	4856      	ldr	r0, [pc, #344]	; (20a0 <set_arm_clock+0x290>)

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    1f46:	f8df c144 	ldr.w	ip, [pc, #324]	; 208c <set_arm_clock+0x27c>
    1f4a:	4c56      	ldr	r4, [pc, #344]	; (20a4 <set_arm_clock+0x294>)
    1f4c:	f8dc 9000 	ldr.w	r9, [ip]
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    1f50:	fbb0 f0f2 	udiv	r0, r0, r2

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    1f54:	ea09 0404 	and.w	r4, r9, r4
    1f58:	4544      	cmp	r4, r8
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    1f5a:	fbb0 f0f1 	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    1f5e:	d00b      	beq.n	1f78 <set_arm_clock+0x168>
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    1f60:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    1f64:	f44f 5880 	mov.w	r8, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    1f68:	4664      	mov	r4, ip
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    1f6a:	f8cc 8000 	str.w	r8, [ip]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    1f6e:	f8cc 3000 	str.w	r3, [ip]
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    1f72:	6823      	ldr	r3, [r4, #0]
    1f74:	2b00      	cmp	r3, #0
    1f76:	dafc      	bge.n	1f72 <set_arm_clock+0x162>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    1f78:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 2070 <set_arm_clock+0x260>
    1f7c:	3a01      	subs	r2, #1
    1f7e:	f8dc 3010 	ldr.w	r3, [ip, #16]
    1f82:	f003 0307 	and.w	r3, r3, #7
    1f86:	4293      	cmp	r3, r2
    1f88:	d007      	beq.n	1f9a <set_arm_clock+0x18a>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    1f8a:	f002 0207 	and.w	r2, r2, #7
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    1f8e:	4664      	mov	r4, ip
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    1f90:	f8cc 2010 	str.w	r2, [ip, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    1f94:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    1f96:	03db      	lsls	r3, r3, #15
    1f98:	d4fc      	bmi.n	1f94 <set_arm_clock+0x184>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    1f9a:	3901      	subs	r1, #1
    1f9c:	0289      	lsls	r1, r1, #10
    1f9e:	ea8e 0301 	eor.w	r3, lr, r1
    1fa2:	f413 5fe0 	tst.w	r3, #7168	; 0x1c00
    1fa6:	d00c      	beq.n	1fc2 <set_arm_clock+0x1b2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
		CCM_CBCDR = cbcdr;
    1fa8:	4b31      	ldr	r3, [pc, #196]	; (2070 <set_arm_clock+0x260>)
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    1faa:	f42e 5ee0 	bic.w	lr, lr, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    1fae:	f401 51e0 	and.w	r1, r1, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    1fb2:	461a      	mov	r2, r3
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    1fb4:	ea41 0e0e 	orr.w	lr, r1, lr
		CCM_CBCDR = cbcdr;
    1fb8:	f8c3 e014 	str.w	lr, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    1fbc:	6c93      	ldr	r3, [r2, #72]	; 0x48
    1fbe:	0799      	lsls	r1, r3, #30
    1fc0:	d4fc      	bmi.n	1fbc <set_arm_clock+0x1ac>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    1fc2:	4b39      	ldr	r3, [pc, #228]	; (20a8 <set_arm_clock+0x298>)
    1fc4:	4939      	ldr	r1, [pc, #228]	; (20ac <set_arm_clock+0x29c>)
    1fc6:	4403      	add	r3, r0
    1fc8:	09db      	lsrs	r3, r3, #7
    1fca:	fba1 3103 	umull	r3, r1, r1, r3
    1fce:	0b09      	lsrs	r1, r1, #12
    1fd0:	2904      	cmp	r1, #4
    1fd2:	bf28      	it	cs
    1fd4:	2104      	movcs	r1, #4
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    1fd6:	1e4b      	subs	r3, r1, #1
    1fd8:	021b      	lsls	r3, r3, #8
    1fda:	ea8e 0203 	eor.w	r2, lr, r3
    1fde:	f412 7f40 	tst.w	r2, #768	; 0x300
    1fe2:	d007      	beq.n	1ff4 <set_arm_clock+0x1e4>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    1fe4:	f42e 7e40 	bic.w	lr, lr, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    1fe8:	f403 7340 	and.w	r3, r3, #768	; 0x300
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    1fec:	4a20      	ldr	r2, [pc, #128]	; (2070 <set_arm_clock+0x260>)

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    1fee:	ea43 030e 	orr.w	r3, r3, lr
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    1ff2:	6153      	str	r3, [r2, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    1ff4:	4b1e      	ldr	r3, [pc, #120]	; (2070 <set_arm_clock+0x260>)
    1ff6:	695c      	ldr	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    1ff8:	461a      	mov	r2, r3
		CCM_CBCDR = cbcdr;
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    1ffa:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
    1ffe:	615c      	str	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    2000:	6c93      	ldr	r3, [r2, #72]	; 0x48
    2002:	069b      	lsls	r3, r3, #26
    2004:	d4fc      	bmi.n	2000 <set_arm_clock+0x1f0>

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2006:	4b2a      	ldr	r3, [pc, #168]	; (20b0 <set_arm_clock+0x2a0>)
    2008:	f04f 32ff 	mov.w	r2, #4294967295
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    200c:	4c29      	ldr	r4, [pc, #164]	; (20b4 <set_arm_clock+0x2a4>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    200e:	42bd      	cmp	r5, r7
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2010:	fba3 e300 	umull	lr, r3, r3, r0
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    2014:	6020      	str	r0, [r4, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2016:	ea4f 4393 	mov.w	r3, r3, lsr #18
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    201a:	4c27      	ldr	r4, [pc, #156]	; (20b8 <set_arm_clock+0x2a8>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    201c:	fbb2 f3f3 	udiv	r3, r2, r3
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    2020:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2024:	4a25      	ldr	r2, [pc, #148]	; (20bc <set_arm_clock+0x2ac>)
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    2026:	6021      	str	r1, [r4, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2028:	6013      	str	r3, [r2, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    202a:	d208      	bcs.n	203e <set_arm_clock+0x22e>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    202c:	4b11      	ldr	r3, [pc, #68]	; (2074 <set_arm_clock+0x264>)
	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    202e:	f026 061f 	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    2032:	461a      	mov	r2, r3

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    2034:	432e      	orrs	r6, r5
		DCDC_REG3 = dcdc;
    2036:	60de      	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    2038:	6813      	ldr	r3, [r2, #0]
    203a:	2b00      	cmp	r3, #0
    203c:	dafc      	bge.n	2038 <set_arm_clock+0x228>
	}

	return frequency;
}
    203e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
    2042:	2904      	cmp	r1, #4
    2044:	f63f af6f 	bhi.w	1f26 <set_arm_clock+0x116>
				div_ahb = div_ahb + 1;
    2048:	3101      	adds	r1, #1
				div_arm = 1;
    204a:	2201      	movs	r2, #1
    204c:	e75b      	b.n	1f06 <set_arm_clock+0xf6>
    204e:	f8df 807c 	ldr.w	r8, [pc, #124]	; 20cc <set_arm_clock+0x2bc>
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
    2052:	236c      	movs	r3, #108	; 0x6c
    2054:	481a      	ldr	r0, [pc, #104]	; (20c0 <set_arm_clock+0x2b0>)
    2056:	e776      	b.n	1f46 <set_arm_clock+0x136>
    2058:	2512      	movs	r5, #18
    205a:	e706      	b.n	1e6a <set_arm_clock+0x5a>
    205c:	4819      	ldr	r0, [pc, #100]	; (20c4 <set_arm_clock+0x2b4>)
    205e:	f8df 8070 	ldr.w	r8, [pc, #112]	; 20d0 <set_arm_clock+0x2c0>
    2062:	fb00 f003 	mul.w	r0, r0, r3
    2066:	ea43 0808 	orr.w	r8, r3, r8
    206a:	e76c      	b.n	1f46 <set_arm_clock+0x136>
    206c:	1f78a400 	.word	0x1f78a400
    2070:	400fc000 	.word	0x400fc000
    2074:	40080000 	.word	0x40080000
    2078:	23c34600 	.word	0x23c34600
    207c:	dc3cba00 	.word	0xdc3cba00
    2080:	004cb223 	.word	0x004cb223
    2084:	51eb851f 	.word	0x51eb851f
    2088:	016e3600 	.word	0x016e3600
    208c:	400d8000 	.word	0x400d8000
    2090:	80003040 	.word	0x80003040
    2094:	269fb1ff 	.word	0x269fb1ff
    2098:	005b8d80 	.word	0x005b8d80
    209c:	165e9f81 	.word	0x165e9f81
    20a0:	269fb200 	.word	0x269fb200
    20a4:	8001307f 	.word	0x8001307f
    20a8:	08f0d17f 	.word	0x08f0d17f
    20ac:	00e5109f 	.word	0x00e5109f
    20b0:	431bde83 	.word	0x431bde83
    20b4:	20012268 	.word	0x20012268
    20b8:	20012264 	.word	0x20012264
    20bc:	20022db8 	.word	0x20022db8
    20c0:	4d3f6400 	.word	0x4d3f6400
    20c4:	00b71b00 	.word	0x00b71b00
    20c8:	80002036 	.word	0x80002036
    20cc:	8000206c 	.word	0x8000206c
    20d0:	80002000 	.word	0x80002000

000020d4 <delay>:

void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    20d4:	2800      	cmp	r0, #0
    20d6:	d057      	beq.n	2188 <delay+0xb4>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    20d8:	2201      	movs	r2, #1
{

}*/

void delay(uint32_t msec)
{
    20da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    20de:	b085      	sub	sp, #20
    20e0:	4683      	mov	fp, r0
    20e2:	4c2a      	ldr	r4, [pc, #168]	; (218c <delay+0xb8>)
    20e4:	4d2a      	ldr	r5, [pc, #168]	; (2190 <delay+0xbc>)
    20e6:	4e2b      	ldr	r6, [pc, #172]	; (2194 <delay+0xc0>)
    20e8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    20ec:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    20f0:	6828      	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    20f2:	6833      	ldr	r3, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    20f4:	e844 2100 	strex	r1, r2, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    20f8:	2900      	cmp	r1, #0
    20fa:	d1f7      	bne.n	20ec <delay+0x18>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    20fc:	4f26      	ldr	r7, [pc, #152]	; (2198 <delay+0xc4>)
    20fe:	e9cd 8902 	strd	r8, r9, [sp, #8]
    2102:	683a      	ldr	r2, [r7, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    2104:	1ad3      	subs	r3, r2, r3
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    2106:	4a25      	ldr	r2, [pc, #148]	; (219c <delay+0xc8>)
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    2108:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    210c:	9701      	str	r7, [sp, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    210e:	6812      	ldr	r2, [r2, #0]
    2110:	2701      	movs	r7, #1
    2112:	fba3 2302 	umull	r2, r3, r3, r2
	if (frac > 1000) frac = 1000;
    2116:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    211a:	4698      	mov	r8, r3
	if (frac > 1000) frac = 1000;
    211c:	2300      	movs	r3, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    211e:	428b      	cmp	r3, r1
    2120:	bf08      	it	eq
    2122:	4542      	cmpeq	r2, r8
    2124:	bf2c      	ite	cs
    2126:	46c2      	movcs	sl, r8
    2128:	46f2      	movcc	sl, lr
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    212a:	fb0e aa00 	mla	sl, lr, r0, sl
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    212e:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    2132:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    2134:	6831      	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    2136:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    213a:	2b00      	cmp	r3, #0
    213c:	d1f7      	bne.n	212e <delay+0x5a>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    213e:	9801      	ldr	r0, [sp, #4]
    2140:	6800      	ldr	r0, [r0, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    2142:	1a41      	subs	r1, r0, r1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    2144:	4815      	ldr	r0, [pc, #84]	; (219c <delay+0xc8>)
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    2146:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    214a:	6800      	ldr	r0, [r0, #0]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    214c:	fb0e f202 	mul.w	r2, lr, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    2150:	fba1 0100 	umull	r0, r1, r1, r0
	if (frac > 1000) frac = 1000;
    2154:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    2158:	ebca 0202 	rsb	r2, sl, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    215c:	4688      	mov	r8, r1
	if (frac > 1000) frac = 1000;
    215e:	2100      	movs	r1, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    2160:	4299      	cmp	r1, r3
    2162:	bf08      	it	eq
    2164:	4540      	cmpeq	r0, r8
    2166:	bf2c      	ite	cs
    2168:	4643      	movcs	r3, r8
    216a:	4673      	movcc	r3, lr
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    216c:	441a      	add	r2, r3
    216e:	4572      	cmp	r2, lr
    2170:	d307      	bcc.n	2182 <delay+0xae>
			if (--msec == 0) return;
    2172:	f1bb 0b01 	subs.w	fp, fp, #1
			start += 1000;
    2176:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
    217a:	d1d8      	bne.n	212e <delay+0x5a>
			start += 1000;
		}
		yield();
	}
	// TODO...
}
    217c:	b005      	add	sp, #20
    217e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
			start += 1000;
		}
		yield();
    2182:	f001 fb99 	bl	38b8 <yield>
	}
    2186:	e7d2      	b.n	212e <delay+0x5a>
    2188:	4770      	bx	lr
    218a:	bf00      	nop
    218c:	2002304c 	.word	0x2002304c
    2190:	20022dbc 	.word	0x20022dbc
    2194:	20022db4 	.word	0x20022db4
    2198:	e0001004 	.word	0xe0001004
    219c:	20022db8 	.word	0x20022db8

000021a0 <micros>:
	// TODO...
}

uint32_t micros(void)
{
    21a0:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
    21a4:	4a12      	ldr	r2, [pc, #72]	; (21f0 <micros+0x50>)
    21a6:	2601      	movs	r6, #1
    21a8:	4d12      	ldr	r5, [pc, #72]	; (21f4 <micros+0x54>)
    21aa:	4c13      	ldr	r4, [pc, #76]	; (21f8 <micros+0x58>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    21ac:	e852 3f00 	ldrex	r3, [r2]
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    21b0:	6829      	ldr	r1, [r5, #0]
		scc = systick_cycle_count;
    21b2:	6820      	ldr	r0, [r4, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    21b4:	e842 6300 	strex	r3, r6, [r2]
	} while ( __STREXW(1, &systick_safe_read));
    21b8:	2b00      	cmp	r3, #0
    21ba:	d1f7      	bne.n	21ac <micros+0xc>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    21bc:	4a0f      	ldr	r2, [pc, #60]	; (21fc <micros+0x5c>)
    21be:	6816      	ldr	r6, [r2, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    21c0:	4f0f      	ldr	r7, [pc, #60]	; (2200 <micros+0x60>)
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    21c2:	1a32      	subs	r2, r6, r0
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
    21c4:	f04f 0900 	mov.w	r9, #0
    21c8:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    21cc:	683e      	ldr	r6, [r7, #0]
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
	return usec;
    21ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    21d2:	4599      	cmp	r9, r3
    21d4:	fba2 6706 	umull	r6, r7, r2, r6
    21d8:	bf08      	it	eq
    21da:	45b8      	cmpeq	r8, r7
    21dc:	463c      	mov	r4, r7
    21de:	bf2c      	ite	cs
    21e0:	463c      	movcs	r4, r7
    21e2:	4604      	movcc	r4, r0
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
	return usec;
}
    21e4:	fb00 4001 	mla	r0, r0, r1, r4
    21e8:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
    21ec:	4770      	bx	lr
    21ee:	bf00      	nop
    21f0:	2002304c 	.word	0x2002304c
    21f4:	20022dbc 	.word	0x20022dbc
    21f8:	20022db4 	.word	0x20022db4
    21fc:	e0001004 	.word	0xe0001004
    2200:	20022db8 	.word	0x20022db8

00002204 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    2204:	2827      	cmp	r0, #39	; 0x27
    2206:	d81c      	bhi.n	2242 <pinMode+0x3e>
	p = digital_pin_to_info_PGM + pin;
    2208:	0100      	lsls	r0, r0, #4
    220a:	4a1a      	ldr	r2, [pc, #104]	; (2274 <pinMode+0x70>)
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    220c:	2901      	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    220e:	eb02 0300 	add.w	r3, r2, r0
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    2212:	5810      	ldr	r0, [r2, r0]
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}

void pinMode(uint8_t pin, uint8_t mode)
{
    2214:	b410      	push	{r4}
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    2216:	d015      	beq.n	2244 <pinMode+0x40>
    2218:	2904      	cmp	r1, #4
    221a:	d013      	beq.n	2244 <pinMode+0x40>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    221c:	68dc      	ldr	r4, [r3, #12]
    221e:	6842      	ldr	r2, [r0, #4]
    2220:	ea22 0204 	bic.w	r2, r2, r4
    2224:	6042      	str	r2, [r0, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    2226:	689a      	ldr	r2, [r3, #8]
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
    2228:	b1e9      	cbz	r1, 2266 <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
    222a:	2902      	cmp	r1, #2
    222c:	d01e      	beq.n	226c <pinMode+0x68>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    222e:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    2230:	685b      	ldr	r3, [r3, #4]
}
    2232:	f85d 4b04 	ldr.w	r4, [sp], #4
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    2236:	bf0c      	ite	eq
    2238:	490f      	ldreq	r1, [pc, #60]	; (2278 <pinMode+0x74>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    223a:	4910      	ldrne	r1, [pc, #64]	; (227c <pinMode+0x78>)
    223c:	6011      	str	r1, [r2, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    223e:	2215      	movs	r2, #21
    2240:	601a      	str	r2, [r3, #0]
}
    2242:	4770      	bx	lr
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    2244:	68da      	ldr	r2, [r3, #12]
		if (mode == OUTPUT) {
    2246:	2901      	cmp	r1, #1
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    2248:	6844      	ldr	r4, [r0, #4]
    224a:	ea42 0204 	orr.w	r2, r2, r4
    224e:	6042      	str	r2, [r0, #4]
		if (mode == OUTPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    2250:	689a      	ldr	r2, [r3, #8]

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
		if (mode == OUTPUT) {
    2252:	d008      	beq.n	2266 <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    2254:	f640 0138 	movw	r1, #2104	; 0x838
    2258:	6011      	str	r1, [r2, #0]
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    225a:	685b      	ldr	r3, [r3, #4]
    225c:	2215      	movs	r2, #21
}
    225e:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    2262:	601a      	str	r2, [r3, #0]
}
    2264:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    2266:	2138      	movs	r1, #56	; 0x38
    2268:	6011      	str	r1, [r2, #0]
    226a:	e7f6      	b.n	225a <pinMode+0x56>
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    226c:	4904      	ldr	r1, [pc, #16]	; (2280 <pinMode+0x7c>)
    226e:	6011      	str	r1, [r2, #0]
    2270:	e7f3      	b.n	225a <pinMode+0x56>
    2272:	bf00      	nop
    2274:	200000e8 	.word	0x200000e8
    2278:	00013038 	.word	0x00013038
    227c:	00010038 	.word	0x00010038
    2280:	0001f038 	.word	0x0001f038

00002284 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    2284:	48a4      	ldr	r0, [pc, #656]	; (2518 <pwm_init+0x294>)
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    2286:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    228a:	4ba4      	ldr	r3, [pc, #656]	; (251c <pwm_init+0x298>)
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    228c:	6f82      	ldr	r2, [r0, #120]	; 0x78
    228e:	f442 027f 	orr.w	r2, r2, #16711680	; 0xff0000
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

void pwm_init(void)
{
    2292:	b5f0      	push	{r4, r5, r6, r7, lr}
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    2294:	6782      	str	r2, [r0, #120]	; 0x78
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    2296:	2500      	movs	r5, #0
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    2298:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    229c:	f44f 4670 	mov.w	r6, #61440	; 0xf000
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    22a0:	4c9f      	ldr	r4, [pc, #636]	; (2520 <pwm_init+0x29c>)
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    22a2:	f44f 4e60 	mov.w	lr, #57344	; 0xe000

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    22a6:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    22a8:	f44f 6780 	mov.w	r7, #1024	; 0x400
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    22ac:	4314      	orrs	r4, r2
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    22ae:	462a      	mov	r2, r5
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    22b0:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    22b4:	f8a3 618c 	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    22b8:	f248 26b8 	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    22bc:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    22c0:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    22c4:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
    22c8:	b280      	uxth	r0, r0
    22ca:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
    22ce:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
    22d2:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    22d6:	4b91      	ldr	r3, [pc, #580]	; (251c <pwm_init+0x298>)
	for (i=0; i < 4; i++) {
    22d8:	3101      	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    22da:	2500      	movs	r5, #0
    22dc:	0140      	lsls	r0, r0, #5
    22de:	461c      	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    22e0:	2904      	cmp	r1, #4
    22e2:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    22e4:	f8a3 e004 	strh.w	lr, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    22e8:	80df      	strh	r7, [r3, #6]
		p->SM[i].OCTRL = 0;
    22ea:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    22ec:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    22ee:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    22f0:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    22f2:	81de      	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    22f4:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    22f6:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    22f8:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    22fa:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    22fc:	d1e9      	bne.n	22d2 <pwm_init+0x4e>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    22fe:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    2302:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    2306:	4b87      	ldr	r3, [pc, #540]	; (2524 <pwm_init+0x2a0>)
    2308:	f44f 4670 	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    230c:	b280      	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    230e:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    2310:	f44f 4760 	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    2314:	462a      	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2316:	ea40 000c 	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    231a:	f44f 6e80 	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    231e:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    2322:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
    2326:	b280      	uxth	r0, r0
    2328:	f440 6070 	orr.w	r0, r0, #3840	; 0xf00
    232c:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    2330:	f8a3 618c 	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    2334:	f248 26b8 	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    2338:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    233c:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    2340:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
    2344:	b280      	uxth	r0, r0
    2346:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
    234a:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
    234e:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    2352:	4b74      	ldr	r3, [pc, #464]	; (2524 <pwm_init+0x2a0>)
	for (i=0; i < 4; i++) {
    2354:	3101      	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    2356:	2500      	movs	r5, #0
    2358:	0140      	lsls	r0, r0, #5
    235a:	461c      	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    235c:	2904      	cmp	r1, #4
    235e:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    2360:	809f      	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    2362:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    2366:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    2368:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    236a:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    236c:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    236e:	81de      	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    2370:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    2372:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    2374:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    2376:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    2378:	d1e9      	bne.n	234e <pwm_init+0xca>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    237a:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    237e:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    2382:	4b69      	ldr	r3, [pc, #420]	; (2528 <pwm_init+0x2a4>)
    2384:	f44f 4670 	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2388:	b280      	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    238a:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    238c:	f44f 4760 	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    2390:	462a      	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2392:	ea40 000c 	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    2396:	f44f 6e80 	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    239a:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    239e:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
    23a2:	b280      	uxth	r0, r0
    23a4:	f440 6070 	orr.w	r0, r0, #3840	; 0xf00
    23a8:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    23ac:	f8a3 618c 	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    23b0:	f248 26b8 	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    23b4:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    23b8:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    23bc:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
    23c0:	b280      	uxth	r0, r0
    23c2:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
    23c6:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
    23ca:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    23ce:	4b56      	ldr	r3, [pc, #344]	; (2528 <pwm_init+0x2a4>)
	for (i=0; i < 4; i++) {
    23d0:	3101      	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    23d2:	2500      	movs	r5, #0
    23d4:	0140      	lsls	r0, r0, #5
    23d6:	461c      	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    23d8:	2904      	cmp	r1, #4
    23da:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    23dc:	809f      	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    23de:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    23e2:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    23e4:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    23e6:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    23e8:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    23ea:	81de      	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    23ec:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    23ee:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    23f0:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    23f2:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    23f4:	d1e9      	bne.n	23ca <pwm_init+0x146>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    23f6:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    23fa:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    23fe:	4b4b      	ldr	r3, [pc, #300]	; (252c <pwm_init+0x2a8>)
    2400:	f44f 4770 	mov.w	r7, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2404:	b280      	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    2406:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    2408:	f44f 4660 	mov.w	r6, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    240c:	462a      	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    240e:	ea40 000c 	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    2412:	f44f 6e80 	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2416:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    241a:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
    241e:	b280      	uxth	r0, r0
    2420:	f440 6070 	orr.w	r0, r0, #3840	; 0xf00
    2424:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    2428:	f8a3 718c 	strh.w	r7, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    242c:	f248 27b8 	movw	r7, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    2430:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    2434:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    2438:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
    243c:	b280      	uxth	r0, r0
    243e:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
    2442:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
    2446:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    244a:	4b38      	ldr	r3, [pc, #224]	; (252c <pwm_init+0x2a8>)
	for (i=0; i < 4; i++) {
    244c:	3101      	adds	r1, #1
    244e:	0140      	lsls	r0, r0, #5
    2450:	461c      	mov	r4, r3
    2452:	2904      	cmp	r1, #4
    2454:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    2456:	809e      	strh	r6, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    2458:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    245c:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    245e:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    2460:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    2462:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    2464:	81df      	strh	r7, [r3, #14]
		p->SM[i].VAL2 = 0;
    2466:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    2468:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    246a:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    246c:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    246e:	d1ea      	bne.n	2446 <pwm_init+0x1c2>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2470:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    2474:	270f      	movs	r7, #15

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    2476:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    2478:	f241 0601 	movw	r6, #4097	; 0x1001
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    247c:	b29b      	uxth	r3, r3
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    247e:	f645 5ec0 	movw	lr, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    2482:	4611      	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    2484:	f243 0526 	movw	r5, #12326	; 0x3026
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2488:	433b      	orrs	r3, r7
    248a:	f8a4 3188 	strh.w	r3, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    248e:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
    2492:	b29b      	uxth	r3, r3
    2494:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    2498:	f8a4 3188 	strh.w	r3, [r4, #392]	; 0x188
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    249c:	0150      	lsls	r0, r2, #5
    249e:	4b24      	ldr	r3, [pc, #144]	; (2530 <pwm_init+0x2ac>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    24a0:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    24a2:	4403      	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    24a4:	2a04      	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    24a6:	8199      	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    24a8:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    24aa:	81df      	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    24ac:	829e      	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    24ae:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    24b2:	8019      	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    24b4:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    24b6:	819d      	strh	r5, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    24b8:	d1f0      	bne.n	249c <pwm_init+0x218>
    24ba:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    24bc:	270f      	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    24be:	f241 0601 	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    24c2:	f645 55c0 	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    24c6:	4611      	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    24c8:	f243 0426 	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    24cc:	0150      	lsls	r0, r2, #5
    24ce:	4b19      	ldr	r3, [pc, #100]	; (2534 <pwm_init+0x2b0>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    24d0:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    24d2:	4403      	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    24d4:	2a04      	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    24d6:	8199      	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    24d8:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    24da:	81df      	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    24dc:	829e      	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    24de:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    24e0:	8019      	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    24e2:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    24e4:	819c      	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    24e6:	d1f1      	bne.n	24cc <pwm_init+0x248>
    24e8:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    24ea:	270f      	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    24ec:	f241 0601 	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    24f0:	f645 55c0 	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    24f4:	4611      	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    24f6:	f243 0426 	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    24fa:	0150      	lsls	r0, r2, #5
    24fc:	4b0e      	ldr	r3, [pc, #56]	; (2538 <pwm_init+0x2b4>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    24fe:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    2500:	4403      	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    2502:	2a04      	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    2504:	8199      	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    2506:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    2508:	81df      	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    250a:	829e      	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    250c:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    250e:	8019      	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    2510:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    2512:	819c      	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    2514:	d1f1      	bne.n	24fa <pwm_init+0x276>
	flexpwm_init(&IMXRT_FLEXPWM3);
	flexpwm_init(&IMXRT_FLEXPWM4);
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    2516:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2518:	400fc000 	.word	0x400fc000
    251c:	403dc000 	.word	0x403dc000
    2520:	fc030000 	.word	0xfc030000
    2524:	403e0000 	.word	0x403e0000
    2528:	403e4000 	.word	0x403e4000
    252c:	403e8000 	.word	0x403e8000
    2530:	401dc000 	.word	0x401dc000
    2534:	401e0000 	.word	0x401e0000
    2538:	401e4000 	.word	0x401e4000

0000253c <unused_interrupt_vector>:
//  R0
// Code from :: https://community.nxp.com/thread/389002
__attribute__((naked))
void unused_interrupt_vector(void)
{
  __asm( ".syntax unified\n"
    253c:	2004      	movs	r0, #4
    253e:	4671      	mov	r1, lr
    2540:	4208      	tst	r0, r1
    2542:	d003      	beq.n	254c <_MSP>
    2544:	f3ef 8009 	mrs	r0, PSP
    2548:	f000 b808 	b.w	255c <HardFault_HandlerC>

0000254c <_MSP>:
    254c:	f3ef 8008 	mrs	r0, MSP
    2550:	f000 b804 	b.w	255c <HardFault_HandlerC>

00002554 <startup_default_early_hook>:
         "B HardFault_HandlerC \n"
         "_MSP: \n"
         "MRS R0, MSP \n"
         "B HardFault_HandlerC \n"
         ".syntax divided\n") ;
}
    2554:	4770      	bx	lr
    2556:	bf00      	nop

00002558 <startup_default_late_hook>:
uint8_t external_psram_size = 0;

extern int main (void);
void startup_default_early_hook(void) {}
void startup_early_hook(void)		__attribute__ ((weak, alias("startup_default_early_hook")));
void startup_default_late_hook(void) {}
    2558:	4770      	bx	lr
    255a:	bf00      	nop

0000255c <HardFault_HandlerC>:
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    255c:	4b1b      	ldr	r3, [pc, #108]	; (25cc <HardFault_HandlerC+0x70>)
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    255e:	2105      	movs	r1, #5
    2560:	4a1b      	ldr	r2, [pc, #108]	; (25d0 <HardFault_HandlerC+0x74>)
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    2562:	2038      	movs	r0, #56	; 0x38
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    2564:	b530      	push	{r4, r5, lr}
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    2566:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
  GPIO2_DR_SET = (1 << 3);
    256a:	2108      	movs	r1, #8
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    256c:	f8c2 0338 	str.w	r0, [r2, #824]	; 0x338
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    2570:	b083      	sub	sp, #12
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    2572:	685a      	ldr	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    2574:	4c17      	ldr	r4, [pc, #92]	; (25d4 <HardFault_HandlerC+0x78>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    2576:	430a      	orrs	r2, r1
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    2578:	4817      	ldr	r0, [pc, #92]	; (25d8 <HardFault_HandlerC+0x7c>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    257a:	605a      	str	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
    257c:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    2580:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88

  if ( F_CPU_ACTUAL >= 600000000 )
    2584:	6823      	ldr	r3, [r4, #0]
    2586:	4283      	cmp	r3, r0
    2588:	d902      	bls.n	2590 <HardFault_HandlerC+0x34>
    set_arm_clock(300000000);
    258a:	4814      	ldr	r0, [pc, #80]	; (25dc <HardFault_HandlerC+0x80>)
    258c:	f7ff fc40 	bl	1e10 <set_arm_clock>

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    2590:	4d0e      	ldr	r5, [pc, #56]	; (25cc <HardFault_HandlerC+0x70>)
    2592:	2408      	movs	r4, #8
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    2594:	2000      	movs	r0, #0
    2596:	4a12      	ldr	r2, [pc, #72]	; (25e0 <HardFault_HandlerC+0x84>)
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    2598:	4912      	ldr	r1, [pc, #72]	; (25e4 <HardFault_HandlerC+0x88>)
  if ( F_CPU_ACTUAL >= 600000000 )
    set_arm_clock(300000000);

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    259a:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    259e:	9001      	str	r0, [sp, #4]
    25a0:	9b01      	ldr	r3, [sp, #4]
    25a2:	4293      	cmp	r3, r2
    25a4:	d805      	bhi.n	25b2 <HardFault_HandlerC+0x56>
    25a6:	9b01      	ldr	r3, [sp, #4]
    25a8:	3301      	adds	r3, #1
    25aa:	9301      	str	r3, [sp, #4]
    25ac:	9b01      	ldr	r3, [sp, #4]
    25ae:	4293      	cmp	r3, r2
    25b0:	d9f9      	bls.n	25a6 <HardFault_HandlerC+0x4a>
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    25b2:	f8c5 4088 	str.w	r4, [r5, #136]	; 0x88
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    25b6:	9001      	str	r0, [sp, #4]
    25b8:	9b01      	ldr	r3, [sp, #4]
    25ba:	428b      	cmp	r3, r1
    25bc:	d8ed      	bhi.n	259a <HardFault_HandlerC+0x3e>
    25be:	9b01      	ldr	r3, [sp, #4]
    25c0:	3301      	adds	r3, #1
    25c2:	9301      	str	r3, [sp, #4]
    25c4:	9b01      	ldr	r3, [sp, #4]
    25c6:	428b      	cmp	r3, r1
    25c8:	d9f9      	bls.n	25be <HardFault_HandlerC+0x62>
    25ca:	e7e6      	b.n	259a <HardFault_HandlerC+0x3e>
    25cc:	401bc000 	.word	0x401bc000
    25d0:	401f8000 	.word	0x401f8000
    25d4:	20012268 	.word	0x20012268
    25d8:	23c345ff 	.word	0x23c345ff
    25dc:	11e1a300 	.word	0x11e1a300
    25e0:	000f423f 	.word	0x000f423f
    25e4:	0089543f 	.word	0x0089543f

000025e8 <_sbrk>:

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
        char *prev = __brkval;
    25e8:	4a09      	ldr	r2, [pc, #36]	; (2610 <_sbrk+0x28>)
extern unsigned long _heap_end;

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
    25ea:	b508      	push	{r3, lr}
        char *prev = __brkval;
    25ec:	6813      	ldr	r3, [r2, #0]
        if (incr != 0) {
    25ee:	b120      	cbz	r0, 25fa <_sbrk+0x12>
                if (prev + incr > (char *)&_heap_end) {
    25f0:	4418      	add	r0, r3
    25f2:	4908      	ldr	r1, [pc, #32]	; (2614 <_sbrk+0x2c>)
    25f4:	4288      	cmp	r0, r1
    25f6:	d802      	bhi.n	25fe <_sbrk+0x16>
                        errno = ENOMEM;
                        return (void *)-1;
                }
                __brkval = prev + incr;
    25f8:	6010      	str	r0, [r2, #0]
        }
        return prev;
}
    25fa:	4618      	mov	r0, r3
    25fc:	bd08      	pop	{r3, pc}
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    25fe:	f002 f8c9 	bl	4794 <__errno>
    2602:	220c      	movs	r2, #12
                        return (void *)-1;
    2604:	f04f 33ff 	mov.w	r3, #4294967295
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    2608:	6002      	str	r2, [r0, #0]
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    260a:	4618      	mov	r0, r3
    260c:	bd08      	pop	{r3, pc}
    260e:	bf00      	nop
    2610:	2001226c 	.word	0x2001226c
    2614:	20280000 	.word	0x20280000

00002618 <Panic_Temp_isr>:

static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
    2618:	b672      	cpsid	i
  IOMUXC_GPR_GPR16 = 0x00000007;
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
    261a:	4a06      	ldr	r2, [pc, #24]	; (2634 <Panic_Temp_isr+0x1c>)
static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
  IOMUXC_GPR_GPR16 = 0x00000007;
    261c:	2107      	movs	r1, #7
    261e:	4b06      	ldr	r3, [pc, #24]	; (2638 <Panic_Temp_isr+0x20>)
    2620:	6419      	str	r1, [r3, #64]	; 0x40
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
    2622:	6b93      	ldr	r3, [r2, #56]	; 0x38
    2624:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2628:	6393      	str	r3, [r2, #56]	; 0x38
  asm volatile ("dsb":::"memory");
    262a:	f3bf 8f4f 	dsb	sy
  while (1) asm ("wfi");
    262e:	bf30      	wfi
    2630:	e7fd      	b.n	262e <Panic_Temp_isr+0x16>
    2632:	bf00      	nop
    2634:	400d4000 	.word	0x400d4000
    2638:	400ac000 	.word	0x400ac000

0000263c <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    263c:	6b83      	ldr	r3, [r0, #56]	; 0x38
	}
}
#endif

static void schedule_transfer(endpoint_t *endpoint, uint32_t epmask, transfer_t *transfer)
{
    263e:	b4f0      	push	{r4, r5, r6, r7}
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    2640:	b11b      	cbz	r3, 264a <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    2642:	6853      	ldr	r3, [r2, #4]
    2644:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    2648:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    264a:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    264c:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    264e:	b1dc      	cbz	r4, 2688 <schedule_transfer+0x4c>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    2650:	4b14      	ldr	r3, [pc, #80]	; (26a4 <schedule_transfer+0x68>)
	__disable_irq();
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
    2652:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    2654:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    2658:	420c      	tst	r4, r1
    265a:	d11f      	bne.n	269c <schedule_transfer+0x60>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    265c:	4d12      	ldr	r5, [pc, #72]	; (26a8 <schedule_transfer+0x6c>)
    265e:	682f      	ldr	r7, [r5, #0]
    2660:	e004      	b.n	266c <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    2662:	682c      	ldr	r4, [r5, #0]
    2664:	1be4      	subs	r4, r4, r7
    2666:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
    266a:	d20b      	bcs.n	2684 <schedule_transfer+0x48>
		if (USB1_ENDPTPRIME & epmask) goto end;
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    266c:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    2670:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    2674:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    2678:	f8d3 61b8 	ldr.w	r6, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    267c:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    2680:	0464      	lsls	r4, r4, #17
    2682:	d5ee      	bpl.n	2662 <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    2684:	4231      	tst	r1, r6
    2686:	d109      	bne.n	269c <schedule_transfer+0x60>
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
    2688:	2300      	movs	r3, #0
	USB1_ENDPTPRIME |= epmask;
    268a:	4c06      	ldr	r4, [pc, #24]	; (26a4 <schedule_transfer+0x68>)
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
    268c:	6082      	str	r2, [r0, #8]
	endpoint->status = 0;
    268e:	60c3      	str	r3, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
    2690:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2694:	4319      	orrs	r1, r3
    2696:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    269a:	6302      	str	r2, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
    269c:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    269e:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    26a0:	bcf0      	pop	{r4, r5, r6, r7}
    26a2:	4770      	bx	lr
    26a4:	402e0000 	.word	0x402e0000
    26a8:	e0001004 	.word	0xe0001004

000026ac <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    26ac:	b570      	push	{r4, r5, r6, lr}
    26ae:	4606      	mov	r6, r0
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    26b0:	6b00      	ldr	r0, [r0, #48]	; 0x30
	if (first == NULL) return;
    26b2:	b190      	cbz	r0, 26da <run_callbacks+0x2e>
    26b4:	4602      	mov	r2, r0
    26b6:	2400      	movs	r4, #0
    26b8:	e003      	b.n	26c2 <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    26ba:	6812      	ldr	r2, [r2, #0]
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
    26bc:	3401      	adds	r4, #1
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
    26be:	2a01      	cmp	r2, #1
    26c0:	d00c      	beq.n	26dc <run_callbacks+0x30>

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
	transfer_t *t = first;
	while (1) {
		if (t->status & (1<<7)) {
    26c2:	6853      	ldr	r3, [r2, #4]
    26c4:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    26c8:	d0f7      	beq.n	26ba <run_callbacks+0xe>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
    26ca:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    26cc:	b12c      	cbz	r4, 26da <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
    26ce:	6bb3      	ldr	r3, [r6, #56]	; 0x38
			break;
		}
	}
	// do all the callbacks
	while (count) {
		transfer_t *next = (transfer_t *)first->next;
    26d0:	6805      	ldr	r5, [r0, #0]
		ep->callback_function(first);
    26d2:	4798      	blx	r3
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    26d4:	3c01      	subs	r4, #1
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
		first = next;
    26d6:	4628      	mov	r0, r5
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    26d8:	d1f9      	bne.n	26ce <run_callbacks+0x22>
    26da:	bd70      	pop	{r4, r5, r6, pc}
		count++;
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
			// reached end of list, all need callbacks, new list is empty
			//printf(" end of list\n");
			ep->first_transfer = NULL;
    26dc:	6333      	str	r3, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
    26de:	6373      	str	r3, [r6, #52]	; 0x34
			break;
    26e0:	e7f4      	b.n	26cc <run_callbacks+0x20>
    26e2:	bf00      	nop

000026e4 <endpoint0_transmit.constprop.1>:
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
}

static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    26e4:	b5f0      	push	{r4, r5, r6, r7, lr}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
    26e6:	b9e1      	cbnz	r1, 2722 <endpoint0_transmit.constprop.1+0x3e>
    26e8:	4c21      	ldr	r4, [pc, #132]	; (2770 <endpoint0_transmit.constprop.1+0x8c>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    26ea:	4922      	ldr	r1, [pc, #136]	; (2774 <endpoint0_transmit.constprop.1+0x90>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    26ec:	2000      	movs	r0, #0
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    26ee:	4b22      	ldr	r3, [pc, #136]	; (2778 <endpoint0_transmit.constprop.1+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    26f0:	2201      	movs	r2, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    26f2:	f04f 1501 	mov.w	r5, #65537	; 0x10001
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    26f6:	2680      	movs	r6, #128	; 0x80
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    26f8:	600a      	str	r2, [r1, #0]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
    26fa:	461a      	mov	r2, r3
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    26fc:	60a1      	str	r1, [r4, #8]
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    26fe:	604e      	str	r6, [r1, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
    2700:	60e0      	str	r0, [r4, #12]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    2702:	f8c3 51bc 	str.w	r5, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    2706:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    270a:	4d1c      	ldr	r5, [pc, #112]	; (277c <endpoint0_transmit.constprop.1+0x98>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    270c:	f044 0401 	orr.w	r4, r4, #1
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    2710:	6088      	str	r0, [r1, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    2712:	f8c3 41b0 	str.w	r4, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    2716:	6028      	str	r0, [r5, #0]
	while (USB1_ENDPTPRIME) ;
    2718:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    271c:	2b00      	cmp	r3, #0
    271e:	d1fb      	bne.n	2718 <endpoint0_transmit.constprop.1+0x34>
}
    2720:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    2722:	0409      	lsls	r1, r1, #16
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    2724:	4b16      	ldr	r3, [pc, #88]	; (2780 <endpoint0_transmit.constprop.1+0x9c>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    2726:	4d14      	ldr	r5, [pc, #80]	; (2778 <endpoint0_transmit.constprop.1+0x94>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    2728:	2601      	movs	r6, #1
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    272a:	4c11      	ldr	r4, [pc, #68]	; (2770 <endpoint0_transmit.constprop.1+0x8c>)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    272c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    2730:	2200      	movs	r2, #0
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    2732:	601e      	str	r6, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    2734:	6059      	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    2736:	f500 5c80 	add.w	ip, r0, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    273a:	64e2      	str	r2, [r4, #76]	; 0x4c
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    273c:	f500 5e00 	add.w	lr, r0, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    2740:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    2742:	f500 5740 	add.w	r7, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    2746:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    274a:	f500 4680 	add.w	r6, r0, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
    274e:	462a      	mov	r2, r5
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    2750:	6098      	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    2752:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    2756:	f8c3 c00c 	str.w	ip, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    275a:	f8c3 e010 	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    275e:	615f      	str	r7, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    2760:	619e      	str	r6, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    2762:	f8c5 11b0 	str.w	r1, [r5, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    2766:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    276a:	2b00      	cmp	r3, #0
    276c:	d1fb      	bne.n	2766 <endpoint0_transmit.constprop.1+0x82>
    276e:	e7bc      	b.n	26ea <endpoint0_transmit.constprop.1+0x6>
    2770:	20025000 	.word	0x20025000
    2774:	20024020 	.word	0x20024020
    2778:	402e0000 	.word	0x402e0000
    277c:	20022de4 	.word	0x20022de4
    2780:	20024000 	.word	0x20024000

00002784 <isr>:
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}


static void isr(void)
{
    2784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    2788:	4cac      	ldr	r4, [pc, #688]	; (2a3c <isr+0x2b8>)
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}


static void isr(void)
{
    278a:	b083      	sub	sp, #12
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    278c:	f8d4 8144 	ldr.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    2790:	f018 0f01 	tst.w	r8, #1
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
	USB1_USBSTS = status;
    2794:	f8c4 8144 	str.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    2798:	d05e      	beq.n	2858 <isr+0xd4>
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    279a:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    279e:	2b00      	cmp	r3, #0
    27a0:	d055      	beq.n	284e <isr+0xca>
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    27a2:	f04f 1b01 	mov.w	fp, #65537	; 0x10001
    27a6:	f8df 92bc 	ldr.w	r9, [pc, #700]	; 2a64 <isr+0x2e0>
    27aa:	4ea5      	ldr	r6, [pc, #660]	; (2a40 <isr+0x2bc>)
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    27ac:	4625      	mov	r5, r4
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    27ae:	46da      	mov	sl, fp
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
    27b0:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
    27b4:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    27b6:	6af2      	ldr	r2, [r6, #44]	; 0x2c
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    27b8:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    27bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    27c0:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    27c4:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    27c8:	049f      	lsls	r7, r3, #18
    27ca:	d5f5      	bpl.n	27b8 <isr+0x34>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    27cc:	f8d5 3140 	ldr.w	r3, [r5, #320]	; 0x140
    27d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    27d4:	f8c5 3140 	str.w	r3, [r5, #320]	; 0x140
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    27d8:	f8c5 a1b4 	str.w	sl, [r5, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    27dc:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    27e0:	f013 1301 	ands.w	r3, r3, #65537	; 0x10001
    27e4:	d1fa      	bne.n	27dc <isr+0x58>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    27e6:	b281      	uxth	r1, r0
    27e8:	f240 6781 	movw	r7, #1665	; 0x681
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
    27ec:	f8c9 3000 	str.w	r3, [r9]
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    27f0:	42b9      	cmp	r1, r7
    27f2:	f200 80b4 	bhi.w	295e <isr+0x1da>
    27f6:	f5b1 6fd0 	cmp.w	r1, #1664	; 0x680
    27fa:	f080 81e9 	bcs.w	2bd0 <isr+0x44c>
    27fe:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
    2802:	f000 816b 	beq.w	2adc <isr+0x358>
    2806:	f200 80f0 	bhi.w	29ea <isr+0x266>
    280a:	2980      	cmp	r1, #128	; 0x80
    280c:	f000 8159 	beq.w	2ac2 <isr+0x33e>
    2810:	2982      	cmp	r1, #130	; 0x82
    2812:	f040 80e2 	bne.w	29da <isr+0x256>
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
    2816:	b292      	uxth	r2, r2
    2818:	f002 017f 	and.w	r1, r2, #127	; 0x7f
		if (endpoint > 7) break;
    281c:	2907      	cmp	r1, #7
    281e:	f200 80dc 	bhi.w	29da <isr+0x256>
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    2822:	0089      	lsls	r1, r1, #2
    2824:	4887      	ldr	r0, [pc, #540]	; (2a44 <isr+0x2c0>)
		reply_buffer[0] = 0;
    2826:	4f88      	ldr	r7, [pc, #544]	; (2a48 <isr+0x2c4>)
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    2828:	4408      	add	r0, r1
    282a:	6801      	ldr	r1, [r0, #0]
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    282c:	0610      	lsls	r0, r2, #24
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
    282e:	703b      	strb	r3, [r7, #0]
		reply_buffer[1] = 0;
    2830:	707b      	strb	r3, [r7, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    2832:	f140 820c 	bpl.w	2c4e <isr+0x4ca>
    2836:	03ca      	lsls	r2, r1, #15
    2838:	d501      	bpl.n	283e <isr+0xba>
			reply_buffer[0] = 1;
    283a:	2301      	movs	r3, #1
    283c:	703b      	strb	r3, [r7, #0]
		}
		endpoint0_transmit(reply_buffer, 2, 0);
    283e:	2102      	movs	r1, #2
    2840:	4881      	ldr	r0, [pc, #516]	; (2a48 <isr+0x2c4>)
    2842:	f7ff ff4f 	bl	26e4 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    2846:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    284a:	2b00      	cmp	r3, #0
    284c:	d1b0      	bne.n	27b0 <isr+0x2c>
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    284e:	4a7b      	ldr	r2, [pc, #492]	; (2a3c <isr+0x2b8>)
    2850:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    2854:	2b00      	cmp	r3, #0
    2856:	d150      	bne.n	28fa <isr+0x176>
			}
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
    2858:	f018 0f40 	tst.w	r8, #64	; 0x40
    285c:	d018      	beq.n	2890 <isr+0x10c>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    285e:	4b77      	ldr	r3, [pc, #476]	; (2a3c <isr+0x2b8>)
    2860:	f8d3 11ac 	ldr.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    2864:	461a      	mov	r2, r3
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    2866:	f8c3 11ac 	str.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    286a:	f8d3 11bc 	ldr.w	r1, [r3, #444]	; 0x1bc
    286e:	f8c3 11bc 	str.w	r1, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    2872:	f8d2 41b0 	ldr.w	r4, [r2, #432]	; 0x1b0
    2876:	4b71      	ldr	r3, [pc, #452]	; (2a3c <isr+0x2b8>)
    2878:	2c00      	cmp	r4, #0
    287a:	d1fa      	bne.n	2872 <isr+0xee>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    287c:	f04f 32ff 	mov.w	r2, #4294967295
    2880:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    2884:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
			// we took too long to respond :(
			// TODO; is this ever really a problem?
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
    2888:	f000 fd1e 	bl	32c8 <usb_serial_reset>
		#endif
		endpointN_notify_mask = 0;
    288c:	4b6f      	ldr	r3, [pc, #444]	; (2a4c <isr+0x2c8>)
    288e:	601c      	str	r4, [r3, #0]
			// shut off USB - easier to see results in protocol analyzer
			//USB1_USBCMD &= ~USB_USBCMD_RS;
			//printf("shut off USB\n");
		//}
	}
	if (status & USB_USBSTS_TI0) {
    2890:	f018 7f80 	tst.w	r8, #16777216	; 0x1000000
    2894:	d003      	beq.n	289e <isr+0x11a>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    2896:	4b6e      	ldr	r3, [pc, #440]	; (2a50 <isr+0x2cc>)
    2898:	681b      	ldr	r3, [r3, #0]
    289a:	b103      	cbz	r3, 289e <isr+0x11a>
    289c:	4798      	blx	r3
	}
	if (status & USB_USBSTS_TI1) {
    289e:	f018 7f00 	tst.w	r8, #33554432	; 0x2000000
    28a2:	d003      	beq.n	28ac <isr+0x128>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    28a4:	4b6b      	ldr	r3, [pc, #428]	; (2a54 <isr+0x2d0>)
    28a6:	681b      	ldr	r3, [r3, #0]
    28a8:	b103      	cbz	r3, 28ac <isr+0x128>
    28aa:	4798      	blx	r3
	}
	if (status & USB_USBSTS_PCI) {
    28ac:	f018 0f04 	tst.w	r8, #4
    28b0:	d008      	beq.n	28c4 <isr+0x140>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    28b2:	4b62      	ldr	r3, [pc, #392]	; (2a3c <isr+0x2b8>)
    28b4:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    28b8:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    28bc:	d04c      	beq.n	2958 <isr+0x1d4>
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
    28be:	4b66      	ldr	r3, [pc, #408]	; (2a58 <isr+0x2d4>)
    28c0:	2201      	movs	r2, #1
    28c2:	701a      	strb	r2, [r3, #0]
		//printf("suspend\n");
	}
	if (status & USB_USBSTS_UEI) {
		//printf("error\n");
	}
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    28c4:	4b5d      	ldr	r3, [pc, #372]	; (2a3c <isr+0x2b8>)
    28c6:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    28ca:	0612      	lsls	r2, r2, #24
    28cc:	d512      	bpl.n	28f4 <isr+0x170>
    28ce:	f018 0f80 	tst.w	r8, #128	; 0x80
    28d2:	d00f      	beq.n	28f4 <isr+0x170>
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
    28d4:	4961      	ldr	r1, [pc, #388]	; (2a5c <isr+0x2d8>)
    28d6:	780a      	ldrb	r2, [r1, #0]
    28d8:	b162      	cbz	r2, 28f4 <isr+0x170>
			if (--usb_reboot_timer == 0) {
    28da:	3a01      	subs	r2, #1
    28dc:	b2d2      	uxtb	r2, r2
    28de:	700a      	strb	r2, [r1, #0]
    28e0:	b942      	cbnz	r2, 28f4 <isr+0x170>
	__enable_irq();
}

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
    28e2:	495f      	ldr	r1, [pc, #380]	; (2a60 <isr+0x2dc>)
    28e4:	780a      	ldrb	r2, [r1, #0]
    28e6:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    28ea:	700a      	strb	r2, [r1, #0]
	if (sof_usage == 0) {
    28ec:	2a00      	cmp	r2, #0
    28ee:	f000 8232 	beq.w	2d56 <isr+0x5d2>
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
			if (--usb_reboot_timer == 0) {
				usb_stop_sof_interrupts(NUM_INTERFACE);
				asm("bkpt #251"); // run bootloader
    28f2:	befb      	bkpt	0x00fb
		#endif
		#ifdef FLIGHTSIM_INTERFACE
		usb_flightsim_flush_output();
		#endif
	}
}
    28f4:	b003      	add	sp, #12
    28f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    28fa:	495a      	ldr	r1, [pc, #360]	; (2a64 <isr+0x2e0>)
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
    28fc:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    2900:	6808      	ldr	r0, [r1, #0]
    2902:	4203      	tst	r3, r0
    2904:	f040 81e6 	bne.w	2cd4 <isr+0x550>
				endpoint0_notify_mask = 0;
				endpoint0_complete();
			}
			completestatus &= endpointN_notify_mask;
    2908:	4a50      	ldr	r2, [pc, #320]	; (2a4c <isr+0x2c8>)
    290a:	6815      	ldr	r5, [r2, #0]
#if 1
			if (completestatus) {
    290c:	401d      	ands	r5, r3
    290e:	d0a3      	beq.n	2858 <isr+0xd4>

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
    2910:	0c2f      	lsrs	r7, r5, #16
    2912:	d00f      	beq.n	2934 <isr+0x1b0>
    2914:	4e4a      	ldr	r6, [pc, #296]	; (2a40 <isr+0x2bc>)
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
    2916:	f04f 0901 	mov.w	r9, #1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
    291a:	fa97 f4a7 	rbit	r4, r7
    291e:	fab4 f484 	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    2922:	eb06 10c4 	add.w	r0, r6, r4, lsl #7
					tx &= ~(1<<p);
    2926:	fa09 f404 	lsl.w	r4, r9, r4

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    292a:	3040      	adds	r0, #64	; 0x40
    292c:	f7ff febe 	bl	26ac <run_callbacks>
#if 1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
    2930:	43a7      	bics	r7, r4
    2932:	d1f2      	bne.n	291a <isr+0x196>
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
    2934:	b2ad      	uxth	r5, r5
				while(rx) {
    2936:	2d00      	cmp	r5, #0
    2938:	d08e      	beq.n	2858 <isr+0xd4>
    293a:	4e41      	ldr	r6, [pc, #260]	; (2a40 <isr+0x2bc>)
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
					rx &= ~(1<<p);
    293c:	2701      	movs	r7, #1
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
    293e:	fa95 f4a5 	rbit	r4, r5
    2942:	fab4 f484 	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2);
    2946:	eb06 10c4 	add.w	r0, r6, r4, lsl #7
					rx &= ~(1<<p);
    294a:	fa07 f404 	lsl.w	r4, r7, r4

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
    294e:	f7ff fead 	bl	26ac <run_callbacks>
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
    2952:	43a5      	bics	r5, r4
    2954:	d1f3      	bne.n	293e <isr+0x1ba>
    2956:	e77f      	b.n	2858 <isr+0xd4>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
		} else {
			//printf("port at 12 Mbit\n");
			usb_high_speed = 0;
    2958:	4a3f      	ldr	r2, [pc, #252]	; (2a58 <isr+0x2d4>)
    295a:	7013      	strb	r3, [r2, #0]
    295c:	e7b2      	b.n	28c4 <isr+0x140>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    295e:	f242 0721 	movw	r7, #8225	; 0x2021
    2962:	42b9      	cmp	r1, r7
    2964:	d035      	beq.n	29d2 <isr+0x24e>
    2966:	f200 8089 	bhi.w	2a7c <isr+0x2f8>
    296a:	f5b1 6f08 	cmp.w	r1, #2176	; 0x880
    296e:	f000 8121 	beq.w	2bb4 <isr+0x430>
    2972:	f5b1 6f10 	cmp.w	r1, #2304	; 0x900
    2976:	d130      	bne.n	29da <isr+0x256>
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    2978:	f3c0 4007 	ubfx	r0, r0, #16, #8
    297c:	4a3a      	ldr	r2, [pc, #232]	; (2a68 <isr+0x2e4>)
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    297e:	493b      	ldr	r1, [pc, #236]	; (2a6c <isr+0x2e8>)
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    2980:	7010      	strb	r0, [r2, #0]
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    2982:	4f3b      	ldr	r7, [pc, #236]	; (2a70 <isr+0x2ec>)
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    2984:	4a3b      	ldr	r2, [pc, #236]	; (2a74 <isr+0x2f0>)
    2986:	9301      	str	r3, [sp, #4]
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    2988:	f8c5 71c8 	str.w	r7, [r5, #456]	; 0x1c8
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    298c:	f8c5 11cc 	str.w	r1, [r5, #460]	; 0x1cc
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    2990:	f8c5 21d0 	str.w	r2, [r5, #464]	; 0x1d0
		#endif
		#if defined(ENDPOINT7_CONFIG)
		USB1_ENDPTCTRL7 = ENDPOINT7_CONFIG;
		#endif
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_configure();
    2994:	f000 fc9a 	bl	32cc <usb_serial_configure>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2998:	4a37      	ldr	r2, [pc, #220]	; (2a78 <isr+0x2f4>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    299a:	9b01      	ldr	r3, [sp, #4]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    299c:	2180      	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    299e:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    29a0:	64b2      	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    29a2:	6051      	str	r1, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    29a4:	6010      	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    29a6:	64f3      	str	r3, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    29a8:	f8c5 b1bc 	str.w	fp, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    29ac:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    29b0:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    29b2:	f441 3280 	orr.w	r2, r1, #65536	; 0x10000
    29b6:	f8c5 21b0 	str.w	r2, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    29ba:	4a2a      	ldr	r2, [pc, #168]	; (2a64 <isr+0x2e0>)
    29bc:	6013      	str	r3, [r2, #0]
	while (USB1_ENDPTPRIME) ;
    29be:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    29c2:	2b00      	cmp	r3, #0
    29c4:	d1fb      	bne.n	29be <isr+0x23a>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    29c6:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    29ca:	2b00      	cmp	r3, #0
    29cc:	f47f aef0 	bne.w	27b0 <isr+0x2c>
    29d0:	e73d      	b.n	284e <isr+0xca>
		// fall through to next case, to always send ZLP ACK
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
    29d2:	0c11      	lsrs	r1, r2, #16
    29d4:	2907      	cmp	r1, #7
    29d6:	f000 813e 	beq.w	2c56 <isr+0x4d2>
			return;
		}
		break;
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    29da:	f8c4 b1c0 	str.w	fp, [r4, #448]	; 0x1c0
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    29de:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    29e2:	2b00      	cmp	r3, #0
    29e4:	f47f aee4 	bne.w	27b0 <isr+0x2c>
    29e8:	e731      	b.n	284e <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    29ea:	f240 3702 	movw	r7, #770	; 0x302
    29ee:	42b9      	cmp	r1, r7
    29f0:	f000 80b0 	beq.w	2b54 <isr+0x3d0>
    29f4:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
    29f8:	d1ef      	bne.n	29da <isr+0x256>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    29fa:	4a1f      	ldr	r2, [pc, #124]	; (2a78 <isr+0x2f4>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    29fc:	2180      	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    29fe:	2701      	movs	r7, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    2a00:	64f3      	str	r3, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    2a02:	64b2      	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2a04:	6017      	str	r7, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2a06:	6051      	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    2a08:	f8c5 b1bc 	str.w	fp, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    2a0c:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    2a10:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    2a12:	f441 3380 	orr.w	r3, r1, #65536	; 0x10000
    2a16:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    2a1a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2a1e:	2b00      	cmp	r3, #0
    2a20:	d1fb      	bne.n	2a1a <isr+0x296>

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    2a22:	0c03      	lsrs	r3, r0, #16
    2a24:	065b      	lsls	r3, r3, #25
    2a26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    2a2a:	f8c5 3154 	str.w	r3, [r5, #340]	; 0x154
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    2a2e:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    2a32:	2b00      	cmp	r3, #0
    2a34:	f47f aebc 	bne.w	27b0 <isr+0x2c>
    2a38:	e709      	b.n	284e <isr+0xca>
    2a3a:	bf00      	nop
    2a3c:	402e0000 	.word	0x402e0000
    2a40:	20025000 	.word	0x20025000
    2a44:	402e01c0 	.word	0x402e01c0
    2a48:	20022df8 	.word	0x20022df8
    2a4c:	20022dd4 	.word	0x20022dd4
    2a50:	20022dd0 	.word	0x20022dd0
    2a54:	20022ddc 	.word	0x20022ddc
    2a58:	20022de0 	.word	0x20022de0
    2a5c:	20022de8 	.word	0x20022de8
    2a60:	20022dd8 	.word	0x20022dd8
    2a64:	20022de4 	.word	0x20022de4
    2a68:	20022e08 	.word	0x20022e08
    2a6c:	000200c8 	.word	0x000200c8
    2a70:	00cc0002 	.word	0x00cc0002
    2a74:	00c80002 	.word	0x00c80002
    2a78:	20024020 	.word	0x20024020
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    2a7c:	f242 2321 	movw	r3, #8737	; 0x2221
    2a80:	4299      	cmp	r1, r3
    2a82:	d05b      	beq.n	2b3c <isr+0x3b8>
    2a84:	f242 3321 	movw	r3, #8993	; 0x2321
    2a88:	4299      	cmp	r1, r3
    2a8a:	d1a6      	bne.n	29da <isr+0x256>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2a8c:	4bb5      	ldr	r3, [pc, #724]	; (2d64 <isr+0x5e0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2a8e:	2280      	movs	r2, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    2a90:	2100      	movs	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2a92:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    2a94:	64b3      	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2a96:	6018      	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2a98:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    2a9a:	64f1      	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    2a9c:	f8c4 b1bc 	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    2aa0:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    2aa4:	6099      	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    2aa6:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
    2aaa:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    2aae:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2ab2:	2b00      	cmp	r3, #0
    2ab4:	d1fb      	bne.n	2aae <isr+0x32a>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    2ab6:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    2aba:	2b00      	cmp	r3, #0
    2abc:	f47f ae78 	bne.w	27b0 <isr+0x2c>
    2ac0:	e6c5      	b.n	284e <isr+0xca>
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    2ac2:	4aa9      	ldr	r2, [pc, #676]	; (2d68 <isr+0x5e4>)
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
    2ac4:	2102      	movs	r1, #2
    2ac6:	4610      	mov	r0, r2
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    2ac8:	7013      	strb	r3, [r2, #0]
		reply_buffer[1] = 0;
    2aca:	7053      	strb	r3, [r2, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    2acc:	f7ff fe0a 	bl	26e4 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    2ad0:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    2ad4:	2b00      	cmp	r3, #0
    2ad6:	f47f ae6b 	bne.w	27b0 <isr+0x2c>
    2ada:	e6b8      	b.n	284e <isr+0xca>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    2adc:	b292      	uxth	r2, r2
    2ade:	f002 037f 	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    2ae2:	2b07      	cmp	r3, #7
    2ae4:	f63f af79 	bhi.w	29da <isr+0x256>
		dir = setup.wIndex & 0x80;
		if (dir) {
    2ae8:	f012 0f80 	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    2aec:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2af0:	4a9e      	ldr	r2, [pc, #632]	; (2d6c <isr+0x5e8>)
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    2af2:	f04f 0100 	mov.w	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2af6:	f04f 0001 	mov.w	r0, #1
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    2afa:	441a      	add	r2, r3
    2afc:	6813      	ldr	r3, [r2, #0]
    2afe:	bf14      	ite	ne
    2b00:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    2b04:	f023 0301 	biceq.w	r3, r3, #1
    2b08:	6013      	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2b0a:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2b0c:	4b95      	ldr	r3, [pc, #596]	; (2d64 <isr+0x5e0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    2b0e:	64f1      	str	r1, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    2b10:	64b3      	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2b12:	6018      	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2b14:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    2b16:	f8c4 b1bc 	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    2b1a:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    2b1e:	6099      	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    2b20:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
    2b24:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    2b28:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2b2c:	2b00      	cmp	r3, #0
    2b2e:	d1fb      	bne.n	2b28 <isr+0x3a4>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    2b30:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    2b34:	2b00      	cmp	r3, #0
    2b36:	f47f ae3b 	bne.w	27b0 <isr+0x2c>
    2b3a:	e688      	b.n	284e <isr+0xca>
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    2b3c:	b292      	uxth	r2, r2
    2b3e:	2a00      	cmp	r2, #0
    2b40:	d1a4      	bne.n	2a8c <isr+0x308>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    2b42:	4b8b      	ldr	r3, [pc, #556]	; (2d70 <isr+0x5ec>)
			usb_cdc_line_rtsdtr = setup.wValue;
    2b44:	f3c0 4007 	ubfx	r0, r0, #16, #8
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    2b48:	4a8a      	ldr	r2, [pc, #552]	; (2d74 <isr+0x5f0>)
    2b4a:	6819      	ldr	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    2b4c:	4b8a      	ldr	r3, [pc, #552]	; (2d78 <isr+0x5f4>)
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    2b4e:	6011      	str	r1, [r2, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    2b50:	7018      	strb	r0, [r3, #0]
    2b52:	e79b      	b.n	2a8c <isr+0x308>
			reply_buffer[0] = 1;
		}
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    2b54:	b292      	uxth	r2, r2
    2b56:	f002 037f 	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    2b5a:	2b07      	cmp	r3, #7
    2b5c:	f63f af3d 	bhi.w	29da <isr+0x256>
		dir = setup.wIndex & 0x80;
		if (dir) {
    2b60:	f012 0f80 	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    2b64:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2b68:	4a80      	ldr	r2, [pc, #512]	; (2d6c <isr+0x5e8>)
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    2b6a:	f04f 0100 	mov.w	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2b6e:	f04f 0001 	mov.w	r0, #1
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    2b72:	441a      	add	r2, r3
    2b74:	6813      	ldr	r3, [r2, #0]
    2b76:	bf14      	ite	ne
    2b78:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    2b7c:	f043 0301 	orreq.w	r3, r3, #1
    2b80:	6013      	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2b82:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2b84:	4b77      	ldr	r3, [pc, #476]	; (2d64 <isr+0x5e0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    2b86:	64f1      	str	r1, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    2b88:	64b3      	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2b8a:	6018      	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2b8c:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    2b8e:	f8c4 b1bc 	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    2b92:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    2b96:	6099      	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    2b98:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
    2b9c:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    2ba0:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2ba4:	2b00      	cmp	r3, #0
    2ba6:	d1fb      	bne.n	2ba0 <isr+0x41c>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    2ba8:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    2bac:	2b00      	cmp	r3, #0
    2bae:	f47f adff 	bne.w	27b0 <isr+0x2c>
    2bb2:	e64c      	b.n	284e <isr+0xca>
		usb_audio_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    2bb4:	4a71      	ldr	r2, [pc, #452]	; (2d7c <isr+0x5f8>)
		endpoint0_transmit(reply_buffer, 1, 0);
    2bb6:	2101      	movs	r1, #1
		usb_audio_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    2bb8:	4b6b      	ldr	r3, [pc, #428]	; (2d68 <isr+0x5e4>)
    2bba:	7812      	ldrb	r2, [r2, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    2bbc:	4618      	mov	r0, r3
		usb_audio_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    2bbe:	701a      	strb	r2, [r3, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    2bc0:	f7ff fd90 	bl	26e4 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    2bc4:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    2bc8:	2b00      	cmp	r3, #0
    2bca:	f47f adf1 	bne.w	27b0 <isr+0x2c>
    2bce:	e63e      	b.n	284e <isr+0xca>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    2bd0:	4b6b      	ldr	r3, [pc, #428]	; (2d80 <isr+0x5fc>)
    2bd2:	6859      	ldr	r1, [r3, #4]
    2bd4:	2900      	cmp	r1, #0
    2bd6:	f43f af00 	beq.w	29da <isr+0x256>
    2bda:	0c00      	lsrs	r0, r0, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    2bdc:	fa1f fe82 	uxth.w	lr, r2
    2be0:	e004      	b.n	2bec <isr+0x468>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    2be2:	330c      	adds	r3, #12
    2be4:	6859      	ldr	r1, [r3, #4]
    2be6:	2900      	cmp	r1, #0
    2be8:	f43f aef7 	beq.w	29da <isr+0x256>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    2bec:	881f      	ldrh	r7, [r3, #0]
    2bee:	4287      	cmp	r7, r0
    2bf0:	d1f7      	bne.n	2be2 <isr+0x45e>
    2bf2:	885f      	ldrh	r7, [r3, #2]
    2bf4:	4577      	cmp	r7, lr
    2bf6:	d1f4      	bne.n	2be2 <isr+0x45e>
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
    2bf8:	0a07      	lsrs	r7, r0, #8
    2bfa:	2f03      	cmp	r7, #3
    2bfc:	f000 80e9 	beq.w	2dd2 <isr+0x64e>
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
    2c00:	891b      	ldrh	r3, [r3, #8]
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    2c02:	0c12      	lsrs	r2, r2, #16
    2c04:	4293      	cmp	r3, r2
    2c06:	bf28      	it	cs
    2c08:	4613      	movcs	r3, r2

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
    2c0a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    2c0e:	f000 80d1 	beq.w	2db4 <isr+0x630>
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
    2c12:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
    2c16:	f000 808b 	beq.w	2d30 <isr+0x5ac>
    2c1a:	4f5a      	ldr	r7, [pc, #360]	; (2d84 <isr+0x600>)
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
					usb_descriptor_buffer[1] = 7;
				} else {
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    2c1c:	461a      	mov	r2, r3
    2c1e:	9301      	str	r3, [sp, #4]
    2c20:	4638      	mov	r0, r7
    2c22:	f000 fec1 	bl	39a8 <memcpy>
    2c26:	9b01      	ldr	r3, [sp, #4]
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    2c28:	f027 021f 	bic.w	r2, r7, #31
	uint32_t end_addr = (uint32_t)addr + size;
    2c2c:	441f      	add	r7, r3
	asm volatile("": : :"memory");
	asm("dsb");
    2c2e:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    2c32:	4955      	ldr	r1, [pc, #340]	; (2d88 <isr+0x604>)
    2c34:	600a      	str	r2, [r1, #0]
		location += 32;
    2c36:	3220      	adds	r2, #32
	} while (location < end_addr);
    2c38:	4297      	cmp	r7, r2
    2c3a:	d8fa      	bhi.n	2c32 <isr+0x4ae>
	asm("dsb");
    2c3c:	f3bf 8f4f 	dsb	sy
	asm("isb");
    2c40:	f3bf 8f6f 	isb	sy
				}
				// prep transmit
				arm_dcache_flush_delete(usb_descriptor_buffer, datalen);
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    2c44:	484f      	ldr	r0, [pc, #316]	; (2d84 <isr+0x600>)
    2c46:	4619      	mov	r1, r3
    2c48:	f7ff fd4c 	bl	26e4 <endpoint0_transmit.constprop.1>
    2c4c:	e5fb      	b.n	2846 <isr+0xc2>
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    2c4e:	07cb      	lsls	r3, r1, #31
    2c50:	f57f adf5 	bpl.w	283e <isr+0xba>
    2c54:	e5f1      	b.n	283a <isr+0xb6>
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    2c56:	4f4d      	ldr	r7, [pc, #308]	; (2d8c <isr+0x608>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    2c58:	f04f 0e01 	mov.w	lr, #1
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
    2c5c:	60f3      	str	r3, [r6, #12]
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    2c5e:	494c      	ldr	r1, [pc, #304]	; (2d90 <isr+0x60c>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    2c60:	4b4c      	ldr	r3, [pc, #304]	; (2d94 <isr+0x610>)
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    2c62:	6038      	str	r0, [r7, #0]
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    2c64:	f8c3 e000 	str.w	lr, [r3]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    2c68:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    2c6a:	60b3      	str	r3, [r6, #8]
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
    2c6c:	494a      	ldr	r1, [pc, #296]	; (2d98 <isr+0x614>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    2c6e:	f8d5 01b0 	ldr.w	r0, [r5, #432]	; 0x1b0
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    2c72:	607a      	str	r2, [r7, #4]
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    2c74:	f501 5780 	add.w	r7, r1, #4096	; 0x1000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    2c78:	ea40 020e 	orr.w	r2, r0, lr
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    2c7c:	6099      	str	r1, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    2c7e:	f501 5e00 	add.w	lr, r1, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    2c82:	f501 5040 	add.w	r0, r1, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    2c86:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    2c8a:	f8c5 21b0 	str.w	r2, [r5, #432]	; 0x1b0
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    2c8e:	60df      	str	r7, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    2c90:	f8c3 e010 	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    2c94:	6158      	str	r0, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    2c96:	6199      	str	r1, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
    2c98:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2c9c:	2b00      	cmp	r3, #0
    2c9e:	d1fb      	bne.n	2c98 <isr+0x514>
	}
	endpoint0_transfer_ack.next = 1;
    2ca0:	4a30      	ldr	r2, [pc, #192]	; (2d64 <isr+0x5e0>)
    2ca2:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2ca4:	f248 0180 	movw	r1, #32896	; 0x8080
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    2ca8:	64f3      	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2caa:	6010      	str	r0, [r2, #0]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    2cac:	f44f 3080 	mov.w	r0, #65536	; 0x10000
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    2cb0:	64b2      	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2cb2:	6051      	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    2cb4:	f8c5 b1bc 	str.w	fp, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    2cb8:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    2cbc:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    2cbe:	ea41 0300 	orr.w	r3, r1, r0
    2cc2:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    2cc6:	f8c9 0000 	str.w	r0, [r9]
	while (USB1_ENDPTPRIME) ;
    2cca:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2cce:	2b00      	cmp	r3, #0
    2cd0:	d1fb      	bne.n	2cca <isr+0x546>
    2cd2:	e5b8      	b.n	2846 <isr+0xc2>

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    2cd4:	482d      	ldr	r0, [pc, #180]	; (2d8c <isr+0x608>)
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    2cd6:	f242 0421 	movw	r4, #8225	; 0x2021
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    2cda:	2600      	movs	r6, #0

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    2cdc:	8805      	ldrh	r5, [r0, #0]
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    2cde:	600e      	str	r6, [r1, #0]

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    2ce0:	42a5      	cmp	r5, r4

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    2ce2:	6840      	ldr	r0, [r0, #4]
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    2ce4:	f47f ae10 	bne.w	2908 <isr+0x184>
    2ce8:	b281      	uxth	r1, r0
    2cea:	2900      	cmp	r1, #0
    2cec:	f47f ae0c 	bne.w	2908 <isr+0x184>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    2cf0:	4929      	ldr	r1, [pc, #164]	; (2d98 <isr+0x614>)
    2cf2:	4c2a      	ldr	r4, [pc, #168]	; (2d9c <isr+0x618>)
    2cf4:	c903      	ldmia	r1, {r0, r1}
    2cf6:	0c0d      	lsrs	r5, r1, #16
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    2cf8:	2886      	cmp	r0, #134	; 0x86
	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    2cfa:	6020      	str	r0, [r4, #0]
    2cfc:	80a1      	strh	r1, [r4, #4]
    2cfe:	71a5      	strb	r5, [r4, #6]
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    2d00:	f47f ae02 	bne.w	2908 <isr+0x184>
}


void usb_start_sof_interrupts(int interface)
{
	__disable_irq();
    2d04:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    2d06:	4826      	ldr	r0, [pc, #152]	; (2da0 <isr+0x61c>)
    2d08:	7801      	ldrb	r1, [r0, #0]
    2d0a:	f041 0104 	orr.w	r1, r1, #4
    2d0e:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    2d10:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    2d14:	0608      	lsls	r0, r1, #24
    2d16:	d406      	bmi.n	2d26 <isr+0x5a2>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    2d18:	f041 0180 	orr.w	r1, r1, #128	; 0x80
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    2d1c:	2080      	movs	r0, #128	; 0x80
    2d1e:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    2d22:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	}
	__enable_irq();
    2d26:	b662      	cpsie	i
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
			usb_start_sof_interrupts(NUM_INTERFACE);
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    2d28:	4a1e      	ldr	r2, [pc, #120]	; (2da4 <isr+0x620>)
    2d2a:	2150      	movs	r1, #80	; 0x50
    2d2c:	7011      	strb	r1, [r2, #0]
    2d2e:	e5eb      	b.n	2908 <isr+0x184>
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    2d30:	481d      	ldr	r0, [pc, #116]	; (2da8 <isr+0x624>)
					memcpy(usb_descriptor_buffer, src, datalen);
    2d32:	461a      	mov	r2, r3
    2d34:	4f13      	ldr	r7, [pc, #76]	; (2d84 <isr+0x600>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    2d36:	f890 e000 	ldrb.w	lr, [r0]
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
    2d3a:	491c      	ldr	r1, [pc, #112]	; (2dac <isr+0x628>)
    2d3c:	481c      	ldr	r0, [pc, #112]	; (2db0 <isr+0x62c>)
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
    2d3e:	9301      	str	r3, [sp, #4]
    2d40:	f1be 0f00 	cmp.w	lr, #0
    2d44:	bf08      	it	eq
    2d46:	4601      	moveq	r1, r0
    2d48:	4638      	mov	r0, r7
    2d4a:	f000 fe2d 	bl	39a8 <memcpy>
					usb_descriptor_buffer[1] = 7;
    2d4e:	2207      	movs	r2, #7
    2d50:	9b01      	ldr	r3, [sp, #4]
    2d52:	707a      	strb	r2, [r7, #1]
    2d54:	e768      	b.n	2c28 <isr+0x4a4>

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
	if (sof_usage == 0) {
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    2d56:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    2d5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    2d5e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    2d62:	e5c6      	b.n	28f2 <isr+0x16e>
    2d64:	20024020 	.word	0x20024020
    2d68:	20022df8 	.word	0x20022df8
    2d6c:	402e01c0 	.word	0x402e01c0
    2d70:	20022dbc 	.word	0x20022dbc
    2d74:	20025288 	.word	0x20025288
    2d78:	20022f48 	.word	0x20022f48
    2d7c:	20022e08 	.word	0x20022e08
    2d80:	20000368 	.word	0x20000368
    2d84:	20200000 	.word	0x20200000
    2d88:	e000ef70 	.word	0xe000ef70
    2d8c:	20022df0 	.word	0x20022df0
    2d90:	00070080 	.word	0x00070080
    2d94:	20024000 	.word	0x20024000
    2d98:	20022e00 	.word	0x20022e00
    2d9c:	20025280 	.word	0x20025280
    2da0:	20022dd8 	.word	0x20022dd8
    2da4:	20022de8 	.word	0x20022de8
    2da8:	20022de0 	.word	0x20022de0
    2dac:	60001694 	.word	0x60001694
    2db0:	600016d8 	.word	0x600016d8

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
    2db4:	480a      	ldr	r0, [pc, #40]	; (2de0 <isr+0x65c>)
					memcpy(usb_descriptor_buffer, src, datalen);
    2db6:	461a      	mov	r2, r3
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    2db8:	490a      	ldr	r1, [pc, #40]	; (2de4 <isr+0x660>)
					if (usb_high_speed) src = usb_config_descriptor_480;
    2dba:	7807      	ldrb	r7, [r0, #0]
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    2dbc:	480a      	ldr	r0, [pc, #40]	; (2de8 <isr+0x664>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
    2dbe:	9301      	str	r3, [sp, #4]
    2dc0:	2f00      	cmp	r7, #0
    2dc2:	bf08      	it	eq
    2dc4:	4601      	moveq	r1, r0
    2dc6:	4809      	ldr	r0, [pc, #36]	; (2dec <isr+0x668>)
    2dc8:	f000 fdee 	bl	39a8 <memcpy>
    2dcc:	4f07      	ldr	r7, [pc, #28]	; (2dec <isr+0x668>)
    2dce:	9b01      	ldr	r3, [sp, #4]
    2dd0:	e72a      	b.n	2c28 <isr+0x4a4>
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    2dd2:	0c12      	lsrs	r2, r2, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
    2dd4:	780b      	ldrb	r3, [r1, #0]
    2dd6:	4293      	cmp	r3, r2
    2dd8:	bf28      	it	cs
    2dda:	4613      	movcs	r3, r2
    2ddc:	e719      	b.n	2c12 <isr+0x48e>
    2dde:	bf00      	nop
    2de0:	20022de0 	.word	0x20022de0
    2de4:	600016d8 	.word	0x600016d8
    2de8:	60001694 	.word	0x60001694
    2dec:	20200000 	.word	0x20200000

00002df0 <usb_config_rx>:
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    2df0:	2a00      	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    2df2:	f1a0 0202 	sub.w	r2, r0, #2
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    2df6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    2dfa:	bf14      	ite	ne
    2dfc:	2700      	movne	r7, #0
    2dfe:	f04f 5700 	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    2e02:	2a02      	cmp	r2, #2
    2e04:	d901      	bls.n	2e0a <usb_config_rx+0x1a>
    2e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    2e0a:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
    2e0e:	f8df 9040 	ldr.w	r9, [pc, #64]	; 2e50 <usb_config_rx+0x60>
    2e12:	460d      	mov	r5, r1
    2e14:	4604      	mov	r4, r0
    2e16:	eb0a 0609 	add.w	r6, sl, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    2e1a:	2100      	movs	r1, #0
    2e1c:	2240      	movs	r2, #64	; 0x40
    2e1e:	4698      	mov	r8, r3
    2e20:	4630      	mov	r0, r6
    2e22:	f001 ffa5 	bl	4d70 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    2e26:	2001      	movs	r0, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    2e28:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
    2e2c:	f84a 1009 	str.w	r1, [sl, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    2e30:	f8c6 8038 	str.w	r8, [r6, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    2e34:	60b0      	str	r0, [r6, #8]
void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
    2e36:	f1b8 0f00 	cmp.w	r8, #0
    2e3a:	d0e4      	beq.n	2e06 <usb_config_rx+0x16>
    2e3c:	4b03      	ldr	r3, [pc, #12]	; (2e4c <usb_config_rx+0x5c>)
    2e3e:	40a0      	lsls	r0, r4
    2e40:	681c      	ldr	r4, [r3, #0]
    2e42:	4320      	orrs	r0, r4
    2e44:	6018      	str	r0, [r3, #0]
    2e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2e4a:	bf00      	nop
    2e4c:	20022dd4 	.word	0x20022dd4
    2e50:	20025000 	.word	0x20025000

00002e54 <usb_config_tx>:
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    2e54:	2a00      	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    2e56:	f1a0 0202 	sub.w	r2, r0, #2
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    2e5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    2e5e:	bf14      	ite	ne
    2e60:	2700      	movne	r7, #0
    2e62:	f04f 5700 	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    2e66:	2a02      	cmp	r2, #2
    2e68:	d901      	bls.n	2e6e <usb_config_tx+0x1a>
    2e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    2e6e:	2240      	movs	r2, #64	; 0x40

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    2e70:	01c5      	lsls	r5, r0, #7
    2e72:	f8df 9044 	ldr.w	r9, [pc, #68]	; 2eb8 <usb_config_tx+0x64>
    2e76:	4688      	mov	r8, r1
    2e78:	4415      	add	r5, r2
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    2e7a:	2100      	movs	r1, #0
    2e7c:	4604      	mov	r4, r0
    2e7e:	461e      	mov	r6, r3

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    2e80:	eb05 0a09 	add.w	sl, r5, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    2e84:	4650      	mov	r0, sl
    2e86:	f001 ff73 	bl	4d70 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    2e8a:	2201      	movs	r2, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    2e8c:	ea47 4108 	orr.w	r1, r7, r8, lsl #16
    2e90:	f845 1009 	str.w	r1, [r5, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    2e94:	f8ca 6038 	str.w	r6, [sl, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    2e98:	f8ca 2008 	str.w	r2, [sl, #8]
void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    2e9c:	2e00      	cmp	r6, #0
    2e9e:	d0e4      	beq.n	2e6a <usb_config_tx+0x16>
    2ea0:	f104 0010 	add.w	r0, r4, #16
    2ea4:	4b03      	ldr	r3, [pc, #12]	; (2eb4 <usb_config_tx+0x60>)
    2ea6:	4082      	lsls	r2, r0
    2ea8:	6818      	ldr	r0, [r3, #0]
    2eaa:	4302      	orrs	r2, r0
    2eac:	601a      	str	r2, [r3, #0]
    2eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2eb2:	bf00      	nop
    2eb4:	20022dd4 	.word	0x20022dd4
    2eb8:	20025000 	.word	0x20025000

00002ebc <usb_prepare_transfer>:


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    2ebc:	0412      	lsls	r2, r2, #16
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
    2ebe:	6081      	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
	transfer->pointer3 = addr + 12288;
	transfer->pointer4 = addr + 16384;
	transfer->callback_param = param;
    2ec0:	61c3      	str	r3, [r0, #28]


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    2ec2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
}



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
    2ec6:	b4f0      	push	{r4, r5, r6, r7}
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    2ec8:	6042      	str	r2, [r0, #4]



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    2eca:	2701      	movs	r7, #1
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    2ecc:	f501 5680 	add.w	r6, r1, #4096	; 0x1000
	transfer->pointer2 = addr + 8192;
    2ed0:	f501 5500 	add.w	r5, r1, #8192	; 0x2000
	transfer->pointer3 = addr + 12288;
    2ed4:	f501 5440 	add.w	r4, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    2ed8:	f501 4280 	add.w	r2, r1, #16384	; 0x4000



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    2edc:	6007      	str	r7, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    2ede:	60c6      	str	r6, [r0, #12]
	transfer->pointer2 = addr + 8192;
    2ee0:	6105      	str	r5, [r0, #16]
	transfer->pointer3 = addr + 12288;
    2ee2:	6144      	str	r4, [r0, #20]
	transfer->pointer4 = addr + 16384;
    2ee4:	6182      	str	r2, [r0, #24]
	transfer->callback_param = param;
}
    2ee6:	bcf0      	pop	{r4, r5, r6, r7}
    2ee8:	4770      	bx	lr
    2eea:	bf00      	nop

00002eec <usb_transmit>:
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    2eec:	1e83      	subs	r3, r0, #2
    2eee:	2b02      	cmp	r3, #2
    2ef0:	d900      	bls.n	2ef4 <usb_transmit+0x8>
    2ef2:	4770      	bx	lr
		count--;
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    2ef4:	b430      	push	{r4, r5}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    2ef6:	4b06      	ldr	r3, [pc, #24]	; (2f10 <usb_transmit+0x24>)
    2ef8:	f100 0410 	add.w	r4, r0, #16
    2efc:	2501      	movs	r5, #1
    2efe:	460a      	mov	r2, r1
    2f00:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    2f04:	fa05 f104 	lsl.w	r1, r5, r4
}
    2f08:	bc30      	pop	{r4, r5}
void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    2f0a:	f7ff bb97 	b.w	263c <schedule_transfer>
    2f0e:	bf00      	nop
    2f10:	20025040 	.word	0x20025040

00002f14 <usb_receive>:
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    2f14:	1e83      	subs	r3, r0, #2
    2f16:	2b02      	cmp	r3, #2
    2f18:	d900      	bls.n	2f1c <usb_receive+0x8>
    2f1a:	4770      	bx	lr
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
    2f1c:	b410      	push	{r4}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    2f1e:	4b05      	ldr	r3, [pc, #20]	; (2f34 <usb_receive+0x20>)
    2f20:	2401      	movs	r4, #1
    2f22:	460a      	mov	r2, r1
    2f24:	fa04 f100 	lsl.w	r1, r4, r0
    2f28:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
}
    2f2c:	f85d 4b04 	ldr.w	r4, [sp], #4
void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    2f30:	f7ff bb84 	b.w	263c <schedule_transfer>
    2f34:	20025000 	.word	0x20025000

00002f38 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    2f38:	6840      	ldr	r0, [r0, #4]
#endif
}
    2f3a:	4770      	bx	lr

00002f3c <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    2f3c:	4a12      	ldr	r2, [pc, #72]	; (2f88 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    2f3e:	4b13      	ldr	r3, [pc, #76]	; (2f8c <usb_init_serialnumber+0x50>)
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    2f40:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    2f44:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    2f48:	4298      	cmp	r0, r3
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    2f4a:	b510      	push	{r4, lr}
    2f4c:	b084      	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    2f4e:	d802      	bhi.n	2f56 <usb_init_serialnumber+0x1a>
    2f50:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    2f54:	0040      	lsls	r0, r0, #1
    2f56:	4c0e      	ldr	r4, [pc, #56]	; (2f90 <usb_init_serialnumber+0x54>)
	ultoa(num, buf, 10);
    2f58:	a901      	add	r1, sp, #4
    2f5a:	220a      	movs	r2, #10
    2f5c:	f000 fdbe 	bl	3adc <ultoa>
    2f60:	a901      	add	r1, sp, #4
	for (i=0; i<10; i++) {
    2f62:	2300      	movs	r3, #0
    2f64:	4620      	mov	r0, r4
		char c = buf[i];
    2f66:	f811 2b01 	ldrb.w	r2, [r1], #1
    2f6a:	3301      	adds	r3, #1
		if (!c) break;
    2f6c:	b13a      	cbz	r2, 2f7e <usb_init_serialnumber+0x42>

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    2f6e:	2b0a      	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    2f70:	f820 2f02 	strh.w	r2, [r0, #2]!

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    2f74:	d1f7      	bne.n	2f66 <usb_init_serialnumber+0x2a>
    2f76:	2316      	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    2f78:	7023      	strb	r3, [r4, #0]
}
    2f7a:	b004      	add	sp, #16
    2f7c:	bd10      	pop	{r4, pc}
    2f7e:	005b      	lsls	r3, r3, #1
    2f80:	b2db      	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    2f82:	7023      	strb	r3, [r4, #0]
}
    2f84:	b004      	add	sp, #16
    2f86:	bd10      	pop	{r4, pc}
    2f88:	401f4400 	.word	0x401f4400
    2f8c:	0098967f 	.word	0x0098967f
    2f90:	20012284 	.word	0x20012284

00002f94 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    2f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    2f96:	4914      	ldr	r1, [pc, #80]	; (2fe8 <rx_queue_transfer+0x54>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    2f98:	f44f 3700 	mov.w	r7, #131072	; 0x20000
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    2f9c:	4d13      	ldr	r5, [pc, #76]	; (2fec <rx_queue_transfer+0x58>)
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    2f9e:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    2fa0:	eb01 2440 	add.w	r4, r1, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    2fa4:	4e12      	ldr	r6, [pc, #72]	; (2ff0 <rx_queue_transfer+0x5c>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    2fa6:	4a13      	ldr	r2, [pc, #76]	; (2ff4 <rx_queue_transfer+0x60>)
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    2fa8:	eb05 1540 	add.w	r5, r5, r0, lsl #5
    2fac:	4621      	mov	r1, r4
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    2fae:	6017      	str	r7, [r2, #0]
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    2fb0:	4628      	mov	r0, r5
    2fb2:	8832      	ldrh	r2, [r6, #0]
    2fb4:	f7ff ff82 	bl	2ebc <usb_prepare_transfer>
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    2fb8:	8831      	ldrh	r1, [r6, #0]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    2fba:	f024 031f 	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    2fbe:	4421      	add	r1, r4
	asm volatile("": : :"memory");
	asm("dsb");
    2fc0:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    2fc4:	4a0c      	ldr	r2, [pc, #48]	; (2ff8 <rx_queue_transfer+0x64>)
    2fc6:	6013      	str	r3, [r2, #0]
		location += 32;
    2fc8:	3320      	adds	r3, #32
	} while (location < end_addr);
    2fca:	4299      	cmp	r1, r3
    2fcc:	d8fb      	bhi.n	2fc6 <rx_queue_transfer+0x32>
	asm("dsb");
    2fce:	f3bf 8f4f 	dsb	sy
	asm("isb");
    2fd2:	f3bf 8f6f 	isb	sy
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    2fd6:	2003      	movs	r0, #3
    2fd8:	4629      	mov	r1, r5
    2fda:	f7ff ff9b 	bl	2f14 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    2fde:	4b07      	ldr	r3, [pc, #28]	; (2ffc <rx_queue_transfer+0x68>)
    2fe0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    2fe4:	601a      	str	r2, [r3, #0]
    2fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2fe8:	20200060 	.word	0x20200060
    2fec:	20022e20 	.word	0x20022e20
    2ff0:	20022f2e 	.word	0x20022f2e
    2ff4:	e000e18c 	.word	0xe000e18c
    2ff8:	e000ef5c 	.word	0xe000ef5c
    2ffc:	e000e10c 	.word	0xe000e10c

00003000 <rx_event>:
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    3000:	4a24      	ldr	r2, [pc, #144]	; (3094 <rx_event+0x94>)
    3002:	6843      	ldr	r3, [r0, #4]
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
    3004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    3008:	f3c3 430e 	ubfx	r3, r3, #16, #15
    300c:	8814      	ldrh	r4, [r2, #0]
	int i = t->callback_param;
    300e:	69c5      	ldr	r5, [r0, #28]
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    3010:	1ae4      	subs	r4, r4, r3
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    3012:	2c00      	cmp	r4, #0
    3014:	dd38      	ble.n	3088 <rx_event+0x88>
		// received a packet with data
		uint32_t head = rx_head;
    3016:	4920      	ldr	r1, [pc, #128]	; (3098 <rx_event+0x98>)
		if (head != rx_tail) {
    3018:	4a20      	ldr	r2, [pc, #128]	; (309c <rx_event+0x9c>)
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    301a:	780b      	ldrb	r3, [r1, #0]
		if (head != rx_tail) {
    301c:	7812      	ldrb	r2, [r2, #0]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    301e:	b2db      	uxtb	r3, r3
		if (head != rx_tail) {
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    3020:	481f      	ldr	r0, [pc, #124]	; (30a0 <rx_event+0xa0>)
			uint32_t count = rx_count[ii];
    3022:	4e20      	ldr	r6, [pc, #128]	; (30a4 <rx_event+0xa4>)
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
		if (head != rx_tail) {
    3024:	4293      	cmp	r3, r2
    3026:	d007      	beq.n	3038 <rx_event+0x38>
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    3028:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    302c:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    3030:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    3034:	4294      	cmp	r4, r2
    3036:	d912      	bls.n	305e <rx_event+0x5e>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    3038:	3301      	adds	r3, #1
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
    303a:	2200      	movs	r2, #0
    303c:	4f1a      	ldr	r7, [pc, #104]	; (30a8 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    303e:	2b08      	cmp	r3, #8
				// TODO: trigger serialEvent
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
    3040:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		rx_index[i] = 0;
    3044:	f827 2015 	strh.w	r2, [r7, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
		rx_head = head;
		rx_available += len;
    3048:	4e18      	ldr	r6, [pc, #96]	; (30ac <rx_event+0xac>)
    304a:	bf94      	ite	ls
    304c:	b2da      	uxtbls	r2, r3
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    304e:	4613      	movhi	r3, r2
		rx_list[head] = i;
		rx_head = head;
    3050:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    3052:	6832      	ldr	r2, [r6, #0]
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
    3054:	54c5      	strb	r5, [r0, r3]
		rx_head = head;
		rx_available += len;
    3056:	4414      	add	r4, r2
    3058:	6034      	str	r4, [r6, #0]
    305a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    305e:	4b14      	ldr	r3, [pc, #80]	; (30b0 <rx_event+0xb0>)
    3060:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    3064:	4622      	mov	r2, r4
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    3066:	4427      	add	r7, r4
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    3068:	eb03 2145 	add.w	r1, r3, r5, lsl #9
    306c:	4418      	add	r0, r3
    306e:	f000 fc9b 	bl	39a8 <memcpy>
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
    3072:	4a0e      	ldr	r2, [pc, #56]	; (30ac <rx_event+0xac>)
				rx_queue_transfer(i);
    3074:	4628      	mov	r0, r5
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    3076:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    307a:	6813      	ldr	r3, [r2, #0]
    307c:	441c      	add	r4, r3
    307e:	6014      	str	r4, [r2, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    3080:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
				rx_queue_transfer(i);
    3084:	f7ff bf86 	b.w	2f94 <rx_queue_transfer>
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    3088:	4628      	mov	r0, r5
	}
}
    308a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    308e:	f7ff bf81 	b.w	2f94 <rx_queue_transfer>
    3092:	bf00      	nop
    3094:	20022f2e 	.word	0x20022f2e
    3098:	20022f44 	.word	0x20022f44
    309c:	20022f20 	.word	0x20022f20
    30a0:	20022f24 	.word	0x20022f24
    30a4:	20022f30 	.word	0x20022f30
    30a8:	20022e0c 	.word	0x20022e0c
    30ac:	20022f40 	.word	0x20022f40
    30b0:	20200060 	.word	0x20200060

000030b4 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    30b4:	4b1e      	ldr	r3, [pc, #120]	; (3130 <usb_serial_flush_callback+0x7c>)
    30b6:	781a      	ldrb	r2, [r3, #0]
    30b8:	b95a      	cbnz	r2, 30d2 <usb_serial_flush_callback+0x1e>
    30ba:	f002 03ff 	and.w	r3, r2, #255	; 0xff
	if (!usb_configuration) return;
    30be:	4a1d      	ldr	r2, [pc, #116]	; (3134 <usb_serial_flush_callback+0x80>)
    30c0:	7812      	ldrb	r2, [r2, #0]
    30c2:	b132      	cbz	r2, 30d2 <usb_serial_flush_callback+0x1e>
	tx_available = 0;
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
    30c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
    30c8:	4d1b      	ldr	r5, [pc, #108]	; (3138 <usb_serial_flush_callback+0x84>)
    30ca:	882a      	ldrh	r2, [r5, #0]
    30cc:	b912      	cbnz	r2, 30d4 <usb_serial_flush_callback+0x20>
    30ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    30d2:	4770      	bx	lr
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    30d4:	4e19      	ldr	r6, [pc, #100]	; (313c <usb_serial_flush_callback+0x88>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    30d6:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    30da:	4f19      	ldr	r7, [pc, #100]	; (3140 <usb_serial_flush_callback+0x8c>)
    30dc:	7831      	ldrb	r1, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    30de:	4642      	mov	r2, r8
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    30e0:	4c18      	ldr	r4, [pc, #96]	; (3144 <usb_serial_flush_callback+0x90>)
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    30e2:	eb07 1741 	add.w	r7, r7, r1, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    30e6:	eb04 24c1 	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    30ea:	4638      	mov	r0, r7
    30ec:	4621      	mov	r1, r4
    30ee:	f7ff fee5 	bl	2ebc <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    30f2:	eb08 0204 	add.w	r2, r8, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    30f6:	f024 011f 	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    30fa:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    30fe:	4b12      	ldr	r3, [pc, #72]	; (3148 <usb_serial_flush_callback+0x94>)
    3100:	6019      	str	r1, [r3, #0]
		location += 32;
    3102:	3120      	adds	r1, #32
	} while (location < end_addr);
    3104:	428a      	cmp	r2, r1
    3106:	d8fb      	bhi.n	3100 <usb_serial_flush_callback+0x4c>
	asm("dsb");
    3108:	f3bf 8f4f 	dsb	sy
	asm("isb");
    310c:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    3110:	2004      	movs	r0, #4
    3112:	4639      	mov	r1, r7
    3114:	f7ff feea 	bl	2eec <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    3118:	7833      	ldrb	r3, [r6, #0]
    311a:	4a08      	ldr	r2, [pc, #32]	; (313c <usb_serial_flush_callback+0x88>)
    311c:	3301      	adds	r3, #1
    311e:	b2db      	uxtb	r3, r3
    3120:	2b03      	cmp	r3, #3
    3122:	bf88      	it	hi
    3124:	2300      	movhi	r3, #0
    3126:	7013      	strb	r3, [r2, #0]
	tx_available = 0;
    3128:	2300      	movs	r3, #0
    312a:	802b      	strh	r3, [r5, #0]
    312c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3130:	20022e1e 	.word	0x20022e1e
    3134:	20022e08 	.word	0x20022e08
    3138:	20022f46 	.word	0x20022f46
    313c:	20022e1f 	.word	0x20022e1f
    3140:	20022f60 	.word	0x20022f60
    3144:	20201060 	.word	0x20201060
    3148:	e000ef70 	.word	0xe000ef70

0000314c <usb_serial_write.part.1>:
{
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
    314c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3150:	b085      	sub	sp, #20
    3152:	9002      	str	r0, [sp, #8]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    3154:	9101      	str	r1, [sp, #4]
    3156:	2900      	cmp	r1, #0
    3158:	f000 80a2 	beq.w	32a0 <usb_serial_write.part.1+0x154>
    315c:	2300      	movs	r3, #0
    315e:	f8df 815c 	ldr.w	r8, [pc, #348]	; 32bc <usb_serial_write.part.1+0x170>
    3162:	f8df 914c 	ldr.w	r9, [pc, #332]	; 32b0 <usb_serial_write.part.1+0x164>
    3166:	9300      	str	r3, [sp, #0]
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
    3168:	4e4e      	ldr	r6, [pc, #312]	; (32a4 <usb_serial_write.part.1+0x158>)
    316a:	f8b8 3000 	ldrh.w	r3, [r8]
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    316e:	f8df a150 	ldr.w	sl, [pc, #336]	; 32c0 <usb_serial_write.part.1+0x174>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
	do {
		SCB_CACHE_DCCIMVAC = location;
    3172:	f8df b150 	ldr.w	fp, [pc, #336]	; 32c4 <usb_serial_write.part.1+0x178>
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
    3176:	4a4c      	ldr	r2, [pc, #304]	; (32a8 <usb_serial_write.part.1+0x15c>)
    3178:	7814      	ldrb	r4, [r2, #0]
    317a:	4a4c      	ldr	r2, [pc, #304]	; (32ac <usb_serial_write.part.1+0x160>)
    317c:	eb02 1744 	add.w	r7, r2, r4, lsl #5
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    3180:	2b00      	cmp	r3, #0
    3182:	d16e      	bne.n	3262 <usb_serial_write.part.1+0x116>
    3184:	461d      	mov	r5, r3
    3186:	461c      	mov	r4, r3
    3188:	e014      	b.n	31b4 <usb_serial_write.part.1+0x68>
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    318a:	f899 3000 	ldrb.w	r3, [r9]
				}
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
    318e:	b904      	cbnz	r4, 3192 <usb_serial_write.part.1+0x46>
				wait_begin_at = systick_millis_count;
    3190:	6835      	ldr	r5, [r6, #0]
    3192:	2401      	movs	r4, #1
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    3194:	2b00      	cmp	r3, #0
    3196:	d15e      	bne.n	3256 <usb_serial_write.part.1+0x10a>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    3198:	6833      	ldr	r3, [r6, #0]
    319a:	1b5b      	subs	r3, r3, r5
    319c:	2b78      	cmp	r3, #120	; 0x78
    319e:	d879      	bhi.n	3294 <usb_serial_write.part.1+0x148>
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    31a0:	f89a 3000 	ldrb.w	r3, [sl]
    31a4:	2b00      	cmp	r3, #0
    31a6:	d056      	beq.n	3256 <usb_serial_write.part.1+0x10a>
			yield();
    31a8:	f000 fb86 	bl	38b8 <yield>
	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    31ac:	f8b8 3000 	ldrh.w	r3, [r8]
    31b0:	2b00      	cmp	r3, #0
    31b2:	d154      	bne.n	325e <usb_serial_write.part.1+0x112>
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
    31b4:	4638      	mov	r0, r7
    31b6:	f7ff febf 	bl	2f38 <usb_transfer_status>
			if (!(status & 0x80)) {
    31ba:	f010 0080 	ands.w	r0, r0, #128	; 0x80
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    31be:	4a3c      	ldr	r2, [pc, #240]	; (32b0 <usb_serial_write.part.1+0x164>)
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
			if (!(status & 0x80)) {
    31c0:	d1e3      	bne.n	318a <usb_serial_write.part.1+0x3e>
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    31c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
    31c6:	4a38      	ldr	r2, [pc, #224]	; (32a8 <usb_serial_write.part.1+0x15c>)
				transmit_previous_timeout = 0;
    31c8:	f889 0000 	strb.w	r0, [r9]
    31cc:	7814      	ldrb	r4, [r2, #0]
    31ce:	461a      	mov	r2, r3
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    31d0:	f8a8 3000 	strh.w	r3, [r8]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    31d4:	02e4      	lsls	r4, r4, #11
		if (size >= tx_available) {
    31d6:	9d01      	ldr	r5, [sp, #4]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    31d8:	4936      	ldr	r1, [pc, #216]	; (32b4 <usb_serial_write.part.1+0x168>)
    31da:	4420      	add	r0, r4
		if (size >= tx_available) {
    31dc:	4295      	cmp	r5, r2
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    31de:	4408      	add	r0, r1
		if (size >= tx_available) {
    31e0:	d343      	bcc.n	326a <usb_serial_write.part.1+0x11e>
			memcpy(txdata, data, tx_available);
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    31e2:	440c      	add	r4, r1
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
    31e4:	9902      	ldr	r1, [sp, #8]
    31e6:	f000 fbdf 	bl	39a8 <memcpy>
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    31ea:	2300      	movs	r3, #0
    31ec:	4621      	mov	r1, r4
    31ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
    31f2:	4638      	mov	r0, r7
    31f4:	f7ff fe62 	bl	2ebc <usb_prepare_transfer>
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    31f8:	f024 031f 	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    31fc:	f504 6400 	add.w	r4, r4, #2048	; 0x800
	asm volatile("": : :"memory");
	asm("dsb");
    3200:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    3204:	f8cb 3000 	str.w	r3, [fp]
		location += 32;
    3208:	3320      	adds	r3, #32
	} while (location < end_addr);
    320a:	429c      	cmp	r4, r3
    320c:	d8fa      	bhi.n	3204 <usb_serial_write.part.1+0xb8>
	asm("dsb");
    320e:	f3bf 8f4f 	dsb	sy
	asm("isb");
    3212:	f3bf 8f6f 	isb	sy
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    3216:	2004      	movs	r0, #4
    3218:	4639      	mov	r1, r7
    321a:	f7ff fe67 	bl	2eec <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    321e:	4b22      	ldr	r3, [pc, #136]	; (32a8 <usb_serial_write.part.1+0x15c>)
    3220:	4a21      	ldr	r2, [pc, #132]	; (32a8 <usb_serial_write.part.1+0x15c>)
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
    3222:	2100      	movs	r1, #0
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    3224:	781b      	ldrb	r3, [r3, #0]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    3226:	4824      	ldr	r0, [pc, #144]	; (32b8 <usb_serial_write.part.1+0x16c>)
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    3228:	3301      	adds	r3, #1
    322a:	b2db      	uxtb	r3, r3
    322c:	2b03      	cmp	r3, #3
    322e:	bf88      	it	hi
    3230:	2300      	movhi	r3, #0
    3232:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    3234:	f8b8 2000 	ldrh.w	r2, [r8]
			sent += tx_available;
    3238:	9b00      	ldr	r3, [sp, #0]
			data += tx_available;
			tx_available = 0;
    323a:	f8a8 1000 	strh.w	r1, [r8]
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
			sent += tx_available;
    323e:	4413      	add	r3, r2
    3240:	9300      	str	r3, [sp, #0]
			data += tx_available;
    3242:	9b02      	ldr	r3, [sp, #8]
    3244:	4413      	add	r3, r2
    3246:	9302      	str	r3, [sp, #8]
    3248:	460b      	mov	r3, r1
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    324a:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    324e:	9901      	ldr	r1, [sp, #4]
    3250:	1a8a      	subs	r2, r1, r2
    3252:	9201      	str	r2, [sp, #4]
    3254:	d18f      	bne.n	3176 <usb_serial_write.part.1+0x2a>
    3256:	9800      	ldr	r0, [sp, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    3258:	b005      	add	sp, #20
    325a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    325e:	4a12      	ldr	r2, [pc, #72]	; (32a8 <usb_serial_write.part.1+0x15c>)
    3260:	7814      	ldrb	r4, [r2, #0]
    3262:	461a      	mov	r2, r3
    3264:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    3268:	e7b4      	b.n	31d4 <usb_serial_write.part.1+0x88>
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
    326a:	9c01      	ldr	r4, [sp, #4]
    326c:	9902      	ldr	r1, [sp, #8]
    326e:	4622      	mov	r2, r4
    3270:	9303      	str	r3, [sp, #12]
    3272:	f000 fb99 	bl	39a8 <memcpy>
			tx_available -= size;
    3276:	9b03      	ldr	r3, [sp, #12]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    3278:	4a0f      	ldr	r2, [pc, #60]	; (32b8 <usb_serial_write.part.1+0x16c>)
    327a:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
    327e:	1b1b      	subs	r3, r3, r4
    3280:	f8a8 3000 	strh.w	r3, [r8]
    3284:	9b00      	ldr	r3, [sp, #0]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    3286:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    328a:	4618      	mov	r0, r3
    328c:	4420      	add	r0, r4
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    328e:	b005      	add	sp, #20
    3290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    3294:	2301      	movs	r3, #1
				return sent;
    3296:	9800      	ldr	r0, [sp, #0]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    3298:	7013      	strb	r3, [r2, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    329a:	b005      	add	sp, #20
    329c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    32a0:	9801      	ldr	r0, [sp, #4]
    32a2:	e7d9      	b.n	3258 <usb_serial_write.part.1+0x10c>
    32a4:	20022dbc 	.word	0x20022dbc
    32a8:	20022e1f 	.word	0x20022e1f
    32ac:	20022f60 	.word	0x20022f60
    32b0:	20022f45 	.word	0x20022f45
    32b4:	20201060 	.word	0x20201060
    32b8:	402e0000 	.word	0x402e0000
    32bc:	20022f46 	.word	0x20022f46
    32c0:	20022e08 	.word	0x20022e08
    32c4:	e000ef70 	.word	0xe000ef70

000032c8 <usb_serial_reset>:
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);


void usb_serial_reset(void)
{
    32c8:	4770      	bx	lr
    32ca:	bf00      	nop

000032cc <usb_serial_configure>:
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    32cc:	4b31      	ldr	r3, [pc, #196]	; (3394 <usb_serial_configure+0xc8>)
	printf("usb_serial_reset\n");
	// deallocate all transfer descriptors
}

void usb_serial_configure(void)
{
    32ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    32d2:	781b      	ldrb	r3, [r3, #0]
		tx_packet_size = CDC_TX_SIZE_480;
    32d4:	4f30      	ldr	r7, [pc, #192]	; (3398 <usb_serial_configure+0xcc>)
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    32d6:	2b00      	cmp	r3, #0
    32d8:	d054      	beq.n	3384 <usb_serial_configure+0xb8>
		tx_packet_size = CDC_TX_SIZE_480;
    32da:	f44f 7300 	mov.w	r3, #512	; 0x200
		rx_packet_size = CDC_RX_SIZE_480;
    32de:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 33cc <usb_serial_configure+0x100>
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
    32e2:	803b      	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    32e4:	f8a8 3000 	strh.w	r3, [r8]
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    32e8:	2100      	movs	r1, #0
    32ea:	2280      	movs	r2, #128	; 0x80
    32ec:	482b      	ldr	r0, [pc, #172]	; (339c <usb_serial_configure+0xd0>)
	tx_head = 0;
    32ee:	460d      	mov	r5, r1
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    32f0:	4e2b      	ldr	r6, [pc, #172]	; (33a0 <usb_serial_configure+0xd4>)
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    32f2:	f001 fd3d 	bl	4d70 <memset>
	tx_head = 0;
    32f6:	4c2b      	ldr	r4, [pc, #172]	; (33a4 <usb_serial_configure+0xd8>)
	tx_available = 0;
    32f8:	4b2b      	ldr	r3, [pc, #172]	; (33a8 <usb_serial_configure+0xdc>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    32fa:	4629      	mov	r1, r5
    32fc:	f44f 7280 	mov.w	r2, #256	; 0x100
    3300:	482a      	ldr	r0, [pc, #168]	; (33ac <usb_serial_configure+0xe0>)
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    3302:	7025      	strb	r5, [r4, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    3304:	462c      	mov	r4, r5
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    3306:	801d      	strh	r5, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    3308:	f001 fd32 	bl	4d70 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    330c:	6035      	str	r5, [r6, #0]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    330e:	462b      	mov	r3, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    3310:	6075      	str	r5, [r6, #4]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    3312:	462a      	mov	r2, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    3314:	60b5      	str	r5, [r6, #8]
    3316:	60f5      	str	r5, [r6, #12]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    3318:	4925      	ldr	r1, [pc, #148]	; (33b0 <usb_serial_configure+0xe4>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    331a:	4e26      	ldr	r6, [pc, #152]	; (33b4 <usb_serial_configure+0xe8>)
	rx_head = 0;
	rx_tail = 0;
    331c:	4826      	ldr	r0, [pc, #152]	; (33b8 <usb_serial_configure+0xec>)
	rx_available = 0;
    331e:	f8df e0b0 	ldr.w	lr, [pc, #176]	; 33d0 <usb_serial_configure+0x104>
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    3322:	700d      	strb	r5, [r1, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    3324:	2110      	movs	r1, #16
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
    3326:	7005      	strb	r5, [r0, #0]
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    3328:	2002      	movs	r0, #2
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    332a:	6035      	str	r5, [r6, #0]
    332c:	6075      	str	r5, [r6, #4]
    332e:	60b5      	str	r5, [r6, #8]
    3330:	60f5      	str	r5, [r6, #12]
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
    3332:	f8ce 5000 	str.w	r5, [lr]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    3336:	f7ff fd8d 	bl	2e54 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    333a:	f8b8 1000 	ldrh.w	r1, [r8]
    333e:	462a      	mov	r2, r5
    3340:	4b1e      	ldr	r3, [pc, #120]	; (33bc <usb_serial_configure+0xf0>)
    3342:	2003      	movs	r0, #3
    3344:	f7ff fd54 	bl	2df0 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    3348:	462b      	mov	r3, r5
    334a:	8839      	ldrh	r1, [r7, #0]
    334c:	2201      	movs	r2, #1
    334e:	2004      	movs	r0, #4
    3350:	f7ff fd80 	bl	2e54 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    3354:	4620      	mov	r0, r4
    3356:	3401      	adds	r4, #1
    3358:	f7ff fe1c 	bl	2f94 <rx_queue_transfer>
    335c:	2c08      	cmp	r4, #8
    335e:	d1f9      	bne.n	3354 <usb_serial_configure+0x88>
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
	USB1_GPTIMER0CTRL = 0;
    3360:	4b17      	ldr	r3, [pc, #92]	; (33c0 <usb_serial_configure+0xf4>)
	USB1_GPTIMER0LD = microseconds - 1;
    3362:	224a      	movs	r2, #74	; 0x4a
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    3364:	4817      	ldr	r0, [pc, #92]	; (33c4 <usb_serial_configure+0xf8>)
	USB1_GPTIMER0CTRL = 0;
    3366:	2100      	movs	r1, #0
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    3368:	4c17      	ldr	r4, [pc, #92]	; (33c8 <usb_serial_configure+0xfc>)
    336a:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    336c:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    3370:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    3374:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    3378:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    337c:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    3380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    3384:	2340      	movs	r3, #64	; 0x40
		rx_packet_size = CDC_RX_SIZE_12;
    3386:	f8df 8044 	ldr.w	r8, [pc, #68]	; 33cc <usb_serial_configure+0x100>
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    338a:	803b      	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_12;
    338c:	f8a8 3000 	strh.w	r3, [r8]
    3390:	e7aa      	b.n	32e8 <usb_serial_configure+0x1c>
    3392:	bf00      	nop
    3394:	20022de0 	.word	0x20022de0
    3398:	20022e1c 	.word	0x20022e1c
    339c:	20022f60 	.word	0x20022f60
    33a0:	20022f30 	.word	0x20022f30
    33a4:	20022e1f 	.word	0x20022e1f
    33a8:	20022f46 	.word	0x20022f46
    33ac:	20022e20 	.word	0x20022e20
    33b0:	20022f44 	.word	0x20022f44
    33b4:	20022e0c 	.word	0x20022e0c
    33b8:	20022f20 	.word	0x20022f20
    33bc:	00003001 	.word	0x00003001
    33c0:	402e0000 	.word	0x402e0000
    33c4:	20022dd0 	.word	0x20022dd0
    33c8:	000030b5 	.word	0x000030b5
    33cc:	20022f2e 	.word	0x20022f2e
    33d0:	20022f40 	.word	0x20022f40

000033d4 <usb_serial_read>:
int usb_serial_read(void *buffer, uint32_t size)
{
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    33d4:	4b31      	ldr	r3, [pc, #196]	; (349c <usb_serial_read+0xc8>)
    33d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    33da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    33de:	601a      	str	r2, [r3, #0]

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    33e0:	b083      	sub	sp, #12
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    33e2:	4b2f      	ldr	r3, [pc, #188]	; (34a0 <usb_serial_read+0xcc>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    33e4:	4689      	mov	r9, r1
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    33e6:	781c      	ldrb	r4, [r3, #0]
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    33e8:	2900      	cmp	r1, #0
    33ea:	d053      	beq.n	3494 <usb_serial_read+0xc0>
    33ec:	4b2d      	ldr	r3, [pc, #180]	; (34a4 <usb_serial_read+0xd0>)
    33ee:	b2e4      	uxtb	r4, r4
    33f0:	781b      	ldrb	r3, [r3, #0]
    33f2:	429c      	cmp	r4, r3
    33f4:	d050      	beq.n	3498 <usb_serial_read+0xc4>
    33f6:	4682      	mov	sl, r0
    33f8:	2700      	movs	r7, #0
    33fa:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 34bc <usb_serial_read+0xe8>
		if (++tail > RX_NUM) tail = 0;
    33fe:	3401      	adds	r4, #1
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    3400:	4b29      	ldr	r3, [pc, #164]	; (34a8 <usb_serial_read+0xd4>)
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
    3402:	ebc7 0809 	rsb	r8, r7, r9
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    3406:	4650      	mov	r0, sl
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    3408:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    340a:	9301      	str	r3, [sp, #4]
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
    340c:	4b27      	ldr	r3, [pc, #156]	; (34ac <usb_serial_read+0xd8>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    340e:	bf28      	it	cs
    3410:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    3412:	5d1d      	ldrb	r5, [r3, r4]
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    3414:	4b24      	ldr	r3, [pc, #144]	; (34a8 <usb_serial_read+0xd4>)
    3416:	f833 e015 	ldrh.w	lr, [r3, r5, lsl #1]
    341a:	4b25      	ldr	r3, [pc, #148]	; (34b0 <usb_serial_read+0xdc>)
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    341c:	eb0e 2145 	add.w	r1, lr, r5, lsl #9
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    3420:	f833 6015 	ldrh.w	r6, [r3, r5, lsl #1]
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    3424:	4b23      	ldr	r3, [pc, #140]	; (34b4 <usb_serial_read+0xe0>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    3426:	ebce 0606 	rsb	r6, lr, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    342a:	4419      	add	r1, r3
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    342c:	45b0      	cmp	r8, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    342e:	4632      	mov	r2, r6
			p += avail;
			rx_available -= avail;
			count += avail;
    3430:	4437      	add	r7, r6
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    3432:	d219      	bcs.n	3468 <usb_serial_read+0x94>
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    3434:	eb0e 2145 	add.w	r1, lr, r5, lsl #9
    3438:	4642      	mov	r2, r8
    343a:	4419      	add	r1, r3
    343c:	f000 fab4 	bl	39a8 <memcpy>
			rx_available -= len;
			rx_index[i] += len;
    3440:	9b01      	ldr	r3, [sp, #4]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    3442:	f8db 1000 	ldr.w	r1, [fp]
    3446:	4648      	mov	r0, r9
			rx_index[i] += len;
    3448:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    344c:	ebc8 0101 	rsb	r1, r8, r1
			rx_index[i] += len;
    3450:	4490      	add	r8, r2
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    3452:	f8cb 1000 	str.w	r1, [fp]
			rx_index[i] += len;
    3456:	f823 8015 	strh.w	r8, [r3, r5, lsl #1]
			count += avail;
			rx_tail = tail;
			rx_queue_transfer(i);
		}
	}
	NVIC_ENABLE_IRQ(IRQ_USB1);
    345a:	4b17      	ldr	r3, [pc, #92]	; (34b8 <usb_serial_read+0xe4>)
    345c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    3460:	601a      	str	r2, [r3, #0]
	return count;
}
    3462:	b003      	add	sp, #12
    3464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    3468:	f000 fa9e 	bl	39a8 <memcpy>
			p += avail;
			rx_available -= avail;
    346c:	f8db 2000 	ldr.w	r2, [fp]
			count += avail;
			rx_tail = tail;
    3470:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
    3472:	4628      	mov	r0, r5
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
			rx_available -= avail;
    3474:	1b92      	subs	r2, r2, r6
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
    3476:	44b2      	add	sl, r6
			rx_available -= avail;
    3478:	f8cb 2000 	str.w	r2, [fp]
			count += avail;
			rx_tail = tail;
    347c:	4a08      	ldr	r2, [pc, #32]	; (34a0 <usb_serial_read+0xcc>)
    347e:	7013      	strb	r3, [r2, #0]
			rx_queue_transfer(i);
    3480:	f7ff fd88 	bl	2f94 <rx_queue_transfer>

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    3484:	45b9      	cmp	r9, r7
    3486:	d903      	bls.n	3490 <usb_serial_read+0xbc>
    3488:	4b06      	ldr	r3, [pc, #24]	; (34a4 <usb_serial_read+0xd0>)
    348a:	781b      	ldrb	r3, [r3, #0]
    348c:	429c      	cmp	r4, r3
    348e:	d1b6      	bne.n	33fe <usb_serial_read+0x2a>
    3490:	4638      	mov	r0, r7
    3492:	e7e2      	b.n	345a <usb_serial_read+0x86>
    3494:	4608      	mov	r0, r1
    3496:	e7e0      	b.n	345a <usb_serial_read+0x86>
    3498:	2000      	movs	r0, #0
    349a:	e7de      	b.n	345a <usb_serial_read+0x86>
    349c:	e000e18c 	.word	0xe000e18c
    34a0:	20022f20 	.word	0x20022f20
    34a4:	20022f44 	.word	0x20022f44
    34a8:	20022e0c 	.word	0x20022e0c
    34ac:	20022f24 	.word	0x20022f24
    34b0:	20022f30 	.word	0x20022f30
    34b4:	20200060 	.word	0x20200060
    34b8:	e000e10c 	.word	0xe000e10c
    34bc:	20022f40 	.word	0x20022f40

000034c0 <usb_serial_peekchar>:
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    34c0:	4b0b      	ldr	r3, [pc, #44]	; (34f0 <usb_serial_peekchar+0x30>)
	if (tail == rx_head) return -1;
    34c2:	4a0c      	ldr	r2, [pc, #48]	; (34f4 <usb_serial_peekchar+0x34>)
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    34c4:	781b      	ldrb	r3, [r3, #0]
	if (tail == rx_head) return -1;
    34c6:	7812      	ldrb	r2, [r2, #0]
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    34c8:	b2db      	uxtb	r3, r3
	if (tail == rx_head) return -1;
    34ca:	4293      	cmp	r3, r2
    34cc:	d00d      	beq.n	34ea <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    34ce:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    34d0:	4809      	ldr	r0, [pc, #36]	; (34f8 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    34d2:	4a0a      	ldr	r2, [pc, #40]	; (34fc <usb_serial_peekchar+0x3c>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    34d4:	2b09      	cmp	r3, #9
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    34d6:	490a      	ldr	r1, [pc, #40]	; (3500 <usb_serial_peekchar+0x40>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    34d8:	bf28      	it	cs
    34da:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    34dc:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    34de:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
    34e2:	eb02 2343 	add.w	r3, r2, r3, lsl #9
    34e6:	5c58      	ldrb	r0, [r3, r1]
    34e8:	4770      	bx	lr

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
    34ea:	f04f 30ff 	mov.w	r0, #4294967295
	if (++tail > RX_NUM) tail = 0;
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
}
    34ee:	4770      	bx	lr
    34f0:	20022f20 	.word	0x20022f20
    34f4:	20022f44 	.word	0x20022f44
    34f8:	20022f24 	.word	0x20022f24
    34fc:	20200060 	.word	0x20200060
    3500:	20022e0c 	.word	0x20022e0c

00003504 <usb_serial_available>:

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	return rx_available;
    3504:	4b01      	ldr	r3, [pc, #4]	; (350c <usb_serial_available+0x8>)
    3506:	6818      	ldr	r0, [r3, #0]
}
    3508:	4770      	bx	lr
    350a:	bf00      	nop
    350c:	20022f40 	.word	0x20022f40

00003510 <usb_serial_flush_input>:

// discard any buffered input
void usb_serial_flush_input(void)
{
    3510:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    3514:	4e15      	ldr	r6, [pc, #84]	; (356c <usb_serial_flush_input+0x5c>)
	while (tail != rx_head) {
    3516:	4d16      	ldr	r5, [pc, #88]	; (3570 <usb_serial_flush_input+0x60>)
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    3518:	7834      	ldrb	r4, [r6, #0]
	while (tail != rx_head) {
    351a:	782b      	ldrb	r3, [r5, #0]
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    351c:	b2e4      	uxtb	r4, r4
	while (tail != rx_head) {
    351e:	429c      	cmp	r4, r3
    3520:	d021      	beq.n	3566 <usb_serial_flush_input+0x56>
    3522:	f8df 9054 	ldr.w	r9, [pc, #84]	; 3578 <usb_serial_flush_input+0x68>
    3526:	f8df b054 	ldr.w	fp, [pc, #84]	; 357c <usb_serial_flush_input+0x6c>
    352a:	f8df 8054 	ldr.w	r8, [pc, #84]	; 3580 <usb_serial_flush_input+0x70>
    352e:	4f11      	ldr	r7, [pc, #68]	; (3574 <usb_serial_flush_input+0x64>)
		if (++tail > RX_NUM) tail = 0;
    3530:	3401      	adds	r4, #1
    3532:	2c08      	cmp	r4, #8
    3534:	fa5f fa84 	uxtb.w	sl, r4
    3538:	d901      	bls.n	353e <usb_serial_flush_input+0x2e>
    353a:	2400      	movs	r4, #0
    353c:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
    353e:	f819 1004 	ldrb.w	r1, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    3542:	f8db 2000 	ldr.w	r2, [fp]
    3546:	f838 3011 	ldrh.w	r3, [r8, r1, lsl #1]
		rx_queue_transfer(i);
    354a:	4608      	mov	r0, r1
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		rx_available -= rx_count[i] - rx_index[i];
    354c:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
    3550:	1a5b      	subs	r3, r3, r1
    3552:	1ad3      	subs	r3, r2, r3
    3554:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
    3558:	f7ff fd1c 	bl	2f94 <rx_queue_transfer>
		rx_tail = tail;
    355c:	f886 a000 	strb.w	sl, [r6]

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
    3560:	782b      	ldrb	r3, [r5, #0]
    3562:	429c      	cmp	r4, r3
    3564:	d1e4      	bne.n	3530 <usb_serial_flush_input+0x20>
    3566:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    356a:	bf00      	nop
    356c:	20022f20 	.word	0x20022f20
    3570:	20022f44 	.word	0x20022f44
    3574:	20022e0c 	.word	0x20022e0c
    3578:	20022f24 	.word	0x20022f24
    357c:	20022f40 	.word	0x20022f40
    3580:	20022f30 	.word	0x20022f30

00003584 <usb_serial_getchar>:
}


// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    3584:	b500      	push	{lr}
    3586:	b083      	sub	sp, #12
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
    3588:	2101      	movs	r1, #1
    358a:	f10d 0007 	add.w	r0, sp, #7
    358e:	f7ff ff21 	bl	33d4 <usb_serial_read>
    3592:	b120      	cbz	r0, 359e <usb_serial_getchar+0x1a>
    3594:	f89d 0007 	ldrb.w	r0, [sp, #7]
	return -1;
}
    3598:	b003      	add	sp, #12
    359a:	f85d fb04 	ldr.w	pc, [sp], #4
// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
	return -1;
    359e:	f04f 30ff 	mov.w	r0, #4294967295
    35a2:	e7f9      	b.n	3598 <usb_serial_getchar+0x14>

000035a4 <usb_serial_putchar>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    35a4:	4b09      	ldr	r3, [pc, #36]	; (35cc <usb_serial_putchar+0x28>)
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    35a6:	b500      	push	{lr}
    35a8:	b083      	sub	sp, #12
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    35aa:	781b      	ldrb	r3, [r3, #0]
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    35ac:	f88d 0007 	strb.w	r0, [sp, #7]
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    35b0:	b923      	cbnz	r3, 35bc <usb_serial_putchar+0x18>
    35b2:	f003 00ff 	and.w	r0, r3, #255	; 0xff

// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
	return usb_serial_write(&c, 1);
}
    35b6:	b003      	add	sp, #12
    35b8:	f85d fb04 	ldr.w	pc, [sp], #4
    35bc:	2101      	movs	r1, #1
    35be:	f10d 0007 	add.w	r0, sp, #7
    35c2:	f7ff fdc3 	bl	314c <usb_serial_write.part.1>
    35c6:	b003      	add	sp, #12
    35c8:	f85d fb04 	ldr.w	pc, [sp], #4
    35cc:	20022e08 	.word	0x20022e08

000035d0 <usb_serial_write>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    35d0:	4b04      	ldr	r3, [pc, #16]	; (35e4 <usb_serial_write+0x14>)
    35d2:	781b      	ldrb	r3, [r3, #0]
    35d4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    35d8:	b10b      	cbz	r3, 35de <usb_serial_write+0xe>
    35da:	f7ff bdb7 	b.w	314c <usb_serial_write.part.1>
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    35de:	4610      	mov	r0, r2
    35e0:	4770      	bx	lr
    35e2:	bf00      	nop
    35e4:	20022e08 	.word	0x20022e08

000035e8 <usb_serial_write_buffer_free>:

int usb_serial_write_buffer_free(void)
{
    35e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    35ec:	2400      	movs	r4, #0
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
    35ee:	f8df 8040 	ldr.w	r8, [pc, #64]	; 3630 <usb_serial_write_buffer_free+0x48>
    35f2:	2301      	movs	r3, #1
    35f4:	4d0c      	ldr	r5, [pc, #48]	; (3628 <usb_serial_write_buffer_free+0x40>)
	return sent;
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
    35f6:	4627      	mov	r7, r4
    35f8:	4e0c      	ldr	r6, [pc, #48]	; (362c <usb_serial_write_buffer_free+0x44>)
	tx_noautoflush = 1;
    35fa:	f888 3000 	strb.w	r3, [r8]
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    35fe:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    3600:	4628      	mov	r0, r5
    3602:	3520      	adds	r5, #32
int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    3604:	42a3      	cmp	r3, r4

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    3606:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
    360a:	d005      	beq.n	3618 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    360c:	f7ff fc94 	bl	2f38 <usb_transfer_status>
    3610:	0603      	lsls	r3, r0, #24
    3612:	bf58      	it	pl
    3614:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    3618:	2c04      	cmp	r4, #4
    361a:	d1f0      	bne.n	35fe <usb_serial_write_buffer_free+0x16>
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    361c:	2300      	movs	r3, #0
	return sum;
}
    361e:	4638      	mov	r0, r7
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    3620:	f888 3000 	strb.w	r3, [r8]
	return sum;
}
    3624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3628:	20022f60 	.word	0x20022f60
    362c:	20022e1f 	.word	0x20022e1f
    3630:	20022e1e 	.word	0x20022e1e

00003634 <usb_serial_flush_output>:

void usb_serial_flush_output(void)
{
    3634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	if (!usb_configuration) return;
    3638:	4b1f      	ldr	r3, [pc, #124]	; (36b8 <usb_serial_flush_output+0x84>)
    363a:	781b      	ldrb	r3, [r3, #0]
    363c:	b113      	cbz	r3, 3644 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    363e:	4d1f      	ldr	r5, [pc, #124]	; (36bc <usb_serial_flush_output+0x88>)
    3640:	882a      	ldrh	r2, [r5, #0]
    3642:	b90a      	cbnz	r2, 3648 <usb_serial_flush_output+0x14>
    3644:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    3648:	f8df 8084 	ldr.w	r8, [pc, #132]	; 36d0 <usb_serial_flush_output+0x9c>
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    364c:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    3650:	4e1b      	ldr	r6, [pc, #108]	; (36c0 <usb_serial_flush_output+0x8c>)
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    3652:	f04f 0e01 	mov.w	lr, #1
	transfer_t *xfer = tx_transfer + tx_head;
    3656:	f898 1000 	ldrb.w	r1, [r8]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    365a:	464a      	mov	r2, r9

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    365c:	4c19      	ldr	r4, [pc, #100]	; (36c4 <usb_serial_flush_output+0x90>)
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    365e:	2300      	movs	r3, #0
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    3660:	eb06 1641 	add.w	r6, r6, r1, lsl #5
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    3664:	4f18      	ldr	r7, [pc, #96]	; (36c8 <usb_serial_flush_output+0x94>)
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    3666:	eb04 24c1 	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    366a:	4630      	mov	r0, r6
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    366c:	f887 e000 	strb.w	lr, [r7]
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    3670:	4621      	mov	r1, r4
    3672:	f7ff fc23 	bl	2ebc <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    3676:	eb09 0204 	add.w	r2, r9, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    367a:	f024 011f 	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    367e:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    3682:	4b12      	ldr	r3, [pc, #72]	; (36cc <usb_serial_flush_output+0x98>)
    3684:	6019      	str	r1, [r3, #0]
		location += 32;
    3686:	3120      	adds	r1, #32
	} while (location < end_addr);
    3688:	428a      	cmp	r2, r1
    368a:	d8fb      	bhi.n	3684 <usb_serial_flush_output+0x50>
	asm("dsb");
    368c:	f3bf 8f4f 	dsb	sy
	asm("isb");
    3690:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    3694:	2004      	movs	r0, #4
    3696:	4631      	mov	r1, r6
    3698:	f7ff fc28 	bl	2eec <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    369c:	f898 3000 	ldrb.w	r3, [r8]
    36a0:	4a0b      	ldr	r2, [pc, #44]	; (36d0 <usb_serial_flush_output+0x9c>)
    36a2:	3301      	adds	r3, #1
    36a4:	b2db      	uxtb	r3, r3
    36a6:	2b03      	cmp	r3, #3
    36a8:	bf88      	it	hi
    36aa:	2300      	movhi	r3, #0
    36ac:	7013      	strb	r3, [r2, #0]
	tx_available = 0;
    36ae:	2300      	movs	r3, #0
    36b0:	802b      	strh	r3, [r5, #0]
	tx_noautoflush = 0;
    36b2:	703b      	strb	r3, [r7, #0]
    36b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    36b8:	20022e08 	.word	0x20022e08
    36bc:	20022f46 	.word	0x20022f46
    36c0:	20022f60 	.word	0x20022f60
    36c4:	20201060 	.word	0x20201060
    36c8:	20022e1e 	.word	0x20022e1e
    36cc:	e000ef70 	.word	0xe000ef70
    36d0:	20022e1f 	.word	0x20022e1f

000036d4 <DMAChannel::begin(bool)>:
#warning "CR is defined as something?"
#endif


void DMAChannel::begin(bool force_initialization)
{
    36d4:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t ch = 0;

	__disable_irq();
    36d6:	b672      	cpsid	i
	if (!force_initialization && TCD && channel < DMA_MAX_CHANNELS
    36d8:	b989      	cbnz	r1, 36fe <DMAChannel::begin(bool)+0x2a>
    36da:	6802      	ldr	r2, [r0, #0]
    36dc:	b17a      	cbz	r2, 36fe <DMAChannel::begin(bool)+0x2a>
    36de:	7903      	ldrb	r3, [r0, #4]
    36e0:	2b0f      	cmp	r3, #15
    36e2:	d80c      	bhi.n	36fe <DMAChannel::begin(bool)+0x2a>
	  && (dma_channel_allocated_mask & (1 << channel))
    36e4:	4c1f      	ldr	r4, [pc, #124]	; (3764 <DMAChannel::begin(bool)+0x90>)
    36e6:	8821      	ldrh	r1, [r4, #0]
    36e8:	fa41 f503 	asr.w	r5, r1, r3
    36ec:	07ed      	lsls	r5, r5, #31
    36ee:	d508      	bpl.n	3702 <DMAChannel::begin(bool)+0x2e>
	  && (uint32_t)TCD == (uint32_t)(0x400E9000 + channel * 32)) {
    36f0:	4d1d      	ldr	r5, [pc, #116]	; (3768 <DMAChannel::begin(bool)+0x94>)
    36f2:	441d      	add	r5, r3
    36f4:	ebb2 1f45 	cmp.w	r2, r5, lsl #5
    36f8:	d103      	bne.n	3702 <DMAChannel::begin(bool)+0x2e>
		// DMA channel already allocated
		__enable_irq();
    36fa:	b662      	cpsie	i
		return;
    36fc:	e00e      	b.n	371c <DMAChannel::begin(bool)+0x48>
    36fe:	4c19      	ldr	r4, [pc, #100]	; (3764 <DMAChannel::begin(bool)+0x90>)
    3700:	8821      	ldrh	r1, [r4, #0]
#warning "CR is defined as something?"
#endif


void DMAChannel::begin(bool force_initialization)
{
    3702:	2300      	movs	r3, #0
		// DMA channel already allocated
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
    3704:	fa41 f203 	asr.w	r2, r1, r3
    3708:	f012 0201 	ands.w	r2, r2, #1
    370c:	d008      	beq.n	3720 <DMAChannel::begin(bool)+0x4c>
			dma_channel_allocated_mask |= (1 << ch);
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
    370e:	3301      	adds	r3, #1
    3710:	2b10      	cmp	r3, #16
    3712:	d1f7      	bne.n	3704 <DMAChannel::begin(bool)+0x30>
			__enable_irq();
    3714:	b662      	cpsie	i
			TCD = (TCD_t *)0;
    3716:	2200      	movs	r2, #0
			channel = DMA_MAX_CHANNELS;
    3718:	7103      	strb	r3, [r0, #4]
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
			__enable_irq();
			TCD = (TCD_t *)0;
    371a:	6002      	str	r2, [r0, #0]
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
}
    371c:	bcf0      	pop	{r4, r5, r6, r7}
    371e:	4770      	bx	lr
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
			dma_channel_allocated_mask |= (1 << ch);
    3720:	2501      	movs	r5, #1
    3722:	409d      	lsls	r5, r3
    3724:	4329      	orrs	r1, r5
    3726:	8021      	strh	r1, [r4, #0]
			__enable_irq();
    3728:	b662      	cpsie	i
			// attempts to use this object will hardfault
		}
	}
	channel = ch;

	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    372a:	4e10      	ldr	r6, [pc, #64]	; (376c <DMAChannel::begin(bool)+0x98>)
			channel = DMA_MAX_CHANNELS;
			return; // no more channels available
			// attempts to use this object will hardfault
		}
	}
	channel = ch;
    372c:	b2dc      	uxtb	r4, r3
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    372e:	490e      	ldr	r1, [pc, #56]	; (3768 <DMAChannel::begin(bool)+0x94>)
		}
	}
	channel = ch;

	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
    3730:	f240 4782 	movw	r7, #1154	; 0x482
			channel = DMA_MAX_CHANNELS;
			return; // no more channels available
			// attempts to use this object will hardfault
		}
	}
	channel = ch;
    3734:	7104      	strb	r4, [r0, #4]
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    3736:	4419      	add	r1, r3
			// attempts to use this object will hardfault
		}
	}
	channel = ch;

	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    3738:	6ff5      	ldr	r5, [r6, #124]	; 0x7c
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    373a:	014b      	lsls	r3, r1, #5
			// attempts to use this object will hardfault
		}
	}
	channel = ch;

	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    373c:	f045 05c0 	orr.w	r5, r5, #192	; 0xc0
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
    3740:	490b      	ldr	r1, [pc, #44]	; (3770 <DMAChannel::begin(bool)+0x9c>)
			// attempts to use this object will hardfault
		}
	}
	channel = ch;

	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    3742:	67f5      	str	r5, [r6, #124]	; 0x7c
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
    3744:	600f      	str	r7, [r1, #0]
	DMA_CERQ = ch;
    3746:	768c      	strb	r4, [r1, #26]
	DMA_CERR = ch;
    3748:	778c      	strb	r4, [r1, #30]
	DMA_CEEI = ch;
    374a:	760c      	strb	r4, [r1, #24]
	DMA_CINT = ch;
    374c:	77cc      	strb	r4, [r1, #31]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    374e:	6003      	str	r3, [r0, #0]
	uint32_t *p = (uint32_t *)TCD;
	*p++ = 0;
    3750:	601a      	str	r2, [r3, #0]
	*p++ = 0;
    3752:	605a      	str	r2, [r3, #4]
	*p++ = 0;
    3754:	609a      	str	r2, [r3, #8]
	*p++ = 0;
    3756:	60da      	str	r2, [r3, #12]
	*p++ = 0;
    3758:	611a      	str	r2, [r3, #16]
	*p++ = 0;
    375a:	615a      	str	r2, [r3, #20]
	*p++ = 0;
    375c:	619a      	str	r2, [r3, #24]
	*p++ = 0;
    375e:	61da      	str	r2, [r3, #28]
}
    3760:	bcf0      	pop	{r4, r5, r6, r7}
    3762:	4770      	bx	lr
    3764:	20022fe0 	.word	0x20022fe0
    3768:	02007480 	.word	0x02007480
    376c:	400fc000 	.word	0x400fc000
    3770:	400e8000 	.word	0x400e8000

00003774 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    3774:	b570      	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3776:	f3ef 8110 	mrs	r1, PRIMASK
		__disable_irq();
    377a:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    377c:	4c0c      	ldr	r4, [pc, #48]	; (37b0 <EventResponder::runFromInterrupt()+0x3c>)
    377e:	6823      	ldr	r3, [r4, #0]
		if (first) {
    3780:	b18b      	cbz	r3, 37a6 <EventResponder::runFromInterrupt()+0x32>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    3782:	4e0c      	ldr	r6, [pc, #48]	; (37b4 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    3784:	2500      	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    3786:	695a      	ldr	r2, [r3, #20]
    3788:	6022      	str	r2, [r4, #0]
			if (firstInterrupt) {
    378a:	b17a      	cbz	r2, 37ac <EventResponder::runFromInterrupt()+0x38>
				firstInterrupt->_prev = nullptr;
    378c:	6195      	str	r5, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    378e:	b901      	cbnz	r1, 3792 <EventResponder::runFromInterrupt()+0x1e>
    3790:	b662      	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    3792:	775d      	strb	r5, [r3, #29]
			(*(first->_function))(*first);
    3794:	4618      	mov	r0, r3
    3796:	689b      	ldr	r3, [r3, #8]
    3798:	4798      	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    379a:	f3ef 8110 	mrs	r1, PRIMASK
		__disable_irq();
    379e:	b672      	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    37a0:	6823      	ldr	r3, [r4, #0]
		if (first) {
    37a2:	2b00      	cmp	r3, #0
    37a4:	d1ef      	bne.n	3786 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    37a6:	b901      	cbnz	r1, 37aa <EventResponder::runFromInterrupt()+0x36>
    37a8:	b662      	cpsie	i
    37aa:	bd70      	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    37ac:	6032      	str	r2, [r6, #0]
    37ae:	e7ee      	b.n	378e <EventResponder::runFromInterrupt()+0x1a>
    37b0:	20022fe4 	.word	0x20022fe4
    37b4:	20022fe8 	.word	0x20022fe8

000037b8 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

extern "C" void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    37b8:	f7ff bfdc 	b.w	3774 <EventResponder::runFromInterrupt()>

000037bc <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    37bc:	4a04      	ldr	r2, [pc, #16]	; (37d0 <systick_isr+0x14>)
    37be:	4b05      	ldr	r3, [pc, #20]	; (37d4 <systick_isr+0x18>)
    37c0:	6811      	ldr	r1, [r2, #0]
	systick_millis_count++;
    37c2:	4a05      	ldr	r2, [pc, #20]	; (37d8 <systick_isr+0x1c>)
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    37c4:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    37c6:	6813      	ldr	r3, [r2, #0]
    37c8:	3301      	adds	r3, #1
    37ca:	6013      	str	r3, [r2, #0]
    37cc:	4770      	bx	lr
    37ce:	bf00      	nop
    37d0:	e0001004 	.word	0xe0001004
    37d4:	20022db4 	.word	0x20022db4
    37d8:	20022dbc 	.word	0x20022dbc

000037dc <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    37dc:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    37de:	f7fc ffe3 	bl	7a8 <setup>
	while (1) {
		loop();
    37e2:	f7fd f883 	bl	8ec <loop>
		yield();
    37e6:	f000 f867 	bl	38b8 <yield>
    37ea:	e7fa      	b.n	37e2 <main+0x6>

000037ec <operator new(unsigned int)>:
    37ec:	f001 b800 	b.w	47f0 <malloc>

000037f0 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    37f0:	b510      	push	{r4, lr}
	uint8_t buf[2]={'\r', '\n'};
    37f2:	4c06      	ldr	r4, [pc, #24]	; (380c <Print::println()+0x1c>)
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    37f4:	b082      	sub	sp, #8
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    37f6:	6803      	ldr	r3, [r0, #0]
    37f8:	2202      	movs	r2, #2
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    37fa:	8824      	ldrh	r4, [r4, #0]
	return write(buf, 2);
    37fc:	a901      	add	r1, sp, #4
    37fe:	685b      	ldr	r3, [r3, #4]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    3800:	f8ad 4004 	strh.w	r4, [sp, #4]
	return write(buf, 2);
    3804:	4798      	blx	r3
}
    3806:	b002      	add	sp, #8
    3808:	bd10      	pop	{r4, pc}
    380a:	bf00      	nop
    380c:	200003d4 	.word	0x200003d4

00003810 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	return vdprintf((int)this, (const char *)format, ap);
#endif
}

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    3810:	b5f0      	push	{r4, r5, r6, r7, lr}
    3812:	4606      	mov	r6, r0
    3814:	b08b      	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    3816:	2a00      	cmp	r2, #0
    3818:	d033      	beq.n	3882 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    381a:	2a01      	cmp	r2, #1
    381c:	bf08      	it	eq
    381e:	220a      	moveq	r2, #10
	}


	if (n == 0) {
    3820:	b351      	cbz	r1, 3878 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    3822:	2521      	movs	r5, #33	; 0x21
    3824:	e000      	b.n	3828 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    3826:	b2fd      	uxtb	r5, r7
    3828:	1e6f      	subs	r7, r5, #1
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    382a:	fbb1 f4f2 	udiv	r4, r1, r2
    382e:	fb02 1114 	mls	r1, r2, r4, r1
    3832:	b2c8      	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    3834:	2909      	cmp	r1, #9
    3836:	f100 0137 	add.w	r1, r0, #55	; 0x37
    383a:	f100 0030 	add.w	r0, r0, #48	; 0x30
    383e:	bf88      	it	hi
    3840:	b2c8      	uxtbhi	r0, r1
			n /= base;
			if (n == 0) break;
    3842:	4621      	mov	r1, r4
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    3844:	ac0a      	add	r4, sp, #40	; 0x28
    3846:	bf98      	it	ls
    3848:	b2c0      	uxtbls	r0, r0
    384a:	442c      	add	r4, r5
    384c:	f804 0c24 	strb.w	r0, [r4, #-36]
			n /= base;
			if (n == 0) break;
    3850:	2900      	cmp	r1, #0
    3852:	d1e8      	bne.n	3826 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    3854:	b133      	cbz	r3, 3864 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    3856:	3d01      	subs	r5, #1
		buf[i] = '-';
    3858:	ab0a      	add	r3, sp, #40	; 0x28
    385a:	222d      	movs	r2, #45	; 0x2d
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
		i--;
    385c:	b2ed      	uxtb	r5, r5
		buf[i] = '-';
    385e:	442b      	add	r3, r5
    3860:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    3864:	6833      	ldr	r3, [r6, #0]
    3866:	a901      	add	r1, sp, #4
    3868:	f1c5 0222 	rsb	r2, r5, #34	; 0x22
    386c:	4630      	mov	r0, r6
    386e:	4429      	add	r1, r5
    3870:	685b      	ldr	r3, [r3, #4]
    3872:	4798      	blx	r3
}
    3874:	b00b      	add	sp, #44	; 0x2c
    3876:	bdf0      	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    3878:	2230      	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    387a:	2521      	movs	r5, #33	; 0x21
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    387c:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
    3880:	e7e8      	b.n	3854 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    3882:	6803      	ldr	r3, [r0, #0]
    3884:	b2c9      	uxtb	r1, r1
    3886:	681b      	ldr	r3, [r3, #0]
    3888:	4798      	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    388a:	b00b      	add	sp, #44	; 0x2c
    388c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    388e:	bf00      	nop

00003890 <usb_serial_class::clear()>:
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    3890:	f7ff be3e 	b.w	3510 <usb_serial_flush_input>

00003894 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    3894:	f7ff be14 	b.w	34c0 <usb_serial_peekchar>

00003898 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    3898:	f7ff be74 	b.w	3584 <usb_serial_getchar>

0000389c <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    389c:	f7ff be32 	b.w	3504 <usb_serial_available>

000038a0 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    38a0:	f7ff bec8 	b.w	3634 <usb_serial_flush_output>

000038a4 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    38a4:	f7ff bea0 	b.w	35e8 <usb_serial_write_buffer_free>

000038a8 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    38a8:	4608      	mov	r0, r1
    38aa:	4611      	mov	r1, r2
    38ac:	f7ff be90 	b.w	35d0 <usb_serial_write>

000038b0 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    38b0:	4608      	mov	r0, r1
    38b2:	f7ff be77 	b.w	35a4 <usb_serial_putchar>
    38b6:	bf00      	nop

000038b8 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    38b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    38bc:	4e32      	ldr	r6, [pc, #200]	; (3988 <yield+0xd0>)
    38be:	7833      	ldrb	r3, [r6, #0]
    38c0:	b193      	cbz	r3, 38e8 <yield+0x30>
	if (running) return; // TODO: does this need to be atomic?
    38c2:	4f32      	ldr	r7, [pc, #200]	; (398c <yield+0xd4>)
    38c4:	783a      	ldrb	r2, [r7, #0]
    38c6:	b97a      	cbnz	r2, 38e8 <yield+0x30>
	running = 1;
    38c8:	2201      	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    38ca:	07d9      	lsls	r1, r3, #31
void yield(void)
{
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    38cc:	703a      	strb	r2, [r7, #0]


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    38ce:	d437      	bmi.n	3940 <yield+0x88>
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();
    38d0:	079a      	lsls	r2, r3, #30
    38d2:	d419      	bmi.n	3908 <yield+0x50>

	running = 0;
    38d4:	2200      	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    38d6:	075b      	lsls	r3, r3, #29
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();

	running = 0;
    38d8:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    38da:	d505      	bpl.n	38e8 <yield+0x30>
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    38dc:	4b2c      	ldr	r3, [pc, #176]	; (3990 <yield+0xd8>)
    38de:	681a      	ldr	r2, [r3, #0]
    38e0:	b112      	cbz	r2, 38e8 <yield+0x30>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    38e2:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    38e6:	b10a      	cbz	r2, 38ec <yield+0x34>
    38e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    38ec:	f3ef 8010 	mrs	r0, PRIMASK
		__disable_irq();
    38f0:	b672      	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    38f2:	681a      	ldr	r2, [r3, #0]
		if (first == nullptr) {
    38f4:	b11a      	cbz	r2, 38fe <yield+0x46>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    38f6:	4c27      	ldr	r4, [pc, #156]	; (3994 <yield+0xdc>)
    38f8:	7821      	ldrb	r1, [r4, #0]
    38fa:	2900      	cmp	r1, #0
    38fc:	d02f      	beq.n	395e <yield+0xa6>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    38fe:	2800      	cmp	r0, #0
    3900:	d1f2      	bne.n	38e8 <yield+0x30>
    3902:	b662      	cpsie	i
    3904:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    3908:	f8df 8094 	ldr.w	r8, [pc, #148]	; 39a0 <yield+0xe8>
    390c:	f898 2000 	ldrb.w	r2, [r8]
    3910:	2a00      	cmp	r2, #0
    3912:	d0df      	beq.n	38d4 <yield+0x1c>
    3914:	2400      	movs	r4, #0
    3916:	f8df 908c 	ldr.w	r9, [pc, #140]	; 39a4 <yield+0xec>
    391a:	e005      	b.n	3928 <yield+0x70>
    391c:	3401      	adds	r4, #1
    391e:	f898 3000 	ldrb.w	r3, [r8]
    3922:	b2e4      	uxtb	r4, r4
    3924:	42a3      	cmp	r3, r4
    3926:	d913      	bls.n	3950 <yield+0x98>
			s_serials_with_serial_events[i]->doYieldCode();
    3928:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
	static HardwareSerial 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    392c:	682b      	ldr	r3, [r5, #0]
    392e:	4628      	mov	r0, r5
    3930:	691b      	ldr	r3, [r3, #16]
    3932:	4798      	blx	r3
    3934:	2800      	cmp	r0, #0
    3936:	d0f1      	beq.n	391c <yield+0x64>
    3938:	696b      	ldr	r3, [r5, #20]
    393a:	689b      	ldr	r3, [r3, #8]
    393c:	4798      	blx	r3
    393e:	e7ed      	b.n	391c <yield+0x64>
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    3940:	f7ff fde0 	bl	3504 <usb_serial_available>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    3944:	b9d0      	cbnz	r0, 397c <yield+0xc4>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    3946:	4b14      	ldr	r3, [pc, #80]	; (3998 <yield+0xe0>)
    3948:	781b      	ldrb	r3, [r3, #0]
    394a:	b91b      	cbnz	r3, 3954 <yield+0x9c>
    394c:	7833      	ldrb	r3, [r6, #0]
    394e:	e7bf      	b.n	38d0 <yield+0x18>
    3950:	7833      	ldrb	r3, [r6, #0]
    3952:	e7bf      	b.n	38d4 <yield+0x1c>
    3954:	7833      	ldrb	r3, [r6, #0]
    3956:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    395a:	7033      	strb	r3, [r6, #0]
    395c:	e7b8      	b.n	38d0 <yield+0x18>
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    395e:	2601      	movs	r6, #1
		firstYield = first->_next;
    3960:	6955      	ldr	r5, [r2, #20]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    3962:	7026      	strb	r6, [r4, #0]
		firstYield = first->_next;
    3964:	601d      	str	r5, [r3, #0]
		if (firstYield) {
    3966:	b165      	cbz	r5, 3982 <yield+0xca>
			firstYield->_prev = nullptr;
    3968:	61a9      	str	r1, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    396a:	b900      	cbnz	r0, 396e <yield+0xb6>
    396c:	b662      	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    396e:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    3970:	6893      	ldr	r3, [r2, #8]
    3972:	4610      	mov	r0, r2
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    3974:	7755      	strb	r5, [r2, #29]
		(*(first->_function))(*first);
    3976:	4798      	blx	r3
		runningFromYield = false;
    3978:	7025      	strb	r5, [r4, #0]
    397a:	e7b5      	b.n	38e8 <yield+0x30>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    397c:	f000 f8d6 	bl	3b2c <serialEvent()>
    3980:	e7e1      	b.n	3946 <yield+0x8e>
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    3982:	4b06      	ldr	r3, [pc, #24]	; (399c <yield+0xe4>)
    3984:	601d      	str	r5, [r3, #0]
    3986:	e7f0      	b.n	396a <yield+0xb2>
    3988:	200122ac 	.word	0x200122ac
    398c:	20022ff5 	.word	0x20022ff5
    3990:	20022ff0 	.word	0x20022ff0
    3994:	20022ff4 	.word	0x20022ff4
    3998:	60001726 	.word	0x60001726
    399c:	20022fec 	.word	0x20022fec
    39a0:	20023014 	.word	0x20023014
    39a4:	20022ff8 	.word	0x20022ff8

000039a8 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    39a8:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    39aa:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    39ae:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    39b2:	d16d      	bne.n	3a90 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    39b4:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    39b6:	d341      	bcc.n	3a3c <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    39b8:	f851 3b04 	ldr.w	r3, [r1], #4
    39bc:	f840 3b04 	str.w	r3, [r0], #4
    39c0:	f851 3b04 	ldr.w	r3, [r1], #4
    39c4:	f840 3b04 	str.w	r3, [r0], #4
    39c8:	f851 3b04 	ldr.w	r3, [r1], #4
    39cc:	f840 3b04 	str.w	r3, [r0], #4
    39d0:	f851 3b04 	ldr.w	r3, [r1], #4
    39d4:	f840 3b04 	str.w	r3, [r0], #4
    39d8:	f851 3b04 	ldr.w	r3, [r1], #4
    39dc:	f840 3b04 	str.w	r3, [r0], #4
    39e0:	f851 3b04 	ldr.w	r3, [r1], #4
    39e4:	f840 3b04 	str.w	r3, [r0], #4
    39e8:	f851 3b04 	ldr.w	r3, [r1], #4
    39ec:	f840 3b04 	str.w	r3, [r0], #4
    39f0:	f851 3b04 	ldr.w	r3, [r1], #4
    39f4:	f840 3b04 	str.w	r3, [r0], #4
    39f8:	f851 3b04 	ldr.w	r3, [r1], #4
    39fc:	f840 3b04 	str.w	r3, [r0], #4
    3a00:	f851 3b04 	ldr.w	r3, [r1], #4
    3a04:	f840 3b04 	str.w	r3, [r0], #4
    3a08:	f851 3b04 	ldr.w	r3, [r1], #4
    3a0c:	f840 3b04 	str.w	r3, [r0], #4
    3a10:	f851 3b04 	ldr.w	r3, [r1], #4
    3a14:	f840 3b04 	str.w	r3, [r0], #4
    3a18:	f851 3b04 	ldr.w	r3, [r1], #4
    3a1c:	f840 3b04 	str.w	r3, [r0], #4
    3a20:	f851 3b04 	ldr.w	r3, [r1], #4
    3a24:	f840 3b04 	str.w	r3, [r0], #4
    3a28:	f851 3b04 	ldr.w	r3, [r1], #4
    3a2c:	f840 3b04 	str.w	r3, [r0], #4
    3a30:	f851 3b04 	ldr.w	r3, [r1], #4
    3a34:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    3a38:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    3a3a:	d2bd      	bcs.n	39b8 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    3a3c:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    3a3e:	d311      	bcc.n	3a64 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    3a40:	f851 3b04 	ldr.w	r3, [r1], #4
    3a44:	f840 3b04 	str.w	r3, [r0], #4
    3a48:	f851 3b04 	ldr.w	r3, [r1], #4
    3a4c:	f840 3b04 	str.w	r3, [r0], #4
    3a50:	f851 3b04 	ldr.w	r3, [r1], #4
    3a54:	f840 3b04 	str.w	r3, [r0], #4
    3a58:	f851 3b04 	ldr.w	r3, [r1], #4
    3a5c:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    3a60:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    3a62:	d2ed      	bcs.n	3a40 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    3a64:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    3a66:	d305      	bcc.n	3a74 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    3a68:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    3a6c:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    3a70:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    3a72:	d2f9      	bcs.n	3a68 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    3a74:	3204      	adds	r2, #4
	beq	.Ldone
    3a76:	d008      	beq.n	3a8a <memcpy+0xe2>

	lsls	r2, r2, #31
    3a78:	07d2      	lsls	r2, r2, #31
	itt ne
    3a7a:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    3a7c:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    3a80:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    3a84:	d301      	bcc.n	3a8a <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    3a86:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    3a88:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    3a8a:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    3a8c:	4770      	bx	lr
    3a8e:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    3a90:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    3a92:	d313      	bcc.n	3abc <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    3a94:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    3a96:	d08d      	beq.n	39b4 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    3a98:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    3a9c:	d08a      	beq.n	39b4 <memcpy+0xc>

	rsb	r3, #4
    3a9e:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    3aa2:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    3aa4:	07db      	lsls	r3, r3, #31
	itt ne
    3aa6:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    3aa8:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    3aac:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    3ab0:	d380      	bcc.n	39b4 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    3ab2:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    3ab6:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    3aba:	e77b      	b.n	39b4 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    3abc:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    3abe:	d3d9      	bcc.n	3a74 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    3ac0:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    3ac2:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    3ac6:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    3aca:	d2f9      	bcs.n	3ac0 <memcpy+0x118>

	ldrb	r3, [r1]
    3acc:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    3ace:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    3ad0:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    3ad2:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    3ad4:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    3ad6:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    3ad8:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    3ada:	4770      	bx	lr

00003adc <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    3adc:	b4f0      	push	{r4, r5, r6, r7}
    3ade:	1e4e      	subs	r6, r1, #1
	unsigned digit;
	int i=0, j;
    3ae0:	2500      	movs	r5, #0
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    3ae2:	4637      	mov	r7, r6
    3ae4:	e000      	b.n	3ae8 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    3ae6:	3501      	adds	r5, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    3ae8:	fbb0 f3f2 	udiv	r3, r0, r2
    3aec:	fb02 0013 	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    3af0:	f100 0437 	add.w	r4, r0, #55	; 0x37
    3af4:	2809      	cmp	r0, #9
    3af6:	f100 0030 	add.w	r0, r0, #48	; 0x30
    3afa:	b2e4      	uxtb	r4, r4
    3afc:	bf98      	it	ls
    3afe:	b2c4      	uxtbls	r4, r0
		val /= radix;
		if (val == 0) break;
    3b00:	4618      	mov	r0, r3
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    3b02:	f807 4f01 	strb.w	r4, [r7, #1]!
		val /= radix;
		if (val == 0) break;
    3b06:	2b00      	cmp	r3, #0
    3b08:	d1ed      	bne.n	3ae6 <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    3b0a:	194a      	adds	r2, r1, r5
    3b0c:	7053      	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    3b0e:	b14d      	cbz	r5, 3b24 <ultoa+0x48>
    3b10:	3301      	adds	r3, #1
		t = buf[j];
    3b12:	f816 4f01 	ldrb.w	r4, [r6, #1]!
		buf[j] = buf[i];
    3b16:	7817      	ldrb	r7, [r2, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    3b18:	1ae8      	subs	r0, r5, r3
		t = buf[j];
		buf[j] = buf[i];
    3b1a:	7037      	strb	r7, [r6, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    3b1c:	4283      	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    3b1e:	f802 4901 	strb.w	r4, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    3b22:	dbf5      	blt.n	3b10 <ultoa+0x34>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    3b24:	4608      	mov	r0, r1
    3b26:	bcf0      	pop	{r4, r5, r6, r7}
    3b28:	4770      	bx	lr
    3b2a:	bf00      	nop

00003b2c <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
    3b2c:	4770      	bx	lr
    3b2e:	bf00      	nop

00003b30 <arm_split_rfft_q15>:
    3b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3b34:	f06f 4440 	mvn.w	r4, #3221225472	; 0xc0000000
    3b38:	b083      	sub	sp, #12
    3b3a:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
    3b3e:	440c      	add	r4, r1
    3b40:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    3b42:	9001      	str	r0, [sp, #4]
    3b44:	3901      	subs	r1, #1
    3b46:	ea4f 0b85 	mov.w	fp, r5, lsl #2
    3b4a:	ea4f 0084 	mov.w	r0, r4, lsl #2
    3b4e:	445a      	add	r2, fp
    3b50:	445b      	add	r3, fp
    3b52:	9000      	str	r0, [sp, #0]
    3b54:	d030      	beq.n	3bb8 <arm_split_rfft_q15+0x88>
    3b56:	f100 0904 	add.w	r9, r0, #4
    3b5a:	9c01      	ldr	r4, [sp, #4]
    3b5c:	980c      	ldr	r0, [sp, #48]	; 0x30
    3b5e:	f1ae 0e08 	sub.w	lr, lr, #8
    3b62:	46a2      	mov	sl, r4
    3b64:	44a1      	add	r9, r4
    3b66:	f100 0808 	add.w	r8, r0, #8
    3b6a:	4486      	add	lr, r0
    3b6c:	f04f 0c00 	mov.w	ip, #0
    3b70:	f85a 4f04 	ldr.w	r4, [sl, #4]!
    3b74:	f852 000c 	ldr.w	r0, [r2, ip]
    3b78:	fb44 f500 	smusd	r5, r4, r0
    3b7c:	f859 6d04 	ldr.w	r6, [r9, #-4]!
    3b80:	f853 700c 	ldr.w	r7, [r3, ip]
    3b84:	fb26 5507 	smlad	r5, r6, r7, r5
    3b88:	fb46 f617 	smusdx	r6, r6, r7
    3b8c:	fb24 6010 	smladx	r0, r4, r0, r6
    3b90:	1400      	asrs	r0, r0, #16
    3b92:	3901      	subs	r1, #1
    3b94:	ea4f 4425 	mov.w	r4, r5, asr #16
    3b98:	44dc      	add	ip, fp
    3b9a:	f1c0 0500 	rsb	r5, r0, #0
    3b9e:	f828 0c02 	strh.w	r0, [r8, #-2]
    3ba2:	f828 4c04 	strh.w	r4, [r8, #-4]
    3ba6:	f1ae 0e04 	sub.w	lr, lr, #4
    3baa:	f8ae 500a 	strh.w	r5, [lr, #10]
    3bae:	f108 0804 	add.w	r8, r8, #4
    3bb2:	f8ae 4008 	strh.w	r4, [lr, #8]
    3bb6:	d1db      	bne.n	3b70 <arm_split_rfft_q15+0x40>
    3bb8:	9c01      	ldr	r4, [sp, #4]
    3bba:	980c      	ldr	r0, [sp, #48]	; 0x30
    3bbc:	9a00      	ldr	r2, [sp, #0]
    3bbe:	f9b4 3000 	ldrsh.w	r3, [r4]
    3bc2:	4402      	add	r2, r0
    3bc4:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
    3bc8:	1a1b      	subs	r3, r3, r0
    3bca:	4611      	mov	r1, r2
    3bcc:	2200      	movs	r2, #0
    3bce:	980c      	ldr	r0, [sp, #48]	; 0x30
    3bd0:	105b      	asrs	r3, r3, #1
    3bd2:	80ca      	strh	r2, [r1, #6]
    3bd4:	808b      	strh	r3, [r1, #4]
    3bd6:	f9b4 1000 	ldrsh.w	r1, [r4]
    3bda:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
    3bde:	8042      	strh	r2, [r0, #2]
    3be0:	440b      	add	r3, r1
    3be2:	105b      	asrs	r3, r3, #1
    3be4:	8003      	strh	r3, [r0, #0]
    3be6:	b003      	add	sp, #12
    3be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00003bec <arm_rfft_q15>:
    3bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3bf0:	4616      	mov	r6, r2
    3bf2:	7902      	ldrb	r2, [r0, #4]
    3bf4:	b085      	sub	sp, #20
    3bf6:	6804      	ldr	r4, [r0, #0]
    3bf8:	6943      	ldr	r3, [r0, #20]
    3bfa:	2a01      	cmp	r2, #1
    3bfc:	4605      	mov	r5, r0
    3bfe:	460f      	mov	r7, r1
    3c00:	ea4f 0454 	mov.w	r4, r4, lsr #1
    3c04:	9303      	str	r3, [sp, #12]
    3c06:	d00f      	beq.n	3c28 <arm_rfft_q15+0x3c>
    3c08:	4618      	mov	r0, r3
    3c0a:	796b      	ldrb	r3, [r5, #5]
    3c0c:	f000 fa8c 	bl	4128 <arm_cfft_q15>
    3c10:	4621      	mov	r1, r4
    3c12:	68ac      	ldr	r4, [r5, #8]
    3c14:	4638      	mov	r0, r7
    3c16:	692b      	ldr	r3, [r5, #16]
    3c18:	68ea      	ldr	r2, [r5, #12]
    3c1a:	9600      	str	r6, [sp, #0]
    3c1c:	9401      	str	r4, [sp, #4]
    3c1e:	f7ff ff87 	bl	3b30 <arm_split_rfft_q15>
    3c22:	b005      	add	sp, #20
    3c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3c28:	f8d0 800c 	ldr.w	r8, [r0, #12]
    3c2c:	ea4f 0984 	mov.w	r9, r4, lsl #2
    3c30:	f8d0 c010 	ldr.w	ip, [r0, #16]
    3c34:	6883      	ldr	r3, [r0, #8]
    3c36:	b314      	cbz	r4, 3c7e <arm_rfft_q15+0x92>
    3c38:	f109 0904 	add.w	r9, r9, #4
    3c3c:	ea4f 0a83 	mov.w	sl, r3, lsl #2
    3c40:	46b3      	mov	fp, r6
    3c42:	4489      	add	r9, r1
    3c44:	f859 3d04 	ldr.w	r3, [r9, #-4]!
    3c48:	f8dc e000 	ldr.w	lr, [ip]
    3c4c:	fb43 f10e 	smusd	r1, r3, lr
    3c50:	f857 0b04 	ldr.w	r0, [r7], #4
    3c54:	f8d8 2000 	ldr.w	r2, [r8]
    3c58:	fb20 1102 	smlad	r1, r0, r2, r1
    3c5c:	fb23 f31e 	smuadx	r3, r3, lr
    3c60:	425b      	negs	r3, r3
    3c62:	fb42 3310 	smlsdx	r3, r2, r0, r3
    3c66:	4810      	ldr	r0, [pc, #64]	; (3ca8 <arm_rfft_q15+0xbc>)
    3c68:	3c01      	subs	r4, #1
    3c6a:	44d4      	add	ip, sl
    3c6c:	44d0      	add	r8, sl
    3c6e:	ea00 0003 	and.w	r0, r0, r3
    3c72:	ea40 4111 	orr.w	r1, r0, r1, lsr #16
    3c76:	f84b 1b04 	str.w	r1, [fp], #4
    3c7a:	d1e3      	bne.n	3c44 <arm_rfft_q15+0x58>
    3c7c:	792a      	ldrb	r2, [r5, #4]
    3c7e:	796b      	ldrb	r3, [r5, #5]
    3c80:	4631      	mov	r1, r6
    3c82:	9803      	ldr	r0, [sp, #12]
    3c84:	f000 fa50 	bl	4128 <arm_cfft_q15>
    3c88:	682b      	ldr	r3, [r5, #0]
    3c8a:	2b00      	cmp	r3, #0
    3c8c:	d0c9      	beq.n	3c22 <arm_rfft_q15+0x36>
    3c8e:	3e02      	subs	r6, #2
    3c90:	2200      	movs	r2, #0
    3c92:	f936 3f02 	ldrsh.w	r3, [r6, #2]!
    3c96:	3201      	adds	r2, #1
    3c98:	005b      	lsls	r3, r3, #1
    3c9a:	8033      	strh	r3, [r6, #0]
    3c9c:	682b      	ldr	r3, [r5, #0]
    3c9e:	4293      	cmp	r3, r2
    3ca0:	d8f7      	bhi.n	3c92 <arm_rfft_q15+0xa6>
    3ca2:	b005      	add	sp, #20
    3ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3ca8:	ffff0000 	.word	0xffff0000

00003cac <arm_rfft_init_q15>:
    3cac:	b289      	uxth	r1, r1
    3cae:	b430      	push	{r4, r5}
    3cb0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    3cb4:	4d36      	ldr	r5, [pc, #216]	; (3d90 <arm_rfft_init_q15+0xe4>)
    3cb6:	4c37      	ldr	r4, [pc, #220]	; (3d94 <arm_rfft_init_q15+0xe8>)
    3cb8:	7102      	strb	r2, [r0, #4]
    3cba:	7143      	strb	r3, [r0, #5]
    3cbc:	6001      	str	r1, [r0, #0]
    3cbe:	60c5      	str	r5, [r0, #12]
    3cc0:	6104      	str	r4, [r0, #16]
    3cc2:	d050      	beq.n	3d66 <arm_rfft_init_q15+0xba>
    3cc4:	d911      	bls.n	3cea <arm_rfft_init_q15+0x3e>
    3cc6:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
    3cca:	d054      	beq.n	3d76 <arm_rfft_init_q15+0xca>
    3ccc:	d938      	bls.n	3d40 <arm_rfft_init_q15+0x94>
    3cce:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    3cd2:	d022      	beq.n	3d1a <arm_rfft_init_q15+0x6e>
    3cd4:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
    3cd8:	d155      	bne.n	3d86 <arm_rfft_init_q15+0xda>
    3cda:	2101      	movs	r1, #1
    3cdc:	4a2e      	ldr	r2, [pc, #184]	; (3d98 <arm_rfft_init_q15+0xec>)
    3cde:	2300      	movs	r3, #0
    3ce0:	6081      	str	r1, [r0, #8]
    3ce2:	6142      	str	r2, [r0, #20]
    3ce4:	4618      	mov	r0, r3
    3ce6:	bc30      	pop	{r4, r5}
    3ce8:	4770      	bx	lr
    3cea:	2940      	cmp	r1, #64	; 0x40
    3cec:	d033      	beq.n	3d56 <arm_rfft_init_q15+0xaa>
    3cee:	d91c      	bls.n	3d2a <arm_rfft_init_q15+0x7e>
    3cf0:	2980      	cmp	r1, #128	; 0x80
    3cf2:	d00a      	beq.n	3d0a <arm_rfft_init_q15+0x5e>
    3cf4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    3cf8:	d145      	bne.n	3d86 <arm_rfft_init_q15+0xda>
    3cfa:	2120      	movs	r1, #32
    3cfc:	4a27      	ldr	r2, [pc, #156]	; (3d9c <arm_rfft_init_q15+0xf0>)
    3cfe:	2300      	movs	r3, #0
    3d00:	6081      	str	r1, [r0, #8]
    3d02:	6142      	str	r2, [r0, #20]
    3d04:	4618      	mov	r0, r3
    3d06:	bc30      	pop	{r4, r5}
    3d08:	4770      	bx	lr
    3d0a:	2140      	movs	r1, #64	; 0x40
    3d0c:	4a24      	ldr	r2, [pc, #144]	; (3da0 <arm_rfft_init_q15+0xf4>)
    3d0e:	2300      	movs	r3, #0
    3d10:	6081      	str	r1, [r0, #8]
    3d12:	6142      	str	r2, [r0, #20]
    3d14:	4618      	mov	r0, r3
    3d16:	bc30      	pop	{r4, r5}
    3d18:	4770      	bx	lr
    3d1a:	2102      	movs	r1, #2
    3d1c:	4a21      	ldr	r2, [pc, #132]	; (3da4 <arm_rfft_init_q15+0xf8>)
    3d1e:	2300      	movs	r3, #0
    3d20:	6081      	str	r1, [r0, #8]
    3d22:	6142      	str	r2, [r0, #20]
    3d24:	4618      	mov	r0, r3
    3d26:	bc30      	pop	{r4, r5}
    3d28:	4770      	bx	lr
    3d2a:	2920      	cmp	r1, #32
    3d2c:	d12b      	bne.n	3d86 <arm_rfft_init_q15+0xda>
    3d2e:	f44f 7180 	mov.w	r1, #256	; 0x100
    3d32:	4a1d      	ldr	r2, [pc, #116]	; (3da8 <arm_rfft_init_q15+0xfc>)
    3d34:	2300      	movs	r3, #0
    3d36:	6081      	str	r1, [r0, #8]
    3d38:	6142      	str	r2, [r0, #20]
    3d3a:	4618      	mov	r0, r3
    3d3c:	bc30      	pop	{r4, r5}
    3d3e:	4770      	bx	lr
    3d40:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
    3d44:	d11f      	bne.n	3d86 <arm_rfft_init_q15+0xda>
    3d46:	2108      	movs	r1, #8
    3d48:	4a18      	ldr	r2, [pc, #96]	; (3dac <arm_rfft_init_q15+0x100>)
    3d4a:	2300      	movs	r3, #0
    3d4c:	6081      	str	r1, [r0, #8]
    3d4e:	6142      	str	r2, [r0, #20]
    3d50:	4618      	mov	r0, r3
    3d52:	bc30      	pop	{r4, r5}
    3d54:	4770      	bx	lr
    3d56:	2180      	movs	r1, #128	; 0x80
    3d58:	4a15      	ldr	r2, [pc, #84]	; (3db0 <arm_rfft_init_q15+0x104>)
    3d5a:	2300      	movs	r3, #0
    3d5c:	6081      	str	r1, [r0, #8]
    3d5e:	6142      	str	r2, [r0, #20]
    3d60:	4618      	mov	r0, r3
    3d62:	bc30      	pop	{r4, r5}
    3d64:	4770      	bx	lr
    3d66:	2110      	movs	r1, #16
    3d68:	4a12      	ldr	r2, [pc, #72]	; (3db4 <arm_rfft_init_q15+0x108>)
    3d6a:	2300      	movs	r3, #0
    3d6c:	6081      	str	r1, [r0, #8]
    3d6e:	6142      	str	r2, [r0, #20]
    3d70:	4618      	mov	r0, r3
    3d72:	bc30      	pop	{r4, r5}
    3d74:	4770      	bx	lr
    3d76:	2104      	movs	r1, #4
    3d78:	4a0f      	ldr	r2, [pc, #60]	; (3db8 <arm_rfft_init_q15+0x10c>)
    3d7a:	2300      	movs	r3, #0
    3d7c:	6081      	str	r1, [r0, #8]
    3d7e:	6142      	str	r2, [r0, #20]
    3d80:	4618      	mov	r0, r3
    3d82:	bc30      	pop	{r4, r5}
    3d84:	4770      	bx	lr
    3d86:	f04f 33ff 	mov.w	r3, #4294967295
    3d8a:	bc30      	pop	{r4, r5}
    3d8c:	4618      	mov	r0, r3
    3d8e:	4770      	bx	lr
    3d90:	20000400 	.word	0x20000400
    3d94:	20004400 	.word	0x20004400
    3d98:	20008460 	.word	0x20008460
    3d9c:	20008410 	.word	0x20008410
    3da0:	20008440 	.word	0x20008440
    3da4:	20008450 	.word	0x20008450
    3da8:	20008470 	.word	0x20008470
    3dac:	20008420 	.word	0x20008420
    3db0:	20008480 	.word	0x20008480
    3db4:	20008400 	.word	0x20008400
    3db8:	20008430 	.word	0x20008430

00003dbc <arm_cmplx_mag_q31>:
    3dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3dc0:	0893      	lsrs	r3, r2, #2
    3dc2:	b087      	sub	sp, #28
    3dc4:	460f      	mov	r7, r1
    3dc6:	9203      	str	r2, [sp, #12]
    3dc8:	9002      	str	r0, [sp, #8]
    3dca:	9304      	str	r3, [sp, #16]
    3dcc:	d052      	beq.n	3e74 <arm_cmplx_mag_q31+0xb8>
    3dce:	f100 0420 	add.w	r4, r0, #32
    3dd2:	460d      	mov	r5, r1
    3dd4:	9301      	str	r3, [sp, #4]
    3dd6:	9105      	str	r1, [sp, #20]
    3dd8:	f854 2c14 	ldr.w	r2, [r4, #-20]
    3ddc:	4629      	mov	r1, r5
    3dde:	f854 6c1c 	ldr.w	r6, [r4, #-28]
    3de2:	3420      	adds	r4, #32
    3de4:	f854 0c38 	ldr.w	r0, [r4, #-56]
    3de8:	fb82 2302 	smull	r2, r3, r2, r2
    3dec:	fb86 ab06 	smull	sl, fp, r6, r6
    3df0:	f854 2c40 	ldr.w	r2, [r4, #-64]
    3df4:	105e      	asrs	r6, r3, #1
    3df6:	fb80 8900 	smull	r8, r9, r0, r0
    3dfa:	fb82 2302 	smull	r2, r3, r2, r2
    3dfe:	f854 ac24 	ldr.w	sl, [r4, #-36]
    3e02:	ea4f 006b 	mov.w	r0, fp, asr #1
    3e06:	f854 8c2c 	ldr.w	r8, [r4, #-44]
    3e0a:	eb06 0969 	add.w	r9, r6, r9, asr #1
    3e0e:	f854 7c28 	ldr.w	r7, [r4, #-40]
    3e12:	eb00 0063 	add.w	r0, r0, r3, asr #1
    3e16:	fb8a ab0a 	smull	sl, fp, sl, sl
    3e1a:	f854 6c30 	ldr.w	r6, [r4, #-48]
    3e1e:	f000 f847 	bl	3eb0 <arm_sqrt_q31>
    3e22:	1d29      	adds	r1, r5, #4
    3e24:	4648      	mov	r0, r9
    3e26:	fb88 8908 	smull	r8, r9, r8, r8
    3e2a:	f000 f841 	bl	3eb0 <arm_sqrt_q31>
    3e2e:	fb87 2307 	smull	r2, r3, r7, r7
    3e32:	ea4f 0e6b 	mov.w	lr, fp, asr #1
    3e36:	ea4f 0069 	mov.w	r0, r9, asr #1
    3e3a:	fb86 8906 	smull	r8, r9, r6, r6
    3e3e:	eb0e 0663 	add.w	r6, lr, r3, asr #1
    3e42:	f105 0108 	add.w	r1, r5, #8
    3e46:	eb00 0069 	add.w	r0, r0, r9, asr #1
    3e4a:	f000 f831 	bl	3eb0 <arm_sqrt_q31>
    3e4e:	f105 010c 	add.w	r1, r5, #12
    3e52:	4630      	mov	r0, r6
    3e54:	3510      	adds	r5, #16
    3e56:	f000 f82b 	bl	3eb0 <arm_sqrt_q31>
    3e5a:	9b01      	ldr	r3, [sp, #4]
    3e5c:	3b01      	subs	r3, #1
    3e5e:	9301      	str	r3, [sp, #4]
    3e60:	d1ba      	bne.n	3dd8 <arm_cmplx_mag_q31+0x1c>
    3e62:	9b02      	ldr	r3, [sp, #8]
    3e64:	9a04      	ldr	r2, [sp, #16]
    3e66:	9f05      	ldr	r7, [sp, #20]
    3e68:	4619      	mov	r1, r3
    3e6a:	eb07 1702 	add.w	r7, r7, r2, lsl #4
    3e6e:	eb01 1342 	add.w	r3, r1, r2, lsl #5
    3e72:	9302      	str	r3, [sp, #8]
    3e74:	9b03      	ldr	r3, [sp, #12]
    3e76:	f013 0803 	ands.w	r8, r3, #3
    3e7a:	d015      	beq.n	3ea8 <arm_cmplx_mag_q31+0xec>
    3e7c:	9e02      	ldr	r6, [sp, #8]
    3e7e:	3608      	adds	r6, #8
    3e80:	f856 4c04 	ldr.w	r4, [r6, #-4]
    3e84:	1d38      	adds	r0, r7, #4
    3e86:	f856 2c08 	ldr.w	r2, [r6, #-8]
    3e8a:	4639      	mov	r1, r7
    3e8c:	fb84 4504 	smull	r4, r5, r4, r4
    3e90:	4607      	mov	r7, r0
    3e92:	fb82 2302 	smull	r2, r3, r2, r2
    3e96:	3608      	adds	r6, #8
    3e98:	1068      	asrs	r0, r5, #1
    3e9a:	eb00 0063 	add.w	r0, r0, r3, asr #1
    3e9e:	f000 f807 	bl	3eb0 <arm_sqrt_q31>
    3ea2:	f1b8 0801 	subs.w	r8, r8, #1
    3ea6:	d1eb      	bne.n	3e80 <arm_cmplx_mag_q31+0xc4>
    3ea8:	b007      	add	sp, #28
    3eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3eae:	bf00      	nop

00003eb0 <arm_sqrt_q31>:
    3eb0:	2800      	cmp	r0, #0
    3eb2:	dd6e      	ble.n	3f92 <arm_sqrt_q31+0xe2>
    3eb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3eb8:	fab0 f680 	clz	r6, r0
    3ebc:	1e77      	subs	r7, r6, #1
    3ebe:	f017 0c01 	ands.w	ip, r7, #1
    3ec2:	d05a      	beq.n	3f7a <arm_sqrt_q31+0xca>
    3ec4:	1eb3      	subs	r3, r6, #2
    3ec6:	4098      	lsls	r0, r3
    3ec8:	ee07 0a90 	vmov	s15, r0
    3ecc:	4c33      	ldr	r4, [pc, #204]	; (3f9c <arm_sqrt_q31+0xec>)
    3ece:	ea4f 0e60 	mov.w	lr, r0, asr #1
    3ed2:	eefa 7ae0 	vcvt.f32.s32	s15, s15, #31
    3ed6:	ee17 3a90 	vmov	r3, s15
    3eda:	105b      	asrs	r3, r3, #1
    3edc:	1ae4      	subs	r4, r4, r3
    3ede:	ee07 4a90 	vmov	s15, r4
    3ee2:	eefe 7ac1 	vcvt.s32.f32	s15, s15, #30
    3ee6:	ee17 5a90 	vmov	r5, s15
    3eea:	fb85 8905 	smull	r8, r9, r5, r5
    3eee:	ea4f 72d8 	mov.w	r2, r8, lsr #31
    3ef2:	ea42 0249 	orr.w	r2, r2, r9, lsl #1
    3ef6:	fb82 230e 	smull	r2, r3, r2, lr
    3efa:	0fd4      	lsrs	r4, r2, #31
    3efc:	ea44 0443 	orr.w	r4, r4, r3, lsl #1
    3f00:	f1c4 5440 	rsb	r4, r4, #805306368	; 0x30000000
    3f04:	fb85 4504 	smull	r4, r5, r5, r4
    3f08:	0fe2      	lsrs	r2, r4, #31
    3f0a:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    3f0e:	0093      	lsls	r3, r2, #2
    3f10:	fb83 8903 	smull	r8, r9, r3, r3
    3f14:	ea4f 74d8 	mov.w	r4, r8, lsr #31
    3f18:	ea44 0449 	orr.w	r4, r4, r9, lsl #1
    3f1c:	fb8e 4504 	smull	r4, r5, lr, r4
    3f20:	0fe2      	lsrs	r2, r4, #31
    3f22:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    3f26:	f1c2 5240 	rsb	r2, r2, #805306368	; 0x30000000
    3f2a:	fb83 2302 	smull	r2, r3, r3, r2
    3f2e:	0fd2      	lsrs	r2, r2, #31
    3f30:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    3f34:	ea4f 0882 	mov.w	r8, r2, lsl #2
    3f38:	fb88 2308 	smull	r2, r3, r8, r8
    3f3c:	0fd4      	lsrs	r4, r2, #31
    3f3e:	ea44 0443 	orr.w	r4, r4, r3, lsl #1
    3f42:	fb8e 4504 	smull	r4, r5, lr, r4
    3f46:	0fe2      	lsrs	r2, r4, #31
    3f48:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    3f4c:	f1c2 5240 	rsb	r2, r2, #805306368	; 0x30000000
    3f50:	fb88 2302 	smull	r2, r3, r8, r2
    3f54:	0fd4      	lsrs	r4, r2, #31
    3f56:	ea44 0443 	orr.w	r4, r4, r3, lsl #1
    3f5a:	00a4      	lsls	r4, r4, #2
    3f5c:	fb80 4504 	smull	r4, r5, r0, r4
    3f60:	0fe3      	lsrs	r3, r4, #31
    3f62:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
    3f66:	005b      	lsls	r3, r3, #1
    3f68:	f1bc 0f00 	cmp.w	ip, #0
    3f6c:	d107      	bne.n	3f7e <arm_sqrt_q31+0xce>
    3f6e:	107f      	asrs	r7, r7, #1
    3f70:	2000      	movs	r0, #0
    3f72:	413b      	asrs	r3, r7
    3f74:	600b      	str	r3, [r1, #0]
    3f76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3f7a:	40b8      	lsls	r0, r7
    3f7c:	e7a4      	b.n	3ec8 <arm_sqrt_q31+0x18>
    3f7e:	3e02      	subs	r6, #2
    3f80:	f04f 0000 	mov.w	r0, #0
    3f84:	bf48      	it	mi
    3f86:	463e      	movmi	r6, r7
    3f88:	1076      	asrs	r6, r6, #1
    3f8a:	4133      	asrs	r3, r6
    3f8c:	600b      	str	r3, [r1, #0]
    3f8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3f92:	2300      	movs	r3, #0
    3f94:	f04f 30ff 	mov.w	r0, #4294967295
    3f98:	600b      	str	r3, [r1, #0]
    3f9a:	4770      	bx	lr
    3f9c:	5f3759df 	.word	0x5f3759df

00003fa0 <arm_cfft_radix4by2_q15>:
    3fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3fa4:	084d      	lsrs	r5, r1, #1
    3fa6:	4616      	mov	r6, r2
    3fa8:	eb00 0741 	add.w	r7, r0, r1, lsl #1
    3fac:	d04b      	beq.n	4046 <arm_cfft_radix4by2_q15+0xa6>
    3fae:	4604      	mov	r4, r0
    3fb0:	46be      	mov	lr, r7
    3fb2:	4690      	mov	r8, r2
    3fb4:	4629      	mov	r1, r5
    3fb6:	f04f 0c00 	mov.w	ip, #0
    3fba:	f858 9b04 	ldr.w	r9, [r8], #4
    3fbe:	6803      	ldr	r3, [r0, #0]
    3fc0:	fa93 f32c 	shadd16	r3, r3, ip
    3fc4:	f8de 2000 	ldr.w	r2, [lr]
    3fc8:	fa92 f22c 	shadd16	r2, r2, ip
    3fcc:	fad3 fa12 	qsub16	sl, r3, r2
    3fd0:	fa93 f322 	shadd16	r3, r3, r2
    3fd4:	f840 3b04 	str.w	r3, [r0], #4
    3fd8:	fb29 f20a 	smuad	r2, r9, sl
    3fdc:	fb49 f91a 	smusdx	r9, r9, sl
    3fe0:	4b1f      	ldr	r3, [pc, #124]	; (4060 <arm_cfft_radix4by2_q15+0xc0>)
    3fe2:	3901      	subs	r1, #1
    3fe4:	ea09 0303 	and.w	r3, r9, r3
    3fe8:	ea43 4312 	orr.w	r3, r3, r2, lsr #16
    3fec:	f84e 3b04 	str.w	r3, [lr], #4
    3ff0:	d1e3      	bne.n	3fba <arm_cfft_radix4by2_q15+0x1a>
    3ff2:	4629      	mov	r1, r5
    3ff4:	2302      	movs	r3, #2
    3ff6:	4632      	mov	r2, r6
    3ff8:	4620      	mov	r0, r4
    3ffa:	f000 f953 	bl	42a4 <arm_radix4_butterfly_q15>
    3ffe:	4638      	mov	r0, r7
    4000:	2302      	movs	r3, #2
    4002:	4629      	mov	r1, r5
    4004:	4632      	mov	r2, r6
    4006:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
    400a:	f000 f94b 	bl	42a4 <arm_radix4_butterfly_q15>
    400e:	4620      	mov	r0, r4
    4010:	1ca3      	adds	r3, r4, #2
    4012:	f933 7c02 	ldrsh.w	r7, [r3, #-2]
    4016:	3008      	adds	r0, #8
    4018:	f930 6c06 	ldrsh.w	r6, [r0, #-6]
    401c:	3308      	adds	r3, #8
    401e:	f930 4c04 	ldrsh.w	r4, [r0, #-4]
    4022:	007f      	lsls	r7, r7, #1
    4024:	f930 2c02 	ldrsh.w	r2, [r0, #-2]
    4028:	0076      	lsls	r6, r6, #1
    402a:	0064      	lsls	r4, r4, #1
    402c:	f823 7c0a 	strh.w	r7, [r3, #-10]
    4030:	0052      	lsls	r2, r2, #1
    4032:	f820 6c06 	strh.w	r6, [r0, #-6]
    4036:	f820 4c04 	strh.w	r4, [r0, #-4]
    403a:	f820 2c02 	strh.w	r2, [r0, #-2]
    403e:	4285      	cmp	r5, r0
    4040:	d1e7      	bne.n	4012 <arm_cfft_radix4by2_q15+0x72>
    4042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4046:	4629      	mov	r1, r5
    4048:	2302      	movs	r3, #2
    404a:	f000 f92b 	bl	42a4 <arm_radix4_butterfly_q15>
    404e:	4632      	mov	r2, r6
    4050:	4629      	mov	r1, r5
    4052:	4638      	mov	r0, r7
    4054:	2302      	movs	r3, #2
    4056:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    405a:	f000 b923 	b.w	42a4 <arm_radix4_butterfly_q15>
    405e:	bf00      	nop
    4060:	ffff0000 	.word	0xffff0000

00004064 <arm_cfft_radix4by2_inverse_q15>:
    4064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4068:	084d      	lsrs	r5, r1, #1
    406a:	4616      	mov	r6, r2
    406c:	eb00 0741 	add.w	r7, r0, r1, lsl #1
    4070:	d04b      	beq.n	410a <arm_cfft_radix4by2_inverse_q15+0xa6>
    4072:	4604      	mov	r4, r0
    4074:	46be      	mov	lr, r7
    4076:	4690      	mov	r8, r2
    4078:	4629      	mov	r1, r5
    407a:	f04f 0c00 	mov.w	ip, #0
    407e:	f858 9b04 	ldr.w	r9, [r8], #4
    4082:	6803      	ldr	r3, [r0, #0]
    4084:	fa93 f32c 	shadd16	r3, r3, ip
    4088:	f8de 2000 	ldr.w	r2, [lr]
    408c:	fa92 f22c 	shadd16	r2, r2, ip
    4090:	fad3 fa12 	qsub16	sl, r3, r2
    4094:	fa93 f322 	shadd16	r3, r3, r2
    4098:	f840 3b04 	str.w	r3, [r0], #4
    409c:	fb49 f20a 	smusd	r2, r9, sl
    40a0:	fb29 f91a 	smuadx	r9, r9, sl
    40a4:	4b1f      	ldr	r3, [pc, #124]	; (4124 <arm_cfft_radix4by2_inverse_q15+0xc0>)
    40a6:	3901      	subs	r1, #1
    40a8:	ea09 0303 	and.w	r3, r9, r3
    40ac:	ea43 4312 	orr.w	r3, r3, r2, lsr #16
    40b0:	f84e 3b04 	str.w	r3, [lr], #4
    40b4:	d1e3      	bne.n	407e <arm_cfft_radix4by2_inverse_q15+0x1a>
    40b6:	4629      	mov	r1, r5
    40b8:	2302      	movs	r3, #2
    40ba:	4632      	mov	r2, r6
    40bc:	4620      	mov	r0, r4
    40be:	f000 fa2d 	bl	451c <arm_radix4_butterfly_inverse_q15>
    40c2:	4638      	mov	r0, r7
    40c4:	2302      	movs	r3, #2
    40c6:	4629      	mov	r1, r5
    40c8:	4632      	mov	r2, r6
    40ca:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
    40ce:	f000 fa25 	bl	451c <arm_radix4_butterfly_inverse_q15>
    40d2:	4620      	mov	r0, r4
    40d4:	1ca3      	adds	r3, r4, #2
    40d6:	f933 7c02 	ldrsh.w	r7, [r3, #-2]
    40da:	3008      	adds	r0, #8
    40dc:	f930 6c06 	ldrsh.w	r6, [r0, #-6]
    40e0:	3308      	adds	r3, #8
    40e2:	f930 4c04 	ldrsh.w	r4, [r0, #-4]
    40e6:	007f      	lsls	r7, r7, #1
    40e8:	f930 2c02 	ldrsh.w	r2, [r0, #-2]
    40ec:	0076      	lsls	r6, r6, #1
    40ee:	0064      	lsls	r4, r4, #1
    40f0:	f823 7c0a 	strh.w	r7, [r3, #-10]
    40f4:	0052      	lsls	r2, r2, #1
    40f6:	f820 6c06 	strh.w	r6, [r0, #-6]
    40fa:	f820 4c04 	strh.w	r4, [r0, #-4]
    40fe:	f820 2c02 	strh.w	r2, [r0, #-2]
    4102:	4285      	cmp	r5, r0
    4104:	d1e7      	bne.n	40d6 <arm_cfft_radix4by2_inverse_q15+0x72>
    4106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    410a:	4629      	mov	r1, r5
    410c:	2302      	movs	r3, #2
    410e:	f000 fa05 	bl	451c <arm_radix4_butterfly_inverse_q15>
    4112:	4632      	mov	r2, r6
    4114:	4629      	mov	r1, r5
    4116:	4638      	mov	r0, r7
    4118:	2302      	movs	r3, #2
    411a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    411e:	f000 b9fd 	b.w	451c <arm_radix4_butterfly_inverse_q15>
    4122:	bf00      	nop
    4124:	ffff0000 	.word	0xffff0000

00004128 <arm_cfft_q15>:
    4128:	2a01      	cmp	r2, #1
    412a:	b570      	push	{r4, r5, r6, lr}
    412c:	460d      	mov	r5, r1
    412e:	4604      	mov	r4, r0
    4130:	461e      	mov	r6, r3
    4132:	8801      	ldrh	r1, [r0, #0]
    4134:	d024      	beq.n	4180 <arm_cfft_q15+0x58>
    4136:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    413a:	d013      	beq.n	4164 <arm_cfft_q15+0x3c>
    413c:	d808      	bhi.n	4150 <arm_cfft_q15+0x28>
    413e:	2920      	cmp	r1, #32
    4140:	d031      	beq.n	41a6 <arm_cfft_q15+0x7e>
    4142:	d945      	bls.n	41d0 <arm_cfft_q15+0xa8>
    4144:	2940      	cmp	r1, #64	; 0x40
    4146:	d00d      	beq.n	4164 <arm_cfft_q15+0x3c>
    4148:	2980      	cmp	r1, #128	; 0x80
    414a:	d02c      	beq.n	41a6 <arm_cfft_q15+0x7e>
    414c:	b98e      	cbnz	r6, 4172 <arm_cfft_q15+0x4a>
    414e:	bd70      	pop	{r4, r5, r6, pc}
    4150:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
    4154:	d006      	beq.n	4164 <arm_cfft_q15+0x3c>
    4156:	d923      	bls.n	41a0 <arm_cfft_q15+0x78>
    4158:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
    415c:	d023      	beq.n	41a6 <arm_cfft_q15+0x7e>
    415e:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    4162:	d1f3      	bne.n	414c <arm_cfft_q15+0x24>
    4164:	2301      	movs	r3, #1
    4166:	6862      	ldr	r2, [r4, #4]
    4168:	4628      	mov	r0, r5
    416a:	f000 f89b 	bl	42a4 <arm_radix4_butterfly_q15>
    416e:	2e00      	cmp	r6, #0
    4170:	d0ed      	beq.n	414e <arm_cfft_q15+0x26>
    4172:	4628      	mov	r0, r5
    4174:	68a2      	ldr	r2, [r4, #8]
    4176:	89a1      	ldrh	r1, [r4, #12]
    4178:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    417c:	f000 b867 	b.w	424e <arm_bitreversal_16>
    4180:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    4184:	d01e      	beq.n	41c4 <arm_cfft_q15+0x9c>
    4186:	d813      	bhi.n	41b0 <arm_cfft_q15+0x88>
    4188:	2920      	cmp	r1, #32
    418a:	d004      	beq.n	4196 <arm_cfft_q15+0x6e>
    418c:	d927      	bls.n	41de <arm_cfft_q15+0xb6>
    418e:	2940      	cmp	r1, #64	; 0x40
    4190:	d018      	beq.n	41c4 <arm_cfft_q15+0x9c>
    4192:	2980      	cmp	r1, #128	; 0x80
    4194:	d1da      	bne.n	414c <arm_cfft_q15+0x24>
    4196:	6862      	ldr	r2, [r4, #4]
    4198:	4628      	mov	r0, r5
    419a:	f7ff ff63 	bl	4064 <arm_cfft_radix4by2_inverse_q15>
    419e:	e7d5      	b.n	414c <arm_cfft_q15+0x24>
    41a0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    41a4:	d1d2      	bne.n	414c <arm_cfft_q15+0x24>
    41a6:	6862      	ldr	r2, [r4, #4]
    41a8:	4628      	mov	r0, r5
    41aa:	f7ff fef9 	bl	3fa0 <arm_cfft_radix4by2_q15>
    41ae:	e7cd      	b.n	414c <arm_cfft_q15+0x24>
    41b0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
    41b4:	d006      	beq.n	41c4 <arm_cfft_q15+0x9c>
    41b6:	d90e      	bls.n	41d6 <arm_cfft_q15+0xae>
    41b8:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
    41bc:	d0eb      	beq.n	4196 <arm_cfft_q15+0x6e>
    41be:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    41c2:	d1c3      	bne.n	414c <arm_cfft_q15+0x24>
    41c4:	2301      	movs	r3, #1
    41c6:	6862      	ldr	r2, [r4, #4]
    41c8:	4628      	mov	r0, r5
    41ca:	f000 f9a7 	bl	451c <arm_radix4_butterfly_inverse_q15>
    41ce:	e7bd      	b.n	414c <arm_cfft_q15+0x24>
    41d0:	2910      	cmp	r1, #16
    41d2:	d1bb      	bne.n	414c <arm_cfft_q15+0x24>
    41d4:	e7c6      	b.n	4164 <arm_cfft_q15+0x3c>
    41d6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    41da:	d0dc      	beq.n	4196 <arm_cfft_q15+0x6e>
    41dc:	e7b6      	b.n	414c <arm_cfft_q15+0x24>
    41de:	2910      	cmp	r1, #16
    41e0:	d1b4      	bne.n	414c <arm_cfft_q15+0x24>
    41e2:	e7ef      	b.n	41c4 <arm_cfft_q15+0x9c>

000041e4 <arm_bitreversal_32>:
    41e4:	1c4b      	adds	r3, r1, #1
    41e6:	2b01      	cmp	r3, #1
    41e8:	bf98      	it	ls
    41ea:	4770      	bxls	lr
    41ec:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
    41f0:	1c91      	adds	r1, r2, #2
    41f2:	089b      	lsrs	r3, r3, #2

000041f4 <arm_bitreversal_32_0>:
    41f4:	f8b1 8004 	ldrh.w	r8, [r1, #4]
    41f8:	f8b1 9002 	ldrh.w	r9, [r1, #2]
    41fc:	880a      	ldrh	r2, [r1, #0]
    41fe:	f831 cc02 	ldrh.w	ip, [r1, #-2]
    4202:	4480      	add	r8, r0
    4204:	4481      	add	r9, r0
    4206:	4402      	add	r2, r0
    4208:	4484      	add	ip, r0
    420a:	f8d9 7000 	ldr.w	r7, [r9]
    420e:	f8d8 6000 	ldr.w	r6, [r8]
    4212:	6815      	ldr	r5, [r2, #0]
    4214:	f8dc 4000 	ldr.w	r4, [ip]
    4218:	f8c9 6000 	str.w	r6, [r9]
    421c:	f8c8 7000 	str.w	r7, [r8]
    4220:	f8cc 5000 	str.w	r5, [ip]
    4224:	6014      	str	r4, [r2, #0]
    4226:	f8d9 7004 	ldr.w	r7, [r9, #4]
    422a:	f8d8 6004 	ldr.w	r6, [r8, #4]
    422e:	6855      	ldr	r5, [r2, #4]
    4230:	f8dc 4004 	ldr.w	r4, [ip, #4]
    4234:	f8c9 6004 	str.w	r6, [r9, #4]
    4238:	f8c8 7004 	str.w	r7, [r8, #4]
    423c:	f8cc 5004 	str.w	r5, [ip, #4]
    4240:	6054      	str	r4, [r2, #4]
    4242:	3108      	adds	r1, #8
    4244:	3b01      	subs	r3, #1
    4246:	d1d5      	bne.n	41f4 <arm_bitreversal_32_0>
    4248:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
    424c:	4770      	bx	lr

0000424e <arm_bitreversal_16>:
    424e:	1c4b      	adds	r3, r1, #1
    4250:	2b01      	cmp	r3, #1
    4252:	bf98      	it	ls
    4254:	4770      	bxls	lr
    4256:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
    425a:	1c91      	adds	r1, r2, #2
    425c:	089b      	lsrs	r3, r3, #2

0000425e <arm_bitreversal_16_0>:
    425e:	f8b1 8004 	ldrh.w	r8, [r1, #4]
    4262:	f8b1 9002 	ldrh.w	r9, [r1, #2]
    4266:	880a      	ldrh	r2, [r1, #0]
    4268:	f831 cc02 	ldrh.w	ip, [r1, #-2]
    426c:	eb00 0858 	add.w	r8, r0, r8, lsr #1
    4270:	eb00 0959 	add.w	r9, r0, r9, lsr #1
    4274:	eb00 0252 	add.w	r2, r0, r2, lsr #1
    4278:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
    427c:	f8d9 7000 	ldr.w	r7, [r9]
    4280:	f8d8 6000 	ldr.w	r6, [r8]
    4284:	6815      	ldr	r5, [r2, #0]
    4286:	f8dc 4000 	ldr.w	r4, [ip]
    428a:	f8c9 6000 	str.w	r6, [r9]
    428e:	f8c8 7000 	str.w	r7, [r8]
    4292:	f8cc 5000 	str.w	r5, [ip]
    4296:	6014      	str	r4, [r2, #0]
    4298:	3108      	adds	r1, #8
    429a:	3b01      	subs	r3, #1
    429c:	d1df      	bne.n	425e <arm_bitreversal_16_0>
    429e:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
    42a2:	4770      	bx	lr

000042a4 <arm_radix4_butterfly_q15>:
    42a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    42a8:	469b      	mov	fp, r3
    42aa:	b091      	sub	sp, #68	; 0x44
    42ac:	088b      	lsrs	r3, r1, #2
    42ae:	4606      	mov	r6, r0
    42b0:	900e      	str	r0, [sp, #56]	; 0x38
    42b2:	2500      	movs	r5, #0
    42b4:	4618      	mov	r0, r3
    42b6:	9103      	str	r1, [sp, #12]
    42b8:	930f      	str	r3, [sp, #60]	; 0x3c
    42ba:	4637      	mov	r7, r6
    42bc:	0081      	lsls	r1, r0, #2
    42be:	4682      	mov	sl, r0
    42c0:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
    42c4:	4696      	mov	lr, r2
    42c6:	1870      	adds	r0, r6, r1
    42c8:	9207      	str	r2, [sp, #28]
    42ca:	009b      	lsls	r3, r3, #2
    42cc:	462c      	mov	r4, r5
    42ce:	1846      	adds	r6, r0, r1
    42d0:	462a      	mov	r2, r5
    42d2:	9304      	str	r3, [sp, #16]
    42d4:	4431      	add	r1, r6
    42d6:	9601      	str	r6, [sp, #4]
    42d8:	f8cd b008 	str.w	fp, [sp, #8]
    42dc:	683b      	ldr	r3, [r7, #0]
    42de:	fa93 fc22 	shadd16	ip, r3, r2
    42e2:	fa9c fc22 	shadd16	ip, ip, r2
    42e6:	9b01      	ldr	r3, [sp, #4]
    42e8:	681b      	ldr	r3, [r3, #0]
    42ea:	fa93 f322 	shadd16	r3, r3, r2
    42ee:	fa93 f322 	shadd16	r3, r3, r2
    42f2:	fa9c f813 	qadd16	r8, ip, r3
    42f6:	fadc fc13 	qsub16	ip, ip, r3
    42fa:	6803      	ldr	r3, [r0, #0]
    42fc:	fa93 f322 	shadd16	r3, r3, r2
    4300:	fa93 f922 	shadd16	r9, r3, r2
    4304:	680b      	ldr	r3, [r1, #0]
    4306:	fa93 f322 	shadd16	r3, r3, r2
    430a:	fa93 f322 	shadd16	r3, r3, r2
    430e:	fa99 f313 	qadd16	r3, r9, r3
    4312:	fa98 f923 	shadd16	r9, r8, r3
    4316:	f847 9b04 	str.w	r9, [r7], #4
    431a:	fad8 f313 	qsub16	r3, r8, r3
    431e:	f85e 9034 	ldr.w	r9, [lr, r4, lsl #3]
    4322:	fb29 fb03 	smuad	fp, r9, r3
    4326:	fb49 f913 	smusdx	r9, r9, r3
    432a:	6803      	ldr	r3, [r0, #0]
    432c:	fa93 f322 	shadd16	r3, r3, r2
    4330:	fa93 f822 	shadd16	r8, r3, r2
    4334:	4b78      	ldr	r3, [pc, #480]	; (4518 <arm_radix4_butterfly_q15+0x274>)
    4336:	ea09 0303 	and.w	r3, r9, r3
    433a:	ea43 431b 	orr.w	r3, r3, fp, lsr #16
    433e:	f840 3b04 	str.w	r3, [r0], #4
    4342:	680b      	ldr	r3, [r1, #0]
    4344:	fa93 f322 	shadd16	r3, r3, r2
    4348:	fa93 f322 	shadd16	r3, r3, r2
    434c:	fad8 f313 	qsub16	r3, r8, r3
    4350:	faac f913 	qasx	r9, ip, r3
    4354:	faec fc13 	qsax	ip, ip, r3
    4358:	f85e 3024 	ldr.w	r3, [lr, r4, lsl #2]
    435c:	fb23 f80c 	smuad	r8, r3, ip
    4360:	fb43 fc1c 	smusdx	ip, r3, ip
    4364:	4b6c      	ldr	r3, [pc, #432]	; (4518 <arm_radix4_butterfly_q15+0x274>)
    4366:	9e01      	ldr	r6, [sp, #4]
    4368:	ea0c 0303 	and.w	r3, ip, r3
    436c:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
    4370:	f846 3b04 	str.w	r3, [r6], #4
    4374:	9601      	str	r6, [sp, #4]
    4376:	462e      	mov	r6, r5
    4378:	f85e 3005 	ldr.w	r3, [lr, r5]
    437c:	fb23 fc09 	smuad	ip, r3, r9
    4380:	fb43 f919 	smusdx	r9, r3, r9
    4384:	4b64      	ldr	r3, [pc, #400]	; (4518 <arm_radix4_butterfly_q15+0x274>)
    4386:	f1ba 0a01 	subs.w	sl, sl, #1
    438a:	9d02      	ldr	r5, [sp, #8]
    438c:	ea09 0303 	and.w	r3, r9, r3
    4390:	442c      	add	r4, r5
    4392:	9d04      	ldr	r5, [sp, #16]
    4394:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
    4398:	442e      	add	r6, r5
    439a:	f841 3b04 	str.w	r3, [r1], #4
    439e:	4635      	mov	r5, r6
    43a0:	d19c      	bne.n	42dc <arm_radix4_butterfly_q15+0x38>
    43a2:	f8dd b008 	ldr.w	fp, [sp, #8]
    43a6:	ea4f 038b 	mov.w	r3, fp, lsl #2
    43aa:	9309      	str	r3, [sp, #36]	; 0x24
    43ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    43ae:	2b04      	cmp	r3, #4
    43b0:	f240 8086 	bls.w	44c0 <arm_radix4_butterfly_q15+0x21c>
    43b4:	f8cd a010 	str.w	sl, [sp, #16]
    43b8:	930c      	str	r3, [sp, #48]	; 0x30
    43ba:	9302      	str	r3, [sp, #8]
    43bc:	9a02      	ldr	r2, [sp, #8]
    43be:	2100      	movs	r1, #0
    43c0:	0893      	lsrs	r3, r2, #2
    43c2:	9105      	str	r1, [sp, #20]
    43c4:	0097      	lsls	r7, r2, #2
    43c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    43c8:	930d      	str	r3, [sp, #52]	; 0x34
    43ca:	9206      	str	r2, [sp, #24]
    43cc:	1e5a      	subs	r2, r3, #1
    43ce:	009b      	lsls	r3, r3, #2
    43d0:	9108      	str	r1, [sp, #32]
    43d2:	920a      	str	r2, [sp, #40]	; 0x28
    43d4:	930b      	str	r3, [sp, #44]	; 0x2c
    43d6:	9907      	ldr	r1, [sp, #28]
    43d8:	9a08      	ldr	r2, [sp, #32]
    43da:	460d      	mov	r5, r1
    43dc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    43de:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    43e2:	4611      	mov	r1, r2
    43e4:	f855 c022 	ldr.w	ip, [r5, r2, lsl #2]
    43e8:	9a07      	ldr	r2, [sp, #28]
    43ea:	9e06      	ldr	r6, [sp, #24]
    43ec:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
    43f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    43f2:	1930      	adds	r0, r6, r4
    43f4:	f852 8031 	ldr.w	r8, [r2, r1, lsl #3]
    43f8:	18cb      	adds	r3, r1, r3
    43fa:	9a05      	ldr	r2, [sp, #20]
    43fc:	1825      	adds	r5, r4, r0
    43fe:	9308      	str	r3, [sp, #32]
    4400:	9b03      	ldr	r3, [sp, #12]
    4402:	442c      	add	r4, r5
    4404:	4293      	cmp	r3, r2
    4406:	d946      	bls.n	4496 <arm_radix4_butterfly_q15+0x1f2>
    4408:	9b02      	ldr	r3, [sp, #8]
    440a:	9501      	str	r5, [sp, #4]
    440c:	eb03 0e02 	add.w	lr, r3, r2
    4410:	9a01      	ldr	r2, [sp, #4]
    4412:	6833      	ldr	r3, [r6, #0]
    4414:	6812      	ldr	r2, [r2, #0]
    4416:	fa93 fa12 	qadd16	sl, r3, r2
    441a:	fad3 f312 	qsub16	r3, r3, r2
    441e:	6801      	ldr	r1, [r0, #0]
    4420:	6822      	ldr	r2, [r4, #0]
    4422:	fa91 f112 	qadd16	r1, r1, r2
    4426:	fa9a f221 	shadd16	r2, sl, r1
    442a:	9d04      	ldr	r5, [sp, #16]
    442c:	fa92 f225 	shadd16	r2, r2, r5
    4430:	6032      	str	r2, [r6, #0]
    4432:	443e      	add	r6, r7
    4434:	fada f121 	shsub16	r1, sl, r1
    4438:	fb28 fb01 	smuad	fp, r8, r1
    443c:	fb48 f211 	smusdx	r2, r8, r1
    4440:	4935      	ldr	r1, [pc, #212]	; (4518 <arm_radix4_butterfly_q15+0x274>)
    4442:	f8d0 a000 	ldr.w	sl, [r0]
    4446:	4011      	ands	r1, r2
    4448:	ea41 411b 	orr.w	r1, r1, fp, lsr #16
    444c:	6001      	str	r1, [r0, #0]
    444e:	4438      	add	r0, r7
    4450:	6822      	ldr	r2, [r4, #0]
    4452:	fada f212 	qsub16	r2, sl, r2
    4456:	faa3 f122 	shasx	r1, r3, r2
    445a:	fae3 f322 	shsax	r3, r3, r2
    445e:	fb2c fb03 	smuad	fp, ip, r3
    4462:	fb4c f313 	smusdx	r3, ip, r3
    4466:	4a2c      	ldr	r2, [pc, #176]	; (4518 <arm_radix4_butterfly_q15+0x274>)
    4468:	401a      	ands	r2, r3
    446a:	9b01      	ldr	r3, [sp, #4]
    446c:	ea42 421b 	orr.w	r2, r2, fp, lsr #16
    4470:	601a      	str	r2, [r3, #0]
    4472:	443b      	add	r3, r7
    4474:	9301      	str	r3, [sp, #4]
    4476:	fb29 f201 	smuad	r2, r9, r1
    447a:	fb49 f111 	smusdx	r1, r9, r1
    447e:	4b26      	ldr	r3, [pc, #152]	; (4518 <arm_radix4_butterfly_q15+0x274>)
    4480:	46f2      	mov	sl, lr
    4482:	9d02      	ldr	r5, [sp, #8]
    4484:	400b      	ands	r3, r1
    4486:	44ae      	add	lr, r5
    4488:	ea43 4312 	orr.w	r3, r3, r2, lsr #16
    448c:	6023      	str	r3, [r4, #0]
    448e:	443c      	add	r4, r7
    4490:	9b03      	ldr	r3, [sp, #12]
    4492:	4553      	cmp	r3, sl
    4494:	d8bc      	bhi.n	4410 <arm_radix4_butterfly_q15+0x16c>
    4496:	9a06      	ldr	r2, [sp, #24]
    4498:	9b05      	ldr	r3, [sp, #20]
    449a:	3204      	adds	r2, #4
    449c:	3301      	adds	r3, #1
    449e:	9206      	str	r2, [sp, #24]
    44a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    44a2:	9305      	str	r3, [sp, #20]
    44a4:	4293      	cmp	r3, r2
    44a6:	d996      	bls.n	43d6 <arm_radix4_butterfly_q15+0x132>
    44a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    44aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    44ac:	089b      	lsrs	r3, r3, #2
    44ae:	9202      	str	r2, [sp, #8]
    44b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    44b2:	2b04      	cmp	r3, #4
    44b4:	930c      	str	r3, [sp, #48]	; 0x30
    44b6:	ea4f 0282 	mov.w	r2, r2, lsl #2
    44ba:	9209      	str	r2, [sp, #36]	; 0x24
    44bc:	f63f af7e 	bhi.w	43bc <arm_radix4_butterfly_q15+0x118>
    44c0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    44c2:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    44c4:	3410      	adds	r4, #16
    44c6:	f854 3c10 	ldr.w	r3, [r4, #-16]
    44ca:	f854 7c08 	ldr.w	r7, [r4, #-8]
    44ce:	fa93 f117 	qadd16	r1, r3, r7
    44d2:	f854 2c0c 	ldr.w	r2, [r4, #-12]
    44d6:	f854 0c04 	ldr.w	r0, [r4, #-4]
    44da:	fa92 f510 	qadd16	r5, r2, r0
    44de:	fa91 f525 	shadd16	r5, r1, r5
    44e2:	f844 5c10 	str.w	r5, [r4, #-16]
    44e6:	fa92 f510 	qadd16	r5, r2, r0
    44ea:	fad1 f125 	shsub16	r1, r1, r5
    44ee:	f844 1c0c 	str.w	r1, [r4, #-12]
    44f2:	fad3 f317 	qsub16	r3, r3, r7
    44f6:	fad2 f210 	qsub16	r2, r2, r0
    44fa:	fae3 f122 	shsax	r1, r3, r2
    44fe:	f844 1c08 	str.w	r1, [r4, #-8]
    4502:	faa3 f322 	shasx	r3, r3, r2
    4506:	3e01      	subs	r6, #1
    4508:	f844 3c04 	str.w	r3, [r4, #-4]
    450c:	f104 0410 	add.w	r4, r4, #16
    4510:	d1d9      	bne.n	44c6 <arm_radix4_butterfly_q15+0x222>
    4512:	b011      	add	sp, #68	; 0x44
    4514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4518:	ffff0000 	.word	0xffff0000

0000451c <arm_radix4_butterfly_inverse_q15>:
    451c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4520:	469b      	mov	fp, r3
    4522:	b091      	sub	sp, #68	; 0x44
    4524:	088b      	lsrs	r3, r1, #2
    4526:	4606      	mov	r6, r0
    4528:	900e      	str	r0, [sp, #56]	; 0x38
    452a:	2500      	movs	r5, #0
    452c:	4618      	mov	r0, r3
    452e:	9103      	str	r1, [sp, #12]
    4530:	930f      	str	r3, [sp, #60]	; 0x3c
    4532:	4637      	mov	r7, r6
    4534:	0081      	lsls	r1, r0, #2
    4536:	4682      	mov	sl, r0
    4538:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
    453c:	4696      	mov	lr, r2
    453e:	1870      	adds	r0, r6, r1
    4540:	9207      	str	r2, [sp, #28]
    4542:	009b      	lsls	r3, r3, #2
    4544:	462c      	mov	r4, r5
    4546:	1846      	adds	r6, r0, r1
    4548:	462a      	mov	r2, r5
    454a:	9304      	str	r3, [sp, #16]
    454c:	4431      	add	r1, r6
    454e:	9601      	str	r6, [sp, #4]
    4550:	f8cd b008 	str.w	fp, [sp, #8]
    4554:	683b      	ldr	r3, [r7, #0]
    4556:	fa93 fc22 	shadd16	ip, r3, r2
    455a:	fa9c fc22 	shadd16	ip, ip, r2
    455e:	9b01      	ldr	r3, [sp, #4]
    4560:	681b      	ldr	r3, [r3, #0]
    4562:	fa93 f322 	shadd16	r3, r3, r2
    4566:	fa93 f322 	shadd16	r3, r3, r2
    456a:	fa9c f813 	qadd16	r8, ip, r3
    456e:	fadc fc13 	qsub16	ip, ip, r3
    4572:	6803      	ldr	r3, [r0, #0]
    4574:	fa93 f322 	shadd16	r3, r3, r2
    4578:	fa93 f922 	shadd16	r9, r3, r2
    457c:	680b      	ldr	r3, [r1, #0]
    457e:	fa93 f322 	shadd16	r3, r3, r2
    4582:	fa93 f322 	shadd16	r3, r3, r2
    4586:	fa99 f313 	qadd16	r3, r9, r3
    458a:	fa98 f923 	shadd16	r9, r8, r3
    458e:	f847 9b04 	str.w	r9, [r7], #4
    4592:	fad8 f313 	qsub16	r3, r8, r3
    4596:	f85e 9034 	ldr.w	r9, [lr, r4, lsl #3]
    459a:	fb49 fb03 	smusd	fp, r9, r3
    459e:	fb29 f913 	smuadx	r9, r9, r3
    45a2:	6803      	ldr	r3, [r0, #0]
    45a4:	fa93 f322 	shadd16	r3, r3, r2
    45a8:	fa93 f822 	shadd16	r8, r3, r2
    45ac:	4b78      	ldr	r3, [pc, #480]	; (4790 <arm_radix4_butterfly_inverse_q15+0x274>)
    45ae:	ea09 0303 	and.w	r3, r9, r3
    45b2:	ea43 431b 	orr.w	r3, r3, fp, lsr #16
    45b6:	f840 3b04 	str.w	r3, [r0], #4
    45ba:	680b      	ldr	r3, [r1, #0]
    45bc:	fa93 f322 	shadd16	r3, r3, r2
    45c0:	fa93 f322 	shadd16	r3, r3, r2
    45c4:	fad8 f313 	qsub16	r3, r8, r3
    45c8:	faec f913 	qsax	r9, ip, r3
    45cc:	faac fc13 	qasx	ip, ip, r3
    45d0:	f85e 3024 	ldr.w	r3, [lr, r4, lsl #2]
    45d4:	fb43 f80c 	smusd	r8, r3, ip
    45d8:	fb23 fc1c 	smuadx	ip, r3, ip
    45dc:	4b6c      	ldr	r3, [pc, #432]	; (4790 <arm_radix4_butterfly_inverse_q15+0x274>)
    45de:	9e01      	ldr	r6, [sp, #4]
    45e0:	ea0c 0303 	and.w	r3, ip, r3
    45e4:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
    45e8:	f846 3b04 	str.w	r3, [r6], #4
    45ec:	9601      	str	r6, [sp, #4]
    45ee:	462e      	mov	r6, r5
    45f0:	f85e 3005 	ldr.w	r3, [lr, r5]
    45f4:	fb43 fc09 	smusd	ip, r3, r9
    45f8:	fb23 f919 	smuadx	r9, r3, r9
    45fc:	4b64      	ldr	r3, [pc, #400]	; (4790 <arm_radix4_butterfly_inverse_q15+0x274>)
    45fe:	f1ba 0a01 	subs.w	sl, sl, #1
    4602:	9d02      	ldr	r5, [sp, #8]
    4604:	ea09 0303 	and.w	r3, r9, r3
    4608:	442c      	add	r4, r5
    460a:	9d04      	ldr	r5, [sp, #16]
    460c:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
    4610:	442e      	add	r6, r5
    4612:	f841 3b04 	str.w	r3, [r1], #4
    4616:	4635      	mov	r5, r6
    4618:	d19c      	bne.n	4554 <arm_radix4_butterfly_inverse_q15+0x38>
    461a:	f8dd b008 	ldr.w	fp, [sp, #8]
    461e:	ea4f 038b 	mov.w	r3, fp, lsl #2
    4622:	9309      	str	r3, [sp, #36]	; 0x24
    4624:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4626:	2b04      	cmp	r3, #4
    4628:	f240 8086 	bls.w	4738 <arm_radix4_butterfly_inverse_q15+0x21c>
    462c:	f8cd a010 	str.w	sl, [sp, #16]
    4630:	930c      	str	r3, [sp, #48]	; 0x30
    4632:	9302      	str	r3, [sp, #8]
    4634:	9a02      	ldr	r2, [sp, #8]
    4636:	2100      	movs	r1, #0
    4638:	0893      	lsrs	r3, r2, #2
    463a:	9105      	str	r1, [sp, #20]
    463c:	0097      	lsls	r7, r2, #2
    463e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    4640:	930d      	str	r3, [sp, #52]	; 0x34
    4642:	9206      	str	r2, [sp, #24]
    4644:	1e5a      	subs	r2, r3, #1
    4646:	009b      	lsls	r3, r3, #2
    4648:	9108      	str	r1, [sp, #32]
    464a:	920a      	str	r2, [sp, #40]	; 0x28
    464c:	930b      	str	r3, [sp, #44]	; 0x2c
    464e:	9907      	ldr	r1, [sp, #28]
    4650:	9a08      	ldr	r2, [sp, #32]
    4652:	460d      	mov	r5, r1
    4654:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    4656:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    465a:	4611      	mov	r1, r2
    465c:	f855 c022 	ldr.w	ip, [r5, r2, lsl #2]
    4660:	9a07      	ldr	r2, [sp, #28]
    4662:	9e06      	ldr	r6, [sp, #24]
    4664:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
    4668:	9b09      	ldr	r3, [sp, #36]	; 0x24
    466a:	1930      	adds	r0, r6, r4
    466c:	f852 8031 	ldr.w	r8, [r2, r1, lsl #3]
    4670:	18cb      	adds	r3, r1, r3
    4672:	9a05      	ldr	r2, [sp, #20]
    4674:	1825      	adds	r5, r4, r0
    4676:	9308      	str	r3, [sp, #32]
    4678:	9b03      	ldr	r3, [sp, #12]
    467a:	442c      	add	r4, r5
    467c:	4293      	cmp	r3, r2
    467e:	d946      	bls.n	470e <arm_radix4_butterfly_inverse_q15+0x1f2>
    4680:	9b02      	ldr	r3, [sp, #8]
    4682:	9501      	str	r5, [sp, #4]
    4684:	eb03 0e02 	add.w	lr, r3, r2
    4688:	9a01      	ldr	r2, [sp, #4]
    468a:	6833      	ldr	r3, [r6, #0]
    468c:	6812      	ldr	r2, [r2, #0]
    468e:	fa93 fa12 	qadd16	sl, r3, r2
    4692:	fad3 f312 	qsub16	r3, r3, r2
    4696:	6801      	ldr	r1, [r0, #0]
    4698:	6822      	ldr	r2, [r4, #0]
    469a:	fa91 f112 	qadd16	r1, r1, r2
    469e:	fa9a f221 	shadd16	r2, sl, r1
    46a2:	9d04      	ldr	r5, [sp, #16]
    46a4:	fa92 f225 	shadd16	r2, r2, r5
    46a8:	6032      	str	r2, [r6, #0]
    46aa:	443e      	add	r6, r7
    46ac:	fada f121 	shsub16	r1, sl, r1
    46b0:	fb48 fb01 	smusd	fp, r8, r1
    46b4:	fb28 f211 	smuadx	r2, r8, r1
    46b8:	4935      	ldr	r1, [pc, #212]	; (4790 <arm_radix4_butterfly_inverse_q15+0x274>)
    46ba:	f8d0 a000 	ldr.w	sl, [r0]
    46be:	4011      	ands	r1, r2
    46c0:	ea41 411b 	orr.w	r1, r1, fp, lsr #16
    46c4:	6001      	str	r1, [r0, #0]
    46c6:	4438      	add	r0, r7
    46c8:	6822      	ldr	r2, [r4, #0]
    46ca:	fada f212 	qsub16	r2, sl, r2
    46ce:	fae3 f122 	shsax	r1, r3, r2
    46d2:	faa3 f322 	shasx	r3, r3, r2
    46d6:	fb4c fb03 	smusd	fp, ip, r3
    46da:	fb2c f313 	smuadx	r3, ip, r3
    46de:	4a2c      	ldr	r2, [pc, #176]	; (4790 <arm_radix4_butterfly_inverse_q15+0x274>)
    46e0:	401a      	ands	r2, r3
    46e2:	9b01      	ldr	r3, [sp, #4]
    46e4:	ea42 421b 	orr.w	r2, r2, fp, lsr #16
    46e8:	601a      	str	r2, [r3, #0]
    46ea:	443b      	add	r3, r7
    46ec:	9301      	str	r3, [sp, #4]
    46ee:	fb49 f201 	smusd	r2, r9, r1
    46f2:	fb29 f111 	smuadx	r1, r9, r1
    46f6:	4b26      	ldr	r3, [pc, #152]	; (4790 <arm_radix4_butterfly_inverse_q15+0x274>)
    46f8:	46f2      	mov	sl, lr
    46fa:	9d02      	ldr	r5, [sp, #8]
    46fc:	400b      	ands	r3, r1
    46fe:	44ae      	add	lr, r5
    4700:	ea43 4312 	orr.w	r3, r3, r2, lsr #16
    4704:	6023      	str	r3, [r4, #0]
    4706:	443c      	add	r4, r7
    4708:	9b03      	ldr	r3, [sp, #12]
    470a:	4553      	cmp	r3, sl
    470c:	d8bc      	bhi.n	4688 <arm_radix4_butterfly_inverse_q15+0x16c>
    470e:	9a06      	ldr	r2, [sp, #24]
    4710:	9b05      	ldr	r3, [sp, #20]
    4712:	3204      	adds	r2, #4
    4714:	3301      	adds	r3, #1
    4716:	9206      	str	r2, [sp, #24]
    4718:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    471a:	9305      	str	r3, [sp, #20]
    471c:	4293      	cmp	r3, r2
    471e:	d996      	bls.n	464e <arm_radix4_butterfly_inverse_q15+0x132>
    4720:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4722:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    4724:	089b      	lsrs	r3, r3, #2
    4726:	9202      	str	r2, [sp, #8]
    4728:	9a09      	ldr	r2, [sp, #36]	; 0x24
    472a:	2b04      	cmp	r3, #4
    472c:	930c      	str	r3, [sp, #48]	; 0x30
    472e:	ea4f 0282 	mov.w	r2, r2, lsl #2
    4732:	9209      	str	r2, [sp, #36]	; 0x24
    4734:	f63f af7e 	bhi.w	4634 <arm_radix4_butterfly_inverse_q15+0x118>
    4738:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    473a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    473c:	3410      	adds	r4, #16
    473e:	f854 3c10 	ldr.w	r3, [r4, #-16]
    4742:	f854 7c08 	ldr.w	r7, [r4, #-8]
    4746:	fa93 f117 	qadd16	r1, r3, r7
    474a:	f854 2c0c 	ldr.w	r2, [r4, #-12]
    474e:	f854 0c04 	ldr.w	r0, [r4, #-4]
    4752:	fa92 f510 	qadd16	r5, r2, r0
    4756:	fa91 f525 	shadd16	r5, r1, r5
    475a:	f844 5c10 	str.w	r5, [r4, #-16]
    475e:	fa92 f510 	qadd16	r5, r2, r0
    4762:	fad1 f125 	shsub16	r1, r1, r5
    4766:	f844 1c0c 	str.w	r1, [r4, #-12]
    476a:	fad3 f317 	qsub16	r3, r3, r7
    476e:	fad2 f210 	qsub16	r2, r2, r0
    4772:	faa3 f122 	shasx	r1, r3, r2
    4776:	f844 1c08 	str.w	r1, [r4, #-8]
    477a:	fae3 f322 	shsax	r3, r3, r2
    477e:	3e01      	subs	r6, #1
    4780:	f844 3c04 	str.w	r3, [r4, #-4]
    4784:	f104 0410 	add.w	r4, r4, #16
    4788:	d1d9      	bne.n	473e <arm_radix4_butterfly_inverse_q15+0x222>
    478a:	b011      	add	sp, #68	; 0x44
    478c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4790:	ffff0000 	.word	0xffff0000

00004794 <__errno>:
    4794:	4b01      	ldr	r3, [pc, #4]	; (479c <__errno+0x8>)
    4796:	6818      	ldr	r0, [r3, #0]
    4798:	4770      	bx	lr
    479a:	bf00      	nop
    479c:	200126d8 	.word	0x200126d8

000047a0 <__libc_init_array>:
    47a0:	b570      	push	{r4, r5, r6, lr}
    47a2:	4e0f      	ldr	r6, [pc, #60]	; (47e0 <__libc_init_array+0x40>)
    47a4:	4d0f      	ldr	r5, [pc, #60]	; (47e4 <__libc_init_array+0x44>)
    47a6:	1b76      	subs	r6, r6, r5
    47a8:	10b6      	asrs	r6, r6, #2
    47aa:	bf18      	it	ne
    47ac:	2400      	movne	r4, #0
    47ae:	d005      	beq.n	47bc <__libc_init_array+0x1c>
    47b0:	3401      	adds	r4, #1
    47b2:	f855 3b04 	ldr.w	r3, [r5], #4
    47b6:	4798      	blx	r3
    47b8:	42a6      	cmp	r6, r4
    47ba:	d1f9      	bne.n	47b0 <__libc_init_array+0x10>
    47bc:	4e0a      	ldr	r6, [pc, #40]	; (47e8 <__libc_init_array+0x48>)
    47be:	4d0b      	ldr	r5, [pc, #44]	; (47ec <__libc_init_array+0x4c>)
    47c0:	1b76      	subs	r6, r6, r5
    47c2:	f000 fc71 	bl	50a8 <___init_veneer>
    47c6:	10b6      	asrs	r6, r6, #2
    47c8:	bf18      	it	ne
    47ca:	2400      	movne	r4, #0
    47cc:	d006      	beq.n	47dc <__libc_init_array+0x3c>
    47ce:	3401      	adds	r4, #1
    47d0:	f855 3b04 	ldr.w	r3, [r5], #4
    47d4:	4798      	blx	r3
    47d6:	42a6      	cmp	r6, r4
    47d8:	d1f9      	bne.n	47ce <__libc_init_array+0x2e>
    47da:	bd70      	pop	{r4, r5, r6, pc}
    47dc:	bd70      	pop	{r4, r5, r6, pc}
    47de:	bf00      	nop
    47e0:	60001780 	.word	0x60001780
    47e4:	60001780 	.word	0x60001780
    47e8:	60001790 	.word	0x60001790
    47ec:	60001780 	.word	0x60001780

000047f0 <malloc>:
    47f0:	4b02      	ldr	r3, [pc, #8]	; (47fc <malloc+0xc>)
    47f2:	4601      	mov	r1, r0
    47f4:	6818      	ldr	r0, [r3, #0]
    47f6:	f000 b803 	b.w	4800 <_malloc_r>
    47fa:	bf00      	nop
    47fc:	200126d8 	.word	0x200126d8

00004800 <_malloc_r>:
    4800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4804:	f101 050b 	add.w	r5, r1, #11
    4808:	2d16      	cmp	r5, #22
    480a:	b083      	sub	sp, #12
    480c:	4606      	mov	r6, r0
    480e:	f240 809f 	bls.w	4950 <_malloc_r+0x150>
    4812:	f035 0507 	bics.w	r5, r5, #7
    4816:	f100 80bf 	bmi.w	4998 <_malloc_r+0x198>
    481a:	42a9      	cmp	r1, r5
    481c:	f200 80bc 	bhi.w	4998 <_malloc_r+0x198>
    4820:	f000 faf4 	bl	4e0c <__malloc_lock>
    4824:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
    4828:	f0c0 829c 	bcc.w	4d64 <_malloc_r+0x564>
    482c:	0a6b      	lsrs	r3, r5, #9
    482e:	f000 80ba 	beq.w	49a6 <_malloc_r+0x1a6>
    4832:	2b04      	cmp	r3, #4
    4834:	f200 8183 	bhi.w	4b3e <_malloc_r+0x33e>
    4838:	09a8      	lsrs	r0, r5, #6
    483a:	f100 0e39 	add.w	lr, r0, #57	; 0x39
    483e:	ea4f 034e 	mov.w	r3, lr, lsl #1
    4842:	3038      	adds	r0, #56	; 0x38
    4844:	4fc4      	ldr	r7, [pc, #784]	; (4b58 <_malloc_r+0x358>)
    4846:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    484a:	f1a3 0108 	sub.w	r1, r3, #8
    484e:	685c      	ldr	r4, [r3, #4]
    4850:	42a1      	cmp	r1, r4
    4852:	d107      	bne.n	4864 <_malloc_r+0x64>
    4854:	e0ac      	b.n	49b0 <_malloc_r+0x1b0>
    4856:	2a00      	cmp	r2, #0
    4858:	f280 80ac 	bge.w	49b4 <_malloc_r+0x1b4>
    485c:	68e4      	ldr	r4, [r4, #12]
    485e:	42a1      	cmp	r1, r4
    4860:	f000 80a6 	beq.w	49b0 <_malloc_r+0x1b0>
    4864:	6863      	ldr	r3, [r4, #4]
    4866:	f023 0303 	bic.w	r3, r3, #3
    486a:	1b5a      	subs	r2, r3, r5
    486c:	2a0f      	cmp	r2, #15
    486e:	ddf2      	ble.n	4856 <_malloc_r+0x56>
    4870:	49b9      	ldr	r1, [pc, #740]	; (4b58 <_malloc_r+0x358>)
    4872:	693c      	ldr	r4, [r7, #16]
    4874:	f101 0e08 	add.w	lr, r1, #8
    4878:	4574      	cmp	r4, lr
    487a:	f000 81b3 	beq.w	4be4 <_malloc_r+0x3e4>
    487e:	6863      	ldr	r3, [r4, #4]
    4880:	f023 0303 	bic.w	r3, r3, #3
    4884:	1b5a      	subs	r2, r3, r5
    4886:	2a0f      	cmp	r2, #15
    4888:	f300 8199 	bgt.w	4bbe <_malloc_r+0x3be>
    488c:	2a00      	cmp	r2, #0
    488e:	f8c1 e014 	str.w	lr, [r1, #20]
    4892:	f8c1 e010 	str.w	lr, [r1, #16]
    4896:	f280 809e 	bge.w	49d6 <_malloc_r+0x1d6>
    489a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    489e:	f080 8167 	bcs.w	4b70 <_malloc_r+0x370>
    48a2:	08db      	lsrs	r3, r3, #3
    48a4:	f103 0c01 	add.w	ip, r3, #1
    48a8:	2201      	movs	r2, #1
    48aa:	109b      	asrs	r3, r3, #2
    48ac:	fa02 f303 	lsl.w	r3, r2, r3
    48b0:	684a      	ldr	r2, [r1, #4]
    48b2:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
    48b6:	f8c4 8008 	str.w	r8, [r4, #8]
    48ba:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
    48be:	431a      	orrs	r2, r3
    48c0:	f1a9 0308 	sub.w	r3, r9, #8
    48c4:	60e3      	str	r3, [r4, #12]
    48c6:	604a      	str	r2, [r1, #4]
    48c8:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
    48cc:	f8c8 400c 	str.w	r4, [r8, #12]
    48d0:	1083      	asrs	r3, r0, #2
    48d2:	2401      	movs	r4, #1
    48d4:	409c      	lsls	r4, r3
    48d6:	4294      	cmp	r4, r2
    48d8:	f200 808a 	bhi.w	49f0 <_malloc_r+0x1f0>
    48dc:	4214      	tst	r4, r2
    48de:	d106      	bne.n	48ee <_malloc_r+0xee>
    48e0:	f020 0003 	bic.w	r0, r0, #3
    48e4:	0064      	lsls	r4, r4, #1
    48e6:	4214      	tst	r4, r2
    48e8:	f100 0004 	add.w	r0, r0, #4
    48ec:	d0fa      	beq.n	48e4 <_malloc_r+0xe4>
    48ee:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    48f2:	46cc      	mov	ip, r9
    48f4:	4680      	mov	r8, r0
    48f6:	f8dc 100c 	ldr.w	r1, [ip, #12]
    48fa:	458c      	cmp	ip, r1
    48fc:	d107      	bne.n	490e <_malloc_r+0x10e>
    48fe:	e173      	b.n	4be8 <_malloc_r+0x3e8>
    4900:	2a00      	cmp	r2, #0
    4902:	f280 8181 	bge.w	4c08 <_malloc_r+0x408>
    4906:	68c9      	ldr	r1, [r1, #12]
    4908:	458c      	cmp	ip, r1
    490a:	f000 816d 	beq.w	4be8 <_malloc_r+0x3e8>
    490e:	684b      	ldr	r3, [r1, #4]
    4910:	f023 0303 	bic.w	r3, r3, #3
    4914:	1b5a      	subs	r2, r3, r5
    4916:	2a0f      	cmp	r2, #15
    4918:	ddf2      	ble.n	4900 <_malloc_r+0x100>
    491a:	460c      	mov	r4, r1
    491c:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    4920:	f854 8f08 	ldr.w	r8, [r4, #8]!
    4924:	194b      	adds	r3, r1, r5
    4926:	f045 0501 	orr.w	r5, r5, #1
    492a:	604d      	str	r5, [r1, #4]
    492c:	f042 0101 	orr.w	r1, r2, #1
    4930:	f8c8 c00c 	str.w	ip, [r8, #12]
    4934:	4630      	mov	r0, r6
    4936:	f8cc 8008 	str.w	r8, [ip, #8]
    493a:	617b      	str	r3, [r7, #20]
    493c:	613b      	str	r3, [r7, #16]
    493e:	f8c3 e00c 	str.w	lr, [r3, #12]
    4942:	f8c3 e008 	str.w	lr, [r3, #8]
    4946:	6059      	str	r1, [r3, #4]
    4948:	509a      	str	r2, [r3, r2]
    494a:	f000 fa61 	bl	4e10 <__malloc_unlock>
    494e:	e01f      	b.n	4990 <_malloc_r+0x190>
    4950:	2910      	cmp	r1, #16
    4952:	d821      	bhi.n	4998 <_malloc_r+0x198>
    4954:	f000 fa5a 	bl	4e0c <__malloc_lock>
    4958:	2510      	movs	r5, #16
    495a:	2306      	movs	r3, #6
    495c:	2002      	movs	r0, #2
    495e:	4f7e      	ldr	r7, [pc, #504]	; (4b58 <_malloc_r+0x358>)
    4960:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    4964:	f1a3 0208 	sub.w	r2, r3, #8
    4968:	685c      	ldr	r4, [r3, #4]
    496a:	4294      	cmp	r4, r2
    496c:	f000 8145 	beq.w	4bfa <_malloc_r+0x3fa>
    4970:	6863      	ldr	r3, [r4, #4]
    4972:	68e1      	ldr	r1, [r4, #12]
    4974:	68a5      	ldr	r5, [r4, #8]
    4976:	f023 0303 	bic.w	r3, r3, #3
    497a:	4423      	add	r3, r4
    497c:	4630      	mov	r0, r6
    497e:	685a      	ldr	r2, [r3, #4]
    4980:	60e9      	str	r1, [r5, #12]
    4982:	f042 0201 	orr.w	r2, r2, #1
    4986:	608d      	str	r5, [r1, #8]
    4988:	605a      	str	r2, [r3, #4]
    498a:	f000 fa41 	bl	4e10 <__malloc_unlock>
    498e:	3408      	adds	r4, #8
    4990:	4620      	mov	r0, r4
    4992:	b003      	add	sp, #12
    4994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4998:	2400      	movs	r4, #0
    499a:	230c      	movs	r3, #12
    499c:	4620      	mov	r0, r4
    499e:	6033      	str	r3, [r6, #0]
    49a0:	b003      	add	sp, #12
    49a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    49a6:	2380      	movs	r3, #128	; 0x80
    49a8:	f04f 0e40 	mov.w	lr, #64	; 0x40
    49ac:	203f      	movs	r0, #63	; 0x3f
    49ae:	e749      	b.n	4844 <_malloc_r+0x44>
    49b0:	4670      	mov	r0, lr
    49b2:	e75d      	b.n	4870 <_malloc_r+0x70>
    49b4:	4423      	add	r3, r4
    49b6:	68e1      	ldr	r1, [r4, #12]
    49b8:	685a      	ldr	r2, [r3, #4]
    49ba:	68a5      	ldr	r5, [r4, #8]
    49bc:	f042 0201 	orr.w	r2, r2, #1
    49c0:	60e9      	str	r1, [r5, #12]
    49c2:	4630      	mov	r0, r6
    49c4:	608d      	str	r5, [r1, #8]
    49c6:	605a      	str	r2, [r3, #4]
    49c8:	f000 fa22 	bl	4e10 <__malloc_unlock>
    49cc:	3408      	adds	r4, #8
    49ce:	4620      	mov	r0, r4
    49d0:	b003      	add	sp, #12
    49d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    49d6:	4423      	add	r3, r4
    49d8:	4630      	mov	r0, r6
    49da:	685a      	ldr	r2, [r3, #4]
    49dc:	f042 0201 	orr.w	r2, r2, #1
    49e0:	605a      	str	r2, [r3, #4]
    49e2:	f000 fa15 	bl	4e10 <__malloc_unlock>
    49e6:	3408      	adds	r4, #8
    49e8:	4620      	mov	r0, r4
    49ea:	b003      	add	sp, #12
    49ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    49f0:	68bc      	ldr	r4, [r7, #8]
    49f2:	6863      	ldr	r3, [r4, #4]
    49f4:	f023 0803 	bic.w	r8, r3, #3
    49f8:	45a8      	cmp	r8, r5
    49fa:	d304      	bcc.n	4a06 <_malloc_r+0x206>
    49fc:	ebc5 0308 	rsb	r3, r5, r8
    4a00:	2b0f      	cmp	r3, #15
    4a02:	f300 808c 	bgt.w	4b1e <_malloc_r+0x31e>
    4a06:	4b55      	ldr	r3, [pc, #340]	; (4b5c <_malloc_r+0x35c>)
    4a08:	f8df 9160 	ldr.w	r9, [pc, #352]	; 4b6c <_malloc_r+0x36c>
    4a0c:	681a      	ldr	r2, [r3, #0]
    4a0e:	f8d9 3000 	ldr.w	r3, [r9]
    4a12:	3301      	adds	r3, #1
    4a14:	442a      	add	r2, r5
    4a16:	eb04 0a08 	add.w	sl, r4, r8
    4a1a:	f000 8160 	beq.w	4cde <_malloc_r+0x4de>
    4a1e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    4a22:	320f      	adds	r2, #15
    4a24:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
    4a28:	f022 020f 	bic.w	r2, r2, #15
    4a2c:	4611      	mov	r1, r2
    4a2e:	4630      	mov	r0, r6
    4a30:	9201      	str	r2, [sp, #4]
    4a32:	f000 f9ef 	bl	4e14 <_sbrk_r>
    4a36:	f1b0 3fff 	cmp.w	r0, #4294967295
    4a3a:	4683      	mov	fp, r0
    4a3c:	9a01      	ldr	r2, [sp, #4]
    4a3e:	f000 8158 	beq.w	4cf2 <_malloc_r+0x4f2>
    4a42:	4582      	cmp	sl, r0
    4a44:	f200 80fc 	bhi.w	4c40 <_malloc_r+0x440>
    4a48:	4b45      	ldr	r3, [pc, #276]	; (4b60 <_malloc_r+0x360>)
    4a4a:	6819      	ldr	r1, [r3, #0]
    4a4c:	45da      	cmp	sl, fp
    4a4e:	4411      	add	r1, r2
    4a50:	6019      	str	r1, [r3, #0]
    4a52:	f000 8153 	beq.w	4cfc <_malloc_r+0x4fc>
    4a56:	f8d9 0000 	ldr.w	r0, [r9]
    4a5a:	f8df e110 	ldr.w	lr, [pc, #272]	; 4b6c <_malloc_r+0x36c>
    4a5e:	3001      	adds	r0, #1
    4a60:	bf1b      	ittet	ne
    4a62:	ebca 0a0b 	rsbne	sl, sl, fp
    4a66:	4451      	addne	r1, sl
    4a68:	f8ce b000 	streq.w	fp, [lr]
    4a6c:	6019      	strne	r1, [r3, #0]
    4a6e:	f01b 0107 	ands.w	r1, fp, #7
    4a72:	f000 8117 	beq.w	4ca4 <_malloc_r+0x4a4>
    4a76:	f1c1 0008 	rsb	r0, r1, #8
    4a7a:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
    4a7e:	4483      	add	fp, r0
    4a80:	3108      	adds	r1, #8
    4a82:	445a      	add	r2, fp
    4a84:	f3c2 020b 	ubfx	r2, r2, #0, #12
    4a88:	ebc2 0901 	rsb	r9, r2, r1
    4a8c:	4649      	mov	r1, r9
    4a8e:	4630      	mov	r0, r6
    4a90:	9301      	str	r3, [sp, #4]
    4a92:	f000 f9bf 	bl	4e14 <_sbrk_r>
    4a96:	1c43      	adds	r3, r0, #1
    4a98:	9b01      	ldr	r3, [sp, #4]
    4a9a:	f000 813f 	beq.w	4d1c <_malloc_r+0x51c>
    4a9e:	ebcb 0200 	rsb	r2, fp, r0
    4aa2:	444a      	add	r2, r9
    4aa4:	f042 0201 	orr.w	r2, r2, #1
    4aa8:	6819      	ldr	r1, [r3, #0]
    4aaa:	f8c7 b008 	str.w	fp, [r7, #8]
    4aae:	4449      	add	r1, r9
    4ab0:	42bc      	cmp	r4, r7
    4ab2:	f8cb 2004 	str.w	r2, [fp, #4]
    4ab6:	6019      	str	r1, [r3, #0]
    4ab8:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 4b60 <_malloc_r+0x360>
    4abc:	d016      	beq.n	4aec <_malloc_r+0x2ec>
    4abe:	f1b8 0f0f 	cmp.w	r8, #15
    4ac2:	f240 80fd 	bls.w	4cc0 <_malloc_r+0x4c0>
    4ac6:	6862      	ldr	r2, [r4, #4]
    4ac8:	f1a8 030c 	sub.w	r3, r8, #12
    4acc:	f023 0307 	bic.w	r3, r3, #7
    4ad0:	18e0      	adds	r0, r4, r3
    4ad2:	f002 0201 	and.w	r2, r2, #1
    4ad6:	f04f 0e05 	mov.w	lr, #5
    4ada:	431a      	orrs	r2, r3
    4adc:	2b0f      	cmp	r3, #15
    4ade:	6062      	str	r2, [r4, #4]
    4ae0:	f8c0 e004 	str.w	lr, [r0, #4]
    4ae4:	f8c0 e008 	str.w	lr, [r0, #8]
    4ae8:	f200 811c 	bhi.w	4d24 <_malloc_r+0x524>
    4aec:	4b1d      	ldr	r3, [pc, #116]	; (4b64 <_malloc_r+0x364>)
    4aee:	68bc      	ldr	r4, [r7, #8]
    4af0:	681a      	ldr	r2, [r3, #0]
    4af2:	4291      	cmp	r1, r2
    4af4:	bf88      	it	hi
    4af6:	6019      	strhi	r1, [r3, #0]
    4af8:	4b1b      	ldr	r3, [pc, #108]	; (4b68 <_malloc_r+0x368>)
    4afa:	681a      	ldr	r2, [r3, #0]
    4afc:	4291      	cmp	r1, r2
    4afe:	6862      	ldr	r2, [r4, #4]
    4b00:	bf88      	it	hi
    4b02:	6019      	strhi	r1, [r3, #0]
    4b04:	f022 0203 	bic.w	r2, r2, #3
    4b08:	4295      	cmp	r5, r2
    4b0a:	eba2 0305 	sub.w	r3, r2, r5
    4b0e:	d801      	bhi.n	4b14 <_malloc_r+0x314>
    4b10:	2b0f      	cmp	r3, #15
    4b12:	dc04      	bgt.n	4b1e <_malloc_r+0x31e>
    4b14:	4630      	mov	r0, r6
    4b16:	f000 f97b 	bl	4e10 <__malloc_unlock>
    4b1a:	2400      	movs	r4, #0
    4b1c:	e738      	b.n	4990 <_malloc_r+0x190>
    4b1e:	1962      	adds	r2, r4, r5
    4b20:	f043 0301 	orr.w	r3, r3, #1
    4b24:	f045 0501 	orr.w	r5, r5, #1
    4b28:	6065      	str	r5, [r4, #4]
    4b2a:	4630      	mov	r0, r6
    4b2c:	60ba      	str	r2, [r7, #8]
    4b2e:	6053      	str	r3, [r2, #4]
    4b30:	f000 f96e 	bl	4e10 <__malloc_unlock>
    4b34:	3408      	adds	r4, #8
    4b36:	4620      	mov	r0, r4
    4b38:	b003      	add	sp, #12
    4b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4b3e:	2b14      	cmp	r3, #20
    4b40:	d971      	bls.n	4c26 <_malloc_r+0x426>
    4b42:	2b54      	cmp	r3, #84	; 0x54
    4b44:	f200 80a4 	bhi.w	4c90 <_malloc_r+0x490>
    4b48:	0b28      	lsrs	r0, r5, #12
    4b4a:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
    4b4e:	ea4f 034e 	mov.w	r3, lr, lsl #1
    4b52:	306e      	adds	r0, #110	; 0x6e
    4b54:	e676      	b.n	4844 <_malloc_r+0x44>
    4b56:	bf00      	nop
    4b58:	200126dc 	.word	0x200126dc
    4b5c:	20023020 	.word	0x20023020
    4b60:	20023024 	.word	0x20023024
    4b64:	2002301c 	.word	0x2002301c
    4b68:	20023018 	.word	0x20023018
    4b6c:	20012ae8 	.word	0x20012ae8
    4b70:	0a5a      	lsrs	r2, r3, #9
    4b72:	2a04      	cmp	r2, #4
    4b74:	d95e      	bls.n	4c34 <_malloc_r+0x434>
    4b76:	2a14      	cmp	r2, #20
    4b78:	f200 80b3 	bhi.w	4ce2 <_malloc_r+0x4e2>
    4b7c:	f102 015c 	add.w	r1, r2, #92	; 0x5c
    4b80:	0049      	lsls	r1, r1, #1
    4b82:	325b      	adds	r2, #91	; 0x5b
    4b84:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
    4b88:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
    4b8c:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 4d6c <_malloc_r+0x56c>
    4b90:	f1ac 0c08 	sub.w	ip, ip, #8
    4b94:	458c      	cmp	ip, r1
    4b96:	f000 8088 	beq.w	4caa <_malloc_r+0x4aa>
    4b9a:	684a      	ldr	r2, [r1, #4]
    4b9c:	f022 0203 	bic.w	r2, r2, #3
    4ba0:	4293      	cmp	r3, r2
    4ba2:	d202      	bcs.n	4baa <_malloc_r+0x3aa>
    4ba4:	6889      	ldr	r1, [r1, #8]
    4ba6:	458c      	cmp	ip, r1
    4ba8:	d1f7      	bne.n	4b9a <_malloc_r+0x39a>
    4baa:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    4bae:	687a      	ldr	r2, [r7, #4]
    4bb0:	f8c4 c00c 	str.w	ip, [r4, #12]
    4bb4:	60a1      	str	r1, [r4, #8]
    4bb6:	f8cc 4008 	str.w	r4, [ip, #8]
    4bba:	60cc      	str	r4, [r1, #12]
    4bbc:	e688      	b.n	48d0 <_malloc_r+0xd0>
    4bbe:	1963      	adds	r3, r4, r5
    4bc0:	f042 0701 	orr.w	r7, r2, #1
    4bc4:	f045 0501 	orr.w	r5, r5, #1
    4bc8:	6065      	str	r5, [r4, #4]
    4bca:	4630      	mov	r0, r6
    4bcc:	614b      	str	r3, [r1, #20]
    4bce:	610b      	str	r3, [r1, #16]
    4bd0:	f8c3 e00c 	str.w	lr, [r3, #12]
    4bd4:	f8c3 e008 	str.w	lr, [r3, #8]
    4bd8:	605f      	str	r7, [r3, #4]
    4bda:	509a      	str	r2, [r3, r2]
    4bdc:	3408      	adds	r4, #8
    4bde:	f000 f917 	bl	4e10 <__malloc_unlock>
    4be2:	e6d5      	b.n	4990 <_malloc_r+0x190>
    4be4:	684a      	ldr	r2, [r1, #4]
    4be6:	e673      	b.n	48d0 <_malloc_r+0xd0>
    4be8:	f108 0801 	add.w	r8, r8, #1
    4bec:	f018 0f03 	tst.w	r8, #3
    4bf0:	f10c 0c08 	add.w	ip, ip, #8
    4bf4:	f47f ae7f 	bne.w	48f6 <_malloc_r+0xf6>
    4bf8:	e030      	b.n	4c5c <_malloc_r+0x45c>
    4bfa:	68dc      	ldr	r4, [r3, #12]
    4bfc:	42a3      	cmp	r3, r4
    4bfe:	bf08      	it	eq
    4c00:	3002      	addeq	r0, #2
    4c02:	f43f ae35 	beq.w	4870 <_malloc_r+0x70>
    4c06:	e6b3      	b.n	4970 <_malloc_r+0x170>
    4c08:	440b      	add	r3, r1
    4c0a:	460c      	mov	r4, r1
    4c0c:	685a      	ldr	r2, [r3, #4]
    4c0e:	68c9      	ldr	r1, [r1, #12]
    4c10:	f854 5f08 	ldr.w	r5, [r4, #8]!
    4c14:	f042 0201 	orr.w	r2, r2, #1
    4c18:	605a      	str	r2, [r3, #4]
    4c1a:	4630      	mov	r0, r6
    4c1c:	60e9      	str	r1, [r5, #12]
    4c1e:	608d      	str	r5, [r1, #8]
    4c20:	f000 f8f6 	bl	4e10 <__malloc_unlock>
    4c24:	e6b4      	b.n	4990 <_malloc_r+0x190>
    4c26:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
    4c2a:	f103 005b 	add.w	r0, r3, #91	; 0x5b
    4c2e:	ea4f 034e 	mov.w	r3, lr, lsl #1
    4c32:	e607      	b.n	4844 <_malloc_r+0x44>
    4c34:	099a      	lsrs	r2, r3, #6
    4c36:	f102 0139 	add.w	r1, r2, #57	; 0x39
    4c3a:	0049      	lsls	r1, r1, #1
    4c3c:	3238      	adds	r2, #56	; 0x38
    4c3e:	e7a1      	b.n	4b84 <_malloc_r+0x384>
    4c40:	42bc      	cmp	r4, r7
    4c42:	4b4a      	ldr	r3, [pc, #296]	; (4d6c <_malloc_r+0x56c>)
    4c44:	f43f af00 	beq.w	4a48 <_malloc_r+0x248>
    4c48:	689c      	ldr	r4, [r3, #8]
    4c4a:	6862      	ldr	r2, [r4, #4]
    4c4c:	f022 0203 	bic.w	r2, r2, #3
    4c50:	e75a      	b.n	4b08 <_malloc_r+0x308>
    4c52:	f859 3908 	ldr.w	r3, [r9], #-8
    4c56:	4599      	cmp	r9, r3
    4c58:	f040 8082 	bne.w	4d60 <_malloc_r+0x560>
    4c5c:	f010 0f03 	tst.w	r0, #3
    4c60:	f100 30ff 	add.w	r0, r0, #4294967295
    4c64:	d1f5      	bne.n	4c52 <_malloc_r+0x452>
    4c66:	687b      	ldr	r3, [r7, #4]
    4c68:	ea23 0304 	bic.w	r3, r3, r4
    4c6c:	607b      	str	r3, [r7, #4]
    4c6e:	0064      	lsls	r4, r4, #1
    4c70:	429c      	cmp	r4, r3
    4c72:	f63f aebd 	bhi.w	49f0 <_malloc_r+0x1f0>
    4c76:	2c00      	cmp	r4, #0
    4c78:	f43f aeba 	beq.w	49f0 <_malloc_r+0x1f0>
    4c7c:	421c      	tst	r4, r3
    4c7e:	4640      	mov	r0, r8
    4c80:	f47f ae35 	bne.w	48ee <_malloc_r+0xee>
    4c84:	0064      	lsls	r4, r4, #1
    4c86:	421c      	tst	r4, r3
    4c88:	f100 0004 	add.w	r0, r0, #4
    4c8c:	d0fa      	beq.n	4c84 <_malloc_r+0x484>
    4c8e:	e62e      	b.n	48ee <_malloc_r+0xee>
    4c90:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    4c94:	d818      	bhi.n	4cc8 <_malloc_r+0x4c8>
    4c96:	0be8      	lsrs	r0, r5, #15
    4c98:	f100 0e78 	add.w	lr, r0, #120	; 0x78
    4c9c:	ea4f 034e 	mov.w	r3, lr, lsl #1
    4ca0:	3077      	adds	r0, #119	; 0x77
    4ca2:	e5cf      	b.n	4844 <_malloc_r+0x44>
    4ca4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    4ca8:	e6eb      	b.n	4a82 <_malloc_r+0x282>
    4caa:	2101      	movs	r1, #1
    4cac:	f8d8 3004 	ldr.w	r3, [r8, #4]
    4cb0:	1092      	asrs	r2, r2, #2
    4cb2:	fa01 f202 	lsl.w	r2, r1, r2
    4cb6:	431a      	orrs	r2, r3
    4cb8:	f8c8 2004 	str.w	r2, [r8, #4]
    4cbc:	4661      	mov	r1, ip
    4cbe:	e777      	b.n	4bb0 <_malloc_r+0x3b0>
    4cc0:	2301      	movs	r3, #1
    4cc2:	f8cb 3004 	str.w	r3, [fp, #4]
    4cc6:	e725      	b.n	4b14 <_malloc_r+0x314>
    4cc8:	f240 5254 	movw	r2, #1364	; 0x554
    4ccc:	4293      	cmp	r3, r2
    4cce:	d820      	bhi.n	4d12 <_malloc_r+0x512>
    4cd0:	0ca8      	lsrs	r0, r5, #18
    4cd2:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
    4cd6:	ea4f 034e 	mov.w	r3, lr, lsl #1
    4cda:	307c      	adds	r0, #124	; 0x7c
    4cdc:	e5b2      	b.n	4844 <_malloc_r+0x44>
    4cde:	3210      	adds	r2, #16
    4ce0:	e6a4      	b.n	4a2c <_malloc_r+0x22c>
    4ce2:	2a54      	cmp	r2, #84	; 0x54
    4ce4:	d826      	bhi.n	4d34 <_malloc_r+0x534>
    4ce6:	0b1a      	lsrs	r2, r3, #12
    4ce8:	f102 016f 	add.w	r1, r2, #111	; 0x6f
    4cec:	0049      	lsls	r1, r1, #1
    4cee:	326e      	adds	r2, #110	; 0x6e
    4cf0:	e748      	b.n	4b84 <_malloc_r+0x384>
    4cf2:	68bc      	ldr	r4, [r7, #8]
    4cf4:	6862      	ldr	r2, [r4, #4]
    4cf6:	f022 0203 	bic.w	r2, r2, #3
    4cfa:	e705      	b.n	4b08 <_malloc_r+0x308>
    4cfc:	f3ca 000b 	ubfx	r0, sl, #0, #12
    4d00:	2800      	cmp	r0, #0
    4d02:	f47f aea8 	bne.w	4a56 <_malloc_r+0x256>
    4d06:	4442      	add	r2, r8
    4d08:	68bb      	ldr	r3, [r7, #8]
    4d0a:	f042 0201 	orr.w	r2, r2, #1
    4d0e:	605a      	str	r2, [r3, #4]
    4d10:	e6ec      	b.n	4aec <_malloc_r+0x2ec>
    4d12:	23fe      	movs	r3, #254	; 0xfe
    4d14:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
    4d18:	207e      	movs	r0, #126	; 0x7e
    4d1a:	e593      	b.n	4844 <_malloc_r+0x44>
    4d1c:	2201      	movs	r2, #1
    4d1e:	f04f 0900 	mov.w	r9, #0
    4d22:	e6c1      	b.n	4aa8 <_malloc_r+0x2a8>
    4d24:	f104 0108 	add.w	r1, r4, #8
    4d28:	4630      	mov	r0, r6
    4d2a:	f000 f8d3 	bl	4ed4 <_free_r>
    4d2e:	f8d9 1000 	ldr.w	r1, [r9]
    4d32:	e6db      	b.n	4aec <_malloc_r+0x2ec>
    4d34:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    4d38:	d805      	bhi.n	4d46 <_malloc_r+0x546>
    4d3a:	0bda      	lsrs	r2, r3, #15
    4d3c:	f102 0178 	add.w	r1, r2, #120	; 0x78
    4d40:	0049      	lsls	r1, r1, #1
    4d42:	3277      	adds	r2, #119	; 0x77
    4d44:	e71e      	b.n	4b84 <_malloc_r+0x384>
    4d46:	f240 5154 	movw	r1, #1364	; 0x554
    4d4a:	428a      	cmp	r2, r1
    4d4c:	d805      	bhi.n	4d5a <_malloc_r+0x55a>
    4d4e:	0c9a      	lsrs	r2, r3, #18
    4d50:	f102 017d 	add.w	r1, r2, #125	; 0x7d
    4d54:	0049      	lsls	r1, r1, #1
    4d56:	327c      	adds	r2, #124	; 0x7c
    4d58:	e714      	b.n	4b84 <_malloc_r+0x384>
    4d5a:	21fe      	movs	r1, #254	; 0xfe
    4d5c:	227e      	movs	r2, #126	; 0x7e
    4d5e:	e711      	b.n	4b84 <_malloc_r+0x384>
    4d60:	687b      	ldr	r3, [r7, #4]
    4d62:	e784      	b.n	4c6e <_malloc_r+0x46e>
    4d64:	08e8      	lsrs	r0, r5, #3
    4d66:	1c43      	adds	r3, r0, #1
    4d68:	005b      	lsls	r3, r3, #1
    4d6a:	e5f8      	b.n	495e <_malloc_r+0x15e>
    4d6c:	200126dc 	.word	0x200126dc

00004d70 <memset>:
    4d70:	b470      	push	{r4, r5, r6}
    4d72:	0784      	lsls	r4, r0, #30
    4d74:	d046      	beq.n	4e04 <memset+0x94>
    4d76:	1e54      	subs	r4, r2, #1
    4d78:	2a00      	cmp	r2, #0
    4d7a:	d041      	beq.n	4e00 <memset+0x90>
    4d7c:	b2cd      	uxtb	r5, r1
    4d7e:	4603      	mov	r3, r0
    4d80:	e002      	b.n	4d88 <memset+0x18>
    4d82:	1e62      	subs	r2, r4, #1
    4d84:	b3e4      	cbz	r4, 4e00 <memset+0x90>
    4d86:	4614      	mov	r4, r2
    4d88:	f803 5b01 	strb.w	r5, [r3], #1
    4d8c:	079a      	lsls	r2, r3, #30
    4d8e:	d1f8      	bne.n	4d82 <memset+0x12>
    4d90:	2c03      	cmp	r4, #3
    4d92:	d92e      	bls.n	4df2 <memset+0x82>
    4d94:	b2cd      	uxtb	r5, r1
    4d96:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    4d9a:	2c0f      	cmp	r4, #15
    4d9c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    4da0:	d919      	bls.n	4dd6 <memset+0x66>
    4da2:	f103 0210 	add.w	r2, r3, #16
    4da6:	4626      	mov	r6, r4
    4da8:	3e10      	subs	r6, #16
    4daa:	2e0f      	cmp	r6, #15
    4dac:	f842 5c10 	str.w	r5, [r2, #-16]
    4db0:	f842 5c0c 	str.w	r5, [r2, #-12]
    4db4:	f842 5c08 	str.w	r5, [r2, #-8]
    4db8:	f842 5c04 	str.w	r5, [r2, #-4]
    4dbc:	f102 0210 	add.w	r2, r2, #16
    4dc0:	d8f2      	bhi.n	4da8 <memset+0x38>
    4dc2:	f1a4 0210 	sub.w	r2, r4, #16
    4dc6:	f022 020f 	bic.w	r2, r2, #15
    4dca:	f004 040f 	and.w	r4, r4, #15
    4dce:	3210      	adds	r2, #16
    4dd0:	2c03      	cmp	r4, #3
    4dd2:	4413      	add	r3, r2
    4dd4:	d90d      	bls.n	4df2 <memset+0x82>
    4dd6:	461e      	mov	r6, r3
    4dd8:	4622      	mov	r2, r4
    4dda:	3a04      	subs	r2, #4
    4ddc:	2a03      	cmp	r2, #3
    4dde:	f846 5b04 	str.w	r5, [r6], #4
    4de2:	d8fa      	bhi.n	4dda <memset+0x6a>
    4de4:	1f22      	subs	r2, r4, #4
    4de6:	f022 0203 	bic.w	r2, r2, #3
    4dea:	3204      	adds	r2, #4
    4dec:	4413      	add	r3, r2
    4dee:	f004 0403 	and.w	r4, r4, #3
    4df2:	b12c      	cbz	r4, 4e00 <memset+0x90>
    4df4:	b2c9      	uxtb	r1, r1
    4df6:	441c      	add	r4, r3
    4df8:	f803 1b01 	strb.w	r1, [r3], #1
    4dfc:	42a3      	cmp	r3, r4
    4dfe:	d1fb      	bne.n	4df8 <memset+0x88>
    4e00:	bc70      	pop	{r4, r5, r6}
    4e02:	4770      	bx	lr
    4e04:	4614      	mov	r4, r2
    4e06:	4603      	mov	r3, r0
    4e08:	e7c2      	b.n	4d90 <memset+0x20>
    4e0a:	bf00      	nop

00004e0c <__malloc_lock>:
    4e0c:	4770      	bx	lr
    4e0e:	bf00      	nop

00004e10 <__malloc_unlock>:
    4e10:	4770      	bx	lr
    4e12:	bf00      	nop

00004e14 <_sbrk_r>:
    4e14:	b538      	push	{r3, r4, r5, lr}
    4e16:	4c07      	ldr	r4, [pc, #28]	; (4e34 <_sbrk_r+0x20>)
    4e18:	2300      	movs	r3, #0
    4e1a:	4605      	mov	r5, r0
    4e1c:	4608      	mov	r0, r1
    4e1e:	6023      	str	r3, [r4, #0]
    4e20:	f7fd fbe2 	bl	25e8 <_sbrk>
    4e24:	1c43      	adds	r3, r0, #1
    4e26:	d000      	beq.n	4e2a <_sbrk_r+0x16>
    4e28:	bd38      	pop	{r3, r4, r5, pc}
    4e2a:	6823      	ldr	r3, [r4, #0]
    4e2c:	2b00      	cmp	r3, #0
    4e2e:	d0fb      	beq.n	4e28 <_sbrk_r+0x14>
    4e30:	602b      	str	r3, [r5, #0]
    4e32:	bd38      	pop	{r3, r4, r5, pc}
    4e34:	2002528c 	.word	0x2002528c

00004e38 <_malloc_trim_r>:
    4e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4e3a:	4f23      	ldr	r7, [pc, #140]	; (4ec8 <_malloc_trim_r+0x90>)
    4e3c:	460c      	mov	r4, r1
    4e3e:	4606      	mov	r6, r0
    4e40:	f7ff ffe4 	bl	4e0c <__malloc_lock>
    4e44:	68bb      	ldr	r3, [r7, #8]
    4e46:	685d      	ldr	r5, [r3, #4]
    4e48:	f025 0503 	bic.w	r5, r5, #3
    4e4c:	1b29      	subs	r1, r5, r4
    4e4e:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
    4e52:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
    4e56:	f021 010f 	bic.w	r1, r1, #15
    4e5a:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
    4e5e:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    4e62:	db07      	blt.n	4e74 <_malloc_trim_r+0x3c>
    4e64:	2100      	movs	r1, #0
    4e66:	4630      	mov	r0, r6
    4e68:	f7ff ffd4 	bl	4e14 <_sbrk_r>
    4e6c:	68bb      	ldr	r3, [r7, #8]
    4e6e:	442b      	add	r3, r5
    4e70:	4298      	cmp	r0, r3
    4e72:	d004      	beq.n	4e7e <_malloc_trim_r+0x46>
    4e74:	4630      	mov	r0, r6
    4e76:	f7ff ffcb 	bl	4e10 <__malloc_unlock>
    4e7a:	2000      	movs	r0, #0
    4e7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4e7e:	4261      	negs	r1, r4
    4e80:	4630      	mov	r0, r6
    4e82:	f7ff ffc7 	bl	4e14 <_sbrk_r>
    4e86:	3001      	adds	r0, #1
    4e88:	d00d      	beq.n	4ea6 <_malloc_trim_r+0x6e>
    4e8a:	4b10      	ldr	r3, [pc, #64]	; (4ecc <_malloc_trim_r+0x94>)
    4e8c:	68ba      	ldr	r2, [r7, #8]
    4e8e:	6819      	ldr	r1, [r3, #0]
    4e90:	1b2d      	subs	r5, r5, r4
    4e92:	f045 0501 	orr.w	r5, r5, #1
    4e96:	4630      	mov	r0, r6
    4e98:	1b09      	subs	r1, r1, r4
    4e9a:	6055      	str	r5, [r2, #4]
    4e9c:	6019      	str	r1, [r3, #0]
    4e9e:	f7ff ffb7 	bl	4e10 <__malloc_unlock>
    4ea2:	2001      	movs	r0, #1
    4ea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4ea6:	2100      	movs	r1, #0
    4ea8:	4630      	mov	r0, r6
    4eaa:	f7ff ffb3 	bl	4e14 <_sbrk_r>
    4eae:	68ba      	ldr	r2, [r7, #8]
    4eb0:	1a83      	subs	r3, r0, r2
    4eb2:	2b0f      	cmp	r3, #15
    4eb4:	ddde      	ble.n	4e74 <_malloc_trim_r+0x3c>
    4eb6:	4c06      	ldr	r4, [pc, #24]	; (4ed0 <_malloc_trim_r+0x98>)
    4eb8:	4904      	ldr	r1, [pc, #16]	; (4ecc <_malloc_trim_r+0x94>)
    4eba:	6824      	ldr	r4, [r4, #0]
    4ebc:	f043 0301 	orr.w	r3, r3, #1
    4ec0:	1b00      	subs	r0, r0, r4
    4ec2:	6053      	str	r3, [r2, #4]
    4ec4:	6008      	str	r0, [r1, #0]
    4ec6:	e7d5      	b.n	4e74 <_malloc_trim_r+0x3c>
    4ec8:	200126dc 	.word	0x200126dc
    4ecc:	20023024 	.word	0x20023024
    4ed0:	20012ae8 	.word	0x20012ae8

00004ed4 <_free_r>:
    4ed4:	2900      	cmp	r1, #0
    4ed6:	d045      	beq.n	4f64 <_free_r+0x90>
    4ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4edc:	460d      	mov	r5, r1
    4ede:	4680      	mov	r8, r0
    4ee0:	f7ff ff94 	bl	4e0c <__malloc_lock>
    4ee4:	f855 7c04 	ldr.w	r7, [r5, #-4]
    4ee8:	496a      	ldr	r1, [pc, #424]	; (5094 <_free_r+0x1c0>)
    4eea:	f027 0301 	bic.w	r3, r7, #1
    4eee:	f1a5 0408 	sub.w	r4, r5, #8
    4ef2:	18e2      	adds	r2, r4, r3
    4ef4:	688e      	ldr	r6, [r1, #8]
    4ef6:	6850      	ldr	r0, [r2, #4]
    4ef8:	42b2      	cmp	r2, r6
    4efa:	f020 0003 	bic.w	r0, r0, #3
    4efe:	d062      	beq.n	4fc6 <_free_r+0xf2>
    4f00:	07fe      	lsls	r6, r7, #31
    4f02:	6050      	str	r0, [r2, #4]
    4f04:	d40b      	bmi.n	4f1e <_free_r+0x4a>
    4f06:	f855 7c08 	ldr.w	r7, [r5, #-8]
    4f0a:	1be4      	subs	r4, r4, r7
    4f0c:	f101 0e08 	add.w	lr, r1, #8
    4f10:	68a5      	ldr	r5, [r4, #8]
    4f12:	4575      	cmp	r5, lr
    4f14:	443b      	add	r3, r7
    4f16:	d06f      	beq.n	4ff8 <_free_r+0x124>
    4f18:	68e7      	ldr	r7, [r4, #12]
    4f1a:	60ef      	str	r7, [r5, #12]
    4f1c:	60bd      	str	r5, [r7, #8]
    4f1e:	1815      	adds	r5, r2, r0
    4f20:	686d      	ldr	r5, [r5, #4]
    4f22:	07ed      	lsls	r5, r5, #31
    4f24:	d542      	bpl.n	4fac <_free_r+0xd8>
    4f26:	f043 0201 	orr.w	r2, r3, #1
    4f2a:	6062      	str	r2, [r4, #4]
    4f2c:	50e3      	str	r3, [r4, r3]
    4f2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    4f32:	d218      	bcs.n	4f66 <_free_r+0x92>
    4f34:	08db      	lsrs	r3, r3, #3
    4f36:	1c5a      	adds	r2, r3, #1
    4f38:	684d      	ldr	r5, [r1, #4]
    4f3a:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
    4f3e:	60a7      	str	r7, [r4, #8]
    4f40:	2001      	movs	r0, #1
    4f42:	109b      	asrs	r3, r3, #2
    4f44:	fa00 f303 	lsl.w	r3, r0, r3
    4f48:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
    4f4c:	431d      	orrs	r5, r3
    4f4e:	3808      	subs	r0, #8
    4f50:	60e0      	str	r0, [r4, #12]
    4f52:	604d      	str	r5, [r1, #4]
    4f54:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
    4f58:	60fc      	str	r4, [r7, #12]
    4f5a:	4640      	mov	r0, r8
    4f5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4f60:	f7ff bf56 	b.w	4e10 <__malloc_unlock>
    4f64:	4770      	bx	lr
    4f66:	0a5a      	lsrs	r2, r3, #9
    4f68:	2a04      	cmp	r2, #4
    4f6a:	d853      	bhi.n	5014 <_free_r+0x140>
    4f6c:	099a      	lsrs	r2, r3, #6
    4f6e:	f102 0739 	add.w	r7, r2, #57	; 0x39
    4f72:	007f      	lsls	r7, r7, #1
    4f74:	f102 0538 	add.w	r5, r2, #56	; 0x38
    4f78:	eb01 0087 	add.w	r0, r1, r7, lsl #2
    4f7c:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
    4f80:	4944      	ldr	r1, [pc, #272]	; (5094 <_free_r+0x1c0>)
    4f82:	3808      	subs	r0, #8
    4f84:	4290      	cmp	r0, r2
    4f86:	d04d      	beq.n	5024 <_free_r+0x150>
    4f88:	6851      	ldr	r1, [r2, #4]
    4f8a:	f021 0103 	bic.w	r1, r1, #3
    4f8e:	428b      	cmp	r3, r1
    4f90:	d202      	bcs.n	4f98 <_free_r+0xc4>
    4f92:	6892      	ldr	r2, [r2, #8]
    4f94:	4290      	cmp	r0, r2
    4f96:	d1f7      	bne.n	4f88 <_free_r+0xb4>
    4f98:	68d0      	ldr	r0, [r2, #12]
    4f9a:	60e0      	str	r0, [r4, #12]
    4f9c:	60a2      	str	r2, [r4, #8]
    4f9e:	6084      	str	r4, [r0, #8]
    4fa0:	60d4      	str	r4, [r2, #12]
    4fa2:	4640      	mov	r0, r8
    4fa4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4fa8:	f7ff bf32 	b.w	4e10 <__malloc_unlock>
    4fac:	6895      	ldr	r5, [r2, #8]
    4fae:	4f3a      	ldr	r7, [pc, #232]	; (5098 <_free_r+0x1c4>)
    4fb0:	42bd      	cmp	r5, r7
    4fb2:	4403      	add	r3, r0
    4fb4:	d03f      	beq.n	5036 <_free_r+0x162>
    4fb6:	68d0      	ldr	r0, [r2, #12]
    4fb8:	60e8      	str	r0, [r5, #12]
    4fba:	f043 0201 	orr.w	r2, r3, #1
    4fbe:	6085      	str	r5, [r0, #8]
    4fc0:	6062      	str	r2, [r4, #4]
    4fc2:	50e3      	str	r3, [r4, r3]
    4fc4:	e7b3      	b.n	4f2e <_free_r+0x5a>
    4fc6:	07ff      	lsls	r7, r7, #31
    4fc8:	4403      	add	r3, r0
    4fca:	d407      	bmi.n	4fdc <_free_r+0x108>
    4fcc:	f855 2c08 	ldr.w	r2, [r5, #-8]
    4fd0:	1aa4      	subs	r4, r4, r2
    4fd2:	4413      	add	r3, r2
    4fd4:	68a0      	ldr	r0, [r4, #8]
    4fd6:	68e2      	ldr	r2, [r4, #12]
    4fd8:	60c2      	str	r2, [r0, #12]
    4fda:	6090      	str	r0, [r2, #8]
    4fdc:	4a2f      	ldr	r2, [pc, #188]	; (509c <_free_r+0x1c8>)
    4fde:	6812      	ldr	r2, [r2, #0]
    4fe0:	f043 0001 	orr.w	r0, r3, #1
    4fe4:	4293      	cmp	r3, r2
    4fe6:	6060      	str	r0, [r4, #4]
    4fe8:	608c      	str	r4, [r1, #8]
    4fea:	d3b6      	bcc.n	4f5a <_free_r+0x86>
    4fec:	4b2c      	ldr	r3, [pc, #176]	; (50a0 <_free_r+0x1cc>)
    4fee:	4640      	mov	r0, r8
    4ff0:	6819      	ldr	r1, [r3, #0]
    4ff2:	f7ff ff21 	bl	4e38 <_malloc_trim_r>
    4ff6:	e7b0      	b.n	4f5a <_free_r+0x86>
    4ff8:	1811      	adds	r1, r2, r0
    4ffa:	6849      	ldr	r1, [r1, #4]
    4ffc:	07c9      	lsls	r1, r1, #31
    4ffe:	d444      	bmi.n	508a <_free_r+0x1b6>
    5000:	6891      	ldr	r1, [r2, #8]
    5002:	68d2      	ldr	r2, [r2, #12]
    5004:	60ca      	str	r2, [r1, #12]
    5006:	4403      	add	r3, r0
    5008:	f043 0001 	orr.w	r0, r3, #1
    500c:	6091      	str	r1, [r2, #8]
    500e:	6060      	str	r0, [r4, #4]
    5010:	50e3      	str	r3, [r4, r3]
    5012:	e7a2      	b.n	4f5a <_free_r+0x86>
    5014:	2a14      	cmp	r2, #20
    5016:	d817      	bhi.n	5048 <_free_r+0x174>
    5018:	f102 075c 	add.w	r7, r2, #92	; 0x5c
    501c:	007f      	lsls	r7, r7, #1
    501e:	f102 055b 	add.w	r5, r2, #91	; 0x5b
    5022:	e7a9      	b.n	4f78 <_free_r+0xa4>
    5024:	10aa      	asrs	r2, r5, #2
    5026:	684b      	ldr	r3, [r1, #4]
    5028:	2501      	movs	r5, #1
    502a:	fa05 f202 	lsl.w	r2, r5, r2
    502e:	4313      	orrs	r3, r2
    5030:	604b      	str	r3, [r1, #4]
    5032:	4602      	mov	r2, r0
    5034:	e7b1      	b.n	4f9a <_free_r+0xc6>
    5036:	f043 0201 	orr.w	r2, r3, #1
    503a:	614c      	str	r4, [r1, #20]
    503c:	610c      	str	r4, [r1, #16]
    503e:	60e5      	str	r5, [r4, #12]
    5040:	60a5      	str	r5, [r4, #8]
    5042:	6062      	str	r2, [r4, #4]
    5044:	50e3      	str	r3, [r4, r3]
    5046:	e788      	b.n	4f5a <_free_r+0x86>
    5048:	2a54      	cmp	r2, #84	; 0x54
    504a:	d806      	bhi.n	505a <_free_r+0x186>
    504c:	0b1a      	lsrs	r2, r3, #12
    504e:	f102 076f 	add.w	r7, r2, #111	; 0x6f
    5052:	007f      	lsls	r7, r7, #1
    5054:	f102 056e 	add.w	r5, r2, #110	; 0x6e
    5058:	e78e      	b.n	4f78 <_free_r+0xa4>
    505a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    505e:	d806      	bhi.n	506e <_free_r+0x19a>
    5060:	0bda      	lsrs	r2, r3, #15
    5062:	f102 0778 	add.w	r7, r2, #120	; 0x78
    5066:	007f      	lsls	r7, r7, #1
    5068:	f102 0577 	add.w	r5, r2, #119	; 0x77
    506c:	e784      	b.n	4f78 <_free_r+0xa4>
    506e:	f240 5054 	movw	r0, #1364	; 0x554
    5072:	4282      	cmp	r2, r0
    5074:	d806      	bhi.n	5084 <_free_r+0x1b0>
    5076:	0c9a      	lsrs	r2, r3, #18
    5078:	f102 077d 	add.w	r7, r2, #125	; 0x7d
    507c:	007f      	lsls	r7, r7, #1
    507e:	f102 057c 	add.w	r5, r2, #124	; 0x7c
    5082:	e779      	b.n	4f78 <_free_r+0xa4>
    5084:	27fe      	movs	r7, #254	; 0xfe
    5086:	257e      	movs	r5, #126	; 0x7e
    5088:	e776      	b.n	4f78 <_free_r+0xa4>
    508a:	f043 0201 	orr.w	r2, r3, #1
    508e:	6062      	str	r2, [r4, #4]
    5090:	50e3      	str	r3, [r4, r3]
    5092:	e762      	b.n	4f5a <_free_r+0x86>
    5094:	200126dc 	.word	0x200126dc
    5098:	200126e4 	.word	0x200126e4
    509c:	20012ae4 	.word	0x20012ae4
    50a0:	20023020 	.word	0x20023020
    50a4:	00000000 	.word	0x00000000

000050a8 <___init_veneer>:
    50a8:	f85f f000 	ldr.w	pc, [pc]	; 50ac <___init_veneer+0x4>
    50ac:	60001729 	.word	0x60001729

Disassembly of section .fini:

000050b0 <_fini>:
    50b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    50b2:	bf00      	nop
