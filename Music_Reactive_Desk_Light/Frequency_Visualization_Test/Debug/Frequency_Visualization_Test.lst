
C:\Users\lesle\AppData\Local\Temp\VMBuilds\Frequency_Visualization_Test\teensy40\Debug/Frequency_Visualization_Test.ino.elf:     file format elf32-littlearm


Disassembly of section .text.progmem:

60000000 <FlexSPI_NOR_Config>:
60000000:	46 43 46 42 00 00 01 56 00 00 00 00 01 01 02 00     FCFB...V........
	...
60000044:	01 04 03 00 00 00 00 00 00 00 00 00 00 00 20 00     .............. .
	...
60000080:	eb 04 18 0a 06 32 04 26 00 00 00 00 00 00 00 00     .....2.&........
60000090:	05 04 04 24 00 00 00 00 00 00 00 00 00 00 00 00     ...$............
	...
600000b0:	06 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
600000d0:	20 04 18 08 00 00 00 00 00 00 00 00 00 00 00 00      ...............
	...
60000100:	d8 04 18 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
60000110:	02 04 18 08 04 20 00 00 00 00 00 00 00 00 00 00     ..... ..........
	...
60000130:	60 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     `...............
	...
600001c0:	00 01 00 00 00 10 00 00 01 00 00 00 00 00 00 00     ................
600001d0:	00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
60000200:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000210:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000220:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000230:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000240:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000250:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000260:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000270:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000280:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000290:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000300:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000310:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000320:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000330:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000340:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000350:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000360:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000370:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000380:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000390:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000400:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000410:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000420:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000430:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000440:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000450:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000460:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000470:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000480:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000490:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000500:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000510:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000520:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000530:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000540:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000550:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000560:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000570:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000580:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000590:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000600:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000610:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000620:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000630:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000640:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000650:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000660:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000670:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000680:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000690:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000700:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000710:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000720:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000730:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000740:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000750:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000760:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000770:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000780:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000790:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000800:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000810:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000820:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000830:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000840:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000850:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000860:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000870:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000880:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000890:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000900:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000910:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000920:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000930:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000940:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000950:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000960:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000970:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000980:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000990:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000aa0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ab0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ac0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ad0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ae0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000af0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ba0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000be0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bf0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ca0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ce0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cf0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000da0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000db0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000dc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000dd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000de0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000df0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ea0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000eb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ec0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ed0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ee0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ef0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fa0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fe0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ff0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................

60001000 <ImageVectorTable>:
60001000:	d1 00 20 40 2c 10 00 60 00 00 00 00 00 00 00 00     .. @,..`........
60001010:	20 10 00 60 00 10 00 60 00 00 00 00 00 00 00 00      ..`...`........

60001020 <BootData>:
60001020:	00 00 00 60 70 7c 01 00 00 00 00 00                 ...`p|......

6000102c <vector_table>:
6000102c:	00 00 01 20 35 10 00 60                             ... 5..`

60001034 <ResetHandler>:
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001034:	4b76      	ldr	r3, [pc, #472]	; (60001210 <ResetHandler+0x1dc>)
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001036:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103a:	4a76      	ldr	r2, [pc, #472]	; (60001214 <ResetHandler+0x1e0>)
	IOMUXC_GPR_GPR16 = 0x00200007;
6000103c:	4876      	ldr	r0, [pc, #472]	; (60001218 <ResetHandler+0x1e4>)
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103e:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001040:	6418      	str	r0, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001042:	4a76      	ldr	r2, [pc, #472]	; (6000121c <ResetHandler+0x1e8>)
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001044:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001046:	4695      	mov	sp, r2
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001048:	4a75      	ldr	r2, [pc, #468]	; (60001220 <ResetHandler+0x1ec>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
6000104a:	f503 3330 	add.w	r3, r3, #180224	; 0x2c000
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
6000104e:	4975      	ldr	r1, [pc, #468]	; (60001224 <ResetHandler+0x1f0>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001050:	2008      	movs	r0, #8
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001052:	428a      	cmp	r2, r1
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001054:	f8c3 0154 	str.w	r0, [r3, #340]	; 0x154
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001058:	d00f      	beq.n	6000107a <ResetHandler+0x46>
	while (dest < dest_end) {
6000105a:	4b73      	ldr	r3, [pc, #460]	; (60001228 <ResetHandler+0x1f4>)
6000105c:	429a      	cmp	r2, r3
6000105e:	d20c      	bcs.n	6000107a <ResetHandler+0x46>
60001060:	43d4      	mvns	r4, r2
60001062:	4608      	mov	r0, r1
60001064:	4423      	add	r3, r4
60001066:	f023 0303 	bic.w	r3, r3, #3
6000106a:	3304      	adds	r3, #4
6000106c:	440b      	add	r3, r1
		*dest++ = *src++;
6000106e:	f850 1b04 	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001072:	4298      	cmp	r0, r3
		*dest++ = *src++;
60001074:	f842 1b04 	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001078:	d1f9      	bne.n	6000106e <ResetHandler+0x3a>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
6000107a:	4a6c      	ldr	r2, [pc, #432]	; (6000122c <ResetHandler+0x1f8>)
6000107c:	496c      	ldr	r1, [pc, #432]	; (60001230 <ResetHandler+0x1fc>)
6000107e:	428a      	cmp	r2, r1
60001080:	d00f      	beq.n	600010a2 <ResetHandler+0x6e>
	while (dest < dest_end) {
60001082:	4b6c      	ldr	r3, [pc, #432]	; (60001234 <ResetHandler+0x200>)
60001084:	429a      	cmp	r2, r3
60001086:	d20c      	bcs.n	600010a2 <ResetHandler+0x6e>
60001088:	43d4      	mvns	r4, r2
6000108a:	4608      	mov	r0, r1
6000108c:	4423      	add	r3, r4
6000108e:	f023 0303 	bic.w	r3, r3, #3
60001092:	3304      	adds	r3, #4
60001094:	440b      	add	r3, r1
		*dest++ = *src++;
60001096:	f850 1b04 	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
6000109a:	4298      	cmp	r0, r3
		*dest++ = *src++;
6000109c:	f842 1b04 	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
600010a0:	d1f9      	bne.n	60001096 <ResetHandler+0x62>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010a2:	4a65      	ldr	r2, [pc, #404]	; (60001238 <ResetHandler+0x204>)
600010a4:	4b65      	ldr	r3, [pc, #404]	; (6000123c <ResetHandler+0x208>)
600010a6:	429a      	cmp	r2, r3
600010a8:	d20b      	bcs.n	600010c2 <ResetHandler+0x8e>
600010aa:	43d0      	mvns	r0, r2
600010ac:	4611      	mov	r1, r2
		*dest++ = 0;
600010ae:	2400      	movs	r4, #0
600010b0:	4403      	add	r3, r0
600010b2:	f023 0303 	bic.w	r3, r3, #3
600010b6:	3304      	adds	r3, #4
600010b8:	4413      	add	r3, r2
600010ba:	f841 4b04 	str.w	r4, [r1], #4
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010be:	428b      	cmp	r3, r1
600010c0:	d1fb      	bne.n	600010ba <ResetHandler+0x86>
	memory_copy(&_stext, &_stextload, &_etext);
	memory_copy(&_sdata, &_sdataload, &_edata);
	memory_clear(&_sbss, &_ebss);

	// enable FPU
	SCB_CPACR = 0x00F00000;
600010c2:	4a5f      	ldr	r2, [pc, #380]	; (60001240 <ResetHandler+0x20c>)
600010c4:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
600010c8:	4b5e      	ldr	r3, [pc, #376]	; (60001244 <ResetHandler+0x210>)
600010ca:	6011      	str	r1, [r2, #0]
600010cc:	f503 7130 	add.w	r1, r3, #704	; 0x2c0
600010d0:	4a5d      	ldr	r2, [pc, #372]	; (60001248 <ResetHandler+0x214>)

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
600010d2:	f843 2f04 	str.w	r2, [r3, #4]!
600010d6:	4299      	cmp	r1, r3
600010d8:	d1fb      	bne.n	600010d2 <ResetHandler+0x9e>
600010da:	4b5c      	ldr	r3, [pc, #368]	; (6000124c <ResetHandler+0x218>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600010dc:	2180      	movs	r1, #128	; 0x80
600010de:	4a5c      	ldr	r2, [pc, #368]	; (60001250 <ResetHandler+0x21c>)
600010e0:	f803 1b01 	strb.w	r1, [r3], #1
600010e4:	4293      	cmp	r3, r2
600010e6:	d1fb      	bne.n	600010e0 <ResetHandler+0xac>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600010e8:	4c5a      	ldr	r4, [pc, #360]	; (60001254 <ResetHandler+0x220>)
600010ea:	f04f 3780 	mov.w	r7, #2155905152	; 0x80808080
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600010ee:	4e5a      	ldr	r6, [pc, #360]	; (60001258 <ResetHandler+0x224>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010f0:	f04f 32ff 	mov.w	r2, #4294967295
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010f4:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 60001298 <ResetHandler+0x264>
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
600010f8:	2500      	movs	r5, #0

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600010fa:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 6000129c <ResetHandler+0x268>
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600010fe:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 600012a0 <ResetHandler+0x26c>
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
60001102:	4b56      	ldr	r3, [pc, #344]	; (6000125c <ResetHandler+0x228>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001104:	4942      	ldr	r1, [pc, #264]	; (60001210 <ResetHandler+0x1dc>)
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
60001106:	f8c3 a000 	str.w	sl, [r3]
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
6000110a:	f8c4 7104 	str.w	r7, [r4, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000110e:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001112:	f8c4 70f4 	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001116:	f8c4 80f0 	str.w	r8, [r4, #240]	; 0xf0
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
6000111a:	69f3      	ldr	r3, [r6, #28]
6000111c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
60001120:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001124:	61f3      	str	r3, [r6, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
60001126:	6a73      	ldr	r3, [r6, #36]	; 0x24
60001128:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
6000112c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001130:	6273      	str	r3, [r6, #36]	; 0x24

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001132:	668a      	str	r2, [r1, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
60001134:	66ca      	str	r2, [r1, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001136:	670a      	str	r2, [r1, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001138:	674a      	str	r2, [r1, #116]	; 0x74
	// must enable PRINT_DEBUG_STUFF in debug/print.h
	printf_debug_init();
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
6000113a:	f000 f8df 	bl	600012fc <configure_cache>
extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000113e:	4a48      	ldr	r2, [pc, #288]	; (60001260 <ResetHandler+0x22c>)
60001140:	2063      	movs	r0, #99	; 0x63
	SYST_CVR = 0;
60001142:	4b48      	ldr	r3, [pc, #288]	; (60001264 <ResetHandler+0x230>)
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
60001144:	4948      	ldr	r1, [pc, #288]	; (60001268 <ResetHandler+0x234>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001146:	6010      	str	r0, [r2, #0]
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001148:	2203      	movs	r2, #3
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
6000114a:	601d      	str	r5, [r3, #0]
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
6000114c:	f8ca 1038 	str.w	r1, [sl, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001150:	f843 2c08 	str.w	r2, [r3, #-8]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001154:	4945      	ldr	r1, [pc, #276]	; (6000126c <ResetHandler+0x238>)
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001156:	4a46      	ldr	r2, [pc, #280]	; (60001270 <ResetHandler+0x23c>)

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
60001158:	4846      	ldr	r0, [pc, #280]	; (60001274 <ResetHandler+0x240>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000115a:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000115e:	680b      	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001160:	4a45      	ldr	r2, [pc, #276]	; (60001278 <ResetHandler+0x244>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001162:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
60001166:	f8ca 003c 	str.w	r0, [sl, #60]	; 0x3c
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000116a:	4844      	ldr	r0, [pc, #272]	; (6000127c <ResetHandler+0x248>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000116c:	600b      	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000116e:	6813      	ldr	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001170:	4943      	ldr	r1, [pc, #268]	; (60001280 <ResetHandler+0x24c>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001172:	f043 0301 	orr.w	r3, r3, #1
60001176:	6013      	str	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001178:	6803      	ldr	r3, [r0, #0]
6000117a:	600b      	str	r3, [r1, #0]
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
	configure_systick();
	usb_pll_start();	
6000117c:	f000 f93a 	bl	600013f4 <usb_pll_start>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001180:	f8c4 7104 	str.w	r7, [r4, #260]	; 0x104
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001184:	483f      	ldr	r0, [pc, #252]	; (60001284 <ResetHandler+0x250>)

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001186:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000118a:	f8c4 70f4 	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000118e:	f8c4 80f0 	str.w	r8, [r4, #240]	; 0xf0
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001192:	f000 fad5 	bl	60001740 <__set_arm_clock_veneer>
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?
60001196:	bf00      	nop
60001198:	bf00      	nop
6000119a:	bf00      	nop
6000119c:	bf00      	nop

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000119e:	6ef1      	ldr	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
600011a0:	4a39      	ldr	r2, [pc, #228]	; (60001288 <ResetHandler+0x254>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
600011a2:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
	PIT_TCTRL1 = 0;
	PIT_TCTRL2 = 0;
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011a6:	4b39      	ldr	r3, [pc, #228]	; (6000128c <ResetHandler+0x258>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
600011a8:	66f1      	str	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
600011aa:	6015      	str	r5, [r2, #0]
	PIT_TCTRL0 = 0;
600011ac:	f8c2 5108 	str.w	r5, [r2, #264]	; 0x108
	PIT_TCTRL1 = 0;
600011b0:	f8c2 5118 	str.w	r5, [r2, #280]	; 0x118
	PIT_TCTRL2 = 0;
600011b4:	f8c2 5128 	str.w	r5, [r2, #296]	; 0x128
	PIT_TCTRL3 = 0;
600011b8:	f8c2 5138 	str.w	r5, [r2, #312]	; 0x138

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
600011be:	07d2      	lsls	r2, r2, #31
600011c0:	d408      	bmi.n	600011d4 <ResetHandler+0x1a0>
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011c2:	f642 6215 	movw	r2, #11797	; 0x2e15
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
600011c6:	4932      	ldr	r1, [pc, #200]	; (60001290 <ResetHandler+0x25c>)
600011c8:	6559      	str	r1, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011ca:	651a      	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
600011cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
600011ce:	f042 0201 	orr.w	r2, r2, #1
600011d2:	639a      	str	r2, [r3, #56]	; 0x38
	}
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600011d4:	4a2d      	ldr	r2, [pc, #180]	; (6000128c <ResetHandler+0x258>)
600011d6:	4c2f      	ldr	r4, [pc, #188]	; (60001294 <ResetHandler+0x260>)
600011d8:	6893      	ldr	r3, [r2, #8]
600011da:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
600011de:	6093      	str	r3, [r2, #8]

#ifdef ARDUINO_TEENSY41
	configure_external_ram();
#endif
	startup_early_hook();
600011e0:	f000 faaa 	bl	60001738 <__startup_early_hook_veneer>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
600011e4:	6823      	ldr	r3, [r4, #0]
	while (millis() < 20) ; // wait at least 20ms before starting USB
600011e6:	2b13      	cmp	r3, #19
600011e8:	d9fc      	bls.n	600011e4 <ResetHandler+0x1b0>
	usb_init();
600011ea:	f000 f9c3 	bl	60001574 <usb_init>
	analog_init();
600011ee:	f000 f859 	bl	600012a4 <analog_init>
	pwm_init();
600011f2:	f000 fabd 	bl	60001770 <__pwm_init_veneer>
	tempmon_init();
600011f6:	f000 f92f 	bl	60001458 <tempmon_init>

	startup_late_hook();
600011fa:	f000 fab1 	bl	60001760 <__startup_late_hook_veneer>
600011fe:	6823      	ldr	r3, [r4, #0]
	while (millis() < 300) ; // wait at least 300ms before calling user code
60001200:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
60001204:	d3fb      	bcc.n	600011fe <ResetHandler+0x1ca>
	//printf("before C++ constructors\n");
	__libc_init_array();
60001206:	f000 fab7 	bl	60001778 <____libc_init_array_veneer>
	//printf("after C++ constructors\n");
	//printf("before setup\n");
	main();
6000120a:	f000 faa1 	bl	60001750 <__main_veneer>
6000120e:	e7fe      	b.n	6000120e <ResetHandler+0x1da>
60001210:	400ac000 	.word	0x400ac000
60001214:	aaaaaaab 	.word	0xaaaaaaab
60001218:	00200007 	.word	0x00200007
6000121c:	20078000 	.word	0x20078000
60001220:	00000000 	.word	0x00000000
60001224:	60001790 	.word	0x60001790
60001228:	00004210 	.word	0x00004210
6000122c:	20000000 	.word	0x20000000
60001230:	600059a4 	.word	0x600059a4
60001234:	200122d0 	.word	0x200122d0
60001238:	200122d0 	.word	0x200122d0
6000123c:	200162c0 	.word	0x200162c0
60001240:	e000ed88 	.word	0xe000ed88
60001244:	20013ffc 	.word	0x20013ffc
60001248:	00001cc9 	.word	0x00001cc9
6000124c:	e000e400 	.word	0xe000e400
60001250:	e000e4a0 	.word	0xe000e4a0
60001254:	400d8000 	.word	0x400d8000
60001258:	400fc000 	.word	0x400fc000
6000125c:	e000ed08 	.word	0xe000ed08
60001260:	e000e014 	.word	0xe000e014
60001264:	e000e018 	.word	0xe000e018
60001268:	00002e75 	.word	0x00002e75
6000126c:	e000edfc 	.word	0xe000edfc
60001270:	20200000 	.word	0x20200000
60001274:	00002e79 	.word	0x00002e79
60001278:	e0001000 	.word	0xe0001000
6000127c:	e0001004 	.word	0xe0001004
60001280:	20013d4c 	.word	0x20013d4c
60001284:	23c34600 	.word	0x23c34600
60001288:	40084000 	.word	0x40084000
6000128c:	400d4000 	.word	0x400d4000
60001290:	56c00000 	.word	0x56c00000
60001294:	20013d54 	.word	0x20013d54
60001298:	20014000 	.word	0x20014000
6000129c:	2018101b 	.word	0x2018101b
600012a0:	13110d0c 	.word	0x13110d0c

600012a4 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600012a4:	4b11      	ldr	r3, [pc, #68]	; (600012ec <analog_init+0x48>)
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600012a6:	4912      	ldr	r1, [pc, #72]	; (600012f0 <analog_init+0x4c>)
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600012a8:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
600012aa:	460a      	mov	r2, r1
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600012ac:	f440 3040 	orr.w	r0, r0, #196608	; 0x30000
}

#define MAX_ADC_CLOCK 20000000

FLASHMEM void analog_init(void)
{
600012b0:	b430      	push	{r4, r5}
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600012b2:	66d8      	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600012b4:	f240 6537 	movw	r5, #1591	; 0x637
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600012b8:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600012ba:	24a0      	movs	r4, #160	; 0xa0
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600012bc:	f440 7040 	orr.w	r0, r0, #768	; 0x300
600012c0:	66d8      	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600012c2:	644d      	str	r5, [r1, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600012c4:	648c      	str	r4, [r1, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
600012c6:	6c93      	ldr	r3, [r2, #72]	; 0x48
600012c8:	061b      	lsls	r3, r3, #24
600012ca:	d4fc      	bmi.n	600012c6 <analog_init+0x22>
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
600012cc:	4b09      	ldr	r3, [pc, #36]	; (600012f4 <analog_init+0x50>)
600012ce:	f240 6037 	movw	r0, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600012d2:	21a0      	movs	r1, #160	; 0xa0
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
600012d4:	461a      	mov	r2, r3
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
600012d6:	6458      	str	r0, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600012d8:	6499      	str	r1, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
600012da:	6c93      	ldr	r3, [r2, #72]	; 0x48
600012dc:	f013 0380 	ands.w	r3, r3, #128	; 0x80
600012e0:	d1fb      	bne.n	600012da <analog_init+0x36>
	calibrating = 0;
600012e2:	4a05      	ldr	r2, [pc, #20]	; (600012f8 <analog_init+0x54>)
600012e4:	7013      	strb	r3, [r2, #0]
}
600012e6:	bc30      	pop	{r4, r5}
600012e8:	4770      	bx	lr
600012ea:	bf00      	nop
600012ec:	400fc000 	.word	0x400fc000
600012f0:	400c4000 	.word	0x400c4000
600012f4:	400c8000 	.word	0x400c8000
600012f8:	20013d48 	.word	0x20013d48

600012fc <configure_cache>:
#define SIZE_2G		(SCB_MPU_RASR_SIZE(30) | SCB_MPU_RASR_ENABLE)
#define SIZE_4G		(SCB_MPU_RASR_SIZE(31) | SCB_MPU_RASR_ENABLE)
#define REGION(n)	(SCB_MPU_RBAR_REGION(n) | SCB_MPU_RBAR_VALID)

FLASHMEM void configure_cache(void)
{
600012fc:	b5f0      	push	{r4, r5, r6, r7, lr}
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600012fe:	4a28      	ldr	r2, [pc, #160]	; (600013a0 <configure_cache+0xa4>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
60001300:	2000      	movs	r0, #0

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60001302:	4b28      	ldr	r3, [pc, #160]	; (600013a4 <configure_cache+0xa8>)
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001304:	f04f 0c10 	mov.w	ip, #16
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
60001308:	4c27      	ldr	r4, [pc, #156]	; (600013a8 <configure_cache+0xac>)

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
6000130a:	2711      	movs	r7, #17

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000130c:	f8df e0d8 	ldr.w	lr, [pc, #216]	; 600013e8 <configure_cache+0xec>
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001310:	2612      	movs	r6, #18
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
60001312:	6020      	str	r0, [r4, #0]
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001314:	2501      	movs	r5, #1
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001316:	f8c2 c000 	str.w	ip, [r2]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000131a:	f8c3 e000 	str.w	lr, [r3]
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
6000131e:	6017      	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
60001320:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 600013ec <configure_cache+0xf0>

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60001324:	4f21      	ldr	r7, [pc, #132]	; (600013ac <configure_cache+0xb0>)
	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
60001326:	f8c3 e000 	str.w	lr, [r3]

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
6000132a:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
6000132c:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
6000132e:	4e20      	ldr	r6, [pc, #128]	; (600013b0 <configure_cache+0xb4>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001330:	4f20      	ldr	r7, [pc, #128]	; (600013b4 <configure_cache+0xb8>)
	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001332:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001334:	4920      	ldr	r1, [pc, #128]	; (600013b8 <configure_cache+0xbc>)
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001336:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001338:	4e20      	ldr	r6, [pc, #128]	; (600013bc <configure_cache+0xc0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
6000133a:	f041 0115 	orr.w	r1, r1, #21

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
6000133e:	4f20      	ldr	r7, [pc, #128]	; (600013c0 <configure_cache+0xc4>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001340:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001342:	601f      	str	r7, [r3, #0]
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001344:	f507 3740 	add.w	r7, r7, #196608	; 0x30000

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001348:	4e1e      	ldr	r6, [pc, #120]	; (600013c4 <configure_cache+0xc8>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
6000134a:	6011      	str	r1, [r2, #0]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
6000134c:	3702      	adds	r7, #2

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
6000134e:	601e      	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001350:	f8df e09c 	ldr.w	lr, [pc, #156]	; 600013f0 <configure_cache+0xf4>
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001354:	4e1c      	ldr	r6, [pc, #112]	; (600013c8 <configure_cache+0xcc>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001356:	491d      	ldr	r1, [pc, #116]	; (600013cc <configure_cache+0xd0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001358:	f8c2 e000 	str.w	lr, [r2]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
6000135c:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
6000135e:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001360:	4f1b      	ldr	r7, [pc, #108]	; (600013d0 <configure_cache+0xd4>)

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001362:	6019      	str	r1, [r3, #0]

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001364:	4e1b      	ldr	r6, [pc, #108]	; (600013d4 <configure_cache+0xd8>)

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001366:	491c      	ldr	r1, [pc, #112]	; (600013d8 <configure_cache+0xdc>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001368:	6017      	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
6000136a:	601e      	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;
6000136c:	4f1b      	ldr	r7, [pc, #108]	; (600013dc <configure_cache+0xe0>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000136e:	6011      	str	r1, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001370:	4e1b      	ldr	r6, [pc, #108]	; (600013e0 <configure_cache+0xe4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001372:	491c      	ldr	r1, [pc, #112]	; (600013e4 <configure_cache+0xe8>)

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;
60001374:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001376:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001378:	6019      	str	r1, [r3, #0]

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
6000137a:	6025      	str	r5, [r4, #0]

	// cache enable, ARM DDI0403E, pg 628
	asm("dsb");
6000137c:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001380:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
60001384:	f8c3 01b0 	str.w	r0, [r3, #432]	; 0x1b0

	asm("dsb");
60001388:	f3bf 8f4f 	dsb	sy
	asm("isb");
6000138c:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001390:	f852 3c88 	ldr.w	r3, [r2, #-136]
60001394:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
60001398:	f842 3c88 	str.w	r3, [r2, #-136]
6000139c:	bdf0      	pop	{r4, r5, r6, r7, pc}
6000139e:	bf00      	nop
600013a0:	e000ed9c 	.word	0xe000ed9c
600013a4:	e000eda0 	.word	0xe000eda0
600013a8:	e000ed94 	.word	0xe000ed94
600013ac:	00100009 	.word	0x00100009
600013b0:	00200013 	.word	0x00200013
600013b4:	07020021 	.word	0x07020021
600013b8:	200162c0 	.word	0x200162c0
600013bc:	20000014 	.word	0x20000014
600013c0:	13080025 	.word	0x13080025
600013c4:	10000009 	.word	0x10000009
600013c8:	40000017 	.word	0x40000017
600013cc:	13100033 	.word	0x13100033
600013d0:	60000018 	.word	0x60000018
600013d4:	070b002f 	.word	0x070b002f
600013d8:	70000019 	.word	0x70000019
600013dc:	170b0037 	.word	0x170b0037
600013e0:	7000001a 	.word	0x7000001a
600013e4:	130b002f 	.word	0x130b002f
600013e8:	1000003f 	.word	0x1000003f
600013ec:	03080025 	.word	0x03080025
600013f0:	20200016 	.word	0x20200016

600013f4 <usb_pll_start>:

#endif // ARDUINO_TEENSY41


FLASHMEM void usb_pll_start()
{
600013f4:	b4f0      	push	{r4, r5, r6, r7}
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
600013f6:	4a17      	ldr	r2, [pc, #92]	; (60001454 <usb_pll_start+0x60>)
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
600013f8:	2740      	movs	r7, #64	; 0x40
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
600013fa:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
600013fe:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001402:	f44f 5500 	mov.w	r5, #8192	; 0x2000
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001406:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
6000140a:	f243 0042 	movw	r0, #12354	; 0x3042


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000140e:	6913      	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001410:	f013 0f02 	tst.w	r3, #2
60001414:	d006      	beq.n	60001424 <usb_pll_start+0x30>
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001416:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001418:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
6000141a:	6190      	str	r0, [r2, #24]


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000141c:	6913      	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
6000141e:	f013 0f02 	tst.w	r3, #2
60001422:	d1f8      	bne.n	60001416 <usb_pll_start+0x22>
				CCM_ANALOG_PLL_USB1_DIV_SELECT |		// use 480 MHz
				CCM_ANALOG_PLL_USB1_ENABLE |			// disable
				CCM_ANALOG_PLL_USB1_EN_USB_CLKS;		// disable usb
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001424:	f413 5f00 	tst.w	r3, #8192	; 0x2000
60001428:	d101      	bne.n	6000142e <usb_pll_start+0x3a>
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000142a:	6155      	str	r5, [r2, #20]
			continue;
6000142c:	e7ef      	b.n	6000140e <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
6000142e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
60001432:	d101      	bne.n	60001438 <usb_pll_start+0x44>
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001434:	6156      	str	r6, [r2, #20]
			continue;
60001436:	e7ea      	b.n	6000140e <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001438:	2b00      	cmp	r3, #0
6000143a:	dae8      	bge.n	6000140e <usb_pll_start+0x1a>
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
6000143c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
60001440:	d001      	beq.n	60001446 <usb_pll_start+0x52>
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001442:	6191      	str	r1, [r2, #24]
			continue;
60001444:	e7e3      	b.n	6000140e <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001446:	065b      	lsls	r3, r3, #25
60001448:	d401      	bmi.n	6000144e <usb_pll_start+0x5a>
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
6000144a:	6157      	str	r7, [r2, #20]
			continue;
6000144c:	e7df      	b.n	6000140e <usb_pll_start+0x1a>
		}
		return; // everything is as it should be  :-)
	}
}
6000144e:	bcf0      	pop	{r4, r5, r6, r7}
60001450:	4770      	bx	lr
60001452:	bf00      	nop
60001454:	400d8000 	.word	0x400d8000

60001458 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001458:	4a3b      	ldr	r2, [pc, #236]	; (60001548 <tempmon_init+0xf0>)
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
6000145a:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
6000145e:	493b      	ldr	r1, [pc, #236]	; (6000154c <tempmon_init+0xf4>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001460:	2000      	movs	r0, #0
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001462:	6813      	ldr	r3, [r2, #0]
  asm volatile ("dsb":::"memory");
  while (1) asm ("wfi");
}

FLASHMEM void tempmon_init(void)
{
60001464:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001466:	f023 0301 	bic.w	r3, r3, #1

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
6000146a:	2403      	movs	r4, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
6000146c:	f8df e100 	ldr.w	lr, [pc, #256]	; 60001570 <tempmon_init+0x118>
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001470:	6013      	str	r3, [r2, #0]

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001472:	f8c2 4090 	str.w	r4, [r2, #144]	; 0x90
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001476:	f8d1 30e0 	ldr.w	r3, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
6000147a:	4f35      	ldr	r7, [pc, #212]	; (60001550 <tempmon_init+0xf8>)
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
6000147c:	b2dd      	uxtb	r5, r3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
6000147e:	f3c3 240b 	ubfx	r4, r3, #8, #12
60001482:	4e34      	ldr	r6, [pc, #208]	; (60001554 <tempmon_init+0xfc>)
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
60001484:	ebc4 5313 	rsb	r3, r4, r3, lsr #20
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001488:	ee07 5a90 	vmov	s15, r5
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000148c:	f1a5 0155 	sub.w	r1, r5, #85	; 0x55
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001490:	f8ce 5000 	str.w	r5, [lr]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001494:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001498:	eb03 0583 	add.w	r5, r3, r3, lsl #2
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000149c:	ee07 4a90 	vmov	s15, r4
600014a0:	fb03 f101 	mul.w	r1, r3, r1
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
600014a4:	603b      	str	r3, [r7, #0]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600014a6:	eb03 1383 	add.w	r3, r3, r3, lsl #6
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600014aa:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600014ae:	ee07 1a90 	vmov	s15, r1
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600014b2:	1b49      	subs	r1, r1, r5
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600014b4:	ee77 6a66 	vsub.f32	s13, s14, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600014b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600014bc:	4d26      	ldr	r5, [pc, #152]	; (60001558 <tempmon_init+0x100>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600014be:	ee07 1a90 	vmov	s15, r1
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600014c2:	440b      	add	r3, r1
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600014c4:	edc5 6a00 	vstr	s13, [r5]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600014c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
600014cc:	6034      	str	r4, [r6, #0]
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600014ce:	eec7 5a26 	vdiv.f32	s11, s14, s13
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
600014d2:	4e22      	ldr	r6, [pc, #136]	; (6000155c <tempmon_init+0x104>)
600014d4:	6815      	ldr	r5, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600014d6:	4922      	ldr	r1, [pc, #136]	; (60001560 <tempmon_init+0x108>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600014d8:	4c22      	ldr	r4, [pc, #136]	; (60001564 <tempmon_init+0x10c>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600014da:	ee87 6aa6 	vdiv.f32	s12, s15, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600014de:	ee07 3a90 	vmov	s15, r3
600014e2:	4b21      	ldr	r3, [pc, #132]	; (60001568 <tempmon_init+0x110>)
600014e4:	f8c6 3140 	str.w	r3, [r6, #320]	; 0x140
600014e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
600014ec:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600014f0:	ee75 5a85 	vadd.f32	s11, s11, s10
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600014f4:	ee76 6a05 	vadd.f32	s13, s12, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600014f8:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600014fc:	eefc 6ae6 	vcvt.u32.f32	s13, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001500:	ee15 3a90 	vmov	r3, s11
60001504:	ea45 5303 	orr.w	r3, r5, r3, lsl #20
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001508:	ee16 5a90 	vmov	r5, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000150c:	ee77 7a05 	vadd.f32	s15, s14, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001510:	6013      	str	r3, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001512:	ea01 4105 	and.w	r1, r1, r5, lsl #16
60001516:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000151a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000151e:	430b      	orrs	r3, r1
60001520:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001524:	ee17 3a90 	vmov	r3, s15
60001528:	f8d2 1110 	ldr.w	r1, [r2, #272]	; 0x110
6000152c:	f3c3 030b 	ubfx	r3, r3, #0, #12
60001530:	430b      	orrs	r3, r1
60001532:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001536:	6813      	ldr	r3, [r2, #0]
60001538:	f043 0302 	orr.w	r3, r3, #2
6000153c:	6013      	str	r3, [r2, #0]

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
6000153e:	7020      	strb	r0, [r4, #0]
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001540:	4b0a      	ldr	r3, [pc, #40]	; (6000156c <tempmon_init+0x114>)
60001542:	2201      	movs	r2, #1
60001544:	601a      	str	r2, [r3, #0]
60001546:	bdf0      	pop	{r4, r5, r6, r7, pc}
60001548:	400d8180 	.word	0x400d8180
6000154c:	401f4400 	.word	0x401f4400
60001550:	20013d60 	.word	0x20013d60
60001554:	20013d64 	.word	0x20013d64
60001558:	20013d5c 	.word	0x20013d5c
6000155c:	20014000 	.word	0x20014000
60001560:	0fff0000 	.word	0x0fff0000
60001564:	e000e440 	.word	0xe000e440
60001568:	00001d75 	.word	0x00001d75
6000156c:	e000e108 	.word	0xe000e108
60001570:	20013d58 	.word	0x20013d58

60001574 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001574:	4b30      	ldr	r3, [pc, #192]	; (60001638 <usb_init+0xc4>)
60001576:	f640 7261 	movw	r2, #3937	; 0xf61

static void run_callbacks(endpoint_t *ep);


FLASHMEM void usb_init(void)
{
6000157a:	b570      	push	{r4, r5, r6, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
6000157c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001580:	f240 4504 	movw	r5, #1028	; 0x404
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
60001584:	f000 f8e8 	bl	60001758 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001588:	492c      	ldr	r1, [pc, #176]	; (6000163c <usb_init+0xc8>)
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
6000158a:	482d      	ldr	r0, [pc, #180]	; (60001640 <usb_init+0xcc>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000158c:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001590:	4c2c      	ldr	r4, [pc, #176]	; (60001644 <usb_init+0xd0>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001592:	f042 0203 	orr.w	r2, r2, #3
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001596:	4b2c      	ldr	r3, [pc, #176]	; (60001648 <usb_init+0xd4>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001598:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
6000159c:	f8c0 5160 	str.w	r5, [r0, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600015a0:	6822      	ldr	r2, [r4, #0]
600015a2:	4013      	ands	r3, r2
600015a4:	b91b      	cbnz	r3, 600015ae <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
600015a6:	f8d0 31a8 	ldr.w	r3, [r0, #424]	; 0x1a8
600015aa:	079a      	lsls	r2, r3, #30
600015ac:	d01a      	beq.n	600015e4 <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600015ae:	4b24      	ldr	r3, [pc, #144]	; (60001640 <usb_init+0xcc>)
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
600015b0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
600015b4:	4a23      	ldr	r2, [pc, #140]	; (60001644 <usb_init+0xd0>)
600015b6:	6351      	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600015b8:	461a      	mov	r2, r3
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600015ba:	f8d3 1140 	ldr.w	r1, [r3, #320]	; 0x140
600015be:	f041 0102 	orr.w	r1, r1, #2
600015c2:	f8c3 1140 	str.w	r1, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600015c6:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
600015ca:	079b      	lsls	r3, r3, #30
600015cc:	d4fb      	bmi.n	600015c6 <usb_init+0x52>
		NVIC_CLEAR_PENDING(IRQ_USB1);
600015ce:	f44f 3000 	mov.w	r0, #131072	; 0x20000
600015d2:	491e      	ldr	r1, [pc, #120]	; (6000164c <usb_init+0xd8>)
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600015d4:	4b1b      	ldr	r3, [pc, #108]	; (60001644 <usb_init+0xd0>)
600015d6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
600015da:	6008      	str	r0, [r1, #0]
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
600015dc:	2019      	movs	r0, #25
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600015de:	639a      	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
600015e0:	f000 f8b2 	bl	60001748 <__delay_veneer>
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600015e4:	4d1a      	ldr	r5, [pc, #104]	; (60001650 <usb_init+0xdc>)
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
600015e6:	2200      	movs	r2, #0
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600015e8:	4b16      	ldr	r3, [pc, #88]	; (60001644 <usb_init+0xd0>)
600015ea:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600015ee:	4c14      	ldr	r4, [pc, #80]	; (60001640 <usb_init+0xcc>)
600015f0:	260a      	movs	r6, #10
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600015f2:	6399      	str	r1, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600015f4:	4628      	mov	r0, r5
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
600015f6:	601a      	str	r2, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600015f8:	4611      	mov	r1, r2
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600015fa:	f8c4 61a8 	str.w	r6, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600015fe:	f44f 7220 	mov.w	r2, #640	; 0x280
60001602:	f000 f8b1 	bl	60001768 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001606:	f44f 0681 	mov.w	r6, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
6000160a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
6000160e:	f240 1343 	movw	r3, #323	; 0x143
60001612:	4a10      	ldr	r2, [pc, #64]	; (60001654 <usb_init+0xe0>)
60001614:	4910      	ldr	r1, [pc, #64]	; (60001658 <usb_init+0xe4>)
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001616:	602e      	str	r6, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
60001618:	6428      	str	r0, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
6000161a:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
6000161e:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001622:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001626:	4a0d      	ldr	r2, [pc, #52]	; (6000165c <usb_init+0xe8>)
60001628:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
6000162c:	2301      	movs	r3, #1
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
6000162e:	6011      	str	r1, [r2, #0]
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001630:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
60001634:	bd70      	pop	{r4, r5, r6, pc}
60001636:	bf00      	nop
60001638:	400d8000 	.word	0x400d8000
6000163c:	400fc000 	.word	0x400fc000
60001640:	402e0000 	.word	0x402e0000
60001644:	400d9000 	.word	0x400d9000
60001648:	001e1c00 	.word	0x001e1c00
6000164c:	e000e28c 	.word	0xe000e28c
60001650:	20016000 	.word	0x20016000
60001654:	20014000 	.word	0x20014000
60001658:	00001ee1 	.word	0x00001ee1
6000165c:	e000e10c 	.word	0xe000e10c

60001660 <usb_string_product_name_default>:
60001660:	00550316 00420053 00530020 00720065     ..U.S.B. .S.e.r.
60001670:	00610069 0000006c                       i.a.l...

60001678 <usb_string_manufacturer_name_default>:
60001678:	00540318 00650065 0073006e 00640079     ..T.e.e.n.s.y.d.
60001688:	00690075 006f006e                       u.i.n.o.

60001690 <string0>:
60001690:	04090304                                ....

60001694 <usb_config_descriptor_12>:
60001694:	00430209 c0000102 00040932 02020100     ..C.....2.......
600016a4:	24050001 05011000 01010124 06022404     ...$....$....$..
600016b4:	00062405 82050701 10001003 00010409     .$..............
600016c4:	00000a02 03050700 00004002 02840507     .........@......
600016d4:	00000040                                @...

600016d8 <usb_config_descriptor_480>:
600016d8:	00430209 c0000102 00040932 02020100     ..C.....2.......
600016e8:	24050001 05011000 01010124 06022404     ...$....$....$..
600016f8:	00062405 82050701 05001003 00010409     .$..............
60001708:	00000a02 03050700 00020002 02840507     ................
60001718:	00000200                                ....

6000171c <qualifier_descriptor>:
6000171c:	0200060a 40000002 ff010001                       .......@..

60001726 <_serialEvent_default>:
60001726:	b5f8ff01                                         ..

60001728 <_init>:
60001728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
6000172a:	bf00      	nop
6000172c:	bcf8      	pop	{r3, r4, r5, r6, r7}
6000172e:	bc08      	pop	{r3}
60001730:	469e      	mov	lr, r3
60001732:	4770      	bx	lr
60001734:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

60001738 <__startup_early_hook_veneer>:
60001738:	f85f f000 	ldr.w	pc, [pc]	; 6000173c <__startup_early_hook_veneer+0x4>
6000173c:	00001ce1 	.word	0x00001ce1

60001740 <__set_arm_clock_veneer>:
60001740:	f85f f000 	ldr.w	pc, [pc]	; 60001744 <__set_arm_clock_veneer+0x4>
60001744:	00001855 	.word	0x00001855

60001748 <__delay_veneer>:
60001748:	f85f f000 	ldr.w	pc, [pc]	; 6000174c <__delay_veneer+0x4>
6000174c:	00001b19 	.word	0x00001b19

60001750 <__main_veneer>:
60001750:	f85f f000 	ldr.w	pc, [pc]	; 60001754 <__main_veneer+0x4>
60001754:	00002e99 	.word	0x00002e99

60001758 <__usb_init_serialnumber_veneer>:
60001758:	f85f f000 	ldr.w	pc, [pc]	; 6000175c <__usb_init_serialnumber_veneer+0x4>
6000175c:	00002699 	.word	0x00002699

60001760 <__startup_late_hook_veneer>:
60001760:	f85f f000 	ldr.w	pc, [pc]	; 60001764 <__startup_late_hook_veneer+0x4>
60001764:	00001ce5 	.word	0x00001ce5

60001768 <__memset_veneer>:
60001768:	f85f f000 	ldr.w	pc, [pc]	; 6000176c <__memset_veneer+0x4>
6000176c:	0000416d 	.word	0x0000416d

60001770 <__pwm_init_veneer>:
60001770:	f85f f000 	ldr.w	pc, [pc]	; 60001774 <__pwm_init_veneer+0x4>
60001774:	000031fd 	.word	0x000031fd

60001778 <____libc_init_array_veneer>:
60001778:	f85f f000 	ldr.w	pc, [pc]	; 6000177c <____libc_init_array_veneer+0x4>
6000177c:	0000411d 	.word	0x0000411d

60001780 <__init_array_start>:
60001780:	00000045 	.word	0x00000045
60001784:	00001585 	.word	0x00001585
60001788:	000016ed 	.word	0x000016ed

6000178c <__init_array_end>:
6000178c:	ffffffff 	.word	0xffffffff

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <__do_global_dtors_aux>:
    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);

    return tmeas;
      20:	4c05b510 	.word	0x4c05b510
      24:	7823      	ldrb	r3, [r4, #0]
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);
      26:	b933      	cbnz	r3, 36 <_teensy_model_identifier+0x12>

    return tmeas;
      28:	b1134b04 	.word	0xb1134b04
      2c:	4804      	ldr	r0, [pc, #16]	; (40 <_teensy_model_identifier+0x1c>)
      2e:	f3af      	.short	0xf3af
      30:	8000      	strh	r0, [r0, #0]
      32:	2301      	.short	0x2301
      34:	7023      	strb	r3, [r4, #0]
      36:	bd10      	pop	{r4, pc}
      38:	22d0      	movs	r2, #208	; 0xd0
      3a:	2001      	.short	0x2001
      3c:	0000      	movs	r0, r0
      3e:	0000      	.short	0x0000
}
      40:	4214      	tst	r4, r2
	...

00000044 <frame_dummy>:
      44:	b5104b08 	.word	0xb5104b08
      48:	b11b      	cbz	r3, 52 <frame_dummy+0xe>
      4a:	4908      	ldr	r1, [pc, #32]	; (6c <frame_dummy+0x28>)
      4c:	f3af4808 	.word	0xf3af4808
      50:	8000      	strh	r0, [r0, #0]
      52:	4808      	.short	0x4808
      54:	6803      	ldr	r3, [r0, #0]
      56:	b903      	cbnz	r3, 5a <frame_dummy+0x16>
      58:	bd10      	pop	{r4, pc}
      5a:	4b07      	.short	0x4b07
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      5c:	2b00      	cmp	r3, #0
      5e:	d0fb      	beq.n	58 <frame_dummy+0x14>
      60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      64:	bf004718 	.word	0xbf004718
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 20000000; nn++) ;
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
	// digitalWrite(13, LOW);
    for (nn = 0; nn < 10000000; nn++) ;
      68:	0000      	movs	r0, r0
      6a:	0000      	movs	r0, r0
      6c:	22d4      	movs	r2, #212	; 0xd4
      6e:	2001      	movs	r0, #1
      70:	4214      	tst	r4, r2
      72:	0000      	movs	r0, r0
      74:	22d0      	movs	r2, #208	; 0xd0
      76:	2001      	movs	r0, #1
      78:	0000      	movs	r0, r0
	...

0000007c <CLEDController::getMaxRefreshRate() const>:
              }

              return adj;
      #endif
    }
    virtual uint16_t getMaxRefreshRate() const { return 0; }
      7c:	2000      	movs	r0, #0
      7e:	4770      	bx	lr

00000080 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::size()>:
  uint8_t m_nOutBlocks;
  uint32_t m_offsets[3];
  CMinWait<WAIT_TIME> mWait;
public:

  virtual int size() { return CLEDController::size() * m_nActualLanes; }
      80:	3028f890 	.word	0x3028f890
      84:	6940      	ldr	r0, [r0, #20]
      86:	fb00 f003 	mul.w	r0, r0, r3
      8a:	4770      	.short	0x4770

0000008c <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::init()>:
        show(m_Data, m_nLeds, getAdjustment(brightness));
    }

	/// show the given color on the led strip
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
      8c:	b570      	push	{r4, r5, r6, lr}
      8e:	2300      	movs	r3, #0

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
      90:	25214604 	.word	0x25214604
      94:	2101      	movs	r1, #1
	if(m_pPowerFunc) {
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
      96:	6183      	.short	0x6183
      98:	200e      	movs	r0, #14

void CFastLED::countFPS(int nFrames) {
  static int br = 0;
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
      9a:	61e3      	.short	0x61e3
      9c:	6223      	str	r3, [r4, #32]
      9e:	6263      	.short	0x6263
      a0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
      a4:	302af884 	.word	0x302af884
      uint32_t now = millis();
      now -= lastframe;
      if( now == 0 ) {
          now = 1; // prevent division by zero below
      }
      m_nFPS = (br * 1000) / now;
      a8:	62e3      	str	r3, [r4, #44]	; 0x2c
      aa:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
    br = 0;
      ae:	f001      	.short	0xf001
      b0:	fdcb f894 	stc2l	8, cr15, [fp, #592]	; 0x250
      uint32_t now = millis();
      now -= lastframe;
      if( now == 0 ) {
          now = 1; // prevent division by zero below
      }
      m_nFPS = (br * 1000) / now;
      b4:	21122028 	.word	0x21122028
      b8:	1c53      	adds	r3, r2, #1

  if(br++ >= nFrames) {
      uint32_t now = millis();
      now -= lastframe;
      if( now == 0 ) {
          now = 1; // prevent division by zero below
      ba:	4422      	.short	0x4422
      }
      m_nFPS = (br * 1000) / now;
    br = 0;
      bc:	b2db      	uxtb	r3, r3
    lastframe = millis();
      be:	f884      	.short	0xf884

  if(br++ >= nFrames) {
      uint32_t now = millis();
      now -= lastframe;
      if( now == 0 ) {
          now = 1; // prevent division by zero below
      c0:	3028      	adds	r0, #40	; 0x28
      c2:	2b01      	.short	0x2b01
      }
      m_nFPS = (br * 1000) / now;
      c4:	7611      	strb	r1, [r2, #24]
      c6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
      c8:	2280f442 	.word	0x2280f442
		pCur->showColor(color, scale);
		pCur->setDither(d);
		pCur = pCur->next();
	}
	countFPS();
}
      cc:	62e2      	str	r2, [r4, #44]	; 0x2c
      ce:	f000      	.short	0xf000
		return *pCur;
	}
}

void CFastLED::showColor(const struct CRGB & color, uint8_t scale) {
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
      d0:	80b3      	strh	r3, [r6, #4]
      d2:	2101      	.short	0x2101
      d4:	200f      	movs	r0, #15
      d6:	f001      	.short	0xf001
      d8:	fdb7 f894 	ldc2	8, cr15, [r7, #592]!	; 0x250
      dc:	21132028 	.word	0x21132028
      e0:	1c53      	adds	r3, r2, #1
      e2:	4422      	add	r2, r4
      e4:	f884b2db 	.word	0xf884b2db
      e8:	3028      	adds	r0, #40	; 0x28
      ea:	2b01      	.short	0x2b01
      ec:	7611      	strb	r1, [r2, #24]
      ee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
      f0:	2200f442 	.word	0x2200f442
			_BLOCK_PIN(24);
			_BLOCK_PIN(25);
			_BLOCK_PIN(19);
			_BLOCK_PIN(18);
			_BLOCK_PIN(14);
			_BLOCK_PIN(15);
      f4:	62e2      	str	r2, [r4, #44]	; 0x2c
			_BLOCK_PIN(17);
      f6:	f000      	.short	0xf000
      f8:	809f      	strh	r7, [r3, #4]
template<uint8_t PIN, uint32_t _BIT, uint32_t _MASK, typename _GPIO_DR, typename _GPIO_DR_SET, typename _GPIO_DR_CLEAR, typename _GPIO_DR_TOGGLE> class _ARMPIN {
public:
	typedef volatile uint32_t * port_ptr_t;
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
      fa:	2101      	.short	0x2101
      fc:	2011      	movs	r0, #17
      fe:	f001      	.short	0xf001
     100:	fda3 f894 	stc2	8, cr15, [r3, #592]!	; 0x250
     104:	25162028 	.word	0x25162028
     108:	1c53      	adds	r3, r2, #1
     10a:	4422      	.short	0x4422
     10c:	b2db      	uxtb	r3, r3
     10e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			_BLOCK_PIN(16);
     112:	2b01      	.short	0x2b01
			_BLOCK_PIN(25);
			_BLOCK_PIN(19);
			_BLOCK_PIN(18);
			_BLOCK_PIN(14);
			_BLOCK_PIN(15);
			_BLOCK_PIN(17);
     114:	7615      	strb	r5, [r2, #24]
     116:	6ae2      	.short	0x6ae2
     118:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
     11c:	f00062e2 	.word	0xf00062e2
			_BLOCK_PIN(16);
     120:	808b      	strh	r3, [r1, #4]
     122:	2101      	movs	r1, #1
     124:	2010      	movs	r0, #16
     126:	f001 fd8f 	bl	1c48 <pinMode>
     12a:	f894      	.short	0xf894
     12c:	2028      	movs	r0, #40	; 0x28
     12e:	2617      	.short	0x2617
     130:	1c53      	adds	r3, r2, #1
     132:	4422      	.short	0x4422
     134:	b2db      	uxtb	r3, r3
     136:	f884      	.short	0xf884
     138:	3028      	adds	r0, #40	; 0x28
			_BLOCK_PIN(22);
     13a:	2b01      	.short	0x2b01
			_BLOCK_PIN(19);
			_BLOCK_PIN(18);
			_BLOCK_PIN(14);
			_BLOCK_PIN(15);
			_BLOCK_PIN(17);
			_BLOCK_PIN(16);
     13c:	7616      	strb	r6, [r2, #24]
     13e:	6ae2      	.short	0x6ae2
     140:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
     144:	d07762e2 	.word	0xd07762e2
     148:	2101      	movs	r1, #1
     14a:	4628      	.short	0x4628
     14c:	f001 fd7c 	bl	1c48 <pinMode>
			_BLOCK_PIN(22);
     150:	2028f894 	.word	0x2028f894
     154:	2118      	movs	r1, #24
     156:	1c53      	.short	0x1c53
     158:	4422      	add	r2, r4
     15a:	b2db      	.short	0xb2db
     15c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			_BLOCK_PIN(23);
     160:	76112b01 	.word	0x76112b01
			_BLOCK_PIN(18);
			_BLOCK_PIN(14);
			_BLOCK_PIN(15);
			_BLOCK_PIN(17);
			_BLOCK_PIN(16);
			_BLOCK_PIN(22);
     164:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
     166:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     16a:	62e2      	.short	0x62e2
			_BLOCK_PIN(23);
     16c:	d064      	beq.n	238 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::init()+0x1ac>
     16e:	2101      	.short	0x2101
     170:	4630      	mov	r0, r6
     172:	f001      	.short	0xf001
     174:	fd69 f894 	stc2l	8, cr15, [r9, #-592]!	; 0xfffffdb0
     178:	2028      	movs	r0, #40	; 0x28
     17a:	2119      	movs	r1, #25
     17c:	44221c53 	.word	0x44221c53
     180:	b2db      	uxtb	r3, r3
     182:	f884      	.short	0xf884
     184:	3028      	adds	r0, #40	; 0x28
			_BLOCK_PIN(20);
     186:	2b01      	.short	0x2b01
			_BLOCK_PIN(14);
			_BLOCK_PIN(15);
			_BLOCK_PIN(17);
			_BLOCK_PIN(16);
			_BLOCK_PIN(22);
			_BLOCK_PIN(23);
     188:	7611      	strb	r1, [r2, #24]
     18a:	6ae2      	.short	0x6ae2
     18c:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
     190:	d05162e2 	.word	0xd05162e2
     194:	2101      	movs	r1, #1
     196:	2014      	movs	r0, #20
     198:	fd56f001 	.word	0xfd56f001
			_BLOCK_PIN(20);
     19c:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
     1a0:	1c53261a 	.word	0x1c53261a
     1a4:	4422      	add	r2, r4
     1a6:	b2db      	.short	0xb2db
     1a8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			_BLOCK_PIN(21);
     1ac:	2b01      	cmp	r3, #1
			_BLOCK_PIN(15);
			_BLOCK_PIN(17);
			_BLOCK_PIN(16);
			_BLOCK_PIN(22);
			_BLOCK_PIN(23);
			_BLOCK_PIN(20);
     1ae:	7616      	.short	0x7616
     1b0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
     1b2:	f042      	.short	0xf042
     1b4:	6280      	str	r0, [r0, #40]	; 0x28
     1b6:	62e2      	str	r2, [r4, #44]	; 0x2c
			_BLOCK_PIN(21);
     1b8:	d03e      	beq.n	238 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::init()+0x1ac>
     1ba:	2101      	movs	r1, #1
     1bc:	2015      	movs	r0, #21
     1be:	f001 fd43 	bl	1c48 <pinMode>
     1c2:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
     1c6:	251b      	movs	r5, #27
     1c8:	1c53      	adds	r3, r2, #1
     1ca:	4422      	add	r2, r4
     1cc:	b2db      	uxtb	r3, r3
     1ce:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			_BLOCK_PIN(26);
     1d2:	2b01      	cmp	r3, #1
			_BLOCK_PIN(17);
			_BLOCK_PIN(16);
			_BLOCK_PIN(22);
			_BLOCK_PIN(23);
			_BLOCK_PIN(20);
			_BLOCK_PIN(21);
     1d4:	7615      	strb	r5, [r2, #24]
     1d6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
     1d8:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
     1dc:	62e2      	str	r2, [r4, #44]	; 0x2c
			_BLOCK_PIN(26);
     1de:	d02b      	beq.n	238 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::init()+0x1ac>
     1e0:	2101      	movs	r1, #1
     1e2:	4630      	mov	r0, r6
     1e4:	f001 fd30 	bl	1c48 <pinMode>
     1e8:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
     1ec:	211e      	movs	r1, #30
     1ee:	1c53      	adds	r3, r2, #1
     1f0:	4422      	add	r2, r4
     1f2:	b2db      	uxtb	r3, r3
     1f4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			_BLOCK_PIN(27);
     1f8:	2b01      	cmp	r3, #1
			_BLOCK_PIN(16);
			_BLOCK_PIN(22);
			_BLOCK_PIN(23);
			_BLOCK_PIN(20);
			_BLOCK_PIN(21);
			_BLOCK_PIN(26);
     1fa:	7611      	strb	r1, [r2, #24]
     1fc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
     1fe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
     202:	62e2      	str	r2, [r4, #44]	; 0x2c
			_BLOCK_PIN(27);
     204:	d018      	beq.n	238 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::init()+0x1ac>
     206:	4628      	mov	r0, r5
     208:	2101      	movs	r1, #1
     20a:	f001 fd1d 	bl	1c48 <pinMode>
     20e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
     212:	221f      	movs	r2, #31
     214:	1c5e      	adds	r6, r3, #1
     216:	4423      	add	r3, r4
     218:	b2f6      	uxtb	r6, r6
     21a:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
     21e:	761a      	strb	r2, [r3, #24]
     220:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     222:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     226:	62e3      	str	r3, [r4, #44]	; 0x2c
			_BLOCK_PIN(28);
			_BLOCK_PIN(31);
			_BLOCK_PIN(30);
    }

    for(int i = 0; i < m_nActualLanes; i++) {
     228:	b93e      	cbnz	r6, 23a <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::init()+0x1ae>
     22a:	f894 502a 	ldrb.w	r5, [r4, #42]	; 0x2a
      if(m_bitOffsets[i] < m_nLowBit) { m_nLowBit = m_bitOffsets[i]; }
      if(m_bitOffsets[i] > m_nHighBit) { m_nHighBit = m_bitOffsets[i]; }
    }

    m_nOutBlocks = (m_nHighBit + 8)/8;
     22e:	3508      	adds	r5, #8
     230:	10ed      	asrs	r5, r5, #3
     232:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30

  }
     236:	bd70      	pop	{r4, r5, r6, pc}
			_BLOCK_PIN(28);
			_BLOCK_PIN(31);
			_BLOCK_PIN(30);
    }

    for(int i = 0; i < m_nActualLanes; i++) {
     238:	2601      	movs	r6, #1
     23a:	f894 502a 	ldrb.w	r5, [r4, #42]	; 0x2a
     23e:	f104 0117 	add.w	r1, r4, #23
     242:	2200      	movs	r2, #0
      if(m_bitOffsets[i] < m_nLowBit) { m_nLowBit = m_bitOffsets[i]; }
     244:	f811 3f01 	ldrb.w	r3, [r1, #1]!
			_BLOCK_PIN(28);
			_BLOCK_PIN(31);
			_BLOCK_PIN(30);
    }

    for(int i = 0; i < m_nActualLanes; i++) {
     248:	3201      	adds	r2, #1
      if(m_bitOffsets[i] < m_nLowBit) { m_nLowBit = m_bitOffsets[i]; }
     24a:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
     24e:	4298      	cmp	r0, r3
     250:	bf88      	it	hi
     252:	f884 3029 	strbhi.w	r3, [r4, #41]	; 0x29
      if(m_bitOffsets[i] > m_nHighBit) { m_nHighBit = m_bitOffsets[i]; }
     256:	42ab      	cmp	r3, r5
     258:	d902      	bls.n	260 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::init()+0x1d4>
     25a:	461d      	mov	r5, r3
     25c:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
			_BLOCK_PIN(28);
			_BLOCK_PIN(31);
			_BLOCK_PIN(30);
    }

    for(int i = 0; i < m_nActualLanes; i++) {
     260:	42b2      	cmp	r2, r6
     262:	dbef      	blt.n	244 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::init()+0x1b8>
      if(m_bitOffsets[i] < m_nLowBit) { m_nLowBit = m_bitOffsets[i]; }
      if(m_bitOffsets[i] > m_nHighBit) { m_nHighBit = m_bitOffsets[i]; }
    }

    m_nOutBlocks = (m_nHighBit + 8)/8;
     264:	3508      	adds	r5, #8
     266:	10ed      	asrs	r5, r5, #3
     268:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30

  }
     26c:	bd70      	pop	{r4, r5, r6, pc}
     26e:	bf00      	nop

00000270 <setup>:
double rms;
double peak;

arm_rfft_instance_q15 fftInstance;

void setup() {
     270:	b570      	push	{r4, r5, r6, lr}
     272:	f640 31b8 	movw	r1, #3000	; 0xbb8
     276:	4836      	ldr	r0, [pc, #216]	; (350 <setup+0xe0>)
     278:	f001 f8c8 	bl	140c <VisualMicroDebug::init(unsigned long)>
     27c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
     280:	4833      	ldr	r0, [pc, #204]	; (350 <setup+0xe0>)
     282:	f001 f8bf 	bl	1404 <VisualMicroDebug::begin(unsigned long)>
     286:	2101      	movs	r1, #1
     288:	4831      	ldr	r0, [pc, #196]	; (350 <setup+0xe0>)
     28a:	f001 f89d 	bl	13c8 <VisualMicroDebug::outPacketStart(bool)>
     28e:	2800      	cmp	r0, #0
     290:	d14f      	bne.n	332 <setup+0xc2>
     292:	2100      	movs	r1, #0
     294:	482e      	ldr	r0, [pc, #184]	; (350 <setup+0xe0>)
     296:	2201      	movs	r2, #1
     298:	f001 f956 	bl	1548 <VisualMicroDebug::start(bool, bool)>
     29c:	2101      	movs	r1, #1
     29e:	482c      	ldr	r0, [pc, #176]	; (350 <setup+0xe0>)
     2a0:	f001 f892 	bl	13c8 <VisualMicroDebug::outPacketStart(bool)>
     2a4:	b130      	cbz	r0, 2b4 <setup+0x44>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     2a6:	2106      	movs	r1, #6
     2a8:	482a      	ldr	r0, [pc, #168]	; (354 <setup+0xe4>)
     2aa:	f002 fd3f 	bl	2d2c <usb_serial_write>
     2ae:	4828      	ldr	r0, [pc, #160]	; (350 <setup+0xe0>)
     2b0:	f001 f8a6 	bl	1400 <VisualMicroDebug::outPacketEnd()>
    // put your setup code here, to run once:
    // analogReference(EXTERNAL);
    pinMode(A1, INPUT);
     2b4:	2100      	movs	r1, #0
     2b6:	200f      	movs	r0, #15
     2b8:	f001 fcc6 	bl	1c48 <pinMode>
    pinMode(dataPin, OUTPUT);
     2bc:	2101      	movs	r1, #1
     2be:	200e      	movs	r0, #14
     2c0:	f001 fcc2 	bl	1c48 <pinMode>

    analogReadRes(12);          // set ADC resolution to this many bits
     2c4:	200c      	movs	r0, #12
     2c6:	f001 fa51 	bl	176c <analogReadRes>
    analogReadAveraging(1);    // average this many readings
     2ca:	2001      	movs	r0, #1
     2cc:	f001 fa80 	bl	17d0 <analogReadAveraging>
	}

#if defined(__FASTLED_HAS_FIBCC) && (__FASTLED_HAS_FIBCC == 1)
  template<uint8_t NUM_LANES, template<uint8_t DATA_PIN, EOrder RGB_ORDER> class CHIPSET, uint8_t DATA_PIN, EOrder RGB_ORDER=RGB>
  static CLEDController &addLeds(struct CRGB *data, int nLeds) {
    static __FIBCC<CHIPSET, DATA_PIN, NUM_LANES, RGB_ORDER> c;
     2d0:	4821      	ldr	r0, [pc, #132]	; (358 <setup+0xe8>)
     2d2:	6803      	ldr	r3, [r0, #0]
     2d4:	f013 0201 	ands.w	r2, r3, #1
     2d8:	d00e      	beq.n	2f8 <setup+0x88>
    return addLeds(&c, data, nLeds);
     2da:	2300      	movs	r3, #0
     2dc:	2275      	movs	r2, #117	; 0x75
     2de:	491f      	ldr	r1, [pc, #124]	; (35c <setup+0xec>)
     2e0:	481f      	ldr	r0, [pc, #124]	; (360 <setup+0xf0>)
     2e2:	f001 f959 	bl	1598 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>
     2e6:	2105      	movs	r1, #5
     2e8:	481e      	ldr	r0, [pc, #120]	; (364 <setup+0xf4>)
     2ea:	f002 fd1f 	bl	2d2c <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     2ee:	481e      	ldr	r0, [pc, #120]	; (368 <setup+0xf8>)

    FastLED.addLeds<1, WS2813, dataPin, GRB>(leds, numLeds);
    Serial.begin(115200);
    Serial.println("Hello");
}
     2f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     2f4:	f002 bdd8 	b.w	2ea8 <Print::println()>

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
     2f8:	4c1c      	ldr	r4, [pc, #112]	; (36c <setup+0xfc>)
    {
    }

    /// allow construction from a LEDColorCorrection enum
    inline CRGB( LEDColorCorrection colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     2fa:	21ff      	movs	r1, #255	; 0xff
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
     2fc:	4b18      	ldr	r3, [pc, #96]	; (360 <setup+0xf0>)
     2fe:	2601      	movs	r6, #1
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
     300:	6825      	ldr	r5, [r4, #0]
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
     302:	605a      	str	r2, [r3, #4]
     304:	615a      	str	r2, [r3, #20]
        m_pNext = NULL;
     306:	609a      	str	r2, [r3, #8]
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
     308:	749e      	strb	r6, [r3, #18]
     30a:	7319      	strb	r1, [r3, #12]
     30c:	7359      	strb	r1, [r3, #13]
     30e:	7399      	strb	r1, [r3, #14]

    }

    /// allow construction from a ColorTemperature enum
    inline CRGB( ColorTemperature colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     310:	73d9      	strb	r1, [r3, #15]
     312:	7419      	strb	r1, [r3, #16]
     314:	7459      	strb	r1, [r3, #17]
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
     316:	b1c5      	cbz	r5, 34a <setup+0xda>
        if(m_pTail != NULL) { m_pTail->m_pNext = this; }
     318:	4a15      	ldr	r2, [pc, #84]	; (370 <setup+0x100>)
     31a:	6811      	ldr	r1, [r2, #0]
     31c:	b101      	cbz	r1, 320 <setup+0xb0>
     31e:	608b      	str	r3, [r1, #8]
/// Class to ensure that a minimum amount of time has kicked since the last time run - and delay if not enough time has passed yet
/// this should make sure that chipsets that have
template<int WAIT> class CMinWait {
	uint16_t mLastMicros;
public:
	CMinWait() { mLastMicros = 0; }
     320:	2500      	movs	r5, #0
    return ARM_DWT_CYCCNT - start;
  }
};

template<template<uint8_t DATA_PIN, EOrder RGB_ORDER> class CHIPSET, uint8_t DATA_PIN, int NUM_LANES, EOrder RGB_ORDER=GRB>
class __FIBCC : public FlexibleInlineBlockClocklessController<NUM_LANES,DATA_PIN,CHIPSET<DATA_PIN,RGB_ORDER>::__T1(),CHIPSET<DATA_PIN,RGB_ORDER>::__T2(),CHIPSET<DATA_PIN,RGB_ORDER>::__T3(),RGB_ORDER,CHIPSET<DATA_PIN,RGB_ORDER>::__XTRA0(),CHIPSET<DATA_PIN,RGB_ORDER>::__FLIP(),CHIPSET<DATA_PIN,RGB_ORDER>::__WAIT_TIME()> {};
     322:	4c14      	ldr	r4, [pc, #80]	; (374 <setup+0x104>)
	}

#if defined(__FASTLED_HAS_FIBCC) && (__FASTLED_HAS_FIBCC == 1)
  template<uint8_t NUM_LANES, template<uint8_t DATA_PIN, EOrder RGB_ORDER> class CHIPSET, uint8_t DATA_PIN, EOrder RGB_ORDER=RGB>
  static CLEDController &addLeds(struct CRGB *data, int nLeds) {
    static __FIBCC<CHIPSET, DATA_PIN, NUM_LANES, RGB_ORDER> c;
     324:	2101      	movs	r1, #1
        m_pTail = this;
     326:	6013      	str	r3, [r2, #0]
     328:	f8a3 5040 	strh.w	r5, [r3, #64]	; 0x40
     32c:	601c      	str	r4, [r3, #0]
     32e:	6001      	str	r1, [r0, #0]
     330:	e7d3      	b.n	2da <setup+0x6a>
     332:	2110      	movs	r1, #16
     334:	4810      	ldr	r0, [pc, #64]	; (378 <setup+0x108>)
     336:	f002 fcf9 	bl	2d2c <usb_serial_write>
double rms;
double peak;

arm_rfft_instance_q15 fftInstance;

void setup() {
     33a:	210a      	movs	r1, #10
     33c:	4804      	ldr	r0, [pc, #16]	; (350 <setup+0xe0>)
     33e:	f001 f837 	bl	13b0 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>
     342:	4803      	ldr	r0, [pc, #12]	; (350 <setup+0xe0>)
     344:	f001 f85c 	bl	1400 <VisualMicroDebug::outPacketEnd()>
     348:	e7a3      	b.n	292 <setup+0x22>

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
     34a:	6023      	str	r3, [r4, #0]
     34c:	e7e4      	b.n	318 <setup+0xa8>
     34e:	bf00      	nop
     350:	20013cdc 	.word	0x20013cdc
     354:	20000038 	.word	0x20000038
     358:	200122f0 	.word	0x200122f0
     35c:	20012358 	.word	0x20012358
     360:	200122f4 	.word	0x200122f4
     364:	20000040 	.word	0x20000040
     368:	200122bc 	.word	0x200122bc
     36c:	20013d34 	.word	0x20013d34
     370:	20013d44 	.word	0x20013d44
     374:	20000008 	.word	0x20000008
     378:	20000024 	.word	0x20000024

0000037c <loop>:
    FastLED.addLeds<1, WS2813, dataPin, GRB>(leds, numLeds);
    Serial.begin(115200);
    Serial.println("Hello");
}

void loop() {
     37c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     380:	f8df 8398 	ldr.w	r8, [pc, #920]	; 71c <loop+0x3a0>
     384:	b083      	sub	sp, #12
     386:	4ece      	ldr	r6, [pc, #824]	; (6c0 <loop+0x344>)
     388:	f508 6500 	add.w	r5, r8, #2048	; 0x800
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     38c:	4fcd      	ldr	r7, [pc, #820]	; (6c4 <loop+0x348>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     38e:	4cce      	ldr	r4, [pc, #824]	; (6c8 <loop+0x34c>)
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     390:	6839      	ldr	r1, [r7, #0]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     392:	6832      	ldr	r2, [r6, #0]
     394:	fba4 3202 	umull	r3, r2, r4, r2
     398:	0c92      	lsrs	r2, r2, #18
     39a:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
     39e:	0052      	lsls	r2, r2, #1
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     3a0:	683b      	ldr	r3, [r7, #0]
     3a2:	1a5b      	subs	r3, r3, r1
     3a4:	429a      	cmp	r2, r3
     3a6:	d8fb      	bhi.n	3a0 <loop+0x24>
        delayMicroseconds(30);
        /*
        Minimum value is -maxPeak = -1240
        Maximum value is maxPeak = 1240
         */
        samples[i] = (analogRead(A1) - sampleBias) * 26; // scale samples to maximise resolution
     3a8:	200f      	movs	r0, #15
     3aa:	f001 f9ab 	bl	1704 <analogRead>
     3ae:	f2a0 50f2 	subw	r0, r0, #1522	; 0x5f2
     3b2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
     3b6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
     3ba:	0040      	lsls	r0, r0, #1
     3bc:	f828 0f02 	strh.w	r0, [r8, #2]!
void loop() {
    // reading 100000 samples takes approximately 574 milliseconds
    // long micros1, micros2;
    // micros1 = micros();
    // Sample window = 36.6 ms, fundamental frequency 27.3 Hz
    for (int i = 0; i < N_SAMPLES; i++) {
     3c0:	4545      	cmp	r5, r8
     3c2:	d1e5      	bne.n	390 <loop+0x14>
    // Serial.println(micros2 - micros1);


    // peak = getPeak(samples);
    // Serial.println(peak);
    arm_rfft_init_q15(&fftInstance, fftLength, 0, 1);
     3c4:	2301      	movs	r3, #1
     3c6:	2200      	movs	r2, #0
     3c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
     3cc:	48bf      	ldr	r0, [pc, #764]	; (6cc <loop+0x350>)
     3ce:	f003 f931 	bl	3634 <arm_rfft_init_q15>
    arm_rfft_q15(&fftInstance, samples, fftOutput); // Q10.6 output format
     3d2:	4abf      	ldr	r2, [pc, #764]	; (6d0 <loop+0x354>)
     3d4:	49bf      	ldr	r1, [pc, #764]	; (6d4 <loop+0x358>)
    bass[0] = 0;
    bass[1] = 0;
    mid[0] = 0;
    mid[1] = 0;
    treble[0] = 0;
    treble[1] = 0;
     3d6:	f04f 0a00 	mov.w	sl, #0


    // peak = getPeak(samples);
    // Serial.println(peak);
    arm_rfft_init_q15(&fftInstance, fftLength, 0, 1);
    arm_rfft_q15(&fftInstance, samples, fftOutput); // Q10.6 output format
     3da:	48bc      	ldr	r0, [pc, #752]	; (6cc <loop+0x350>)
     3dc:	f003 f8ca 	bl	3574 <arm_rfft_q15>
     3e0:	f8df c2ec 	ldr.w	ip, [pc, #748]	; 6d0 <loop+0x354>
    bass[0] = 0;
    bass[1] = 0;
    mid[0] = 0;
    mid[1] = 0;
    treble[0] = 0;
    treble[1] = 0;
     3e4:	2302      	movs	r3, #2
     3e6:	46d3      	mov	fp, sl
     3e8:	4662      	mov	r2, ip
    for (iFFT = 2; (iFFT>>1)*fundamentalFreq < bassUpper; iFFT+=2) {
        bass[0] += abs(fftOutput[iFFT]);
     3ea:	f9b2 0004 	ldrsh.w	r0, [r2, #4]
    bass[1] = 0;
    mid[0] = 0;
    mid[1] = 0;
    treble[0] = 0;
    treble[1] = 0;
    for (iFFT = 2; (iFFT>>1)*fundamentalFreq < bassUpper; iFFT+=2) {
     3ee:	3302      	adds	r3, #2
        bass[0] += abs(fftOutput[iFFT]);
        bass[1] += abs(fftOutput[iFFT + 1]);
     3f0:	f9b2 1006 	ldrsh.w	r1, [r2, #6]
     3f4:	3204      	adds	r2, #4
    mid[0] = 0;
    mid[1] = 0;
    treble[0] = 0;
    treble[1] = 0;
    for (iFFT = 2; (iFFT>>1)*fundamentalFreq < bassUpper; iFFT+=2) {
        bass[0] += abs(fftOutput[iFFT]);
     3f6:	2800      	cmp	r0, #0
     3f8:	bfb8      	it	lt
     3fa:	4240      	neglt	r0, r0
        bass[1] += abs(fftOutput[iFFT + 1]);
     3fc:	2900      	cmp	r1, #0
     3fe:	bfb8      	it	lt
     400:	4249      	neglt	r1, r1
    bass[1] = 0;
    mid[0] = 0;
    mid[1] = 0;
    treble[0] = 0;
    treble[1] = 0;
    for (iFFT = 2; (iFFT>>1)*fundamentalFreq < bassUpper; iFFT+=2) {
     402:	2b16      	cmp	r3, #22
        bass[0] += abs(fftOutput[iFFT]);
     404:	4483      	add	fp, r0
        bass[1] += abs(fftOutput[iFFT + 1]);
     406:	448a      	add	sl, r1
    bass[1] = 0;
    mid[0] = 0;
    mid[1] = 0;
    treble[0] = 0;
    treble[1] = 0;
    for (iFFT = 2; (iFFT>>1)*fundamentalFreq < bassUpper; iFFT+=2) {
     408:	d1ef      	bne.n	3ea <loop+0x6e>
     40a:	2700      	movs	r7, #0
     40c:	f8df 92d8 	ldr.w	r9, [pc, #728]	; 6e8 <loop+0x36c>
     410:	4eb1      	ldr	r6, [pc, #708]	; (6d8 <loop+0x35c>)
        bass[0] += abs(fftOutput[iFFT]);
        bass[1] += abs(fftOutput[iFFT + 1]);
    }

    // Add up fft real and complex magnitudes for midrange frequencies, [300, 1500] Hz
    for (iFFT; (iFFT>>1) * fundamentalFreq < midUpper; iFFT+=2) {
     412:	f643 2897 	movw	r8, #14999	; 0x3a97
    bass[1] = 0;
    mid[0] = 0;
    mid[1] = 0;
    treble[0] = 0;
    treble[1] = 0;
    for (iFFT = 2; (iFFT>>1)*fundamentalFreq < bassUpper; iFFT+=2) {
     416:	46be      	mov	lr, r7
        bass[1] += abs(fftOutput[iFFT + 1]);
    }

    // Add up fft real and complex magnitudes for midrange frequencies, [300, 1500] Hz
    for (iFFT; (iFFT>>1) * fundamentalFreq < midUpper; iFFT+=2) {
        mid[0] += abs(fftOutput[iFFT]);
     418:	f93c 4013 	ldrsh.w	r4, [ip, r3, lsl #1]
        bass[0] += abs(fftOutput[iFFT]);
        bass[1] += abs(fftOutput[iFFT + 1]);
    }

    // Add up fft real and complex magnitudes for midrange frequencies, [300, 1500] Hz
    for (iFFT; (iFFT>>1) * fundamentalFreq < midUpper; iFFT+=2) {
     41c:	3302      	adds	r3, #2
        mid[0] += abs(fftOutput[iFFT]);
        mid[1] += abs(fftOutput[iFFT + 1]);
     41e:	f9b6 1002 	ldrsh.w	r1, [r6, #2]
     422:	3604      	adds	r6, #4
        bass[0] += abs(fftOutput[iFFT]);
        bass[1] += abs(fftOutput[iFFT + 1]);
    }

    // Add up fft real and complex magnitudes for midrange frequencies, [300, 1500] Hz
    for (iFFT; (iFFT>>1) * fundamentalFreq < midUpper; iFFT+=2) {
     424:	105a      	asrs	r2, r3, #1
        mid[0] += abs(fftOutput[iFFT]);
     426:	2c00      	cmp	r4, #0
     428:	48a9      	ldr	r0, [pc, #676]	; (6d0 <loop+0x354>)
        bass[0] += abs(fftOutput[iFFT]);
        bass[1] += abs(fftOutput[iFFT + 1]);
    }

    // Add up fft real and complex magnitudes for midrange frequencies, [300, 1500] Hz
    for (iFFT; (iFFT>>1) * fundamentalFreq < midUpper; iFFT+=2) {
     42a:	eb02 1502 	add.w	r5, r2, r2, lsl #4
        mid[0] += abs(fftOutput[iFFT]);
     42e:	bfb8      	it	lt
     430:	4264      	neglt	r4, r4
        mid[1] += abs(fftOutput[iFFT + 1]);
     432:	2900      	cmp	r1, #0
        bass[0] += abs(fftOutput[iFFT]);
        bass[1] += abs(fftOutput[iFFT + 1]);
    }

    // Add up fft real and complex magnitudes for midrange frequencies, [300, 1500] Hz
    for (iFFT; (iFFT>>1) * fundamentalFreq < midUpper; iFFT+=2) {
     434:	eb02 1205 	add.w	r2, r2, r5, lsl #4
        mid[0] += abs(fftOutput[iFFT]);
     438:	44a6      	add	lr, r4
        mid[1] += abs(fftOutput[iFFT + 1]);
     43a:	bfb8      	it	lt
     43c:	4249      	neglt	r1, r1
        bass[0] += abs(fftOutput[iFFT]);
        bass[1] += abs(fftOutput[iFFT + 1]);
    }

    // Add up fft real and complex magnitudes for midrange frequencies, [300, 1500] Hz
    for (iFFT; (iFFT>>1) * fundamentalFreq < midUpper; iFFT+=2) {
     43e:	4542      	cmp	r2, r8
        mid[0] += abs(fftOutput[iFFT]);
        mid[1] += abs(fftOutput[iFFT + 1]);
     440:	440f      	add	r7, r1
        bass[0] += abs(fftOutput[iFFT]);
        bass[1] += abs(fftOutput[iFFT + 1]);
    }

    // Add up fft real and complex magnitudes for midrange frequencies, [300, 1500] Hz
    for (iFFT; (iFFT>>1) * fundamentalFreq < midUpper; iFFT+=2) {
     442:	dde9      	ble.n	418 <loop+0x9c>
     444:	ea4f 210e 	mov.w	r1, lr, lsl #8
        mid[0] += abs(fftOutput[iFFT]);
        mid[1] += abs(fftOutput[iFFT + 1]);
    }

    // Add up fft real and complex magnitudes for treble frequencies, [1500, 5000] Hz
    for (iFFT; (iFFT>>1) * fundamentalFreq < trebleUpper; iFFT+=2) {
     448:	f24c 384f 	movw	r8, #49999	; 0xc34f
     44c:	9100      	str	r1, [sp, #0]
     44e:	4542      	cmp	r2, r8
     450:	ea4f 2107 	mov.w	r1, r7, lsl #8
     454:	9101      	str	r1, [sp, #4]
     456:	f300 8129 	bgt.w	6ac <loop+0x330>
     45a:	ea4f 0e43 	mov.w	lr, r3, lsl #1
     45e:	2600      	movs	r6, #0
     460:	4470      	add	r0, lr
     462:	4637      	mov	r7, r6
     464:	3302      	adds	r3, #2
        treble[0] += abs(fftOutput[iFFT]);
     466:	f93c 400e 	ldrsh.w	r4, [ip, lr]
        treble[1] += abs(fftOutput[iFFT + 1]);
     46a:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
     46e:	3004      	adds	r0, #4
        mid[0] += abs(fftOutput[iFFT]);
        mid[1] += abs(fftOutput[iFFT + 1]);
    }

    // Add up fft real and complex magnitudes for treble frequencies, [1500, 5000] Hz
    for (iFFT; (iFFT>>1) * fundamentalFreq < trebleUpper; iFFT+=2) {
     470:	105a      	asrs	r2, r3, #1
        treble[0] += abs(fftOutput[iFFT]);
     472:	2c00      	cmp	r4, #0
     474:	ea4f 0e43 	mov.w	lr, r3, lsl #1
        mid[0] += abs(fftOutput[iFFT]);
        mid[1] += abs(fftOutput[iFFT + 1]);
    }

    // Add up fft real and complex magnitudes for treble frequencies, [1500, 5000] Hz
    for (iFFT; (iFFT>>1) * fundamentalFreq < trebleUpper; iFFT+=2) {
     478:	eb02 1502 	add.w	r5, r2, r2, lsl #4
        treble[0] += abs(fftOutput[iFFT]);
     47c:	bfb8      	it	lt
     47e:	4264      	neglt	r4, r4
        treble[1] += abs(fftOutput[iFFT + 1]);
     480:	2900      	cmp	r1, #0
        mid[0] += abs(fftOutput[iFFT]);
        mid[1] += abs(fftOutput[iFFT + 1]);
    }

    // Add up fft real and complex magnitudes for treble frequencies, [1500, 5000] Hz
    for (iFFT; (iFFT>>1) * fundamentalFreq < trebleUpper; iFFT+=2) {
     482:	eb02 1205 	add.w	r2, r2, r5, lsl #4
        treble[0] += abs(fftOutput[iFFT]);
     486:	4427      	add	r7, r4
        treble[1] += abs(fftOutput[iFFT + 1]);
     488:	bfb8      	it	lt
     48a:	4249      	neglt	r1, r1
        mid[0] += abs(fftOutput[iFFT]);
        mid[1] += abs(fftOutput[iFFT + 1]);
    }

    // Add up fft real and complex magnitudes for treble frequencies, [1500, 5000] Hz
    for (iFFT; (iFFT>>1) * fundamentalFreq < trebleUpper; iFFT+=2) {
     48c:	4542      	cmp	r2, r8
        treble[0] += abs(fftOutput[iFFT]);
        treble[1] += abs(fftOutput[iFFT + 1]);
     48e:	440e      	add	r6, r1
        mid[0] += abs(fftOutput[iFFT]);
        mid[1] += abs(fftOutput[iFFT + 1]);
    }

    // Add up fft real and complex magnitudes for treble frequencies, [1500, 5000] Hz
    for (iFFT; (iFFT>>1) * fundamentalFreq < trebleUpper; iFFT+=2) {
     490:	dde8      	ble.n	464 <loop+0xe8>
     492:	023f      	lsls	r7, r7, #8
     494:	0236      	lsls	r6, r6, #8
        treble[0] += abs(fftOutput[iFFT]);
        treble[1] += abs(fftOutput[iFFT + 1]);
    }
    bass[0] <<= 8;
    bass[1] <<= 8;
     496:	ea4f 230a 	mov.w	r3, sl, lsl #8
    mid[0] <<= 8;
    mid[1] <<= 8;
     49a:	9c01      	ldr	r4, [sp, #4]
    //    for (int j = (sizeof * fftOutput) - 1; j >= 0; j--) {
    //        Serial.print(p6[j], HEX);
    //    }
    //    Serial.println();*/
    //}
    arm_cmplx_mag_q31(bass, &bassAmplitude, 1); // output is in Q2,30 format
     49c:	4d8f      	ldr	r5, [pc, #572]	; (6dc <loop+0x360>)
    // Add up fft real and complex magnitudes for treble frequencies, [1500, 5000] Hz
    for (iFFT; (iFFT>>1) * fundamentalFreq < trebleUpper; iFFT+=2) {
        treble[0] += abs(fftOutput[iFFT]);
        treble[1] += abs(fftOutput[iFFT + 1]);
    }
    bass[0] <<= 8;
     49e:	ea4f 220b 	mov.w	r2, fp, lsl #8
    bass[1] <<= 8;
     4a2:	f8c9 3004 	str.w	r3, [r9, #4]
    mid[0] <<= 8;
    mid[1] <<= 8;
     4a6:	4b8e      	ldr	r3, [pc, #568]	; (6e0 <loop+0x364>)
        treble[0] += abs(fftOutput[iFFT]);
        treble[1] += abs(fftOutput[iFFT + 1]);
    }
    bass[0] <<= 8;
    bass[1] <<= 8;
    mid[0] <<= 8;
     4a8:	9800      	ldr	r0, [sp, #0]
     4aa:	498d      	ldr	r1, [pc, #564]	; (6e0 <loop+0x364>)
    mid[1] <<= 8;
     4ac:	605c      	str	r4, [r3, #4]
    //        Serial.print(p6[j], HEX);
    //    }
    //    Serial.println();*/
    //}
    arm_cmplx_mag_q31(bass, &bassAmplitude, 1); // output is in Q2,30 format
    arm_cmplx_mag_q31(mid, &midAmplitude, 1); // output is in Q2,30 format
     4ae:	f8df a270 	ldr.w	sl, [pc, #624]	; 720 <loop+0x3a4>
    }
    bass[0] <<= 8;
    bass[1] <<= 8;
    mid[0] <<= 8;
    mid[1] <<= 8;
    treble[0] <<= 8;
     4b2:	4b8c      	ldr	r3, [pc, #560]	; (6e4 <loop+0x368>)
        treble[0] += abs(fftOutput[iFFT]);
        treble[1] += abs(fftOutput[iFFT + 1]);
    }
    bass[0] <<= 8;
    bass[1] <<= 8;
    mid[0] <<= 8;
     4b4:	6008      	str	r0, [r1, #0]
    //    for (int j = (sizeof * fftOutput) - 1; j >= 0; j--) {
    //        Serial.print(p6[j], HEX);
    //    }
    //    Serial.println();*/
    //}
    arm_cmplx_mag_q31(bass, &bassAmplitude, 1); // output is in Q2,30 format
     4b6:	4629      	mov	r1, r5
    arm_cmplx_mag_q31(mid, &midAmplitude, 1); // output is in Q2,30 format
    arm_cmplx_mag_q31(treble, &trebleAmplitude, 1); // output is in Q2,30 format
     4b8:	f8df 8268 	ldr.w	r8, [pc, #616]	; 724 <loop+0x3a8>
    // Add up fft real and complex magnitudes for treble frequencies, [1500, 5000] Hz
    for (iFFT; (iFFT>>1) * fundamentalFreq < trebleUpper; iFFT+=2) {
        treble[0] += abs(fftOutput[iFFT]);
        treble[1] += abs(fftOutput[iFFT + 1]);
    }
    bass[0] <<= 8;
     4bc:	f8c9 2000 	str.w	r2, [r9]
    //    for (int j = (sizeof * fftOutput) - 1; j >= 0; j--) {
    //        Serial.print(p6[j], HEX);
    //    }
    //    Serial.println();*/
    //}
    arm_cmplx_mag_q31(bass, &bassAmplitude, 1); // output is in Q2,30 format
     4c0:	2201      	movs	r2, #1
     4c2:	4889      	ldr	r0, [pc, #548]	; (6e8 <loop+0x36c>)
    }
    bass[0] <<= 8;
    bass[1] <<= 8;
    mid[0] <<= 8;
    mid[1] <<= 8;
    treble[0] <<= 8;
     4c4:	601f      	str	r7, [r3, #0]
    treble[1] <<= 8;
     4c6:	605e      	str	r6, [r3, #4]
    //    for (int j = (sizeof * fftOutput) - 1; j >= 0; j--) {
    //        Serial.print(p6[j], HEX);
    //    }
    //    Serial.println();*/
    //}
    arm_cmplx_mag_q31(bass, &bassAmplitude, 1); // output is in Q2,30 format
     4c8:	f003 f93c 	bl	3744 <arm_cmplx_mag_q31>
    arm_cmplx_mag_q31(mid, &midAmplitude, 1); // output is in Q2,30 format
     4cc:	4651      	mov	r1, sl
     4ce:	2201      	movs	r2, #1
     4d0:	4883      	ldr	r0, [pc, #524]	; (6e0 <loop+0x364>)
     4d2:	f003 f937 	bl	3744 <arm_cmplx_mag_q31>
    arm_cmplx_mag_q31(treble, &trebleAmplitude, 1); // output is in Q2,30 format
     4d6:	2201      	movs	r2, #1
     4d8:	4641      	mov	r1, r8
     4da:	4882      	ldr	r0, [pc, #520]	; (6e4 <loop+0x368>)
     4dc:	f003 f932 	bl	3744 <arm_cmplx_mag_q31>
     4e0:	2106      	movs	r1, #6
     4e2:	4882      	ldr	r0, [pc, #520]	; (6ec <loop+0x370>)
     4e4:	f002 fc22 	bl	2d2c <usb_serial_write>
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
     4e8:	6829      	ldr	r1, [r5, #0]
     4ea:	4881      	ldr	r0, [pc, #516]	; (6f0 <loop+0x374>)
     4ec:	f002 fd2c 	bl	2f48 <Print::print(long)>
     4f0:	487f      	ldr	r0, [pc, #508]	; (6f0 <loop+0x374>)
     4f2:	f002 fcd9 	bl	2ea8 <Print::println()>
     4f6:	2105      	movs	r1, #5
     4f8:	487e      	ldr	r0, [pc, #504]	; (6f4 <loop+0x378>)
     4fa:	f002 fc17 	bl	2d2c <usb_serial_write>
     4fe:	f8da 1000 	ldr.w	r1, [sl]
     502:	487b      	ldr	r0, [pc, #492]	; (6f0 <loop+0x374>)
     504:	f002 fd20 	bl	2f48 <Print::print(long)>
     508:	4879      	ldr	r0, [pc, #484]	; (6f0 <loop+0x374>)
     50a:	f002 fccd 	bl	2ea8 <Print::println()>
     50e:	2108      	movs	r1, #8
     510:	4879      	ldr	r0, [pc, #484]	; (6f8 <loop+0x37c>)
     512:	f002 fc0b 	bl	2d2c <usb_serial_write>
     516:	f8d8 1000 	ldr.w	r1, [r8]
     51a:	4875      	ldr	r0, [pc, #468]	; (6f0 <loop+0x374>)
     51c:	f002 fd14 	bl	2f48 <Print::print(long)>
     520:	4873      	ldr	r0, [pc, #460]	; (6f0 <loop+0x374>)
     522:	f002 fcc1 	bl	2ea8 <Print::println()>
    Serial.println(bassAmplitude);
    Serial.print("Mid: ");
    Serial.println(midAmplitude);
    Serial.print("Treble: ");
    Serial.println(trebleAmplitude);
    bassLedsOn = numLedsBy3 * bassAmplitude / maxBass;
     526:	6829      	ldr	r1, [r5, #0]
    midLedsOn = numLedsBy3 * midAmplitude / maxMid;
     528:	f8da 2000 	ldr.w	r2, [sl]
    trebleLedsOn = numLedsBy3 * trebleAmplitude / maxTreble;
     52c:	f8d8 3000 	ldr.w	r3, [r8]
    Serial.println(bassAmplitude);
    Serial.print("Mid: ");
    Serial.println(midAmplitude);
    Serial.print("Treble: ");
    Serial.println(trebleAmplitude);
    bassLedsOn = numLedsBy3 * bassAmplitude / maxBass;
     530:	eb01 0681 	add.w	r6, r1, r1, lsl #2
     534:	4864      	ldr	r0, [pc, #400]	; (6c8 <loop+0x34c>)
    midLedsOn = numLedsBy3 * midAmplitude / maxMid;
     536:	eb02 0482 	add.w	r4, r2, r2, lsl #2
    trebleLedsOn = numLedsBy3 * trebleAmplitude / maxTreble;
     53a:	eb03 0783 	add.w	r7, r3, r3, lsl #2
    Serial.println(bassAmplitude);
    Serial.print("Mid: ");
    Serial.println(midAmplitude);
    Serial.print("Treble: ");
    Serial.println(trebleAmplitude);
    bassLedsOn = numLedsBy3 * bassAmplitude / maxBass;
     53e:	4d6f      	ldr	r5, [pc, #444]	; (6fc <loop+0x380>)
     540:	ebc1 01c6 	rsb	r1, r1, r6, lsl #3
    midLedsOn = numLedsBy3 * midAmplitude / maxMid;
     544:	4e6e      	ldr	r6, [pc, #440]	; (700 <loop+0x384>)
    trebleLedsOn = numLedsBy3 * trebleAmplitude / maxTreble;
     546:	ebc3 03c7 	rsb	r3, r3, r7, lsl #3
    Serial.print("Mid: ");
    Serial.println(midAmplitude);
    Serial.print("Treble: ");
    Serial.println(trebleAmplitude);
    bassLedsOn = numLedsBy3 * bassAmplitude / maxBass;
    midLedsOn = numLedsBy3 * midAmplitude / maxMid;
     54a:	ebc2 02c4 	rsb	r2, r2, r4, lsl #3
    Serial.println(bassAmplitude);
    Serial.print("Mid: ");
    Serial.println(midAmplitude);
    Serial.print("Treble: ");
    Serial.println(trebleAmplitude);
    bassLedsOn = numLedsBy3 * bassAmplitude / maxBass;
     54e:	fb80 7e01 	smull	r7, lr, r0, r1
     552:	17c9      	asrs	r1, r1, #31
    midLedsOn = numLedsBy3 * midAmplitude / maxMid;
    trebleLedsOn = numLedsBy3 * trebleAmplitude / maxTreble;
     554:	4c6b      	ldr	r4, [pc, #428]	; (704 <loop+0x388>)
    Serial.print("Mid: ");
    Serial.println(midAmplitude);
    Serial.print("Treble: ");
    Serial.println(trebleAmplitude);
    bassLedsOn = numLedsBy3 * bassAmplitude / maxBass;
    midLedsOn = numLedsBy3 * midAmplitude / maxMid;
     556:	fb80 c702 	smull	ip, r7, r0, r2
     55a:	17d2      	asrs	r2, r2, #31
    trebleLedsOn = numLedsBy3 * trebleAmplitude / maxTreble;
     55c:	fb80 c003 	smull	ip, r0, r0, r3
    Serial.println(bassAmplitude);
    Serial.print("Mid: ");
    Serial.println(midAmplitude);
    Serial.print("Treble: ");
    Serial.println(trebleAmplitude);
    bassLedsOn = numLedsBy3 * bassAmplitude / maxBass;
     560:	ebc1 41ae 	rsb	r1, r1, lr, asr #18
    midLedsOn = numLedsBy3 * midAmplitude / maxMid;
    trebleLedsOn = numLedsBy3 * trebleAmplitude / maxTreble;
     564:	17db      	asrs	r3, r3, #31
    Serial.print("Mid: ");
    Serial.println(midAmplitude);
    Serial.print("Treble: ");
    Serial.println(trebleAmplitude);
    bassLedsOn = numLedsBy3 * bassAmplitude / maxBass;
    midLedsOn = numLedsBy3 * midAmplitude / maxMid;
     566:	ebc2 42a7 	rsb	r2, r2, r7, asr #18
    trebleLedsOn = numLedsBy3 * trebleAmplitude / maxTreble;
    if (bassLedsOn > numLedsBy3) bassLedsOn = numLedsBy3;
     56a:	2927      	cmp	r1, #39	; 0x27
    Serial.println(midAmplitude);
    Serial.print("Treble: ");
    Serial.println(trebleAmplitude);
    bassLedsOn = numLedsBy3 * bassAmplitude / maxBass;
    midLedsOn = numLedsBy3 * midAmplitude / maxMid;
    trebleLedsOn = numLedsBy3 * trebleAmplitude / maxTreble;
     56c:	ebc3 43a0 	rsb	r3, r3, r0, asr #18
    Serial.println(bassAmplitude);
    Serial.print("Mid: ");
    Serial.println(midAmplitude);
    Serial.print("Treble: ");
    Serial.println(trebleAmplitude);
    bassLedsOn = numLedsBy3 * bassAmplitude / maxBass;
     570:	8029      	strh	r1, [r5, #0]
    midLedsOn = numLedsBy3 * midAmplitude / maxMid;
     572:	8032      	strh	r2, [r6, #0]
    trebleLedsOn = numLedsBy3 * trebleAmplitude / maxTreble;
     574:	8023      	strh	r3, [r4, #0]
    if (bassLedsOn > numLedsBy3) bassLedsOn = numLedsBy3;
     576:	dd01      	ble.n	57c <loop+0x200>
     578:	2127      	movs	r1, #39	; 0x27
     57a:	8029      	strh	r1, [r5, #0]
    if (midLedsOn > numLedsBy3) midLedsOn = numLedsBy3;
     57c:	2a27      	cmp	r2, #39	; 0x27
     57e:	dd01      	ble.n	584 <loop+0x208>
     580:	2227      	movs	r2, #39	; 0x27
     582:	8032      	strh	r2, [r6, #0]
    if (trebleLedsOn > numLedsBy3) trebleLedsOn = numLedsBy3;
     584:	2b27      	cmp	r3, #39	; 0x27
     586:	dd01      	ble.n	58c <loop+0x210>
     588:	2327      	movs	r3, #39	; 0x27
     58a:	8023      	strh	r3, [r4, #0]
     58c:	210b      	movs	r1, #11
     58e:	485e      	ldr	r0, [pc, #376]	; (708 <loop+0x38c>)
     590:	f002 fbcc 	bl	2d2c <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     594:	f9b5 1000 	ldrsh.w	r1, [r5]
     598:	4855      	ldr	r0, [pc, #340]	; (6f0 <loop+0x374>)
     59a:	f002 fcd5 	bl	2f48 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     59e:	4854      	ldr	r0, [pc, #336]	; (6f0 <loop+0x374>)
     5a0:	f002 fc82 	bl	2ea8 <Print::println()>
     5a4:	210a      	movs	r1, #10
     5a6:	4859      	ldr	r0, [pc, #356]	; (70c <loop+0x390>)
     5a8:	f002 fbc0 	bl	2d2c <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     5ac:	f9b6 1000 	ldrsh.w	r1, [r6]
     5b0:	484f      	ldr	r0, [pc, #316]	; (6f0 <loop+0x374>)
     5b2:	f002 fcc9 	bl	2f48 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     5b6:	484e      	ldr	r0, [pc, #312]	; (6f0 <loop+0x374>)
     5b8:	f002 fc76 	bl	2ea8 <Print::println()>
     5bc:	210d      	movs	r1, #13
     5be:	4854      	ldr	r0, [pc, #336]	; (710 <loop+0x394>)
     5c0:	f002 fbb4 	bl	2d2c <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     5c4:	f9b4 1000 	ldrsh.w	r1, [r4]
     5c8:	4849      	ldr	r0, [pc, #292]	; (6f0 <loop+0x374>)
     5ca:	f002 fcbd 	bl	2f48 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     5ce:	4848      	ldr	r0, [pc, #288]	; (6f0 <loop+0x374>)
     5d0:	f002 fc6a 	bl	2ea8 <Print::println()>
    Serial.println(midLedsOn);
    Serial.print("Treble leds: ");
    Serial.println(trebleLedsOn);

    int ledCounter;
    for (ledCounter = 0; ledCounter < bassLedsOn; ledCounter++) {
     5d4:	f9b5 1000 	ldrsh.w	r1, [r5]
     5d8:	2900      	cmp	r1, #0
     5da:	dd6a      	ble.n	6b2 <loop+0x336>
     5dc:	004a      	lsls	r2, r1, #1
     5de:	4d4d      	ldr	r5, [pc, #308]	; (714 <loop+0x398>)
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
     5e0:	2000      	movs	r0, #0
        g = (colorcode >>  8) & 0xFF;
        b = (colorcode >>  0) & 0xFF;
     5e2:	f04f 0eff 	mov.w	lr, #255	; 0xff
     5e6:	1857      	adds	r7, r2, r1
     5e8:	462b      	mov	r3, r5
     5ea:	442f      	add	r7, r5
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
     5ec:	7018      	strb	r0, [r3, #0]
     5ee:	3303      	adds	r3, #3
        g = (colorcode >>  8) & 0xFF;
     5f0:	f803 0c02 	strb.w	r0, [r3, #-2]
        b = (colorcode >>  0) & 0xFF;
     5f4:	f803 ec01 	strb.w	lr, [r3, #-1]
     5f8:	42bb      	cmp	r3, r7
     5fa:	d1f7      	bne.n	5ec <loop+0x270>
        leds[ledCounter] = CRGB::Blue;
    }
    for (; ledCounter < numLedsBy3; ledCounter++) {
     5fc:	2926      	cmp	r1, #38	; 0x26
     5fe:	dc0a      	bgt.n	616 <loop+0x29a>
     600:	440a      	add	r2, r1
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
     602:	2300      	movs	r3, #0
     604:	442a      	add	r2, r5
     606:	3101      	adds	r1, #1
     608:	7013      	strb	r3, [r2, #0]
        g = (colorcode >>  8) & 0xFF;
     60a:	7053      	strb	r3, [r2, #1]
     60c:	3203      	adds	r2, #3
     60e:	2927      	cmp	r1, #39	; 0x27
        b = (colorcode >>  0) & 0xFF;
     610:	f802 3c01 	strb.w	r3, [r2, #-1]
     614:	d1f7      	bne.n	606 <loop+0x28a>
        leds[ledCounter] = CRGB::Black;
    }
    for (ledCounter = 0; ledCounter < midLedsOn; ledCounter++) {
     616:	f9b6 0000 	ldrsh.w	r0, [r6]
     61a:	2800      	cmp	r0, #0
     61c:	dd4d      	ble.n	6ba <loop+0x33e>
     61e:	0042      	lsls	r2, r0, #1
     620:	493c      	ldr	r1, [pc, #240]	; (714 <loop+0x398>)
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
     622:	23ff      	movs	r3, #255	; 0xff
        g = (colorcode >>  8) & 0xFF;
        b = (colorcode >>  0) & 0xFF;
     624:	2700      	movs	r7, #0
     626:	1816      	adds	r6, r2, r0
     628:	442e      	add	r6, r5
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
     62a:	f881 3075 	strb.w	r3, [r1, #117]	; 0x75
     62e:	3103      	adds	r1, #3
        g = (colorcode >>  8) & 0xFF;
     630:	f881 3073 	strb.w	r3, [r1, #115]	; 0x73
        b = (colorcode >>  0) & 0xFF;
     634:	f881 7074 	strb.w	r7, [r1, #116]	; 0x74
     638:	42b1      	cmp	r1, r6
     63a:	d1f6      	bne.n	62a <loop+0x2ae>
        leds[ledCounter + numLedsBy3] = CRGB::Yellow;
    }
    for (; ledCounter < numLedsBy3; ledCounter++) {
     63c:	2826      	cmp	r0, #38	; 0x26
     63e:	dc0c      	bgt.n	65a <loop+0x2de>
     640:	4402      	add	r2, r0
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
     642:	2300      	movs	r3, #0
     644:	442a      	add	r2, r5
     646:	3001      	adds	r0, #1
     648:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
        g = (colorcode >>  8) & 0xFF;
     64c:	f882 3076 	strb.w	r3, [r2, #118]	; 0x76
     650:	3203      	adds	r2, #3
     652:	2827      	cmp	r0, #39	; 0x27
        b = (colorcode >>  0) & 0xFF;
     654:	f882 3074 	strb.w	r3, [r2, #116]	; 0x74
     658:	d1f5      	bne.n	646 <loop+0x2ca>
        leds[ledCounter + numLedsBy3] = CRGB::Black;
    }
    for (ledCounter = 0; ledCounter < trebleLedsOn; ledCounter++) {
     65a:	f9b4 1000 	ldrsh.w	r1, [r4]
     65e:	2900      	cmp	r1, #0
     660:	dd62      	ble.n	728 <loop+0x3ac>
     662:	004a      	lsls	r2, r1, #1
     664:	4b2b      	ldr	r3, [pc, #172]	; (714 <loop+0x398>)
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
     666:	26ff      	movs	r6, #255	; 0xff
        g = (colorcode >>  8) & 0xFF;
     668:	2000      	movs	r0, #0
     66a:	1854      	adds	r4, r2, r1
     66c:	442c      	add	r4, r5
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
     66e:	f883 60ea 	strb.w	r6, [r3, #234]	; 0xea
     672:	3303      	adds	r3, #3
        g = (colorcode >>  8) & 0xFF;
     674:	f883 00e8 	strb.w	r0, [r3, #232]	; 0xe8
        b = (colorcode >>  0) & 0xFF;
     678:	f883 00e9 	strb.w	r0, [r3, #233]	; 0xe9
     67c:	42a3      	cmp	r3, r4
     67e:	d1f6      	bne.n	66e <loop+0x2f2>
        leds[ledCounter + numLedsBy3*2] = CRGB::Red;
    }
    for (; ledCounter < numLedsBy3; ledCounter++) {
     680:	2926      	cmp	r1, #38	; 0x26
     682:	dc0c      	bgt.n	69e <loop+0x322>
     684:	440a      	add	r2, r1
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
     686:	2000      	movs	r0, #0
     688:	18ab      	adds	r3, r5, r2
     68a:	3101      	adds	r1, #1
     68c:	f883 00ea 	strb.w	r0, [r3, #234]	; 0xea
        g = (colorcode >>  8) & 0xFF;
     690:	f883 00eb 	strb.w	r0, [r3, #235]	; 0xeb
     694:	3303      	adds	r3, #3
     696:	2927      	cmp	r1, #39	; 0x27
        b = (colorcode >>  0) & 0xFF;
     698:	f883 00e9 	strb.w	r0, [r3, #233]	; 0xe9
     69c:	d1f5      	bne.n	68a <loop+0x30e>
	/// Update all our controllers with the current led colors, using the passed in brightness
	/// @param scale temporarily override the scale
	void show(uint8_t scale);

	/// Update all our controllers with the current led colors
	void show() { show(m_Scale); }
     69e:	481e      	ldr	r0, [pc, #120]	; (718 <loop+0x39c>)
     6a0:	7801      	ldrb	r1, [r0, #0]
        leds[ledCounter + numLedsBy3*2] = CRGB::Black;
    }

    FastLED.show();
}
     6a2:	b003      	add	sp, #12
     6a4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     6a8:	f000 bfa4 	b.w	15f4 <CFastLED::show(unsigned char)>
        mid[0] += abs(fftOutput[iFFT]);
        mid[1] += abs(fftOutput[iFFT + 1]);
    }

    // Add up fft real and complex magnitudes for treble frequencies, [1500, 5000] Hz
    for (iFFT; (iFFT>>1) * fundamentalFreq < trebleUpper; iFFT+=2) {
     6ac:	2600      	movs	r6, #0
     6ae:	4637      	mov	r7, r6
     6b0:	e6f1      	b.n	496 <loop+0x11a>
    Serial.println(midLedsOn);
    Serial.print("Treble leds: ");
    Serial.println(trebleLedsOn);

    int ledCounter;
    for (ledCounter = 0; ledCounter < bassLedsOn; ledCounter++) {
     6b2:	2100      	movs	r1, #0
     6b4:	4d17      	ldr	r5, [pc, #92]	; (714 <loop+0x398>)
     6b6:	460a      	mov	r2, r1
     6b8:	e7a2      	b.n	600 <loop+0x284>
        leds[ledCounter] = CRGB::Blue;
    }
    for (; ledCounter < numLedsBy3; ledCounter++) {
        leds[ledCounter] = CRGB::Black;
    }
    for (ledCounter = 0; ledCounter < midLedsOn; ledCounter++) {
     6ba:	2000      	movs	r0, #0
     6bc:	4602      	mov	r2, r0
     6be:	e7bf      	b.n	640 <loop+0x2c4>
     6c0:	2001228c 	.word	0x2001228c
     6c4:	e0001004 	.word	0xe0001004
     6c8:	431bde83 	.word	0x431bde83
     6cc:	20012340 	.word	0x20012340
     6d0:	200124cc 	.word	0x200124cc
     6d4:	200134d4 	.word	0x200134d4
     6d8:	200124f8 	.word	0x200124f8
     6dc:	200124c8 	.word	0x200124c8
     6e0:	200134cc 	.word	0x200134cc
     6e4:	200124b8 	.word	0x200124b8
     6e8:	20012338 	.word	0x20012338
     6ec:	20000048 	.word	0x20000048
     6f0:	200122bc 	.word	0x200122bc
     6f4:	20000050 	.word	0x20000050
     6f8:	20000058 	.word	0x20000058
     6fc:	20013cd8 	.word	0x20013cd8
     700:	20013cd4 	.word	0x20013cd4
     704:	20013cd6 	.word	0x20013cd6
     708:	20000064 	.word	0x20000064
     70c:	20000070 	.word	0x20000070
     710:	2000007c 	.word	0x2000007c
     714:	20012358 	.word	0x20012358
     718:	20013d24 	.word	0x20013d24
     71c:	200134d2 	.word	0x200134d2
     720:	200124c0 	.word	0x200124c0
     724:	200124c4 	.word	0x200124c4
        leds[ledCounter + numLedsBy3] = CRGB::Yellow;
    }
    for (; ledCounter < numLedsBy3; ledCounter++) {
        leds[ledCounter + numLedsBy3] = CRGB::Black;
    }
    for (ledCounter = 0; ledCounter < trebleLedsOn; ledCounter++) {
     728:	2100      	movs	r1, #0
     72a:	460a      	mov	r2, r1
     72c:	e7aa      	b.n	684 <loop+0x308>
     72e:	bf00      	nop

00000730 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)>:
        }
      }
    }
  }

  uint32_t showRGBInternal(PixelController<RGB_ORDER,LANES, __FL_T4_MASK> &allpixels) {
     730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     734:	b097      	sub	sp, #92	; 0x5c
                d[2] = e[2] - d[2];
        }

        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
     736:	7c0b      	ldrb	r3, [r1, #16]
     738:	4606      	mov	r6, r0
     73a:	4608      	mov	r0, r1
     73c:	9101      	str	r1, [sp, #4]
     73e:	7b49      	ldrb	r1, [r1, #13]
    allpixels.preStepFirstByteDithering();
    _outlines b0;
    uint32_t start = ARM_DWT_CYCCNT;
     740:	4ace      	ldr	r2, [pc, #824]	; (a7c <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x34c>)
     742:	1a5b      	subs	r3, r3, r1
     744:	fa5f fc83 	uxtb.w	ip, r3
     748:	f880 c00d 	strb.w	ip, [r0, #13]
     74c:	6812      	ldr	r2, [r2, #0]

    for(int i = 0; i < m_nActualLanes; i++) {
     74e:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
  }

  uint32_t showRGBInternal(PixelController<RGB_ORDER,LANES, __FL_T4_MASK> &allpixels) {
    allpixels.preStepFirstByteDithering();
    _outlines b0;
    uint32_t start = ARM_DWT_CYCCNT;
     752:	9205      	str	r2, [sp, #20]

    for(int i = 0; i < m_nActualLanes; i++) {
     754:	b313      	cbz	r3, 79c <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x6c>
     756:	9901      	ldr	r1, [sp, #4]
     758:	3305      	adds	r3, #5
     75a:	f106 0417 	add.w	r4, r6, #23
     75e:	f891 e013 	ldrb.w	lr, [r1, #19]
     762:	eb01 0583 	add.w	r5, r1, r3, lsl #2
     766:	680f      	ldr	r7, [r1, #0]
     768:	f101 0014 	add.w	r0, r1, #20
     76c:	f10e 0e01 	add.w	lr, lr, #1
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }
     770:	f850 3f04 	ldr.w	r3, [r0, #4]!
      b0.bytes[m_bitOffsets[i]] = allpixels.loadAndScale0(i);
     774:	a916      	add	r1, sp, #88	; 0x58
     776:	f814 2f01 	ldrb.w	r2, [r4, #1]!
     77a:	443b      	add	r3, r7
     77c:	440a      	add	r2, r1
     77e:	785b      	ldrb	r3, [r3, #1]
/// @param j - second byte to add
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
     780:	eb03 010c 	add.w	r1, r3, ip

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
     784:	b133      	cbz	r3, 794 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x64>
    if( t > 255) t = 255;
     786:	29ff      	cmp	r1, #255	; 0xff
     788:	bfa8      	it	ge
     78a:	21ff      	movge	r1, #255	; 0xff
     78c:	fb01 f30e 	mul.w	r3, r1, lr
     790:	f3c3 2307 	ubfx	r3, r3, #8, #8
  uint32_t showRGBInternal(PixelController<RGB_ORDER,LANES, __FL_T4_MASK> &allpixels) {
    allpixels.preStepFirstByteDithering();
    _outlines b0;
    uint32_t start = ARM_DWT_CYCCNT;

    for(int i = 0; i < m_nActualLanes; i++) {
     794:	4285      	cmp	r5, r0
      b0.bytes[m_bitOffsets[i]] = allpixels.loadAndScale0(i);
     796:	f802 3c40 	strb.w	r3, [r2, #-64]
  uint32_t showRGBInternal(PixelController<RGB_ORDER,LANES, __FL_T4_MASK> &allpixels) {
    allpixels.preStepFirstByteDithering();
    _outlines b0;
    uint32_t start = ARM_DWT_CYCCNT;

    for(int i = 0; i < m_nActualLanes; i++) {
     79a:	d1e9      	bne.n	770 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x40>
      b0.bytes[m_bitOffsets[i]] = allpixels.loadAndScale0(i);
    }

    cli();
     79c:	b672      	cpsid	i
    m_offsets[0] = _FASTLED_NS_TO_DWT(T1+T2+T3);
     79e:	49b8      	ldr	r1, [pc, #736]	; (a80 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x350>)
     7a0:	48b8      	ldr	r0, [pc, #736]	; (a84 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x354>)
     7a2:	680c      	ldr	r4, [r1, #0]
    m_offsets[1] = _FASTLED_NS_TO_DWT(T2+T3);
     7a4:	680b      	ldr	r3, [r1, #0]
    for(int i = 0; i < m_nActualLanes; i++) {
      b0.bytes[m_bitOffsets[i]] = allpixels.loadAndScale0(i);
    }

    cli();
    m_offsets[0] = _FASTLED_NS_TO_DWT(T1+T2+T3);
     7a6:	0c24      	lsrs	r4, r4, #16
    m_offsets[1] = _FASTLED_NS_TO_DWT(T2+T3);
    m_offsets[2] = _FASTLED_NS_TO_DWT(T3);
     7a8:	680a      	ldr	r2, [r1, #0]
      b0.bytes[m_bitOffsets[i]] = allpixels.loadAndScale0(i);
    }

    cli();
    m_offsets[0] = _FASTLED_NS_TO_DWT(T1+T2+T3);
    m_offsets[1] = _FASTLED_NS_TO_DWT(T2+T3);
     7aa:	0c1b      	lsrs	r3, r3, #16
    m_offsets[2] = _FASTLED_NS_TO_DWT(T3);
    uint32_t wait_off = _FASTLED_NS_TO_DWT((WAIT_TIME-INTERRUPT_THRESHOLD));
     7ac:	6809      	ldr	r1, [r1, #0]
    }

    cli();
    m_offsets[0] = _FASTLED_NS_TO_DWT(T1+T2+T3);
    m_offsets[1] = _FASTLED_NS_TO_DWT(T2+T3);
    m_offsets[2] = _FASTLED_NS_TO_DWT(T3);
     7ae:	0c12      	lsrs	r2, r2, #16
      b0.bytes[m_bitOffsets[i]] = allpixels.loadAndScale0(i);
    }

    cli();
    m_offsets[0] = _FASTLED_NS_TO_DWT(T1+T2+T3);
    m_offsets[1] = _FASTLED_NS_TO_DWT(T2+T3);
     7b0:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    for(int i = 0; i < m_nActualLanes; i++) {
      b0.bytes[m_bitOffsets[i]] = allpixels.loadAndScale0(i);
    }

    cli();
    m_offsets[0] = _FASTLED_NS_TO_DWT(T1+T2+T3);
     7b4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    m_offsets[1] = _FASTLED_NS_TO_DWT(T2+T3);
     7b8:	019b      	lsls	r3, r3, #6
    m_offsets[2] = _FASTLED_NS_TO_DWT(T3);
    uint32_t wait_off = _FASTLED_NS_TO_DWT((WAIT_TIME-INTERRUPT_THRESHOLD));
     7ba:	0c09      	lsrs	r1, r1, #16
    for(int i = 0; i < m_nActualLanes; i++) {
      b0.bytes[m_bitOffsets[i]] = allpixels.loadAndScale0(i);
    }

    cli();
    m_offsets[0] = _FASTLED_NS_TO_DWT(T1+T2+T3);
     7bc:	01e4      	lsls	r4, r4, #7
    m_offsets[1] = _FASTLED_NS_TO_DWT(T2+T3);
    m_offsets[2] = _FASTLED_NS_TO_DWT(T3);
     7be:	eb02 0282 	add.w	r2, r2, r2, lsl #2
      b0.bytes[m_bitOffsets[i]] = allpixels.loadAndScale0(i);
    }

    cli();
    m_offsets[0] = _FASTLED_NS_TO_DWT(T1+T2+T3);
    m_offsets[1] = _FASTLED_NS_TO_DWT(T2+T3);
     7c2:	085b      	lsrs	r3, r3, #1
    m_offsets[2] = _FASTLED_NS_TO_DWT(T3);
    uint32_t wait_off = _FASTLED_NS_TO_DWT((WAIT_TIME-INTERRUPT_THRESHOLD));
     7c4:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    }

    cli();
    m_offsets[0] = _FASTLED_NS_TO_DWT(T1+T2+T3);
    m_offsets[1] = _FASTLED_NS_TO_DWT(T2+T3);
    m_offsets[2] = _FASTLED_NS_TO_DWT(T3);
     7c8:	0195      	lsls	r5, r2, #6
    for(int i = 0; i < m_nActualLanes; i++) {
      b0.bytes[m_bitOffsets[i]] = allpixels.loadAndScale0(i);
    }

    cli();
    m_offsets[0] = _FASTLED_NS_TO_DWT(T1+T2+T3);
     7ca:	fba0 4204 	umull	r4, r2, r0, r4
    m_offsets[1] = _FASTLED_NS_TO_DWT(T2+T3);
    m_offsets[2] = _FASTLED_NS_TO_DWT(T3);
    uint32_t wait_off = _FASTLED_NS_TO_DWT((WAIT_TIME-INTERRUPT_THRESHOLD));
     7ce:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
      b0.bytes[m_bitOffsets[i]] = allpixels.loadAndScale0(i);
    }

    cli();
    m_offsets[0] = _FASTLED_NS_TO_DWT(T1+T2+T3);
    m_offsets[1] = _FASTLED_NS_TO_DWT(T2+T3);
     7d2:	fba0 4303 	umull	r4, r3, r0, r3
    m_offsets[2] = _FASTLED_NS_TO_DWT(T3);
     7d6:	fba0 4505 	umull	r4, r5, r0, r5
    for(int i = 0; i < m_nActualLanes; i++) {
      b0.bytes[m_bitOffsets[i]] = allpixels.loadAndScale0(i);
    }

    cli();
    m_offsets[0] = _FASTLED_NS_TO_DWT(T1+T2+T3);
     7da:	0a12      	lsrs	r2, r2, #8
    m_offsets[1] = _FASTLED_NS_TO_DWT(T2+T3);
     7dc:	0a1b      	lsrs	r3, r3, #8
    m_offsets[2] = _FASTLED_NS_TO_DWT(T3);
    uint32_t wait_off = _FASTLED_NS_TO_DWT((WAIT_TIME-INTERRUPT_THRESHOLD));

    uint32_t next_mark = ARM_DWT_CYCCNT + m_offsets[0];
     7de:	4ca7      	ldr	r4, [pc, #668]	; (a7c <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x34c>)

    cli();
    m_offsets[0] = _FASTLED_NS_TO_DWT(T1+T2+T3);
    m_offsets[1] = _FASTLED_NS_TO_DWT(T2+T3);
    m_offsets[2] = _FASTLED_NS_TO_DWT(T3);
    uint32_t wait_off = _FASTLED_NS_TO_DWT((WAIT_TIME-INTERRUPT_THRESHOLD));
     7e0:	0849      	lsrs	r1, r1, #1
    for(int i = 0; i < m_nActualLanes; i++) {
      b0.bytes[m_bitOffsets[i]] = allpixels.loadAndScale0(i);
    }

    cli();
    m_offsets[0] = _FASTLED_NS_TO_DWT(T1+T2+T3);
     7e2:	6372      	str	r2, [r6, #52]	; 0x34
    m_offsets[1] = _FASTLED_NS_TO_DWT(T2+T3);
     7e4:	63b3      	str	r3, [r6, #56]	; 0x38
    m_offsets[2] = _FASTLED_NS_TO_DWT(T3);
     7e6:	0a2d      	lsrs	r5, r5, #8
    uint32_t wait_off = _FASTLED_NS_TO_DWT((WAIT_TIME-INTERRUPT_THRESHOLD));
     7e8:	fba0 1301 	umull	r1, r3, r0, r1

    uint32_t next_mark = ARM_DWT_CYCCNT + m_offsets[0];

    while(allpixels.has(1)) {
     7ec:	9901      	ldr	r1, [sp, #4]
    }

    cli();
    m_offsets[0] = _FASTLED_NS_TO_DWT(T1+T2+T3);
    m_offsets[1] = _FASTLED_NS_TO_DWT(T2+T3);
    m_offsets[2] = _FASTLED_NS_TO_DWT(T3);
     7ee:	63f5      	str	r5, [r6, #60]	; 0x3c
    uint32_t wait_off = _FASTLED_NS_TO_DWT((WAIT_TIME-INTERRUPT_THRESHOLD));

    uint32_t next_mark = ARM_DWT_CYCCNT + m_offsets[0];

    while(allpixels.has(1)) {
     7f0:	6889      	ldr	r1, [r1, #8]

    cli();
    m_offsets[0] = _FASTLED_NS_TO_DWT(T1+T2+T3);
    m_offsets[1] = _FASTLED_NS_TO_DWT(T2+T3);
    m_offsets[2] = _FASTLED_NS_TO_DWT(T3);
    uint32_t wait_off = _FASTLED_NS_TO_DWT((WAIT_TIME-INTERRUPT_THRESHOLD));
     7f2:	0a1b      	lsrs	r3, r3, #8

    uint32_t next_mark = ARM_DWT_CYCCNT + m_offsets[0];
     7f4:	6820      	ldr	r0, [r4, #0]

    while(allpixels.has(1)) {
     7f6:	2900      	cmp	r1, #0

    cli();
    m_offsets[0] = _FASTLED_NS_TO_DWT(T1+T2+T3);
    m_offsets[1] = _FASTLED_NS_TO_DWT(T2+T3);
    m_offsets[2] = _FASTLED_NS_TO_DWT(T3);
    uint32_t wait_off = _FASTLED_NS_TO_DWT((WAIT_TIME-INTERRUPT_THRESHOLD));
     7f8:	9304      	str	r3, [sp, #16]

    uint32_t next_mark = ARM_DWT_CYCCNT + m_offsets[0];
     7fa:	eb02 0b00 	add.w	fp, r2, r0

    while(allpixels.has(1)) {
     7fe:	f340 8420 	ble.w	1042 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x912>
      allpixels.stepDithering();
      #if (FASTLED_ALLOW_INTERRUPTS == 1)
			cli();
			// if interrupts took longer than 45µs, punt on the current frame
			if(ARM_DWT_CYCCNT > next_mark) {
     802:	46a2      	mov	sl, r4

      uint32_t out = (b2.bg[3][i] << 24) | (b2.bg[2][i] << 16) | (b2.bg[1][i] << 8) | b2.bg[0][i];

      out = ((~out) & m_nWriteMask);
      while((next_mark - ARM_DWT_CYCCNT) > m_offsets[1]);
      *FastPin<FIRST_PIN>::cport() = out;
     804:	9602      	str	r6, [sp, #8]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     806:	9d01      	ldr	r5, [sp, #4]
                d[1] = e[1] - d[1];
     808:	7b68      	ldrb	r0, [r5, #13]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     80a:	7beb      	ldrb	r3, [r5, #15]
     80c:	7b29      	ldrb	r1, [r5, #12]
                d[1] = e[1] - d[1];
     80e:	7c2a      	ldrb	r2, [r5, #16]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     810:	1a59      	subs	r1, r3, r1
                d[1] = e[1] - d[1];
                d[2] = e[2] - d[2];
     812:	7c6b      	ldrb	r3, [r5, #17]
        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
                d[1] = e[1] - d[1];
     814:	1a12      	subs	r2, r2, r0
                d[2] = e[2] - d[2];
     816:	7ba8      	ldrb	r0, [r5, #14]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     818:	7329      	strb	r1, [r5, #12]
                d[1] = e[1] - d[1];
                d[2] = e[2] - d[2];
     81a:	1a1b      	subs	r3, r3, r0
        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
                d[1] = e[1] - d[1];
     81c:	736a      	strb	r2, [r5, #13]
                d[2] = e[2] - d[2];
     81e:	73ab      	strb	r3, [r5, #14]
    uint32_t next_mark = ARM_DWT_CYCCNT + m_offsets[0];

    while(allpixels.has(1)) {
      allpixels.stepDithering();
      #if (FASTLED_ALLOW_INTERRUPTS == 1)
			cli();
     820:	b672      	cpsid	i
			// if interrupts took longer than 45µs, punt on the current frame
			if(ARM_DWT_CYCCNT > next_mark) {
     822:	f8da 3000 	ldr.w	r3, [sl]
     826:	4a95      	ldr	r2, [pc, #596]	; (a7c <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x34c>)
     828:	455b      	cmp	r3, fp
     82a:	d907      	bls.n	83c <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x10c>
				if((ARM_DWT_CYCCNT-next_mark) > wait_off) { sei(); return ARM_DWT_CYCCNT - start; }
     82c:	f8da 3000 	ldr.w	r3, [sl]
     830:	9904      	ldr	r1, [sp, #16]
     832:	ebcb 0303 	rsb	r3, fp, r3
     836:	4299      	cmp	r1, r3
     838:	f0c0 8411 	bcc.w	105e <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x92e>
/// data into LSB for a faster write (the code using this data can happily walk the array backwards)
__attribute__((always_inline)) inline void transpose8x1(unsigned char *A, unsigned char *B) {
  uint32_t x, y, t;

  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
     83c:	990c      	ldr	r1, [sp, #48]	; 0x30
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     83e:	f64c 48cc 	movw	r8, #52428	; 0xcccc
__attribute__((always_inline)) inline void transpose8x1(unsigned char *A, unsigned char *B) {
  uint32_t x, y, t;

  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);
     842:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     844:	ea81 14d1 	eor.w	r4, r1, r1, lsr #7
__attribute__((always_inline)) inline void transpose8x1(unsigned char *A, unsigned char *B) {
  uint32_t x, y, t;

  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);
     848:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     84c:	ea83 10d3 	eor.w	r0, r3, r3, lsr #7
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     850:	4642      	mov	r2, r8

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     852:	f004 14aa 	and.w	r4, r4, #11141290	; 0xaa00aa
/// data into LSB for a faster write (the code using this data can happily walk the array backwards)
__attribute__((always_inline)) inline void transpose8x1(unsigned char *A, unsigned char *B) {
  uint32_t x, y, t;

  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
     856:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     858:	f000 10aa 	and.w	r0, r0, #11141290	; 0xaa00aa
/// data into LSB for a faster write (the code using this data can happily walk the array backwards)
__attribute__((always_inline)) inline void transpose8x1(unsigned char *A, unsigned char *B) {
  uint32_t x, y, t;

  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
     85c:	9d08      	ldr	r5, [sp, #32]
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     85e:	4061      	eors	r1, r4
__attribute__((always_inline)) inline void transpose8x1(unsigned char *A, unsigned char *B) {
  uint32_t x, y, t;

  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);
     860:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     864:	4043      	eors	r3, r0
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     866:	ea87 1ed7 	eor.w	lr, r7, r7, lsr #7
     86a:	ea81 14c4 	eor.w	r4, r1, r4, lsl #7
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     86e:	ea83 10c0 	eor.w	r0, r3, r0, lsl #7
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     872:	f00e 1eaa 	and.w	lr, lr, #11141290	; 0xaa00aa
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     876:	ea84 3194 	eor.w	r1, r4, r4, lsr #14
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     87a:	ea8c 13dc 	eor.w	r3, ip, ip, lsr #7
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     87e:	ea87 070e 	eor.w	r7, r7, lr
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     882:	ea01 0808 	and.w	r8, r1, r8
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     886:	ea80 3190 	eor.w	r1, r0, r0, lsr #14
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     88a:	f003 13aa 	and.w	r3, r3, #11141290	; 0xaa00aa
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     88e:	ea87 17ce 	eor.w	r7, r7, lr, lsl #7
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     892:	400a      	ands	r2, r1

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     894:	ea84 0108 	eor.w	r1, r4, r8
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     898:	ea8c 0403 	eor.w	r4, ip, r3
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     89c:	ea85 1cd5 	eor.w	ip, r5, r5, lsr #7
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     8a0:	ea81 3188 	eor.w	r1, r1, r8, lsl #14
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     8a4:	4050      	eors	r0, r2
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     8a6:	ea84 13c3 	eor.w	r3, r4, r3, lsl #7
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     8aa:	f00c 1caa 	and.w	ip, ip, #11141290	; 0xaa00aa
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     8ae:	ea80 3282 	eor.w	r2, r0, r2, lsl #14
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
     8b2:	f001 300f 	and.w	r0, r1, #252645135	; 0xf0f0f0f
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     8b6:	ea89 14d9 	eor.w	r4, r9, r9, lsr #7
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     8ba:	ea85 050c 	eor.w	r5, r5, ip
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
     8be:	4606      	mov	r6, r0
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     8c0:	9806      	ldr	r0, [sp, #24]
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     8c2:	f004 14aa 	and.w	r4, r4, #11141290	; 0xaa00aa
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     8c6:	ea85 15cc 	eor.w	r5, r5, ip, lsl #7
     8ca:	ea80 18d0 	eor.w	r8, r0, r0, lsr #7
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     8ce:	9807      	ldr	r0, [sp, #28]
     8d0:	ea89 0e04 	eor.w	lr, r9, r4
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     8d4:	0909      	lsrs	r1, r1, #4
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     8d6:	ea80 1cd0 	eor.w	ip, r0, r0, lsr #7
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     8da:	f008 18aa 	and.w	r8, r8, #11141290	; 0xaa00aa
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     8de:	ea8e 1ec4 	eor.w	lr, lr, r4, lsl #7
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     8e2:	9806      	ldr	r0, [sp, #24]
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     8e4:	f00c 1caa 	and.w	ip, ip, #11141290	; 0xaa00aa
     8e8:	9c07      	ldr	r4, [sp, #28]
  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
     8ea:	f002 39f0 	and.w	r9, r2, #4042322160	; 0xf0f0f0f0
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     8ee:	ea80 0008 	eor.w	r0, r0, r8
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     8f2:	ea84 040c 	eor.w	r4, r4, ip
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     8f6:	0112      	lsls	r2, r2, #4
  *((uint32_t*)(B+4)) = x;
     8f8:	f001 310f 	and.w	r1, r1, #252645135	; 0xf0f0f0f
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     8fc:	ea80 10c8 	eor.w	r0, r0, r8, lsl #7
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     900:	ea84 14cc 	eor.w	r4, r4, ip, lsl #7
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     904:	f002 32f0 	and.w	r2, r2, #4042322160	; 0xf0f0f0f0
  *((uint32_t*)(B+4)) = x;
     908:	ea41 0109 	orr.w	r1, r1, r9
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     90c:	ea87 3897 	eor.w	r8, r7, r7, lsr #14
     910:	f64c 4ccc 	movw	ip, #52428	; 0xcccc
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     914:	4332      	orrs	r2, r6
  *((uint32_t*)(B+4)) = x;
     916:	9115      	str	r1, [sp, #84]	; 0x54
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     918:	f64c 41cc 	movw	r1, #52428	; 0xcccc

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     91c:	ea08 0c0c 	and.w	ip, r8, ip
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     920:	ea83 3893 	eor.w	r8, r3, r3, lsr #14
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     924:	9214      	str	r2, [sp, #80]	; 0x50
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     926:	f64c 42cc 	movw	r2, #52428	; 0xcccc
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     92a:	ea08 0101 	and.w	r1, r8, r1

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     92e:	ea85 3895 	eor.w	r8, r5, r5, lsr #14
     932:	ea87 070c 	eor.w	r7, r7, ip
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     936:	ea84 3994 	eor.w	r9, r4, r4, lsr #14

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     93a:	ea08 0202 	and.w	r2, r8, r2
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     93e:	ea8e 389e 	eor.w	r8, lr, lr, lsr #14

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     942:	ea87 378c 	eor.w	r7, r7, ip, lsl #14
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     946:	f64c 4ccc 	movw	ip, #52428	; 0xcccc

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     94a:	4055      	eors	r5, r2
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     94c:	404b      	eors	r3, r1
     94e:	ea08 0c0c 	and.w	ip, r8, ip

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     952:	ea80 3890 	eor.w	r8, r0, r0, lsr #14
     956:	ea85 3582 	eor.w	r5, r5, r2, lsl #14
     95a:	f64c 42cc 	movw	r2, #52428	; 0xcccc
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     95e:	ea83 3381 	eor.w	r3, r3, r1, lsl #14
     962:	ea8e 0e0c 	eor.w	lr, lr, ip

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     966:	ea08 0202 	and.w	r2, r8, r2
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     96a:	f64c 48cc 	movw	r8, #52428	; 0xcccc
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     96e:	0939      	lsrs	r1, r7, #4
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
     970:	f007 370f 	and.w	r7, r7, #252645135	; 0xf0f0f0f
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     974:	ea09 0808 	and.w	r8, r9, r8

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     978:	4050      	eors	r0, r2

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
     97a:	f003 39f0 	and.w	r9, r3, #4042322160	; 0xf0f0f0f0
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     97e:	011b      	lsls	r3, r3, #4
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     980:	ea84 0408 	eor.w	r4, r4, r8

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     984:	ea80 3082 	eor.w	r0, r0, r2, lsl #14
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     988:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
  *((uint32_t*)(B+4)) = x;
     98c:	f001 310f 	and.w	r1, r1, #252645135	; 0xf0f0f0f
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     990:	ea84 3488 	eor.w	r4, r4, r8, lsl #14
     994:	9e02      	ldr	r6, [sp, #8]
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     996:	433b      	orrs	r3, r7
  *((uint32_t*)(B+4)) = x;
     998:	0907      	lsrs	r7, r0, #4
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     99a:	0122      	lsls	r2, r4, #4
  *((uint32_t*)(B+4)) = x;
     99c:	ea41 0109 	orr.w	r1, r1, r9
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     9a0:	ea8e 3e8c 	eor.w	lr, lr, ip, lsl #14
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
     9a4:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     9a8:	ea4f 1915 	mov.w	r9, r5, lsr #4
     9ac:	f007 370f 	and.w	r7, r7, #252645135	; 0xf0f0f0f
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     9b0:	f002 32f0 	and.w	r2, r2, #4042322160	; 0xf0f0f0f0
  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
     9b4:	f004 34f0 	and.w	r4, r4, #4042322160	; 0xf0f0f0f0
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     9b8:	ea4f 180e 	mov.w	r8, lr, lsl #4
  *((uint32_t*)(B+4)) = x;
     9bc:	f009 390f 	and.w	r9, r9, #252645135	; 0xf0f0f0f
  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
     9c0:	f00e 3ef0 	and.w	lr, lr, #4042322160	; 0xf0f0f0f0
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     9c4:	433c      	orrs	r4, r7
     9c6:	9113      	str	r1, [sp, #76]	; 0x4c
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     9c8:	ea42 0100 	orr.w	r1, r2, r0
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane, uint8_t scale) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane, scale); }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getd(PixelController & pc) { return pc.d[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getscale(PixelController & pc) { return pc.mScale.raw[RO(SLOT)]; }
     9cc:	9f01      	ldr	r7, [sp, #4]
     9ce:	f008 3cf0 	and.w	ip, r8, #4042322160	; 0xf0f0f0f0
  *((uint32_t*)(B+4)) = x;
     9d2:	ea49 090e 	orr.w	r9, r9, lr
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
     9d6:	f005 350f 	and.w	r5, r5, #252645135	; 0xf0f0f0f
     9da:	f897 e012 	ldrb.w	lr, [r7, #18]
     9de:	aa0e      	add	r2, sp, #56	; 0x38
  x = t;

  *((uint32_t*)B) = y;
     9e0:	910e      	str	r1, [sp, #56]	; 0x38
     9e2:	ea4c 0505 	orr.w	r5, ip, r5
     9e6:	6839      	ldr	r1, [r7, #0]
     9e8:	f10e 0e01 	add.w	lr, lr, #1
     9ec:	9312      	str	r3, [sp, #72]	; 0x48
    transpose8x1(b.bg[0], b2.bg[0]);

    register uint8_t d = pixels.template getd<PX>(pixels);
    register uint8_t scale = pixels.template getscale<PX>(pixels);

    int x = 0;
     9ee:	2000      	movs	r0, #0
    for(uint32_t i = 8; i > 0;) {
     9f0:	2308      	movs	r3, #8

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane, uint8_t scale) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane, scale); }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getd(PixelController & pc) { return pc.d[RO(SLOT)]; }
     9f2:	f897 800c 	ldrb.w	r8, [r7, #12]
     9f6:	468c      	mov	ip, r1
  *((uint32_t*)(B+4)) = x;
     9f8:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     9fc:	9510      	str	r5, [sp, #64]	; 0x40
  *((uint32_t*)(B+4)) = x;
     9fe:	940f      	str	r4, [sp, #60]	; 0x3c
     a00:	9103      	str	r1, [sp, #12]
      i--;
     a02:	3b01      	subs	r3, #1
      while(ARM_DWT_CYCCNT < next_mark);
     a04:	f8da 1000 	ldr.w	r1, [sl]
     a08:	4559      	cmp	r1, fp
     a0a:	d3fb      	bcc.n	a04 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x2d4>
      *FastPin<FIRST_PIN>::sport() = m_nWriteMask;
     a0c:	6af1      	ldr	r1, [r6, #44]	; 0x2c
     a0e:	4c1e      	ldr	r4, [pc, #120]	; (a88 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x358>)
     a10:	6021      	str	r1, [r4, #0]
      next_mark = ARM_DWT_CYCCNT + m_offsets[0];

      uint32_t out = (b2.bg[3][i] << 24) | (b2.bg[2][i] << 16) | (b2.bg[1][i] << 8) | b2.bg[0][i];

      out = ((~out) & m_nWriteMask);
     a12:	7dd1      	ldrb	r1, [r2, #23]
     a14:	7fd5      	ldrb	r5, [r2, #31]
     a16:	0409      	lsls	r1, r1, #16
     a18:	79d7      	ldrb	r7, [r2, #7]
     a1a:	f892 900f 	ldrb.w	r9, [r2, #15]
     a1e:	ea41 6505 	orr.w	r5, r1, r5, lsl #24
     a22:	6af4      	ldr	r4, [r6, #44]	; 0x2c
     a24:	ea45 0107 	orr.w	r1, r5, r7
    int x = 0;
    for(uint32_t i = 8; i > 0;) {
      i--;
      while(ARM_DWT_CYCCNT < next_mark);
      *FastPin<FIRST_PIN>::sport() = m_nWriteMask;
      next_mark = ARM_DWT_CYCCNT + m_offsets[0];
     a28:	4d14      	ldr	r5, [pc, #80]	; (a7c <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x34c>)
     a2a:	682f      	ldr	r7, [r5, #0]

      uint32_t out = (b2.bg[3][i] << 24) | (b2.bg[2][i] << 16) | (b2.bg[1][i] << 8) | b2.bg[0][i];

      out = ((~out) & m_nWriteMask);
     a2c:	ea41 2509 	orr.w	r5, r1, r9, lsl #8
    int x = 0;
    for(uint32_t i = 8; i > 0;) {
      i--;
      while(ARM_DWT_CYCCNT < next_mark);
      *FastPin<FIRST_PIN>::sport() = m_nWriteMask;
      next_mark = ARM_DWT_CYCCNT + m_offsets[0];
     a30:	6b71      	ldr	r1, [r6, #52]	; 0x34

      uint32_t out = (b2.bg[3][i] << 24) | (b2.bg[2][i] << 16) | (b2.bg[1][i] << 8) | b2.bg[0][i];

      out = ((~out) & m_nWriteMask);
     a32:	ea24 0405 	bic.w	r4, r4, r5
     a36:	6bb5      	ldr	r5, [r6, #56]	; 0x38
    int x = 0;
    for(uint32_t i = 8; i > 0;) {
      i--;
      while(ARM_DWT_CYCCNT < next_mark);
      *FastPin<FIRST_PIN>::sport() = m_nWriteMask;
      next_mark = ARM_DWT_CYCCNT + m_offsets[0];
     a38:	eb07 0b01 	add.w	fp, r7, r1

      uint32_t out = (b2.bg[3][i] << 24) | (b2.bg[2][i] << 16) | (b2.bg[1][i] << 8) | b2.bg[0][i];

      out = ((~out) & m_nWriteMask);
      while((next_mark - ARM_DWT_CYCCNT) > m_offsets[1]);
     a3c:	f8da 1000 	ldr.w	r1, [sl]
     a40:	ebc1 010b 	rsb	r1, r1, fp
     a44:	42a9      	cmp	r1, r5
     a46:	d8f9      	bhi.n	a3c <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x30c>
      *FastPin<FIRST_PIN>::cport() = out;
     a48:	4910      	ldr	r1, [pc, #64]	; (a8c <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x35c>)
     a4a:	600c      	str	r4, [r1, #0]

      out = m_nWriteMask;
     a4c:	6af5      	ldr	r5, [r6, #44]	; 0x2c
     a4e:	6bf4      	ldr	r4, [r6, #60]	; 0x3c
      while((next_mark - ARM_DWT_CYCCNT) > m_offsets[2]);
     a50:	f8da 1000 	ldr.w	r1, [sl]
     a54:	ebc1 010b 	rsb	r1, r1, fp
     a58:	42a1      	cmp	r1, r4
     a5a:	d8f9      	bhi.n	a50 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x320>
      *FastPin<FIRST_PIN>::cport() = out;
     a5c:	490b      	ldr	r1, [pc, #44]	; (a8c <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x35c>)
     a5e:	600d      	str	r5, [r1, #0]

      // Read and store up to two bytes
      if (x < m_nActualLanes) {
     a60:	f896 4028 	ldrb.w	r4, [r6, #40]	; 0x28
     a64:	4284      	cmp	r4, r0
     a66:	dd39      	ble.n	adc <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x3ac>
     a68:	9901      	ldr	r1, [sp, #4]
        b.bytes[m_bitOffsets[x]] = pixels.template loadAndScale<PX>(pixels,x,d,scale);
     a6a:	1835      	adds	r5, r6, r0
     a6c:	eb01 0780 	add.w	r7, r1, r0, lsl #2
     a70:	7e2d      	ldrb	r5, [r5, #24]
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }
     a72:	69b9      	ldr	r1, [r7, #24]
     a74:	f81c 1001 	ldrb.w	r1, [ip, r1]

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & , uint8_t b, uint8_t d) { return b ? qadd8(b,d) : 0; }
     a78:	b191      	cbz	r1, aa0 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x370>
     a7a:	e009      	b.n	a90 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x360>
     a7c:	e0001004 	.word	0xe0001004
     a80:	2001228c 	.word	0x2001228c
     a84:	08972311 	.word	0x08972311
     a88:	42000084 	.word	0x42000084
     a8c:	42000088 	.word	0x42000088
/// @param j - second byte to add
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
     a90:	4441      	add	r1, r8
    if( t > 255) t = 255;
     a92:	29ff      	cmp	r1, #255	; 0xff
     a94:	bfa8      	it	ge
     a96:	21ff      	movge	r1, #255	; 0xff
     a98:	fb01 f10e 	mul.w	r1, r1, lr
     a9c:	f3c1 2107 	ubfx	r1, r1, #8, #8
     aa0:	f10d 0958 	add.w	r9, sp, #88	; 0x58
     aa4:	444d      	add	r5, r9
        x++;
     aa6:	f100 0901 	add.w	r9, r0, #1
        if (x < m_nActualLanes) {
     aaa:	454c      	cmp	r4, r9
      while((next_mark - ARM_DWT_CYCCNT) > m_offsets[2]);
      *FastPin<FIRST_PIN>::cport() = out;

      // Read and store up to two bytes
      if (x < m_nActualLanes) {
        b.bytes[m_bitOffsets[x]] = pixels.template loadAndScale<PX>(pixels,x,d,scale);
     aac:	f805 1c40 	strb.w	r1, [r5, #-64]
        x++;
        if (x < m_nActualLanes) {
     ab0:	f340 82d1 	ble.w	1056 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x926>
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }
     ab4:	69f9      	ldr	r1, [r7, #28]
          b.bytes[m_bitOffsets[x]] = pixels.template loadAndScale<PX>(pixels,x,d,scale);
     ab6:	44b1      	add	r9, r6
     ab8:	f81c 1001 	ldrb.w	r1, [ip, r1]
     abc:	f899 4018 	ldrb.w	r4, [r9, #24]

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & , uint8_t b, uint8_t d) { return b ? qadd8(b,d) : 0; }
     ac0:	b139      	cbz	r1, ad2 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x3a2>
/// @param j - second byte to add
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
     ac2:	4441      	add	r1, r8
    if( t > 255) t = 255;
     ac4:	29ff      	cmp	r1, #255	; 0xff
     ac6:	bfa8      	it	ge
     ac8:	21ff      	movge	r1, #255	; 0xff
     aca:	fb0e f101 	mul.w	r1, lr, r1
     ace:	f3c1 2107 	ubfx	r1, r1, #8, #8
     ad2:	ad16      	add	r5, sp, #88	; 0x58
          x++;
     ad4:	3002      	adds	r0, #2
      // Read and store up to two bytes
      if (x < m_nActualLanes) {
        b.bytes[m_bitOffsets[x]] = pixels.template loadAndScale<PX>(pixels,x,d,scale);
        x++;
        if (x < m_nActualLanes) {
          b.bytes[m_bitOffsets[x]] = pixels.template loadAndScale<PX>(pixels,x,d,scale);
     ad6:	442c      	add	r4, r5
     ad8:	f804 1c40 	strb.w	r1, [r4, #-64]
     adc:	3a01      	subs	r2, #1

    register uint8_t d = pixels.template getd<PX>(pixels);
    register uint8_t scale = pixels.template getscale<PX>(pixels);

    int x = 0;
    for(uint32_t i = 8; i > 0;) {
     ade:	2b00      	cmp	r3, #0
     ae0:	d18f      	bne.n	a02 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x2d2>
/// data into LSB for a faster write (the code using this data can happily walk the array backwards)
__attribute__((always_inline)) inline void transpose8x1(unsigned char *A, unsigned char *B) {
  uint32_t x, y, t;

  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
     ae2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     ae4:	f64c 44cc 	movw	r4, #52428	; 0xcccc
__attribute__((always_inline)) inline void transpose8x1(unsigned char *A, unsigned char *B) {
  uint32_t x, y, t;

  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);
     ae8:	990d      	ldr	r1, [sp, #52]	; 0x34
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     aea:	ea82 1cd2 	eor.w	ip, r2, r2, lsr #7
__attribute__((always_inline)) inline void transpose8x1(unsigned char *A, unsigned char *B) {
  uint32_t x, y, t;

  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);
     aee:	9d0b      	ldr	r5, [sp, #44]	; 0x2c

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     af0:	ea81 10d1 	eor.w	r0, r1, r1, lsr #7
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     af4:	46a6      	mov	lr, r4

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     af6:	f00c 1caa 	and.w	ip, ip, #11141290	; 0xaa00aa
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     afa:	ea85 18d5 	eor.w	r8, r5, r5, lsr #7
     afe:	f000 10aa 	and.w	r0, r0, #11141290	; 0xaa00aa
/// data into LSB for a faster write (the code using this data can happily walk the array backwards)
__attribute__((always_inline)) inline void transpose8x1(unsigned char *A, unsigned char *B) {
  uint32_t x, y, t;

  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
     b02:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     b04:	ea82 020c 	eor.w	r2, r2, ip
/// data into LSB for a faster write (the code using this data can happily walk the array backwards)
__attribute__((always_inline)) inline void transpose8x1(unsigned char *A, unsigned char *B) {
  uint32_t x, y, t;

  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
     b08:	f8dd 9020 	ldr.w	r9, [sp, #32]
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     b0c:	4041      	eors	r1, r0
     b0e:	9602      	str	r6, [sp, #8]
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     b10:	ea82 12cc 	eor.w	r2, r2, ip, lsl #7
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     b14:	9e07      	ldr	r6, [sp, #28]
     b16:	ea81 10c0 	eor.w	r0, r1, r0, lsl #7
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     b1a:	ea82 3192 	eor.w	r1, r2, r2, lsr #14
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     b1e:	ea87 1cd7 	eor.w	ip, r7, r7, lsr #7
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     b22:	400c      	ands	r4, r1
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     b24:	ea80 3190 	eor.w	r1, r0, r0, lsr #14

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     b28:	f00c 1caa 	and.w	ip, ip, #11141290	; 0xaa00aa
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     b2c:	ea01 0e0e 	and.w	lr, r1, lr

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     b30:	ea82 0104 	eor.w	r1, r2, r4
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     b34:	f008 12aa 	and.w	r2, r8, #11141290	; 0xaa00aa
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     b38:	ea87 070c 	eor.w	r7, r7, ip
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     b3c:	ea81 3484 	eor.w	r4, r1, r4, lsl #14
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     b40:	ea80 000e 	eor.w	r0, r0, lr
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     b44:	ea85 0102 	eor.w	r1, r5, r2
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     b48:	ea87 17cc 	eor.w	r7, r7, ip, lsl #7
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     b4c:	ea80 3e8e 	eor.w	lr, r0, lr, lsl #14
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
     b50:	f004 380f 	and.w	r8, r4, #252645135	; 0xf0f0f0f
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     b54:	ea81 12c2 	eor.w	r2, r1, r2, lsl #7
     b58:	9909      	ldr	r1, [sp, #36]	; 0x24
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     b5a:	0924      	lsrs	r4, r4, #4
  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
     b5c:	f00e 3cf0 	and.w	ip, lr, #4042322160	; 0xf0f0f0f0
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     b60:	ea81 11d1 	eor.w	r1, r1, r1, lsr #7
     b64:	9809      	ldr	r0, [sp, #36]	; 0x24
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     b66:	f004 340f 	and.w	r4, r4, #252645135	; 0xf0f0f0f
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     b6a:	ea89 15d9 	eor.w	r5, r9, r9, lsr #7
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     b6e:	f001 11aa 	and.w	r1, r1, #11141290	; 0xaa00aa
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     b72:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  *((uint32_t*)(B+4)) = x;
     b76:	ea44 0c0c 	orr.w	ip, r4, ip
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     b7a:	9c06      	ldr	r4, [sp, #24]
     b7c:	f005 15aa 	and.w	r5, r5, #11141290	; 0xaa00aa
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     b80:	f00e 3ef0 	and.w	lr, lr, #4042322160	; 0xf0f0f0f0
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     b84:	4048      	eors	r0, r1
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     b86:	ea84 14d4 	eor.w	r4, r4, r4, lsr #7
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     b8a:	ea4e 0808 	orr.w	r8, lr, r8
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     b8e:	ea89 0905 	eor.w	r9, r9, r5
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     b92:	ea87 3e97 	eor.w	lr, r7, r7, lsr #14
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     b96:	f004 14aa 	and.w	r4, r4, #11141290	; 0xaa00aa
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     b9a:	ea80 10c1 	eor.w	r0, r0, r1, lsl #7
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     b9e:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     ba2:	9906      	ldr	r1, [sp, #24]
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     ba4:	f64c 4ccc 	movw	ip, #52428	; 0xcccc
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     ba8:	ea89 15c5 	eor.w	r5, r9, r5, lsl #7
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     bac:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     bb0:	ea81 0904 	eor.w	r9, r1, r4
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     bb4:	ea0e 0c0c 	and.w	ip, lr, ip
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     bb8:	9907      	ldr	r1, [sp, #28]
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     bba:	ea82 3e92 	eor.w	lr, r2, r2, lsr #14

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     bbe:	ea89 14c4 	eor.w	r4, r9, r4, lsl #7
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     bc2:	ea87 090c 	eor.w	r9, r7, ip
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     bc6:	ea81 11d1 	eor.w	r1, r1, r1, lsr #7
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     bca:	f64c 47cc 	movw	r7, #52428	; 0xcccc

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     bce:	ea89 3c8c 	eor.w	ip, r9, ip, lsl #14
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     bd2:	ea0e 0707 	and.w	r7, lr, r7
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     bd6:	f001 11aa 	and.w	r1, r1, #11141290	; 0xaa00aa
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     bda:	ea85 3995 	eor.w	r9, r5, r5, lsr #14
     bde:	f64c 4ecc 	movw	lr, #52428	; 0xcccc
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     be2:	ea86 0801 	eor.w	r8, r6, r1
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     be6:	407a      	eors	r2, r7

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     be8:	ea09 0e0e 	and.w	lr, r9, lr

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
     bec:	f00c 360f 	and.w	r6, ip, #252645135	; 0xf0f0f0f
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     bf0:	ea88 11c1 	eor.w	r1, r8, r1, lsl #7
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     bf4:	ea82 3287 	eor.w	r2, r2, r7, lsl #14

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     bf8:	ea85 050e 	eor.w	r5, r5, lr
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     bfc:	ea4f 181c 	mov.w	r8, ip, lsr #4
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     c00:	f64c 47cc 	movw	r7, #52428	; 0xcccc
  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
     c04:	f002 3cf0 	and.w	ip, r2, #4042322160	; 0xf0f0f0f0
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     c08:	ea85 358e 	eor.w	r5, r5, lr, lsl #14
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     c0c:	f008 380f 	and.w	r8, r8, #252645135	; 0xf0f0f0f
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     c10:	ea84 3e94 	eor.w	lr, r4, r4, lsr #14
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     c14:	ea80 3990 	eor.w	r9, r0, r0, lsr #14
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     c18:	ea48 0c0c 	orr.w	ip, r8, ip
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     c1c:	f64c 48cc 	movw	r8, #52428	; 0xcccc
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     c20:	ea09 0707 	and.w	r7, r9, r7
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     c24:	0112      	lsls	r2, r2, #4
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     c26:	ea0e 0808 	and.w	r8, lr, r8
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     c2a:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     c2e:	ea81 3e91 	eor.w	lr, r1, r1, lsr #14
     c32:	f64c 4ccc 	movw	ip, #52428	; 0xcccc
     c36:	4078      	eors	r0, r7
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     c38:	f002 32f0 	and.w	r2, r2, #4042322160	; 0xf0f0f0f0
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     c3c:	ea0e 0c0c 	and.w	ip, lr, ip

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     c40:	ea84 0408 	eor.w	r4, r4, r8
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     c44:	ea80 3087 	eor.w	r0, r0, r7, lsl #14
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     c48:	4332      	orrs	r2, r6
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     c4a:	ea81 070c 	eor.w	r7, r1, ip

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     c4e:	ea84 3488 	eor.w	r4, r4, r8, lsl #14
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     c52:	9212      	str	r2, [sp, #72]	; 0x48
     c54:	0102      	lsls	r2, r0, #4
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     c56:	ea87 3c8c 	eor.w	ip, r7, ip, lsl #14
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane, uint8_t scale) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane, scale); }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getd(PixelController & pc) { return pc.d[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getscale(PixelController & pc) { return pc.mScale.raw[RO(SLOT)]; }
     c5a:	9e01      	ldr	r6, [sp, #4]
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     c5c:	f002 3ef0 	and.w	lr, r2, #4042322160	; 0xf0f0f0f0
  *((uint32_t*)(B+4)) = x;
     c60:	0929      	lsrs	r1, r5, #4
     c62:	0927      	lsrs	r7, r4, #4
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
     c64:	f005 350f 	and.w	r5, r5, #252645135	; 0xf0f0f0f
  x = t;

  *((uint32_t*)B) = y;
     c68:	ea4f 120c 	mov.w	r2, ip, lsl #4
  *((uint32_t*)(B+4)) = x;
     c6c:	f001 310f 	and.w	r1, r1, #252645135	; 0xf0f0f0f
  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
     c70:	f00c 3cf0 	and.w	ip, ip, #4042322160	; 0xf0f0f0f0
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     c74:	ea4e 0505 	orr.w	r5, lr, r5
     c78:	f002 32f0 	and.w	r2, r2, #4042322160	; 0xf0f0f0f0
     c7c:	f896 e014 	ldrb.w	lr, [r6, #20]
  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
     c80:	f000 30f0 	and.w	r0, r0, #4042322160	; 0xf0f0f0f0
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
     c84:	f004 340f 	and.w	r4, r4, #252645135	; 0xf0f0f0f
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     c88:	f007 370f 	and.w	r7, r7, #252645135	; 0xf0f0f0f

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane, uint8_t scale) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane, scale); }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getd(PixelController & pc) { return pc.d[RO(SLOT)]; }
     c8c:	f896 800e 	ldrb.w	r8, [r6, #14]
     c90:	4308      	orrs	r0, r1
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     c92:	4314      	orrs	r4, r2
  *((uint32_t*)(B+4)) = x;
     c94:	ea47 070c 	orr.w	r7, r7, ip
     c98:	aa0e      	add	r2, sp, #56	; 0x38
     c9a:	f10e 0e01 	add.w	lr, lr, #1
     c9e:	2108      	movs	r1, #8
     ca0:	f8dd c00c 	ldr.w	ip, [sp, #12]
     ca4:	9e02      	ldr	r6, [sp, #8]
     ca6:	9011      	str	r0, [sp, #68]	; 0x44
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     ca8:	9510      	str	r5, [sp, #64]	; 0x40
  *((uint32_t*)(B+4)) = x;
     caa:	970f      	str	r7, [sp, #60]	; 0x3c
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     cac:	940e      	str	r4, [sp, #56]	; 0x38
      i--;
     cae:	3901      	subs	r1, #1
      while(ARM_DWT_CYCCNT < next_mark);
     cb0:	f8da 0000 	ldr.w	r0, [sl]
     cb4:	4558      	cmp	r0, fp
     cb6:	d3fb      	bcc.n	cb0 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x580>
      *FastPin<FIRST_PIN>::sport() = m_nWriteMask;
     cb8:	6af0      	ldr	r0, [r6, #44]	; 0x2c
     cba:	4ccb      	ldr	r4, [pc, #812]	; (fe8 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x8b8>)
     cbc:	6020      	str	r0, [r4, #0]
      next_mark = ARM_DWT_CYCCNT + m_offsets[0];

      uint32_t out = (b2.bg[3][i] << 24) | (b2.bg[2][i] << 16) | (b2.bg[1][i] << 8) | b2.bg[0][i];

      out = ((~out) & m_nWriteMask);
     cbe:	7dd0      	ldrb	r0, [r2, #23]
     cc0:	7fd5      	ldrb	r5, [r2, #31]
     cc2:	0400      	lsls	r0, r0, #16
     cc4:	79d7      	ldrb	r7, [r2, #7]
     cc6:	f892 900f 	ldrb.w	r9, [r2, #15]
     cca:	ea40 6505 	orr.w	r5, r0, r5, lsl #24
     cce:	6af4      	ldr	r4, [r6, #44]	; 0x2c
     cd0:	ea45 0007 	orr.w	r0, r5, r7
    int x = 0;
    for(uint32_t i = 8; i > 0;) {
      i--;
      while(ARM_DWT_CYCCNT < next_mark);
      *FastPin<FIRST_PIN>::sport() = m_nWriteMask;
      next_mark = ARM_DWT_CYCCNT + m_offsets[0];
     cd4:	4dc5      	ldr	r5, [pc, #788]	; (fec <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x8bc>)
     cd6:	682f      	ldr	r7, [r5, #0]

      uint32_t out = (b2.bg[3][i] << 24) | (b2.bg[2][i] << 16) | (b2.bg[1][i] << 8) | b2.bg[0][i];

      out = ((~out) & m_nWriteMask);
     cd8:	ea40 2509 	orr.w	r5, r0, r9, lsl #8
    int x = 0;
    for(uint32_t i = 8; i > 0;) {
      i--;
      while(ARM_DWT_CYCCNT < next_mark);
      *FastPin<FIRST_PIN>::sport() = m_nWriteMask;
      next_mark = ARM_DWT_CYCCNT + m_offsets[0];
     cdc:	6b70      	ldr	r0, [r6, #52]	; 0x34

      uint32_t out = (b2.bg[3][i] << 24) | (b2.bg[2][i] << 16) | (b2.bg[1][i] << 8) | b2.bg[0][i];

      out = ((~out) & m_nWriteMask);
     cde:	ea24 0405 	bic.w	r4, r4, r5
     ce2:	6bb5      	ldr	r5, [r6, #56]	; 0x38
    int x = 0;
    for(uint32_t i = 8; i > 0;) {
      i--;
      while(ARM_DWT_CYCCNT < next_mark);
      *FastPin<FIRST_PIN>::sport() = m_nWriteMask;
      next_mark = ARM_DWT_CYCCNT + m_offsets[0];
     ce4:	eb07 0b00 	add.w	fp, r7, r0

      uint32_t out = (b2.bg[3][i] << 24) | (b2.bg[2][i] << 16) | (b2.bg[1][i] << 8) | b2.bg[0][i];

      out = ((~out) & m_nWriteMask);
      while((next_mark - ARM_DWT_CYCCNT) > m_offsets[1]);
     ce8:	f8da 0000 	ldr.w	r0, [sl]
     cec:	ebc0 000b 	rsb	r0, r0, fp
     cf0:	42a8      	cmp	r0, r5
     cf2:	d8f9      	bhi.n	ce8 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x5b8>
      *FastPin<FIRST_PIN>::cport() = out;
     cf4:	48be      	ldr	r0, [pc, #760]	; (ff0 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x8c0>)
     cf6:	6004      	str	r4, [r0, #0]

      out = m_nWriteMask;
     cf8:	6af5      	ldr	r5, [r6, #44]	; 0x2c
     cfa:	6bf4      	ldr	r4, [r6, #60]	; 0x3c
      while((next_mark - ARM_DWT_CYCCNT) > m_offsets[2]);
     cfc:	f8da 0000 	ldr.w	r0, [sl]
     d00:	ebc0 000b 	rsb	r0, r0, fp
     d04:	42a0      	cmp	r0, r4
     d06:	d8f9      	bhi.n	cfc <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x5cc>
      *FastPin<FIRST_PIN>::cport() = out;
     d08:	48b9      	ldr	r0, [pc, #740]	; (ff0 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x8c0>)
     d0a:	6005      	str	r5, [r0, #0]

      // Read and store up to two bytes
      if (x < m_nActualLanes) {
     d0c:	f896 4028 	ldrb.w	r4, [r6, #40]	; 0x28
     d10:	429c      	cmp	r4, r3
     d12:	dd2e      	ble.n	d72 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x642>
     d14:	9801      	ldr	r0, [sp, #4]
        b.bytes[m_bitOffsets[x]] = pixels.template loadAndScale<PX>(pixels,x,d,scale);
     d16:	18f5      	adds	r5, r6, r3
     d18:	eb00 0783 	add.w	r7, r0, r3, lsl #2
     d1c:	7e2d      	ldrb	r5, [r5, #24]
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }
     d1e:	69b8      	ldr	r0, [r7, #24]
     d20:	4460      	add	r0, ip
     d22:	7880      	ldrb	r0, [r0, #2]

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & , uint8_t b, uint8_t d) { return b ? qadd8(b,d) : 0; }
     d24:	b138      	cbz	r0, d36 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x606>
/// @param j - second byte to add
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
     d26:	4440      	add	r0, r8
    if( t > 255) t = 255;
     d28:	28ff      	cmp	r0, #255	; 0xff
     d2a:	bfa8      	it	ge
     d2c:	20ff      	movge	r0, #255	; 0xff
     d2e:	fb00 f00e 	mul.w	r0, r0, lr
     d32:	f3c0 2007 	ubfx	r0, r0, #8, #8
     d36:	f10d 0958 	add.w	r9, sp, #88	; 0x58
     d3a:	444d      	add	r5, r9
        x++;
     d3c:	f103 0901 	add.w	r9, r3, #1
        if (x < m_nActualLanes) {
     d40:	454c      	cmp	r4, r9
      while((next_mark - ARM_DWT_CYCCNT) > m_offsets[2]);
      *FastPin<FIRST_PIN>::cport() = out;

      // Read and store up to two bytes
      if (x < m_nActualLanes) {
        b.bytes[m_bitOffsets[x]] = pixels.template loadAndScale<PX>(pixels,x,d,scale);
     d42:	f805 0c40 	strb.w	r0, [r5, #-64]
        x++;
        if (x < m_nActualLanes) {
     d46:	f340 8188 	ble.w	105a <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x92a>
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }
     d4a:	69f8      	ldr	r0, [r7, #28]
          b.bytes[m_bitOffsets[x]] = pixels.template loadAndScale<PX>(pixels,x,d,scale);
     d4c:	44b1      	add	r9, r6
     d4e:	4460      	add	r0, ip
     d50:	f899 4018 	ldrb.w	r4, [r9, #24]
     d54:	7880      	ldrb	r0, [r0, #2]

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & , uint8_t b, uint8_t d) { return b ? qadd8(b,d) : 0; }
     d56:	b138      	cbz	r0, d68 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x638>
/// @param j - second byte to add
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
     d58:	4440      	add	r0, r8
    if( t > 255) t = 255;
     d5a:	28ff      	cmp	r0, #255	; 0xff
     d5c:	bfa8      	it	ge
     d5e:	20ff      	movge	r0, #255	; 0xff
     d60:	fb0e f000 	mul.w	r0, lr, r0
     d64:	f3c0 2007 	ubfx	r0, r0, #8, #8
     d68:	ad16      	add	r5, sp, #88	; 0x58
          x++;
     d6a:	3302      	adds	r3, #2
      // Read and store up to two bytes
      if (x < m_nActualLanes) {
        b.bytes[m_bitOffsets[x]] = pixels.template loadAndScale<PX>(pixels,x,d,scale);
        x++;
        if (x < m_nActualLanes) {
          b.bytes[m_bitOffsets[x]] = pixels.template loadAndScale<PX>(pixels,x,d,scale);
     d6c:	442c      	add	r4, r5
     d6e:	f804 0c40 	strb.w	r0, [r4, #-64]
     d72:	3a01      	subs	r2, #1

    register uint8_t d = pixels.template getd<PX>(pixels);
    register uint8_t scale = pixels.template getscale<PX>(pixels);

    int x = 0;
    for(uint32_t i = 8; i > 0;) {
     d74:	2900      	cmp	r1, #0
     d76:	d19a      	bne.n	cae <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x57e>
/// data into LSB for a faster write (the code using this data can happily walk the array backwards)
__attribute__((always_inline)) inline void transpose8x1(unsigned char *A, unsigned char *B) {
  uint32_t x, y, t;

  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
     d78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     d7a:	f64c 44cc 	movw	r4, #52428	; 0xcccc
__attribute__((always_inline)) inline void transpose8x1(unsigned char *A, unsigned char *B) {
  uint32_t x, y, t;

  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);
     d7e:	980d      	ldr	r0, [sp, #52]	; 0x34
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     d80:	ea83 12d3 	eor.w	r2, r3, r3, lsr #7
__attribute__((always_inline)) inline void transpose8x1(unsigned char *A, unsigned char *B) {
  uint32_t x, y, t;

  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);
     d84:	9d0b      	ldr	r5, [sp, #44]	; 0x2c

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     d86:	ea80 1cd0 	eor.w	ip, r0, r0, lsr #7
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     d8a:	46a6      	mov	lr, r4

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     d8c:	f002 12aa 	and.w	r2, r2, #11141290	; 0xaa00aa
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     d90:	ea85 18d5 	eor.w	r8, r5, r5, lsr #7
     d94:	f00c 1caa 	and.w	ip, ip, #11141290	; 0xaa00aa
/// data into LSB for a faster write (the code using this data can happily walk the array backwards)
__attribute__((always_inline)) inline void transpose8x1(unsigned char *A, unsigned char *B) {
  uint32_t x, y, t;

  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
     d98:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     d9a:	4053      	eors	r3, r2
/// data into LSB for a faster write (the code using this data can happily walk the array backwards)
__attribute__((always_inline)) inline void transpose8x1(unsigned char *A, unsigned char *B) {
  uint32_t x, y, t;

  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
     d9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     da0:	ea80 000c 	eor.w	r0, r0, ip
     da4:	9602      	str	r6, [sp, #8]
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     da6:	ea83 12c2 	eor.w	r2, r3, r2, lsl #7
    transpose8x1(b.bg[0], b2.bg[0]);

    register uint8_t d = pixels.template getd<PX>(pixels);
    register uint8_t scale = pixels.template getscale<PX>(pixels);

    int x = 0;
     daa:	460b      	mov	r3, r1
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     dac:	ea80 10cc 	eor.w	r0, r0, ip, lsl #7
     db0:	9e07      	ldr	r6, [sp, #28]
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     db2:	ea82 3192 	eor.w	r1, r2, r2, lsr #14
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     db6:	ea87 1cd7 	eor.w	ip, r7, r7, lsr #7
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     dba:	400c      	ands	r4, r1
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     dbc:	ea80 3190 	eor.w	r1, r0, r0, lsr #14

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     dc0:	f00c 1caa 	and.w	ip, ip, #11141290	; 0xaa00aa
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     dc4:	ea01 0e0e 	and.w	lr, r1, lr

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     dc8:	ea82 0104 	eor.w	r1, r2, r4
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     dcc:	f008 12aa 	and.w	r2, r8, #11141290	; 0xaa00aa
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     dd0:	ea87 070c 	eor.w	r7, r7, ip
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     dd4:	ea81 3484 	eor.w	r4, r1, r4, lsl #14
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     dd8:	ea80 000e 	eor.w	r0, r0, lr
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     ddc:	ea85 0102 	eor.w	r1, r5, r2
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     de0:	ea87 17cc 	eor.w	r7, r7, ip, lsl #7
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     de4:	ea80 3e8e 	eor.w	lr, r0, lr, lsl #14
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
     de8:	f004 380f 	and.w	r8, r4, #252645135	; 0xf0f0f0f
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     dec:	ea81 12c2 	eor.w	r2, r1, r2, lsl #7
     df0:	9909      	ldr	r1, [sp, #36]	; 0x24
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     df2:	0924      	lsrs	r4, r4, #4
  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
     df4:	f00e 3cf0 	and.w	ip, lr, #4042322160	; 0xf0f0f0f0
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     df8:	ea81 11d1 	eor.w	r1, r1, r1, lsr #7
     dfc:	9809      	ldr	r0, [sp, #36]	; 0x24
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     dfe:	f004 340f 	and.w	r4, r4, #252645135	; 0xf0f0f0f
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     e02:	ea89 15d9 	eor.w	r5, r9, r9, lsr #7
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     e06:	f001 11aa 	and.w	r1, r1, #11141290	; 0xaa00aa
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     e0a:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  *((uint32_t*)(B+4)) = x;
     e0e:	ea44 0c0c 	orr.w	ip, r4, ip
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     e12:	9c06      	ldr	r4, [sp, #24]
     e14:	f005 15aa 	and.w	r5, r5, #11141290	; 0xaa00aa
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     e18:	f00e 3ef0 	and.w	lr, lr, #4042322160	; 0xf0f0f0f0
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     e1c:	4048      	eors	r0, r1
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     e1e:	ea84 14d4 	eor.w	r4, r4, r4, lsr #7
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     e22:	ea4e 0808 	orr.w	r8, lr, r8
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     e26:	ea89 0905 	eor.w	r9, r9, r5
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     e2a:	ea87 3e97 	eor.w	lr, r7, r7, lsr #14
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     e2e:	f004 14aa 	and.w	r4, r4, #11141290	; 0xaa00aa
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     e32:	ea80 10c1 	eor.w	r0, r0, r1, lsl #7
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     e36:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     e3a:	9906      	ldr	r1, [sp, #24]
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     e3c:	f64c 4ccc 	movw	ip, #52428	; 0xcccc
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     e40:	ea89 15c5 	eor.w	r5, r9, r5, lsl #7
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     e44:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     e48:	ea81 0904 	eor.w	r9, r1, r4
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     e4c:	ea0e 0c0c 	and.w	ip, lr, ip
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     e50:	9907      	ldr	r1, [sp, #28]
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     e52:	ea82 3e92 	eor.w	lr, r2, r2, lsr #14

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     e56:	ea89 14c4 	eor.w	r4, r9, r4, lsl #7
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     e5a:	ea87 090c 	eor.w	r9, r7, ip
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     e5e:	ea81 11d1 	eor.w	r1, r1, r1, lsr #7
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     e62:	f64c 47cc 	movw	r7, #52428	; 0xcccc

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     e66:	ea89 3c8c 	eor.w	ip, r9, ip, lsl #14
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     e6a:	ea0e 0707 	and.w	r7, lr, r7
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     e6e:	f001 11aa 	and.w	r1, r1, #11141290	; 0xaa00aa
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     e72:	ea85 3995 	eor.w	r9, r5, r5, lsr #14
     e76:	f64c 4ecc 	movw	lr, #52428	; 0xcccc
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     e7a:	ea86 0801 	eor.w	r8, r6, r1
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     e7e:	407a      	eors	r2, r7

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     e80:	ea09 0e0e 	and.w	lr, r9, lr

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
     e84:	f00c 360f 	and.w	r6, ip, #252645135	; 0xf0f0f0f
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     e88:	ea88 11c1 	eor.w	r1, r8, r1, lsl #7
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     e8c:	ea82 3287 	eor.w	r2, r2, r7, lsl #14

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     e90:	ea85 050e 	eor.w	r5, r5, lr
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     e94:	ea4f 181c 	mov.w	r8, ip, lsr #4
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     e98:	f64c 47cc 	movw	r7, #52428	; 0xcccc
  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
     e9c:	f002 3cf0 	and.w	ip, r2, #4042322160	; 0xf0f0f0f0
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     ea0:	ea80 3990 	eor.w	r9, r0, r0, lsr #14
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     ea4:	f008 380f 	and.w	r8, r8, #252645135	; 0xf0f0f0f
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     ea8:	ea85 358e 	eor.w	r5, r5, lr, lsl #14
     eac:	ea84 3e94 	eor.w	lr, r4, r4, lsr #14
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     eb0:	ea09 0707 	and.w	r7, r9, r7
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     eb4:	ea48 0c0c 	orr.w	ip, r8, ip
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     eb8:	f64c 48cc 	movw	r8, #52428	; 0xcccc
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     ebc:	0112      	lsls	r2, r2, #4
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     ebe:	4078      	eors	r0, r7

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     ec0:	ea0e 0808 	and.w	r8, lr, r8
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     ec4:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     ec8:	ea81 3e91 	eor.w	lr, r1, r1, lsr #14
     ecc:	f64c 4ccc 	movw	ip, #52428	; 0xcccc
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     ed0:	f002 32f0 	and.w	r2, r2, #4042322160	; 0xf0f0f0f0
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     ed4:	ea80 3087 	eor.w	r0, r0, r7, lsl #14
     ed8:	ea0e 0c0c 	and.w	ip, lr, ip

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     edc:	ea84 0408 	eor.w	r4, r4, r8
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     ee0:	4332      	orrs	r2, r6
  *((uint32_t*)(B+4)) = x;
     ee2:	092f      	lsrs	r7, r5, #4
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     ee4:	ea81 010c 	eor.w	r1, r1, ip

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     ee8:	ea84 3488 	eor.w	r4, r4, r8, lsl #14
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     eec:	9212      	str	r2, [sp, #72]	; 0x48
     eee:	0102      	lsls	r2, r0, #4
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     ef0:	ea81 3c8c 	eor.w	ip, r1, ip, lsl #14

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     ef4:	9e01      	ldr	r6, [sp, #4]
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     ef6:	f002 3ef0 	and.w	lr, r2, #4042322160	; 0xf0f0f0f0
  *((uint32_t*)(B+4)) = x;
     efa:	f007 370f 	and.w	r7, r7, #252645135	; 0xf0f0f0f
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     efe:	ea4f 120c 	mov.w	r2, ip, lsl #4
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
     f02:	f005 350f 	and.w	r5, r5, #252645135	; 0xf0f0f0f
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     f06:	0921      	lsrs	r1, r4, #4
  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
     f08:	f000 30f0 	and.w	r0, r0, #4042322160	; 0xf0f0f0f0
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     f0c:	f002 32f0 	and.w	r2, r2, #4042322160	; 0xf0f0f0f0
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
     f10:	f004 340f 	and.w	r4, r4, #252645135	; 0xf0f0f0f
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     f14:	4338      	orrs	r0, r7
  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
     f16:	f00c 3cf0 	and.w	ip, ip, #4042322160	; 0xf0f0f0f0
     f1a:	68b7      	ldr	r7, [r6, #8]
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     f1c:	ea4e 0505 	orr.w	r5, lr, r5
     f20:	4314      	orrs	r4, r2
     f22:	f996 e015 	ldrsb.w	lr, [r6, #21]
     f26:	4632      	mov	r2, r6
  *((uint32_t*)(B+4)) = x;
     f28:	f001 310f 	and.w	r1, r1, #252645135	; 0xf0f0f0f
     f2c:	9e03      	ldr	r6, [sp, #12]
     f2e:	3f01      	subs	r7, #1
     f30:	ea41 010c 	orr.w	r1, r1, ip
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane, uint8_t scale) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane, scale); }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getd(PixelController & pc) { return pc.d[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getscale(PixelController & pc) { return pc.mScale.raw[RO(SLOT)]; }
     f34:	f892 c013 	ldrb.w	ip, [r2, #19]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     f38:	4476      	add	r6, lr
     f3a:	9011      	str	r0, [sp, #68]	; 0x44
     f3c:	910f      	str	r1, [sp, #60]	; 0x3c
     f3e:	a90e      	add	r1, sp, #56	; 0x38
     f40:	46b6      	mov	lr, r6
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane, uint8_t scale) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane, scale); }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getd(PixelController & pc) { return pc.d[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getscale(PixelController & pc) { return pc.mScale.raw[RO(SLOT)]; }
     f42:	4616      	mov	r6, r2
     f44:	f10c 0c01 	add.w	ip, ip, #1
     f48:	460a      	mov	r2, r1

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     f4a:	f8c6 e000 	str.w	lr, [r6]
    for(uint32_t i = 8; i > 0;) {
     f4e:	2008      	movs	r0, #8
     f50:	60b7      	str	r7, [r6, #8]

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane, uint8_t scale) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane, scale); }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getd(PixelController & pc) { return pc.d[RO(SLOT)]; }
     f52:	f896 900d 	ldrb.w	r9, [r6, #13]
     f56:	9e02      	ldr	r6, [sp, #8]
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     f58:	9510      	str	r5, [sp, #64]	; 0x40
     f5a:	940e      	str	r4, [sp, #56]	; 0x38
      i--;
     f5c:	3801      	subs	r0, #1
      while(ARM_DWT_CYCCNT < next_mark);
     f5e:	f8da 1000 	ldr.w	r1, [sl]
     f62:	4559      	cmp	r1, fp
     f64:	d3fb      	bcc.n	f5e <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x82e>
      *FastPin<FIRST_PIN>::sport() = m_nWriteMask;
     f66:	6af1      	ldr	r1, [r6, #44]	; 0x2c
     f68:	4c1f      	ldr	r4, [pc, #124]	; (fe8 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x8b8>)
     f6a:	6021      	str	r1, [r4, #0]
      next_mark = ARM_DWT_CYCCNT + m_offsets[0];

      uint32_t out = (b2.bg[3][i] << 24) | (b2.bg[2][i] << 16) | (b2.bg[1][i] << 8) | b2.bg[0][i];

      out = ((~out) & m_nWriteMask);
     f6c:	7dd1      	ldrb	r1, [r2, #23]
     f6e:	7fd5      	ldrb	r5, [r2, #31]
     f70:	0409      	lsls	r1, r1, #16
     f72:	79d7      	ldrb	r7, [r2, #7]
     f74:	f892 800f 	ldrb.w	r8, [r2, #15]
     f78:	ea41 6505 	orr.w	r5, r1, r5, lsl #24
     f7c:	6af4      	ldr	r4, [r6, #44]	; 0x2c
     f7e:	ea45 0107 	orr.w	r1, r5, r7
    int x = 0;
    for(uint32_t i = 8; i > 0;) {
      i--;
      while(ARM_DWT_CYCCNT < next_mark);
      *FastPin<FIRST_PIN>::sport() = m_nWriteMask;
      next_mark = ARM_DWT_CYCCNT + m_offsets[0];
     f82:	4d1a      	ldr	r5, [pc, #104]	; (fec <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x8bc>)
     f84:	682f      	ldr	r7, [r5, #0]

      uint32_t out = (b2.bg[3][i] << 24) | (b2.bg[2][i] << 16) | (b2.bg[1][i] << 8) | b2.bg[0][i];

      out = ((~out) & m_nWriteMask);
     f86:	ea41 2508 	orr.w	r5, r1, r8, lsl #8
    int x = 0;
    for(uint32_t i = 8; i > 0;) {
      i--;
      while(ARM_DWT_CYCCNT < next_mark);
      *FastPin<FIRST_PIN>::sport() = m_nWriteMask;
      next_mark = ARM_DWT_CYCCNT + m_offsets[0];
     f8a:	6b71      	ldr	r1, [r6, #52]	; 0x34

      uint32_t out = (b2.bg[3][i] << 24) | (b2.bg[2][i] << 16) | (b2.bg[1][i] << 8) | b2.bg[0][i];

      out = ((~out) & m_nWriteMask);
     f8c:	ea24 0405 	bic.w	r4, r4, r5
     f90:	6bb5      	ldr	r5, [r6, #56]	; 0x38
    int x = 0;
    for(uint32_t i = 8; i > 0;) {
      i--;
      while(ARM_DWT_CYCCNT < next_mark);
      *FastPin<FIRST_PIN>::sport() = m_nWriteMask;
      next_mark = ARM_DWT_CYCCNT + m_offsets[0];
     f92:	eb07 0b01 	add.w	fp, r7, r1

      uint32_t out = (b2.bg[3][i] << 24) | (b2.bg[2][i] << 16) | (b2.bg[1][i] << 8) | b2.bg[0][i];

      out = ((~out) & m_nWriteMask);
      while((next_mark - ARM_DWT_CYCCNT) > m_offsets[1]);
     f96:	f8da 1000 	ldr.w	r1, [sl]
     f9a:	ebc1 010b 	rsb	r1, r1, fp
     f9e:	42a9      	cmp	r1, r5
     fa0:	d8f9      	bhi.n	f96 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x866>
      *FastPin<FIRST_PIN>::cport() = out;
     fa2:	4913      	ldr	r1, [pc, #76]	; (ff0 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x8c0>)
     fa4:	600c      	str	r4, [r1, #0]

      out = m_nWriteMask;
     fa6:	6af5      	ldr	r5, [r6, #44]	; 0x2c
     fa8:	6bf4      	ldr	r4, [r6, #60]	; 0x3c
      while((next_mark - ARM_DWT_CYCCNT) > m_offsets[2]);
     faa:	f8da 1000 	ldr.w	r1, [sl]
     fae:	ebc1 010b 	rsb	r1, r1, fp
     fb2:	42a1      	cmp	r1, r4
     fb4:	d8f9      	bhi.n	faa <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x87a>
      *FastPin<FIRST_PIN>::cport() = out;
     fb6:	490e      	ldr	r1, [pc, #56]	; (ff0 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x8c0>)
     fb8:	600d      	str	r5, [r1, #0]

      // Read and store up to two bytes
      if (x < m_nActualLanes) {
     fba:	f896 4028 	ldrb.w	r4, [r6, #40]	; 0x28
     fbe:	429c      	cmp	r4, r3
     fc0:	dd35      	ble.n	102e <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x8fe>
     fc2:	9901      	ldr	r1, [sp, #4]
        b.bytes[m_bitOffsets[x]] = pixels.template loadAndScale<PX>(pixels,x,d,scale);
     fc4:	18f5      	adds	r5, r6, r3
     fc6:	eb01 0783 	add.w	r7, r1, r3, lsl #2
     fca:	7e2d      	ldrb	r5, [r5, #24]
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }
     fcc:	69b9      	ldr	r1, [r7, #24]
     fce:	4471      	add	r1, lr
     fd0:	7849      	ldrb	r1, [r1, #1]

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & , uint8_t b, uint8_t d) { return b ? qadd8(b,d) : 0; }
     fd2:	b179      	cbz	r1, ff4 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x8c4>
/// @param j - second byte to add
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
     fd4:	4449      	add	r1, r9
    if( t > 255) t = 255;
     fd6:	29ff      	cmp	r1, #255	; 0xff
     fd8:	bfa8      	it	ge
     fda:	21ff      	movge	r1, #255	; 0xff
     fdc:	fb01 f10c 	mul.w	r1, r1, ip
     fe0:	f3c1 2107 	ubfx	r1, r1, #8, #8
     fe4:	e006      	b.n	ff4 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x8c4>
     fe6:	bf00      	nop
     fe8:	42000084 	.word	0x42000084
     fec:	e0001004 	.word	0xe0001004
     ff0:	42000088 	.word	0x42000088
     ff4:	f10d 0858 	add.w	r8, sp, #88	; 0x58
     ff8:	4445      	add	r5, r8
        x++;
     ffa:	f103 0801 	add.w	r8, r3, #1
        if (x < m_nActualLanes) {
     ffe:	4544      	cmp	r4, r8
      while((next_mark - ARM_DWT_CYCCNT) > m_offsets[2]);
      *FastPin<FIRST_PIN>::cport() = out;

      // Read and store up to two bytes
      if (x < m_nActualLanes) {
        b.bytes[m_bitOffsets[x]] = pixels.template loadAndScale<PX>(pixels,x,d,scale);
    1000:	f805 1c40 	strb.w	r1, [r5, #-64]
        x++;
        if (x < m_nActualLanes) {
    1004:	dd25      	ble.n	1052 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x922>
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }
    1006:	69f9      	ldr	r1, [r7, #28]
          b.bytes[m_bitOffsets[x]] = pixels.template loadAndScale<PX>(pixels,x,d,scale);
    1008:	44b0      	add	r8, r6
    100a:	4471      	add	r1, lr
    100c:	f898 4018 	ldrb.w	r4, [r8, #24]
    1010:	7849      	ldrb	r1, [r1, #1]

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & , uint8_t b, uint8_t d) { return b ? qadd8(b,d) : 0; }
    1012:	b139      	cbz	r1, 1024 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x8f4>
/// @param j - second byte to add
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
    1014:	4449      	add	r1, r9
    if( t > 255) t = 255;
    1016:	29ff      	cmp	r1, #255	; 0xff
    1018:	bfa8      	it	ge
    101a:	21ff      	movge	r1, #255	; 0xff
    101c:	fb0c f101 	mul.w	r1, ip, r1
    1020:	f3c1 2107 	ubfx	r1, r1, #8, #8
    1024:	ad16      	add	r5, sp, #88	; 0x58
          x++;
    1026:	3302      	adds	r3, #2
      // Read and store up to two bytes
      if (x < m_nActualLanes) {
        b.bytes[m_bitOffsets[x]] = pixels.template loadAndScale<PX>(pixels,x,d,scale);
        x++;
        if (x < m_nActualLanes) {
          b.bytes[m_bitOffsets[x]] = pixels.template loadAndScale<PX>(pixels,x,d,scale);
    1028:	442c      	add	r4, r5
    102a:	f804 1c40 	strb.w	r1, [r4, #-64]
    102e:	3a01      	subs	r2, #1

    register uint8_t d = pixels.template getd<PX>(pixels);
    register uint8_t scale = pixels.template getscale<PX>(pixels);

    int x = 0;
    for(uint32_t i = 8; i > 0;) {
    1030:	2800      	cmp	r0, #0
    1032:	d193      	bne.n	f5c <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x82c>
    1034:	9602      	str	r6, [sp, #8]

			// Write third byte
			writeBits<8+XTRA0,0>(next_mark, b0, allpixels);

			#if (FASTLED_ALLOW_INTERRUPTS == 1)
			sei();
    1036:	b662      	cpsie	i
    m_offsets[2] = _FASTLED_NS_TO_DWT(T3);
    uint32_t wait_off = _FASTLED_NS_TO_DWT((WAIT_TIME-INTERRUPT_THRESHOLD));

    uint32_t next_mark = ARM_DWT_CYCCNT + m_offsets[0];

    while(allpixels.has(1)) {
    1038:	9b01      	ldr	r3, [sp, #4]
    103a:	689b      	ldr	r3, [r3, #8]
    103c:	2b00      	cmp	r3, #0
    103e:	f73f abe2 	bgt.w	806 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0xd6>
			#if (FASTLED_ALLOW_INTERRUPTS == 1)
			sei();
			#endif
    }

    sei();
    1042:	b662      	cpsie	i

    return ARM_DWT_CYCCNT - start;
    1044:	4b09      	ldr	r3, [pc, #36]	; (106c <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x93c>)
    1046:	6818      	ldr	r0, [r3, #0]
    1048:	9b05      	ldr	r3, [sp, #20]
    104a:	1ac0      	subs	r0, r0, r3
  }
    104c:	b017      	add	sp, #92	; 0x5c
    104e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

      // Read and store up to two bytes
      if (x < m_nActualLanes) {
        b.bytes[m_bitOffsets[x]] = pixels.template loadAndScale<PX>(pixels,x,d,scale);
        x++;
        if (x < m_nActualLanes) {
    1052:	4643      	mov	r3, r8
    1054:	e7eb      	b.n	102e <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x8fe>
    1056:	4648      	mov	r0, r9
    1058:	e540      	b.n	adc <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x3ac>
    105a:	464b      	mov	r3, r9
    105c:	e689      	b.n	d72 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x642>
      allpixels.stepDithering();
      #if (FASTLED_ALLOW_INTERRUPTS == 1)
			cli();
			// if interrupts took longer than 45µs, punt on the current frame
			if(ARM_DWT_CYCCNT > next_mark) {
				if((ARM_DWT_CYCCNT-next_mark) > wait_off) { sei(); return ARM_DWT_CYCCNT - start; }
    105e:	b662      	cpsie	i
    1060:	6810      	ldr	r0, [r2, #0]
    1062:	9b05      	ldr	r3, [sp, #20]
    1064:	1ac0      	subs	r0, r0, r3
    }

    sei();

    return ARM_DWT_CYCCNT - start;
  }
    1066:	b017      	add	sp, #92	; 0x5c
    1068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    106c:	e0001004 	.word	0xe0001004

00001070 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 1ul>&)>:
    m_nOutBlocks = (m_nHighBit + 8)/8;

  }


  virtual void showPixels(PixelController<RGB_ORDER, LANES, __FL_T4_MASK> & pixels) {
    1070:	b538      	push	{r3, r4, r5, lr}
    1072:	4604      	mov	r4, r0
    1074:	460d      	mov	r5, r1

	void wait() {
		uint16_t diff;
		do {
			diff = (micros() & 0xFFFF) - mLastMicros;
    1076:	f000 fdb5 	bl	1be4 <micros>
public:
	CMinWait() { mLastMicros = 0; }

	void wait() {
		uint16_t diff;
		do {
    107a:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
    107e:	1ac0      	subs	r0, r0, r3
    1080:	b280      	uxth	r0, r0
    1082:	2831      	cmp	r0, #49	; 0x31
    1084:	d9f7      	bls.n	1076 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 1ul>&)+0x6>
		uint32_t clocks = showRGBInternal(pixels);
		// Adjust the timer
		long microsTaken = CLKS_TO_MICROS(clocks);
		MS_COUNTER += (1 + (microsTaken / 1000));
		#else
      showRGBInternal(pixels);
    1086:	4629      	mov	r1, r5
    1088:	4620      	mov	r0, r4
    108a:	f7ff fb51 	bl	730 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)>
			diff = (micros() & 0xFFFF) - mLastMicros;
		} while(diff < WAIT);
	}

	void mark() { mLastMicros = micros() & 0xFFFF; }
    108e:	f000 fda9 	bl	1be4 <micros>
    1092:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40
    1096:	bd38      	pop	{r3, r4, r5, pc}

00001098 <CPixelLEDController<(EOrder)66, 1, 1ul>::showColor(CRGB const&, int, CRGB)>:

  /// set all the leds on the controller to a given color
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    1098:	b5f0      	push	{r4, r5, r6, r7, lr}
    109a:	4604      	mov	r4, r0
    109c:	b089      	sub	sp, #36	; 0x24

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    109e:	785d      	ldrb	r5, [r3, #1]
        b = rhs.b;
    10a0:	7898      	ldrb	r0, [r3, #2]
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
    10a2:	9101      	str	r1, [sp, #4]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    10a4:	7819      	ldrb	r1, [r3, #0]
    10a6:	7ca3      	ldrb	r3, [r4, #18]
    10a8:	9202      	str	r2, [sp, #8]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
    10aa:	2b01      	cmp	r3, #1
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
    10ac:	9203      	str	r2, [sp, #12]
    10ae:	f88d 1016 	strb.w	r1, [sp, #22]
        g = rhs.g;
    10b2:	f88d 5017 	strb.w	r5, [sp, #23]
        b = rhs.b;
    10b6:	f88d 0018 	strb.w	r0, [sp, #24]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
    10ba:	d027      	beq.n	110c <CPixelLEDController<(EOrder)66, 1, 1ul>::showColor(CRGB const&, int, CRGB)+0x74>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
    10bc:	2300      	movs	r3, #0
    10be:	f88d 3015 	strb.w	r3, [sp, #21]
    10c2:	f88d 3014 	strb.w	r3, [sp, #20]
    10c6:	f88d 3013 	strb.w	r3, [sp, #19]
    10ca:	f88d 3012 	strb.w	r3, [sp, #18]
    10ce:	f88d 3011 	strb.w	r3, [sp, #17]
    10d2:	f88d 3010 	strb.w	r3, [sp, #16]
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
    10d6:	6822      	ldr	r2, [r4, #0]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
    10d8:	2300      	movs	r3, #0
    10da:	492a      	ldr	r1, [pc, #168]	; (1184 <CPixelLEDController<(EOrder)66, 1, 1ul>::showColor(CRGB const&, int, CRGB)+0xec>)
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
    10dc:	6992      	ldr	r2, [r2, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
    10de:	f88d 3019 	strb.w	r3, [sp, #25]
    10e2:	428a      	cmp	r2, r1
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
    10e4:	9307      	str	r3, [sp, #28]
    10e6:	d148      	bne.n	117a <CPixelLEDController<(EOrder)66, 1, 1ul>::showColor(CRGB const&, int, CRGB)+0xe2>
	CMinWait() { mLastMicros = 0; }

	void wait() {
		uint16_t diff;
		do {
			diff = (micros() & 0xFFFF) - mLastMicros;
    10e8:	f000 fd7c 	bl	1be4 <micros>
public:
	CMinWait() { mLastMicros = 0; }

	void wait() {
		uint16_t diff;
		do {
    10ec:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
    10f0:	1ac0      	subs	r0, r0, r3
    10f2:	b280      	uxth	r0, r0
    10f4:	2831      	cmp	r0, #49	; 0x31
    10f6:	d9f7      	bls.n	10e8 <CPixelLEDController<(EOrder)66, 1, 1ul>::showColor(CRGB const&, int, CRGB)+0x50>
    10f8:	a901      	add	r1, sp, #4
    10fa:	4620      	mov	r0, r4
    10fc:	f7ff fb18 	bl	730 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)>
			diff = (micros() & 0xFFFF) - mLastMicros;
		} while(diff < WAIT);
	}

	void mark() { mLastMicros = micros() & 0xFFFF; }
    1100:	f000 fd70 	bl	1be4 <micros>
    1104:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
  }
    1108:	b009      	add	sp, #36	; 0x24
    110a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
    110c:	4a1e      	ldr	r2, [pc, #120]	; (1188 <CPixelLEDController<(EOrder)66, 1, 1ul>::showColor(CRGB const&, int, CRGB)+0xf0>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
    110e:	7813      	ldrb	r3, [r2, #0]
    1110:	3301      	adds	r3, #1
    1112:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
    1116:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
    111a:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
    111c:	bf14      	ite	ne
    111e:	2280      	movne	r2, #128	; 0x80
    1120:	2200      	moveq	r2, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
    1122:	0798      	lsls	r0, r3, #30
    1124:	d502      	bpl.n	112c <CPixelLEDController<(EOrder)66, 1, 1ul>::showColor(CRGB const&, int, CRGB)+0x94>
    1126:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    112a:	b2d2      	uxtb	r2, r2
                if(R & 0x04) { Q |= 0x20; }
    112c:	075b      	lsls	r3, r3, #29
    112e:	f10d 0716 	add.w	r7, sp, #22
    1132:	f10d 0313 	add.w	r3, sp, #19
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
    1136:	f44f 7e80 	mov.w	lr, #256	; 0x100

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
                if(R & 0x04) { Q |= 0x20; }
    113a:	bf48      	it	mi
    113c:	f042 0220 	orrmi.w	r2, r2, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
    1140:	3210      	adds	r2, #16
    1142:	b2d2      	uxtb	r2, r2
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
    1144:	b1a9      	cbz	r1, 1172 <CPixelLEDController<(EOrder)66, 1, 1ul>::showColor(CRGB const&, int, CRGB)+0xda>
    1146:	fb9e f1f1 	sdiv	r1, lr, r1
    114a:	b2c9      	uxtb	r1, r1
    114c:	1c48      	adds	r0, r1, #1
    114e:	b2c0      	uxtb	r0, r0
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    1150:	fb00 2502 	mla	r5, r0, r2, r2
    1154:	7018      	strb	r0, [r3, #0]
    1156:	122d      	asrs	r5, r5, #8
    1158:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
    115a:	b105      	cbz	r5, 115e <CPixelLEDController<(EOrder)66, 1, 1ul>::showColor(CRGB const&, int, CRGB)+0xc6>
    115c:	3e01      	subs	r6, #1
    115e:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
    1162:	b100      	cbz	r0, 1166 <CPixelLEDController<(EOrder)66, 1, 1ul>::showColor(CRGB const&, int, CRGB)+0xce>
    1164:	7019      	strb	r1, [r3, #0]
    1166:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
    1168:	42bb      	cmp	r3, r7
    116a:	d0b4      	beq.n	10d6 <CPixelLEDController<(EOrder)66, 1, 1ul>::showColor(CRGB const&, int, CRGB)+0x3e>
    116c:	78d9      	ldrb	r1, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
    116e:	2900      	cmp	r1, #0
    1170:	d1e9      	bne.n	1146 <CPixelLEDController<(EOrder)66, 1, 1ul>::showColor(CRGB const&, int, CRGB)+0xae>
    1172:	7019      	strb	r1, [r3, #0]
                    d[i] = scale8(Q, e[i]);
    1174:	f803 1c03 	strb.w	r1, [r3, #-3]
    1178:	e7f5      	b.n	1166 <CPixelLEDController<(EOrder)66, 1, 1ul>::showColor(CRGB const&, int, CRGB)+0xce>
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
    117a:	4620      	mov	r0, r4
    117c:	a901      	add	r1, sp, #4
    117e:	4790      	blx	r2
  }
    1180:	b009      	add	sp, #36	; 0x24
    1182:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1184:	00001071 	.word	0x00001071
    1188:	200122ec 	.word	0x200122ec

0000118c <CPixelLEDController<(EOrder)66, 1, 1ul>::show(CRGB const*, int, CRGB)>:

/// write the passed in rgb data out to the leds managed by this controller
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    118c:	b5f0      	push	{r4, r5, r6, r7, lr}
    118e:	4604      	mov	r4, r0
    1190:	b089      	sub	sp, #36	; 0x24

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    1192:	785d      	ldrb	r5, [r3, #1]
        b = rhs.b;
    1194:	7898      	ldrb	r0, [r3, #2]
            mData += skip;
            mAdvance = (advance) ? 3+skip : 0;
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
    1196:	9101      	str	r1, [sp, #4]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1198:	7819      	ldrb	r1, [r3, #0]
    119a:	7ca3      	ldrb	r3, [r4, #18]
    119c:	9202      	str	r2, [sp, #8]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
    119e:	2b01      	cmp	r3, #1
            mData += skip;
            mAdvance = (advance) ? 3+skip : 0;
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
    11a0:	9203      	str	r2, [sp, #12]
    11a2:	f88d 1016 	strb.w	r1, [sp, #22]
        g = rhs.g;
    11a6:	f88d 5017 	strb.w	r5, [sp, #23]
        b = rhs.b;
    11aa:	f88d 0018 	strb.w	r0, [sp, #24]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
    11ae:	d028      	beq.n	1202 <CPixelLEDController<(EOrder)66, 1, 1ul>::show(CRGB const*, int, CRGB)+0x76>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
    11b0:	2300      	movs	r3, #0
    11b2:	f88d 3015 	strb.w	r3, [sp, #21]
    11b6:	f88d 3014 	strb.w	r3, [sp, #20]
    11ba:	f88d 3013 	strb.w	r3, [sp, #19]
    11be:	f88d 3012 	strb.w	r3, [sp, #18]
    11c2:	f88d 3011 	strb.w	r3, [sp, #17]
    11c6:	f88d 3010 	strb.w	r3, [sp, #16]
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
    11ca:	6823      	ldr	r3, [r4, #0]
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
    11cc:	2003      	movs	r0, #3
    11ce:	4a2b      	ldr	r2, [pc, #172]	; (127c <CPixelLEDController<(EOrder)66, 1, 1ul>::show(CRGB const*, int, CRGB)+0xf0>)
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
    11d0:	2100      	movs	r1, #0
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
    11d2:	699b      	ldr	r3, [r3, #24]
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
    11d4:	f88d 0019 	strb.w	r0, [sp, #25]
    11d8:	4293      	cmp	r3, r2
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
    11da:	9107      	str	r1, [sp, #28]
    11dc:	d148      	bne.n	1270 <CPixelLEDController<(EOrder)66, 1, 1ul>::show(CRGB const*, int, CRGB)+0xe4>
	CMinWait() { mLastMicros = 0; }

	void wait() {
		uint16_t diff;
		do {
			diff = (micros() & 0xFFFF) - mLastMicros;
    11de:	f000 fd01 	bl	1be4 <micros>
public:
	CMinWait() { mLastMicros = 0; }

	void wait() {
		uint16_t diff;
		do {
    11e2:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
    11e6:	1ac0      	subs	r0, r0, r3
    11e8:	b280      	uxth	r0, r0
    11ea:	2831      	cmp	r0, #49	; 0x31
    11ec:	d9f7      	bls.n	11de <CPixelLEDController<(EOrder)66, 1, 1ul>::show(CRGB const*, int, CRGB)+0x52>
    11ee:	a901      	add	r1, sp, #4
    11f0:	4620      	mov	r0, r4
    11f2:	f7ff fa9d 	bl	730 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)>
			diff = (micros() & 0xFFFF) - mLastMicros;
		} while(diff < WAIT);
	}

	void mark() { mLastMicros = micros() & 0xFFFF; }
    11f6:	f000 fcf5 	bl	1be4 <micros>
    11fa:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
  }
    11fe:	b009      	add	sp, #36	; 0x24
    1200:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
    1202:	4a1f      	ldr	r2, [pc, #124]	; (1280 <CPixelLEDController<(EOrder)66, 1, 1ul>::show(CRGB const*, int, CRGB)+0xf4>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
    1204:	7813      	ldrb	r3, [r2, #0]
    1206:	3301      	adds	r3, #1
    1208:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
    120c:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
    1210:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
    1212:	bf14      	ite	ne
    1214:	2280      	movne	r2, #128	; 0x80
    1216:	2200      	moveq	r2, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
    1218:	0798      	lsls	r0, r3, #30
    121a:	d502      	bpl.n	1222 <CPixelLEDController<(EOrder)66, 1, 1ul>::show(CRGB const*, int, CRGB)+0x96>
    121c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    1220:	b2d2      	uxtb	r2, r2
                if(R & 0x04) { Q |= 0x20; }
    1222:	075b      	lsls	r3, r3, #29
    1224:	f10d 0716 	add.w	r7, sp, #22
    1228:	f10d 0313 	add.w	r3, sp, #19
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
    122c:	f44f 7e80 	mov.w	lr, #256	; 0x100

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
                if(R & 0x04) { Q |= 0x20; }
    1230:	bf48      	it	mi
    1232:	f042 0220 	orrmi.w	r2, r2, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
    1236:	3210      	adds	r2, #16
    1238:	b2d2      	uxtb	r2, r2
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
    123a:	b1a9      	cbz	r1, 1268 <CPixelLEDController<(EOrder)66, 1, 1ul>::show(CRGB const*, int, CRGB)+0xdc>
    123c:	fb9e f1f1 	sdiv	r1, lr, r1
    1240:	b2c9      	uxtb	r1, r1
    1242:	1c48      	adds	r0, r1, #1
    1244:	b2c0      	uxtb	r0, r0
    1246:	fb00 2502 	mla	r5, r0, r2, r2
    124a:	7018      	strb	r0, [r3, #0]
    124c:	122d      	asrs	r5, r5, #8
    124e:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
    1250:	b105      	cbz	r5, 1254 <CPixelLEDController<(EOrder)66, 1, 1ul>::show(CRGB const*, int, CRGB)+0xc8>
    1252:	3e01      	subs	r6, #1
    1254:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
    1258:	b100      	cbz	r0, 125c <CPixelLEDController<(EOrder)66, 1, 1ul>::show(CRGB const*, int, CRGB)+0xd0>
    125a:	7019      	strb	r1, [r3, #0]
    125c:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
    125e:	42bb      	cmp	r3, r7
    1260:	d0b3      	beq.n	11ca <CPixelLEDController<(EOrder)66, 1, 1ul>::show(CRGB const*, int, CRGB)+0x3e>
    1262:	78d9      	ldrb	r1, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
    1264:	2900      	cmp	r1, #0
    1266:	d1e9      	bne.n	123c <CPixelLEDController<(EOrder)66, 1, 1ul>::show(CRGB const*, int, CRGB)+0xb0>
    1268:	7019      	strb	r1, [r3, #0]
                    d[i] = scale8(Q, e[i]);
    126a:	f803 1c03 	strb.w	r1, [r3, #-3]
    126e:	e7f5      	b.n	125c <CPixelLEDController<(EOrder)66, 1, 1ul>::show(CRGB const*, int, CRGB)+0xd0>
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
    1270:	4620      	mov	r0, r4
    1272:	a901      	add	r1, sp, #4
    1274:	4798      	blx	r3
  }
    1276:	b009      	add	sp, #36	; 0x24
    1278:	bdf0      	pop	{r4, r5, r6, r7, pc}
    127a:	bf00      	nop
    127c:	00001071 	.word	0x00001071
    1280:	200122ec 	.word	0x200122ec

00001284 <CLEDController::clearLeds(int)>:

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
    1284:	b5f0      	push	{r4, r5, r6, r7, lr}
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1286:	2300      	movs	r3, #0
    1288:	b08b      	sub	sp, #44	; 0x2c
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
    128a:	6805      	ldr	r5, [r0, #0]
    128c:	4a45      	ldr	r2, [pc, #276]	; (13a4 <CLEDController::clearLeds(int)+0x120>)
    128e:	f88d 3004 	strb.w	r3, [sp, #4]
    1292:	f88d 3005 	strb.w	r3, [sp, #5]
    1296:	f88d 3006 	strb.w	r3, [sp, #6]
    129a:	682e      	ldr	r6, [r5, #0]
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
    129c:	f88d 3008 	strb.w	r3, [sp, #8]
    12a0:	4296      	cmp	r6, r2
    12a2:	f88d 3009 	strb.w	r3, [sp, #9]
    12a6:	f88d 300a 	strb.w	r3, [sp, #10]
    12aa:	d170      	bne.n	138e <CLEDController::clearLeds(int)+0x10a>
    12ac:	4604      	mov	r4, r0
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
    12ae:	a801      	add	r0, sp, #4
    12b0:	9104      	str	r1, [sp, #16]
    12b2:	7ca2      	ldrb	r2, [r4, #18]
    12b4:	9105      	str	r1, [sp, #20]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
    12b6:	2a01      	cmp	r2, #1
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    12b8:	f88d 301e 	strb.w	r3, [sp, #30]
        g = rhs.g;
    12bc:	f88d 301f 	strb.w	r3, [sp, #31]
        b = rhs.b;
    12c0:	f88d 3020 	strb.w	r3, [sp, #32]
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
    12c4:	9003      	str	r0, [sp, #12]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
    12c6:	d025      	beq.n	1314 <CLEDController::clearLeds(int)+0x90>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
    12c8:	f88d 301d 	strb.w	r3, [sp, #29]
    12cc:	f88d 301c 	strb.w	r3, [sp, #28]
    12d0:	f88d 301b 	strb.w	r3, [sp, #27]
    12d4:	f88d 301a 	strb.w	r3, [sp, #26]
    12d8:	f88d 3019 	strb.w	r3, [sp, #25]
    12dc:	f88d 3018 	strb.w	r3, [sp, #24]
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
    12e0:	69aa      	ldr	r2, [r5, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
    12e2:	2300      	movs	r3, #0
    12e4:	4930      	ldr	r1, [pc, #192]	; (13a8 <CLEDController::clearLeds(int)+0x124>)
    12e6:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    12ea:	428a      	cmp	r2, r1
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
    12ec:	9309      	str	r3, [sp, #36]	; 0x24
    12ee:	d154      	bne.n	139a <CLEDController::clearLeds(int)+0x116>
	CMinWait() { mLastMicros = 0; }

	void wait() {
		uint16_t diff;
		do {
			diff = (micros() & 0xFFFF) - mLastMicros;
    12f0:	f000 fc78 	bl	1be4 <micros>
public:
	CMinWait() { mLastMicros = 0; }

	void wait() {
		uint16_t diff;
		do {
    12f4:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
    12f8:	1ac0      	subs	r0, r0, r3
    12fa:	b280      	uxth	r0, r0
    12fc:	2831      	cmp	r0, #49	; 0x31
    12fe:	d9f7      	bls.n	12f0 <CLEDController::clearLeds(int)+0x6c>
    1300:	a903      	add	r1, sp, #12
    1302:	4620      	mov	r0, r4
    1304:	f7ff fa14 	bl	730 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)>
			diff = (micros() & 0xFFFF) - mLastMicros;
		} while(diff < WAIT);
	}

	void mark() { mLastMicros = micros() & 0xFFFF; }
    1308:	f000 fc6c 	bl	1be4 <micros>
    130c:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
    1310:	b00b      	add	sp, #44	; 0x2c
    1312:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
    1314:	4a25      	ldr	r2, [pc, #148]	; (13ac <CLEDController::clearLeds(int)+0x128>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
    1316:	7813      	ldrb	r3, [r2, #0]
    1318:	3301      	adds	r3, #1
    131a:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
    131e:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
    1322:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
    1324:	bf14      	ite	ne
    1326:	2180      	movne	r1, #128	; 0x80
    1328:	2100      	moveq	r1, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
    132a:	079a      	lsls	r2, r3, #30
    132c:	d502      	bpl.n	1334 <CLEDController::clearLeds(int)+0xb0>
    132e:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    1332:	b2c9      	uxtb	r1, r1
                if(R & 0x04) { Q |= 0x20; }
    1334:	075b      	lsls	r3, r3, #29
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
    1336:	f04f 0200 	mov.w	r2, #0
    133a:	f10d 031b 	add.w	r3, sp, #27
    133e:	f10d 071e 	add.w	r7, sp, #30

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
                if(R & 0x04) { Q |= 0x20; }
    1342:	bf48      	it	mi
    1344:	f041 0120 	orrmi.w	r1, r1, #32
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
    1348:	f44f 7e80 	mov.w	lr, #256	; 0x100
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
    134c:	3110      	adds	r1, #16
    134e:	b2c9      	uxtb	r1, r1
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
    1350:	b1aa      	cbz	r2, 137e <CLEDController::clearLeds(int)+0xfa>
    1352:	fb9e f2f2 	sdiv	r2, lr, r2
    1356:	b2d2      	uxtb	r2, r2
    1358:	1c50      	adds	r0, r2, #1
    135a:	b2c0      	uxtb	r0, r0
    135c:	fb00 1501 	mla	r5, r0, r1, r1
    1360:	7018      	strb	r0, [r3, #0]
    1362:	122d      	asrs	r5, r5, #8
    1364:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
    1366:	b105      	cbz	r5, 136a <CLEDController::clearLeds(int)+0xe6>
    1368:	3e01      	subs	r6, #1
    136a:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
    136e:	b100      	cbz	r0, 1372 <CLEDController::clearLeds(int)+0xee>
    1370:	701a      	strb	r2, [r3, #0]
    1372:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
    1374:	429f      	cmp	r7, r3
    1376:	d008      	beq.n	138a <CLEDController::clearLeds(int)+0x106>
    1378:	78da      	ldrb	r2, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
    137a:	2a00      	cmp	r2, #0
    137c:	d1e9      	bne.n	1352 <CLEDController::clearLeds(int)+0xce>
    137e:	701a      	strb	r2, [r3, #0]
    1380:	3301      	adds	r3, #1
                    d[i] = scale8(Q, e[i]);
    1382:	f803 2c04 	strb.w	r2, [r3, #-4]
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
    1386:	429f      	cmp	r7, r3
    1388:	d1f6      	bne.n	1378 <CLEDController::clearLeds(int)+0xf4>
    138a:	6825      	ldr	r5, [r4, #0]
    138c:	e7a8      	b.n	12e0 <CLEDController::clearLeds(int)+0x5c>
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
    138e:	460a      	mov	r2, r1
    1390:	ab02      	add	r3, sp, #8
    1392:	a901      	add	r1, sp, #4
    1394:	47b0      	blx	r6

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
    1396:	b00b      	add	sp, #44	; 0x2c
    1398:	bdf0      	pop	{r4, r5, r6, r7, pc}
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
    139a:	4620      	mov	r0, r4
    139c:	a903      	add	r1, sp, #12
    139e:	4790      	blx	r2

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
    13a0:	b00b      	add	sp, #44	; 0x2c
    13a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    13a4:	00001099 	.word	0x00001099
    13a8:	00001071 	.word	0x00001071
    13ac:	200122ec 	.word	0x200122ec

000013b0 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>:
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
    13b0:	4804      	ldr	r0, [pc, #16]	; (13c4 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x14>)
    13b2:	6802      	ldr	r2, [r0, #0]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    13b4:	4411      	add	r1, r2
    13b6:	e001      	b.n	13bc <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0xc>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    13b8:	4299      	cmp	r1, r3
    13ba:	d302      	bcc.n	13c2 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x12>
    13bc:	6803      	ldr	r3, [r0, #0]
    13be:	429a      	cmp	r2, r3
    13c0:	d9fa      	bls.n	13b8 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x8>
    13c2:	4770      	bx	lr
    13c4:	20013d54 	.word	0x20013d54

000013c8 <VisualMicroDebug::outPacketStart(bool)>:
	return outPacketStart(false);
}


bool VisualMicroDebug::outPacketStart(bool noWait)
{
    13c8:	b410      	push	{r4}
    13ca:	4a0c      	ldr	r2, [pc, #48]	; (13fc <VisualMicroDebug::outPacketStart(bool)+0x34>)
    13cc:	4604      	mov	r4, r0
	yield();
#endif


#if defined(VM_DEBUG_BANDWIDTH_THROTTLE_MS) //&& (VM_DBT != VM_DBT_NET_UDP)
	if (!noWait)
    13ce:	b971      	cbnz	r1, 13ee <VisualMicroDebug::outPacketStart(bool)+0x26>
	{

		unsigned long ms_wait;
		ms_wait = (DBG_Millis() - lastPacketMS);
    13d0:	6841      	ldr	r1, [r0, #4]
    13d2:	6813      	ldr	r3, [r2, #0]
    13d4:	1a59      	subs	r1, r3, r1
		if (ms_wait < VM_DEBUG_BANDWIDTH_THROTTLE_MS)
    13d6:	2931      	cmp	r1, #49	; 0x31
    13d8:	d809      	bhi.n	13ee <VisualMicroDebug::outPacketStart(bool)+0x26>
    13da:	6810      	ldr	r0, [r2, #0]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    13dc:	f100 0332 	add.w	r3, r0, #50	; 0x32
    13e0:	1a59      	subs	r1, r3, r1
    13e2:	e001      	b.n	13e8 <VisualMicroDebug::outPacketStart(bool)+0x20>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    13e4:	4299      	cmp	r1, r3
    13e6:	d302      	bcc.n	13ee <VisualMicroDebug::outPacketStart(bool)+0x26>
    13e8:	6813      	ldr	r3, [r2, #0]
    13ea:	4298      	cmp	r0, r3
    13ec:	d9fa      	bls.n	13e4 <VisualMicroDebug::outPacketStart(bool)+0x1c>
    13ee:	6813      	ldr	r3, [r2, #0]
	transport->beginPacket();
#endif
#endif

	return true;
}
    13f0:	2001      	movs	r0, #1
			//DBG_YieldAndWait(3)
		//}
	}
	//XXX: this should really be after packet end!
	//1501 for cosa - lastPacketMS=millis();
	lastPacketMS = DBG_Millis();
    13f2:	6063      	str	r3, [r4, #4]
	transport->beginPacket();
#endif
#endif

	return true;
}
    13f4:	f85d 4b04 	ldr.w	r4, [sp], #4
    13f8:	4770      	bx	lr
    13fa:	bf00      	nop
    13fc:	20013d54 	.word	0x20013d54

00001400 <VisualMicroDebug::outPacketEnd()>:
    1400:	4770      	bx	lr
    1402:	bf00      	nop

00001404 <VisualMicroDebug::begin(unsigned long)>:
{

	//todo: detect usb type ports that need a delay
	//don't wait for the port unless we add a timeout and disable debug. because we might be discntected
	//todo: see if esp can handle this delay wuith wifi also connecting!
	delay(1000);
    1404:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    1408:	f000 bb86 	b.w	1b18 <delay>

0000140c <VisualMicroDebug::init(unsigned long)>:
	vmdebug.init();
	vmdebug.stats();
#endif


	baudRate = 0L; //gets a value later if required, only used by cosa for a re-begin!
    140c:	2300      	movs	r3, #0
    140e:	6443      	str	r3, [r0, #68]	; 0x44

	lastPacketMS = 0L;
    1410:	6043      	str	r3, [r0, #4]

	//note: a delay at start causes esp8266 wifi to fail to connect!!
	//		the delay can also be switched off via board/platform.txt property=
	if (delayMs > 0)
    1412:	b141      	cbz	r1, 1426 <VisualMicroDebug::init(unsigned long)+0x1a>
    1414:	4804      	ldr	r0, [pc, #16]	; (1428 <VisualMicroDebug::init(unsigned long)+0x1c>)
    1416:	6802      	ldr	r2, [r0, #0]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    1418:	4411      	add	r1, r2
    141a:	e001      	b.n	1420 <VisualMicroDebug::init(unsigned long)+0x14>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    141c:	4299      	cmp	r1, r3
    141e:	d302      	bcc.n	1426 <VisualMicroDebug::init(unsigned long)+0x1a>
    1420:	6803      	ldr	r3, [r0, #0]
    1422:	429a      	cmp	r2, r3
    1424:	d9fa      	bls.n	141c <VisualMicroDebug::init(unsigned long)+0x10>
    1426:	4770      	bx	lr
    1428:	20013d54 	.word	0x20013d54

0000142c <VisualMicroDebug::sendContinuedACK(unsigned char)>:
}
#endif


void VisualMicroDebug::sendContinuedACK(uint8_t breakPointId)
{
    142c:	b538      	push	{r3, r4, r5, lr}
    142e:	4c0f      	ldr	r4, [pc, #60]	; (146c <VisualMicroDebug::sendContinuedACK(unsigned char)+0x40>)
    1430:	460d      	mov	r5, r1
    1432:	2106      	movs	r1, #6
    1434:	6823      	ldr	r3, [r4, #0]
			//DBG_YieldAndWait(3)
		//}
	}
	//XXX: this should really be after packet end!
	//1501 for cosa - lastPacketMS=millis();
	lastPacketMS = DBG_Millis();
    1436:	6043      	str	r3, [r0, #4]
    1438:	480d      	ldr	r0, [pc, #52]	; (1470 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x44>)
    143a:	f001 fc77 	bl	2d2c <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    143e:	220a      	movs	r2, #10
    1440:	2300      	movs	r3, #0
    1442:	4629      	mov	r1, r5
    1444:	480b      	ldr	r0, [pc, #44]	; (1474 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x48>)
    1446:	f001 fd3f 	bl	2ec8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    144a:	2106      	movs	r1, #6
    144c:	480a      	ldr	r0, [pc, #40]	; (1478 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x4c>)
    144e:	f001 fc6d 	bl	2d2c <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1452:	4808      	ldr	r0, [pc, #32]	; (1474 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x48>)
    1454:	f001 fd28 	bl	2ea8 <Print::println()>
    1458:	6822      	ldr	r2, [r4, #0]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    145a:	f102 0132 	add.w	r1, r2, #50	; 0x32
    145e:	e001      	b.n	1464 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x38>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    1460:	4299      	cmp	r1, r3
    1462:	d302      	bcc.n	146a <VisualMicroDebug::sendContinuedACK(unsigned char)+0x3e>
    1464:	6823      	ldr	r3, [r4, #0]
    1466:	429a      	cmp	r2, r3
    1468:	d9fa      	bls.n	1460 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x34>
    146a:	bd38      	pop	{r3, r4, r5, pc}
    146c:	20013d54 	.word	0x20013d54
    1470:	200000a4 	.word	0x200000a4
    1474:	200122bc 	.word	0x200122bc
    1478:	200000ac 	.word	0x200000ac

0000147c <VisualMicroDebug::breakWait(unsigned char)>:
#if defined(VM_DBT) //&& ( VM_DBT == VM_DBT_HARDWARESERIAL || VM_DBT == VM_DBT_FASTSERIAL)
//TODO: implement sturcture serial com!
//we never get called if break was not set during compliation
//return _vm_cmd so that we can setVariable if required (caller needs to know result)
uint8_t VisualMicroDebug::breakWait(uint8_t breakPointId)
{
    147c:	b538      	push	{r3, r4, r5, lr}
	//console write not working yet
#if defined(VM_DBT) && (VM_DBT == VM_DBT_NET_CONSOLE)
	return 'c';
#endif

	if (!alwaysBreak)
    147e:	7e03      	ldrb	r3, [r0, #24]
    1480:	b90b      	cbnz	r3, 1486 <VisualMicroDebug::breakWait(unsigned char)+0xa>
		case 'h':
			//Serial.println("Remote debug session started");
#if defined(VM_DBT) && (VM_DBT == VM_DBT_NET_UDP)
			alwaysBreak = true;
#endif
			return 'c';
    1482:	2063      	movs	r0, #99	; 0x63
	//sendContinuedACK(breakPointId);
	//return 'c'; //if we get here we are continuing!

	//	return '?'; //software serial rubbish detected?
	return 'e';
}
    1484:	bd38      	pop	{r3, r4, r5, pc}
    1486:	460d      	mov	r5, r1
    1488:	4604      	mov	r4, r0
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    148a:	f001 fbe9 	bl	2c60 <usb_serial_available>
#endif

	uint8_t b;

	//break/pause until we get a command
	if (available() == 0)
    148e:	f010 0fff 	tst.w	r0, #255	; 0xff
    1492:	d101      	bne.n	1498 <VisualMicroDebug::breakWait(unsigned char)+0x1c>
		if (!UDPConnectionStarted) {
			return 'c';
		}
#endif

		return 'e';
    1494:	2065      	movs	r0, #101	; 0x65
    1496:	bd38      	pop	{r3, r4, r5, pc}
    1498:	f001 fbe2 	bl	2c60 <usb_serial_available>
	//doh!  better if we have any key to continue so users data doesn't get lost so much. 
	//NOTE. pause/breakpoints are best used with dedicated port!
	//while(true)
	//{

	while (available() > 0)
    149c:	f010 0fff 	tst.w	r0, #255	; 0xff
    14a0:	d0f8      	beq.n	1494 <VisualMicroDebug::breakWait(unsigned char)+0x18>
        virtual int read() { return usb_serial_getchar(); }
    14a2:	f001 fc1d 	bl	2ce0 <usb_serial_getchar>
		//		while(VM_DEBUGGER_SOFT_TRANSPORT.available()>0)
		//		{
		//			b = VM_DEBUGGER_SOFT_TRANSPORT.read();
		//#endif
		//debug break commands
		switch (b)
    14a6:	b2c0      	uxtb	r0, r0
    14a8:	f1a0 0358 	sub.w	r3, r0, #88	; 0x58
    14ac:	2b1e      	cmp	r3, #30
    14ae:	d8f3      	bhi.n	1498 <VisualMicroDebug::breakWait(unsigned char)+0x1c>
    14b0:	a201      	add	r2, pc, #4	; (adr r2, 14b8 <VisualMicroDebug::breakWait(unsigned char)+0x3c>)
    14b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    14b6:	bf00      	nop
    14b8:	00001541 	.word	0x00001541
    14bc:	00001499 	.word	0x00001499
    14c0:	00001499 	.word	0x00001499
    14c4:	00001499 	.word	0x00001499
    14c8:	00001499 	.word	0x00001499
    14cc:	00001499 	.word	0x00001499
    14d0:	00001499 	.word	0x00001499
    14d4:	00001499 	.word	0x00001499
    14d8:	00001499 	.word	0x00001499
    14dc:	00001499 	.word	0x00001499
    14e0:	00001499 	.word	0x00001499
    14e4:	00001535 	.word	0x00001535
    14e8:	00001499 	.word	0x00001499
    14ec:	00001499 	.word	0x00001499
    14f0:	00001499 	.word	0x00001499
    14f4:	00001499 	.word	0x00001499
    14f8:	00001483 	.word	0x00001483
    14fc:	00001499 	.word	0x00001499
    1500:	00001499 	.word	0x00001499
    1504:	00001499 	.word	0x00001499
    1508:	00001499 	.word	0x00001499
    150c:	00001499 	.word	0x00001499
    1510:	00001499 	.word	0x00001499
    1514:	00001499 	.word	0x00001499
    1518:	00001499 	.word	0x00001499
    151c:	00001483 	.word	0x00001483
    1520:	00001499 	.word	0x00001499
    1524:	00001499 	.word	0x00001499
    1528:	00001499 	.word	0x00001499
    152c:	00001499 	.word	0x00001499
    1530:	00001485 	.word	0x00001485
		{

		case 'c':
			sendContinuedACK(breakPointId);
    1534:	4620      	mov	r0, r4
    1536:	4629      	mov	r1, r5
    1538:	f7ff ff78 	bl	142c <VisualMicroDebug::sendContinuedACK(unsigned char)>
			return 'c'; //if we get here we are continuing!
    153c:	2063      	movs	r0, #99	; 0x63
    153e:	bd38      	pop	{r3, r4, r5, pc}
					  //	sendContinuedACK(breakPointId);
					  //	return;

					  //switch off break until re-start. for dev/testing
		case 'X':
			alwaysBreak = false;
    1540:	2300      	movs	r3, #0
			return 'c';
    1542:	2063      	movs	r0, #99	; 0x63
					  //	sendContinuedACK(breakPointId);
					  //	return;

					  //switch off break until re-start. for dev/testing
		case 'X':
			alwaysBreak = false;
    1544:	7623      	strb	r3, [r4, #24]
    1546:	bd38      	pop	{r3, r4, r5, pc}

00001548 <VisualMicroDebug::start(bool, bool)>:
}
#endif


void VisualMicroDebug::start(bool waitForKeyToStart, bool _alwaysBreak)
{
    1548:	b570      	push	{r4, r5, r6, lr}
    154a:	4605      	mov	r5, r0
    154c:	4616      	mov	r6, r2
#if defined (VM_DEBUG_BREAKPAUSE)
	if (waitForKeyToStart)
    154e:	b1a9      	cbz	r1, 157c <VisualMicroDebug::start(bool, bool)+0x34>
	{
		alwaysBreak = true;
    1550:	2301      	movs	r3, #1
    1552:	4c0b      	ldr	r4, [pc, #44]	; (1580 <VisualMicroDebug::start(bool, bool)+0x38>)
    1554:	7603      	strb	r3, [r0, #24]

		//server should know we are waiting sendMessage("Press any key to continue");
		while (breakWait(0) != 'c') {
    1556:	2100      	movs	r1, #0
    1558:	4628      	mov	r0, r5
    155a:	f7ff ff8f 	bl	147c <VisualMicroDebug::breakWait(unsigned char)>
    155e:	2863      	cmp	r0, #99	; 0x63
    1560:	d00c      	beq.n	157c <VisualMicroDebug::start(bool, bool)+0x34>
    1562:	6822      	ldr	r2, [r4, #0]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    1564:	1c51      	adds	r1, r2, #1
    1566:	6823      	ldr	r3, [r4, #0]

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    1568:	429a      	cmp	r2, r3
    156a:	d8f4      	bhi.n	1556 <VisualMicroDebug::start(bool, bool)+0xe>
    156c:	4299      	cmp	r1, r3
    156e:	d2fa      	bcs.n	1566 <VisualMicroDebug::start(bool, bool)+0x1e>
	if (waitForKeyToStart)
	{
		alwaysBreak = true;

		//server should know we are waiting sendMessage("Press any key to continue");
		while (breakWait(0) != 'c') {
    1570:	2100      	movs	r1, #0
    1572:	4628      	mov	r0, r5
    1574:	f7ff ff82 	bl	147c <VisualMicroDebug::breakWait(unsigned char)>
    1578:	2863      	cmp	r0, #99	; 0x63
    157a:	d1f2      	bne.n	1562 <VisualMicroDebug::start(bool, bool)+0x1a>
			DBG_YieldAndWait(1);
		}
		//breakWait(0);
	}
	alwaysBreak = _alwaysBreak;
    157c:	762e      	strb	r6, [r5, #24]
    157e:	bd70      	pop	{r4, r5, r6, pc}
    1580:	20013d54 	.word	0x20013d54

00001584 <_GLOBAL__sub_I__ZN16VisualMicroDebug16DBG_YieldAndWaitEm>:
	//wait if we have to
	//try to prevent new users from overloading bandwidth and filling windows buffer
	//can be overriden via preferences
	//defaults to 50ms; needs to allow time for windows to recover if it pauses, so we need to be slower than the extensions and debugger can process + a bit

	BreakStartMillis = 0L;
    1584:	4b03      	ldr	r3, [pc, #12]	; (1594 <_GLOBAL__sub_I__ZN16VisualMicroDebug16DBG_YieldAndWaitEm+0x10>)
    1586:	2200      	movs	r2, #0
    1588:	609a      	str	r2, [r3, #8]
	BreakPrevMillis = 0L;
    158a:	60da      	str	r2, [r3, #12]
	InBreakMsgRepeatMS = 0L;
    158c:	611a      	str	r2, [r3, #16]
	InBreakMsgSent = 0L;
    158e:	615a      	str	r2, [r3, #20]
    1590:	4770      	bx	lr
    1592:	bf00      	nop
    1594:	20013cdc 	.word	0x20013cdc

00001598 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>:
	m_nPowerData = 0xFFFFFFFF;
}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
    1598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
    159a:	1e1e      	subs	r6, r3, #0
	m_nPowerData = 0xFFFFFFFF;
}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
    159c:	4604      	mov	r4, r0
    159e:	460f      	mov	r7, r1
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
    15a0:	dd0f      	ble.n	15c2 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x2a>
    15a2:	eb02 0542 	add.w	r5, r2, r2, lsl #1
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
    15a6:	6823      	ldr	r3, [r4, #0]
    15a8:	4620      	mov	r0, r4
    15aa:	689b      	ldr	r3, [r3, #8]
    15ac:	4798      	blx	r3
    /// get the next controller in the chain after this one.  will return NULL at the end of the chain
    CLEDController *next() { return m_pNext; }

	/// set the default array of leds to be used by this controller
    CLEDController & setLeds(CRGB *data, int nLeds) {
        m_Data = data;
    15ae:	197a      	adds	r2, r7, r5
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
    15b0:	6823      	ldr	r3, [r4, #0]
    15b2:	6062      	str	r2, [r4, #4]
    15b4:	4a0c      	ldr	r2, [pc, #48]	; (15e8 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x50>)
    15b6:	695b      	ldr	r3, [r3, #20]
        m_nLeds = nLeds;
    15b8:	6166      	str	r6, [r4, #20]
    15ba:	4293      	cmp	r3, r2
    15bc:	d104      	bne.n	15c8 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x30>
	return *pLed;
}
    15be:	4620      	mov	r0, r4
    15c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;
    15c2:	4616      	mov	r6, r2
    15c4:	2500      	movs	r5, #0
    15c6:	e7ee      	b.n	15a6 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0xe>

	pLed->init();
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
    15c8:	4620      	mov	r0, r4
    15ca:	4798      	blx	r3

void CFastLED::setMaxRefreshRate(uint16_t refresh, bool constrain) {
  if(constrain) {
    // if we're constraining, the new value of m_nMinMicros _must_ be higher than previously (because we're only
    // allowed to slow things down if constraining)
    if(refresh > 0) {
    15cc:	2800      	cmp	r0, #0
    15ce:	d0f6      	beq.n	15be <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x26>
      m_nMinMicros = ( (1000000/refresh) >  m_nMinMicros) ? (1000000/refresh) : m_nMinMicros;
    15d0:	4b06      	ldr	r3, [pc, #24]	; (15ec <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x54>)
    15d2:	4a07      	ldr	r2, [pc, #28]	; (15f0 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x58>)
    15d4:	fb93 f0f0 	sdiv	r0, r3, r0
    15d8:	6853      	ldr	r3, [r2, #4]
    15da:	4298      	cmp	r0, r3
    15dc:	bf38      	it	cc
    15de:	4618      	movcc	r0, r3
    15e0:	6050      	str	r0, [r2, #4]

	pLed->init();
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
	return *pLed;
}
    15e2:	4620      	mov	r0, r4
    15e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    15e6:	bf00      	nop
    15e8:	0000007d 	.word	0x0000007d
    15ec:	000f4240 	.word	0x000f4240
    15f0:	20013d24 	.word	0x20013d24

000015f4 <CFastLED::show(unsigned char)>:

void CFastLED::show(uint8_t scale) {
    15f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    15f8:	6843      	ldr	r3, [r0, #4]
    15fa:	b083      	sub	sp, #12
    15fc:	4606      	mov	r6, r0
    15fe:	460f      	mov	r7, r1
    1600:	4c35      	ldr	r4, [pc, #212]	; (16d8 <CFastLED::show(unsigned char)+0xe4>)
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    1602:	2b00      	cmp	r3, #0
    1604:	d15f      	bne.n	16c6 <CFastLED::show(unsigned char)+0xd2>
	lastshow = micros();
    1606:	f000 faed 	bl	1be4 <micros>

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    160a:	68f3      	ldr	r3, [r6, #12]
}

void CFastLED::show(uint8_t scale) {
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
	lastshow = micros();
    160c:	6020      	str	r0, [r4, #0]

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    160e:	b11b      	cbz	r3, 1618 <CFastLED::show(unsigned char)+0x24>
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
    1610:	4638      	mov	r0, r7
    1612:	68b1      	ldr	r1, [r6, #8]
    1614:	4798      	blx	r3
    1616:	4607      	mov	r7, r0
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    /// get the first led controller in the chain of controllers
    static CLEDController *head() { return m_pHead; }
    1618:	4b30      	ldr	r3, [pc, #192]	; (16dc <CFastLED::show(unsigned char)+0xe8>)
    161a:	681c      	ldr	r4, [r3, #0]
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    161c:	2c00      	cmp	r4, #0
    161e:	d037      	beq.n	1690 <CFastLED::show(unsigned char)+0x9c>

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    1620:	2500      	movs	r5, #0
		uint8_t d = pCur->getDither();
		if(m_nFPS < 100) { pCur->setDither(0); }
    1622:	8873      	ldrh	r3, [r6, #2]
    1624:	f894 8012 	ldrb.w	r8, [r4, #18]
    1628:	2b63      	cmp	r3, #99	; 0x63
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    162a:	6823      	ldr	r3, [r4, #0]
    162c:	6861      	ldr	r1, [r4, #4]

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    162e:	bf98      	it	ls
    1630:	74a5      	strbls	r5, [r4, #18]
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
    1632:	f88d 5004 	strb.w	r5, [sp, #4]
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    1636:	f8d3 9004 	ldr.w	r9, [r3, #4]
    163a:	f88d 5005 	strb.w	r5, [sp, #5]
    163e:	f88d 5006 	strb.w	r5, [sp, #6]
    1642:	6962      	ldr	r2, [r4, #20]
      #if defined(NO_CORRECTION) && (NO_CORRECTION==1)
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
    1644:	b1e7      	cbz	r7, 1680 <CFastLED::show(unsigned char)+0x8c>
    1646:	f104 000b 	add.w	r0, r4, #11
    164a:	f10d 0e04 	add.w	lr, sp, #4
    164e:	f104 0c0e 	add.w	ip, r4, #14
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
    1652:	f810 af01 	ldrb.w	sl, [r0, #1]!
                      uint8_t ct = colorTemperature.raw[i];
    1656:	f890 b003 	ldrb.w	fp, [r0, #3]
                      if(cc > 0 && ct > 0) {
    165a:	f1ba 0f00 	cmp.w	sl, #0
    165e:	d00b      	beq.n	1678 <CFastLED::show(unsigned char)+0x84>
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    1660:	f10b 0301 	add.w	r3, fp, #1

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
                      uint8_t ct = colorTemperature.raw[i];
                      if(cc > 0 && ct > 0) {
    1664:	f1bb 0f00 	cmp.w	fp, #0
    1668:	d006      	beq.n	1678 <CFastLED::show(unsigned char)+0x84>
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    166a:	fb0a 3303 	mla	r3, sl, r3, r3
    166e:	fb07 f303 	mul.w	r3, r7, r3
                          work /= 0x10000L;
                          adj.raw[i] = work & 0xFF;
    1672:	0c1b      	lsrs	r3, r3, #16
    1674:	f88e 3000 	strb.w	r3, [lr]
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
    1678:	4560      	cmp	r0, ip
    167a:	f10e 0e01 	add.w	lr, lr, #1
    167e:	d1e8      	bne.n	1652 <CFastLED::show(unsigned char)+0x5e>
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    1680:	4620      	mov	r0, r4
    1682:	ab01      	add	r3, sp, #4
    1684:	47c8      	blx	r9

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    1686:	f884 8012 	strb.w	r8, [r4, #18]
    168a:	68a4      	ldr	r4, [r4, #8]
	if(m_pPowerFunc) {
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    168c:	2c00      	cmp	r4, #0
    168e:	d1c8      	bne.n	1622 <CFastLED::show(unsigned char)+0x2e>

void CFastLED::countFPS(int nFrames) {
  static int br = 0;
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
    1690:	4813      	ldr	r0, [pc, #76]	; (16e0 <CFastLED::show(unsigned char)+0xec>)
    1692:	6802      	ldr	r2, [r0, #0]
    1694:	1c51      	adds	r1, r2, #1
    1696:	2a18      	cmp	r2, #24
    1698:	6001      	str	r1, [r0, #0]
    169a:	dd11      	ble.n	16c0 <CFastLED::show(unsigned char)+0xcc>
    169c:	4d11      	ldr	r5, [pc, #68]	; (16e4 <CFastLED::show(unsigned char)+0xf0>)
      uint32_t now = millis();
      now -= lastframe;
      if( now == 0 ) {
          now = 1; // prevent division by zero below
      }
      m_nFPS = (br * 1000) / now;
    169e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  static int br = 0;
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
      uint32_t now = millis();
      now -= lastframe;
    16a2:	4c11      	ldr	r4, [pc, #68]	; (16e8 <CFastLED::show(unsigned char)+0xf4>)
      if( now == 0 ) {
          now = 1; // prevent division by zero below
      }
      m_nFPS = (br * 1000) / now;
    br = 0;
    16a4:	2700      	movs	r7, #0
    16a6:	682a      	ldr	r2, [r5, #0]
      uint32_t now = millis();
      now -= lastframe;
      if( now == 0 ) {
          now = 1; // prevent division by zero below
      }
      m_nFPS = (br * 1000) / now;
    16a8:	fb03 f101 	mul.w	r1, r3, r1
  static int br = 0;
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
      uint32_t now = millis();
      now -= lastframe;
    16ac:	6823      	ldr	r3, [r4, #0]
    16ae:	682d      	ldr	r5, [r5, #0]
      if( now == 0 ) {
          now = 1; // prevent division by zero below
    16b0:	1ad3      	subs	r3, r2, r3
      }
      m_nFPS = (br * 1000) / now;
    br = 0;
    16b2:	6007      	str	r7, [r0, #0]
    lastframe = millis();
    16b4:	6025      	str	r5, [r4, #0]

  if(br++ >= nFrames) {
      uint32_t now = millis();
      now -= lastframe;
      if( now == 0 ) {
          now = 1; // prevent division by zero below
    16b6:	bf08      	it	eq
    16b8:	2301      	moveq	r3, #1
      }
      m_nFPS = (br * 1000) / now;
    16ba:	fbb1 f3f3 	udiv	r3, r1, r3
    16be:	8073      	strh	r3, [r6, #2]
		pCur->showLeds(scale);
		pCur->setDither(d);
		pCur = pCur->next();
	}
	countFPS();
}
    16c0:	b003      	add	sp, #12
    16c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return *pLed;
}

void CFastLED::show(uint8_t scale) {
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    16c6:	f000 fa8d 	bl	1be4 <micros>
    16ca:	6822      	ldr	r2, [r4, #0]
    16cc:	6873      	ldr	r3, [r6, #4]
    16ce:	1a80      	subs	r0, r0, r2
    16d0:	4298      	cmp	r0, r3
    16d2:	d396      	bcc.n	1602 <CFastLED::show(unsigned char)+0xe>
    16d4:	e797      	b.n	1606 <CFastLED::show(unsigned char)+0x12>
    16d6:	bf00      	nop
    16d8:	20013d3c 	.word	0x20013d3c
    16dc:	20013d34 	.word	0x20013d34
    16e0:	20013d38 	.word	0x20013d38
    16e4:	20013d54 	.word	0x20013d54
    16e8:	20013d40 	.word	0x20013d40

000016ec <_GLOBAL__sub_I_pSmartMatrix>:
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    16ec:	4b04      	ldr	r3, [pc, #16]	; (1700 <_GLOBAL__sub_I_pSmartMatrix+0x14>)
	m_nFPS = 0;
    16ee:	2200      	movs	r2, #0
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    16f0:	20ff      	movs	r0, #255	; 0xff
	m_nFPS = 0;
	m_pPowerFunc = NULL;
	m_nPowerData = 0xFFFFFFFF;
    16f2:	f04f 31ff 	mov.w	r1, #4294967295

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
	m_nFPS = 0;
    16f6:	805a      	strh	r2, [r3, #2]
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    16f8:	7018      	strb	r0, [r3, #0]
	m_nFPS = 0;
	m_pPowerFunc = NULL;
	m_nPowerData = 0xFFFFFFFF;
    16fa:	6099      	str	r1, [r3, #8]
CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
	m_nFPS = 0;
	m_pPowerFunc = NULL;
    16fc:	60da      	str	r2, [r3, #12]
    16fe:	4770      	bx	lr
    1700:	20013d24 	.word	0x20013d24

00001704 <analogRead>:
}


int analogRead(uint8_t pin)
{
	if (pin > sizeof(pin_to_channel)) return 0;
    1704:	281c      	cmp	r0, #28
    1706:	d81b      	bhi.n	1740 <analogRead+0x3c>
	if (calibrating) wait_for_cal();
    1708:	4914      	ldr	r1, [pc, #80]	; (175c <analogRead+0x58>)
    170a:	780b      	ldrb	r3, [r1, #0]
    170c:	b14b      	cbz	r3, 1722 <analogRead+0x1e>


static void wait_for_cal(void)
{
	//printf("wait_for_cal\n");
	while (ADC1_GC & ADC_GC_CAL) ;
    170e:	4a14      	ldr	r2, [pc, #80]	; (1760 <analogRead+0x5c>)
    1710:	6c93      	ldr	r3, [r2, #72]	; 0x48
    1712:	061b      	lsls	r3, r3, #24
    1714:	d4fc      	bmi.n	1710 <analogRead+0xc>
	while (ADC2_GC & ADC_GC_CAL) ;
    1716:	4a13      	ldr	r2, [pc, #76]	; (1764 <analogRead+0x60>)
    1718:	6c93      	ldr	r3, [r2, #72]	; 0x48
    171a:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    171e:	d1fb      	bne.n	1718 <analogRead+0x14>
	// TODO: check CALF, but what do to about CAL failure?
	calibrating = 0;
    1720:	700b      	strb	r3, [r1, #0]

int analogRead(uint8_t pin)
{
	if (pin > sizeof(pin_to_channel)) return 0;
	if (calibrating) wait_for_cal();
	uint8_t ch = pin_to_channel[pin];
    1722:	4b11      	ldr	r3, [pc, #68]	; (1768 <analogRead+0x64>)
    1724:	5c1b      	ldrb	r3, [r3, r0]
	if (ch == 255) return 0;
    1726:	2bff      	cmp	r3, #255	; 0xff
    1728:	d00a      	beq.n	1740 <analogRead+0x3c>
//	printf("%d\n", ch);
//	if (ch > 15) return 0;
	if(!(ch & 0x80)) {
    172a:	061a      	lsls	r2, r3, #24
    172c:	d40a      	bmi.n	1744 <analogRead+0x40>
		ADC1_HC0 = ch;
    172e:	4a0c      	ldr	r2, [pc, #48]	; (1760 <analogRead+0x5c>)
		while (!(ADC1_HS & ADC_HS_COCO0)) ; // wait
    1730:	4611      	mov	r1, r2
	uint8_t ch = pin_to_channel[pin];
	if (ch == 255) return 0;
//	printf("%d\n", ch);
//	if (ch > 15) return 0;
	if(!(ch & 0x80)) {
		ADC1_HC0 = ch;
    1732:	6013      	str	r3, [r2, #0]
		while (!(ADC1_HS & ADC_HS_COCO0)) ; // wait
    1734:	6a0b      	ldr	r3, [r1, #32]
    1736:	4a0a      	ldr	r2, [pc, #40]	; (1760 <analogRead+0x5c>)
    1738:	07d8      	lsls	r0, r3, #31
    173a:	d5fb      	bpl.n	1734 <analogRead+0x30>
		return ADC1_R0;
	} else {
		ADC2_HC0 = ch & 0x7f;
		while (!(ADC2_HS & ADC_HS_COCO0)) ; // wait
		return ADC2_R0;
    173c:	6a50      	ldr	r0, [r2, #36]	; 0x24
	}
}
    173e:	4770      	bx	lr
}


int analogRead(uint8_t pin)
{
	if (pin > sizeof(pin_to_channel)) return 0;
    1740:	2000      	movs	r0, #0
    1742:	4770      	bx	lr
	if(!(ch & 0x80)) {
		ADC1_HC0 = ch;
		while (!(ADC1_HS & ADC_HS_COCO0)) ; // wait
		return ADC1_R0;
	} else {
		ADC2_HC0 = ch & 0x7f;
    1744:	4a07      	ldr	r2, [pc, #28]	; (1764 <analogRead+0x60>)
    1746:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		while (!(ADC2_HS & ADC_HS_COCO0)) ; // wait
    174a:	4611      	mov	r1, r2
	if(!(ch & 0x80)) {
		ADC1_HC0 = ch;
		while (!(ADC1_HS & ADC_HS_COCO0)) ; // wait
		return ADC1_R0;
	} else {
		ADC2_HC0 = ch & 0x7f;
    174c:	6013      	str	r3, [r2, #0]
		while (!(ADC2_HS & ADC_HS_COCO0)) ; // wait
    174e:	6a0b      	ldr	r3, [r1, #32]
    1750:	4a04      	ldr	r2, [pc, #16]	; (1764 <analogRead+0x60>)
    1752:	07db      	lsls	r3, r3, #31
    1754:	d5fb      	bpl.n	174e <analogRead+0x4a>
		return ADC2_R0;
    1756:	6a50      	ldr	r0, [r2, #36]	; 0x24
	}
}
    1758:	4770      	bx	lr
    175a:	bf00      	nop
    175c:	20013d48 	.word	0x20013d48
    1760:	400c4000 	.word	0x400c4000
    1764:	400c8000 	.word	0x400c8000
    1768:	200000fc 	.word	0x200000fc

0000176c <analogReadRes>:

void analogReadRes(unsigned int bits)
{
  uint32_t tmp32, mode;

   if (bits == 8) {
    176c:	2808      	cmp	r0, #8
void analogReference(uint8_t type)
{
}

void analogReadRes(unsigned int bits)
{
    176e:	b470      	push	{r4, r5, r6}
  uint32_t tmp32, mode;

   if (bits == 8) {
    1770:	d024      	beq.n	17bc <analogReadRes+0x50>
    // 8 bit conversion (17 clocks) plus 8 clocks for input settling
    mode = ADC_CFG_MODE(0) | ADC_CFG_ADSTS(3);
  } else if (bits == 10) {
    1772:	280a      	cmp	r0, #10
    // 10 bit conversion (17 clocks) plus 20 clocks for input settling
    mode = ADC_CFG_MODE(1) | ADC_CFG_ADSTS(2) | ADC_CFG_ADLSMP;
  } else {
    // 12 bit conversion (25 clocks) plus 24 clocks for input settling
    mode = ADC_CFG_MODE(2) | ADC_CFG_ADSTS(3) | ADC_CFG_ADLSMP;
    1774:	bf0c      	ite	eq
    1776:	f44f 7405 	moveq.w	r4, #532	; 0x214
    177a:	f44f 7446 	movne.w	r4, #792	; 0x318
  }

  tmp32  = (ADC1_CFG & (0xFFFFFC00));
    177e:	4811      	ldr	r0, [pc, #68]	; (17c4 <analogReadRes+0x58>)
    1780:	4a11      	ldr	r2, [pc, #68]	; (17c8 <analogReadRes+0x5c>)
    1782:	6c43      	ldr	r3, [r0, #68]	; 0x44
  tmp32 |= (ADC1_CFG & (0x03));  // ADICLK
    1784:	6c46      	ldr	r6, [r0, #68]	; 0x44
  } else {
    // 12 bit conversion (25 clocks) plus 24 clocks for input settling
    mode = ADC_CFG_MODE(2) | ADC_CFG_ADSTS(3) | ADC_CFG_ADLSMP;
  }

  tmp32  = (ADC1_CFG & (0xFFFFFC00));
    1786:	401a      	ands	r2, r3
  tmp32 |= (ADC1_CFG & (0x03));  // ADICLK
  tmp32 |= (ADC1_CFG & (0xE0));  // ADIV & ADLPC
    1788:	6c45      	ldr	r5, [r0, #68]	; 0x44
    // 12 bit conversion (25 clocks) plus 24 clocks for input settling
    mode = ADC_CFG_MODE(2) | ADC_CFG_ADSTS(3) | ADC_CFG_ADLSMP;
  }

  tmp32  = (ADC1_CFG & (0xFFFFFC00));
  tmp32 |= (ADC1_CFG & (0x03));  // ADICLK
    178a:	f006 0603 	and.w	r6, r6, #3
  tmp32 |= (ADC1_CFG & (0xE0));  // ADIV & ADLPC

  tmp32 |= mode; 
  ADC1_CFG = tmp32;
  
  tmp32  = (ADC2_CFG & (0xFFFFFC00));
    178e:	490f      	ldr	r1, [pc, #60]	; (17cc <analogReadRes+0x60>)
    mode = ADC_CFG_MODE(2) | ADC_CFG_ADSTS(3) | ADC_CFG_ADLSMP;
  }

  tmp32  = (ADC1_CFG & (0xFFFFFC00));
  tmp32 |= (ADC1_CFG & (0x03));  // ADICLK
  tmp32 |= (ADC1_CFG & (0xE0));  // ADIV & ADLPC
    1790:	f005 05e0 	and.w	r5, r5, #224	; 0xe0

  tmp32 |= mode; 
  ADC1_CFG = tmp32;
  
  tmp32  = (ADC2_CFG & (0xFFFFFC00));
    1794:	4b0c      	ldr	r3, [pc, #48]	; (17c8 <analogReadRes+0x5c>)
    // 12 bit conversion (25 clocks) plus 24 clocks for input settling
    mode = ADC_CFG_MODE(2) | ADC_CFG_ADSTS(3) | ADC_CFG_ADLSMP;
  }

  tmp32  = (ADC1_CFG & (0xFFFFFC00));
  tmp32 |= (ADC1_CFG & (0x03));  // ADICLK
    1796:	4332      	orrs	r2, r6
  tmp32 |= (ADC1_CFG & (0xE0));  // ADIV & ADLPC
    1798:	432a      	orrs	r2, r5

  tmp32 |= mode; 
    179a:	4322      	orrs	r2, r4
  ADC1_CFG = tmp32;
    179c:	6442      	str	r2, [r0, #68]	; 0x44
  
  tmp32  = (ADC2_CFG & (0xFFFFFC00));
    179e:	6c48      	ldr	r0, [r1, #68]	; 0x44
  tmp32 |= (ADC2_CFG & (0x03));  // ADICLK
    17a0:	6c4a      	ldr	r2, [r1, #68]	; 0x44
  tmp32 |= (ADC1_CFG & (0xE0));  // ADIV & ADLPC

  tmp32 |= mode; 
  ADC1_CFG = tmp32;
  
  tmp32  = (ADC2_CFG & (0xFFFFFC00));
    17a2:	4003      	ands	r3, r0
  tmp32 |= (ADC2_CFG & (0x03));  // ADICLK
  tmp32 |= (ADC2_CFG & (0xE0));  // ADIV & ADLPC
    17a4:	6c48      	ldr	r0, [r1, #68]	; 0x44

  tmp32 |= mode; 
  ADC1_CFG = tmp32;
  
  tmp32  = (ADC2_CFG & (0xFFFFFC00));
  tmp32 |= (ADC2_CFG & (0x03));  // ADICLK
    17a6:	f002 0203 	and.w	r2, r2, #3
  tmp32 |= (ADC2_CFG & (0xE0));  // ADIV & ADLPC
    17aa:	f000 00e0 	and.w	r0, r0, #224	; 0xe0

  tmp32 |= mode; 
  ADC1_CFG = tmp32;
  
  tmp32  = (ADC2_CFG & (0xFFFFFC00));
  tmp32 |= (ADC2_CFG & (0x03));  // ADICLK
    17ae:	431a      	orrs	r2, r3
  tmp32 |= (ADC2_CFG & (0xE0));  // ADIV & ADLPC
    17b0:	ea40 0302 	orr.w	r3, r0, r2

  tmp32 |= mode; 
    17b4:	4323      	orrs	r3, r4
  ADC2_CFG = tmp32;
}
    17b6:	bc70      	pop	{r4, r5, r6}
  tmp32  = (ADC2_CFG & (0xFFFFFC00));
  tmp32 |= (ADC2_CFG & (0x03));  // ADICLK
  tmp32 |= (ADC2_CFG & (0xE0));  // ADIV & ADLPC

  tmp32 |= mode; 
  ADC2_CFG = tmp32;
    17b8:	644b      	str	r3, [r1, #68]	; 0x44
}
    17ba:	4770      	bx	lr
{
  uint32_t tmp32, mode;

   if (bits == 8) {
    // 8 bit conversion (17 clocks) plus 8 clocks for input settling
    mode = ADC_CFG_MODE(0) | ADC_CFG_ADSTS(3);
    17bc:	f44f 7440 	mov.w	r4, #768	; 0x300
    17c0:	e7dd      	b.n	177e <analogReadRes+0x12>
    17c2:	bf00      	nop
    17c4:	400c4000 	.word	0x400c4000
    17c8:	fffffc00 	.word	0xfffffc00
    17cc:	400c8000 	.word	0x400c8000

000017d0 <analogReadAveraging>:
  tmp32 |= mode; 
  ADC2_CFG = tmp32;
}

void analogReadAveraging(unsigned int num)
{
    17d0:	b410      	push	{r4}
  uint32_t mode, mode1;
  
  //disable averaging, ADC1 and ADC2
  ADC1_GC &= ~0x20;
    17d2:	4c1e      	ldr	r4, [pc, #120]	; (184c <analogReadAveraging+0x7c>)
  mode = ADC1_CFG & ~0xC000;
  ADC2_GC &= ~0x20;
  mode1 = ADC2_CFG & ~0xC000;
  
    if (num >= 32) {
    17d4:	281f      	cmp	r0, #31
  uint32_t mode, mode1;
  
  //disable averaging, ADC1 and ADC2
  ADC1_GC &= ~0x20;
  mode = ADC1_CFG & ~0xC000;
  ADC2_GC &= ~0x20;
    17d6:	491e      	ldr	r1, [pc, #120]	; (1850 <analogReadAveraging+0x80>)
void analogReadAveraging(unsigned int num)
{
  uint32_t mode, mode1;
  
  //disable averaging, ADC1 and ADC2
  ADC1_GC &= ~0x20;
    17d8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    17da:	f023 0320 	bic.w	r3, r3, #32
    17de:	64a3      	str	r3, [r4, #72]	; 0x48
  mode = ADC1_CFG & ~0xC000;
    17e0:	6c62      	ldr	r2, [r4, #68]	; 0x44
  ADC2_GC &= ~0x20;
    17e2:	6c8b      	ldr	r3, [r1, #72]	; 0x48
{
  uint32_t mode, mode1;
  
  //disable averaging, ADC1 and ADC2
  ADC1_GC &= ~0x20;
  mode = ADC1_CFG & ~0xC000;
    17e4:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
  ADC2_GC &= ~0x20;
    17e8:	f023 0320 	bic.w	r3, r3, #32
    17ec:	648b      	str	r3, [r1, #72]	; 0x48
  mode1 = ADC2_CFG & ~0xC000;
    17ee:	6c4b      	ldr	r3, [r1, #68]	; 0x44
    17f0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
  
    if (num >= 32) {
    17f4:	d912      	bls.n	181c <analogReadAveraging+0x4c>
      mode |= ADC_CFG_AVGS(3);
    17f6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
      mode1 |= ADC_CFG_AVGS(3);
    17fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
    17fe:	6462      	str	r2, [r4, #68]	; 0x44
  ADC2_CFG = mode1;
    1800:	644b      	str	r3, [r1, #68]	; 0x44
  
  if(num >= 4){
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
    1802:	4912      	ldr	r1, [pc, #72]	; (184c <analogReadAveraging+0x7c>)
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
    1804:	4a12      	ldr	r2, [pc, #72]	; (1850 <analogReadAveraging+0x80>)

  ADC1_CFG = mode;
  ADC2_CFG = mode1;
  
  if(num >= 4){
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
    1806:	6c8b      	ldr	r3, [r1, #72]	; 0x48
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
  }
}
    1808:	f85d 4b04 	ldr.w	r4, [sp], #4

  ADC1_CFG = mode;
  ADC2_CFG = mode1;
  
  if(num >= 4){
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
    180c:	f043 0320 	orr.w	r3, r3, #32
    1810:	648b      	str	r3, [r1, #72]	; 0x48
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
    1812:	6c93      	ldr	r3, [r2, #72]	; 0x48
    1814:	f043 0320 	orr.w	r3, r3, #32
    1818:	6493      	str	r3, [r2, #72]	; 0x48
  }
}
    181a:	4770      	bx	lr
  
    if (num >= 32) {
      mode |= ADC_CFG_AVGS(3);
      mode1 |= ADC_CFG_AVGS(3);

    } else if (num >= 16) {
    181c:	280f      	cmp	r0, #15
    181e:	d906      	bls.n	182e <analogReadAveraging+0x5e>
      mode |= ADC_CFG_AVGS(2);
    1820:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
      mode1 |= ADC_CFG_AVGS(2);
    1824:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
    1828:	6462      	str	r2, [r4, #68]	; 0x44
  ADC2_CFG = mode1;
    182a:	644b      	str	r3, [r1, #68]	; 0x44
    182c:	e7e9      	b.n	1802 <analogReadAveraging+0x32>

    } else if (num >= 16) {
      mode |= ADC_CFG_AVGS(2);
      mode1 |= ADC_CFG_AVGS(2);

    } else if (num >= 8) {
    182e:	2807      	cmp	r0, #7
    1830:	d903      	bls.n	183a <analogReadAveraging+0x6a>
      mode |= ADC_CFG_AVGS(1);
    1832:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
      mode1 |= ADC_CFG_AVGS(1);
    1836:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
    183a:	4c04      	ldr	r4, [pc, #16]	; (184c <analogReadAveraging+0x7c>)
  ADC2_CFG = mode1;
  
  if(num >= 4){
    183c:	2803      	cmp	r0, #3
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
  ADC2_CFG = mode1;
    183e:	4904      	ldr	r1, [pc, #16]	; (1850 <analogReadAveraging+0x80>)
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
    1840:	6462      	str	r2, [r4, #68]	; 0x44
  ADC2_CFG = mode1;
    1842:	644b      	str	r3, [r1, #68]	; 0x44
  
  if(num >= 4){
    1844:	d8dd      	bhi.n	1802 <analogReadAveraging+0x32>
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
  }
}
    1846:	f85d 4b04 	ldr.w	r4, [sp], #4
    184a:	4770      	bx	lr
    184c:	400c4000 	.word	0x400c4000
    1850:	400c8000 	.word	0x400c8000

00001854 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    1854:	4a96      	ldr	r2, [pc, #600]	; (1ab0 <set_arm_clock+0x25c>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    1856:	4b97      	ldr	r3, [pc, #604]	; (1ab4 <set_arm_clock+0x260>)
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    1858:	4290      	cmp	r0, r2
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
    185a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;
    185e:	4c96      	ldr	r4, [pc, #600]	; (1ab8 <set_arm_clock+0x264>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    1860:	f8d3 e014 	ldr.w	lr, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    1864:	6999      	ldr	r1, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    1866:	68e6      	ldr	r6, [r4, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    1868:	d91c      	bls.n	18a4 <set_arm_clock+0x50>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    186a:	4b94      	ldr	r3, [pc, #592]	; (1abc <set_arm_clock+0x268>)
    186c:	4298      	cmp	r0, r3
    186e:	f240 8115 	bls.w	1a9c <set_arm_clock+0x248>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    1872:	4b93      	ldr	r3, [pc, #588]	; (1ac0 <set_arm_clock+0x26c>)
    1874:	f240 6527 	movw	r5, #1575	; 0x627
    1878:	4f92      	ldr	r7, [pc, #584]	; (1ac4 <set_arm_clock+0x270>)
    187a:	4403      	add	r3, r0
    187c:	4c92      	ldr	r4, [pc, #584]	; (1ac8 <set_arm_clock+0x274>)
    187e:	0a1a      	lsrs	r2, r3, #8
    1880:	fba7 3202 	umull	r3, r2, r7, r2
    1884:	09d3      	lsrs	r3, r2, #7
    1886:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    188a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    188e:	f202 43e2 	addw	r3, r2, #1250	; 0x4e2
    1892:	42ab      	cmp	r3, r5
    1894:	bf28      	it	cs
    1896:	462b      	movcs	r3, r5
    1898:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
    189c:	fba4 3503 	umull	r3, r5, r4, r3
    18a0:	08ed      	lsrs	r5, r5, #3
    18a2:	e004      	b.n	18ae <set_arm_clock+0x5a>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24000000) {
    18a4:	4d89      	ldr	r5, [pc, #548]	; (1acc <set_arm_clock+0x278>)
    18a6:	42a8      	cmp	r0, r5
    18a8:	bf94      	ite	ls
    18aa:	2506      	movls	r5, #6
    18ac:	250e      	movhi	r5, #14
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    18ae:	4a81      	ldr	r2, [pc, #516]	; (1ab4 <set_arm_clock+0x260>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    18b0:	f006 071f 	and.w	r7, r6, #31
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    18b4:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    18b8:	42af      	cmp	r7, r5
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    18ba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    18be:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    18c2:	d20a      	bcs.n	18da <set_arm_clock+0x86>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    18c4:	4b7c      	ldr	r3, [pc, #496]	; (1ab8 <set_arm_clock+0x264>)

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    18c6:	f026 061f 	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    18ca:	461a      	mov	r2, r3
	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    18cc:	432e      	orrs	r6, r5
		DCDC_REG3 = dcdc;
    18ce:	60de      	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    18d0:	6813      	ldr	r3, [r2, #0]
    18d2:	2b00      	cmp	r3, #0
    18d4:	dafc      	bge.n	18d0 <set_arm_clock+0x7c>
    18d6:	f006 071f 	and.w	r7, r6, #31
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    18da:	f01e 7300 	ands.w	r3, lr, #33554432	; 0x2000000
    18de:	d131      	bne.n	1944 <set_arm_clock+0xf0>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    18e0:	4c7b      	ldr	r4, [pc, #492]	; (1ad0 <set_arm_clock+0x27c>)
    18e2:	4a7c      	ldr	r2, [pc, #496]	; (1ad4 <set_arm_clock+0x280>)
    18e4:	f8d4 c010 	ldr.w	ip, [r4, #16]
    18e8:	4614      	mov	r4, r2
    18ea:	ea0c 0202 	and.w	r2, ip, r2
    18ee:	42a2      	cmp	r2, r4
    18f0:	bf0a      	itet	eq
    18f2:	f04f 53c0 	moveq.w	r3, #402653184	; 0x18000000
    18f6:	f44f 5280 	movne.w	r2, #4096	; 0x1000
    18fa:	2200      	moveq	r2, #0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    18fc:	ea8e 0403 	eor.w	r4, lr, r3
    1900:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    1904:	d008      	beq.n	1918 <set_arm_clock+0xc4>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    1906:	f02e 5e60 	bic.w	lr, lr, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    190a:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
			CCM_CBCDR = cbcdr;
    190e:	4c69      	ldr	r4, [pc, #420]	; (1ab4 <set_arm_clock+0x260>)
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    1910:	ea43 0e0e 	orr.w	lr, r3, lr
			CCM_CBCDR = cbcdr;
    1914:	f8c4 e014 	str.w	lr, [r4, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    1918:	ea81 0302 	eor.w	r3, r1, r2
    191c:	f413 5f40 	tst.w	r3, #12288	; 0x3000
    1920:	d008      	beq.n	1934 <set_arm_clock+0xe0>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    1922:	4b64      	ldr	r3, [pc, #400]	; (1ab4 <set_arm_clock+0x260>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    1924:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    1928:	4311      	orrs	r1, r2
			CCM_CBCMR = cbcmr;
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    192a:	461a      	mov	r2, r3
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    192c:	6199      	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    192e:	6c93      	ldr	r3, [r2, #72]	; 0x48
    1930:	071c      	lsls	r4, r3, #28
    1932:	d4fc      	bmi.n	192e <set_arm_clock+0xda>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    1934:	f04e 7e00 	orr.w	lr, lr, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    1938:	4a5e      	ldr	r2, [pc, #376]	; (1ab4 <set_arm_clock+0x260>)
    193a:	f8c2 e014 	str.w	lr, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    193e:	6c93      	ldr	r3, [r2, #72]	; 0x48
    1940:	0699      	lsls	r1, r3, #26
    1942:	d4fc      	bmi.n	193e <set_arm_clock+0xea>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
    1944:	2101      	movs	r1, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    1946:	4c64      	ldr	r4, [pc, #400]	; (1ad8 <set_arm_clock+0x284>)
	}

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
    1948:	460a      	mov	r2, r1
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    194a:	fb01 f302 	mul.w	r3, r1, r2
    194e:	fb00 f303 	mul.w	r3, r0, r3
    1952:	42a3      	cmp	r3, r4
    1954:	d809      	bhi.n	196a <set_arm_clock+0x116>
		if (div_arm < 8) {
    1956:	2a07      	cmp	r2, #7
    1958:	f200 8095 	bhi.w	1a86 <set_arm_clock+0x232>
			div_arm = div_arm + 1;
    195c:	3201      	adds	r2, #1
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    195e:	fb01 f302 	mul.w	r3, r1, r2
    1962:	fb00 f303 	mul.w	r3, r0, r3
    1966:	42a3      	cmp	r3, r4
    1968:	d9f5      	bls.n	1956 <set_arm_clock+0x102>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    196a:	485c      	ldr	r0, [pc, #368]	; (1adc <set_arm_clock+0x288>)
    196c:	4c5c      	ldr	r4, [pc, #368]	; (1ae0 <set_arm_clock+0x28c>)
    196e:	4418      	add	r0, r3
    1970:	fba4 0300 	umull	r0, r3, r4, r0
    1974:	0d1b      	lsrs	r3, r3, #20
	if (mult > 108) mult = 108;
    1976:	2b6c      	cmp	r3, #108	; 0x6c
    1978:	f200 808b 	bhi.w	1a92 <set_arm_clock+0x23e>
	if (mult < 54) mult = 54;
    197c:	2b35      	cmp	r3, #53	; 0x35
    197e:	f200 808f 	bhi.w	1aa0 <set_arm_clock+0x24c>
    1982:	f8df 8188 	ldr.w	r8, [pc, #392]	; 1b0c <set_arm_clock+0x2b8>
    1986:	2336      	movs	r3, #54	; 0x36
    1988:	4856      	ldr	r0, [pc, #344]	; (1ae4 <set_arm_clock+0x290>)

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    198a:	f8df c144 	ldr.w	ip, [pc, #324]	; 1ad0 <set_arm_clock+0x27c>
    198e:	4c56      	ldr	r4, [pc, #344]	; (1ae8 <set_arm_clock+0x294>)
    1990:	f8dc 9000 	ldr.w	r9, [ip]
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    1994:	fbb0 f0f2 	udiv	r0, r0, r2

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    1998:	ea09 0404 	and.w	r4, r9, r4
    199c:	4544      	cmp	r4, r8
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    199e:	fbb0 f0f1 	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    19a2:	d00b      	beq.n	19bc <set_arm_clock+0x168>
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    19a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    19a8:	f44f 5880 	mov.w	r8, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    19ac:	4664      	mov	r4, ip
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    19ae:	f8cc 8000 	str.w	r8, [ip]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    19b2:	f8cc 3000 	str.w	r3, [ip]
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    19b6:	6823      	ldr	r3, [r4, #0]
    19b8:	2b00      	cmp	r3, #0
    19ba:	dafc      	bge.n	19b6 <set_arm_clock+0x162>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    19bc:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 1ab4 <set_arm_clock+0x260>
    19c0:	3a01      	subs	r2, #1
    19c2:	f8dc 3010 	ldr.w	r3, [ip, #16]
    19c6:	f003 0307 	and.w	r3, r3, #7
    19ca:	4293      	cmp	r3, r2
    19cc:	d007      	beq.n	19de <set_arm_clock+0x18a>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    19ce:	f002 0207 	and.w	r2, r2, #7
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    19d2:	4664      	mov	r4, ip
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    19d4:	f8cc 2010 	str.w	r2, [ip, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    19d8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    19da:	03db      	lsls	r3, r3, #15
    19dc:	d4fc      	bmi.n	19d8 <set_arm_clock+0x184>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    19de:	3901      	subs	r1, #1
    19e0:	0289      	lsls	r1, r1, #10
    19e2:	ea8e 0301 	eor.w	r3, lr, r1
    19e6:	f413 5fe0 	tst.w	r3, #7168	; 0x1c00
    19ea:	d00c      	beq.n	1a06 <set_arm_clock+0x1b2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
		CCM_CBCDR = cbcdr;
    19ec:	4b31      	ldr	r3, [pc, #196]	; (1ab4 <set_arm_clock+0x260>)
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    19ee:	f42e 5ee0 	bic.w	lr, lr, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    19f2:	f401 51e0 	and.w	r1, r1, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    19f6:	461a      	mov	r2, r3
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    19f8:	ea41 0e0e 	orr.w	lr, r1, lr
		CCM_CBCDR = cbcdr;
    19fc:	f8c3 e014 	str.w	lr, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    1a00:	6c93      	ldr	r3, [r2, #72]	; 0x48
    1a02:	0799      	lsls	r1, r3, #30
    1a04:	d4fc      	bmi.n	1a00 <set_arm_clock+0x1ac>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    1a06:	4b39      	ldr	r3, [pc, #228]	; (1aec <set_arm_clock+0x298>)
    1a08:	4939      	ldr	r1, [pc, #228]	; (1af0 <set_arm_clock+0x29c>)
    1a0a:	4403      	add	r3, r0
    1a0c:	09db      	lsrs	r3, r3, #7
    1a0e:	fba1 3103 	umull	r3, r1, r1, r3
    1a12:	0b09      	lsrs	r1, r1, #12
    1a14:	2904      	cmp	r1, #4
    1a16:	bf28      	it	cs
    1a18:	2104      	movcs	r1, #4
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    1a1a:	1e4b      	subs	r3, r1, #1
    1a1c:	021b      	lsls	r3, r3, #8
    1a1e:	ea8e 0203 	eor.w	r2, lr, r3
    1a22:	f412 7f40 	tst.w	r2, #768	; 0x300
    1a26:	d007      	beq.n	1a38 <set_arm_clock+0x1e4>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    1a28:	f42e 7e40 	bic.w	lr, lr, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    1a2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    1a30:	4a20      	ldr	r2, [pc, #128]	; (1ab4 <set_arm_clock+0x260>)

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    1a32:	ea43 030e 	orr.w	r3, r3, lr
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    1a36:	6153      	str	r3, [r2, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    1a38:	4b1e      	ldr	r3, [pc, #120]	; (1ab4 <set_arm_clock+0x260>)
    1a3a:	695c      	ldr	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    1a3c:	461a      	mov	r2, r3
		CCM_CBCDR = cbcdr;
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    1a3e:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
    1a42:	615c      	str	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    1a44:	6c93      	ldr	r3, [r2, #72]	; 0x48
    1a46:	069b      	lsls	r3, r3, #26
    1a48:	d4fc      	bmi.n	1a44 <set_arm_clock+0x1f0>

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    1a4a:	4b2a      	ldr	r3, [pc, #168]	; (1af4 <set_arm_clock+0x2a0>)
    1a4c:	f04f 32ff 	mov.w	r2, #4294967295
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    1a50:	4c29      	ldr	r4, [pc, #164]	; (1af8 <set_arm_clock+0x2a4>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    1a52:	42bd      	cmp	r5, r7
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    1a54:	fba3 e300 	umull	lr, r3, r3, r0
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    1a58:	6020      	str	r0, [r4, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    1a5a:	ea4f 4393 	mov.w	r3, r3, lsr #18
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    1a5e:	4c27      	ldr	r4, [pc, #156]	; (1afc <set_arm_clock+0x2a8>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    1a60:	fbb2 f3f3 	udiv	r3, r2, r3
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    1a64:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    1a68:	4a25      	ldr	r2, [pc, #148]	; (1b00 <set_arm_clock+0x2ac>)
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    1a6a:	6021      	str	r1, [r4, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    1a6c:	6013      	str	r3, [r2, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    1a6e:	d208      	bcs.n	1a82 <set_arm_clock+0x22e>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    1a70:	4b11      	ldr	r3, [pc, #68]	; (1ab8 <set_arm_clock+0x264>)
	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    1a72:	f026 061f 	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    1a76:	461a      	mov	r2, r3

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    1a78:	432e      	orrs	r6, r5
		DCDC_REG3 = dcdc;
    1a7a:	60de      	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    1a7c:	6813      	ldr	r3, [r2, #0]
    1a7e:	2b00      	cmp	r3, #0
    1a80:	dafc      	bge.n	1a7c <set_arm_clock+0x228>
	}

	return frequency;
}
    1a82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
    1a86:	2904      	cmp	r1, #4
    1a88:	f63f af6f 	bhi.w	196a <set_arm_clock+0x116>
				div_ahb = div_ahb + 1;
    1a8c:	3101      	adds	r1, #1
				div_arm = 1;
    1a8e:	2201      	movs	r2, #1
    1a90:	e75b      	b.n	194a <set_arm_clock+0xf6>
    1a92:	f8df 807c 	ldr.w	r8, [pc, #124]	; 1b10 <set_arm_clock+0x2bc>
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
    1a96:	236c      	movs	r3, #108	; 0x6c
    1a98:	481a      	ldr	r0, [pc, #104]	; (1b04 <set_arm_clock+0x2b0>)
    1a9a:	e776      	b.n	198a <set_arm_clock+0x136>
    1a9c:	2512      	movs	r5, #18
    1a9e:	e706      	b.n	18ae <set_arm_clock+0x5a>
    1aa0:	4819      	ldr	r0, [pc, #100]	; (1b08 <set_arm_clock+0x2b4>)
    1aa2:	f8df 8070 	ldr.w	r8, [pc, #112]	; 1b14 <set_arm_clock+0x2c0>
    1aa6:	fb00 f003 	mul.w	r0, r0, r3
    1aaa:	ea43 0808 	orr.w	r8, r3, r8
    1aae:	e76c      	b.n	198a <set_arm_clock+0x136>
    1ab0:	1f78a400 	.word	0x1f78a400
    1ab4:	400fc000 	.word	0x400fc000
    1ab8:	40080000 	.word	0x40080000
    1abc:	23c34600 	.word	0x23c34600
    1ac0:	dc3cba00 	.word	0xdc3cba00
    1ac4:	004cb223 	.word	0x004cb223
    1ac8:	51eb851f 	.word	0x51eb851f
    1acc:	016e3600 	.word	0x016e3600
    1ad0:	400d8000 	.word	0x400d8000
    1ad4:	80003040 	.word	0x80003040
    1ad8:	269fb1ff 	.word	0x269fb1ff
    1adc:	005b8d80 	.word	0x005b8d80
    1ae0:	165e9f81 	.word	0x165e9f81
    1ae4:	269fb200 	.word	0x269fb200
    1ae8:	8001307f 	.word	0x8001307f
    1aec:	08f0d17f 	.word	0x08f0d17f
    1af0:	00e5109f 	.word	0x00e5109f
    1af4:	431bde83 	.word	0x431bde83
    1af8:	2001228c 	.word	0x2001228c
    1afc:	20012288 	.word	0x20012288
    1b00:	20013d50 	.word	0x20013d50
    1b04:	4d3f6400 	.word	0x4d3f6400
    1b08:	00b71b00 	.word	0x00b71b00
    1b0c:	80002036 	.word	0x80002036
    1b10:	8000206c 	.word	0x8000206c
    1b14:	80002000 	.word	0x80002000

00001b18 <delay>:

void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    1b18:	2800      	cmp	r0, #0
    1b1a:	d057      	beq.n	1bcc <delay+0xb4>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    1b1c:	2201      	movs	r2, #1
{

}*/

void delay(uint32_t msec)
{
    1b1e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1b22:	b085      	sub	sp, #20
    1b24:	4683      	mov	fp, r0
    1b26:	4c2a      	ldr	r4, [pc, #168]	; (1bd0 <delay+0xb8>)
    1b28:	4d2a      	ldr	r5, [pc, #168]	; (1bd4 <delay+0xbc>)
    1b2a:	4e2b      	ldr	r6, [pc, #172]	; (1bd8 <delay+0xc0>)
    1b2c:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    1b30:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    1b34:	6828      	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    1b36:	6833      	ldr	r3, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    1b38:	e844 2100 	strex	r1, r2, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    1b3c:	2900      	cmp	r1, #0
    1b3e:	d1f7      	bne.n	1b30 <delay+0x18>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    1b40:	4f26      	ldr	r7, [pc, #152]	; (1bdc <delay+0xc4>)
    1b42:	e9cd 8902 	strd	r8, r9, [sp, #8]
    1b46:	683a      	ldr	r2, [r7, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    1b48:	1ad3      	subs	r3, r2, r3
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1b4a:	4a25      	ldr	r2, [pc, #148]	; (1be0 <delay+0xc8>)
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    1b4c:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    1b50:	9701      	str	r7, [sp, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1b52:	6812      	ldr	r2, [r2, #0]
    1b54:	2701      	movs	r7, #1
    1b56:	fba3 2302 	umull	r2, r3, r3, r2
	if (frac > 1000) frac = 1000;
    1b5a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1b5e:	4698      	mov	r8, r3
	if (frac > 1000) frac = 1000;
    1b60:	2300      	movs	r3, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1b62:	428b      	cmp	r3, r1
    1b64:	bf08      	it	eq
    1b66:	4542      	cmpeq	r2, r8
    1b68:	bf2c      	ite	cs
    1b6a:	46c2      	movcs	sl, r8
    1b6c:	46f2      	movcc	sl, lr
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    1b6e:	fb0e aa00 	mla	sl, lr, r0, sl
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    1b72:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    1b76:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    1b78:	6831      	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    1b7a:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    1b7e:	2b00      	cmp	r3, #0
    1b80:	d1f7      	bne.n	1b72 <delay+0x5a>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    1b82:	9801      	ldr	r0, [sp, #4]
    1b84:	6800      	ldr	r0, [r0, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    1b86:	1a41      	subs	r1, r0, r1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1b88:	4815      	ldr	r0, [pc, #84]	; (1be0 <delay+0xc8>)
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    1b8a:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1b8e:	6800      	ldr	r0, [r0, #0]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    1b90:	fb0e f202 	mul.w	r2, lr, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1b94:	fba1 0100 	umull	r0, r1, r1, r0
	if (frac > 1000) frac = 1000;
    1b98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    1b9c:	ebca 0202 	rsb	r2, sl, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1ba0:	4688      	mov	r8, r1
	if (frac > 1000) frac = 1000;
    1ba2:	2100      	movs	r1, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1ba4:	4299      	cmp	r1, r3
    1ba6:	bf08      	it	eq
    1ba8:	4540      	cmpeq	r0, r8
    1baa:	bf2c      	ite	cs
    1bac:	4643      	movcs	r3, r8
    1bae:	4673      	movcc	r3, lr
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    1bb0:	441a      	add	r2, r3
    1bb2:	4572      	cmp	r2, lr
    1bb4:	d307      	bcc.n	1bc6 <delay+0xae>
			if (--msec == 0) return;
    1bb6:	f1bb 0b01 	subs.w	fp, fp, #1
			start += 1000;
    1bba:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
    1bbe:	d1d8      	bne.n	1b72 <delay+0x5a>
			start += 1000;
		}
		yield();
	}
	// TODO...
}
    1bc0:	b005      	add	sp, #20
    1bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
			start += 1000;
		}
		yield();
    1bc6:	f001 f9df 	bl	2f88 <yield>
	}
    1bca:	e7d2      	b.n	1b72 <delay+0x5a>
    1bcc:	4770      	bx	lr
    1bce:	bf00      	nop
    1bd0:	20013fb4 	.word	0x20013fb4
    1bd4:	20013d54 	.word	0x20013d54
    1bd8:	20013d4c 	.word	0x20013d4c
    1bdc:	e0001004 	.word	0xe0001004
    1be0:	20013d50 	.word	0x20013d50

00001be4 <micros>:
	// TODO...
}

uint32_t micros(void)
{
    1be4:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
    1be8:	4a12      	ldr	r2, [pc, #72]	; (1c34 <micros+0x50>)
    1bea:	2601      	movs	r6, #1
    1bec:	4d12      	ldr	r5, [pc, #72]	; (1c38 <micros+0x54>)
    1bee:	4c13      	ldr	r4, [pc, #76]	; (1c3c <micros+0x58>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    1bf0:	e852 3f00 	ldrex	r3, [r2]
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    1bf4:	6829      	ldr	r1, [r5, #0]
		scc = systick_cycle_count;
    1bf6:	6820      	ldr	r0, [r4, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    1bf8:	e842 6300 	strex	r3, r6, [r2]
	} while ( __STREXW(1, &systick_safe_read));
    1bfc:	2b00      	cmp	r3, #0
    1bfe:	d1f7      	bne.n	1bf0 <micros+0xc>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    1c00:	4a0f      	ldr	r2, [pc, #60]	; (1c40 <micros+0x5c>)
    1c02:	6816      	ldr	r6, [r2, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1c04:	4f0f      	ldr	r7, [pc, #60]	; (1c44 <micros+0x60>)
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    1c06:	1a32      	subs	r2, r6, r0
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
    1c08:	f04f 0900 	mov.w	r9, #0
    1c0c:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1c10:	683e      	ldr	r6, [r7, #0]
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
	return usec;
    1c12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1c16:	4599      	cmp	r9, r3
    1c18:	fba2 6706 	umull	r6, r7, r2, r6
    1c1c:	bf08      	it	eq
    1c1e:	45b8      	cmpeq	r8, r7
    1c20:	463c      	mov	r4, r7
    1c22:	bf2c      	ite	cs
    1c24:	463c      	movcs	r4, r7
    1c26:	4604      	movcc	r4, r0
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
	return usec;
}
    1c28:	fb00 4001 	mla	r0, r0, r1, r4
    1c2c:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
    1c30:	4770      	bx	lr
    1c32:	bf00      	nop
    1c34:	20013fb4 	.word	0x20013fb4
    1c38:	20013d54 	.word	0x20013d54
    1c3c:	20013d4c 	.word	0x20013d4c
    1c40:	e0001004 	.word	0xe0001004
    1c44:	20013d50 	.word	0x20013d50

00001c48 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    1c48:	2827      	cmp	r0, #39	; 0x27
    1c4a:	d81c      	bhi.n	1c86 <pinMode+0x3e>
	p = digital_pin_to_info_PGM + pin;
    1c4c:	0100      	lsls	r0, r0, #4
    1c4e:	4a1a      	ldr	r2, [pc, #104]	; (1cb8 <pinMode+0x70>)
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    1c50:	2901      	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    1c52:	eb02 0300 	add.w	r3, r2, r0
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    1c56:	5810      	ldr	r0, [r2, r0]
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}

void pinMode(uint8_t pin, uint8_t mode)
{
    1c58:	b410      	push	{r4}
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    1c5a:	d015      	beq.n	1c88 <pinMode+0x40>
    1c5c:	2904      	cmp	r1, #4
    1c5e:	d013      	beq.n	1c88 <pinMode+0x40>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    1c60:	68dc      	ldr	r4, [r3, #12]
    1c62:	6842      	ldr	r2, [r0, #4]
    1c64:	ea22 0204 	bic.w	r2, r2, r4
    1c68:	6042      	str	r2, [r0, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    1c6a:	689a      	ldr	r2, [r3, #8]
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
    1c6c:	b1e9      	cbz	r1, 1caa <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
    1c6e:	2902      	cmp	r1, #2
    1c70:	d01e      	beq.n	1cb0 <pinMode+0x68>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    1c72:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    1c74:	685b      	ldr	r3, [r3, #4]
}
    1c76:	f85d 4b04 	ldr.w	r4, [sp], #4
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    1c7a:	bf0c      	ite	eq
    1c7c:	490f      	ldreq	r1, [pc, #60]	; (1cbc <pinMode+0x74>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    1c7e:	4910      	ldrne	r1, [pc, #64]	; (1cc0 <pinMode+0x78>)
    1c80:	6011      	str	r1, [r2, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    1c82:	2215      	movs	r2, #21
    1c84:	601a      	str	r2, [r3, #0]
}
    1c86:	4770      	bx	lr
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    1c88:	68da      	ldr	r2, [r3, #12]
		if (mode == OUTPUT) {
    1c8a:	2901      	cmp	r1, #1
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    1c8c:	6844      	ldr	r4, [r0, #4]
    1c8e:	ea42 0204 	orr.w	r2, r2, r4
    1c92:	6042      	str	r2, [r0, #4]
		if (mode == OUTPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    1c94:	689a      	ldr	r2, [r3, #8]

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
		if (mode == OUTPUT) {
    1c96:	d008      	beq.n	1caa <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    1c98:	f640 0138 	movw	r1, #2104	; 0x838
    1c9c:	6011      	str	r1, [r2, #0]
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    1c9e:	685b      	ldr	r3, [r3, #4]
    1ca0:	2215      	movs	r2, #21
}
    1ca2:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    1ca6:	601a      	str	r2, [r3, #0]
}
    1ca8:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    1caa:	2138      	movs	r1, #56	; 0x38
    1cac:	6011      	str	r1, [r2, #0]
    1cae:	e7f6      	b.n	1c9e <pinMode+0x56>
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    1cb0:	4904      	ldr	r1, [pc, #16]	; (1cc4 <pinMode+0x7c>)
    1cb2:	6011      	str	r1, [r2, #0]
    1cb4:	e7f3      	b.n	1c9e <pinMode+0x56>
    1cb6:	bf00      	nop
    1cb8:	20000118 	.word	0x20000118
    1cbc:	00013038 	.word	0x00013038
    1cc0:	00010038 	.word	0x00010038
    1cc4:	0001f038 	.word	0x0001f038

00001cc8 <unused_interrupt_vector>:
//  R0
// Code from :: https://community.nxp.com/thread/389002
__attribute__((naked))
void unused_interrupt_vector(void)
{
  __asm( ".syntax unified\n"
    1cc8:	2004      	movs	r0, #4
    1cca:	4671      	mov	r1, lr
    1ccc:	4208      	tst	r0, r1
    1cce:	d003      	beq.n	1cd8 <_MSP>
    1cd0:	f3ef 8009 	mrs	r0, PSP
    1cd4:	f000 b808 	b.w	1ce8 <HardFault_HandlerC>

00001cd8 <_MSP>:
    1cd8:	f3ef 8008 	mrs	r0, MSP
    1cdc:	f000 b804 	b.w	1ce8 <HardFault_HandlerC>

00001ce0 <startup_default_early_hook>:
         "B HardFault_HandlerC \n"
         "_MSP: \n"
         "MRS R0, MSP \n"
         "B HardFault_HandlerC \n"
         ".syntax divided\n") ;
}
    1ce0:	4770      	bx	lr
    1ce2:	bf00      	nop

00001ce4 <startup_default_late_hook>:
uint8_t external_psram_size = 0;

extern int main (void);
void startup_default_early_hook(void) {}
void startup_early_hook(void)		__attribute__ ((weak, alias("startup_default_early_hook")));
void startup_default_late_hook(void) {}
    1ce4:	4770      	bx	lr
    1ce6:	bf00      	nop

00001ce8 <HardFault_HandlerC>:
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    1ce8:	4b1b      	ldr	r3, [pc, #108]	; (1d58 <HardFault_HandlerC+0x70>)
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    1cea:	2105      	movs	r1, #5
    1cec:	4a1b      	ldr	r2, [pc, #108]	; (1d5c <HardFault_HandlerC+0x74>)
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    1cee:	2038      	movs	r0, #56	; 0x38
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    1cf0:	b530      	push	{r4, r5, lr}
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    1cf2:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
  GPIO2_DR_SET = (1 << 3);
    1cf6:	2108      	movs	r1, #8
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    1cf8:	f8c2 0338 	str.w	r0, [r2, #824]	; 0x338
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    1cfc:	b083      	sub	sp, #12
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    1cfe:	685a      	ldr	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    1d00:	4c17      	ldr	r4, [pc, #92]	; (1d60 <HardFault_HandlerC+0x78>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    1d02:	430a      	orrs	r2, r1
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    1d04:	4817      	ldr	r0, [pc, #92]	; (1d64 <HardFault_HandlerC+0x7c>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    1d06:	605a      	str	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
    1d08:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    1d0c:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88

  if ( F_CPU_ACTUAL >= 600000000 )
    1d10:	6823      	ldr	r3, [r4, #0]
    1d12:	4283      	cmp	r3, r0
    1d14:	d902      	bls.n	1d1c <HardFault_HandlerC+0x34>
    set_arm_clock(300000000);
    1d16:	4814      	ldr	r0, [pc, #80]	; (1d68 <HardFault_HandlerC+0x80>)
    1d18:	f7ff fd9c 	bl	1854 <set_arm_clock>

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    1d1c:	4d0e      	ldr	r5, [pc, #56]	; (1d58 <HardFault_HandlerC+0x70>)
    1d1e:	2408      	movs	r4, #8
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    1d20:	2000      	movs	r0, #0
    1d22:	4a12      	ldr	r2, [pc, #72]	; (1d6c <HardFault_HandlerC+0x84>)
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    1d24:	4912      	ldr	r1, [pc, #72]	; (1d70 <HardFault_HandlerC+0x88>)
  if ( F_CPU_ACTUAL >= 600000000 )
    set_arm_clock(300000000);

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    1d26:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    1d2a:	9001      	str	r0, [sp, #4]
    1d2c:	9b01      	ldr	r3, [sp, #4]
    1d2e:	4293      	cmp	r3, r2
    1d30:	d805      	bhi.n	1d3e <HardFault_HandlerC+0x56>
    1d32:	9b01      	ldr	r3, [sp, #4]
    1d34:	3301      	adds	r3, #1
    1d36:	9301      	str	r3, [sp, #4]
    1d38:	9b01      	ldr	r3, [sp, #4]
    1d3a:	4293      	cmp	r3, r2
    1d3c:	d9f9      	bls.n	1d32 <HardFault_HandlerC+0x4a>
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    1d3e:	f8c5 4088 	str.w	r4, [r5, #136]	; 0x88
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    1d42:	9001      	str	r0, [sp, #4]
    1d44:	9b01      	ldr	r3, [sp, #4]
    1d46:	428b      	cmp	r3, r1
    1d48:	d8ed      	bhi.n	1d26 <HardFault_HandlerC+0x3e>
    1d4a:	9b01      	ldr	r3, [sp, #4]
    1d4c:	3301      	adds	r3, #1
    1d4e:	9301      	str	r3, [sp, #4]
    1d50:	9b01      	ldr	r3, [sp, #4]
    1d52:	428b      	cmp	r3, r1
    1d54:	d9f9      	bls.n	1d4a <HardFault_HandlerC+0x62>
    1d56:	e7e6      	b.n	1d26 <HardFault_HandlerC+0x3e>
    1d58:	401bc000 	.word	0x401bc000
    1d5c:	401f8000 	.word	0x401f8000
    1d60:	2001228c 	.word	0x2001228c
    1d64:	23c345ff 	.word	0x23c345ff
    1d68:	11e1a300 	.word	0x11e1a300
    1d6c:	000f423f 	.word	0x000f423f
    1d70:	0089543f 	.word	0x0089543f

00001d74 <Panic_Temp_isr>:

static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
    1d74:	b672      	cpsid	i
  IOMUXC_GPR_GPR16 = 0x00000007;
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
    1d76:	4a06      	ldr	r2, [pc, #24]	; (1d90 <Panic_Temp_isr+0x1c>)
static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
  IOMUXC_GPR_GPR16 = 0x00000007;
    1d78:	2107      	movs	r1, #7
    1d7a:	4b06      	ldr	r3, [pc, #24]	; (1d94 <Panic_Temp_isr+0x20>)
    1d7c:	6419      	str	r1, [r3, #64]	; 0x40
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
    1d7e:	6b93      	ldr	r3, [r2, #56]	; 0x38
    1d80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1d84:	6393      	str	r3, [r2, #56]	; 0x38
  asm volatile ("dsb":::"memory");
    1d86:	f3bf 8f4f 	dsb	sy
  while (1) asm ("wfi");
    1d8a:	bf30      	wfi
    1d8c:	e7fd      	b.n	1d8a <Panic_Temp_isr+0x16>
    1d8e:	bf00      	nop
    1d90:	400d4000 	.word	0x400d4000
    1d94:	400ac000 	.word	0x400ac000

00001d98 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    1d98:	6b83      	ldr	r3, [r0, #56]	; 0x38
	}
}
#endif

static void schedule_transfer(endpoint_t *endpoint, uint32_t epmask, transfer_t *transfer)
{
    1d9a:	b4f0      	push	{r4, r5, r6, r7}
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    1d9c:	b11b      	cbz	r3, 1da6 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    1d9e:	6853      	ldr	r3, [r2, #4]
    1da0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    1da4:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    1da6:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    1da8:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    1daa:	b1dc      	cbz	r4, 1de4 <schedule_transfer+0x4c>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    1dac:	4b14      	ldr	r3, [pc, #80]	; (1e00 <schedule_transfer+0x68>)
	__disable_irq();
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
    1dae:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    1db0:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    1db4:	420c      	tst	r4, r1
    1db6:	d11f      	bne.n	1df8 <schedule_transfer+0x60>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    1db8:	4d12      	ldr	r5, [pc, #72]	; (1e04 <schedule_transfer+0x6c>)
    1dba:	682f      	ldr	r7, [r5, #0]
    1dbc:	e004      	b.n	1dc8 <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    1dbe:	682c      	ldr	r4, [r5, #0]
    1dc0:	1be4      	subs	r4, r4, r7
    1dc2:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
    1dc6:	d20b      	bcs.n	1de0 <schedule_transfer+0x48>
		if (USB1_ENDPTPRIME & epmask) goto end;
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    1dc8:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    1dcc:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    1dd0:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    1dd4:	f8d3 61b8 	ldr.w	r6, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    1dd8:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    1ddc:	0464      	lsls	r4, r4, #17
    1dde:	d5ee      	bpl.n	1dbe <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    1de0:	4231      	tst	r1, r6
    1de2:	d109      	bne.n	1df8 <schedule_transfer+0x60>
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
    1de4:	2300      	movs	r3, #0
	USB1_ENDPTPRIME |= epmask;
    1de6:	4c06      	ldr	r4, [pc, #24]	; (1e00 <schedule_transfer+0x68>)
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
    1de8:	6082      	str	r2, [r0, #8]
	endpoint->status = 0;
    1dea:	60c3      	str	r3, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
    1dec:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1df0:	4319      	orrs	r1, r3
    1df2:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    1df6:	6302      	str	r2, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
    1df8:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    1dfa:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    1dfc:	bcf0      	pop	{r4, r5, r6, r7}
    1dfe:	4770      	bx	lr
    1e00:	402e0000 	.word	0x402e0000
    1e04:	e0001004 	.word	0xe0001004

00001e08 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    1e08:	b570      	push	{r4, r5, r6, lr}
    1e0a:	4606      	mov	r6, r0
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    1e0c:	6b00      	ldr	r0, [r0, #48]	; 0x30
	if (first == NULL) return;
    1e0e:	b190      	cbz	r0, 1e36 <run_callbacks+0x2e>
    1e10:	4602      	mov	r2, r0
    1e12:	2400      	movs	r4, #0
    1e14:	e003      	b.n	1e1e <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    1e16:	6812      	ldr	r2, [r2, #0]
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
    1e18:	3401      	adds	r4, #1
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
    1e1a:	2a01      	cmp	r2, #1
    1e1c:	d00c      	beq.n	1e38 <run_callbacks+0x30>

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
	transfer_t *t = first;
	while (1) {
		if (t->status & (1<<7)) {
    1e1e:	6853      	ldr	r3, [r2, #4]
    1e20:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    1e24:	d0f7      	beq.n	1e16 <run_callbacks+0xe>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
    1e26:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    1e28:	b12c      	cbz	r4, 1e36 <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
    1e2a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
			break;
		}
	}
	// do all the callbacks
	while (count) {
		transfer_t *next = (transfer_t *)first->next;
    1e2c:	6805      	ldr	r5, [r0, #0]
		ep->callback_function(first);
    1e2e:	4798      	blx	r3
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    1e30:	3c01      	subs	r4, #1
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
		first = next;
    1e32:	4628      	mov	r0, r5
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    1e34:	d1f9      	bne.n	1e2a <run_callbacks+0x22>
    1e36:	bd70      	pop	{r4, r5, r6, pc}
		count++;
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
			// reached end of list, all need callbacks, new list is empty
			//printf(" end of list\n");
			ep->first_transfer = NULL;
    1e38:	6333      	str	r3, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
    1e3a:	6373      	str	r3, [r6, #52]	; 0x34
			break;
    1e3c:	e7f4      	b.n	1e28 <run_callbacks+0x20>
    1e3e:	bf00      	nop

00001e40 <endpoint0_transmit.constprop.1>:
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
}

static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    1e40:	b5f0      	push	{r4, r5, r6, r7, lr}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
    1e42:	b9e1      	cbnz	r1, 1e7e <endpoint0_transmit.constprop.1+0x3e>
    1e44:	4c21      	ldr	r4, [pc, #132]	; (1ecc <endpoint0_transmit.constprop.1+0x8c>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1e46:	4922      	ldr	r1, [pc, #136]	; (1ed0 <endpoint0_transmit.constprop.1+0x90>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1e48:	2000      	movs	r0, #0
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1e4a:	4b22      	ldr	r3, [pc, #136]	; (1ed4 <endpoint0_transmit.constprop.1+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1e4c:	2201      	movs	r2, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1e4e:	f04f 1501 	mov.w	r5, #65537	; 0x10001
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1e52:	2680      	movs	r6, #128	; 0x80
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1e54:	600a      	str	r2, [r1, #0]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
    1e56:	461a      	mov	r2, r3
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    1e58:	60a1      	str	r1, [r4, #8]
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1e5a:	604e      	str	r6, [r1, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
    1e5c:	60e0      	str	r0, [r4, #12]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1e5e:	f8c3 51bc 	str.w	r5, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    1e62:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    1e66:	4d1c      	ldr	r5, [pc, #112]	; (1ed8 <endpoint0_transmit.constprop.1+0x98>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    1e68:	f044 0401 	orr.w	r4, r4, #1
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1e6c:	6088      	str	r0, [r1, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    1e6e:	f8c3 41b0 	str.w	r4, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    1e72:	6028      	str	r0, [r5, #0]
	while (USB1_ENDPTPRIME) ;
    1e74:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    1e78:	2b00      	cmp	r3, #0
    1e7a:	d1fb      	bne.n	1e74 <endpoint0_transmit.constprop.1+0x34>
}
    1e7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    1e7e:	0409      	lsls	r1, r1, #16
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    1e80:	4b16      	ldr	r3, [pc, #88]	; (1edc <endpoint0_transmit.constprop.1+0x9c>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    1e82:	4d14      	ldr	r5, [pc, #80]	; (1ed4 <endpoint0_transmit.constprop.1+0x94>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    1e84:	2601      	movs	r6, #1
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    1e86:	4c11      	ldr	r4, [pc, #68]	; (1ecc <endpoint0_transmit.constprop.1+0x8c>)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    1e88:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    1e8c:	2200      	movs	r2, #0
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    1e8e:	601e      	str	r6, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    1e90:	6059      	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    1e92:	f500 5c80 	add.w	ip, r0, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    1e96:	64e2      	str	r2, [r4, #76]	; 0x4c
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    1e98:	f500 5e00 	add.w	lr, r0, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    1e9c:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    1e9e:	f500 5740 	add.w	r7, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    1ea2:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    1ea6:	f500 4680 	add.w	r6, r0, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
    1eaa:	462a      	mov	r2, r5
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    1eac:	6098      	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    1eae:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    1eb2:	f8c3 c00c 	str.w	ip, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    1eb6:	f8c3 e010 	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    1eba:	615f      	str	r7, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    1ebc:	619e      	str	r6, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    1ebe:	f8c5 11b0 	str.w	r1, [r5, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    1ec2:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    1ec6:	2b00      	cmp	r3, #0
    1ec8:	d1fb      	bne.n	1ec2 <endpoint0_transmit.constprop.1+0x82>
    1eca:	e7bc      	b.n	1e46 <endpoint0_transmit.constprop.1+0x6>
    1ecc:	20016000 	.word	0x20016000
    1ed0:	20015020 	.word	0x20015020
    1ed4:	402e0000 	.word	0x402e0000
    1ed8:	20013d7c 	.word	0x20013d7c
    1edc:	20015000 	.word	0x20015000

00001ee0 <isr>:
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}


static void isr(void)
{
    1ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    1ee4:	4cac      	ldr	r4, [pc, #688]	; (2198 <isr+0x2b8>)
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}


static void isr(void)
{
    1ee6:	b083      	sub	sp, #12
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    1ee8:	f8d4 8144 	ldr.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    1eec:	f018 0f01 	tst.w	r8, #1
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
	USB1_USBSTS = status;
    1ef0:	f8c4 8144 	str.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    1ef4:	d05e      	beq.n	1fb4 <isr+0xd4>
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    1ef6:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1efa:	2b00      	cmp	r3, #0
    1efc:	d055      	beq.n	1faa <isr+0xca>
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    1efe:	f04f 1b01 	mov.w	fp, #65537	; 0x10001
    1f02:	f8df 92bc 	ldr.w	r9, [pc, #700]	; 21c0 <isr+0x2e0>
    1f06:	4ea5      	ldr	r6, [pc, #660]	; (219c <isr+0x2bc>)
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    1f08:	4625      	mov	r5, r4
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    1f0a:	46da      	mov	sl, fp
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
    1f0c:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
    1f10:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    1f12:	6af2      	ldr	r2, [r6, #44]	; 0x2c
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    1f14:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    1f18:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1f1c:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    1f20:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    1f24:	049f      	lsls	r7, r3, #18
    1f26:	d5f5      	bpl.n	1f14 <isr+0x34>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    1f28:	f8d5 3140 	ldr.w	r3, [r5, #320]	; 0x140
    1f2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    1f30:	f8c5 3140 	str.w	r3, [r5, #320]	; 0x140
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    1f34:	f8c5 a1b4 	str.w	sl, [r5, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    1f38:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    1f3c:	f013 1301 	ands.w	r3, r3, #65537	; 0x10001
    1f40:	d1fa      	bne.n	1f38 <isr+0x58>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    1f42:	b281      	uxth	r1, r0
    1f44:	f240 6781 	movw	r7, #1665	; 0x681
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
    1f48:	f8c9 3000 	str.w	r3, [r9]
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    1f4c:	42b9      	cmp	r1, r7
    1f4e:	f200 80b4 	bhi.w	20ba <isr+0x1da>
    1f52:	f5b1 6fd0 	cmp.w	r1, #1664	; 0x680
    1f56:	f080 81e9 	bcs.w	232c <isr+0x44c>
    1f5a:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
    1f5e:	f000 816b 	beq.w	2238 <isr+0x358>
    1f62:	f200 80f0 	bhi.w	2146 <isr+0x266>
    1f66:	2980      	cmp	r1, #128	; 0x80
    1f68:	f000 8159 	beq.w	221e <isr+0x33e>
    1f6c:	2982      	cmp	r1, #130	; 0x82
    1f6e:	f040 80e2 	bne.w	2136 <isr+0x256>
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
    1f72:	b292      	uxth	r2, r2
    1f74:	f002 017f 	and.w	r1, r2, #127	; 0x7f
		if (endpoint > 7) break;
    1f78:	2907      	cmp	r1, #7
    1f7a:	f200 80dc 	bhi.w	2136 <isr+0x256>
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    1f7e:	0089      	lsls	r1, r1, #2
    1f80:	4887      	ldr	r0, [pc, #540]	; (21a0 <isr+0x2c0>)
		reply_buffer[0] = 0;
    1f82:	4f88      	ldr	r7, [pc, #544]	; (21a4 <isr+0x2c4>)
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    1f84:	4408      	add	r0, r1
    1f86:	6801      	ldr	r1, [r0, #0]
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    1f88:	0610      	lsls	r0, r2, #24
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
    1f8a:	703b      	strb	r3, [r7, #0]
		reply_buffer[1] = 0;
    1f8c:	707b      	strb	r3, [r7, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    1f8e:	f140 820c 	bpl.w	23aa <isr+0x4ca>
    1f92:	03ca      	lsls	r2, r1, #15
    1f94:	d501      	bpl.n	1f9a <isr+0xba>
			reply_buffer[0] = 1;
    1f96:	2301      	movs	r3, #1
    1f98:	703b      	strb	r3, [r7, #0]
		}
		endpoint0_transmit(reply_buffer, 2, 0);
    1f9a:	2102      	movs	r1, #2
    1f9c:	4881      	ldr	r0, [pc, #516]	; (21a4 <isr+0x2c4>)
    1f9e:	f7ff ff4f 	bl	1e40 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1fa2:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1fa6:	2b00      	cmp	r3, #0
    1fa8:	d1b0      	bne.n	1f0c <isr+0x2c>
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    1faa:	4a7b      	ldr	r2, [pc, #492]	; (2198 <isr+0x2b8>)
    1fac:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    1fb0:	2b00      	cmp	r3, #0
    1fb2:	d150      	bne.n	2056 <isr+0x176>
			}
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
    1fb4:	f018 0f40 	tst.w	r8, #64	; 0x40
    1fb8:	d018      	beq.n	1fec <isr+0x10c>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    1fba:	4b77      	ldr	r3, [pc, #476]	; (2198 <isr+0x2b8>)
    1fbc:	f8d3 11ac 	ldr.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    1fc0:	461a      	mov	r2, r3
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    1fc2:	f8c3 11ac 	str.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    1fc6:	f8d3 11bc 	ldr.w	r1, [r3, #444]	; 0x1bc
    1fca:	f8c3 11bc 	str.w	r1, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    1fce:	f8d2 41b0 	ldr.w	r4, [r2, #432]	; 0x1b0
    1fd2:	4b71      	ldr	r3, [pc, #452]	; (2198 <isr+0x2b8>)
    1fd4:	2c00      	cmp	r4, #0
    1fd6:	d1fa      	bne.n	1fce <isr+0xee>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    1fd8:	f04f 32ff 	mov.w	r2, #4294967295
    1fdc:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    1fe0:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
			// we took too long to respond :(
			// TODO; is this ever really a problem?
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
    1fe4:	f000 fd1e 	bl	2a24 <usb_serial_reset>
		#endif
		endpointN_notify_mask = 0;
    1fe8:	4b6f      	ldr	r3, [pc, #444]	; (21a8 <isr+0x2c8>)
    1fea:	601c      	str	r4, [r3, #0]
			// shut off USB - easier to see results in protocol analyzer
			//USB1_USBCMD &= ~USB_USBCMD_RS;
			//printf("shut off USB\n");
		//}
	}
	if (status & USB_USBSTS_TI0) {
    1fec:	f018 7f80 	tst.w	r8, #16777216	; 0x1000000
    1ff0:	d003      	beq.n	1ffa <isr+0x11a>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    1ff2:	4b6e      	ldr	r3, [pc, #440]	; (21ac <isr+0x2cc>)
    1ff4:	681b      	ldr	r3, [r3, #0]
    1ff6:	b103      	cbz	r3, 1ffa <isr+0x11a>
    1ff8:	4798      	blx	r3
	}
	if (status & USB_USBSTS_TI1) {
    1ffa:	f018 7f00 	tst.w	r8, #33554432	; 0x2000000
    1ffe:	d003      	beq.n	2008 <isr+0x128>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    2000:	4b6b      	ldr	r3, [pc, #428]	; (21b0 <isr+0x2d0>)
    2002:	681b      	ldr	r3, [r3, #0]
    2004:	b103      	cbz	r3, 2008 <isr+0x128>
    2006:	4798      	blx	r3
	}
	if (status & USB_USBSTS_PCI) {
    2008:	f018 0f04 	tst.w	r8, #4
    200c:	d008      	beq.n	2020 <isr+0x140>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    200e:	4b62      	ldr	r3, [pc, #392]	; (2198 <isr+0x2b8>)
    2010:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    2014:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    2018:	d04c      	beq.n	20b4 <isr+0x1d4>
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
    201a:	4b66      	ldr	r3, [pc, #408]	; (21b4 <isr+0x2d4>)
    201c:	2201      	movs	r2, #1
    201e:	701a      	strb	r2, [r3, #0]
		//printf("suspend\n");
	}
	if (status & USB_USBSTS_UEI) {
		//printf("error\n");
	}
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    2020:	4b5d      	ldr	r3, [pc, #372]	; (2198 <isr+0x2b8>)
    2022:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    2026:	0612      	lsls	r2, r2, #24
    2028:	d512      	bpl.n	2050 <isr+0x170>
    202a:	f018 0f80 	tst.w	r8, #128	; 0x80
    202e:	d00f      	beq.n	2050 <isr+0x170>
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
    2030:	4961      	ldr	r1, [pc, #388]	; (21b8 <isr+0x2d8>)
    2032:	780a      	ldrb	r2, [r1, #0]
    2034:	b162      	cbz	r2, 2050 <isr+0x170>
			if (--usb_reboot_timer == 0) {
    2036:	3a01      	subs	r2, #1
    2038:	b2d2      	uxtb	r2, r2
    203a:	700a      	strb	r2, [r1, #0]
    203c:	b942      	cbnz	r2, 2050 <isr+0x170>
	__enable_irq();
}

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
    203e:	495f      	ldr	r1, [pc, #380]	; (21bc <isr+0x2dc>)
    2040:	780a      	ldrb	r2, [r1, #0]
    2042:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    2046:	700a      	strb	r2, [r1, #0]
	if (sof_usage == 0) {
    2048:	2a00      	cmp	r2, #0
    204a:	f000 8232 	beq.w	24b2 <isr+0x5d2>
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
			if (--usb_reboot_timer == 0) {
				usb_stop_sof_interrupts(NUM_INTERFACE);
				asm("bkpt #251"); // run bootloader
    204e:	befb      	bkpt	0x00fb
		#endif
		#ifdef FLIGHTSIM_INTERFACE
		usb_flightsim_flush_output();
		#endif
	}
}
    2050:	b003      	add	sp, #12
    2052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    2056:	495a      	ldr	r1, [pc, #360]	; (21c0 <isr+0x2e0>)
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
    2058:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    205c:	6808      	ldr	r0, [r1, #0]
    205e:	4203      	tst	r3, r0
    2060:	f040 81e6 	bne.w	2430 <isr+0x550>
				endpoint0_notify_mask = 0;
				endpoint0_complete();
			}
			completestatus &= endpointN_notify_mask;
    2064:	4a50      	ldr	r2, [pc, #320]	; (21a8 <isr+0x2c8>)
    2066:	6815      	ldr	r5, [r2, #0]
#if 1
			if (completestatus) {
    2068:	401d      	ands	r5, r3
    206a:	d0a3      	beq.n	1fb4 <isr+0xd4>

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
    206c:	0c2f      	lsrs	r7, r5, #16
    206e:	d00f      	beq.n	2090 <isr+0x1b0>
    2070:	4e4a      	ldr	r6, [pc, #296]	; (219c <isr+0x2bc>)
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
    2072:	f04f 0901 	mov.w	r9, #1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
    2076:	fa97 f4a7 	rbit	r4, r7
    207a:	fab4 f484 	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    207e:	eb06 10c4 	add.w	r0, r6, r4, lsl #7
					tx &= ~(1<<p);
    2082:	fa09 f404 	lsl.w	r4, r9, r4

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    2086:	3040      	adds	r0, #64	; 0x40
    2088:	f7ff febe 	bl	1e08 <run_callbacks>
#if 1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
    208c:	43a7      	bics	r7, r4
    208e:	d1f2      	bne.n	2076 <isr+0x196>
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
    2090:	b2ad      	uxth	r5, r5
				while(rx) {
    2092:	2d00      	cmp	r5, #0
    2094:	d08e      	beq.n	1fb4 <isr+0xd4>
    2096:	4e41      	ldr	r6, [pc, #260]	; (219c <isr+0x2bc>)
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
					rx &= ~(1<<p);
    2098:	2701      	movs	r7, #1
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
    209a:	fa95 f4a5 	rbit	r4, r5
    209e:	fab4 f484 	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2);
    20a2:	eb06 10c4 	add.w	r0, r6, r4, lsl #7
					rx &= ~(1<<p);
    20a6:	fa07 f404 	lsl.w	r4, r7, r4

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
    20aa:	f7ff fead 	bl	1e08 <run_callbacks>
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
    20ae:	43a5      	bics	r5, r4
    20b0:	d1f3      	bne.n	209a <isr+0x1ba>
    20b2:	e77f      	b.n	1fb4 <isr+0xd4>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
		} else {
			//printf("port at 12 Mbit\n");
			usb_high_speed = 0;
    20b4:	4a3f      	ldr	r2, [pc, #252]	; (21b4 <isr+0x2d4>)
    20b6:	7013      	strb	r3, [r2, #0]
    20b8:	e7b2      	b.n	2020 <isr+0x140>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    20ba:	f242 0721 	movw	r7, #8225	; 0x2021
    20be:	42b9      	cmp	r1, r7
    20c0:	d035      	beq.n	212e <isr+0x24e>
    20c2:	f200 8089 	bhi.w	21d8 <isr+0x2f8>
    20c6:	f5b1 6f08 	cmp.w	r1, #2176	; 0x880
    20ca:	f000 8121 	beq.w	2310 <isr+0x430>
    20ce:	f5b1 6f10 	cmp.w	r1, #2304	; 0x900
    20d2:	d130      	bne.n	2136 <isr+0x256>
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    20d4:	f3c0 4007 	ubfx	r0, r0, #16, #8
    20d8:	4a3a      	ldr	r2, [pc, #232]	; (21c4 <isr+0x2e4>)
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    20da:	493b      	ldr	r1, [pc, #236]	; (21c8 <isr+0x2e8>)
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    20dc:	7010      	strb	r0, [r2, #0]
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    20de:	4f3b      	ldr	r7, [pc, #236]	; (21cc <isr+0x2ec>)
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    20e0:	4a3b      	ldr	r2, [pc, #236]	; (21d0 <isr+0x2f0>)
    20e2:	9301      	str	r3, [sp, #4]
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    20e4:	f8c5 71c8 	str.w	r7, [r5, #456]	; 0x1c8
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    20e8:	f8c5 11cc 	str.w	r1, [r5, #460]	; 0x1cc
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    20ec:	f8c5 21d0 	str.w	r2, [r5, #464]	; 0x1d0
		#endif
		#if defined(ENDPOINT7_CONFIG)
		USB1_ENDPTCTRL7 = ENDPOINT7_CONFIG;
		#endif
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_configure();
    20f0:	f000 fc9a 	bl	2a28 <usb_serial_configure>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    20f4:	4a37      	ldr	r2, [pc, #220]	; (21d4 <isr+0x2f4>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    20f6:	9b01      	ldr	r3, [sp, #4]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    20f8:	2180      	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    20fa:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    20fc:	64b2      	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    20fe:	6051      	str	r1, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2100:	6010      	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    2102:	64f3      	str	r3, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    2104:	f8c5 b1bc 	str.w	fp, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    2108:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    210c:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    210e:	f441 3280 	orr.w	r2, r1, #65536	; 0x10000
    2112:	f8c5 21b0 	str.w	r2, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    2116:	4a2a      	ldr	r2, [pc, #168]	; (21c0 <isr+0x2e0>)
    2118:	6013      	str	r3, [r2, #0]
	while (USB1_ENDPTPRIME) ;
    211a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    211e:	2b00      	cmp	r3, #0
    2120:	d1fb      	bne.n	211a <isr+0x23a>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    2122:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    2126:	2b00      	cmp	r3, #0
    2128:	f47f aef0 	bne.w	1f0c <isr+0x2c>
    212c:	e73d      	b.n	1faa <isr+0xca>
		// fall through to next case, to always send ZLP ACK
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
    212e:	0c11      	lsrs	r1, r2, #16
    2130:	2907      	cmp	r1, #7
    2132:	f000 813e 	beq.w	23b2 <isr+0x4d2>
			return;
		}
		break;
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    2136:	f8c4 b1c0 	str.w	fp, [r4, #448]	; 0x1c0
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    213a:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    213e:	2b00      	cmp	r3, #0
    2140:	f47f aee4 	bne.w	1f0c <isr+0x2c>
    2144:	e731      	b.n	1faa <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    2146:	f240 3702 	movw	r7, #770	; 0x302
    214a:	42b9      	cmp	r1, r7
    214c:	f000 80b0 	beq.w	22b0 <isr+0x3d0>
    2150:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
    2154:	d1ef      	bne.n	2136 <isr+0x256>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2156:	4a1f      	ldr	r2, [pc, #124]	; (21d4 <isr+0x2f4>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2158:	2180      	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    215a:	2701      	movs	r7, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    215c:	64f3      	str	r3, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    215e:	64b2      	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2160:	6017      	str	r7, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2162:	6051      	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    2164:	f8c5 b1bc 	str.w	fp, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    2168:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    216c:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    216e:	f441 3380 	orr.w	r3, r1, #65536	; 0x10000
    2172:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    2176:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    217a:	2b00      	cmp	r3, #0
    217c:	d1fb      	bne.n	2176 <isr+0x296>

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    217e:	0c03      	lsrs	r3, r0, #16
    2180:	065b      	lsls	r3, r3, #25
    2182:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    2186:	f8c5 3154 	str.w	r3, [r5, #340]	; 0x154
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    218a:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    218e:	2b00      	cmp	r3, #0
    2190:	f47f aebc 	bne.w	1f0c <isr+0x2c>
    2194:	e709      	b.n	1faa <isr+0xca>
    2196:	bf00      	nop
    2198:	402e0000 	.word	0x402e0000
    219c:	20016000 	.word	0x20016000
    21a0:	402e01c0 	.word	0x402e01c0
    21a4:	20013d90 	.word	0x20013d90
    21a8:	20013d6c 	.word	0x20013d6c
    21ac:	20013d68 	.word	0x20013d68
    21b0:	20013d74 	.word	0x20013d74
    21b4:	20013d78 	.word	0x20013d78
    21b8:	20013d80 	.word	0x20013d80
    21bc:	20013d70 	.word	0x20013d70
    21c0:	20013d7c 	.word	0x20013d7c
    21c4:	20013da0 	.word	0x20013da0
    21c8:	000200c8 	.word	0x000200c8
    21cc:	00cc0002 	.word	0x00cc0002
    21d0:	00c80002 	.word	0x00c80002
    21d4:	20015020 	.word	0x20015020
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    21d8:	f242 2321 	movw	r3, #8737	; 0x2221
    21dc:	4299      	cmp	r1, r3
    21de:	d05b      	beq.n	2298 <isr+0x3b8>
    21e0:	f242 3321 	movw	r3, #8993	; 0x2321
    21e4:	4299      	cmp	r1, r3
    21e6:	d1a6      	bne.n	2136 <isr+0x256>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    21e8:	4bb5      	ldr	r3, [pc, #724]	; (24c0 <isr+0x5e0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    21ea:	2280      	movs	r2, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    21ec:	2100      	movs	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    21ee:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    21f0:	64b3      	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    21f2:	6018      	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    21f4:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    21f6:	64f1      	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    21f8:	f8c4 b1bc 	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    21fc:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    2200:	6099      	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    2202:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
    2206:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    220a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    220e:	2b00      	cmp	r3, #0
    2210:	d1fb      	bne.n	220a <isr+0x32a>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    2212:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    2216:	2b00      	cmp	r3, #0
    2218:	f47f ae78 	bne.w	1f0c <isr+0x2c>
    221c:	e6c5      	b.n	1faa <isr+0xca>
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    221e:	4aa9      	ldr	r2, [pc, #676]	; (24c4 <isr+0x5e4>)
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
    2220:	2102      	movs	r1, #2
    2222:	4610      	mov	r0, r2
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    2224:	7013      	strb	r3, [r2, #0]
		reply_buffer[1] = 0;
    2226:	7053      	strb	r3, [r2, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    2228:	f7ff fe0a 	bl	1e40 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    222c:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    2230:	2b00      	cmp	r3, #0
    2232:	f47f ae6b 	bne.w	1f0c <isr+0x2c>
    2236:	e6b8      	b.n	1faa <isr+0xca>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    2238:	b292      	uxth	r2, r2
    223a:	f002 037f 	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    223e:	2b07      	cmp	r3, #7
    2240:	f63f af79 	bhi.w	2136 <isr+0x256>
		dir = setup.wIndex & 0x80;
		if (dir) {
    2244:	f012 0f80 	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    2248:	ea4f 0383 	mov.w	r3, r3, lsl #2
    224c:	4a9e      	ldr	r2, [pc, #632]	; (24c8 <isr+0x5e8>)
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    224e:	f04f 0100 	mov.w	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2252:	f04f 0001 	mov.w	r0, #1
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    2256:	441a      	add	r2, r3
    2258:	6813      	ldr	r3, [r2, #0]
    225a:	bf14      	ite	ne
    225c:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    2260:	f023 0301 	biceq.w	r3, r3, #1
    2264:	6013      	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2266:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2268:	4b95      	ldr	r3, [pc, #596]	; (24c0 <isr+0x5e0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    226a:	64f1      	str	r1, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    226c:	64b3      	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    226e:	6018      	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2270:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    2272:	f8c4 b1bc 	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    2276:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    227a:	6099      	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    227c:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
    2280:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    2284:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2288:	2b00      	cmp	r3, #0
    228a:	d1fb      	bne.n	2284 <isr+0x3a4>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    228c:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    2290:	2b00      	cmp	r3, #0
    2292:	f47f ae3b 	bne.w	1f0c <isr+0x2c>
    2296:	e688      	b.n	1faa <isr+0xca>
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    2298:	b292      	uxth	r2, r2
    229a:	2a00      	cmp	r2, #0
    229c:	d1a4      	bne.n	21e8 <isr+0x308>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    229e:	4b8b      	ldr	r3, [pc, #556]	; (24cc <isr+0x5ec>)
			usb_cdc_line_rtsdtr = setup.wValue;
    22a0:	f3c0 4007 	ubfx	r0, r0, #16, #8
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    22a4:	4a8a      	ldr	r2, [pc, #552]	; (24d0 <isr+0x5f0>)
    22a6:	6819      	ldr	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    22a8:	4b8a      	ldr	r3, [pc, #552]	; (24d4 <isr+0x5f4>)
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    22aa:	6011      	str	r1, [r2, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    22ac:	7018      	strb	r0, [r3, #0]
    22ae:	e79b      	b.n	21e8 <isr+0x308>
			reply_buffer[0] = 1;
		}
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    22b0:	b292      	uxth	r2, r2
    22b2:	f002 037f 	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    22b6:	2b07      	cmp	r3, #7
    22b8:	f63f af3d 	bhi.w	2136 <isr+0x256>
		dir = setup.wIndex & 0x80;
		if (dir) {
    22bc:	f012 0f80 	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    22c0:	ea4f 0383 	mov.w	r3, r3, lsl #2
    22c4:	4a80      	ldr	r2, [pc, #512]	; (24c8 <isr+0x5e8>)
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    22c6:	f04f 0100 	mov.w	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    22ca:	f04f 0001 	mov.w	r0, #1
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    22ce:	441a      	add	r2, r3
    22d0:	6813      	ldr	r3, [r2, #0]
    22d2:	bf14      	ite	ne
    22d4:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    22d8:	f043 0301 	orreq.w	r3, r3, #1
    22dc:	6013      	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    22de:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    22e0:	4b77      	ldr	r3, [pc, #476]	; (24c0 <isr+0x5e0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    22e2:	64f1      	str	r1, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    22e4:	64b3      	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    22e6:	6018      	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    22e8:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    22ea:	f8c4 b1bc 	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    22ee:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    22f2:	6099      	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    22f4:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
    22f8:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    22fc:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2300:	2b00      	cmp	r3, #0
    2302:	d1fb      	bne.n	22fc <isr+0x41c>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    2304:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    2308:	2b00      	cmp	r3, #0
    230a:	f47f adff 	bne.w	1f0c <isr+0x2c>
    230e:	e64c      	b.n	1faa <isr+0xca>
		usb_audio_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    2310:	4a71      	ldr	r2, [pc, #452]	; (24d8 <isr+0x5f8>)
		endpoint0_transmit(reply_buffer, 1, 0);
    2312:	2101      	movs	r1, #1
		usb_audio_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    2314:	4b6b      	ldr	r3, [pc, #428]	; (24c4 <isr+0x5e4>)
    2316:	7812      	ldrb	r2, [r2, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    2318:	4618      	mov	r0, r3
		usb_audio_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    231a:	701a      	strb	r2, [r3, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    231c:	f7ff fd90 	bl	1e40 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    2320:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    2324:	2b00      	cmp	r3, #0
    2326:	f47f adf1 	bne.w	1f0c <isr+0x2c>
    232a:	e63e      	b.n	1faa <isr+0xca>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    232c:	4b6b      	ldr	r3, [pc, #428]	; (24dc <isr+0x5fc>)
    232e:	6859      	ldr	r1, [r3, #4]
    2330:	2900      	cmp	r1, #0
    2332:	f43f af00 	beq.w	2136 <isr+0x256>
    2336:	0c00      	lsrs	r0, r0, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    2338:	fa1f fe82 	uxth.w	lr, r2
    233c:	e004      	b.n	2348 <isr+0x468>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    233e:	330c      	adds	r3, #12
    2340:	6859      	ldr	r1, [r3, #4]
    2342:	2900      	cmp	r1, #0
    2344:	f43f aef7 	beq.w	2136 <isr+0x256>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    2348:	881f      	ldrh	r7, [r3, #0]
    234a:	4287      	cmp	r7, r0
    234c:	d1f7      	bne.n	233e <isr+0x45e>
    234e:	885f      	ldrh	r7, [r3, #2]
    2350:	4577      	cmp	r7, lr
    2352:	d1f4      	bne.n	233e <isr+0x45e>
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
    2354:	0a07      	lsrs	r7, r0, #8
    2356:	2f03      	cmp	r7, #3
    2358:	f000 80e9 	beq.w	252e <isr+0x64e>
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
    235c:	891b      	ldrh	r3, [r3, #8]
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    235e:	0c12      	lsrs	r2, r2, #16
    2360:	4293      	cmp	r3, r2
    2362:	bf28      	it	cs
    2364:	4613      	movcs	r3, r2

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
    2366:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    236a:	f000 80d1 	beq.w	2510 <isr+0x630>
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
    236e:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
    2372:	f000 808b 	beq.w	248c <isr+0x5ac>
    2376:	4f5a      	ldr	r7, [pc, #360]	; (24e0 <isr+0x600>)
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
					usb_descriptor_buffer[1] = 7;
				} else {
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    2378:	461a      	mov	r2, r3
    237a:	9301      	str	r3, [sp, #4]
    237c:	4638      	mov	r0, r7
    237e:	f000 fe7b 	bl	3078 <memcpy>
    2382:	9b01      	ldr	r3, [sp, #4]
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    2384:	f027 021f 	bic.w	r2, r7, #31
	uint32_t end_addr = (uint32_t)addr + size;
    2388:	441f      	add	r7, r3
	asm volatile("": : :"memory");
	asm("dsb");
    238a:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    238e:	4955      	ldr	r1, [pc, #340]	; (24e4 <isr+0x604>)
    2390:	600a      	str	r2, [r1, #0]
		location += 32;
    2392:	3220      	adds	r2, #32
	} while (location < end_addr);
    2394:	4297      	cmp	r7, r2
    2396:	d8fa      	bhi.n	238e <isr+0x4ae>
	asm("dsb");
    2398:	f3bf 8f4f 	dsb	sy
	asm("isb");
    239c:	f3bf 8f6f 	isb	sy
				}
				// prep transmit
				arm_dcache_flush_delete(usb_descriptor_buffer, datalen);
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    23a0:	484f      	ldr	r0, [pc, #316]	; (24e0 <isr+0x600>)
    23a2:	4619      	mov	r1, r3
    23a4:	f7ff fd4c 	bl	1e40 <endpoint0_transmit.constprop.1>
    23a8:	e5fb      	b.n	1fa2 <isr+0xc2>
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    23aa:	07cb      	lsls	r3, r1, #31
    23ac:	f57f adf5 	bpl.w	1f9a <isr+0xba>
    23b0:	e5f1      	b.n	1f96 <isr+0xb6>
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    23b2:	4f4d      	ldr	r7, [pc, #308]	; (24e8 <isr+0x608>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    23b4:	f04f 0e01 	mov.w	lr, #1
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
    23b8:	60f3      	str	r3, [r6, #12]
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    23ba:	494c      	ldr	r1, [pc, #304]	; (24ec <isr+0x60c>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    23bc:	4b4c      	ldr	r3, [pc, #304]	; (24f0 <isr+0x610>)
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    23be:	6038      	str	r0, [r7, #0]
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    23c0:	f8c3 e000 	str.w	lr, [r3]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    23c4:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    23c6:	60b3      	str	r3, [r6, #8]
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
    23c8:	494a      	ldr	r1, [pc, #296]	; (24f4 <isr+0x614>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    23ca:	f8d5 01b0 	ldr.w	r0, [r5, #432]	; 0x1b0
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    23ce:	607a      	str	r2, [r7, #4]
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    23d0:	f501 5780 	add.w	r7, r1, #4096	; 0x1000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    23d4:	ea40 020e 	orr.w	r2, r0, lr
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    23d8:	6099      	str	r1, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    23da:	f501 5e00 	add.w	lr, r1, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    23de:	f501 5040 	add.w	r0, r1, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    23e2:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    23e6:	f8c5 21b0 	str.w	r2, [r5, #432]	; 0x1b0
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    23ea:	60df      	str	r7, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    23ec:	f8c3 e010 	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    23f0:	6158      	str	r0, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    23f2:	6199      	str	r1, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
    23f4:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    23f8:	2b00      	cmp	r3, #0
    23fa:	d1fb      	bne.n	23f4 <isr+0x514>
	}
	endpoint0_transfer_ack.next = 1;
    23fc:	4a30      	ldr	r2, [pc, #192]	; (24c0 <isr+0x5e0>)
    23fe:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2400:	f248 0180 	movw	r1, #32896	; 0x8080
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    2404:	64f3      	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2406:	6010      	str	r0, [r2, #0]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    2408:	f44f 3080 	mov.w	r0, #65536	; 0x10000
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    240c:	64b2      	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    240e:	6051      	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    2410:	f8c5 b1bc 	str.w	fp, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    2414:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    2418:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    241a:	ea41 0300 	orr.w	r3, r1, r0
    241e:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    2422:	f8c9 0000 	str.w	r0, [r9]
	while (USB1_ENDPTPRIME) ;
    2426:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    242a:	2b00      	cmp	r3, #0
    242c:	d1fb      	bne.n	2426 <isr+0x546>
    242e:	e5b8      	b.n	1fa2 <isr+0xc2>

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    2430:	482d      	ldr	r0, [pc, #180]	; (24e8 <isr+0x608>)
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    2432:	f242 0421 	movw	r4, #8225	; 0x2021
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    2436:	2600      	movs	r6, #0

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    2438:	8805      	ldrh	r5, [r0, #0]
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    243a:	600e      	str	r6, [r1, #0]

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    243c:	42a5      	cmp	r5, r4

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    243e:	6840      	ldr	r0, [r0, #4]
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    2440:	f47f ae10 	bne.w	2064 <isr+0x184>
    2444:	b281      	uxth	r1, r0
    2446:	2900      	cmp	r1, #0
    2448:	f47f ae0c 	bne.w	2064 <isr+0x184>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    244c:	4929      	ldr	r1, [pc, #164]	; (24f4 <isr+0x614>)
    244e:	4c2a      	ldr	r4, [pc, #168]	; (24f8 <isr+0x618>)
    2450:	c903      	ldmia	r1, {r0, r1}
    2452:	0c0d      	lsrs	r5, r1, #16
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    2454:	2886      	cmp	r0, #134	; 0x86
	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    2456:	6020      	str	r0, [r4, #0]
    2458:	80a1      	strh	r1, [r4, #4]
    245a:	71a5      	strb	r5, [r4, #6]
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    245c:	f47f ae02 	bne.w	2064 <isr+0x184>
}


void usb_start_sof_interrupts(int interface)
{
	__disable_irq();
    2460:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    2462:	4826      	ldr	r0, [pc, #152]	; (24fc <isr+0x61c>)
    2464:	7801      	ldrb	r1, [r0, #0]
    2466:	f041 0104 	orr.w	r1, r1, #4
    246a:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    246c:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    2470:	0608      	lsls	r0, r1, #24
    2472:	d406      	bmi.n	2482 <isr+0x5a2>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    2474:	f041 0180 	orr.w	r1, r1, #128	; 0x80
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    2478:	2080      	movs	r0, #128	; 0x80
    247a:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    247e:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	}
	__enable_irq();
    2482:	b662      	cpsie	i
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
			usb_start_sof_interrupts(NUM_INTERFACE);
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    2484:	4a1e      	ldr	r2, [pc, #120]	; (2500 <isr+0x620>)
    2486:	2150      	movs	r1, #80	; 0x50
    2488:	7011      	strb	r1, [r2, #0]
    248a:	e5eb      	b.n	2064 <isr+0x184>
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    248c:	481d      	ldr	r0, [pc, #116]	; (2504 <isr+0x624>)
					memcpy(usb_descriptor_buffer, src, datalen);
    248e:	461a      	mov	r2, r3
    2490:	4f13      	ldr	r7, [pc, #76]	; (24e0 <isr+0x600>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    2492:	f890 e000 	ldrb.w	lr, [r0]
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
    2496:	491c      	ldr	r1, [pc, #112]	; (2508 <isr+0x628>)
    2498:	481c      	ldr	r0, [pc, #112]	; (250c <isr+0x62c>)
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
    249a:	9301      	str	r3, [sp, #4]
    249c:	f1be 0f00 	cmp.w	lr, #0
    24a0:	bf08      	it	eq
    24a2:	4601      	moveq	r1, r0
    24a4:	4638      	mov	r0, r7
    24a6:	f000 fde7 	bl	3078 <memcpy>
					usb_descriptor_buffer[1] = 7;
    24aa:	2207      	movs	r2, #7
    24ac:	9b01      	ldr	r3, [sp, #4]
    24ae:	707a      	strb	r2, [r7, #1]
    24b0:	e768      	b.n	2384 <isr+0x4a4>

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
	if (sof_usage == 0) {
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    24b2:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    24b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    24ba:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    24be:	e5c6      	b.n	204e <isr+0x16e>
    24c0:	20015020 	.word	0x20015020
    24c4:	20013d90 	.word	0x20013d90
    24c8:	402e01c0 	.word	0x402e01c0
    24cc:	20013d54 	.word	0x20013d54
    24d0:	20016288 	.word	0x20016288
    24d4:	20013ee8 	.word	0x20013ee8
    24d8:	20013da0 	.word	0x20013da0
    24dc:	20000398 	.word	0x20000398
    24e0:	20200000 	.word	0x20200000
    24e4:	e000ef70 	.word	0xe000ef70
    24e8:	20013d88 	.word	0x20013d88
    24ec:	00070080 	.word	0x00070080
    24f0:	20015000 	.word	0x20015000
    24f4:	20013d98 	.word	0x20013d98
    24f8:	20016280 	.word	0x20016280
    24fc:	20013d70 	.word	0x20013d70
    2500:	20013d80 	.word	0x20013d80
    2504:	20013d78 	.word	0x20013d78
    2508:	60001694 	.word	0x60001694
    250c:	600016d8 	.word	0x600016d8

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
    2510:	480a      	ldr	r0, [pc, #40]	; (253c <isr+0x65c>)
					memcpy(usb_descriptor_buffer, src, datalen);
    2512:	461a      	mov	r2, r3
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    2514:	490a      	ldr	r1, [pc, #40]	; (2540 <isr+0x660>)
					if (usb_high_speed) src = usb_config_descriptor_480;
    2516:	7807      	ldrb	r7, [r0, #0]
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    2518:	480a      	ldr	r0, [pc, #40]	; (2544 <isr+0x664>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
    251a:	9301      	str	r3, [sp, #4]
    251c:	2f00      	cmp	r7, #0
    251e:	bf08      	it	eq
    2520:	4601      	moveq	r1, r0
    2522:	4809      	ldr	r0, [pc, #36]	; (2548 <isr+0x668>)
    2524:	f000 fda8 	bl	3078 <memcpy>
    2528:	4f07      	ldr	r7, [pc, #28]	; (2548 <isr+0x668>)
    252a:	9b01      	ldr	r3, [sp, #4]
    252c:	e72a      	b.n	2384 <isr+0x4a4>
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    252e:	0c12      	lsrs	r2, r2, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
    2530:	780b      	ldrb	r3, [r1, #0]
    2532:	4293      	cmp	r3, r2
    2534:	bf28      	it	cs
    2536:	4613      	movcs	r3, r2
    2538:	e719      	b.n	236e <isr+0x48e>
    253a:	bf00      	nop
    253c:	20013d78 	.word	0x20013d78
    2540:	600016d8 	.word	0x600016d8
    2544:	60001694 	.word	0x60001694
    2548:	20200000 	.word	0x20200000

0000254c <usb_config_rx>:
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    254c:	2a00      	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    254e:	f1a0 0202 	sub.w	r2, r0, #2
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    2552:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    2556:	bf14      	ite	ne
    2558:	2700      	movne	r7, #0
    255a:	f04f 5700 	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    255e:	2a02      	cmp	r2, #2
    2560:	d901      	bls.n	2566 <usb_config_rx+0x1a>
    2562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    2566:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
    256a:	f8df 9040 	ldr.w	r9, [pc, #64]	; 25ac <usb_config_rx+0x60>
    256e:	460d      	mov	r5, r1
    2570:	4604      	mov	r4, r0
    2572:	eb0a 0609 	add.w	r6, sl, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    2576:	2100      	movs	r1, #0
    2578:	2240      	movs	r2, #64	; 0x40
    257a:	4698      	mov	r8, r3
    257c:	4630      	mov	r0, r6
    257e:	f001 fdf5 	bl	416c <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    2582:	2001      	movs	r0, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    2584:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
    2588:	f84a 1009 	str.w	r1, [sl, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    258c:	f8c6 8038 	str.w	r8, [r6, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    2590:	60b0      	str	r0, [r6, #8]
void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
    2592:	f1b8 0f00 	cmp.w	r8, #0
    2596:	d0e4      	beq.n	2562 <usb_config_rx+0x16>
    2598:	4b03      	ldr	r3, [pc, #12]	; (25a8 <usb_config_rx+0x5c>)
    259a:	40a0      	lsls	r0, r4
    259c:	681c      	ldr	r4, [r3, #0]
    259e:	4320      	orrs	r0, r4
    25a0:	6018      	str	r0, [r3, #0]
    25a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    25a6:	bf00      	nop
    25a8:	20013d6c 	.word	0x20013d6c
    25ac:	20016000 	.word	0x20016000

000025b0 <usb_config_tx>:
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    25b0:	2a00      	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    25b2:	f1a0 0202 	sub.w	r2, r0, #2
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    25b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    25ba:	bf14      	ite	ne
    25bc:	2700      	movne	r7, #0
    25be:	f04f 5700 	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    25c2:	2a02      	cmp	r2, #2
    25c4:	d901      	bls.n	25ca <usb_config_tx+0x1a>
    25c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    25ca:	2240      	movs	r2, #64	; 0x40

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    25cc:	01c5      	lsls	r5, r0, #7
    25ce:	f8df 9044 	ldr.w	r9, [pc, #68]	; 2614 <usb_config_tx+0x64>
    25d2:	4688      	mov	r8, r1
    25d4:	4415      	add	r5, r2
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    25d6:	2100      	movs	r1, #0
    25d8:	4604      	mov	r4, r0
    25da:	461e      	mov	r6, r3

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    25dc:	eb05 0a09 	add.w	sl, r5, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    25e0:	4650      	mov	r0, sl
    25e2:	f001 fdc3 	bl	416c <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    25e6:	2201      	movs	r2, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    25e8:	ea47 4108 	orr.w	r1, r7, r8, lsl #16
    25ec:	f845 1009 	str.w	r1, [r5, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    25f0:	f8ca 6038 	str.w	r6, [sl, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    25f4:	f8ca 2008 	str.w	r2, [sl, #8]
void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    25f8:	2e00      	cmp	r6, #0
    25fa:	d0e4      	beq.n	25c6 <usb_config_tx+0x16>
    25fc:	f104 0010 	add.w	r0, r4, #16
    2600:	4b03      	ldr	r3, [pc, #12]	; (2610 <usb_config_tx+0x60>)
    2602:	4082      	lsls	r2, r0
    2604:	6818      	ldr	r0, [r3, #0]
    2606:	4302      	orrs	r2, r0
    2608:	601a      	str	r2, [r3, #0]
    260a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    260e:	bf00      	nop
    2610:	20013d6c 	.word	0x20013d6c
    2614:	20016000 	.word	0x20016000

00002618 <usb_prepare_transfer>:


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    2618:	0412      	lsls	r2, r2, #16
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
    261a:	6081      	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
	transfer->pointer3 = addr + 12288;
	transfer->pointer4 = addr + 16384;
	transfer->callback_param = param;
    261c:	61c3      	str	r3, [r0, #28]


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    261e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
}



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
    2622:	b4f0      	push	{r4, r5, r6, r7}
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    2624:	6042      	str	r2, [r0, #4]



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    2626:	2701      	movs	r7, #1
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    2628:	f501 5680 	add.w	r6, r1, #4096	; 0x1000
	transfer->pointer2 = addr + 8192;
    262c:	f501 5500 	add.w	r5, r1, #8192	; 0x2000
	transfer->pointer3 = addr + 12288;
    2630:	f501 5440 	add.w	r4, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    2634:	f501 4280 	add.w	r2, r1, #16384	; 0x4000



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    2638:	6007      	str	r7, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    263a:	60c6      	str	r6, [r0, #12]
	transfer->pointer2 = addr + 8192;
    263c:	6105      	str	r5, [r0, #16]
	transfer->pointer3 = addr + 12288;
    263e:	6144      	str	r4, [r0, #20]
	transfer->pointer4 = addr + 16384;
    2640:	6182      	str	r2, [r0, #24]
	transfer->callback_param = param;
}
    2642:	bcf0      	pop	{r4, r5, r6, r7}
    2644:	4770      	bx	lr
    2646:	bf00      	nop

00002648 <usb_transmit>:
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    2648:	1e83      	subs	r3, r0, #2
    264a:	2b02      	cmp	r3, #2
    264c:	d900      	bls.n	2650 <usb_transmit+0x8>
    264e:	4770      	bx	lr
		count--;
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    2650:	b430      	push	{r4, r5}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    2652:	4b06      	ldr	r3, [pc, #24]	; (266c <usb_transmit+0x24>)
    2654:	f100 0410 	add.w	r4, r0, #16
    2658:	2501      	movs	r5, #1
    265a:	460a      	mov	r2, r1
    265c:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    2660:	fa05 f104 	lsl.w	r1, r5, r4
}
    2664:	bc30      	pop	{r4, r5}
void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    2666:	f7ff bb97 	b.w	1d98 <schedule_transfer>
    266a:	bf00      	nop
    266c:	20016040 	.word	0x20016040

00002670 <usb_receive>:
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    2670:	1e83      	subs	r3, r0, #2
    2672:	2b02      	cmp	r3, #2
    2674:	d900      	bls.n	2678 <usb_receive+0x8>
    2676:	4770      	bx	lr
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
    2678:	b410      	push	{r4}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    267a:	4b05      	ldr	r3, [pc, #20]	; (2690 <usb_receive+0x20>)
    267c:	2401      	movs	r4, #1
    267e:	460a      	mov	r2, r1
    2680:	fa04 f100 	lsl.w	r1, r4, r0
    2684:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
}
    2688:	f85d 4b04 	ldr.w	r4, [sp], #4
void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    268c:	f7ff bb84 	b.w	1d98 <schedule_transfer>
    2690:	20016000 	.word	0x20016000

00002694 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    2694:	6840      	ldr	r0, [r0, #4]
#endif
}
    2696:	4770      	bx	lr

00002698 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    2698:	4a12      	ldr	r2, [pc, #72]	; (26e4 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    269a:	4b13      	ldr	r3, [pc, #76]	; (26e8 <usb_init_serialnumber+0x50>)
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    269c:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    26a0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    26a4:	4298      	cmp	r0, r3
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    26a6:	b510      	push	{r4, lr}
    26a8:	b084      	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    26aa:	d802      	bhi.n	26b2 <usb_init_serialnumber+0x1a>
    26ac:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    26b0:	0040      	lsls	r0, r0, #1
    26b2:	4c0e      	ldr	r4, [pc, #56]	; (26ec <usb_init_serialnumber+0x54>)
	ultoa(num, buf, 10);
    26b4:	a901      	add	r1, sp, #4
    26b6:	220a      	movs	r2, #10
    26b8:	f000 fd78 	bl	31ac <ultoa>
    26bc:	a901      	add	r1, sp, #4
	for (i=0; i<10; i++) {
    26be:	2300      	movs	r3, #0
    26c0:	4620      	mov	r0, r4
		char c = buf[i];
    26c2:	f811 2b01 	ldrb.w	r2, [r1], #1
    26c6:	3301      	adds	r3, #1
		if (!c) break;
    26c8:	b13a      	cbz	r2, 26da <usb_init_serialnumber+0x42>

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    26ca:	2b0a      	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    26cc:	f820 2f02 	strh.w	r2, [r0, #2]!

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    26d0:	d1f7      	bne.n	26c2 <usb_init_serialnumber+0x2a>
    26d2:	2316      	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    26d4:	7023      	strb	r3, [r4, #0]
}
    26d6:	b004      	add	sp, #16
    26d8:	bd10      	pop	{r4, pc}
    26da:	005b      	lsls	r3, r3, #1
    26dc:	b2db      	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    26de:	7023      	strb	r3, [r4, #0]
}
    26e0:	b004      	add	sp, #16
    26e2:	bd10      	pop	{r4, pc}
    26e4:	401f4400 	.word	0x401f4400
    26e8:	0098967f 	.word	0x0098967f
    26ec:	200122a4 	.word	0x200122a4

000026f0 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    26f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    26f2:	4914      	ldr	r1, [pc, #80]	; (2744 <rx_queue_transfer+0x54>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    26f4:	f44f 3700 	mov.w	r7, #131072	; 0x20000
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    26f8:	4d13      	ldr	r5, [pc, #76]	; (2748 <rx_queue_transfer+0x58>)
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    26fa:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    26fc:	eb01 2440 	add.w	r4, r1, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    2700:	4e12      	ldr	r6, [pc, #72]	; (274c <rx_queue_transfer+0x5c>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    2702:	4a13      	ldr	r2, [pc, #76]	; (2750 <rx_queue_transfer+0x60>)
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    2704:	eb05 1540 	add.w	r5, r5, r0, lsl #5
    2708:	4621      	mov	r1, r4
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    270a:	6017      	str	r7, [r2, #0]
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    270c:	4628      	mov	r0, r5
    270e:	8832      	ldrh	r2, [r6, #0]
    2710:	f7ff ff82 	bl	2618 <usb_prepare_transfer>
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    2714:	8831      	ldrh	r1, [r6, #0]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    2716:	f024 031f 	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    271a:	4421      	add	r1, r4
	asm volatile("": : :"memory");
	asm("dsb");
    271c:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    2720:	4a0c      	ldr	r2, [pc, #48]	; (2754 <rx_queue_transfer+0x64>)
    2722:	6013      	str	r3, [r2, #0]
		location += 32;
    2724:	3320      	adds	r3, #32
	} while (location < end_addr);
    2726:	4299      	cmp	r1, r3
    2728:	d8fb      	bhi.n	2722 <rx_queue_transfer+0x32>
	asm("dsb");
    272a:	f3bf 8f4f 	dsb	sy
	asm("isb");
    272e:	f3bf 8f6f 	isb	sy
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    2732:	2003      	movs	r0, #3
    2734:	4629      	mov	r1, r5
    2736:	f7ff ff9b 	bl	2670 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    273a:	4b07      	ldr	r3, [pc, #28]	; (2758 <rx_queue_transfer+0x68>)
    273c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    2740:	601a      	str	r2, [r3, #0]
    2742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2744:	20200060 	.word	0x20200060
    2748:	20013dc0 	.word	0x20013dc0
    274c:	20013ece 	.word	0x20013ece
    2750:	e000e18c 	.word	0xe000e18c
    2754:	e000ef5c 	.word	0xe000ef5c
    2758:	e000e10c 	.word	0xe000e10c

0000275c <rx_event>:
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    275c:	4a24      	ldr	r2, [pc, #144]	; (27f0 <rx_event+0x94>)
    275e:	6843      	ldr	r3, [r0, #4]
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
    2760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    2764:	f3c3 430e 	ubfx	r3, r3, #16, #15
    2768:	8814      	ldrh	r4, [r2, #0]
	int i = t->callback_param;
    276a:	69c5      	ldr	r5, [r0, #28]
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    276c:	1ae4      	subs	r4, r4, r3
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    276e:	2c00      	cmp	r4, #0
    2770:	dd38      	ble.n	27e4 <rx_event+0x88>
		// received a packet with data
		uint32_t head = rx_head;
    2772:	4920      	ldr	r1, [pc, #128]	; (27f4 <rx_event+0x98>)
		if (head != rx_tail) {
    2774:	4a20      	ldr	r2, [pc, #128]	; (27f8 <rx_event+0x9c>)
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    2776:	780b      	ldrb	r3, [r1, #0]
		if (head != rx_tail) {
    2778:	7812      	ldrb	r2, [r2, #0]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    277a:	b2db      	uxtb	r3, r3
		if (head != rx_tail) {
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    277c:	481f      	ldr	r0, [pc, #124]	; (27fc <rx_event+0xa0>)
			uint32_t count = rx_count[ii];
    277e:	4e20      	ldr	r6, [pc, #128]	; (2800 <rx_event+0xa4>)
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
		if (head != rx_tail) {
    2780:	4293      	cmp	r3, r2
    2782:	d007      	beq.n	2794 <rx_event+0x38>
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    2784:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    2788:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    278c:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    2790:	4294      	cmp	r4, r2
    2792:	d912      	bls.n	27ba <rx_event+0x5e>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    2794:	3301      	adds	r3, #1
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
    2796:	2200      	movs	r2, #0
    2798:	4f1a      	ldr	r7, [pc, #104]	; (2804 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    279a:	2b08      	cmp	r3, #8
				// TODO: trigger serialEvent
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
    279c:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		rx_index[i] = 0;
    27a0:	f827 2015 	strh.w	r2, [r7, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
		rx_head = head;
		rx_available += len;
    27a4:	4e18      	ldr	r6, [pc, #96]	; (2808 <rx_event+0xac>)
    27a6:	bf94      	ite	ls
    27a8:	b2da      	uxtbls	r2, r3
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    27aa:	4613      	movhi	r3, r2
		rx_list[head] = i;
		rx_head = head;
    27ac:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    27ae:	6832      	ldr	r2, [r6, #0]
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
    27b0:	54c5      	strb	r5, [r0, r3]
		rx_head = head;
		rx_available += len;
    27b2:	4414      	add	r4, r2
    27b4:	6034      	str	r4, [r6, #0]
    27b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    27ba:	4b14      	ldr	r3, [pc, #80]	; (280c <rx_event+0xb0>)
    27bc:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    27c0:	4622      	mov	r2, r4
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    27c2:	4427      	add	r7, r4
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    27c4:	eb03 2145 	add.w	r1, r3, r5, lsl #9
    27c8:	4418      	add	r0, r3
    27ca:	f000 fc55 	bl	3078 <memcpy>
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
    27ce:	4a0e      	ldr	r2, [pc, #56]	; (2808 <rx_event+0xac>)
				rx_queue_transfer(i);
    27d0:	4628      	mov	r0, r5
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    27d2:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    27d6:	6813      	ldr	r3, [r2, #0]
    27d8:	441c      	add	r4, r3
    27da:	6014      	str	r4, [r2, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    27dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
				rx_queue_transfer(i);
    27e0:	f7ff bf86 	b.w	26f0 <rx_queue_transfer>
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    27e4:	4628      	mov	r0, r5
	}
}
    27e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    27ea:	f7ff bf81 	b.w	26f0 <rx_queue_transfer>
    27ee:	bf00      	nop
    27f0:	20013ece 	.word	0x20013ece
    27f4:	20013ee4 	.word	0x20013ee4
    27f8:	20013ec0 	.word	0x20013ec0
    27fc:	20013ec4 	.word	0x20013ec4
    2800:	20013ed0 	.word	0x20013ed0
    2804:	20013da4 	.word	0x20013da4
    2808:	20013ee0 	.word	0x20013ee0
    280c:	20200060 	.word	0x20200060

00002810 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    2810:	4b1e      	ldr	r3, [pc, #120]	; (288c <usb_serial_flush_callback+0x7c>)
    2812:	781a      	ldrb	r2, [r3, #0]
    2814:	b95a      	cbnz	r2, 282e <usb_serial_flush_callback+0x1e>
    2816:	f002 03ff 	and.w	r3, r2, #255	; 0xff
	if (!usb_configuration) return;
    281a:	4a1d      	ldr	r2, [pc, #116]	; (2890 <usb_serial_flush_callback+0x80>)
    281c:	7812      	ldrb	r2, [r2, #0]
    281e:	b132      	cbz	r2, 282e <usb_serial_flush_callback+0x1e>
	tx_available = 0;
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
    2820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
    2824:	4d1b      	ldr	r5, [pc, #108]	; (2894 <usb_serial_flush_callback+0x84>)
    2826:	882a      	ldrh	r2, [r5, #0]
    2828:	b912      	cbnz	r2, 2830 <usb_serial_flush_callback+0x20>
    282a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    282e:	4770      	bx	lr
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    2830:	4e19      	ldr	r6, [pc, #100]	; (2898 <usb_serial_flush_callback+0x88>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    2832:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    2836:	4f19      	ldr	r7, [pc, #100]	; (289c <usb_serial_flush_callback+0x8c>)
    2838:	7831      	ldrb	r1, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    283a:	4642      	mov	r2, r8
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    283c:	4c18      	ldr	r4, [pc, #96]	; (28a0 <usb_serial_flush_callback+0x90>)
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    283e:	eb07 1741 	add.w	r7, r7, r1, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    2842:	eb04 24c1 	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    2846:	4638      	mov	r0, r7
    2848:	4621      	mov	r1, r4
    284a:	f7ff fee5 	bl	2618 <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    284e:	eb08 0204 	add.w	r2, r8, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    2852:	f024 011f 	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    2856:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    285a:	4b12      	ldr	r3, [pc, #72]	; (28a4 <usb_serial_flush_callback+0x94>)
    285c:	6019      	str	r1, [r3, #0]
		location += 32;
    285e:	3120      	adds	r1, #32
	} while (location < end_addr);
    2860:	428a      	cmp	r2, r1
    2862:	d8fb      	bhi.n	285c <usb_serial_flush_callback+0x4c>
	asm("dsb");
    2864:	f3bf 8f4f 	dsb	sy
	asm("isb");
    2868:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    286c:	2004      	movs	r0, #4
    286e:	4639      	mov	r1, r7
    2870:	f7ff feea 	bl	2648 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    2874:	7833      	ldrb	r3, [r6, #0]
    2876:	4a08      	ldr	r2, [pc, #32]	; (2898 <usb_serial_flush_callback+0x88>)
    2878:	3301      	adds	r3, #1
    287a:	b2db      	uxtb	r3, r3
    287c:	2b03      	cmp	r3, #3
    287e:	bf88      	it	hi
    2880:	2300      	movhi	r3, #0
    2882:	7013      	strb	r3, [r2, #0]
	tx_available = 0;
    2884:	2300      	movs	r3, #0
    2886:	802b      	strh	r3, [r5, #0]
    2888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    288c:	20013db6 	.word	0x20013db6
    2890:	20013da0 	.word	0x20013da0
    2894:	20013ee6 	.word	0x20013ee6
    2898:	20013db7 	.word	0x20013db7
    289c:	20013f00 	.word	0x20013f00
    28a0:	20201060 	.word	0x20201060
    28a4:	e000ef70 	.word	0xe000ef70

000028a8 <usb_serial_write.part.1>:
{
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
    28a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    28ac:	b085      	sub	sp, #20
    28ae:	9002      	str	r0, [sp, #8]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    28b0:	9101      	str	r1, [sp, #4]
    28b2:	2900      	cmp	r1, #0
    28b4:	f000 80a2 	beq.w	29fc <usb_serial_write.part.1+0x154>
    28b8:	2300      	movs	r3, #0
    28ba:	f8df 815c 	ldr.w	r8, [pc, #348]	; 2a18 <usb_serial_write.part.1+0x170>
    28be:	f8df 914c 	ldr.w	r9, [pc, #332]	; 2a0c <usb_serial_write.part.1+0x164>
    28c2:	9300      	str	r3, [sp, #0]
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
    28c4:	4e4e      	ldr	r6, [pc, #312]	; (2a00 <usb_serial_write.part.1+0x158>)
    28c6:	f8b8 3000 	ldrh.w	r3, [r8]
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    28ca:	f8df a150 	ldr.w	sl, [pc, #336]	; 2a1c <usb_serial_write.part.1+0x174>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
	do {
		SCB_CACHE_DCCIMVAC = location;
    28ce:	f8df b150 	ldr.w	fp, [pc, #336]	; 2a20 <usb_serial_write.part.1+0x178>
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
    28d2:	4a4c      	ldr	r2, [pc, #304]	; (2a04 <usb_serial_write.part.1+0x15c>)
    28d4:	7814      	ldrb	r4, [r2, #0]
    28d6:	4a4c      	ldr	r2, [pc, #304]	; (2a08 <usb_serial_write.part.1+0x160>)
    28d8:	eb02 1744 	add.w	r7, r2, r4, lsl #5
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    28dc:	2b00      	cmp	r3, #0
    28de:	d16e      	bne.n	29be <usb_serial_write.part.1+0x116>
    28e0:	461d      	mov	r5, r3
    28e2:	461c      	mov	r4, r3
    28e4:	e014      	b.n	2910 <usb_serial_write.part.1+0x68>
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    28e6:	f899 3000 	ldrb.w	r3, [r9]
				}
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
    28ea:	b904      	cbnz	r4, 28ee <usb_serial_write.part.1+0x46>
				wait_begin_at = systick_millis_count;
    28ec:	6835      	ldr	r5, [r6, #0]
    28ee:	2401      	movs	r4, #1
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    28f0:	2b00      	cmp	r3, #0
    28f2:	d15e      	bne.n	29b2 <usb_serial_write.part.1+0x10a>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    28f4:	6833      	ldr	r3, [r6, #0]
    28f6:	1b5b      	subs	r3, r3, r5
    28f8:	2b78      	cmp	r3, #120	; 0x78
    28fa:	d879      	bhi.n	29f0 <usb_serial_write.part.1+0x148>
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    28fc:	f89a 3000 	ldrb.w	r3, [sl]
    2900:	2b00      	cmp	r3, #0
    2902:	d056      	beq.n	29b2 <usb_serial_write.part.1+0x10a>
			yield();
    2904:	f000 fb40 	bl	2f88 <yield>
	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    2908:	f8b8 3000 	ldrh.w	r3, [r8]
    290c:	2b00      	cmp	r3, #0
    290e:	d154      	bne.n	29ba <usb_serial_write.part.1+0x112>
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
    2910:	4638      	mov	r0, r7
    2912:	f7ff febf 	bl	2694 <usb_transfer_status>
			if (!(status & 0x80)) {
    2916:	f010 0080 	ands.w	r0, r0, #128	; 0x80
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    291a:	4a3c      	ldr	r2, [pc, #240]	; (2a0c <usb_serial_write.part.1+0x164>)
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
			if (!(status & 0x80)) {
    291c:	d1e3      	bne.n	28e6 <usb_serial_write.part.1+0x3e>
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    291e:	f44f 6300 	mov.w	r3, #2048	; 0x800
    2922:	4a38      	ldr	r2, [pc, #224]	; (2a04 <usb_serial_write.part.1+0x15c>)
				transmit_previous_timeout = 0;
    2924:	f889 0000 	strb.w	r0, [r9]
    2928:	7814      	ldrb	r4, [r2, #0]
    292a:	461a      	mov	r2, r3
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    292c:	f8a8 3000 	strh.w	r3, [r8]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    2930:	02e4      	lsls	r4, r4, #11
		if (size >= tx_available) {
    2932:	9d01      	ldr	r5, [sp, #4]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    2934:	4936      	ldr	r1, [pc, #216]	; (2a10 <usb_serial_write.part.1+0x168>)
    2936:	4420      	add	r0, r4
		if (size >= tx_available) {
    2938:	4295      	cmp	r5, r2
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    293a:	4408      	add	r0, r1
		if (size >= tx_available) {
    293c:	d343      	bcc.n	29c6 <usb_serial_write.part.1+0x11e>
			memcpy(txdata, data, tx_available);
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    293e:	440c      	add	r4, r1
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
    2940:	9902      	ldr	r1, [sp, #8]
    2942:	f000 fb99 	bl	3078 <memcpy>
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    2946:	2300      	movs	r3, #0
    2948:	4621      	mov	r1, r4
    294a:	f44f 6200 	mov.w	r2, #2048	; 0x800
    294e:	4638      	mov	r0, r7
    2950:	f7ff fe62 	bl	2618 <usb_prepare_transfer>
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    2954:	f024 031f 	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    2958:	f504 6400 	add.w	r4, r4, #2048	; 0x800
	asm volatile("": : :"memory");
	asm("dsb");
    295c:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    2960:	f8cb 3000 	str.w	r3, [fp]
		location += 32;
    2964:	3320      	adds	r3, #32
	} while (location < end_addr);
    2966:	429c      	cmp	r4, r3
    2968:	d8fa      	bhi.n	2960 <usb_serial_write.part.1+0xb8>
	asm("dsb");
    296a:	f3bf 8f4f 	dsb	sy
	asm("isb");
    296e:	f3bf 8f6f 	isb	sy
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    2972:	2004      	movs	r0, #4
    2974:	4639      	mov	r1, r7
    2976:	f7ff fe67 	bl	2648 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    297a:	4b22      	ldr	r3, [pc, #136]	; (2a04 <usb_serial_write.part.1+0x15c>)
    297c:	4a21      	ldr	r2, [pc, #132]	; (2a04 <usb_serial_write.part.1+0x15c>)
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
    297e:	2100      	movs	r1, #0
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    2980:	781b      	ldrb	r3, [r3, #0]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    2982:	4824      	ldr	r0, [pc, #144]	; (2a14 <usb_serial_write.part.1+0x16c>)
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    2984:	3301      	adds	r3, #1
    2986:	b2db      	uxtb	r3, r3
    2988:	2b03      	cmp	r3, #3
    298a:	bf88      	it	hi
    298c:	2300      	movhi	r3, #0
    298e:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    2990:	f8b8 2000 	ldrh.w	r2, [r8]
			sent += tx_available;
    2994:	9b00      	ldr	r3, [sp, #0]
			data += tx_available;
			tx_available = 0;
    2996:	f8a8 1000 	strh.w	r1, [r8]
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
			sent += tx_available;
    299a:	4413      	add	r3, r2
    299c:	9300      	str	r3, [sp, #0]
			data += tx_available;
    299e:	9b02      	ldr	r3, [sp, #8]
    29a0:	4413      	add	r3, r2
    29a2:	9302      	str	r3, [sp, #8]
    29a4:	460b      	mov	r3, r1
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    29a6:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    29aa:	9901      	ldr	r1, [sp, #4]
    29ac:	1a8a      	subs	r2, r1, r2
    29ae:	9201      	str	r2, [sp, #4]
    29b0:	d18f      	bne.n	28d2 <usb_serial_write.part.1+0x2a>
    29b2:	9800      	ldr	r0, [sp, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    29b4:	b005      	add	sp, #20
    29b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    29ba:	4a12      	ldr	r2, [pc, #72]	; (2a04 <usb_serial_write.part.1+0x15c>)
    29bc:	7814      	ldrb	r4, [r2, #0]
    29be:	461a      	mov	r2, r3
    29c0:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    29c4:	e7b4      	b.n	2930 <usb_serial_write.part.1+0x88>
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
    29c6:	9c01      	ldr	r4, [sp, #4]
    29c8:	9902      	ldr	r1, [sp, #8]
    29ca:	4622      	mov	r2, r4
    29cc:	9303      	str	r3, [sp, #12]
    29ce:	f000 fb53 	bl	3078 <memcpy>
			tx_available -= size;
    29d2:	9b03      	ldr	r3, [sp, #12]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    29d4:	4a0f      	ldr	r2, [pc, #60]	; (2a14 <usb_serial_write.part.1+0x16c>)
    29d6:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
    29da:	1b1b      	subs	r3, r3, r4
    29dc:	f8a8 3000 	strh.w	r3, [r8]
    29e0:	9b00      	ldr	r3, [sp, #0]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    29e2:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    29e6:	4618      	mov	r0, r3
    29e8:	4420      	add	r0, r4
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    29ea:	b005      	add	sp, #20
    29ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    29f0:	2301      	movs	r3, #1
				return sent;
    29f2:	9800      	ldr	r0, [sp, #0]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    29f4:	7013      	strb	r3, [r2, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    29f6:	b005      	add	sp, #20
    29f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    29fc:	9801      	ldr	r0, [sp, #4]
    29fe:	e7d9      	b.n	29b4 <usb_serial_write.part.1+0x10c>
    2a00:	20013d54 	.word	0x20013d54
    2a04:	20013db7 	.word	0x20013db7
    2a08:	20013f00 	.word	0x20013f00
    2a0c:	20013ee5 	.word	0x20013ee5
    2a10:	20201060 	.word	0x20201060
    2a14:	402e0000 	.word	0x402e0000
    2a18:	20013ee6 	.word	0x20013ee6
    2a1c:	20013da0 	.word	0x20013da0
    2a20:	e000ef70 	.word	0xe000ef70

00002a24 <usb_serial_reset>:
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);


void usb_serial_reset(void)
{
    2a24:	4770      	bx	lr
    2a26:	bf00      	nop

00002a28 <usb_serial_configure>:
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    2a28:	4b31      	ldr	r3, [pc, #196]	; (2af0 <usb_serial_configure+0xc8>)
	printf("usb_serial_reset\n");
	// deallocate all transfer descriptors
}

void usb_serial_configure(void)
{
    2a2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    2a2e:	781b      	ldrb	r3, [r3, #0]
		tx_packet_size = CDC_TX_SIZE_480;
    2a30:	4f30      	ldr	r7, [pc, #192]	; (2af4 <usb_serial_configure+0xcc>)
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    2a32:	2b00      	cmp	r3, #0
    2a34:	d054      	beq.n	2ae0 <usb_serial_configure+0xb8>
		tx_packet_size = CDC_TX_SIZE_480;
    2a36:	f44f 7300 	mov.w	r3, #512	; 0x200
		rx_packet_size = CDC_RX_SIZE_480;
    2a3a:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 2b28 <usb_serial_configure+0x100>
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
    2a3e:	803b      	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    2a40:	f8a8 3000 	strh.w	r3, [r8]
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    2a44:	2100      	movs	r1, #0
    2a46:	2280      	movs	r2, #128	; 0x80
    2a48:	482b      	ldr	r0, [pc, #172]	; (2af8 <usb_serial_configure+0xd0>)
	tx_head = 0;
    2a4a:	460d      	mov	r5, r1
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    2a4c:	4e2b      	ldr	r6, [pc, #172]	; (2afc <usb_serial_configure+0xd4>)
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    2a4e:	f001 fb8d 	bl	416c <memset>
	tx_head = 0;
    2a52:	4c2b      	ldr	r4, [pc, #172]	; (2b00 <usb_serial_configure+0xd8>)
	tx_available = 0;
    2a54:	4b2b      	ldr	r3, [pc, #172]	; (2b04 <usb_serial_configure+0xdc>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    2a56:	4629      	mov	r1, r5
    2a58:	f44f 7280 	mov.w	r2, #256	; 0x100
    2a5c:	482a      	ldr	r0, [pc, #168]	; (2b08 <usb_serial_configure+0xe0>)
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    2a5e:	7025      	strb	r5, [r4, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    2a60:	462c      	mov	r4, r5
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    2a62:	801d      	strh	r5, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    2a64:	f001 fb82 	bl	416c <memset>
	memset(rx_count, 0, sizeof(rx_count));
    2a68:	6035      	str	r5, [r6, #0]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    2a6a:	462b      	mov	r3, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    2a6c:	6075      	str	r5, [r6, #4]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    2a6e:	462a      	mov	r2, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    2a70:	60b5      	str	r5, [r6, #8]
    2a72:	60f5      	str	r5, [r6, #12]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    2a74:	4925      	ldr	r1, [pc, #148]	; (2b0c <usb_serial_configure+0xe4>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    2a76:	4e26      	ldr	r6, [pc, #152]	; (2b10 <usb_serial_configure+0xe8>)
	rx_head = 0;
	rx_tail = 0;
    2a78:	4826      	ldr	r0, [pc, #152]	; (2b14 <usb_serial_configure+0xec>)
	rx_available = 0;
    2a7a:	f8df e0b0 	ldr.w	lr, [pc, #176]	; 2b2c <usb_serial_configure+0x104>
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    2a7e:	700d      	strb	r5, [r1, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    2a80:	2110      	movs	r1, #16
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
    2a82:	7005      	strb	r5, [r0, #0]
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    2a84:	2002      	movs	r0, #2
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    2a86:	6035      	str	r5, [r6, #0]
    2a88:	6075      	str	r5, [r6, #4]
    2a8a:	60b5      	str	r5, [r6, #8]
    2a8c:	60f5      	str	r5, [r6, #12]
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
    2a8e:	f8ce 5000 	str.w	r5, [lr]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    2a92:	f7ff fd8d 	bl	25b0 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    2a96:	f8b8 1000 	ldrh.w	r1, [r8]
    2a9a:	462a      	mov	r2, r5
    2a9c:	4b1e      	ldr	r3, [pc, #120]	; (2b18 <usb_serial_configure+0xf0>)
    2a9e:	2003      	movs	r0, #3
    2aa0:	f7ff fd54 	bl	254c <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    2aa4:	462b      	mov	r3, r5
    2aa6:	8839      	ldrh	r1, [r7, #0]
    2aa8:	2201      	movs	r2, #1
    2aaa:	2004      	movs	r0, #4
    2aac:	f7ff fd80 	bl	25b0 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    2ab0:	4620      	mov	r0, r4
    2ab2:	3401      	adds	r4, #1
    2ab4:	f7ff fe1c 	bl	26f0 <rx_queue_transfer>
    2ab8:	2c08      	cmp	r4, #8
    2aba:	d1f9      	bne.n	2ab0 <usb_serial_configure+0x88>
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
	USB1_GPTIMER0CTRL = 0;
    2abc:	4b17      	ldr	r3, [pc, #92]	; (2b1c <usb_serial_configure+0xf4>)
	USB1_GPTIMER0LD = microseconds - 1;
    2abe:	224a      	movs	r2, #74	; 0x4a
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    2ac0:	4817      	ldr	r0, [pc, #92]	; (2b20 <usb_serial_configure+0xf8>)
	USB1_GPTIMER0CTRL = 0;
    2ac2:	2100      	movs	r1, #0
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    2ac4:	4c17      	ldr	r4, [pc, #92]	; (2b24 <usb_serial_configure+0xfc>)
    2ac6:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    2ac8:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    2acc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    2ad0:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    2ad4:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    2ad8:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    2adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    2ae0:	2340      	movs	r3, #64	; 0x40
		rx_packet_size = CDC_RX_SIZE_12;
    2ae2:	f8df 8044 	ldr.w	r8, [pc, #68]	; 2b28 <usb_serial_configure+0x100>
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    2ae6:	803b      	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_12;
    2ae8:	f8a8 3000 	strh.w	r3, [r8]
    2aec:	e7aa      	b.n	2a44 <usb_serial_configure+0x1c>
    2aee:	bf00      	nop
    2af0:	20013d78 	.word	0x20013d78
    2af4:	20013db4 	.word	0x20013db4
    2af8:	20013f00 	.word	0x20013f00
    2afc:	20013ed0 	.word	0x20013ed0
    2b00:	20013db7 	.word	0x20013db7
    2b04:	20013ee6 	.word	0x20013ee6
    2b08:	20013dc0 	.word	0x20013dc0
    2b0c:	20013ee4 	.word	0x20013ee4
    2b10:	20013da4 	.word	0x20013da4
    2b14:	20013ec0 	.word	0x20013ec0
    2b18:	0000275d 	.word	0x0000275d
    2b1c:	402e0000 	.word	0x402e0000
    2b20:	20013d68 	.word	0x20013d68
    2b24:	00002811 	.word	0x00002811
    2b28:	20013ece 	.word	0x20013ece
    2b2c:	20013ee0 	.word	0x20013ee0

00002b30 <usb_serial_read>:
int usb_serial_read(void *buffer, uint32_t size)
{
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    2b30:	4b31      	ldr	r3, [pc, #196]	; (2bf8 <usb_serial_read+0xc8>)
    2b32:	f44f 3200 	mov.w	r2, #131072	; 0x20000

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    2b36:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    2b3a:	601a      	str	r2, [r3, #0]

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    2b3c:	b083      	sub	sp, #12
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    2b3e:	4b2f      	ldr	r3, [pc, #188]	; (2bfc <usb_serial_read+0xcc>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    2b40:	4689      	mov	r9, r1
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    2b42:	781c      	ldrb	r4, [r3, #0]
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    2b44:	2900      	cmp	r1, #0
    2b46:	d053      	beq.n	2bf0 <usb_serial_read+0xc0>
    2b48:	4b2d      	ldr	r3, [pc, #180]	; (2c00 <usb_serial_read+0xd0>)
    2b4a:	b2e4      	uxtb	r4, r4
    2b4c:	781b      	ldrb	r3, [r3, #0]
    2b4e:	429c      	cmp	r4, r3
    2b50:	d050      	beq.n	2bf4 <usb_serial_read+0xc4>
    2b52:	4682      	mov	sl, r0
    2b54:	2700      	movs	r7, #0
    2b56:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 2c18 <usb_serial_read+0xe8>
		if (++tail > RX_NUM) tail = 0;
    2b5a:	3401      	adds	r4, #1
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    2b5c:	4b29      	ldr	r3, [pc, #164]	; (2c04 <usb_serial_read+0xd4>)
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
    2b5e:	ebc7 0809 	rsb	r8, r7, r9
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    2b62:	4650      	mov	r0, sl
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    2b64:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    2b66:	9301      	str	r3, [sp, #4]
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
    2b68:	4b27      	ldr	r3, [pc, #156]	; (2c08 <usb_serial_read+0xd8>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    2b6a:	bf28      	it	cs
    2b6c:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    2b6e:	5d1d      	ldrb	r5, [r3, r4]
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    2b70:	4b24      	ldr	r3, [pc, #144]	; (2c04 <usb_serial_read+0xd4>)
    2b72:	f833 e015 	ldrh.w	lr, [r3, r5, lsl #1]
    2b76:	4b25      	ldr	r3, [pc, #148]	; (2c0c <usb_serial_read+0xdc>)
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    2b78:	eb0e 2145 	add.w	r1, lr, r5, lsl #9
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    2b7c:	f833 6015 	ldrh.w	r6, [r3, r5, lsl #1]
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    2b80:	4b23      	ldr	r3, [pc, #140]	; (2c10 <usb_serial_read+0xe0>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    2b82:	ebce 0606 	rsb	r6, lr, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    2b86:	4419      	add	r1, r3
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    2b88:	45b0      	cmp	r8, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    2b8a:	4632      	mov	r2, r6
			p += avail;
			rx_available -= avail;
			count += avail;
    2b8c:	4437      	add	r7, r6
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    2b8e:	d219      	bcs.n	2bc4 <usb_serial_read+0x94>
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    2b90:	eb0e 2145 	add.w	r1, lr, r5, lsl #9
    2b94:	4642      	mov	r2, r8
    2b96:	4419      	add	r1, r3
    2b98:	f000 fa6e 	bl	3078 <memcpy>
			rx_available -= len;
			rx_index[i] += len;
    2b9c:	9b01      	ldr	r3, [sp, #4]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    2b9e:	f8db 1000 	ldr.w	r1, [fp]
    2ba2:	4648      	mov	r0, r9
			rx_index[i] += len;
    2ba4:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    2ba8:	ebc8 0101 	rsb	r1, r8, r1
			rx_index[i] += len;
    2bac:	4490      	add	r8, r2
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    2bae:	f8cb 1000 	str.w	r1, [fp]
			rx_index[i] += len;
    2bb2:	f823 8015 	strh.w	r8, [r3, r5, lsl #1]
			count += avail;
			rx_tail = tail;
			rx_queue_transfer(i);
		}
	}
	NVIC_ENABLE_IRQ(IRQ_USB1);
    2bb6:	4b17      	ldr	r3, [pc, #92]	; (2c14 <usb_serial_read+0xe4>)
    2bb8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    2bbc:	601a      	str	r2, [r3, #0]
	return count;
}
    2bbe:	b003      	add	sp, #12
    2bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    2bc4:	f000 fa58 	bl	3078 <memcpy>
			p += avail;
			rx_available -= avail;
    2bc8:	f8db 2000 	ldr.w	r2, [fp]
			count += avail;
			rx_tail = tail;
    2bcc:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
    2bce:	4628      	mov	r0, r5
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
			rx_available -= avail;
    2bd0:	1b92      	subs	r2, r2, r6
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
    2bd2:	44b2      	add	sl, r6
			rx_available -= avail;
    2bd4:	f8cb 2000 	str.w	r2, [fp]
			count += avail;
			rx_tail = tail;
    2bd8:	4a08      	ldr	r2, [pc, #32]	; (2bfc <usb_serial_read+0xcc>)
    2bda:	7013      	strb	r3, [r2, #0]
			rx_queue_transfer(i);
    2bdc:	f7ff fd88 	bl	26f0 <rx_queue_transfer>

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    2be0:	45b9      	cmp	r9, r7
    2be2:	d903      	bls.n	2bec <usb_serial_read+0xbc>
    2be4:	4b06      	ldr	r3, [pc, #24]	; (2c00 <usb_serial_read+0xd0>)
    2be6:	781b      	ldrb	r3, [r3, #0]
    2be8:	429c      	cmp	r4, r3
    2bea:	d1b6      	bne.n	2b5a <usb_serial_read+0x2a>
    2bec:	4638      	mov	r0, r7
    2bee:	e7e2      	b.n	2bb6 <usb_serial_read+0x86>
    2bf0:	4608      	mov	r0, r1
    2bf2:	e7e0      	b.n	2bb6 <usb_serial_read+0x86>
    2bf4:	2000      	movs	r0, #0
    2bf6:	e7de      	b.n	2bb6 <usb_serial_read+0x86>
    2bf8:	e000e18c 	.word	0xe000e18c
    2bfc:	20013ec0 	.word	0x20013ec0
    2c00:	20013ee4 	.word	0x20013ee4
    2c04:	20013da4 	.word	0x20013da4
    2c08:	20013ec4 	.word	0x20013ec4
    2c0c:	20013ed0 	.word	0x20013ed0
    2c10:	20200060 	.word	0x20200060
    2c14:	e000e10c 	.word	0xe000e10c
    2c18:	20013ee0 	.word	0x20013ee0

00002c1c <usb_serial_peekchar>:
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    2c1c:	4b0b      	ldr	r3, [pc, #44]	; (2c4c <usb_serial_peekchar+0x30>)
	if (tail == rx_head) return -1;
    2c1e:	4a0c      	ldr	r2, [pc, #48]	; (2c50 <usb_serial_peekchar+0x34>)
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    2c20:	781b      	ldrb	r3, [r3, #0]
	if (tail == rx_head) return -1;
    2c22:	7812      	ldrb	r2, [r2, #0]
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    2c24:	b2db      	uxtb	r3, r3
	if (tail == rx_head) return -1;
    2c26:	4293      	cmp	r3, r2
    2c28:	d00d      	beq.n	2c46 <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    2c2a:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    2c2c:	4809      	ldr	r0, [pc, #36]	; (2c54 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    2c2e:	4a0a      	ldr	r2, [pc, #40]	; (2c58 <usb_serial_peekchar+0x3c>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    2c30:	2b09      	cmp	r3, #9
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    2c32:	490a      	ldr	r1, [pc, #40]	; (2c5c <usb_serial_peekchar+0x40>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    2c34:	bf28      	it	cs
    2c36:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    2c38:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    2c3a:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
    2c3e:	eb02 2343 	add.w	r3, r2, r3, lsl #9
    2c42:	5c58      	ldrb	r0, [r3, r1]
    2c44:	4770      	bx	lr

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
    2c46:	f04f 30ff 	mov.w	r0, #4294967295
	if (++tail > RX_NUM) tail = 0;
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
}
    2c4a:	4770      	bx	lr
    2c4c:	20013ec0 	.word	0x20013ec0
    2c50:	20013ee4 	.word	0x20013ee4
    2c54:	20013ec4 	.word	0x20013ec4
    2c58:	20200060 	.word	0x20200060
    2c5c:	20013da4 	.word	0x20013da4

00002c60 <usb_serial_available>:

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	return rx_available;
    2c60:	4b01      	ldr	r3, [pc, #4]	; (2c68 <usb_serial_available+0x8>)
    2c62:	6818      	ldr	r0, [r3, #0]
}
    2c64:	4770      	bx	lr
    2c66:	bf00      	nop
    2c68:	20013ee0 	.word	0x20013ee0

00002c6c <usb_serial_flush_input>:

// discard any buffered input
void usb_serial_flush_input(void)
{
    2c6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    2c70:	4e15      	ldr	r6, [pc, #84]	; (2cc8 <usb_serial_flush_input+0x5c>)
	while (tail != rx_head) {
    2c72:	4d16      	ldr	r5, [pc, #88]	; (2ccc <usb_serial_flush_input+0x60>)
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    2c74:	7834      	ldrb	r4, [r6, #0]
	while (tail != rx_head) {
    2c76:	782b      	ldrb	r3, [r5, #0]
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    2c78:	b2e4      	uxtb	r4, r4
	while (tail != rx_head) {
    2c7a:	429c      	cmp	r4, r3
    2c7c:	d021      	beq.n	2cc2 <usb_serial_flush_input+0x56>
    2c7e:	f8df 9054 	ldr.w	r9, [pc, #84]	; 2cd4 <usb_serial_flush_input+0x68>
    2c82:	f8df b054 	ldr.w	fp, [pc, #84]	; 2cd8 <usb_serial_flush_input+0x6c>
    2c86:	f8df 8054 	ldr.w	r8, [pc, #84]	; 2cdc <usb_serial_flush_input+0x70>
    2c8a:	4f11      	ldr	r7, [pc, #68]	; (2cd0 <usb_serial_flush_input+0x64>)
		if (++tail > RX_NUM) tail = 0;
    2c8c:	3401      	adds	r4, #1
    2c8e:	2c08      	cmp	r4, #8
    2c90:	fa5f fa84 	uxtb.w	sl, r4
    2c94:	d901      	bls.n	2c9a <usb_serial_flush_input+0x2e>
    2c96:	2400      	movs	r4, #0
    2c98:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
    2c9a:	f819 1004 	ldrb.w	r1, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    2c9e:	f8db 2000 	ldr.w	r2, [fp]
    2ca2:	f838 3011 	ldrh.w	r3, [r8, r1, lsl #1]
		rx_queue_transfer(i);
    2ca6:	4608      	mov	r0, r1
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		rx_available -= rx_count[i] - rx_index[i];
    2ca8:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
    2cac:	1a5b      	subs	r3, r3, r1
    2cae:	1ad3      	subs	r3, r2, r3
    2cb0:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
    2cb4:	f7ff fd1c 	bl	26f0 <rx_queue_transfer>
		rx_tail = tail;
    2cb8:	f886 a000 	strb.w	sl, [r6]

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
    2cbc:	782b      	ldrb	r3, [r5, #0]
    2cbe:	429c      	cmp	r4, r3
    2cc0:	d1e4      	bne.n	2c8c <usb_serial_flush_input+0x20>
    2cc2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2cc6:	bf00      	nop
    2cc8:	20013ec0 	.word	0x20013ec0
    2ccc:	20013ee4 	.word	0x20013ee4
    2cd0:	20013da4 	.word	0x20013da4
    2cd4:	20013ec4 	.word	0x20013ec4
    2cd8:	20013ee0 	.word	0x20013ee0
    2cdc:	20013ed0 	.word	0x20013ed0

00002ce0 <usb_serial_getchar>:
}


// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    2ce0:	b500      	push	{lr}
    2ce2:	b083      	sub	sp, #12
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
    2ce4:	2101      	movs	r1, #1
    2ce6:	f10d 0007 	add.w	r0, sp, #7
    2cea:	f7ff ff21 	bl	2b30 <usb_serial_read>
    2cee:	b120      	cbz	r0, 2cfa <usb_serial_getchar+0x1a>
    2cf0:	f89d 0007 	ldrb.w	r0, [sp, #7]
	return -1;
}
    2cf4:	b003      	add	sp, #12
    2cf6:	f85d fb04 	ldr.w	pc, [sp], #4
// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
	return -1;
    2cfa:	f04f 30ff 	mov.w	r0, #4294967295
    2cfe:	e7f9      	b.n	2cf4 <usb_serial_getchar+0x14>

00002d00 <usb_serial_putchar>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    2d00:	4b09      	ldr	r3, [pc, #36]	; (2d28 <usb_serial_putchar+0x28>)
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    2d02:	b500      	push	{lr}
    2d04:	b083      	sub	sp, #12
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    2d06:	781b      	ldrb	r3, [r3, #0]
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    2d08:	f88d 0007 	strb.w	r0, [sp, #7]
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    2d0c:	b923      	cbnz	r3, 2d18 <usb_serial_putchar+0x18>
    2d0e:	f003 00ff 	and.w	r0, r3, #255	; 0xff

// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
	return usb_serial_write(&c, 1);
}
    2d12:	b003      	add	sp, #12
    2d14:	f85d fb04 	ldr.w	pc, [sp], #4
    2d18:	2101      	movs	r1, #1
    2d1a:	f10d 0007 	add.w	r0, sp, #7
    2d1e:	f7ff fdc3 	bl	28a8 <usb_serial_write.part.1>
    2d22:	b003      	add	sp, #12
    2d24:	f85d fb04 	ldr.w	pc, [sp], #4
    2d28:	20013da0 	.word	0x20013da0

00002d2c <usb_serial_write>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    2d2c:	4b04      	ldr	r3, [pc, #16]	; (2d40 <usb_serial_write+0x14>)
    2d2e:	781b      	ldrb	r3, [r3, #0]
    2d30:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    2d34:	b10b      	cbz	r3, 2d3a <usb_serial_write+0xe>
    2d36:	f7ff bdb7 	b.w	28a8 <usb_serial_write.part.1>
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    2d3a:	4610      	mov	r0, r2
    2d3c:	4770      	bx	lr
    2d3e:	bf00      	nop
    2d40:	20013da0 	.word	0x20013da0

00002d44 <usb_serial_write_buffer_free>:

int usb_serial_write_buffer_free(void)
{
    2d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    2d48:	2400      	movs	r4, #0
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
    2d4a:	f8df 8040 	ldr.w	r8, [pc, #64]	; 2d8c <usb_serial_write_buffer_free+0x48>
    2d4e:	2301      	movs	r3, #1
    2d50:	4d0c      	ldr	r5, [pc, #48]	; (2d84 <usb_serial_write_buffer_free+0x40>)
	return sent;
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
    2d52:	4627      	mov	r7, r4
    2d54:	4e0c      	ldr	r6, [pc, #48]	; (2d88 <usb_serial_write_buffer_free+0x44>)
	tx_noautoflush = 1;
    2d56:	f888 3000 	strb.w	r3, [r8]
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    2d5a:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    2d5c:	4628      	mov	r0, r5
    2d5e:	3520      	adds	r5, #32
int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    2d60:	42a3      	cmp	r3, r4

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    2d62:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
    2d66:	d005      	beq.n	2d74 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    2d68:	f7ff fc94 	bl	2694 <usb_transfer_status>
    2d6c:	0603      	lsls	r3, r0, #24
    2d6e:	bf58      	it	pl
    2d70:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    2d74:	2c04      	cmp	r4, #4
    2d76:	d1f0      	bne.n	2d5a <usb_serial_write_buffer_free+0x16>
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    2d78:	2300      	movs	r3, #0
	return sum;
}
    2d7a:	4638      	mov	r0, r7
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    2d7c:	f888 3000 	strb.w	r3, [r8]
	return sum;
}
    2d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2d84:	20013f00 	.word	0x20013f00
    2d88:	20013db7 	.word	0x20013db7
    2d8c:	20013db6 	.word	0x20013db6

00002d90 <usb_serial_flush_output>:

void usb_serial_flush_output(void)
{
    2d90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	if (!usb_configuration) return;
    2d94:	4b1f      	ldr	r3, [pc, #124]	; (2e14 <usb_serial_flush_output+0x84>)
    2d96:	781b      	ldrb	r3, [r3, #0]
    2d98:	b113      	cbz	r3, 2da0 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    2d9a:	4d1f      	ldr	r5, [pc, #124]	; (2e18 <usb_serial_flush_output+0x88>)
    2d9c:	882a      	ldrh	r2, [r5, #0]
    2d9e:	b90a      	cbnz	r2, 2da4 <usb_serial_flush_output+0x14>
    2da0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    2da4:	f8df 8084 	ldr.w	r8, [pc, #132]	; 2e2c <usb_serial_flush_output+0x9c>
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    2da8:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    2dac:	4e1b      	ldr	r6, [pc, #108]	; (2e1c <usb_serial_flush_output+0x8c>)
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    2dae:	f04f 0e01 	mov.w	lr, #1
	transfer_t *xfer = tx_transfer + tx_head;
    2db2:	f898 1000 	ldrb.w	r1, [r8]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    2db6:	464a      	mov	r2, r9

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    2db8:	4c19      	ldr	r4, [pc, #100]	; (2e20 <usb_serial_flush_output+0x90>)
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    2dba:	2300      	movs	r3, #0
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    2dbc:	eb06 1641 	add.w	r6, r6, r1, lsl #5
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    2dc0:	4f18      	ldr	r7, [pc, #96]	; (2e24 <usb_serial_flush_output+0x94>)
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    2dc2:	eb04 24c1 	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    2dc6:	4630      	mov	r0, r6
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    2dc8:	f887 e000 	strb.w	lr, [r7]
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    2dcc:	4621      	mov	r1, r4
    2dce:	f7ff fc23 	bl	2618 <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    2dd2:	eb09 0204 	add.w	r2, r9, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    2dd6:	f024 011f 	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    2dda:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    2dde:	4b12      	ldr	r3, [pc, #72]	; (2e28 <usb_serial_flush_output+0x98>)
    2de0:	6019      	str	r1, [r3, #0]
		location += 32;
    2de2:	3120      	adds	r1, #32
	} while (location < end_addr);
    2de4:	428a      	cmp	r2, r1
    2de6:	d8fb      	bhi.n	2de0 <usb_serial_flush_output+0x50>
	asm("dsb");
    2de8:	f3bf 8f4f 	dsb	sy
	asm("isb");
    2dec:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    2df0:	2004      	movs	r0, #4
    2df2:	4631      	mov	r1, r6
    2df4:	f7ff fc28 	bl	2648 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    2df8:	f898 3000 	ldrb.w	r3, [r8]
    2dfc:	4a0b      	ldr	r2, [pc, #44]	; (2e2c <usb_serial_flush_output+0x9c>)
    2dfe:	3301      	adds	r3, #1
    2e00:	b2db      	uxtb	r3, r3
    2e02:	2b03      	cmp	r3, #3
    2e04:	bf88      	it	hi
    2e06:	2300      	movhi	r3, #0
    2e08:	7013      	strb	r3, [r2, #0]
	tx_available = 0;
    2e0a:	2300      	movs	r3, #0
    2e0c:	802b      	strh	r3, [r5, #0]
	tx_noautoflush = 0;
    2e0e:	703b      	strb	r3, [r7, #0]
    2e10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2e14:	20013da0 	.word	0x20013da0
    2e18:	20013ee6 	.word	0x20013ee6
    2e1c:	20013f00 	.word	0x20013f00
    2e20:	20201060 	.word	0x20201060
    2e24:	20013db6 	.word	0x20013db6
    2e28:	e000ef70 	.word	0xe000ef70
    2e2c:	20013db7 	.word	0x20013db7

00002e30 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    2e30:	b570      	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    2e32:	f3ef 8110 	mrs	r1, PRIMASK
		__disable_irq();
    2e36:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    2e38:	4c0c      	ldr	r4, [pc, #48]	; (2e6c <EventResponder::runFromInterrupt()+0x3c>)
    2e3a:	6823      	ldr	r3, [r4, #0]
		if (first) {
    2e3c:	b18b      	cbz	r3, 2e62 <EventResponder::runFromInterrupt()+0x32>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    2e3e:	4e0c      	ldr	r6, [pc, #48]	; (2e70 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    2e40:	2500      	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    2e42:	695a      	ldr	r2, [r3, #20]
    2e44:	6022      	str	r2, [r4, #0]
			if (firstInterrupt) {
    2e46:	b17a      	cbz	r2, 2e68 <EventResponder::runFromInterrupt()+0x38>
				firstInterrupt->_prev = nullptr;
    2e48:	6195      	str	r5, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    2e4a:	b901      	cbnz	r1, 2e4e <EventResponder::runFromInterrupt()+0x1e>
    2e4c:	b662      	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    2e4e:	775d      	strb	r5, [r3, #29]
			(*(first->_function))(*first);
    2e50:	4618      	mov	r0, r3
    2e52:	689b      	ldr	r3, [r3, #8]
    2e54:	4798      	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    2e56:	f3ef 8110 	mrs	r1, PRIMASK
		__disable_irq();
    2e5a:	b672      	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    2e5c:	6823      	ldr	r3, [r4, #0]
		if (first) {
    2e5e:	2b00      	cmp	r3, #0
    2e60:	d1ef      	bne.n	2e42 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    2e62:	b901      	cbnz	r1, 2e66 <EventResponder::runFromInterrupt()+0x36>
    2e64:	b662      	cpsie	i
    2e66:	bd70      	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    2e68:	6032      	str	r2, [r6, #0]
    2e6a:	e7ee      	b.n	2e4a <EventResponder::runFromInterrupt()+0x1a>
    2e6c:	20013f80 	.word	0x20013f80
    2e70:	20013f84 	.word	0x20013f84

00002e74 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

extern "C" void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    2e74:	f7ff bfdc 	b.w	2e30 <EventResponder::runFromInterrupt()>

00002e78 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    2e78:	4a04      	ldr	r2, [pc, #16]	; (2e8c <systick_isr+0x14>)
    2e7a:	4b05      	ldr	r3, [pc, #20]	; (2e90 <systick_isr+0x18>)
    2e7c:	6811      	ldr	r1, [r2, #0]
	systick_millis_count++;
    2e7e:	4a05      	ldr	r2, [pc, #20]	; (2e94 <systick_isr+0x1c>)
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    2e80:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    2e82:	6813      	ldr	r3, [r2, #0]
    2e84:	3301      	adds	r3, #1
    2e86:	6013      	str	r3, [r2, #0]
    2e88:	4770      	bx	lr
    2e8a:	bf00      	nop
    2e8c:	e0001004 	.word	0xe0001004
    2e90:	20013d4c 	.word	0x20013d4c
    2e94:	20013d54 	.word	0x20013d54

00002e98 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    2e98:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    2e9a:	f7fd f9e9 	bl	270 <setup>
	while (1) {
		loop();
    2e9e:	f7fd fa6d 	bl	37c <loop>
		yield();
    2ea2:	f000 f871 	bl	2f88 <yield>
    2ea6:	e7fa      	b.n	2e9e <main+0x6>

00002ea8 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    2ea8:	b510      	push	{r4, lr}
	uint8_t buf[2]={'\r', '\n'};
    2eaa:	4c06      	ldr	r4, [pc, #24]	; (2ec4 <Print::println()+0x1c>)
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    2eac:	b082      	sub	sp, #8
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    2eae:	6803      	ldr	r3, [r0, #0]
    2eb0:	2202      	movs	r2, #2
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    2eb2:	8824      	ldrh	r4, [r4, #0]
	return write(buf, 2);
    2eb4:	a901      	add	r1, sp, #4
    2eb6:	685b      	ldr	r3, [r3, #4]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    2eb8:	f8ad 4004 	strh.w	r4, [sp, #4]
	return write(buf, 2);
    2ebc:	4798      	blx	r3
}
    2ebe:	b002      	add	sp, #8
    2ec0:	bd10      	pop	{r4, pc}
    2ec2:	bf00      	nop
    2ec4:	20000404 	.word	0x20000404

00002ec8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	return vdprintf((int)this, (const char *)format, ap);
#endif
}

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    2ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2eca:	4606      	mov	r6, r0
    2ecc:	b08b      	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    2ece:	2a00      	cmp	r2, #0
    2ed0:	d033      	beq.n	2f3a <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    2ed2:	2a01      	cmp	r2, #1
    2ed4:	bf08      	it	eq
    2ed6:	220a      	moveq	r2, #10
	}


	if (n == 0) {
    2ed8:	b351      	cbz	r1, 2f30 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    2eda:	2521      	movs	r5, #33	; 0x21
    2edc:	e000      	b.n	2ee0 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    2ede:	b2fd      	uxtb	r5, r7
    2ee0:	1e6f      	subs	r7, r5, #1
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    2ee2:	fbb1 f4f2 	udiv	r4, r1, r2
    2ee6:	fb02 1114 	mls	r1, r2, r4, r1
    2eea:	b2c8      	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    2eec:	2909      	cmp	r1, #9
    2eee:	f100 0137 	add.w	r1, r0, #55	; 0x37
    2ef2:	f100 0030 	add.w	r0, r0, #48	; 0x30
    2ef6:	bf88      	it	hi
    2ef8:	b2c8      	uxtbhi	r0, r1
			n /= base;
			if (n == 0) break;
    2efa:	4621      	mov	r1, r4
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    2efc:	ac0a      	add	r4, sp, #40	; 0x28
    2efe:	bf98      	it	ls
    2f00:	b2c0      	uxtbls	r0, r0
    2f02:	442c      	add	r4, r5
    2f04:	f804 0c24 	strb.w	r0, [r4, #-36]
			n /= base;
			if (n == 0) break;
    2f08:	2900      	cmp	r1, #0
    2f0a:	d1e8      	bne.n	2ede <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    2f0c:	b133      	cbz	r3, 2f1c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    2f0e:	3d01      	subs	r5, #1
		buf[i] = '-';
    2f10:	ab0a      	add	r3, sp, #40	; 0x28
    2f12:	222d      	movs	r2, #45	; 0x2d
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
		i--;
    2f14:	b2ed      	uxtb	r5, r5
		buf[i] = '-';
    2f16:	442b      	add	r3, r5
    2f18:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    2f1c:	6833      	ldr	r3, [r6, #0]
    2f1e:	a901      	add	r1, sp, #4
    2f20:	f1c5 0222 	rsb	r2, r5, #34	; 0x22
    2f24:	4630      	mov	r0, r6
    2f26:	4429      	add	r1, r5
    2f28:	685b      	ldr	r3, [r3, #4]
    2f2a:	4798      	blx	r3
}
    2f2c:	b00b      	add	sp, #44	; 0x2c
    2f2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    2f30:	2230      	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    2f32:	2521      	movs	r5, #33	; 0x21
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    2f34:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
    2f38:	e7e8      	b.n	2f0c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    2f3a:	6803      	ldr	r3, [r0, #0]
    2f3c:	b2c9      	uxtb	r1, r1
    2f3e:	681b      	ldr	r3, [r3, #0]
    2f40:	4798      	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    2f42:	b00b      	add	sp, #44	; 0x2c
    2f44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2f46:	bf00      	nop

00002f48 <Print::print(long)>:

size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
    2f48:	2900      	cmp	r1, #0
    2f4a:	db03      	blt.n	2f54 <Print::print(long)+0xc>
}


size_t Print::print(long n)
{
	uint8_t sign=0;
    2f4c:	2300      	movs	r3, #0

	if (n < 0) {
		sign = '-';
		n = -n;
	}
	return printNumber(n, 10, sign);
    2f4e:	220a      	movs	r2, #10
    2f50:	f7ff bfba 	b.w	2ec8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
		n = -n;
    2f54:	4249      	negs	r1, r1
size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
    2f56:	232d      	movs	r3, #45	; 0x2d
		n = -n;
	}
	return printNumber(n, 10, sign);
    2f58:	220a      	movs	r2, #10
    2f5a:	f7ff bfb5 	b.w	2ec8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    2f5e:	bf00      	nop

00002f60 <usb_serial_class::clear()>:
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    2f60:	f7ff be84 	b.w	2c6c <usb_serial_flush_input>

00002f64 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    2f64:	f7ff be5a 	b.w	2c1c <usb_serial_peekchar>

00002f68 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    2f68:	f7ff beba 	b.w	2ce0 <usb_serial_getchar>

00002f6c <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    2f6c:	f7ff be78 	b.w	2c60 <usb_serial_available>

00002f70 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    2f70:	f7ff bf0e 	b.w	2d90 <usb_serial_flush_output>

00002f74 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    2f74:	f7ff bee6 	b.w	2d44 <usb_serial_write_buffer_free>

00002f78 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    2f78:	4608      	mov	r0, r1
    2f7a:	4611      	mov	r1, r2
    2f7c:	f7ff bed6 	b.w	2d2c <usb_serial_write>

00002f80 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    2f80:	4608      	mov	r0, r1
    2f82:	f7ff bebd 	b.w	2d00 <usb_serial_putchar>
    2f86:	bf00      	nop

00002f88 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    2f88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    2f8c:	4e32      	ldr	r6, [pc, #200]	; (3058 <yield+0xd0>)
    2f8e:	7833      	ldrb	r3, [r6, #0]
    2f90:	b193      	cbz	r3, 2fb8 <yield+0x30>
	if (running) return; // TODO: does this need to be atomic?
    2f92:	4f32      	ldr	r7, [pc, #200]	; (305c <yield+0xd4>)
    2f94:	783a      	ldrb	r2, [r7, #0]
    2f96:	b97a      	cbnz	r2, 2fb8 <yield+0x30>
	running = 1;
    2f98:	2201      	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    2f9a:	07d9      	lsls	r1, r3, #31
void yield(void)
{
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    2f9c:	703a      	strb	r2, [r7, #0]


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    2f9e:	d437      	bmi.n	3010 <yield+0x88>
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();
    2fa0:	079a      	lsls	r2, r3, #30
    2fa2:	d419      	bmi.n	2fd8 <yield+0x50>

	running = 0;
    2fa4:	2200      	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    2fa6:	075b      	lsls	r3, r3, #29
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();

	running = 0;
    2fa8:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    2faa:	d505      	bpl.n	2fb8 <yield+0x30>
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    2fac:	4b2c      	ldr	r3, [pc, #176]	; (3060 <yield+0xd8>)
    2fae:	681a      	ldr	r2, [r3, #0]
    2fb0:	b112      	cbz	r2, 2fb8 <yield+0x30>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    2fb2:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    2fb6:	b10a      	cbz	r2, 2fbc <yield+0x34>
    2fb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    2fbc:	f3ef 8010 	mrs	r0, PRIMASK
		__disable_irq();
    2fc0:	b672      	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    2fc2:	681a      	ldr	r2, [r3, #0]
		if (first == nullptr) {
    2fc4:	b11a      	cbz	r2, 2fce <yield+0x46>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    2fc6:	4c27      	ldr	r4, [pc, #156]	; (3064 <yield+0xdc>)
    2fc8:	7821      	ldrb	r1, [r4, #0]
    2fca:	2900      	cmp	r1, #0
    2fcc:	d02f      	beq.n	302e <yield+0xa6>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    2fce:	2800      	cmp	r0, #0
    2fd0:	d1f2      	bne.n	2fb8 <yield+0x30>
    2fd2:	b662      	cpsie	i
    2fd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    2fd8:	f8df 8094 	ldr.w	r8, [pc, #148]	; 3070 <yield+0xe8>
    2fdc:	f898 2000 	ldrb.w	r2, [r8]
    2fe0:	2a00      	cmp	r2, #0
    2fe2:	d0df      	beq.n	2fa4 <yield+0x1c>
    2fe4:	2400      	movs	r4, #0
    2fe6:	f8df 908c 	ldr.w	r9, [pc, #140]	; 3074 <yield+0xec>
    2fea:	e005      	b.n	2ff8 <yield+0x70>
    2fec:	3401      	adds	r4, #1
    2fee:	f898 3000 	ldrb.w	r3, [r8]
    2ff2:	b2e4      	uxtb	r4, r4
    2ff4:	42a3      	cmp	r3, r4
    2ff6:	d913      	bls.n	3020 <yield+0x98>
			s_serials_with_serial_events[i]->doYieldCode();
    2ff8:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
	static HardwareSerial 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    2ffc:	682b      	ldr	r3, [r5, #0]
    2ffe:	4628      	mov	r0, r5
    3000:	691b      	ldr	r3, [r3, #16]
    3002:	4798      	blx	r3
    3004:	2800      	cmp	r0, #0
    3006:	d0f1      	beq.n	2fec <yield+0x64>
    3008:	696b      	ldr	r3, [r5, #20]
    300a:	689b      	ldr	r3, [r3, #8]
    300c:	4798      	blx	r3
    300e:	e7ed      	b.n	2fec <yield+0x64>
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    3010:	f7ff fe26 	bl	2c60 <usb_serial_available>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    3014:	b9d0      	cbnz	r0, 304c <yield+0xc4>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    3016:	4b14      	ldr	r3, [pc, #80]	; (3068 <yield+0xe0>)
    3018:	781b      	ldrb	r3, [r3, #0]
    301a:	b91b      	cbnz	r3, 3024 <yield+0x9c>
    301c:	7833      	ldrb	r3, [r6, #0]
    301e:	e7bf      	b.n	2fa0 <yield+0x18>
    3020:	7833      	ldrb	r3, [r6, #0]
    3022:	e7bf      	b.n	2fa4 <yield+0x1c>
    3024:	7833      	ldrb	r3, [r6, #0]
    3026:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    302a:	7033      	strb	r3, [r6, #0]
    302c:	e7b8      	b.n	2fa0 <yield+0x18>
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    302e:	2601      	movs	r6, #1
		firstYield = first->_next;
    3030:	6955      	ldr	r5, [r2, #20]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    3032:	7026      	strb	r6, [r4, #0]
		firstYield = first->_next;
    3034:	601d      	str	r5, [r3, #0]
		if (firstYield) {
    3036:	b165      	cbz	r5, 3052 <yield+0xca>
			firstYield->_prev = nullptr;
    3038:	61a9      	str	r1, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    303a:	b900      	cbnz	r0, 303e <yield+0xb6>
    303c:	b662      	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    303e:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    3040:	6893      	ldr	r3, [r2, #8]
    3042:	4610      	mov	r0, r2
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    3044:	7755      	strb	r5, [r2, #29]
		(*(first->_function))(*first);
    3046:	4798      	blx	r3
		runningFromYield = false;
    3048:	7025      	strb	r5, [r4, #0]
    304a:	e7b5      	b.n	2fb8 <yield+0x30>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    304c:	f000 fa32 	bl	34b4 <serialEvent()>
    3050:	e7e1      	b.n	3016 <yield+0x8e>
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    3052:	4b06      	ldr	r3, [pc, #24]	; (306c <yield+0xe4>)
    3054:	601d      	str	r5, [r3, #0]
    3056:	e7f0      	b.n	303a <yield+0xb2>
    3058:	200122cc 	.word	0x200122cc
    305c:	20013f91 	.word	0x20013f91
    3060:	20013f8c 	.word	0x20013f8c
    3064:	20013f90 	.word	0x20013f90
    3068:	60001726 	.word	0x60001726
    306c:	20013f88 	.word	0x20013f88
    3070:	20013fb0 	.word	0x20013fb0
    3074:	20013f94 	.word	0x20013f94

00003078 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    3078:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    307a:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    307e:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    3082:	d16d      	bne.n	3160 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    3084:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    3086:	d341      	bcc.n	310c <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    3088:	f851 3b04 	ldr.w	r3, [r1], #4
    308c:	f840 3b04 	str.w	r3, [r0], #4
    3090:	f851 3b04 	ldr.w	r3, [r1], #4
    3094:	f840 3b04 	str.w	r3, [r0], #4
    3098:	f851 3b04 	ldr.w	r3, [r1], #4
    309c:	f840 3b04 	str.w	r3, [r0], #4
    30a0:	f851 3b04 	ldr.w	r3, [r1], #4
    30a4:	f840 3b04 	str.w	r3, [r0], #4
    30a8:	f851 3b04 	ldr.w	r3, [r1], #4
    30ac:	f840 3b04 	str.w	r3, [r0], #4
    30b0:	f851 3b04 	ldr.w	r3, [r1], #4
    30b4:	f840 3b04 	str.w	r3, [r0], #4
    30b8:	f851 3b04 	ldr.w	r3, [r1], #4
    30bc:	f840 3b04 	str.w	r3, [r0], #4
    30c0:	f851 3b04 	ldr.w	r3, [r1], #4
    30c4:	f840 3b04 	str.w	r3, [r0], #4
    30c8:	f851 3b04 	ldr.w	r3, [r1], #4
    30cc:	f840 3b04 	str.w	r3, [r0], #4
    30d0:	f851 3b04 	ldr.w	r3, [r1], #4
    30d4:	f840 3b04 	str.w	r3, [r0], #4
    30d8:	f851 3b04 	ldr.w	r3, [r1], #4
    30dc:	f840 3b04 	str.w	r3, [r0], #4
    30e0:	f851 3b04 	ldr.w	r3, [r1], #4
    30e4:	f840 3b04 	str.w	r3, [r0], #4
    30e8:	f851 3b04 	ldr.w	r3, [r1], #4
    30ec:	f840 3b04 	str.w	r3, [r0], #4
    30f0:	f851 3b04 	ldr.w	r3, [r1], #4
    30f4:	f840 3b04 	str.w	r3, [r0], #4
    30f8:	f851 3b04 	ldr.w	r3, [r1], #4
    30fc:	f840 3b04 	str.w	r3, [r0], #4
    3100:	f851 3b04 	ldr.w	r3, [r1], #4
    3104:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    3108:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    310a:	d2bd      	bcs.n	3088 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    310c:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    310e:	d311      	bcc.n	3134 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    3110:	f851 3b04 	ldr.w	r3, [r1], #4
    3114:	f840 3b04 	str.w	r3, [r0], #4
    3118:	f851 3b04 	ldr.w	r3, [r1], #4
    311c:	f840 3b04 	str.w	r3, [r0], #4
    3120:	f851 3b04 	ldr.w	r3, [r1], #4
    3124:	f840 3b04 	str.w	r3, [r0], #4
    3128:	f851 3b04 	ldr.w	r3, [r1], #4
    312c:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    3130:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    3132:	d2ed      	bcs.n	3110 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    3134:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    3136:	d305      	bcc.n	3144 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    3138:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    313c:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    3140:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    3142:	d2f9      	bcs.n	3138 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    3144:	3204      	adds	r2, #4
	beq	.Ldone
    3146:	d008      	beq.n	315a <memcpy+0xe2>

	lsls	r2, r2, #31
    3148:	07d2      	lsls	r2, r2, #31
	itt ne
    314a:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    314c:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    3150:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    3154:	d301      	bcc.n	315a <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    3156:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    3158:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    315a:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    315c:	4770      	bx	lr
    315e:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    3160:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    3162:	d313      	bcc.n	318c <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    3164:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    3166:	d08d      	beq.n	3084 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    3168:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    316c:	d08a      	beq.n	3084 <memcpy+0xc>

	rsb	r3, #4
    316e:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    3172:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    3174:	07db      	lsls	r3, r3, #31
	itt ne
    3176:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    3178:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    317c:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    3180:	d380      	bcc.n	3084 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    3182:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    3186:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    318a:	e77b      	b.n	3084 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    318c:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    318e:	d3d9      	bcc.n	3144 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    3190:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    3192:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    3196:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    319a:	d2f9      	bcs.n	3190 <memcpy+0x118>

	ldrb	r3, [r1]
    319c:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    319e:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    31a0:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    31a2:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    31a4:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    31a6:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    31a8:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    31aa:	4770      	bx	lr

000031ac <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    31ac:	b4f0      	push	{r4, r5, r6, r7}
    31ae:	1e4e      	subs	r6, r1, #1
	unsigned digit;
	int i=0, j;
    31b0:	2500      	movs	r5, #0
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    31b2:	4637      	mov	r7, r6
    31b4:	e000      	b.n	31b8 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    31b6:	3501      	adds	r5, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    31b8:	fbb0 f3f2 	udiv	r3, r0, r2
    31bc:	fb02 0013 	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    31c0:	f100 0437 	add.w	r4, r0, #55	; 0x37
    31c4:	2809      	cmp	r0, #9
    31c6:	f100 0030 	add.w	r0, r0, #48	; 0x30
    31ca:	b2e4      	uxtb	r4, r4
    31cc:	bf98      	it	ls
    31ce:	b2c4      	uxtbls	r4, r0
		val /= radix;
		if (val == 0) break;
    31d0:	4618      	mov	r0, r3
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    31d2:	f807 4f01 	strb.w	r4, [r7, #1]!
		val /= radix;
		if (val == 0) break;
    31d6:	2b00      	cmp	r3, #0
    31d8:	d1ed      	bne.n	31b6 <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    31da:	194a      	adds	r2, r1, r5
    31dc:	7053      	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    31de:	b14d      	cbz	r5, 31f4 <ultoa+0x48>
    31e0:	3301      	adds	r3, #1
		t = buf[j];
    31e2:	f816 4f01 	ldrb.w	r4, [r6, #1]!
		buf[j] = buf[i];
    31e6:	7817      	ldrb	r7, [r2, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    31e8:	1ae8      	subs	r0, r5, r3
		t = buf[j];
		buf[j] = buf[i];
    31ea:	7037      	strb	r7, [r6, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    31ec:	4283      	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    31ee:	f802 4901 	strb.w	r4, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    31f2:	dbf5      	blt.n	31e0 <ultoa+0x34>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    31f4:	4608      	mov	r0, r1
    31f6:	bcf0      	pop	{r4, r5, r6, r7}
    31f8:	4770      	bx	lr
    31fa:	bf00      	nop

000031fc <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    31fc:	48a4      	ldr	r0, [pc, #656]	; (3490 <pwm_init+0x294>)
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    31fe:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    3202:	4ba4      	ldr	r3, [pc, #656]	; (3494 <pwm_init+0x298>)
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    3204:	6f82      	ldr	r2, [r0, #120]	; 0x78
    3206:	f442 027f 	orr.w	r2, r2, #16711680	; 0xff0000
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

void pwm_init(void)
{
    320a:	b5f0      	push	{r4, r5, r6, r7, lr}
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    320c:	6782      	str	r2, [r0, #120]	; 0x78
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    320e:	2500      	movs	r5, #0
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    3210:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    3214:	f44f 4670 	mov.w	r6, #61440	; 0xf000
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    3218:	4c9f      	ldr	r4, [pc, #636]	; (3498 <pwm_init+0x29c>)
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    321a:	f44f 4e60 	mov.w	lr, #57344	; 0xe000

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    321e:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    3220:	f44f 6780 	mov.w	r7, #1024	; 0x400
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    3224:	4314      	orrs	r4, r2
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    3226:	462a      	mov	r2, r5
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    3228:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    322c:	f8a3 618c 	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    3230:	f248 26b8 	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    3234:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    3238:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    323c:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
    3240:	b280      	uxth	r0, r0
    3242:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
    3246:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
    324a:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    324e:	4b91      	ldr	r3, [pc, #580]	; (3494 <pwm_init+0x298>)
	for (i=0; i < 4; i++) {
    3250:	3101      	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    3252:	2500      	movs	r5, #0
    3254:	0140      	lsls	r0, r0, #5
    3256:	461c      	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    3258:	2904      	cmp	r1, #4
    325a:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    325c:	f8a3 e004 	strh.w	lr, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    3260:	80df      	strh	r7, [r3, #6]
		p->SM[i].OCTRL = 0;
    3262:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    3264:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    3266:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    3268:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    326a:	81de      	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    326c:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    326e:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    3270:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    3272:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    3274:	d1e9      	bne.n	324a <pwm_init+0x4e>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3276:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    327a:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    327e:	4b87      	ldr	r3, [pc, #540]	; (349c <pwm_init+0x2a0>)
    3280:	f44f 4670 	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3284:	b280      	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    3286:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    3288:	f44f 4760 	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    328c:	462a      	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    328e:	ea40 000c 	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    3292:	f44f 6e80 	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3296:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    329a:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
    329e:	b280      	uxth	r0, r0
    32a0:	f440 6070 	orr.w	r0, r0, #3840	; 0xf00
    32a4:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    32a8:	f8a3 618c 	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    32ac:	f248 26b8 	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    32b0:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    32b4:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    32b8:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
    32bc:	b280      	uxth	r0, r0
    32be:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
    32c2:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
    32c6:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    32ca:	4b74      	ldr	r3, [pc, #464]	; (349c <pwm_init+0x2a0>)
	for (i=0; i < 4; i++) {
    32cc:	3101      	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    32ce:	2500      	movs	r5, #0
    32d0:	0140      	lsls	r0, r0, #5
    32d2:	461c      	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    32d4:	2904      	cmp	r1, #4
    32d6:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    32d8:	809f      	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    32da:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    32de:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    32e0:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    32e2:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    32e4:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    32e6:	81de      	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    32e8:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    32ea:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    32ec:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    32ee:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    32f0:	d1e9      	bne.n	32c6 <pwm_init+0xca>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    32f2:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    32f6:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    32fa:	4b69      	ldr	r3, [pc, #420]	; (34a0 <pwm_init+0x2a4>)
    32fc:	f44f 4670 	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3300:	b280      	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    3302:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    3304:	f44f 4760 	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    3308:	462a      	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    330a:	ea40 000c 	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    330e:	f44f 6e80 	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3312:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    3316:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
    331a:	b280      	uxth	r0, r0
    331c:	f440 6070 	orr.w	r0, r0, #3840	; 0xf00
    3320:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    3324:	f8a3 618c 	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    3328:	f248 26b8 	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    332c:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    3330:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    3334:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
    3338:	b280      	uxth	r0, r0
    333a:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
    333e:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
    3342:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    3346:	4b56      	ldr	r3, [pc, #344]	; (34a0 <pwm_init+0x2a4>)
	for (i=0; i < 4; i++) {
    3348:	3101      	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    334a:	2500      	movs	r5, #0
    334c:	0140      	lsls	r0, r0, #5
    334e:	461c      	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    3350:	2904      	cmp	r1, #4
    3352:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    3354:	809f      	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    3356:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    335a:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    335c:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    335e:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    3360:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    3362:	81de      	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    3364:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    3366:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    3368:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    336a:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    336c:	d1e9      	bne.n	3342 <pwm_init+0x146>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    336e:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    3372:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    3376:	4b4b      	ldr	r3, [pc, #300]	; (34a4 <pwm_init+0x2a8>)
    3378:	f44f 4770 	mov.w	r7, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    337c:	b280      	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    337e:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    3380:	f44f 4660 	mov.w	r6, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    3384:	462a      	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3386:	ea40 000c 	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    338a:	f44f 6e80 	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    338e:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    3392:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
    3396:	b280      	uxth	r0, r0
    3398:	f440 6070 	orr.w	r0, r0, #3840	; 0xf00
    339c:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    33a0:	f8a3 718c 	strh.w	r7, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    33a4:	f248 27b8 	movw	r7, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    33a8:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    33ac:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    33b0:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
    33b4:	b280      	uxth	r0, r0
    33b6:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
    33ba:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
    33be:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    33c2:	4b38      	ldr	r3, [pc, #224]	; (34a4 <pwm_init+0x2a8>)
	for (i=0; i < 4; i++) {
    33c4:	3101      	adds	r1, #1
    33c6:	0140      	lsls	r0, r0, #5
    33c8:	461c      	mov	r4, r3
    33ca:	2904      	cmp	r1, #4
    33cc:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    33ce:	809e      	strh	r6, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    33d0:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    33d4:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    33d6:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    33d8:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    33da:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    33dc:	81df      	strh	r7, [r3, #14]
		p->SM[i].VAL2 = 0;
    33de:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    33e0:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    33e2:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    33e4:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    33e6:	d1ea      	bne.n	33be <pwm_init+0x1c2>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    33e8:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    33ec:	270f      	movs	r7, #15

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    33ee:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    33f0:	f241 0601 	movw	r6, #4097	; 0x1001
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    33f4:	b29b      	uxth	r3, r3
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    33f6:	f645 5ec0 	movw	lr, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    33fa:	4611      	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    33fc:	f243 0526 	movw	r5, #12326	; 0x3026
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3400:	433b      	orrs	r3, r7
    3402:	f8a4 3188 	strh.w	r3, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    3406:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
    340a:	b29b      	uxth	r3, r3
    340c:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    3410:	f8a4 3188 	strh.w	r3, [r4, #392]	; 0x188
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    3414:	0150      	lsls	r0, r2, #5
    3416:	4b24      	ldr	r3, [pc, #144]	; (34a8 <pwm_init+0x2ac>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    3418:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    341a:	4403      	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    341c:	2a04      	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    341e:	8199      	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    3420:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    3422:	81df      	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    3424:	829e      	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    3426:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    342a:	8019      	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    342c:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    342e:	819d      	strh	r5, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    3430:	d1f0      	bne.n	3414 <pwm_init+0x218>
    3432:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    3434:	270f      	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    3436:	f241 0601 	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    343a:	f645 55c0 	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    343e:	4611      	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    3440:	f243 0426 	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    3444:	0150      	lsls	r0, r2, #5
    3446:	4b19      	ldr	r3, [pc, #100]	; (34ac <pwm_init+0x2b0>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    3448:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    344a:	4403      	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    344c:	2a04      	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    344e:	8199      	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    3450:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    3452:	81df      	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    3454:	829e      	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    3456:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    3458:	8019      	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    345a:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    345c:	819c      	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    345e:	d1f1      	bne.n	3444 <pwm_init+0x248>
    3460:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    3462:	270f      	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    3464:	f241 0601 	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    3468:	f645 55c0 	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    346c:	4611      	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    346e:	f243 0426 	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    3472:	0150      	lsls	r0, r2, #5
    3474:	4b0e      	ldr	r3, [pc, #56]	; (34b0 <pwm_init+0x2b4>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    3476:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    3478:	4403      	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    347a:	2a04      	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    347c:	8199      	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    347e:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    3480:	81df      	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    3482:	829e      	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    3484:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    3486:	8019      	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    3488:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    348a:	819c      	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    348c:	d1f1      	bne.n	3472 <pwm_init+0x276>
	flexpwm_init(&IMXRT_FLEXPWM3);
	flexpwm_init(&IMXRT_FLEXPWM4);
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    348e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3490:	400fc000 	.word	0x400fc000
    3494:	403dc000 	.word	0x403dc000
    3498:	fc030000 	.word	0xfc030000
    349c:	403e0000 	.word	0x403e0000
    34a0:	403e4000 	.word	0x403e4000
    34a4:	403e8000 	.word	0x403e8000
    34a8:	401dc000 	.word	0x401dc000
    34ac:	401e0000 	.word	0x401e0000
    34b0:	401e4000 	.word	0x401e4000

000034b4 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
    34b4:	4770      	bx	lr
    34b6:	bf00      	nop

000034b8 <arm_split_rfft_q15>:
    34b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    34bc:	f06f 4440 	mvn.w	r4, #3221225472	; 0xc0000000
    34c0:	b083      	sub	sp, #12
    34c2:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
    34c6:	440c      	add	r4, r1
    34c8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    34ca:	9001      	str	r0, [sp, #4]
    34cc:	3901      	subs	r1, #1
    34ce:	ea4f 0b85 	mov.w	fp, r5, lsl #2
    34d2:	ea4f 0084 	mov.w	r0, r4, lsl #2
    34d6:	445a      	add	r2, fp
    34d8:	445b      	add	r3, fp
    34da:	9000      	str	r0, [sp, #0]
    34dc:	d030      	beq.n	3540 <arm_split_rfft_q15+0x88>
    34de:	f100 0904 	add.w	r9, r0, #4
    34e2:	9c01      	ldr	r4, [sp, #4]
    34e4:	980c      	ldr	r0, [sp, #48]	; 0x30
    34e6:	f1ae 0e08 	sub.w	lr, lr, #8
    34ea:	46a2      	mov	sl, r4
    34ec:	44a1      	add	r9, r4
    34ee:	f100 0808 	add.w	r8, r0, #8
    34f2:	4486      	add	lr, r0
    34f4:	f04f 0c00 	mov.w	ip, #0
    34f8:	f85a 4f04 	ldr.w	r4, [sl, #4]!
    34fc:	f852 000c 	ldr.w	r0, [r2, ip]
    3500:	fb44 f500 	smusd	r5, r4, r0
    3504:	f859 6d04 	ldr.w	r6, [r9, #-4]!
    3508:	f853 700c 	ldr.w	r7, [r3, ip]
    350c:	fb26 5507 	smlad	r5, r6, r7, r5
    3510:	fb46 f617 	smusdx	r6, r6, r7
    3514:	fb24 6010 	smladx	r0, r4, r0, r6
    3518:	1400      	asrs	r0, r0, #16
    351a:	3901      	subs	r1, #1
    351c:	ea4f 4425 	mov.w	r4, r5, asr #16
    3520:	44dc      	add	ip, fp
    3522:	f1c0 0500 	rsb	r5, r0, #0
    3526:	f828 0c02 	strh.w	r0, [r8, #-2]
    352a:	f828 4c04 	strh.w	r4, [r8, #-4]
    352e:	f1ae 0e04 	sub.w	lr, lr, #4
    3532:	f8ae 500a 	strh.w	r5, [lr, #10]
    3536:	f108 0804 	add.w	r8, r8, #4
    353a:	f8ae 4008 	strh.w	r4, [lr, #8]
    353e:	d1db      	bne.n	34f8 <arm_split_rfft_q15+0x40>
    3540:	9c01      	ldr	r4, [sp, #4]
    3542:	980c      	ldr	r0, [sp, #48]	; 0x30
    3544:	9a00      	ldr	r2, [sp, #0]
    3546:	f9b4 3000 	ldrsh.w	r3, [r4]
    354a:	4402      	add	r2, r0
    354c:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
    3550:	1a1b      	subs	r3, r3, r0
    3552:	4611      	mov	r1, r2
    3554:	2200      	movs	r2, #0
    3556:	980c      	ldr	r0, [sp, #48]	; 0x30
    3558:	105b      	asrs	r3, r3, #1
    355a:	80ca      	strh	r2, [r1, #6]
    355c:	808b      	strh	r3, [r1, #4]
    355e:	f9b4 1000 	ldrsh.w	r1, [r4]
    3562:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
    3566:	8042      	strh	r2, [r0, #2]
    3568:	440b      	add	r3, r1
    356a:	105b      	asrs	r3, r3, #1
    356c:	8003      	strh	r3, [r0, #0]
    356e:	b003      	add	sp, #12
    3570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00003574 <arm_rfft_q15>:
    3574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3578:	4616      	mov	r6, r2
    357a:	7902      	ldrb	r2, [r0, #4]
    357c:	b085      	sub	sp, #20
    357e:	6804      	ldr	r4, [r0, #0]
    3580:	6943      	ldr	r3, [r0, #20]
    3582:	2a01      	cmp	r2, #1
    3584:	4605      	mov	r5, r0
    3586:	460f      	mov	r7, r1
    3588:	ea4f 0454 	mov.w	r4, r4, lsr #1
    358c:	9303      	str	r3, [sp, #12]
    358e:	d00f      	beq.n	35b0 <arm_rfft_q15+0x3c>
    3590:	4618      	mov	r0, r3
    3592:	796b      	ldrb	r3, [r5, #5]
    3594:	f000 fa8c 	bl	3ab0 <arm_cfft_q15>
    3598:	4621      	mov	r1, r4
    359a:	68ac      	ldr	r4, [r5, #8]
    359c:	4638      	mov	r0, r7
    359e:	692b      	ldr	r3, [r5, #16]
    35a0:	68ea      	ldr	r2, [r5, #12]
    35a2:	9600      	str	r6, [sp, #0]
    35a4:	9401      	str	r4, [sp, #4]
    35a6:	f7ff ff87 	bl	34b8 <arm_split_rfft_q15>
    35aa:	b005      	add	sp, #20
    35ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    35b0:	f8d0 800c 	ldr.w	r8, [r0, #12]
    35b4:	ea4f 0984 	mov.w	r9, r4, lsl #2
    35b8:	f8d0 c010 	ldr.w	ip, [r0, #16]
    35bc:	6883      	ldr	r3, [r0, #8]
    35be:	b314      	cbz	r4, 3606 <arm_rfft_q15+0x92>
    35c0:	f109 0904 	add.w	r9, r9, #4
    35c4:	ea4f 0a83 	mov.w	sl, r3, lsl #2
    35c8:	46b3      	mov	fp, r6
    35ca:	4489      	add	r9, r1
    35cc:	f859 3d04 	ldr.w	r3, [r9, #-4]!
    35d0:	f8dc e000 	ldr.w	lr, [ip]
    35d4:	fb43 f10e 	smusd	r1, r3, lr
    35d8:	f857 0b04 	ldr.w	r0, [r7], #4
    35dc:	f8d8 2000 	ldr.w	r2, [r8]
    35e0:	fb20 1102 	smlad	r1, r0, r2, r1
    35e4:	fb23 f31e 	smuadx	r3, r3, lr
    35e8:	425b      	negs	r3, r3
    35ea:	fb42 3310 	smlsdx	r3, r2, r0, r3
    35ee:	4810      	ldr	r0, [pc, #64]	; (3630 <arm_rfft_q15+0xbc>)
    35f0:	3c01      	subs	r4, #1
    35f2:	44d4      	add	ip, sl
    35f4:	44d0      	add	r8, sl
    35f6:	ea00 0003 	and.w	r0, r0, r3
    35fa:	ea40 4111 	orr.w	r1, r0, r1, lsr #16
    35fe:	f84b 1b04 	str.w	r1, [fp], #4
    3602:	d1e3      	bne.n	35cc <arm_rfft_q15+0x58>
    3604:	792a      	ldrb	r2, [r5, #4]
    3606:	796b      	ldrb	r3, [r5, #5]
    3608:	4631      	mov	r1, r6
    360a:	9803      	ldr	r0, [sp, #12]
    360c:	f000 fa50 	bl	3ab0 <arm_cfft_q15>
    3610:	682b      	ldr	r3, [r5, #0]
    3612:	2b00      	cmp	r3, #0
    3614:	d0c9      	beq.n	35aa <arm_rfft_q15+0x36>
    3616:	3e02      	subs	r6, #2
    3618:	2200      	movs	r2, #0
    361a:	f936 3f02 	ldrsh.w	r3, [r6, #2]!
    361e:	3201      	adds	r2, #1
    3620:	005b      	lsls	r3, r3, #1
    3622:	8033      	strh	r3, [r6, #0]
    3624:	682b      	ldr	r3, [r5, #0]
    3626:	4293      	cmp	r3, r2
    3628:	d8f7      	bhi.n	361a <arm_rfft_q15+0xa6>
    362a:	b005      	add	sp, #20
    362c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3630:	ffff0000 	.word	0xffff0000

00003634 <arm_rfft_init_q15>:
    3634:	b289      	uxth	r1, r1
    3636:	b430      	push	{r4, r5}
    3638:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    363c:	4d36      	ldr	r5, [pc, #216]	; (3718 <arm_rfft_init_q15+0xe4>)
    363e:	4c37      	ldr	r4, [pc, #220]	; (371c <arm_rfft_init_q15+0xe8>)
    3640:	7102      	strb	r2, [r0, #4]
    3642:	7143      	strb	r3, [r0, #5]
    3644:	6001      	str	r1, [r0, #0]
    3646:	60c5      	str	r5, [r0, #12]
    3648:	6104      	str	r4, [r0, #16]
    364a:	d050      	beq.n	36ee <arm_rfft_init_q15+0xba>
    364c:	d911      	bls.n	3672 <arm_rfft_init_q15+0x3e>
    364e:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
    3652:	d054      	beq.n	36fe <arm_rfft_init_q15+0xca>
    3654:	d938      	bls.n	36c8 <arm_rfft_init_q15+0x94>
    3656:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    365a:	d022      	beq.n	36a2 <arm_rfft_init_q15+0x6e>
    365c:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
    3660:	d155      	bne.n	370e <arm_rfft_init_q15+0xda>
    3662:	2101      	movs	r1, #1
    3664:	4a2e      	ldr	r2, [pc, #184]	; (3720 <arm_rfft_init_q15+0xec>)
    3666:	2300      	movs	r3, #0
    3668:	6081      	str	r1, [r0, #8]
    366a:	6142      	str	r2, [r0, #20]
    366c:	4618      	mov	r0, r3
    366e:	bc30      	pop	{r4, r5}
    3670:	4770      	bx	lr
    3672:	2940      	cmp	r1, #64	; 0x40
    3674:	d033      	beq.n	36de <arm_rfft_init_q15+0xaa>
    3676:	d91c      	bls.n	36b2 <arm_rfft_init_q15+0x7e>
    3678:	2980      	cmp	r1, #128	; 0x80
    367a:	d00a      	beq.n	3692 <arm_rfft_init_q15+0x5e>
    367c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    3680:	d145      	bne.n	370e <arm_rfft_init_q15+0xda>
    3682:	2120      	movs	r1, #32
    3684:	4a27      	ldr	r2, [pc, #156]	; (3724 <arm_rfft_init_q15+0xf0>)
    3686:	2300      	movs	r3, #0
    3688:	6081      	str	r1, [r0, #8]
    368a:	6142      	str	r2, [r0, #20]
    368c:	4618      	mov	r0, r3
    368e:	bc30      	pop	{r4, r5}
    3690:	4770      	bx	lr
    3692:	2140      	movs	r1, #64	; 0x40
    3694:	4a24      	ldr	r2, [pc, #144]	; (3728 <arm_rfft_init_q15+0xf4>)
    3696:	2300      	movs	r3, #0
    3698:	6081      	str	r1, [r0, #8]
    369a:	6142      	str	r2, [r0, #20]
    369c:	4618      	mov	r0, r3
    369e:	bc30      	pop	{r4, r5}
    36a0:	4770      	bx	lr
    36a2:	2102      	movs	r1, #2
    36a4:	4a21      	ldr	r2, [pc, #132]	; (372c <arm_rfft_init_q15+0xf8>)
    36a6:	2300      	movs	r3, #0
    36a8:	6081      	str	r1, [r0, #8]
    36aa:	6142      	str	r2, [r0, #20]
    36ac:	4618      	mov	r0, r3
    36ae:	bc30      	pop	{r4, r5}
    36b0:	4770      	bx	lr
    36b2:	2920      	cmp	r1, #32
    36b4:	d12b      	bne.n	370e <arm_rfft_init_q15+0xda>
    36b6:	f44f 7180 	mov.w	r1, #256	; 0x100
    36ba:	4a1d      	ldr	r2, [pc, #116]	; (3730 <arm_rfft_init_q15+0xfc>)
    36bc:	2300      	movs	r3, #0
    36be:	6081      	str	r1, [r0, #8]
    36c0:	6142      	str	r2, [r0, #20]
    36c2:	4618      	mov	r0, r3
    36c4:	bc30      	pop	{r4, r5}
    36c6:	4770      	bx	lr
    36c8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
    36cc:	d11f      	bne.n	370e <arm_rfft_init_q15+0xda>
    36ce:	2108      	movs	r1, #8
    36d0:	4a18      	ldr	r2, [pc, #96]	; (3734 <arm_rfft_init_q15+0x100>)
    36d2:	2300      	movs	r3, #0
    36d4:	6081      	str	r1, [r0, #8]
    36d6:	6142      	str	r2, [r0, #20]
    36d8:	4618      	mov	r0, r3
    36da:	bc30      	pop	{r4, r5}
    36dc:	4770      	bx	lr
    36de:	2180      	movs	r1, #128	; 0x80
    36e0:	4a15      	ldr	r2, [pc, #84]	; (3738 <arm_rfft_init_q15+0x104>)
    36e2:	2300      	movs	r3, #0
    36e4:	6081      	str	r1, [r0, #8]
    36e6:	6142      	str	r2, [r0, #20]
    36e8:	4618      	mov	r0, r3
    36ea:	bc30      	pop	{r4, r5}
    36ec:	4770      	bx	lr
    36ee:	2110      	movs	r1, #16
    36f0:	4a12      	ldr	r2, [pc, #72]	; (373c <arm_rfft_init_q15+0x108>)
    36f2:	2300      	movs	r3, #0
    36f4:	6081      	str	r1, [r0, #8]
    36f6:	6142      	str	r2, [r0, #20]
    36f8:	4618      	mov	r0, r3
    36fa:	bc30      	pop	{r4, r5}
    36fc:	4770      	bx	lr
    36fe:	2104      	movs	r1, #4
    3700:	4a0f      	ldr	r2, [pc, #60]	; (3740 <arm_rfft_init_q15+0x10c>)
    3702:	2300      	movs	r3, #0
    3704:	6081      	str	r1, [r0, #8]
    3706:	6142      	str	r2, [r0, #20]
    3708:	4618      	mov	r0, r3
    370a:	bc30      	pop	{r4, r5}
    370c:	4770      	bx	lr
    370e:	f04f 33ff 	mov.w	r3, #4294967295
    3712:	bc30      	pop	{r4, r5}
    3714:	4618      	mov	r0, r3
    3716:	4770      	bx	lr
    3718:	20000430 	.word	0x20000430
    371c:	20004430 	.word	0x20004430
    3720:	20008490 	.word	0x20008490
    3724:	20008440 	.word	0x20008440
    3728:	20008470 	.word	0x20008470
    372c:	20008480 	.word	0x20008480
    3730:	200084a0 	.word	0x200084a0
    3734:	20008450 	.word	0x20008450
    3738:	200084b0 	.word	0x200084b0
    373c:	20008430 	.word	0x20008430
    3740:	20008460 	.word	0x20008460

00003744 <arm_cmplx_mag_q31>:
    3744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3748:	0893      	lsrs	r3, r2, #2
    374a:	b087      	sub	sp, #28
    374c:	460f      	mov	r7, r1
    374e:	9203      	str	r2, [sp, #12]
    3750:	9002      	str	r0, [sp, #8]
    3752:	9304      	str	r3, [sp, #16]
    3754:	d052      	beq.n	37fc <arm_cmplx_mag_q31+0xb8>
    3756:	f100 0420 	add.w	r4, r0, #32
    375a:	460d      	mov	r5, r1
    375c:	9301      	str	r3, [sp, #4]
    375e:	9105      	str	r1, [sp, #20]
    3760:	f854 2c14 	ldr.w	r2, [r4, #-20]
    3764:	4629      	mov	r1, r5
    3766:	f854 6c1c 	ldr.w	r6, [r4, #-28]
    376a:	3420      	adds	r4, #32
    376c:	f854 0c38 	ldr.w	r0, [r4, #-56]
    3770:	fb82 2302 	smull	r2, r3, r2, r2
    3774:	fb86 ab06 	smull	sl, fp, r6, r6
    3778:	f854 2c40 	ldr.w	r2, [r4, #-64]
    377c:	105e      	asrs	r6, r3, #1
    377e:	fb80 8900 	smull	r8, r9, r0, r0
    3782:	fb82 2302 	smull	r2, r3, r2, r2
    3786:	f854 ac24 	ldr.w	sl, [r4, #-36]
    378a:	ea4f 006b 	mov.w	r0, fp, asr #1
    378e:	f854 8c2c 	ldr.w	r8, [r4, #-44]
    3792:	eb06 0969 	add.w	r9, r6, r9, asr #1
    3796:	f854 7c28 	ldr.w	r7, [r4, #-40]
    379a:	eb00 0063 	add.w	r0, r0, r3, asr #1
    379e:	fb8a ab0a 	smull	sl, fp, sl, sl
    37a2:	f854 6c30 	ldr.w	r6, [r4, #-48]
    37a6:	f000 f847 	bl	3838 <arm_sqrt_q31>
    37aa:	1d29      	adds	r1, r5, #4
    37ac:	4648      	mov	r0, r9
    37ae:	fb88 8908 	smull	r8, r9, r8, r8
    37b2:	f000 f841 	bl	3838 <arm_sqrt_q31>
    37b6:	fb87 2307 	smull	r2, r3, r7, r7
    37ba:	ea4f 0e6b 	mov.w	lr, fp, asr #1
    37be:	ea4f 0069 	mov.w	r0, r9, asr #1
    37c2:	fb86 8906 	smull	r8, r9, r6, r6
    37c6:	eb0e 0663 	add.w	r6, lr, r3, asr #1
    37ca:	f105 0108 	add.w	r1, r5, #8
    37ce:	eb00 0069 	add.w	r0, r0, r9, asr #1
    37d2:	f000 f831 	bl	3838 <arm_sqrt_q31>
    37d6:	f105 010c 	add.w	r1, r5, #12
    37da:	4630      	mov	r0, r6
    37dc:	3510      	adds	r5, #16
    37de:	f000 f82b 	bl	3838 <arm_sqrt_q31>
    37e2:	9b01      	ldr	r3, [sp, #4]
    37e4:	3b01      	subs	r3, #1
    37e6:	9301      	str	r3, [sp, #4]
    37e8:	d1ba      	bne.n	3760 <arm_cmplx_mag_q31+0x1c>
    37ea:	9b02      	ldr	r3, [sp, #8]
    37ec:	9a04      	ldr	r2, [sp, #16]
    37ee:	9f05      	ldr	r7, [sp, #20]
    37f0:	4619      	mov	r1, r3
    37f2:	eb07 1702 	add.w	r7, r7, r2, lsl #4
    37f6:	eb01 1342 	add.w	r3, r1, r2, lsl #5
    37fa:	9302      	str	r3, [sp, #8]
    37fc:	9b03      	ldr	r3, [sp, #12]
    37fe:	f013 0803 	ands.w	r8, r3, #3
    3802:	d015      	beq.n	3830 <arm_cmplx_mag_q31+0xec>
    3804:	9e02      	ldr	r6, [sp, #8]
    3806:	3608      	adds	r6, #8
    3808:	f856 4c04 	ldr.w	r4, [r6, #-4]
    380c:	1d38      	adds	r0, r7, #4
    380e:	f856 2c08 	ldr.w	r2, [r6, #-8]
    3812:	4639      	mov	r1, r7
    3814:	fb84 4504 	smull	r4, r5, r4, r4
    3818:	4607      	mov	r7, r0
    381a:	fb82 2302 	smull	r2, r3, r2, r2
    381e:	3608      	adds	r6, #8
    3820:	1068      	asrs	r0, r5, #1
    3822:	eb00 0063 	add.w	r0, r0, r3, asr #1
    3826:	f000 f807 	bl	3838 <arm_sqrt_q31>
    382a:	f1b8 0801 	subs.w	r8, r8, #1
    382e:	d1eb      	bne.n	3808 <arm_cmplx_mag_q31+0xc4>
    3830:	b007      	add	sp, #28
    3832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3836:	bf00      	nop

00003838 <arm_sqrt_q31>:
    3838:	2800      	cmp	r0, #0
    383a:	dd6e      	ble.n	391a <arm_sqrt_q31+0xe2>
    383c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3840:	fab0 f680 	clz	r6, r0
    3844:	1e77      	subs	r7, r6, #1
    3846:	f017 0c01 	ands.w	ip, r7, #1
    384a:	d05a      	beq.n	3902 <arm_sqrt_q31+0xca>
    384c:	1eb3      	subs	r3, r6, #2
    384e:	4098      	lsls	r0, r3
    3850:	ee07 0a90 	vmov	s15, r0
    3854:	4c33      	ldr	r4, [pc, #204]	; (3924 <arm_sqrt_q31+0xec>)
    3856:	ea4f 0e60 	mov.w	lr, r0, asr #1
    385a:	eefa 7ae0 	vcvt.f32.s32	s15, s15, #31
    385e:	ee17 3a90 	vmov	r3, s15
    3862:	105b      	asrs	r3, r3, #1
    3864:	1ae4      	subs	r4, r4, r3
    3866:	ee07 4a90 	vmov	s15, r4
    386a:	eefe 7ac1 	vcvt.s32.f32	s15, s15, #30
    386e:	ee17 5a90 	vmov	r5, s15
    3872:	fb85 8905 	smull	r8, r9, r5, r5
    3876:	ea4f 72d8 	mov.w	r2, r8, lsr #31
    387a:	ea42 0249 	orr.w	r2, r2, r9, lsl #1
    387e:	fb82 230e 	smull	r2, r3, r2, lr
    3882:	0fd4      	lsrs	r4, r2, #31
    3884:	ea44 0443 	orr.w	r4, r4, r3, lsl #1
    3888:	f1c4 5440 	rsb	r4, r4, #805306368	; 0x30000000
    388c:	fb85 4504 	smull	r4, r5, r5, r4
    3890:	0fe2      	lsrs	r2, r4, #31
    3892:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    3896:	0093      	lsls	r3, r2, #2
    3898:	fb83 8903 	smull	r8, r9, r3, r3
    389c:	ea4f 74d8 	mov.w	r4, r8, lsr #31
    38a0:	ea44 0449 	orr.w	r4, r4, r9, lsl #1
    38a4:	fb8e 4504 	smull	r4, r5, lr, r4
    38a8:	0fe2      	lsrs	r2, r4, #31
    38aa:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    38ae:	f1c2 5240 	rsb	r2, r2, #805306368	; 0x30000000
    38b2:	fb83 2302 	smull	r2, r3, r3, r2
    38b6:	0fd2      	lsrs	r2, r2, #31
    38b8:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    38bc:	ea4f 0882 	mov.w	r8, r2, lsl #2
    38c0:	fb88 2308 	smull	r2, r3, r8, r8
    38c4:	0fd4      	lsrs	r4, r2, #31
    38c6:	ea44 0443 	orr.w	r4, r4, r3, lsl #1
    38ca:	fb8e 4504 	smull	r4, r5, lr, r4
    38ce:	0fe2      	lsrs	r2, r4, #31
    38d0:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    38d4:	f1c2 5240 	rsb	r2, r2, #805306368	; 0x30000000
    38d8:	fb88 2302 	smull	r2, r3, r8, r2
    38dc:	0fd4      	lsrs	r4, r2, #31
    38de:	ea44 0443 	orr.w	r4, r4, r3, lsl #1
    38e2:	00a4      	lsls	r4, r4, #2
    38e4:	fb80 4504 	smull	r4, r5, r0, r4
    38e8:	0fe3      	lsrs	r3, r4, #31
    38ea:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
    38ee:	005b      	lsls	r3, r3, #1
    38f0:	f1bc 0f00 	cmp.w	ip, #0
    38f4:	d107      	bne.n	3906 <arm_sqrt_q31+0xce>
    38f6:	107f      	asrs	r7, r7, #1
    38f8:	2000      	movs	r0, #0
    38fa:	413b      	asrs	r3, r7
    38fc:	600b      	str	r3, [r1, #0]
    38fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3902:	40b8      	lsls	r0, r7
    3904:	e7a4      	b.n	3850 <arm_sqrt_q31+0x18>
    3906:	3e02      	subs	r6, #2
    3908:	f04f 0000 	mov.w	r0, #0
    390c:	bf48      	it	mi
    390e:	463e      	movmi	r6, r7
    3910:	1076      	asrs	r6, r6, #1
    3912:	4133      	asrs	r3, r6
    3914:	600b      	str	r3, [r1, #0]
    3916:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    391a:	2300      	movs	r3, #0
    391c:	f04f 30ff 	mov.w	r0, #4294967295
    3920:	600b      	str	r3, [r1, #0]
    3922:	4770      	bx	lr
    3924:	5f3759df 	.word	0x5f3759df

00003928 <arm_cfft_radix4by2_q15>:
    3928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    392c:	084d      	lsrs	r5, r1, #1
    392e:	4616      	mov	r6, r2
    3930:	eb00 0741 	add.w	r7, r0, r1, lsl #1
    3934:	d04b      	beq.n	39ce <arm_cfft_radix4by2_q15+0xa6>
    3936:	4604      	mov	r4, r0
    3938:	46be      	mov	lr, r7
    393a:	4690      	mov	r8, r2
    393c:	4629      	mov	r1, r5
    393e:	f04f 0c00 	mov.w	ip, #0
    3942:	f858 9b04 	ldr.w	r9, [r8], #4
    3946:	6803      	ldr	r3, [r0, #0]
    3948:	fa93 f32c 	shadd16	r3, r3, ip
    394c:	f8de 2000 	ldr.w	r2, [lr]
    3950:	fa92 f22c 	shadd16	r2, r2, ip
    3954:	fad3 fa12 	qsub16	sl, r3, r2
    3958:	fa93 f322 	shadd16	r3, r3, r2
    395c:	f840 3b04 	str.w	r3, [r0], #4
    3960:	fb29 f20a 	smuad	r2, r9, sl
    3964:	fb49 f91a 	smusdx	r9, r9, sl
    3968:	4b1f      	ldr	r3, [pc, #124]	; (39e8 <arm_cfft_radix4by2_q15+0xc0>)
    396a:	3901      	subs	r1, #1
    396c:	ea09 0303 	and.w	r3, r9, r3
    3970:	ea43 4312 	orr.w	r3, r3, r2, lsr #16
    3974:	f84e 3b04 	str.w	r3, [lr], #4
    3978:	d1e3      	bne.n	3942 <arm_cfft_radix4by2_q15+0x1a>
    397a:	4629      	mov	r1, r5
    397c:	2302      	movs	r3, #2
    397e:	4632      	mov	r2, r6
    3980:	4620      	mov	r0, r4
    3982:	f000 f953 	bl	3c2c <arm_radix4_butterfly_q15>
    3986:	4638      	mov	r0, r7
    3988:	2302      	movs	r3, #2
    398a:	4629      	mov	r1, r5
    398c:	4632      	mov	r2, r6
    398e:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
    3992:	f000 f94b 	bl	3c2c <arm_radix4_butterfly_q15>
    3996:	4620      	mov	r0, r4
    3998:	1ca3      	adds	r3, r4, #2
    399a:	f933 7c02 	ldrsh.w	r7, [r3, #-2]
    399e:	3008      	adds	r0, #8
    39a0:	f930 6c06 	ldrsh.w	r6, [r0, #-6]
    39a4:	3308      	adds	r3, #8
    39a6:	f930 4c04 	ldrsh.w	r4, [r0, #-4]
    39aa:	007f      	lsls	r7, r7, #1
    39ac:	f930 2c02 	ldrsh.w	r2, [r0, #-2]
    39b0:	0076      	lsls	r6, r6, #1
    39b2:	0064      	lsls	r4, r4, #1
    39b4:	f823 7c0a 	strh.w	r7, [r3, #-10]
    39b8:	0052      	lsls	r2, r2, #1
    39ba:	f820 6c06 	strh.w	r6, [r0, #-6]
    39be:	f820 4c04 	strh.w	r4, [r0, #-4]
    39c2:	f820 2c02 	strh.w	r2, [r0, #-2]
    39c6:	4285      	cmp	r5, r0
    39c8:	d1e7      	bne.n	399a <arm_cfft_radix4by2_q15+0x72>
    39ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    39ce:	4629      	mov	r1, r5
    39d0:	2302      	movs	r3, #2
    39d2:	f000 f92b 	bl	3c2c <arm_radix4_butterfly_q15>
    39d6:	4632      	mov	r2, r6
    39d8:	4629      	mov	r1, r5
    39da:	4638      	mov	r0, r7
    39dc:	2302      	movs	r3, #2
    39de:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    39e2:	f000 b923 	b.w	3c2c <arm_radix4_butterfly_q15>
    39e6:	bf00      	nop
    39e8:	ffff0000 	.word	0xffff0000

000039ec <arm_cfft_radix4by2_inverse_q15>:
    39ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    39f0:	084d      	lsrs	r5, r1, #1
    39f2:	4616      	mov	r6, r2
    39f4:	eb00 0741 	add.w	r7, r0, r1, lsl #1
    39f8:	d04b      	beq.n	3a92 <arm_cfft_radix4by2_inverse_q15+0xa6>
    39fa:	4604      	mov	r4, r0
    39fc:	46be      	mov	lr, r7
    39fe:	4690      	mov	r8, r2
    3a00:	4629      	mov	r1, r5
    3a02:	f04f 0c00 	mov.w	ip, #0
    3a06:	f858 9b04 	ldr.w	r9, [r8], #4
    3a0a:	6803      	ldr	r3, [r0, #0]
    3a0c:	fa93 f32c 	shadd16	r3, r3, ip
    3a10:	f8de 2000 	ldr.w	r2, [lr]
    3a14:	fa92 f22c 	shadd16	r2, r2, ip
    3a18:	fad3 fa12 	qsub16	sl, r3, r2
    3a1c:	fa93 f322 	shadd16	r3, r3, r2
    3a20:	f840 3b04 	str.w	r3, [r0], #4
    3a24:	fb49 f20a 	smusd	r2, r9, sl
    3a28:	fb29 f91a 	smuadx	r9, r9, sl
    3a2c:	4b1f      	ldr	r3, [pc, #124]	; (3aac <arm_cfft_radix4by2_inverse_q15+0xc0>)
    3a2e:	3901      	subs	r1, #1
    3a30:	ea09 0303 	and.w	r3, r9, r3
    3a34:	ea43 4312 	orr.w	r3, r3, r2, lsr #16
    3a38:	f84e 3b04 	str.w	r3, [lr], #4
    3a3c:	d1e3      	bne.n	3a06 <arm_cfft_radix4by2_inverse_q15+0x1a>
    3a3e:	4629      	mov	r1, r5
    3a40:	2302      	movs	r3, #2
    3a42:	4632      	mov	r2, r6
    3a44:	4620      	mov	r0, r4
    3a46:	f000 fa2d 	bl	3ea4 <arm_radix4_butterfly_inverse_q15>
    3a4a:	4638      	mov	r0, r7
    3a4c:	2302      	movs	r3, #2
    3a4e:	4629      	mov	r1, r5
    3a50:	4632      	mov	r2, r6
    3a52:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
    3a56:	f000 fa25 	bl	3ea4 <arm_radix4_butterfly_inverse_q15>
    3a5a:	4620      	mov	r0, r4
    3a5c:	1ca3      	adds	r3, r4, #2
    3a5e:	f933 7c02 	ldrsh.w	r7, [r3, #-2]
    3a62:	3008      	adds	r0, #8
    3a64:	f930 6c06 	ldrsh.w	r6, [r0, #-6]
    3a68:	3308      	adds	r3, #8
    3a6a:	f930 4c04 	ldrsh.w	r4, [r0, #-4]
    3a6e:	007f      	lsls	r7, r7, #1
    3a70:	f930 2c02 	ldrsh.w	r2, [r0, #-2]
    3a74:	0076      	lsls	r6, r6, #1
    3a76:	0064      	lsls	r4, r4, #1
    3a78:	f823 7c0a 	strh.w	r7, [r3, #-10]
    3a7c:	0052      	lsls	r2, r2, #1
    3a7e:	f820 6c06 	strh.w	r6, [r0, #-6]
    3a82:	f820 4c04 	strh.w	r4, [r0, #-4]
    3a86:	f820 2c02 	strh.w	r2, [r0, #-2]
    3a8a:	4285      	cmp	r5, r0
    3a8c:	d1e7      	bne.n	3a5e <arm_cfft_radix4by2_inverse_q15+0x72>
    3a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3a92:	4629      	mov	r1, r5
    3a94:	2302      	movs	r3, #2
    3a96:	f000 fa05 	bl	3ea4 <arm_radix4_butterfly_inverse_q15>
    3a9a:	4632      	mov	r2, r6
    3a9c:	4629      	mov	r1, r5
    3a9e:	4638      	mov	r0, r7
    3aa0:	2302      	movs	r3, #2
    3aa2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3aa6:	f000 b9fd 	b.w	3ea4 <arm_radix4_butterfly_inverse_q15>
    3aaa:	bf00      	nop
    3aac:	ffff0000 	.word	0xffff0000

00003ab0 <arm_cfft_q15>:
    3ab0:	2a01      	cmp	r2, #1
    3ab2:	b570      	push	{r4, r5, r6, lr}
    3ab4:	460d      	mov	r5, r1
    3ab6:	4604      	mov	r4, r0
    3ab8:	461e      	mov	r6, r3
    3aba:	8801      	ldrh	r1, [r0, #0]
    3abc:	d024      	beq.n	3b08 <arm_cfft_q15+0x58>
    3abe:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    3ac2:	d013      	beq.n	3aec <arm_cfft_q15+0x3c>
    3ac4:	d808      	bhi.n	3ad8 <arm_cfft_q15+0x28>
    3ac6:	2920      	cmp	r1, #32
    3ac8:	d031      	beq.n	3b2e <arm_cfft_q15+0x7e>
    3aca:	d945      	bls.n	3b58 <arm_cfft_q15+0xa8>
    3acc:	2940      	cmp	r1, #64	; 0x40
    3ace:	d00d      	beq.n	3aec <arm_cfft_q15+0x3c>
    3ad0:	2980      	cmp	r1, #128	; 0x80
    3ad2:	d02c      	beq.n	3b2e <arm_cfft_q15+0x7e>
    3ad4:	b98e      	cbnz	r6, 3afa <arm_cfft_q15+0x4a>
    3ad6:	bd70      	pop	{r4, r5, r6, pc}
    3ad8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
    3adc:	d006      	beq.n	3aec <arm_cfft_q15+0x3c>
    3ade:	d923      	bls.n	3b28 <arm_cfft_q15+0x78>
    3ae0:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
    3ae4:	d023      	beq.n	3b2e <arm_cfft_q15+0x7e>
    3ae6:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    3aea:	d1f3      	bne.n	3ad4 <arm_cfft_q15+0x24>
    3aec:	2301      	movs	r3, #1
    3aee:	6862      	ldr	r2, [r4, #4]
    3af0:	4628      	mov	r0, r5
    3af2:	f000 f89b 	bl	3c2c <arm_radix4_butterfly_q15>
    3af6:	2e00      	cmp	r6, #0
    3af8:	d0ed      	beq.n	3ad6 <arm_cfft_q15+0x26>
    3afa:	4628      	mov	r0, r5
    3afc:	68a2      	ldr	r2, [r4, #8]
    3afe:	89a1      	ldrh	r1, [r4, #12]
    3b00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3b04:	f000 b867 	b.w	3bd6 <arm_bitreversal_16>
    3b08:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    3b0c:	d01e      	beq.n	3b4c <arm_cfft_q15+0x9c>
    3b0e:	d813      	bhi.n	3b38 <arm_cfft_q15+0x88>
    3b10:	2920      	cmp	r1, #32
    3b12:	d004      	beq.n	3b1e <arm_cfft_q15+0x6e>
    3b14:	d927      	bls.n	3b66 <arm_cfft_q15+0xb6>
    3b16:	2940      	cmp	r1, #64	; 0x40
    3b18:	d018      	beq.n	3b4c <arm_cfft_q15+0x9c>
    3b1a:	2980      	cmp	r1, #128	; 0x80
    3b1c:	d1da      	bne.n	3ad4 <arm_cfft_q15+0x24>
    3b1e:	6862      	ldr	r2, [r4, #4]
    3b20:	4628      	mov	r0, r5
    3b22:	f7ff ff63 	bl	39ec <arm_cfft_radix4by2_inverse_q15>
    3b26:	e7d5      	b.n	3ad4 <arm_cfft_q15+0x24>
    3b28:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    3b2c:	d1d2      	bne.n	3ad4 <arm_cfft_q15+0x24>
    3b2e:	6862      	ldr	r2, [r4, #4]
    3b30:	4628      	mov	r0, r5
    3b32:	f7ff fef9 	bl	3928 <arm_cfft_radix4by2_q15>
    3b36:	e7cd      	b.n	3ad4 <arm_cfft_q15+0x24>
    3b38:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
    3b3c:	d006      	beq.n	3b4c <arm_cfft_q15+0x9c>
    3b3e:	d90e      	bls.n	3b5e <arm_cfft_q15+0xae>
    3b40:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
    3b44:	d0eb      	beq.n	3b1e <arm_cfft_q15+0x6e>
    3b46:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    3b4a:	d1c3      	bne.n	3ad4 <arm_cfft_q15+0x24>
    3b4c:	2301      	movs	r3, #1
    3b4e:	6862      	ldr	r2, [r4, #4]
    3b50:	4628      	mov	r0, r5
    3b52:	f000 f9a7 	bl	3ea4 <arm_radix4_butterfly_inverse_q15>
    3b56:	e7bd      	b.n	3ad4 <arm_cfft_q15+0x24>
    3b58:	2910      	cmp	r1, #16
    3b5a:	d1bb      	bne.n	3ad4 <arm_cfft_q15+0x24>
    3b5c:	e7c6      	b.n	3aec <arm_cfft_q15+0x3c>
    3b5e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    3b62:	d0dc      	beq.n	3b1e <arm_cfft_q15+0x6e>
    3b64:	e7b6      	b.n	3ad4 <arm_cfft_q15+0x24>
    3b66:	2910      	cmp	r1, #16
    3b68:	d1b4      	bne.n	3ad4 <arm_cfft_q15+0x24>
    3b6a:	e7ef      	b.n	3b4c <arm_cfft_q15+0x9c>

00003b6c <arm_bitreversal_32>:
    3b6c:	1c4b      	adds	r3, r1, #1
    3b6e:	2b01      	cmp	r3, #1
    3b70:	bf98      	it	ls
    3b72:	4770      	bxls	lr
    3b74:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
    3b78:	1c91      	adds	r1, r2, #2
    3b7a:	089b      	lsrs	r3, r3, #2

00003b7c <arm_bitreversal_32_0>:
    3b7c:	f8b1 8004 	ldrh.w	r8, [r1, #4]
    3b80:	f8b1 9002 	ldrh.w	r9, [r1, #2]
    3b84:	880a      	ldrh	r2, [r1, #0]
    3b86:	f831 cc02 	ldrh.w	ip, [r1, #-2]
    3b8a:	4480      	add	r8, r0
    3b8c:	4481      	add	r9, r0
    3b8e:	4402      	add	r2, r0
    3b90:	4484      	add	ip, r0
    3b92:	f8d9 7000 	ldr.w	r7, [r9]
    3b96:	f8d8 6000 	ldr.w	r6, [r8]
    3b9a:	6815      	ldr	r5, [r2, #0]
    3b9c:	f8dc 4000 	ldr.w	r4, [ip]
    3ba0:	f8c9 6000 	str.w	r6, [r9]
    3ba4:	f8c8 7000 	str.w	r7, [r8]
    3ba8:	f8cc 5000 	str.w	r5, [ip]
    3bac:	6014      	str	r4, [r2, #0]
    3bae:	f8d9 7004 	ldr.w	r7, [r9, #4]
    3bb2:	f8d8 6004 	ldr.w	r6, [r8, #4]
    3bb6:	6855      	ldr	r5, [r2, #4]
    3bb8:	f8dc 4004 	ldr.w	r4, [ip, #4]
    3bbc:	f8c9 6004 	str.w	r6, [r9, #4]
    3bc0:	f8c8 7004 	str.w	r7, [r8, #4]
    3bc4:	f8cc 5004 	str.w	r5, [ip, #4]
    3bc8:	6054      	str	r4, [r2, #4]
    3bca:	3108      	adds	r1, #8
    3bcc:	3b01      	subs	r3, #1
    3bce:	d1d5      	bne.n	3b7c <arm_bitreversal_32_0>
    3bd0:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
    3bd4:	4770      	bx	lr

00003bd6 <arm_bitreversal_16>:
    3bd6:	1c4b      	adds	r3, r1, #1
    3bd8:	2b01      	cmp	r3, #1
    3bda:	bf98      	it	ls
    3bdc:	4770      	bxls	lr
    3bde:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
    3be2:	1c91      	adds	r1, r2, #2
    3be4:	089b      	lsrs	r3, r3, #2

00003be6 <arm_bitreversal_16_0>:
    3be6:	f8b1 8004 	ldrh.w	r8, [r1, #4]
    3bea:	f8b1 9002 	ldrh.w	r9, [r1, #2]
    3bee:	880a      	ldrh	r2, [r1, #0]
    3bf0:	f831 cc02 	ldrh.w	ip, [r1, #-2]
    3bf4:	eb00 0858 	add.w	r8, r0, r8, lsr #1
    3bf8:	eb00 0959 	add.w	r9, r0, r9, lsr #1
    3bfc:	eb00 0252 	add.w	r2, r0, r2, lsr #1
    3c00:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
    3c04:	f8d9 7000 	ldr.w	r7, [r9]
    3c08:	f8d8 6000 	ldr.w	r6, [r8]
    3c0c:	6815      	ldr	r5, [r2, #0]
    3c0e:	f8dc 4000 	ldr.w	r4, [ip]
    3c12:	f8c9 6000 	str.w	r6, [r9]
    3c16:	f8c8 7000 	str.w	r7, [r8]
    3c1a:	f8cc 5000 	str.w	r5, [ip]
    3c1e:	6014      	str	r4, [r2, #0]
    3c20:	3108      	adds	r1, #8
    3c22:	3b01      	subs	r3, #1
    3c24:	d1df      	bne.n	3be6 <arm_bitreversal_16_0>
    3c26:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
    3c2a:	4770      	bx	lr

00003c2c <arm_radix4_butterfly_q15>:
    3c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3c30:	469b      	mov	fp, r3
    3c32:	b091      	sub	sp, #68	; 0x44
    3c34:	088b      	lsrs	r3, r1, #2
    3c36:	4606      	mov	r6, r0
    3c38:	900e      	str	r0, [sp, #56]	; 0x38
    3c3a:	2500      	movs	r5, #0
    3c3c:	4618      	mov	r0, r3
    3c3e:	9103      	str	r1, [sp, #12]
    3c40:	930f      	str	r3, [sp, #60]	; 0x3c
    3c42:	4637      	mov	r7, r6
    3c44:	0081      	lsls	r1, r0, #2
    3c46:	4682      	mov	sl, r0
    3c48:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
    3c4c:	4696      	mov	lr, r2
    3c4e:	1870      	adds	r0, r6, r1
    3c50:	9207      	str	r2, [sp, #28]
    3c52:	009b      	lsls	r3, r3, #2
    3c54:	462c      	mov	r4, r5
    3c56:	1846      	adds	r6, r0, r1
    3c58:	462a      	mov	r2, r5
    3c5a:	9304      	str	r3, [sp, #16]
    3c5c:	4431      	add	r1, r6
    3c5e:	9601      	str	r6, [sp, #4]
    3c60:	f8cd b008 	str.w	fp, [sp, #8]
    3c64:	683b      	ldr	r3, [r7, #0]
    3c66:	fa93 fc22 	shadd16	ip, r3, r2
    3c6a:	fa9c fc22 	shadd16	ip, ip, r2
    3c6e:	9b01      	ldr	r3, [sp, #4]
    3c70:	681b      	ldr	r3, [r3, #0]
    3c72:	fa93 f322 	shadd16	r3, r3, r2
    3c76:	fa93 f322 	shadd16	r3, r3, r2
    3c7a:	fa9c f813 	qadd16	r8, ip, r3
    3c7e:	fadc fc13 	qsub16	ip, ip, r3
    3c82:	6803      	ldr	r3, [r0, #0]
    3c84:	fa93 f322 	shadd16	r3, r3, r2
    3c88:	fa93 f922 	shadd16	r9, r3, r2
    3c8c:	680b      	ldr	r3, [r1, #0]
    3c8e:	fa93 f322 	shadd16	r3, r3, r2
    3c92:	fa93 f322 	shadd16	r3, r3, r2
    3c96:	fa99 f313 	qadd16	r3, r9, r3
    3c9a:	fa98 f923 	shadd16	r9, r8, r3
    3c9e:	f847 9b04 	str.w	r9, [r7], #4
    3ca2:	fad8 f313 	qsub16	r3, r8, r3
    3ca6:	f85e 9034 	ldr.w	r9, [lr, r4, lsl #3]
    3caa:	fb29 fb03 	smuad	fp, r9, r3
    3cae:	fb49 f913 	smusdx	r9, r9, r3
    3cb2:	6803      	ldr	r3, [r0, #0]
    3cb4:	fa93 f322 	shadd16	r3, r3, r2
    3cb8:	fa93 f822 	shadd16	r8, r3, r2
    3cbc:	4b78      	ldr	r3, [pc, #480]	; (3ea0 <arm_radix4_butterfly_q15+0x274>)
    3cbe:	ea09 0303 	and.w	r3, r9, r3
    3cc2:	ea43 431b 	orr.w	r3, r3, fp, lsr #16
    3cc6:	f840 3b04 	str.w	r3, [r0], #4
    3cca:	680b      	ldr	r3, [r1, #0]
    3ccc:	fa93 f322 	shadd16	r3, r3, r2
    3cd0:	fa93 f322 	shadd16	r3, r3, r2
    3cd4:	fad8 f313 	qsub16	r3, r8, r3
    3cd8:	faac f913 	qasx	r9, ip, r3
    3cdc:	faec fc13 	qsax	ip, ip, r3
    3ce0:	f85e 3024 	ldr.w	r3, [lr, r4, lsl #2]
    3ce4:	fb23 f80c 	smuad	r8, r3, ip
    3ce8:	fb43 fc1c 	smusdx	ip, r3, ip
    3cec:	4b6c      	ldr	r3, [pc, #432]	; (3ea0 <arm_radix4_butterfly_q15+0x274>)
    3cee:	9e01      	ldr	r6, [sp, #4]
    3cf0:	ea0c 0303 	and.w	r3, ip, r3
    3cf4:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
    3cf8:	f846 3b04 	str.w	r3, [r6], #4
    3cfc:	9601      	str	r6, [sp, #4]
    3cfe:	462e      	mov	r6, r5
    3d00:	f85e 3005 	ldr.w	r3, [lr, r5]
    3d04:	fb23 fc09 	smuad	ip, r3, r9
    3d08:	fb43 f919 	smusdx	r9, r3, r9
    3d0c:	4b64      	ldr	r3, [pc, #400]	; (3ea0 <arm_radix4_butterfly_q15+0x274>)
    3d0e:	f1ba 0a01 	subs.w	sl, sl, #1
    3d12:	9d02      	ldr	r5, [sp, #8]
    3d14:	ea09 0303 	and.w	r3, r9, r3
    3d18:	442c      	add	r4, r5
    3d1a:	9d04      	ldr	r5, [sp, #16]
    3d1c:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
    3d20:	442e      	add	r6, r5
    3d22:	f841 3b04 	str.w	r3, [r1], #4
    3d26:	4635      	mov	r5, r6
    3d28:	d19c      	bne.n	3c64 <arm_radix4_butterfly_q15+0x38>
    3d2a:	f8dd b008 	ldr.w	fp, [sp, #8]
    3d2e:	ea4f 038b 	mov.w	r3, fp, lsl #2
    3d32:	9309      	str	r3, [sp, #36]	; 0x24
    3d34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    3d36:	2b04      	cmp	r3, #4
    3d38:	f240 8086 	bls.w	3e48 <arm_radix4_butterfly_q15+0x21c>
    3d3c:	f8cd a010 	str.w	sl, [sp, #16]
    3d40:	930c      	str	r3, [sp, #48]	; 0x30
    3d42:	9302      	str	r3, [sp, #8]
    3d44:	9a02      	ldr	r2, [sp, #8]
    3d46:	2100      	movs	r1, #0
    3d48:	0893      	lsrs	r3, r2, #2
    3d4a:	9105      	str	r1, [sp, #20]
    3d4c:	0097      	lsls	r7, r2, #2
    3d4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    3d50:	930d      	str	r3, [sp, #52]	; 0x34
    3d52:	9206      	str	r2, [sp, #24]
    3d54:	1e5a      	subs	r2, r3, #1
    3d56:	009b      	lsls	r3, r3, #2
    3d58:	9108      	str	r1, [sp, #32]
    3d5a:	920a      	str	r2, [sp, #40]	; 0x28
    3d5c:	930b      	str	r3, [sp, #44]	; 0x2c
    3d5e:	9907      	ldr	r1, [sp, #28]
    3d60:	9a08      	ldr	r2, [sp, #32]
    3d62:	460d      	mov	r5, r1
    3d64:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    3d66:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    3d6a:	4611      	mov	r1, r2
    3d6c:	f855 c022 	ldr.w	ip, [r5, r2, lsl #2]
    3d70:	9a07      	ldr	r2, [sp, #28]
    3d72:	9e06      	ldr	r6, [sp, #24]
    3d74:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
    3d78:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3d7a:	1930      	adds	r0, r6, r4
    3d7c:	f852 8031 	ldr.w	r8, [r2, r1, lsl #3]
    3d80:	18cb      	adds	r3, r1, r3
    3d82:	9a05      	ldr	r2, [sp, #20]
    3d84:	1825      	adds	r5, r4, r0
    3d86:	9308      	str	r3, [sp, #32]
    3d88:	9b03      	ldr	r3, [sp, #12]
    3d8a:	442c      	add	r4, r5
    3d8c:	4293      	cmp	r3, r2
    3d8e:	d946      	bls.n	3e1e <arm_radix4_butterfly_q15+0x1f2>
    3d90:	9b02      	ldr	r3, [sp, #8]
    3d92:	9501      	str	r5, [sp, #4]
    3d94:	eb03 0e02 	add.w	lr, r3, r2
    3d98:	9a01      	ldr	r2, [sp, #4]
    3d9a:	6833      	ldr	r3, [r6, #0]
    3d9c:	6812      	ldr	r2, [r2, #0]
    3d9e:	fa93 fa12 	qadd16	sl, r3, r2
    3da2:	fad3 f312 	qsub16	r3, r3, r2
    3da6:	6801      	ldr	r1, [r0, #0]
    3da8:	6822      	ldr	r2, [r4, #0]
    3daa:	fa91 f112 	qadd16	r1, r1, r2
    3dae:	fa9a f221 	shadd16	r2, sl, r1
    3db2:	9d04      	ldr	r5, [sp, #16]
    3db4:	fa92 f225 	shadd16	r2, r2, r5
    3db8:	6032      	str	r2, [r6, #0]
    3dba:	443e      	add	r6, r7
    3dbc:	fada f121 	shsub16	r1, sl, r1
    3dc0:	fb28 fb01 	smuad	fp, r8, r1
    3dc4:	fb48 f211 	smusdx	r2, r8, r1
    3dc8:	4935      	ldr	r1, [pc, #212]	; (3ea0 <arm_radix4_butterfly_q15+0x274>)
    3dca:	f8d0 a000 	ldr.w	sl, [r0]
    3dce:	4011      	ands	r1, r2
    3dd0:	ea41 411b 	orr.w	r1, r1, fp, lsr #16
    3dd4:	6001      	str	r1, [r0, #0]
    3dd6:	4438      	add	r0, r7
    3dd8:	6822      	ldr	r2, [r4, #0]
    3dda:	fada f212 	qsub16	r2, sl, r2
    3dde:	faa3 f122 	shasx	r1, r3, r2
    3de2:	fae3 f322 	shsax	r3, r3, r2
    3de6:	fb2c fb03 	smuad	fp, ip, r3
    3dea:	fb4c f313 	smusdx	r3, ip, r3
    3dee:	4a2c      	ldr	r2, [pc, #176]	; (3ea0 <arm_radix4_butterfly_q15+0x274>)
    3df0:	401a      	ands	r2, r3
    3df2:	9b01      	ldr	r3, [sp, #4]
    3df4:	ea42 421b 	orr.w	r2, r2, fp, lsr #16
    3df8:	601a      	str	r2, [r3, #0]
    3dfa:	443b      	add	r3, r7
    3dfc:	9301      	str	r3, [sp, #4]
    3dfe:	fb29 f201 	smuad	r2, r9, r1
    3e02:	fb49 f111 	smusdx	r1, r9, r1
    3e06:	4b26      	ldr	r3, [pc, #152]	; (3ea0 <arm_radix4_butterfly_q15+0x274>)
    3e08:	46f2      	mov	sl, lr
    3e0a:	9d02      	ldr	r5, [sp, #8]
    3e0c:	400b      	ands	r3, r1
    3e0e:	44ae      	add	lr, r5
    3e10:	ea43 4312 	orr.w	r3, r3, r2, lsr #16
    3e14:	6023      	str	r3, [r4, #0]
    3e16:	443c      	add	r4, r7
    3e18:	9b03      	ldr	r3, [sp, #12]
    3e1a:	4553      	cmp	r3, sl
    3e1c:	d8bc      	bhi.n	3d98 <arm_radix4_butterfly_q15+0x16c>
    3e1e:	9a06      	ldr	r2, [sp, #24]
    3e20:	9b05      	ldr	r3, [sp, #20]
    3e22:	3204      	adds	r2, #4
    3e24:	3301      	adds	r3, #1
    3e26:	9206      	str	r2, [sp, #24]
    3e28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3e2a:	9305      	str	r3, [sp, #20]
    3e2c:	4293      	cmp	r3, r2
    3e2e:	d996      	bls.n	3d5e <arm_radix4_butterfly_q15+0x132>
    3e30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3e32:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    3e34:	089b      	lsrs	r3, r3, #2
    3e36:	9202      	str	r2, [sp, #8]
    3e38:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3e3a:	2b04      	cmp	r3, #4
    3e3c:	930c      	str	r3, [sp, #48]	; 0x30
    3e3e:	ea4f 0282 	mov.w	r2, r2, lsl #2
    3e42:	9209      	str	r2, [sp, #36]	; 0x24
    3e44:	f63f af7e 	bhi.w	3d44 <arm_radix4_butterfly_q15+0x118>
    3e48:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    3e4a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    3e4c:	3410      	adds	r4, #16
    3e4e:	f854 3c10 	ldr.w	r3, [r4, #-16]
    3e52:	f854 7c08 	ldr.w	r7, [r4, #-8]
    3e56:	fa93 f117 	qadd16	r1, r3, r7
    3e5a:	f854 2c0c 	ldr.w	r2, [r4, #-12]
    3e5e:	f854 0c04 	ldr.w	r0, [r4, #-4]
    3e62:	fa92 f510 	qadd16	r5, r2, r0
    3e66:	fa91 f525 	shadd16	r5, r1, r5
    3e6a:	f844 5c10 	str.w	r5, [r4, #-16]
    3e6e:	fa92 f510 	qadd16	r5, r2, r0
    3e72:	fad1 f125 	shsub16	r1, r1, r5
    3e76:	f844 1c0c 	str.w	r1, [r4, #-12]
    3e7a:	fad3 f317 	qsub16	r3, r3, r7
    3e7e:	fad2 f210 	qsub16	r2, r2, r0
    3e82:	fae3 f122 	shsax	r1, r3, r2
    3e86:	f844 1c08 	str.w	r1, [r4, #-8]
    3e8a:	faa3 f322 	shasx	r3, r3, r2
    3e8e:	3e01      	subs	r6, #1
    3e90:	f844 3c04 	str.w	r3, [r4, #-4]
    3e94:	f104 0410 	add.w	r4, r4, #16
    3e98:	d1d9      	bne.n	3e4e <arm_radix4_butterfly_q15+0x222>
    3e9a:	b011      	add	sp, #68	; 0x44
    3e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3ea0:	ffff0000 	.word	0xffff0000

00003ea4 <arm_radix4_butterfly_inverse_q15>:
    3ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3ea8:	469b      	mov	fp, r3
    3eaa:	b091      	sub	sp, #68	; 0x44
    3eac:	088b      	lsrs	r3, r1, #2
    3eae:	4606      	mov	r6, r0
    3eb0:	900e      	str	r0, [sp, #56]	; 0x38
    3eb2:	2500      	movs	r5, #0
    3eb4:	4618      	mov	r0, r3
    3eb6:	9103      	str	r1, [sp, #12]
    3eb8:	930f      	str	r3, [sp, #60]	; 0x3c
    3eba:	4637      	mov	r7, r6
    3ebc:	0081      	lsls	r1, r0, #2
    3ebe:	4682      	mov	sl, r0
    3ec0:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
    3ec4:	4696      	mov	lr, r2
    3ec6:	1870      	adds	r0, r6, r1
    3ec8:	9207      	str	r2, [sp, #28]
    3eca:	009b      	lsls	r3, r3, #2
    3ecc:	462c      	mov	r4, r5
    3ece:	1846      	adds	r6, r0, r1
    3ed0:	462a      	mov	r2, r5
    3ed2:	9304      	str	r3, [sp, #16]
    3ed4:	4431      	add	r1, r6
    3ed6:	9601      	str	r6, [sp, #4]
    3ed8:	f8cd b008 	str.w	fp, [sp, #8]
    3edc:	683b      	ldr	r3, [r7, #0]
    3ede:	fa93 fc22 	shadd16	ip, r3, r2
    3ee2:	fa9c fc22 	shadd16	ip, ip, r2
    3ee6:	9b01      	ldr	r3, [sp, #4]
    3ee8:	681b      	ldr	r3, [r3, #0]
    3eea:	fa93 f322 	shadd16	r3, r3, r2
    3eee:	fa93 f322 	shadd16	r3, r3, r2
    3ef2:	fa9c f813 	qadd16	r8, ip, r3
    3ef6:	fadc fc13 	qsub16	ip, ip, r3
    3efa:	6803      	ldr	r3, [r0, #0]
    3efc:	fa93 f322 	shadd16	r3, r3, r2
    3f00:	fa93 f922 	shadd16	r9, r3, r2
    3f04:	680b      	ldr	r3, [r1, #0]
    3f06:	fa93 f322 	shadd16	r3, r3, r2
    3f0a:	fa93 f322 	shadd16	r3, r3, r2
    3f0e:	fa99 f313 	qadd16	r3, r9, r3
    3f12:	fa98 f923 	shadd16	r9, r8, r3
    3f16:	f847 9b04 	str.w	r9, [r7], #4
    3f1a:	fad8 f313 	qsub16	r3, r8, r3
    3f1e:	f85e 9034 	ldr.w	r9, [lr, r4, lsl #3]
    3f22:	fb49 fb03 	smusd	fp, r9, r3
    3f26:	fb29 f913 	smuadx	r9, r9, r3
    3f2a:	6803      	ldr	r3, [r0, #0]
    3f2c:	fa93 f322 	shadd16	r3, r3, r2
    3f30:	fa93 f822 	shadd16	r8, r3, r2
    3f34:	4b78      	ldr	r3, [pc, #480]	; (4118 <arm_radix4_butterfly_inverse_q15+0x274>)
    3f36:	ea09 0303 	and.w	r3, r9, r3
    3f3a:	ea43 431b 	orr.w	r3, r3, fp, lsr #16
    3f3e:	f840 3b04 	str.w	r3, [r0], #4
    3f42:	680b      	ldr	r3, [r1, #0]
    3f44:	fa93 f322 	shadd16	r3, r3, r2
    3f48:	fa93 f322 	shadd16	r3, r3, r2
    3f4c:	fad8 f313 	qsub16	r3, r8, r3
    3f50:	faec f913 	qsax	r9, ip, r3
    3f54:	faac fc13 	qasx	ip, ip, r3
    3f58:	f85e 3024 	ldr.w	r3, [lr, r4, lsl #2]
    3f5c:	fb43 f80c 	smusd	r8, r3, ip
    3f60:	fb23 fc1c 	smuadx	ip, r3, ip
    3f64:	4b6c      	ldr	r3, [pc, #432]	; (4118 <arm_radix4_butterfly_inverse_q15+0x274>)
    3f66:	9e01      	ldr	r6, [sp, #4]
    3f68:	ea0c 0303 	and.w	r3, ip, r3
    3f6c:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
    3f70:	f846 3b04 	str.w	r3, [r6], #4
    3f74:	9601      	str	r6, [sp, #4]
    3f76:	462e      	mov	r6, r5
    3f78:	f85e 3005 	ldr.w	r3, [lr, r5]
    3f7c:	fb43 fc09 	smusd	ip, r3, r9
    3f80:	fb23 f919 	smuadx	r9, r3, r9
    3f84:	4b64      	ldr	r3, [pc, #400]	; (4118 <arm_radix4_butterfly_inverse_q15+0x274>)
    3f86:	f1ba 0a01 	subs.w	sl, sl, #1
    3f8a:	9d02      	ldr	r5, [sp, #8]
    3f8c:	ea09 0303 	and.w	r3, r9, r3
    3f90:	442c      	add	r4, r5
    3f92:	9d04      	ldr	r5, [sp, #16]
    3f94:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
    3f98:	442e      	add	r6, r5
    3f9a:	f841 3b04 	str.w	r3, [r1], #4
    3f9e:	4635      	mov	r5, r6
    3fa0:	d19c      	bne.n	3edc <arm_radix4_butterfly_inverse_q15+0x38>
    3fa2:	f8dd b008 	ldr.w	fp, [sp, #8]
    3fa6:	ea4f 038b 	mov.w	r3, fp, lsl #2
    3faa:	9309      	str	r3, [sp, #36]	; 0x24
    3fac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    3fae:	2b04      	cmp	r3, #4
    3fb0:	f240 8086 	bls.w	40c0 <arm_radix4_butterfly_inverse_q15+0x21c>
    3fb4:	f8cd a010 	str.w	sl, [sp, #16]
    3fb8:	930c      	str	r3, [sp, #48]	; 0x30
    3fba:	9302      	str	r3, [sp, #8]
    3fbc:	9a02      	ldr	r2, [sp, #8]
    3fbe:	2100      	movs	r1, #0
    3fc0:	0893      	lsrs	r3, r2, #2
    3fc2:	9105      	str	r1, [sp, #20]
    3fc4:	0097      	lsls	r7, r2, #2
    3fc6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    3fc8:	930d      	str	r3, [sp, #52]	; 0x34
    3fca:	9206      	str	r2, [sp, #24]
    3fcc:	1e5a      	subs	r2, r3, #1
    3fce:	009b      	lsls	r3, r3, #2
    3fd0:	9108      	str	r1, [sp, #32]
    3fd2:	920a      	str	r2, [sp, #40]	; 0x28
    3fd4:	930b      	str	r3, [sp, #44]	; 0x2c
    3fd6:	9907      	ldr	r1, [sp, #28]
    3fd8:	9a08      	ldr	r2, [sp, #32]
    3fda:	460d      	mov	r5, r1
    3fdc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    3fde:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    3fe2:	4611      	mov	r1, r2
    3fe4:	f855 c022 	ldr.w	ip, [r5, r2, lsl #2]
    3fe8:	9a07      	ldr	r2, [sp, #28]
    3fea:	9e06      	ldr	r6, [sp, #24]
    3fec:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
    3ff0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3ff2:	1930      	adds	r0, r6, r4
    3ff4:	f852 8031 	ldr.w	r8, [r2, r1, lsl #3]
    3ff8:	18cb      	adds	r3, r1, r3
    3ffa:	9a05      	ldr	r2, [sp, #20]
    3ffc:	1825      	adds	r5, r4, r0
    3ffe:	9308      	str	r3, [sp, #32]
    4000:	9b03      	ldr	r3, [sp, #12]
    4002:	442c      	add	r4, r5
    4004:	4293      	cmp	r3, r2
    4006:	d946      	bls.n	4096 <arm_radix4_butterfly_inverse_q15+0x1f2>
    4008:	9b02      	ldr	r3, [sp, #8]
    400a:	9501      	str	r5, [sp, #4]
    400c:	eb03 0e02 	add.w	lr, r3, r2
    4010:	9a01      	ldr	r2, [sp, #4]
    4012:	6833      	ldr	r3, [r6, #0]
    4014:	6812      	ldr	r2, [r2, #0]
    4016:	fa93 fa12 	qadd16	sl, r3, r2
    401a:	fad3 f312 	qsub16	r3, r3, r2
    401e:	6801      	ldr	r1, [r0, #0]
    4020:	6822      	ldr	r2, [r4, #0]
    4022:	fa91 f112 	qadd16	r1, r1, r2
    4026:	fa9a f221 	shadd16	r2, sl, r1
    402a:	9d04      	ldr	r5, [sp, #16]
    402c:	fa92 f225 	shadd16	r2, r2, r5
    4030:	6032      	str	r2, [r6, #0]
    4032:	443e      	add	r6, r7
    4034:	fada f121 	shsub16	r1, sl, r1
    4038:	fb48 fb01 	smusd	fp, r8, r1
    403c:	fb28 f211 	smuadx	r2, r8, r1
    4040:	4935      	ldr	r1, [pc, #212]	; (4118 <arm_radix4_butterfly_inverse_q15+0x274>)
    4042:	f8d0 a000 	ldr.w	sl, [r0]
    4046:	4011      	ands	r1, r2
    4048:	ea41 411b 	orr.w	r1, r1, fp, lsr #16
    404c:	6001      	str	r1, [r0, #0]
    404e:	4438      	add	r0, r7
    4050:	6822      	ldr	r2, [r4, #0]
    4052:	fada f212 	qsub16	r2, sl, r2
    4056:	fae3 f122 	shsax	r1, r3, r2
    405a:	faa3 f322 	shasx	r3, r3, r2
    405e:	fb4c fb03 	smusd	fp, ip, r3
    4062:	fb2c f313 	smuadx	r3, ip, r3
    4066:	4a2c      	ldr	r2, [pc, #176]	; (4118 <arm_radix4_butterfly_inverse_q15+0x274>)
    4068:	401a      	ands	r2, r3
    406a:	9b01      	ldr	r3, [sp, #4]
    406c:	ea42 421b 	orr.w	r2, r2, fp, lsr #16
    4070:	601a      	str	r2, [r3, #0]
    4072:	443b      	add	r3, r7
    4074:	9301      	str	r3, [sp, #4]
    4076:	fb49 f201 	smusd	r2, r9, r1
    407a:	fb29 f111 	smuadx	r1, r9, r1
    407e:	4b26      	ldr	r3, [pc, #152]	; (4118 <arm_radix4_butterfly_inverse_q15+0x274>)
    4080:	46f2      	mov	sl, lr
    4082:	9d02      	ldr	r5, [sp, #8]
    4084:	400b      	ands	r3, r1
    4086:	44ae      	add	lr, r5
    4088:	ea43 4312 	orr.w	r3, r3, r2, lsr #16
    408c:	6023      	str	r3, [r4, #0]
    408e:	443c      	add	r4, r7
    4090:	9b03      	ldr	r3, [sp, #12]
    4092:	4553      	cmp	r3, sl
    4094:	d8bc      	bhi.n	4010 <arm_radix4_butterfly_inverse_q15+0x16c>
    4096:	9a06      	ldr	r2, [sp, #24]
    4098:	9b05      	ldr	r3, [sp, #20]
    409a:	3204      	adds	r2, #4
    409c:	3301      	adds	r3, #1
    409e:	9206      	str	r2, [sp, #24]
    40a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    40a2:	9305      	str	r3, [sp, #20]
    40a4:	4293      	cmp	r3, r2
    40a6:	d996      	bls.n	3fd6 <arm_radix4_butterfly_inverse_q15+0x132>
    40a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    40aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    40ac:	089b      	lsrs	r3, r3, #2
    40ae:	9202      	str	r2, [sp, #8]
    40b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    40b2:	2b04      	cmp	r3, #4
    40b4:	930c      	str	r3, [sp, #48]	; 0x30
    40b6:	ea4f 0282 	mov.w	r2, r2, lsl #2
    40ba:	9209      	str	r2, [sp, #36]	; 0x24
    40bc:	f63f af7e 	bhi.w	3fbc <arm_radix4_butterfly_inverse_q15+0x118>
    40c0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    40c2:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    40c4:	3410      	adds	r4, #16
    40c6:	f854 3c10 	ldr.w	r3, [r4, #-16]
    40ca:	f854 7c08 	ldr.w	r7, [r4, #-8]
    40ce:	fa93 f117 	qadd16	r1, r3, r7
    40d2:	f854 2c0c 	ldr.w	r2, [r4, #-12]
    40d6:	f854 0c04 	ldr.w	r0, [r4, #-4]
    40da:	fa92 f510 	qadd16	r5, r2, r0
    40de:	fa91 f525 	shadd16	r5, r1, r5
    40e2:	f844 5c10 	str.w	r5, [r4, #-16]
    40e6:	fa92 f510 	qadd16	r5, r2, r0
    40ea:	fad1 f125 	shsub16	r1, r1, r5
    40ee:	f844 1c0c 	str.w	r1, [r4, #-12]
    40f2:	fad3 f317 	qsub16	r3, r3, r7
    40f6:	fad2 f210 	qsub16	r2, r2, r0
    40fa:	faa3 f122 	shasx	r1, r3, r2
    40fe:	f844 1c08 	str.w	r1, [r4, #-8]
    4102:	fae3 f322 	shsax	r3, r3, r2
    4106:	3e01      	subs	r6, #1
    4108:	f844 3c04 	str.w	r3, [r4, #-4]
    410c:	f104 0410 	add.w	r4, r4, #16
    4110:	d1d9      	bne.n	40c6 <arm_radix4_butterfly_inverse_q15+0x222>
    4112:	b011      	add	sp, #68	; 0x44
    4114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4118:	ffff0000 	.word	0xffff0000

0000411c <__libc_init_array>:
    411c:	b570      	push	{r4, r5, r6, lr}
    411e:	4e0f      	ldr	r6, [pc, #60]	; (415c <__libc_init_array+0x40>)
    4120:	4d0f      	ldr	r5, [pc, #60]	; (4160 <__libc_init_array+0x44>)
    4122:	1b76      	subs	r6, r6, r5
    4124:	10b6      	asrs	r6, r6, #2
    4126:	bf18      	it	ne
    4128:	2400      	movne	r4, #0
    412a:	d005      	beq.n	4138 <__libc_init_array+0x1c>
    412c:	3401      	adds	r4, #1
    412e:	f855 3b04 	ldr.w	r3, [r5], #4
    4132:	4798      	blx	r3
    4134:	42a6      	cmp	r6, r4
    4136:	d1f9      	bne.n	412c <__libc_init_array+0x10>
    4138:	4e0a      	ldr	r6, [pc, #40]	; (4164 <__libc_init_array+0x48>)
    413a:	4d0b      	ldr	r5, [pc, #44]	; (4168 <__libc_init_array+0x4c>)
    413c:	1b76      	subs	r6, r6, r5
    413e:	f000 f863 	bl	4208 <___init_veneer>
    4142:	10b6      	asrs	r6, r6, #2
    4144:	bf18      	it	ne
    4146:	2400      	movne	r4, #0
    4148:	d006      	beq.n	4158 <__libc_init_array+0x3c>
    414a:	3401      	adds	r4, #1
    414c:	f855 3b04 	ldr.w	r3, [r5], #4
    4150:	4798      	blx	r3
    4152:	42a6      	cmp	r6, r4
    4154:	d1f9      	bne.n	414a <__libc_init_array+0x2e>
    4156:	bd70      	pop	{r4, r5, r6, pc}
    4158:	bd70      	pop	{r4, r5, r6, pc}
    415a:	bf00      	nop
    415c:	60001780 	.word	0x60001780
    4160:	60001780 	.word	0x60001780
    4164:	6000178c 	.word	0x6000178c
    4168:	60001780 	.word	0x60001780

0000416c <memset>:
    416c:	b470      	push	{r4, r5, r6}
    416e:	0784      	lsls	r4, r0, #30
    4170:	d046      	beq.n	4200 <memset+0x94>
    4172:	1e54      	subs	r4, r2, #1
    4174:	2a00      	cmp	r2, #0
    4176:	d041      	beq.n	41fc <memset+0x90>
    4178:	b2cd      	uxtb	r5, r1
    417a:	4603      	mov	r3, r0
    417c:	e002      	b.n	4184 <memset+0x18>
    417e:	1e62      	subs	r2, r4, #1
    4180:	b3e4      	cbz	r4, 41fc <memset+0x90>
    4182:	4614      	mov	r4, r2
    4184:	f803 5b01 	strb.w	r5, [r3], #1
    4188:	079a      	lsls	r2, r3, #30
    418a:	d1f8      	bne.n	417e <memset+0x12>
    418c:	2c03      	cmp	r4, #3
    418e:	d92e      	bls.n	41ee <memset+0x82>
    4190:	b2cd      	uxtb	r5, r1
    4192:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    4196:	2c0f      	cmp	r4, #15
    4198:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    419c:	d919      	bls.n	41d2 <memset+0x66>
    419e:	f103 0210 	add.w	r2, r3, #16
    41a2:	4626      	mov	r6, r4
    41a4:	3e10      	subs	r6, #16
    41a6:	2e0f      	cmp	r6, #15
    41a8:	f842 5c10 	str.w	r5, [r2, #-16]
    41ac:	f842 5c0c 	str.w	r5, [r2, #-12]
    41b0:	f842 5c08 	str.w	r5, [r2, #-8]
    41b4:	f842 5c04 	str.w	r5, [r2, #-4]
    41b8:	f102 0210 	add.w	r2, r2, #16
    41bc:	d8f2      	bhi.n	41a4 <memset+0x38>
    41be:	f1a4 0210 	sub.w	r2, r4, #16
    41c2:	f022 020f 	bic.w	r2, r2, #15
    41c6:	f004 040f 	and.w	r4, r4, #15
    41ca:	3210      	adds	r2, #16
    41cc:	2c03      	cmp	r4, #3
    41ce:	4413      	add	r3, r2
    41d0:	d90d      	bls.n	41ee <memset+0x82>
    41d2:	461e      	mov	r6, r3
    41d4:	4622      	mov	r2, r4
    41d6:	3a04      	subs	r2, #4
    41d8:	2a03      	cmp	r2, #3
    41da:	f846 5b04 	str.w	r5, [r6], #4
    41de:	d8fa      	bhi.n	41d6 <memset+0x6a>
    41e0:	1f22      	subs	r2, r4, #4
    41e2:	f022 0203 	bic.w	r2, r2, #3
    41e6:	3204      	adds	r2, #4
    41e8:	4413      	add	r3, r2
    41ea:	f004 0403 	and.w	r4, r4, #3
    41ee:	b12c      	cbz	r4, 41fc <memset+0x90>
    41f0:	b2c9      	uxtb	r1, r1
    41f2:	441c      	add	r4, r3
    41f4:	f803 1b01 	strb.w	r1, [r3], #1
    41f8:	42a3      	cmp	r3, r4
    41fa:	d1fb      	bne.n	41f4 <memset+0x88>
    41fc:	bc70      	pop	{r4, r5, r6}
    41fe:	4770      	bx	lr
    4200:	4614      	mov	r4, r2
    4202:	4603      	mov	r3, r0
    4204:	e7c2      	b.n	418c <memset+0x20>
    4206:	bf00      	nop

00004208 <___init_veneer>:
    4208:	f85f f000 	ldr.w	pc, [pc]	; 420c <___init_veneer+0x4>
    420c:	60001729 	.word	0x60001729

Disassembly of section .fini:

00004210 <_fini>:
    4210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4212:	bf00      	nop
