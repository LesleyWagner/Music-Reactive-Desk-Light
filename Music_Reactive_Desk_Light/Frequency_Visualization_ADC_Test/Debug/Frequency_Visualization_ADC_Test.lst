
C:\Users\lesle\AppData\Local\Temp\VMBuilds\Frequency_Visualization_ADC_Test\teensy40\Debug/Frequency_Visualization_ADC_Test.ino.elf:     file format elf32-littlearm


Disassembly of section .text.progmem:

60000000 <FlexSPI_NOR_Config>:
60000000:	46 43 46 42 00 00 01 56 00 00 00 00 01 01 02 00     FCFB...V........
	...
60000044:	01 04 03 00 00 00 00 00 00 00 00 00 00 00 20 00     .............. .
	...
60000080:	eb 04 18 0a 06 32 04 26 00 00 00 00 00 00 00 00     .....2.&........
60000090:	05 04 04 24 00 00 00 00 00 00 00 00 00 00 00 00     ...$............
	...
600000b0:	06 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
600000d0:	20 04 18 08 00 00 00 00 00 00 00 00 00 00 00 00      ...............
	...
60000100:	d8 04 18 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
60000110:	02 04 18 08 04 20 00 00 00 00 00 00 00 00 00 00     ..... ..........
	...
60000130:	60 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     `...............
	...
600001c0:	00 01 00 00 00 10 00 00 01 00 00 00 00 00 00 00     ................
600001d0:	00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
60000200:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000210:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000220:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000230:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000240:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000250:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000260:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000270:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000280:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000290:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000300:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000310:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000320:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000330:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000340:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000350:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000360:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000370:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000380:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000390:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000400:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000410:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000420:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000430:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000440:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000450:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000460:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000470:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000480:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000490:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000500:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000510:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000520:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000530:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000540:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000550:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000560:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000570:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000580:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000590:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000600:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000610:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000620:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000630:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000640:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000650:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000660:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000670:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000680:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000690:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000700:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000710:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000720:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000730:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000740:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000750:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000760:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000770:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000780:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000790:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000800:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000810:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000820:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000830:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000840:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000850:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000860:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000870:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000880:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000890:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000900:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000910:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000920:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000930:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000940:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000950:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000960:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000970:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000980:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000990:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000aa0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ab0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ac0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ad0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ae0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000af0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ba0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000be0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bf0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ca0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ce0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cf0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000da0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000db0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000dc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000dd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000de0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000df0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ea0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000eb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ec0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ed0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ee0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ef0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fa0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fe0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ff0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................

60001000 <ImageVectorTable>:
60001000:	d1 00 20 40 2c 10 00 60 00 00 00 00 00 00 00 00     .. @,..`........
60001010:	20 10 00 60 00 10 00 60 00 00 00 00 00 00 00 00      ..`...`........

60001020 <BootData>:
60001020:	00 00 00 60 00 82 01 00 00 00 00 00                 ...`........

6000102c <vector_table>:
6000102c:	00 00 01 20 35 10 00 60                             ... 5..`

60001034 <ResetHandler>:
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001034:	4b76      	ldr	r3, [pc, #472]	; (60001210 <ResetHandler+0x1dc>)
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001036:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103a:	4a76      	ldr	r2, [pc, #472]	; (60001214 <ResetHandler+0x1e0>)
	IOMUXC_GPR_GPR16 = 0x00200007;
6000103c:	4876      	ldr	r0, [pc, #472]	; (60001218 <ResetHandler+0x1e4>)
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103e:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001040:	6418      	str	r0, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001042:	4a76      	ldr	r2, [pc, #472]	; (6000121c <ResetHandler+0x1e8>)
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001044:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001046:	4695      	mov	sp, r2
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001048:	4a75      	ldr	r2, [pc, #468]	; (60001220 <ResetHandler+0x1ec>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
6000104a:	f503 3330 	add.w	r3, r3, #180224	; 0x2c000
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
6000104e:	4975      	ldr	r1, [pc, #468]	; (60001224 <ResetHandler+0x1f0>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001050:	2008      	movs	r0, #8
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001052:	428a      	cmp	r2, r1
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001054:	f8c3 0154 	str.w	r0, [r3, #340]	; 0x154
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001058:	d00f      	beq.n	6000107a <ResetHandler+0x46>
	while (dest < dest_end) {
6000105a:	4b73      	ldr	r3, [pc, #460]	; (60001228 <ResetHandler+0x1f4>)
6000105c:	429a      	cmp	r2, r3
6000105e:	d20c      	bcs.n	6000107a <ResetHandler+0x46>
60001060:	43d4      	mvns	r4, r2
60001062:	4608      	mov	r0, r1
60001064:	4423      	add	r3, r4
60001066:	f023 0303 	bic.w	r3, r3, #3
6000106a:	3304      	adds	r3, #4
6000106c:	440b      	add	r3, r1
		*dest++ = *src++;
6000106e:	f850 1b04 	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001072:	4298      	cmp	r0, r3
		*dest++ = *src++;
60001074:	f842 1b04 	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001078:	d1f9      	bne.n	6000106e <ResetHandler+0x3a>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
6000107a:	4a6c      	ldr	r2, [pc, #432]	; (6000122c <ResetHandler+0x1f8>)
6000107c:	496c      	ldr	r1, [pc, #432]	; (60001230 <ResetHandler+0x1fc>)
6000107e:	428a      	cmp	r2, r1
60001080:	d00f      	beq.n	600010a2 <ResetHandler+0x6e>
	while (dest < dest_end) {
60001082:	4b6c      	ldr	r3, [pc, #432]	; (60001234 <ResetHandler+0x200>)
60001084:	429a      	cmp	r2, r3
60001086:	d20c      	bcs.n	600010a2 <ResetHandler+0x6e>
60001088:	43d4      	mvns	r4, r2
6000108a:	4608      	mov	r0, r1
6000108c:	4423      	add	r3, r4
6000108e:	f023 0303 	bic.w	r3, r3, #3
60001092:	3304      	adds	r3, #4
60001094:	440b      	add	r3, r1
		*dest++ = *src++;
60001096:	f850 1b04 	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
6000109a:	4298      	cmp	r0, r3
		*dest++ = *src++;
6000109c:	f842 1b04 	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
600010a0:	d1f9      	bne.n	60001096 <ResetHandler+0x62>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010a2:	4a65      	ldr	r2, [pc, #404]	; (60001238 <ResetHandler+0x204>)
600010a4:	4b65      	ldr	r3, [pc, #404]	; (6000123c <ResetHandler+0x208>)
600010a6:	429a      	cmp	r2, r3
600010a8:	d20b      	bcs.n	600010c2 <ResetHandler+0x8e>
600010aa:	43d0      	mvns	r0, r2
600010ac:	4611      	mov	r1, r2
		*dest++ = 0;
600010ae:	2400      	movs	r4, #0
600010b0:	4403      	add	r3, r0
600010b2:	f023 0303 	bic.w	r3, r3, #3
600010b6:	3304      	adds	r3, #4
600010b8:	4413      	add	r3, r2
600010ba:	f841 4b04 	str.w	r4, [r1], #4
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010be:	428b      	cmp	r3, r1
600010c0:	d1fb      	bne.n	600010ba <ResetHandler+0x86>
	memory_copy(&_stext, &_stextload, &_etext);
	memory_copy(&_sdata, &_sdataload, &_edata);
	memory_clear(&_sbss, &_ebss);

	// enable FPU
	SCB_CPACR = 0x00F00000;
600010c2:	4a5f      	ldr	r2, [pc, #380]	; (60001240 <ResetHandler+0x20c>)
600010c4:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
600010c8:	4b5e      	ldr	r3, [pc, #376]	; (60001244 <ResetHandler+0x210>)
600010ca:	6011      	str	r1, [r2, #0]
600010cc:	f503 7130 	add.w	r1, r3, #704	; 0x2c0
600010d0:	4a5d      	ldr	r2, [pc, #372]	; (60001248 <ResetHandler+0x214>)

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
600010d2:	f843 2f04 	str.w	r2, [r3, #4]!
600010d6:	4299      	cmp	r1, r3
600010d8:	d1fb      	bne.n	600010d2 <ResetHandler+0x9e>
600010da:	4b5c      	ldr	r3, [pc, #368]	; (6000124c <ResetHandler+0x218>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600010dc:	2180      	movs	r1, #128	; 0x80
600010de:	4a5c      	ldr	r2, [pc, #368]	; (60001250 <ResetHandler+0x21c>)
600010e0:	f803 1b01 	strb.w	r1, [r3], #1
600010e4:	4293      	cmp	r3, r2
600010e6:	d1fb      	bne.n	600010e0 <ResetHandler+0xac>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600010e8:	4c5a      	ldr	r4, [pc, #360]	; (60001254 <ResetHandler+0x220>)
600010ea:	f04f 3780 	mov.w	r7, #2155905152	; 0x80808080
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600010ee:	4e5a      	ldr	r6, [pc, #360]	; (60001258 <ResetHandler+0x224>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010f0:	f04f 32ff 	mov.w	r2, #4294967295
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010f4:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 60001298 <ResetHandler+0x264>
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
600010f8:	2500      	movs	r5, #0

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600010fa:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 6000129c <ResetHandler+0x268>
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600010fe:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 600012a0 <ResetHandler+0x26c>
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
60001102:	4b56      	ldr	r3, [pc, #344]	; (6000125c <ResetHandler+0x228>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001104:	4942      	ldr	r1, [pc, #264]	; (60001210 <ResetHandler+0x1dc>)
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
60001106:	f8c3 a000 	str.w	sl, [r3]
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
6000110a:	f8c4 7104 	str.w	r7, [r4, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000110e:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001112:	f8c4 70f4 	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001116:	f8c4 80f0 	str.w	r8, [r4, #240]	; 0xf0
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
6000111a:	69f3      	ldr	r3, [r6, #28]
6000111c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
60001120:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001124:	61f3      	str	r3, [r6, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
60001126:	6a73      	ldr	r3, [r6, #36]	; 0x24
60001128:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
6000112c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001130:	6273      	str	r3, [r6, #36]	; 0x24

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001132:	668a      	str	r2, [r1, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
60001134:	66ca      	str	r2, [r1, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001136:	670a      	str	r2, [r1, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001138:	674a      	str	r2, [r1, #116]	; 0x74
	// must enable PRINT_DEBUG_STUFF in debug/print.h
	printf_debug_init();
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
6000113a:	f000 f8b3 	bl	600012a4 <configure_cache>
extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000113e:	4a48      	ldr	r2, [pc, #288]	; (60001260 <ResetHandler+0x22c>)
60001140:	2063      	movs	r0, #99	; 0x63
	SYST_CVR = 0;
60001142:	4b48      	ldr	r3, [pc, #288]	; (60001264 <ResetHandler+0x230>)
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
60001144:	4948      	ldr	r1, [pc, #288]	; (60001268 <ResetHandler+0x234>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001146:	6010      	str	r0, [r2, #0]
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001148:	2203      	movs	r2, #3
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
6000114a:	601d      	str	r5, [r3, #0]
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
6000114c:	f8ca 1038 	str.w	r1, [sl, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001150:	f843 2c08 	str.w	r2, [r3, #-8]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001154:	4945      	ldr	r1, [pc, #276]	; (6000126c <ResetHandler+0x238>)
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001156:	4a46      	ldr	r2, [pc, #280]	; (60001270 <ResetHandler+0x23c>)

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
60001158:	4846      	ldr	r0, [pc, #280]	; (60001274 <ResetHandler+0x240>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000115a:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000115e:	680b      	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001160:	4a45      	ldr	r2, [pc, #276]	; (60001278 <ResetHandler+0x244>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001162:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
60001166:	f8ca 003c 	str.w	r0, [sl, #60]	; 0x3c
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000116a:	4844      	ldr	r0, [pc, #272]	; (6000127c <ResetHandler+0x248>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000116c:	600b      	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000116e:	6813      	ldr	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001170:	4943      	ldr	r1, [pc, #268]	; (60001280 <ResetHandler+0x24c>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001172:	f043 0301 	orr.w	r3, r3, #1
60001176:	6013      	str	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001178:	6803      	ldr	r3, [r0, #0]
6000117a:	600b      	str	r3, [r1, #0]
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
	configure_systick();
	usb_pll_start();	
6000117c:	f000 f90e 	bl	6000139c <usb_pll_start>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001180:	f8c4 7104 	str.w	r7, [r4, #260]	; 0x104
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001184:	483f      	ldr	r0, [pc, #252]	; (60001284 <ResetHandler+0x250>)

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001186:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000118a:	f8c4 70f4 	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000118e:	f8c4 80f0 	str.w	r8, [r4, #240]	; 0xf0
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001192:	f000 fadd 	bl	60001750 <__set_arm_clock_veneer>
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?
60001196:	bf00      	nop
60001198:	bf00      	nop
6000119a:	bf00      	nop
6000119c:	bf00      	nop

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000119e:	6ef1      	ldr	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
600011a0:	4a39      	ldr	r2, [pc, #228]	; (60001288 <ResetHandler+0x254>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
600011a2:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
	PIT_TCTRL1 = 0;
	PIT_TCTRL2 = 0;
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011a6:	4b39      	ldr	r3, [pc, #228]	; (6000128c <ResetHandler+0x258>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
600011a8:	66f1      	str	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
600011aa:	6015      	str	r5, [r2, #0]
	PIT_TCTRL0 = 0;
600011ac:	f8c2 5108 	str.w	r5, [r2, #264]	; 0x108
	PIT_TCTRL1 = 0;
600011b0:	f8c2 5118 	str.w	r5, [r2, #280]	; 0x118
	PIT_TCTRL2 = 0;
600011b4:	f8c2 5128 	str.w	r5, [r2, #296]	; 0x128
	PIT_TCTRL3 = 0;
600011b8:	f8c2 5138 	str.w	r5, [r2, #312]	; 0x138

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
600011be:	07d2      	lsls	r2, r2, #31
600011c0:	d408      	bmi.n	600011d4 <ResetHandler+0x1a0>
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011c2:	f642 6215 	movw	r2, #11797	; 0x2e15
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
600011c6:	4932      	ldr	r1, [pc, #200]	; (60001290 <ResetHandler+0x25c>)
600011c8:	6559      	str	r1, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011ca:	651a      	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
600011cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
600011ce:	f042 0201 	orr.w	r2, r2, #1
600011d2:	639a      	str	r2, [r3, #56]	; 0x38
	}
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600011d4:	4a2d      	ldr	r2, [pc, #180]	; (6000128c <ResetHandler+0x258>)
600011d6:	4c2f      	ldr	r4, [pc, #188]	; (60001294 <ResetHandler+0x260>)
600011d8:	6893      	ldr	r3, [r2, #8]
600011da:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
600011de:	6093      	str	r3, [r2, #8]

#ifdef ARDUINO_TEENSY41
	configure_external_ram();
#endif
	startup_early_hook();
600011e0:	f000 fac6 	bl	60001770 <__startup_early_hook_veneer>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
600011e4:	6823      	ldr	r3, [r4, #0]
	while (millis() < 20) ; // wait at least 20ms before starting USB
600011e6:	2b13      	cmp	r3, #19
600011e8:	d9fc      	bls.n	600011e4 <ResetHandler+0x1b0>
	usb_init();
600011ea:	f000 f997 	bl	6000151c <usb_init>
	analog_init();
600011ee:	f000 fa0b 	bl	60001608 <analog_init>
	pwm_init();
600011f2:	f000 fab1 	bl	60001758 <__pwm_init_veneer>
	tempmon_init();
600011f6:	f000 f903 	bl	60001400 <tempmon_init>

	startup_late_hook();
600011fa:	f000 faa1 	bl	60001740 <__startup_late_hook_veneer>
600011fe:	6823      	ldr	r3, [r4, #0]
	while (millis() < 300) ; // wait at least 300ms before calling user code
60001200:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
60001204:	d3fb      	bcc.n	600011fe <ResetHandler+0x1ca>
	//printf("before C++ constructors\n");
	__libc_init_array();
60001206:	f000 fab7 	bl	60001778 <____libc_init_array_veneer>
	//printf("after C++ constructors\n");
	//printf("before setup\n");
	main();
6000120a:	f000 fa95 	bl	60001738 <__main_veneer>
6000120e:	e7fe      	b.n	6000120e <ResetHandler+0x1da>
60001210:	400ac000 	.word	0x400ac000
60001214:	aaaaaaab 	.word	0xaaaaaaab
60001218:	00200007 	.word	0x00200007
6000121c:	20078000 	.word	0x20078000
60001220:	00000000 	.word	0x00000000
60001224:	60001790 	.word	0x60001790
60001228:	00004780 	.word	0x00004780
6000122c:	20000000 	.word	0x20000000
60001230:	60005f14 	.word	0x60005f14
60001234:	200122f0 	.word	0x200122f0
60001238:	200122f0 	.word	0x200122f0
6000123c:	200242c0 	.word	0x200242c0
60001240:	e000ed88 	.word	0xe000ed88
60001244:	20022bfc 	.word	0x20022bfc
60001248:	000024e9 	.word	0x000024e9
6000124c:	e000e400 	.word	0xe000e400
60001250:	e000e4a0 	.word	0xe000e4a0
60001254:	400d8000 	.word	0x400d8000
60001258:	400fc000 	.word	0x400fc000
6000125c:	e000ed08 	.word	0xe000ed08
60001260:	e000e014 	.word	0xe000e014
60001264:	e000e018 	.word	0xe000e018
60001268:	00003695 	.word	0x00003695
6000126c:	e000edfc 	.word	0xe000edfc
60001270:	20200000 	.word	0x20200000
60001274:	00003699 	.word	0x00003699
60001278:	e0001000 	.word	0xe0001000
6000127c:	e0001004 	.word	0xe0001004
60001280:	200225d4 	.word	0x200225d4
60001284:	23c34600 	.word	0x23c34600
60001288:	40084000 	.word	0x40084000
6000128c:	400d4000 	.word	0x400d4000
60001290:	56c00000 	.word	0x56c00000
60001294:	200225dc 	.word	0x200225dc
60001298:	20022c00 	.word	0x20022c00
6000129c:	2018101b 	.word	0x2018101b
600012a0:	13110d0c 	.word	0x13110d0c

600012a4 <configure_cache>:
#define SIZE_2G		(SCB_MPU_RASR_SIZE(30) | SCB_MPU_RASR_ENABLE)
#define SIZE_4G		(SCB_MPU_RASR_SIZE(31) | SCB_MPU_RASR_ENABLE)
#define REGION(n)	(SCB_MPU_RBAR_REGION(n) | SCB_MPU_RBAR_VALID)

FLASHMEM void configure_cache(void)
{
600012a4:	b5f0      	push	{r4, r5, r6, r7, lr}
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600012a6:	4a28      	ldr	r2, [pc, #160]	; (60001348 <configure_cache+0xa4>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600012a8:	2000      	movs	r0, #0

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600012aa:	4b28      	ldr	r3, [pc, #160]	; (6000134c <configure_cache+0xa8>)
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600012ac:	f04f 0c10 	mov.w	ip, #16
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600012b0:	4c27      	ldr	r4, [pc, #156]	; (60001350 <configure_cache+0xac>)

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600012b2:	2711      	movs	r7, #17

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600012b4:	f8df e0d8 	ldr.w	lr, [pc, #216]	; 60001390 <configure_cache+0xec>
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600012b8:	2612      	movs	r6, #18
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600012ba:	6020      	str	r0, [r4, #0]
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600012bc:	2501      	movs	r5, #1
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600012be:	f8c2 c000 	str.w	ip, [r2]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600012c2:	f8c3 e000 	str.w	lr, [r3]
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600012c6:	6017      	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600012c8:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 60001394 <configure_cache+0xf0>

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600012cc:	4f21      	ldr	r7, [pc, #132]	; (60001354 <configure_cache+0xb0>)
	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600012ce:	f8c3 e000 	str.w	lr, [r3]

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600012d2:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600012d4:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600012d6:	4e20      	ldr	r6, [pc, #128]	; (60001358 <configure_cache+0xb4>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600012d8:	4f20      	ldr	r7, [pc, #128]	; (6000135c <configure_cache+0xb8>)
	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600012da:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600012dc:	4920      	ldr	r1, [pc, #128]	; (60001360 <configure_cache+0xbc>)
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600012de:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600012e0:	4e20      	ldr	r6, [pc, #128]	; (60001364 <configure_cache+0xc0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600012e2:	f041 0115 	orr.w	r1, r1, #21

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600012e6:	4f20      	ldr	r7, [pc, #128]	; (60001368 <configure_cache+0xc4>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600012e8:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600012ea:	601f      	str	r7, [r3, #0]
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600012ec:	f507 3740 	add.w	r7, r7, #196608	; 0x30000

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600012f0:	4e1e      	ldr	r6, [pc, #120]	; (6000136c <configure_cache+0xc8>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600012f2:	6011      	str	r1, [r2, #0]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600012f4:	3702      	adds	r7, #2

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600012f6:	601e      	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600012f8:	f8df e09c 	ldr.w	lr, [pc, #156]	; 60001398 <configure_cache+0xf4>
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600012fc:	4e1c      	ldr	r6, [pc, #112]	; (60001370 <configure_cache+0xcc>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600012fe:	491d      	ldr	r1, [pc, #116]	; (60001374 <configure_cache+0xd0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001300:	f8c2 e000 	str.w	lr, [r2]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001304:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001306:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001308:	4f1b      	ldr	r7, [pc, #108]	; (60001378 <configure_cache+0xd4>)

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
6000130a:	6019      	str	r1, [r3, #0]

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
6000130c:	4e1b      	ldr	r6, [pc, #108]	; (6000137c <configure_cache+0xd8>)

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000130e:	491c      	ldr	r1, [pc, #112]	; (60001380 <configure_cache+0xdc>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001310:	6017      	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001312:	601e      	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;
60001314:	4f1b      	ldr	r7, [pc, #108]	; (60001384 <configure_cache+0xe0>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001316:	6011      	str	r1, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001318:	4e1b      	ldr	r6, [pc, #108]	; (60001388 <configure_cache+0xe4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
6000131a:	491c      	ldr	r1, [pc, #112]	; (6000138c <configure_cache+0xe8>)

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;
6000131c:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000131e:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001320:	6019      	str	r1, [r3, #0]

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001322:	6025      	str	r5, [r4, #0]

	// cache enable, ARM DDI0403E, pg 628
	asm("dsb");
60001324:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001328:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
6000132c:	f8c3 01b0 	str.w	r0, [r3, #432]	; 0x1b0

	asm("dsb");
60001330:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001334:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001338:	f852 3c88 	ldr.w	r3, [r2, #-136]
6000133c:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
60001340:	f842 3c88 	str.w	r3, [r2, #-136]
60001344:	bdf0      	pop	{r4, r5, r6, r7, pc}
60001346:	bf00      	nop
60001348:	e000ed9c 	.word	0xe000ed9c
6000134c:	e000eda0 	.word	0xe000eda0
60001350:	e000ed94 	.word	0xe000ed94
60001354:	00100009 	.word	0x00100009
60001358:	00200013 	.word	0x00200013
6000135c:	07020021 	.word	0x07020021
60001360:	200242c0 	.word	0x200242c0
60001364:	20000014 	.word	0x20000014
60001368:	13080025 	.word	0x13080025
6000136c:	10000009 	.word	0x10000009
60001370:	40000017 	.word	0x40000017
60001374:	13100033 	.word	0x13100033
60001378:	60000018 	.word	0x60000018
6000137c:	070b002f 	.word	0x070b002f
60001380:	70000019 	.word	0x70000019
60001384:	170b0037 	.word	0x170b0037
60001388:	7000001a 	.word	0x7000001a
6000138c:	130b002f 	.word	0x130b002f
60001390:	1000003f 	.word	0x1000003f
60001394:	03080025 	.word	0x03080025
60001398:	20200016 	.word	0x20200016

6000139c <usb_pll_start>:

#endif // ARDUINO_TEENSY41


FLASHMEM void usb_pll_start()
{
6000139c:	b4f0      	push	{r4, r5, r6, r7}
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000139e:	4a17      	ldr	r2, [pc, #92]	; (600013fc <usb_pll_start+0x60>)
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
600013a0:	2740      	movs	r7, #64	; 0x40
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
600013a2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
600013a6:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
600013aa:	f44f 5500 	mov.w	r5, #8192	; 0x2000
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
600013ae:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
600013b2:	f243 0042 	movw	r0, #12354	; 0x3042


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
600013b6:	6913      	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
600013b8:	f013 0f02 	tst.w	r3, #2
600013bc:	d006      	beq.n	600013cc <usb_pll_start+0x30>
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
600013be:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
600013c0:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
600013c2:	6190      	str	r0, [r2, #24]


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
600013c4:	6913      	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
600013c6:	f013 0f02 	tst.w	r3, #2
600013ca:	d1f8      	bne.n	600013be <usb_pll_start+0x22>
				CCM_ANALOG_PLL_USB1_DIV_SELECT |		// use 480 MHz
				CCM_ANALOG_PLL_USB1_ENABLE |			// disable
				CCM_ANALOG_PLL_USB1_EN_USB_CLKS;		// disable usb
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
600013cc:	f413 5f00 	tst.w	r3, #8192	; 0x2000
600013d0:	d101      	bne.n	600013d6 <usb_pll_start+0x3a>
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
600013d2:	6155      	str	r5, [r2, #20]
			continue;
600013d4:	e7ef      	b.n	600013b6 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
600013d6:	f413 5f80 	tst.w	r3, #4096	; 0x1000
600013da:	d101      	bne.n	600013e0 <usb_pll_start+0x44>
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
600013dc:	6156      	str	r6, [r2, #20]
			continue;
600013de:	e7ea      	b.n	600013b6 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
600013e0:	2b00      	cmp	r3, #0
600013e2:	dae8      	bge.n	600013b6 <usb_pll_start+0x1a>
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
600013e4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
600013e8:	d001      	beq.n	600013ee <usb_pll_start+0x52>
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
600013ea:	6191      	str	r1, [r2, #24]
			continue;
600013ec:	e7e3      	b.n	600013b6 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
600013ee:	065b      	lsls	r3, r3, #25
600013f0:	d401      	bmi.n	600013f6 <usb_pll_start+0x5a>
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
600013f2:	6157      	str	r7, [r2, #20]
			continue;
600013f4:	e7df      	b.n	600013b6 <usb_pll_start+0x1a>
		}
		return; // everything is as it should be  :-)
	}
}
600013f6:	bcf0      	pop	{r4, r5, r6, r7}
600013f8:	4770      	bx	lr
600013fa:	bf00      	nop
600013fc:	400d8000 	.word	0x400d8000

60001400 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001400:	4a3b      	ldr	r2, [pc, #236]	; (600014f0 <tempmon_init+0xf0>)
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001402:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001406:	493b      	ldr	r1, [pc, #236]	; (600014f4 <tempmon_init+0xf4>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001408:	2000      	movs	r0, #0
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
6000140a:	6813      	ldr	r3, [r2, #0]
  asm volatile ("dsb":::"memory");
  while (1) asm ("wfi");
}

FLASHMEM void tempmon_init(void)
{
6000140c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
6000140e:	f023 0301 	bic.w	r3, r3, #1

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001412:	2403      	movs	r4, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001414:	f8df e100 	ldr.w	lr, [pc, #256]	; 60001518 <tempmon_init+0x118>
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001418:	6013      	str	r3, [r2, #0]

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
6000141a:	f8c2 4090 	str.w	r4, [r2, #144]	; 0x90
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
6000141e:	f8d1 30e0 	ldr.w	r3, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
60001422:	4f35      	ldr	r7, [pc, #212]	; (600014f8 <tempmon_init+0xf8>)
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001424:	b2dd      	uxtb	r5, r3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001426:	f3c3 240b 	ubfx	r4, r3, #8, #12
6000142a:	4e34      	ldr	r6, [pc, #208]	; (600014fc <tempmon_init+0xfc>)
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
6000142c:	ebc4 5313 	rsb	r3, r4, r3, lsr #20
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001430:	ee07 5a90 	vmov	s15, r5
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001434:	f1a5 0155 	sub.w	r1, r5, #85	; 0x55
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001438:	f8ce 5000 	str.w	r5, [lr]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
6000143c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001440:	eb03 0583 	add.w	r5, r3, r3, lsl #2
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001444:	ee07 4a90 	vmov	s15, r4
60001448:	fb03 f101 	mul.w	r1, r3, r1
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
6000144c:	603b      	str	r3, [r7, #0]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000144e:	eb03 1383 	add.w	r3, r3, r3, lsl #6
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001452:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001456:	ee07 1a90 	vmov	s15, r1
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000145a:	1b49      	subs	r1, r1, r5
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
6000145c:	ee77 6a66 	vsub.f32	s13, s14, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001460:	eeb8 7a67 	vcvt.f32.u32	s14, s15
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001464:	4d26      	ldr	r5, [pc, #152]	; (60001500 <tempmon_init+0x100>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001466:	ee07 1a90 	vmov	s15, r1
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000146a:	440b      	add	r3, r1
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
6000146c:	edc5 6a00 	vstr	s13, [r5]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001470:	eef8 7a67 	vcvt.f32.u32	s15, s15
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001474:	6034      	str	r4, [r6, #0]
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001476:	eec7 5a26 	vdiv.f32	s11, s14, s13
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
6000147a:	4e22      	ldr	r6, [pc, #136]	; (60001504 <tempmon_init+0x104>)
6000147c:	6815      	ldr	r5, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000147e:	4922      	ldr	r1, [pc, #136]	; (60001508 <tempmon_init+0x108>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001480:	4c22      	ldr	r4, [pc, #136]	; (6000150c <tempmon_init+0x10c>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001482:	ee87 6aa6 	vdiv.f32	s12, s15, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001486:	ee07 3a90 	vmov	s15, r3
6000148a:	4b21      	ldr	r3, [pc, #132]	; (60001510 <tempmon_init+0x110>)
6000148c:	f8c6 3140 	str.w	r3, [r6, #320]	; 0x140
60001490:	eef8 7a67 	vcvt.f32.u32	s15, s15
60001494:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001498:	ee75 5a85 	vadd.f32	s11, s11, s10
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000149c:	ee76 6a05 	vadd.f32	s13, s12, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600014a0:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600014a4:	eefc 6ae6 	vcvt.u32.f32	s13, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600014a8:	ee15 3a90 	vmov	r3, s11
600014ac:	ea45 5303 	orr.w	r3, r5, r3, lsl #20
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600014b0:	ee16 5a90 	vmov	r5, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600014b4:	ee77 7a05 	vadd.f32	s15, s14, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600014b8:	6013      	str	r3, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600014ba:	ea01 4105 	and.w	r1, r1, r5, lsl #16
600014be:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600014c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600014c6:	430b      	orrs	r3, r1
600014c8:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600014cc:	ee17 3a90 	vmov	r3, s15
600014d0:	f8d2 1110 	ldr.w	r1, [r2, #272]	; 0x110
600014d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
600014d8:	430b      	orrs	r3, r1
600014da:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
600014de:	6813      	ldr	r3, [r2, #0]
600014e0:	f043 0302 	orr.w	r3, r3, #2
600014e4:	6013      	str	r3, [r2, #0]

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600014e6:	7020      	strb	r0, [r4, #0]
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
600014e8:	4b0a      	ldr	r3, [pc, #40]	; (60001514 <tempmon_init+0x114>)
600014ea:	2201      	movs	r2, #1
600014ec:	601a      	str	r2, [r3, #0]
600014ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
600014f0:	400d8180 	.word	0x400d8180
600014f4:	401f4400 	.word	0x401f4400
600014f8:	200225e8 	.word	0x200225e8
600014fc:	200225ec 	.word	0x200225ec
60001500:	200225e4 	.word	0x200225e4
60001504:	20022c00 	.word	0x20022c00
60001508:	0fff0000 	.word	0x0fff0000
6000150c:	e000e440 	.word	0xe000e440
60001510:	00002595 	.word	0x00002595
60001514:	e000e108 	.word	0xe000e108
60001518:	200225e0 	.word	0x200225e0

6000151c <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
6000151c:	4b30      	ldr	r3, [pc, #192]	; (600015e0 <usb_init+0xc4>)
6000151e:	f640 7261 	movw	r2, #3937	; 0xf61

static void run_callbacks(endpoint_t *ep);


FLASHMEM void usb_init(void)
{
60001522:	b570      	push	{r4, r5, r6, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001524:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001528:	f240 4504 	movw	r5, #1028	; 0x404
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
6000152c:	f000 f918 	bl	60001760 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001530:	492c      	ldr	r1, [pc, #176]	; (600015e4 <usb_init+0xc8>)
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001532:	482d      	ldr	r0, [pc, #180]	; (600015e8 <usb_init+0xcc>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001534:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001538:	4c2c      	ldr	r4, [pc, #176]	; (600015ec <usb_init+0xd0>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000153a:	f042 0203 	orr.w	r2, r2, #3
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
6000153e:	4b2c      	ldr	r3, [pc, #176]	; (600015f0 <usb_init+0xd4>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001540:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001544:	f8c0 5160 	str.w	r5, [r0, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001548:	6822      	ldr	r2, [r4, #0]
6000154a:	4013      	ands	r3, r2
6000154c:	b91b      	cbnz	r3, 60001556 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
6000154e:	f8d0 31a8 	ldr.w	r3, [r0, #424]	; 0x1a8
60001552:	079a      	lsls	r2, r3, #30
60001554:	d01a      	beq.n	6000158c <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001556:	4b24      	ldr	r3, [pc, #144]	; (600015e8 <usb_init+0xcc>)
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001558:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
6000155c:	4a23      	ldr	r2, [pc, #140]	; (600015ec <usb_init+0xd0>)
6000155e:	6351      	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001560:	461a      	mov	r2, r3
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001562:	f8d3 1140 	ldr.w	r1, [r3, #320]	; 0x140
60001566:	f041 0102 	orr.w	r1, r1, #2
6000156a:	f8c3 1140 	str.w	r1, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
6000156e:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001572:	079b      	lsls	r3, r3, #30
60001574:	d4fb      	bmi.n	6000156e <usb_init+0x52>
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001576:	f44f 3000 	mov.w	r0, #131072	; 0x20000
6000157a:	491e      	ldr	r1, [pc, #120]	; (600015f4 <usb_init+0xd8>)
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
6000157c:	4b1b      	ldr	r3, [pc, #108]	; (600015ec <usb_init+0xd0>)
6000157e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001582:	6008      	str	r0, [r1, #0]
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001584:	2019      	movs	r0, #25
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001586:	639a      	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001588:	f000 f8ee 	bl	60001768 <__delay_veneer>
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000158c:	4d1a      	ldr	r5, [pc, #104]	; (600015f8 <usb_init+0xdc>)
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
6000158e:	2200      	movs	r2, #0
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001590:	4b16      	ldr	r3, [pc, #88]	; (600015ec <usb_init+0xd0>)
60001592:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001596:	4c14      	ldr	r4, [pc, #80]	; (600015e8 <usb_init+0xcc>)
60001598:	260a      	movs	r6, #10
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
6000159a:	6399      	str	r1, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000159c:	4628      	mov	r0, r5
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
6000159e:	601a      	str	r2, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600015a0:	4611      	mov	r1, r2
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600015a2:	f8c4 61a8 	str.w	r6, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600015a6:	f44f 7220 	mov.w	r2, #640	; 0x280
600015aa:	f000 f8cd 	bl	60001748 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600015ae:	f44f 0681 	mov.w	r6, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
600015b2:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600015b6:	f240 1343 	movw	r3, #323	; 0x143
600015ba:	4a10      	ldr	r2, [pc, #64]	; (600015fc <usb_init+0xe0>)
600015bc:	4910      	ldr	r1, [pc, #64]	; (60001600 <usb_init+0xe4>)
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600015be:	602e      	str	r6, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
600015c0:	6428      	str	r0, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
600015c2:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
600015c6:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600015ca:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
600015ce:	4a0d      	ldr	r2, [pc, #52]	; (60001604 <usb_init+0xe8>)
600015d0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
600015d4:	2301      	movs	r3, #1
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
600015d6:	6011      	str	r1, [r2, #0]
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
600015d8:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
600015dc:	bd70      	pop	{r4, r5, r6, pc}
600015de:	bf00      	nop
600015e0:	400d8000 	.word	0x400d8000
600015e4:	400fc000 	.word	0x400fc000
600015e8:	402e0000 	.word	0x402e0000
600015ec:	400d9000 	.word	0x400d9000
600015f0:	001e1c00 	.word	0x001e1c00
600015f4:	e000e28c 	.word	0xe000e28c
600015f8:	20024000 	.word	0x20024000
600015fc:	20022c00 	.word	0x20022c00
60001600:	00002701 	.word	0x00002701
60001604:	e000e10c 	.word	0xe000e10c

60001608 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001608:	4b11      	ldr	r3, [pc, #68]	; (60001650 <analog_init+0x48>)
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
6000160a:	4912      	ldr	r1, [pc, #72]	; (60001654 <analog_init+0x4c>)
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000160c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
6000160e:	460a      	mov	r2, r1
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001610:	f440 3040 	orr.w	r0, r0, #196608	; 0x30000
}

#define MAX_ADC_CLOCK 20000000

FLASHMEM void analog_init(void)
{
60001614:	b430      	push	{r4, r5}
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001616:	66d8      	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001618:	f240 6537 	movw	r5, #1591	; 0x637
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
6000161c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
6000161e:	24a0      	movs	r4, #160	; 0xa0
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001620:	f440 7040 	orr.w	r0, r0, #768	; 0x300
60001624:	66d8      	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001626:	644d      	str	r5, [r1, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001628:	648c      	str	r4, [r1, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
6000162a:	6c93      	ldr	r3, [r2, #72]	; 0x48
6000162c:	061b      	lsls	r3, r3, #24
6000162e:	d4fc      	bmi.n	6000162a <analog_init+0x22>
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001630:	4b09      	ldr	r3, [pc, #36]	; (60001658 <analog_init+0x50>)
60001632:	f240 6037 	movw	r0, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001636:	21a0      	movs	r1, #160	; 0xa0
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
60001638:	461a      	mov	r2, r3
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
6000163a:	6458      	str	r0, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
6000163c:	6499      	str	r1, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
6000163e:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001640:	f013 0380 	ands.w	r3, r3, #128	; 0x80
60001644:	d1fb      	bne.n	6000163e <analog_init+0x36>
	calibrating = 0;
60001646:	4a05      	ldr	r2, [pc, #20]	; (6000165c <analog_init+0x54>)
60001648:	7013      	strb	r3, [r2, #0]
}
6000164a:	bc30      	pop	{r4, r5}
6000164c:	4770      	bx	lr
6000164e:	bf00      	nop
60001650:	400fc000 	.word	0x400fc000
60001654:	400c4000 	.word	0x400c4000
60001658:	400c8000 	.word	0x400c8000
6000165c:	20022812 	.word	0x20022812

60001660 <usb_string_product_name_default>:
60001660:	00550316 00420053 00530020 00720065     ..U.S.B. .S.e.r.
60001670:	00610069 0000006c                       i.a.l...

60001678 <usb_string_manufacturer_name_default>:
60001678:	00540318 00650065 0073006e 00640079     ..T.e.e.n.s.y.d.
60001688:	00690075 006f006e                       u.i.n.o.

60001690 <string0>:
60001690:	04090304                                ....

60001694 <usb_config_descriptor_12>:
60001694:	00430209 c0000102 00040932 02020100     ..C.....2.......
600016a4:	24050001 05011000 01010124 06022404     ...$....$....$..
600016b4:	00062405 82050701 10001003 00010409     .$..............
600016c4:	00000a02 03050700 00004002 02840507     .........@......
600016d4:	00000040                                @...

600016d8 <usb_config_descriptor_480>:
600016d8:	00430209 c0000102 00040932 02020100     ..C.....2.......
600016e8:	24050001 05011000 01010124 06022404     ...$....$....$..
600016f8:	00062405 82050701 05001003 00010409     .$..............
60001708:	00000a02 03050700 00020002 02840507     ................
60001718:	00000200                                ....

6000171c <qualifier_descriptor>:
6000171c:	0200060a 40000002 ff010001                       .......@..

60001726 <_serialEvent_default>:
60001726:	b5f8ff01                                         ..

60001728 <_init>:
60001728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
6000172a:	bf00      	nop
6000172c:	bcf8      	pop	{r3, r4, r5, r6, r7}
6000172e:	bc08      	pop	{r3}
60001730:	469e      	mov	lr, r3
60001732:	4770      	bx	lr
60001734:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

60001738 <__main_veneer>:
60001738:	f85f f000 	ldr.w	pc, [pc]	; 6000173c <__main_veneer+0x4>
6000173c:	000036b9 	.word	0x000036b9

60001740 <__startup_late_hook_veneer>:
60001740:	f85f f000 	ldr.w	pc, [pc]	; 60001744 <__startup_late_hook_veneer+0x4>
60001744:	00002505 	.word	0x00002505

60001748 <__memset_veneer>:
60001748:	f85f f000 	ldr.w	pc, [pc]	; 6000174c <__memset_veneer+0x4>
6000174c:	000046d5 	.word	0x000046d5

60001750 <__set_arm_clock_veneer>:
60001750:	f85f f000 	ldr.w	pc, [pc]	; 60001754 <__set_arm_clock_veneer+0x4>
60001754:	00001dbd 	.word	0x00001dbd

60001758 <__pwm_init_veneer>:
60001758:	f85f f000 	ldr.w	pc, [pc]	; 6000175c <__pwm_init_veneer+0x4>
6000175c:	00002231 	.word	0x00002231

60001760 <__usb_init_serialnumber_veneer>:
60001760:	f85f f000 	ldr.w	pc, [pc]	; 60001764 <__usb_init_serialnumber_veneer+0x4>
60001764:	00002eb9 	.word	0x00002eb9

60001768 <__delay_veneer>:
60001768:	f85f f000 	ldr.w	pc, [pc]	; 6000176c <__delay_veneer+0x4>
6000176c:	00002081 	.word	0x00002081

60001770 <__startup_early_hook_veneer>:
60001770:	f85f f000 	ldr.w	pc, [pc]	; 60001774 <__startup_early_hook_veneer+0x4>
60001774:	00002501 	.word	0x00002501

60001778 <____libc_init_array_veneer>:
60001778:	f85f f000 	ldr.w	pc, [pc]	; 6000177c <____libc_init_array_veneer+0x4>
6000177c:	00004685 	.word	0x00004685

60001780 <__init_array_start>:
60001780:	00000045 	.word	0x00000045
60001784:	00001411 	.word	0x00001411
60001788:	00001c3d 	.word	0x00001c3d
6000178c:	00001da5 	.word	0x00001da5

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <__do_global_dtors_aux>:
    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);

    return tmeas;
      20:	4c05b510 	.word	0x4c05b510
      24:	7823      	ldrb	r3, [r4, #0]
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);
      26:	b933      	cbnz	r3, 36 <_teensy_model_identifier+0x12>

    return tmeas;
      28:	b1134b04 	.word	0xb1134b04
      2c:	4804      	ldr	r0, [pc, #16]	; (40 <_teensy_model_identifier+0x1c>)
      2e:	f3af      	.short	0xf3af
      30:	8000      	strh	r0, [r0, #0]
      32:	2301      	.short	0x2301
      34:	7023      	strb	r3, [r4, #0]
      36:	bd10      	pop	{r4, pc}
      38:	22f0      	movs	r2, #240	; 0xf0
      3a:	2001      	.short	0x2001
      3c:	0000      	movs	r0, r0
      3e:	0000      	.short	0x0000
}
      40:	4784      	blxns	r0
	...

00000044 <frame_dummy>:
      44:	b5104b08 	.word	0xb5104b08
      48:	b11b      	cbz	r3, 52 <frame_dummy+0xe>
      4a:	4908      	ldr	r1, [pc, #32]	; (6c <frame_dummy+0x28>)
      4c:	f3af4808 	.word	0xf3af4808
      50:	8000      	strh	r0, [r0, #0]
      52:	4808      	.short	0x4808
      54:	6803      	ldr	r3, [r0, #0]
      56:	b903      	cbnz	r3, 5a <frame_dummy+0x16>
      58:	bd10      	pop	{r4, pc}
      5a:	4b07      	ldr	r3, [pc, #28]	; (78 <frame_dummy+0x34>)
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      5c:	2b00      	cmp	r3, #0
      5e:	d0fb      	.short	0xd0fb
      60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      64:	4718      	bx	r3
      66:	bf00      	nop
      mode |= ADC_CFG_AVGS(2);
      mode1 |= ADC_CFG_AVGS(2);

    } else if (num >= 8) {
      mode |= ADC_CFG_AVGS(1);
      mode1 |= ADC_CFG_AVGS(1);
      68:	0000      	movs	r0, r0
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      6a:	0000      	movs	r0, r0
  ADC2_CFG = mode1;
  
  if(num >= 4){
      6c:	22f4      	movs	r2, #244	; 0xf4
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
  ADC2_CFG = mode1;
      6e:	2001      	movs	r0, #1
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      70:	4784      	blxns	r0
  ADC2_CFG = mode1;
      72:	0000      	movs	r0, r0
  
  if(num >= 4){
      74:	22f0      	movs	r2, #240	; 0xf0
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
  }
}
      76:	2001      	movs	r0, #1
      78:	00000000 	.word	0x00000000

0000007c <CLEDController::getMaxRefreshRate() const>:
              }

              return adj;
      #endif
    }
    virtual uint16_t getMaxRefreshRate() const { return 0; }
      7c:	2000      	movs	r0, #0
      7e:	4770      	bx	lr

00000080 <readAdc()>:
	*   \return the last converted value.
	*   If single-ended and 16 bits it's necessary to typecast it to an unsigned type (like uint16_t),
	*   otherwise values larger than 3.3/2 V are interpreted as negative!
	*/
	int analogReadContinuous() __attribute__((always_inline)) {
		return (int16_t)(int32_t)adc_regs.R0;
      80:	490c4b0b 	.word	0x490c4b0b
      84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
/*
* ADC interrupt callback function. Executes when an ADC conversion has completed.
* Read the ADC sample and store it in an array.
*/
void readAdc(void) {
    samples[sampleCounter] = (ADC0.analogReadContinuous() - sampleBias) * 26; // scale samples to maximise resolution
      86:	680a      	ldr	r2, [r1, #0]
      88:	480b6a5b 	.word	0x480b6a5b
      8c:	b21b      	sxth	r3, r3

/*
* ADC interrupt callback function. Executes when an ADC conversion has completed.
* Read the ADC sample and store it in an array.
*/
void readAdc(void) {
      8e:	b410      	.short	0xb410
    samples[sampleCounter] = (ADC0.analogReadContinuous() - sampleBias) * 26; // scale samples to maximise resolution
      90:	f2a3 53f2 	subw	r3, r3, #1522	; 0x5f2
    sampleCounter++;
      94:	600c1c54 	.word	0x600c1c54
/*
* ADC interrupt callback function. Executes when an ADC conversion has completed.
* Read the ADC sample and store it in an array.
*/
void readAdc(void) {
    samples[sampleCounter] = (ADC0.analogReadContinuous() - sampleBias) * 26; // scale samples to maximise resolution
      98:	eb03 0143 	add.w	r1, r3, r3, lsl #1
      9c:	0381eb03 	.word	0x0381eb03
      a0:	005b      	lsls	r3, r3, #1
      a2:	f820      	.short	0xf820
      a4:	3012      	adds	r0, #18
    sampleCounter++;
    asm("DSB");
      a6:	f3bf 8f4f 	dsb	sy
      aa:	f85d      	.short	0xf85d
      ac:	4b04      	ldr	r3, [pc, #16]	; (c0 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::size()+0x4>)
      ae:	4770      	.short	0x4770
      b0:	24f4      	movs	r4, #244	; 0xf4
      b2:	2002      	.short	0x2002
      b4:	a4e8      	add	r4, pc, #928	; (adr r4, 458 <loop+0x64>)
      b6:	2001      	.short	0x2001
      b8:	e4f4      	b.n	fffffaa4 <_flexram_bank_config+0x55554ff9>
      ba:	2001      	.short	0x2001

000000bc <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::size()>:
  uint8_t m_nOutBlocks;
  uint32_t m_offsets[3];
  CMinWait<WAIT_TIME> mWait;
public:

  virtual int size() { return CLEDController::size() * m_nActualLanes; }
      bc:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
      c0:	6940      	ldr	r0, [r0, #20]
      c2:	fb00      	.short	0xfb00
      c4:	f003 4770 	and.w	r7, r3, #4026531840	; 0xf0000000

000000c8 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::init()>:
      uint32_t now = millis();
      now -= lastframe;
      if( now == 0 ) {
          now = 1; // prevent division by zero below
      }
      m_nFPS = (br * 1000) / now;
      c8:	2300b570 	.word	0x2300b570
		pCur->showColor(color, scale);
		pCur->setDither(d);
		pCur = pCur->next();
	}
	countFPS();
}
      cc:	4604      	mov	r4, r0
      ce:	2521      	.short	0x2521
		return *pCur;
	}
}

void CFastLED::showColor(const struct CRGB & color, uint8_t scale) {
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
      d0:	2101      	movs	r1, #1
      d2:	6183      	.short	0x6183
      d4:	200e      	movs	r0, #14
      d6:	61e3      	.short	0x61e3
      d8:	6223      	str	r3, [r4, #32]
      da:	6263      	str	r3, [r4, #36]	; 0x24
      dc:	3028f884 	.word	0x3028f884
      e0:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
      e4:	f88462e3 	.word	0xf88462e3
      e8:	5029      	str	r1, [r5, r0]
      ea:	f002 f861 	bl	21b0 <pinMode>
      ee:	f894      	.short	0xf894
      f0:	2028      	movs	r0, #40	; 0x28
      f2:	2112      	.short	0x2112
			_BLOCK_PIN( 0);
			_BLOCK_PIN(24);
			_BLOCK_PIN(25);
			_BLOCK_PIN(19);
			_BLOCK_PIN(18);
			_BLOCK_PIN(14);
      f4:	1c53      	adds	r3, r2, #1
      f6:	4422      	.short	0x4422
      f8:	b2db      	uxtb	r3, r3
      fa:	f884      	.short	0xf884
      fc:	3028      	adds	r0, #40	; 0x28
			_BLOCK_PIN(15);
      fe:	2b01      	.short	0x2b01
			_BLOCK_PIN( 0);
			_BLOCK_PIN(24);
			_BLOCK_PIN(25);
			_BLOCK_PIN(19);
			_BLOCK_PIN(18);
			_BLOCK_PIN(14);
     100:	7611      	strb	r1, [r2, #24]
     102:	6ae2      	.short	0x6ae2
     104:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
     108:	62e2      	str	r2, [r4, #44]	; 0x2c
			_BLOCK_PIN(15);
     10a:	f000      	.short	0xf000
     10c:	80b3      	strh	r3, [r6, #4]
template<uint8_t PIN, uint32_t _BIT, uint32_t _MASK, typename _GPIO_DR, typename _GPIO_DR_SET, typename _GPIO_DR_CLEAR, typename _GPIO_DR_TOGGLE> class _ARMPIN {
public:
	typedef volatile uint32_t * port_ptr_t;
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
     10e:	2101      	.short	0x2101
     110:	200f      	movs	r0, #15
     112:	f002      	.short	0xf002
     114:	f84d f894 	str.w	pc, [sp, <undefined>]
     118:	2028      	movs	r0, #40	; 0x28
     11a:	2113      	movs	r1, #19
     11c:	1c53      	adds	r3, r2, #1
     11e:	4422      	.short	0x4422
     120:	b2db      	uxtb	r3, r3
     122:	f884      	.short	0xf884
     124:	3028      	adds	r0, #40	; 0x28
			_BLOCK_PIN(17);
     126:	2b01      	.short	0x2b01
			_BLOCK_PIN(24);
			_BLOCK_PIN(25);
			_BLOCK_PIN(19);
			_BLOCK_PIN(18);
			_BLOCK_PIN(14);
			_BLOCK_PIN(15);
     128:	7611      	strb	r1, [r2, #24]
     12a:	6ae2      	.short	0x6ae2
     12c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
     130:	f00062e2 	.word	0xf00062e2
			_BLOCK_PIN(17);
     134:	809f      	strh	r7, [r3, #4]
     136:	2101      	.short	0x2101
     138:	2011      	movs	r0, #17
     13a:	f002      	.short	0xf002
     13c:	f839 f894 	pldw	[r9, <undefined>]
     140:	25162028 	.word	0x25162028
     144:	1c53      	adds	r3, r2, #1
     146:	4422      	.short	0x4422
     148:	b2db      	uxtb	r3, r3
     14a:	f884      	.short	0xf884
     14c:	3028      	adds	r0, #40	; 0x28
			_BLOCK_PIN(16);
     14e:	2b01      	cmp	r3, #1
			_BLOCK_PIN(25);
			_BLOCK_PIN(19);
			_BLOCK_PIN(18);
			_BLOCK_PIN(14);
			_BLOCK_PIN(15);
			_BLOCK_PIN(17);
     150:	6ae27615 	.word	0x6ae27615
     154:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
     158:	f00062e2 	.word	0xf00062e2
			_BLOCK_PIN(16);
     15c:	808b      	strh	r3, [r1, #4]
     15e:	2101      	.short	0x2101
     160:	2010      	movs	r0, #16
     162:	f002 f825 	bl	21b0 <pinMode>
     166:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
     16a:	2617      	.short	0x2617
     16c:	1c53      	adds	r3, r2, #1
     16e:	4422      	.short	0x4422
     170:	b2db      	uxtb	r3, r3
     172:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			_BLOCK_PIN(22);
     176:	2b01      	.short	0x2b01
			_BLOCK_PIN(19);
			_BLOCK_PIN(18);
			_BLOCK_PIN(14);
			_BLOCK_PIN(15);
			_BLOCK_PIN(17);
			_BLOCK_PIN(16);
     178:	7616      	strb	r6, [r2, #24]
     17a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
     17c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
     180:	d07762e2 	.word	0xd07762e2
     184:	2101      	movs	r1, #1
     186:	4628      	.short	0x4628
     188:	f002 f812 	bl	21b0 <pinMode>
			_BLOCK_PIN(22);
     18c:	2028f894 	.word	0x2028f894
     190:	2118      	movs	r1, #24
     192:	1c53      	adds	r3, r2, #1
     194:	4422      	add	r2, r4
     196:	b2db      	uxtb	r3, r3
     198:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			_BLOCK_PIN(23);
     19c:	76112b01 	.word	0x76112b01
			_BLOCK_PIN(18);
			_BLOCK_PIN(14);
			_BLOCK_PIN(15);
			_BLOCK_PIN(17);
			_BLOCK_PIN(16);
			_BLOCK_PIN(22);
     1a0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
     1a2:	f042      	.short	0xf042
     1a4:	7280      	strb	r0, [r0, #10]
     1a6:	62e2      	.short	0x62e2
			_BLOCK_PIN(23);
     1a8:	d064      	beq.n	274 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::init()+0x1ac>
     1aa:	2101      	.short	0x2101
     1ac:	4630      	mov	r0, r6
     1ae:	f001      	.short	0xf001
     1b0:	ffff f894 			; <UNDEFINED> instruction: 0xfffff894
     1b4:	2028      	movs	r0, #40	; 0x28
     1b6:	2119      	.short	0x2119
     1b8:	1c53      	adds	r3, r2, #1
     1ba:	4422      	.short	0x4422
     1bc:	b2db      	uxtb	r3, r3
     1be:	f884      	.short	0xf884
     1c0:	3028      	adds	r0, #40	; 0x28
			_BLOCK_PIN(20);
     1c2:	2b01      	.short	0x2b01
			_BLOCK_PIN(14);
			_BLOCK_PIN(15);
			_BLOCK_PIN(17);
			_BLOCK_PIN(16);
			_BLOCK_PIN(22);
			_BLOCK_PIN(23);
     1c4:	7611      	strb	r1, [r2, #24]
     1c6:	6ae2      	.short	0x6ae2
     1c8:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
     1cc:	62e2      	str	r2, [r4, #44]	; 0x2c
			_BLOCK_PIN(20);
     1ce:	d051      	beq.n	274 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::init()+0x1ac>
     1d0:	2101      	movs	r1, #1
     1d2:	2014      	movs	r0, #20
     1d4:	f001 ffec 	bl	21b0 <pinMode>
     1d8:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
     1dc:	261a      	movs	r6, #26
     1de:	1c53      	adds	r3, r2, #1
     1e0:	4422      	add	r2, r4
     1e2:	b2db      	uxtb	r3, r3
     1e4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			_BLOCK_PIN(21);
     1e8:	2b01      	cmp	r3, #1
			_BLOCK_PIN(15);
			_BLOCK_PIN(17);
			_BLOCK_PIN(16);
			_BLOCK_PIN(22);
			_BLOCK_PIN(23);
			_BLOCK_PIN(20);
     1ea:	7616      	strb	r6, [r2, #24]
     1ec:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
     1ee:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
     1f2:	62e2      	str	r2, [r4, #44]	; 0x2c
			_BLOCK_PIN(21);
     1f4:	d03e      	beq.n	274 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::init()+0x1ac>
     1f6:	2101      	movs	r1, #1
     1f8:	2015      	movs	r0, #21
     1fa:	f001 ffd9 	bl	21b0 <pinMode>
     1fe:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
     202:	251b      	movs	r5, #27
     204:	1c53      	adds	r3, r2, #1
     206:	4422      	add	r2, r4
     208:	b2db      	uxtb	r3, r3
     20a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			_BLOCK_PIN(26);
     20e:	2b01      	cmp	r3, #1
			_BLOCK_PIN(17);
			_BLOCK_PIN(16);
			_BLOCK_PIN(22);
			_BLOCK_PIN(23);
			_BLOCK_PIN(20);
			_BLOCK_PIN(21);
     210:	7615      	strb	r5, [r2, #24]
     212:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
     214:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
     218:	62e2      	str	r2, [r4, #44]	; 0x2c
			_BLOCK_PIN(26);
     21a:	d02b      	beq.n	274 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::init()+0x1ac>
     21c:	2101      	movs	r1, #1
     21e:	4630      	mov	r0, r6
     220:	f001 ffc6 	bl	21b0 <pinMode>
     224:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
     228:	211e      	movs	r1, #30
     22a:	1c53      	adds	r3, r2, #1
     22c:	4422      	add	r2, r4
     22e:	b2db      	uxtb	r3, r3
     230:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			_BLOCK_PIN(27);
     234:	2b01      	cmp	r3, #1
			_BLOCK_PIN(16);
			_BLOCK_PIN(22);
			_BLOCK_PIN(23);
			_BLOCK_PIN(20);
			_BLOCK_PIN(21);
			_BLOCK_PIN(26);
     236:	7611      	strb	r1, [r2, #24]
     238:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
     23a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
     23e:	62e2      	str	r2, [r4, #44]	; 0x2c
			_BLOCK_PIN(27);
     240:	d018      	beq.n	274 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::init()+0x1ac>
     242:	4628      	mov	r0, r5
     244:	2101      	movs	r1, #1
     246:	f001 ffb3 	bl	21b0 <pinMode>
     24a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
     24e:	221f      	movs	r2, #31
     250:	1c5e      	adds	r6, r3, #1
     252:	4423      	add	r3, r4
     254:	b2f6      	uxtb	r6, r6
     256:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
     25a:	761a      	strb	r2, [r3, #24]
     25c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     25e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     262:	62e3      	str	r3, [r4, #44]	; 0x2c
			_BLOCK_PIN(28);
			_BLOCK_PIN(31);
			_BLOCK_PIN(30);
    }

    for(int i = 0; i < m_nActualLanes; i++) {
     264:	b93e      	cbnz	r6, 276 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::init()+0x1ae>
     266:	f894 502a 	ldrb.w	r5, [r4, #42]	; 0x2a
      if(m_bitOffsets[i] < m_nLowBit) { m_nLowBit = m_bitOffsets[i]; }
      if(m_bitOffsets[i] > m_nHighBit) { m_nHighBit = m_bitOffsets[i]; }
    }

    m_nOutBlocks = (m_nHighBit + 8)/8;
     26a:	3508      	adds	r5, #8
     26c:	10ed      	asrs	r5, r5, #3
     26e:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30

  }
     272:	bd70      	pop	{r4, r5, r6, pc}
			_BLOCK_PIN(28);
			_BLOCK_PIN(31);
			_BLOCK_PIN(30);
    }

    for(int i = 0; i < m_nActualLanes; i++) {
     274:	2601      	movs	r6, #1
     276:	f894 502a 	ldrb.w	r5, [r4, #42]	; 0x2a
     27a:	f104 0117 	add.w	r1, r4, #23
     27e:	2200      	movs	r2, #0
      if(m_bitOffsets[i] < m_nLowBit) { m_nLowBit = m_bitOffsets[i]; }
     280:	f811 3f01 	ldrb.w	r3, [r1, #1]!
			_BLOCK_PIN(28);
			_BLOCK_PIN(31);
			_BLOCK_PIN(30);
    }

    for(int i = 0; i < m_nActualLanes; i++) {
     284:	3201      	adds	r2, #1
      if(m_bitOffsets[i] < m_nLowBit) { m_nLowBit = m_bitOffsets[i]; }
     286:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
     28a:	4298      	cmp	r0, r3
     28c:	bf88      	it	hi
     28e:	f884 3029 	strbhi.w	r3, [r4, #41]	; 0x29
      if(m_bitOffsets[i] > m_nHighBit) { m_nHighBit = m_bitOffsets[i]; }
     292:	42ab      	cmp	r3, r5
     294:	d902      	bls.n	29c <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::init()+0x1d4>
     296:	461d      	mov	r5, r3
     298:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
			_BLOCK_PIN(28);
			_BLOCK_PIN(31);
			_BLOCK_PIN(30);
    }

    for(int i = 0; i < m_nActualLanes; i++) {
     29c:	42b2      	cmp	r2, r6
     29e:	dbef      	blt.n	280 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::init()+0x1b8>
      if(m_bitOffsets[i] < m_nLowBit) { m_nLowBit = m_bitOffsets[i]; }
      if(m_bitOffsets[i] > m_nHighBit) { m_nHighBit = m_bitOffsets[i]; }
    }

    m_nOutBlocks = (m_nHighBit + 8)/8;
     2a0:	3508      	adds	r5, #8
     2a2:	10ed      	asrs	r5, r5, #3
     2a4:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30

  }
     2a8:	bd70      	pop	{r4, r5, r6, pc}
     2aa:	bf00      	nop

000002ac <setup>:
double rms;
double peak;

arm_rfft_instance_q15 fftInstance;

void setup() {
     2ac:	b570      	push	{r4, r5, r6, lr}
     2ae:	f640 31b8 	movw	r1, #3000	; 0xbb8
     2b2:	4843      	ldr	r0, [pc, #268]	; (3c0 <setup+0x114>)
     2b4:	f001 fc06 	bl	1ac4 <VisualMicroDebug::init(unsigned long)>
     2b8:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
     2bc:	4840      	ldr	r0, [pc, #256]	; (3c0 <setup+0x114>)
     2be:	f001 fbfd 	bl	1abc <VisualMicroDebug::begin(unsigned long)>
     2c2:	2101      	movs	r1, #1
     2c4:	483e      	ldr	r0, [pc, #248]	; (3c0 <setup+0x114>)
     2c6:	f001 fbdb 	bl	1a80 <VisualMicroDebug::outPacketStart(bool)>
     2ca:	2800      	cmp	r0, #0
     2cc:	d169      	bne.n	3a2 <setup+0xf6>
     2ce:	2100      	movs	r1, #0
     2d0:	483b      	ldr	r0, [pc, #236]	; (3c0 <setup+0x114>)
     2d2:	2201      	movs	r2, #1
     2d4:	f001 fc94 	bl	1c00 <VisualMicroDebug::start(bool, bool)>
     2d8:	2101      	movs	r1, #1
     2da:	4839      	ldr	r0, [pc, #228]	; (3c0 <setup+0x114>)
     2dc:	f001 fbd0 	bl	1a80 <VisualMicroDebug::outPacketStart(bool)>
     2e0:	b130      	cbz	r0, 2f0 <setup+0x44>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     2e2:	2106      	movs	r1, #6
     2e4:	4837      	ldr	r0, [pc, #220]	; (3c4 <setup+0x118>)
     2e6:	f003 f931 	bl	354c <usb_serial_write>
     2ea:	4835      	ldr	r0, [pc, #212]	; (3c0 <setup+0x114>)
     2ec:	f001 fbe4 	bl	1ab8 <VisualMicroDebug::outPacketEnd()>
    pinMode(A1, INPUT);
     2f0:	2100      	movs	r1, #0
     2f2:	200f      	movs	r0, #15
     2f4:	f001 ff5c 	bl	21b0 <pinMode>
    pinMode(dataPin, OUTPUT);
     2f8:	200e      	movs	r0, #14
     2fa:	2101      	movs	r1, #1
     2fc:	f001 ff58 	bl	21b0 <pinMode>
	}

#if defined(__FASTLED_HAS_FIBCC) && (__FASTLED_HAS_FIBCC == 1)
  template<uint8_t NUM_LANES, template<uint8_t DATA_PIN, EOrder RGB_ORDER> class CHIPSET, uint8_t DATA_PIN, EOrder RGB_ORDER=RGB>
  static CLEDController &addLeds(struct CRGB *data, int nLeds) {
    static __FIBCC<CHIPSET, DATA_PIN, NUM_LANES, RGB_ORDER> c;
     300:	4831      	ldr	r0, [pc, #196]	; (3c8 <setup+0x11c>)
     302:	6803      	ldr	r3, [r0, #0]
     304:	f013 0201 	ands.w	r2, r3, #1
     308:	d02e      	beq.n	368 <setup+0xbc>
    return addLeds(&c, data, nLeds);
     30a:	2300      	movs	r3, #0
     30c:	2275      	movs	r2, #117	; 0x75
     30e:	492f      	ldr	r1, [pc, #188]	; (3cc <setup+0x120>)
     310:	482f      	ldr	r0, [pc, #188]	; (3d0 <setup+0x124>)
     312:	f001 fc9d 	bl	1c50 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>
     316:	2105      	movs	r1, #5
     318:	482e      	ldr	r0, [pc, #184]	; (3d4 <setup+0x128>)
     31a:	f003 f917 	bl	354c <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     31e:	482e      	ldr	r0, [pc, #184]	; (3d8 <setup+0x12c>)
     320:	f003 f9d2 	bl	36c8 <Print::println()>
    FastLED.addLeds<1, WS2813, dataPin, GRB>(leds, numLeds);
    Serial.begin(115200);
    Serial.println("Hello");

    // setup the ADC
    ADC0.setReference(ADC_REFERENCE::REF_3V3);
     324:	2100      	movs	r1, #0
     326:	482d      	ldr	r0, [pc, #180]	; (3dc <setup+0x130>)
     328:	f001 f8f2 	bl	1510 <My_ADC::setReference(ADC_settings::ADC_REFERENCE)>
    ADC0.setResolution(12); // resolution of 10 bits
     32c:	210c      	movs	r1, #12
     32e:	482b      	ldr	r0, [pc, #172]	; (3dc <setup+0x130>)
     330:	f001 f912 	bl	1558 <My_ADC::setResolution(unsigned char)>
    ADC0.setConversionSpeed(ADC_CONVERSION_SPEED::ADACK_20); // ADC asynchronous clock 20 MHz
     334:	2104      	movs	r1, #4
     336:	4829      	ldr	r0, [pc, #164]	; (3dc <setup+0x130>)
     338:	f001 f952 	bl	15e0 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)>
    ADC0.setSamplingSpeed(ADC_SAMPLING_SPEED::VERY_LOW_SPEED); // 25 ADCK cycles
     33c:	2100      	movs	r1, #0
     33e:	4827      	ldr	r0, [pc, #156]	; (3dc <setup+0x130>)
     340:	f001 fa72 	bl	1828 <My_ADC::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)>
    ADC0.setAveraging(8); // take the average of 4 readings
     344:	2108      	movs	r1, #8
     346:	4825      	ldr	r0, [pc, #148]	; (3dc <setup+0x130>)
     348:	f001 fadc 	bl	1904 <My_ADC::setAveraging(unsigned char)>
    ADC0.recalibrate();
     34c:	4823      	ldr	r0, [pc, #140]	; (3dc <setup+0x130>)
     34e:	f001 f8cb 	bl	14e8 <My_ADC::recalibrate()>

    // TODO set offset	
    ADC0.enableInterrupts(readAdc, ADC_IR_Priority);
     352:	4923      	ldr	r1, [pc, #140]	; (3e0 <setup+0x134>)
     354:	4821      	ldr	r0, [pc, #132]	; (3dc <setup+0x130>)
     356:	2240      	movs	r2, #64	; 0x40
     358:	f001 fb2a 	bl	19b0 <My_ADC::enableInterrupts(void (*)(), unsigned char)>
    ADC0.startContinuous(A1);
     35c:	210f      	movs	r1, #15
     35e:	481f      	ldr	r0, [pc, #124]	; (3dc <setup+0x130>)
}
     360:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ADC0.setAveraging(8); // take the average of 4 readings
    ADC0.recalibrate();

    // TODO set offset	
    ADC0.enableInterrupts(readAdc, ADC_IR_Priority);
    ADC0.startContinuous(A1);
     364:	f001 bb50 	b.w	1a08 <My_ADC::startContinuous(unsigned char)>

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
     368:	4c1e      	ldr	r4, [pc, #120]	; (3e4 <setup+0x138>)
    {
    }

    /// allow construction from a LEDColorCorrection enum
    inline CRGB( LEDColorCorrection colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     36a:	21ff      	movs	r1, #255	; 0xff
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
     36c:	4b18      	ldr	r3, [pc, #96]	; (3d0 <setup+0x124>)
     36e:	2601      	movs	r6, #1
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
     370:	6825      	ldr	r5, [r4, #0]
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
     372:	605a      	str	r2, [r3, #4]
     374:	615a      	str	r2, [r3, #20]
        m_pNext = NULL;
     376:	609a      	str	r2, [r3, #8]
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
     378:	749e      	strb	r6, [r3, #18]
     37a:	7319      	strb	r1, [r3, #12]
     37c:	7359      	strb	r1, [r3, #13]
     37e:	7399      	strb	r1, [r3, #14]

    }

    /// allow construction from a ColorTemperature enum
    inline CRGB( ColorTemperature colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     380:	73d9      	strb	r1, [r3, #15]
     382:	7419      	strb	r1, [r3, #16]
     384:	7459      	strb	r1, [r3, #17]
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
     386:	b1c5      	cbz	r5, 3ba <setup+0x10e>
        if(m_pTail != NULL) { m_pTail->m_pNext = this; }
     388:	4a17      	ldr	r2, [pc, #92]	; (3e8 <setup+0x13c>)
     38a:	6811      	ldr	r1, [r2, #0]
     38c:	b101      	cbz	r1, 390 <setup+0xe4>
     38e:	608b      	str	r3, [r1, #8]
/// Class to ensure that a minimum amount of time has kicked since the last time run - and delay if not enough time has passed yet
/// this should make sure that chipsets that have
template<int WAIT> class CMinWait {
	uint16_t mLastMicros;
public:
	CMinWait() { mLastMicros = 0; }
     390:	2500      	movs	r5, #0
    return ARM_DWT_CYCCNT - start;
  }
};

template<template<uint8_t DATA_PIN, EOrder RGB_ORDER> class CHIPSET, uint8_t DATA_PIN, int NUM_LANES, EOrder RGB_ORDER=GRB>
class __FIBCC : public FlexibleInlineBlockClocklessController<NUM_LANES,DATA_PIN,CHIPSET<DATA_PIN,RGB_ORDER>::__T1(),CHIPSET<DATA_PIN,RGB_ORDER>::__T2(),CHIPSET<DATA_PIN,RGB_ORDER>::__T3(),RGB_ORDER,CHIPSET<DATA_PIN,RGB_ORDER>::__XTRA0(),CHIPSET<DATA_PIN,RGB_ORDER>::__FLIP(),CHIPSET<DATA_PIN,RGB_ORDER>::__WAIT_TIME()> {};
     392:	4c16      	ldr	r4, [pc, #88]	; (3ec <setup+0x140>)
	}

#if defined(__FASTLED_HAS_FIBCC) && (__FASTLED_HAS_FIBCC == 1)
  template<uint8_t NUM_LANES, template<uint8_t DATA_PIN, EOrder RGB_ORDER> class CHIPSET, uint8_t DATA_PIN, EOrder RGB_ORDER=RGB>
  static CLEDController &addLeds(struct CRGB *data, int nLeds) {
    static __FIBCC<CHIPSET, DATA_PIN, NUM_LANES, RGB_ORDER> c;
     394:	2101      	movs	r1, #1
        m_pTail = this;
     396:	6013      	str	r3, [r2, #0]
     398:	f8a3 5040 	strh.w	r5, [r3, #64]	; 0x40
     39c:	601c      	str	r4, [r3, #0]
     39e:	6001      	str	r1, [r0, #0]
     3a0:	e7b3      	b.n	30a <setup+0x5e>
     3a2:	2110      	movs	r1, #16
     3a4:	4812      	ldr	r0, [pc, #72]	; (3f0 <setup+0x144>)
     3a6:	f003 f8d1 	bl	354c <usb_serial_write>
double rms;
double peak;

arm_rfft_instance_q15 fftInstance;

void setup() {
     3aa:	210a      	movs	r1, #10
     3ac:	4804      	ldr	r0, [pc, #16]	; (3c0 <setup+0x114>)
     3ae:	f001 fb5b 	bl	1a68 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>
     3b2:	4803      	ldr	r0, [pc, #12]	; (3c0 <setup+0x114>)
     3b4:	f001 fb80 	bl	1ab8 <VisualMicroDebug::outPacketEnd()>
     3b8:	e789      	b.n	2ce <setup+0x22>

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
     3ba:	6023      	str	r3, [r4, #0]
     3bc:	e7e4      	b.n	388 <setup+0xdc>
     3be:	bf00      	nop
     3c0:	20022568 	.word	0x20022568
     3c4:	20000038 	.word	0x20000038
     3c8:	20012310 	.word	0x20012310
     3cc:	20012358 	.word	0x20012358
     3d0:	20012314 	.word	0x20012314
     3d4:	20000040 	.word	0x20000040
     3d8:	200122d8 	.word	0x200122d8
     3dc:	200224f4 	.word	0x200224f4
     3e0:	00000081 	.word	0x00000081
     3e4:	200225c0 	.word	0x200225c0
     3e8:	200225d0 	.word	0x200225d0
     3ec:	20000008 	.word	0x20000008
     3f0:	20000024 	.word	0x20000024

000003f4 <loop>:
void loop() {
    // long micros1, micros2;
    // micros1 = micros();
    // Sample window = 75.4 ms, fundamental frequency 13.3 Hz (4 readings)
    // Sample window = 150.7 ms, fundamental frequency 6.63 Hz (8 readings)
    if (sampleCounter == N_SAMPLES - 1) {
     3f4:	49cb      	ldr	r1, [pc, #812]	; (724 <loop+0x330>)
     3f6:	f641 73ff 	movw	r3, #8191	; 0x1fff
     3fa:	680a      	ldr	r2, [r1, #0]
     3fc:	429a      	cmp	r2, r3
     3fe:	d000      	beq.n	402 <loop+0xe>
     400:	4770      	bx	lr
     402:	4bc9      	ldr	r3, [pc, #804]	; (728 <loop+0x334>)
     404:	4ac9      	ldr	r2, [pc, #804]	; (72c <loop+0x338>)
     406:	f503 4080 	add.w	r0, r3, #16384	; 0x4000
    // TODO set offset	
    ADC0.enableInterrupts(readAdc, ADC_IR_Priority);
    ADC0.startContinuous(A1);
}

void loop() {
     40a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    // micros1 = micros();
    // Sample window = 75.4 ms, fundamental frequency 13.3 Hz (4 readings)
    // Sample window = 150.7 ms, fundamental frequency 6.63 Hz (8 readings)
    if (sampleCounter == N_SAMPLES - 1) {
        // ADC0.stopContinuous();
        sampleCounter = 0;
     40e:	2400      	movs	r4, #0
    // TODO set offset	
    ADC0.enableInterrupts(readAdc, ADC_IR_Priority);
    ADC0.startContinuous(A1);
}

void loop() {
     410:	b083      	sub	sp, #12
    // micros1 = micros();
    // Sample window = 75.4 ms, fundamental frequency 13.3 Hz (4 readings)
    // Sample window = 150.7 ms, fundamental frequency 6.63 Hz (8 readings)
    if (sampleCounter == N_SAMPLES - 1) {
        // ADC0.stopContinuous();
        sampleCounter = 0;
     412:	600c      	str	r4, [r1, #0]
        
        // copy samples over to fft array
        for (int i = 0; i < N_SAMPLES; i++) {
            fftSamples[i] = samples[i];
     414:	f833 1f02 	ldrh.w	r1, [r3, #2]!
    if (sampleCounter == N_SAMPLES - 1) {
        // ADC0.stopContinuous();
        sampleCounter = 0;
        
        // copy samples over to fft array
        for (int i = 0; i < N_SAMPLES; i++) {
     418:	4298      	cmp	r0, r3
            fftSamples[i] = samples[i];
     41a:	f822 1f02 	strh.w	r1, [r2, #2]!
    if (sampleCounter == N_SAMPLES - 1) {
        // ADC0.stopContinuous();
        sampleCounter = 0;
        
        // copy samples over to fft array
        for (int i = 0; i < N_SAMPLES; i++) {
     41e:	d1f9      	bne.n	414 <loop+0x20>
            fftSamples[i] = samples[i];
        }

        arm_rfft_init_q15(&fftInstance, N_SAMPLES, 0, 1);
     420:	2301      	movs	r3, #1
     422:	2200      	movs	r2, #0
     424:	f44f 5100 	mov.w	r1, #8192	; 0x2000
     428:	48c1      	ldr	r0, [pc, #772]	; (730 <loop+0x33c>)
     42a:	4fc2      	ldr	r7, [pc, #776]	; (734 <loop+0x340>)
        bass[0] = 0;
        bass[1] = 0;
        mid[0] = 0;
        mid[1] = 0;
        treble[0] = 0;
        treble[1] = 0;
     42c:	f04f 0a00 	mov.w	sl, #0
        // copy samples over to fft array
        for (int i = 0; i < N_SAMPLES; i++) {
            fftSamples[i] = samples[i];
        }

        arm_rfft_init_q15(&fftInstance, N_SAMPLES, 0, 1);
     430:	f003 fbb4 	bl	3b9c <arm_rfft_init_q15>
        arm_rfft_q15(&fftInstance, fftSamples, fftOutput); // Q13.3 output format
     434:	4abf      	ldr	r2, [pc, #764]	; (734 <loop+0x340>)
     436:	49c0      	ldr	r1, [pc, #768]	; (738 <loop+0x344>)
        bass[0] = 0;
        bass[1] = 0;
        mid[0] = 0;
        mid[1] = 0;
        treble[0] = 0;
        treble[1] = 0;
     438:	46d3      	mov	fp, sl
        for (int i = 0; i < N_SAMPLES; i++) {
            fftSamples[i] = samples[i];
        }

        arm_rfft_init_q15(&fftInstance, N_SAMPLES, 0, 1);
        arm_rfft_q15(&fftInstance, fftSamples, fftOutput); // Q13.3 output format
     43a:	48bd      	ldr	r0, [pc, #756]	; (730 <loop+0x33c>)
     43c:	f003 fb4e 	bl	3adc <arm_rfft_q15>
        int iFFT; // counter
        bass[0] = 0;
        bass[1] = 0;
        mid[0] = 0;
        mid[1] = 0;
        treble[0] = 0;
     440:	f8df c30c 	ldr.w	ip, [pc, #780]	; 750 <loop+0x35c>
     444:	463a      	mov	r2, r7
        treble[1] = 0;
     446:	2302      	movs	r3, #2
        for (iFFT = 2; (iFFT >> 1) * fundamentalFreq < bassUpper; iFFT += 2) {
            bass[0] += abs(fftOutput[iFFT]);
     448:	f9b2 0004 	ldrsh.w	r0, [r2, #4]
        bass[1] = 0;
        mid[0] = 0;
        mid[1] = 0;
        treble[0] = 0;
        treble[1] = 0;
        for (iFFT = 2; (iFFT >> 1) * fundamentalFreq < bassUpper; iFFT += 2) {
     44c:	3302      	adds	r3, #2
            bass[0] += abs(fftOutput[iFFT]);
            bass[1] += abs(fftOutput[iFFT + 1]);
     44e:	f9b2 1006 	ldrsh.w	r1, [r2, #6]
     452:	3204      	adds	r2, #4
        mid[0] = 0;
        mid[1] = 0;
        treble[0] = 0;
        treble[1] = 0;
        for (iFFT = 2; (iFFT >> 1) * fundamentalFreq < bassUpper; iFFT += 2) {
            bass[0] += abs(fftOutput[iFFT]);
     454:	2800      	cmp	r0, #0
     456:	bfb8      	it	lt
     458:	4240      	neglt	r0, r0
            bass[1] += abs(fftOutput[iFFT + 1]);
     45a:	2900      	cmp	r1, #0
     45c:	bfb8      	it	lt
     45e:	4249      	neglt	r1, r1
        bass[1] = 0;
        mid[0] = 0;
        mid[1] = 0;
        treble[0] = 0;
        treble[1] = 0;
        for (iFFT = 2; (iFFT >> 1) * fundamentalFreq < bassUpper; iFFT += 2) {
     460:	2b5c      	cmp	r3, #92	; 0x5c
            bass[0] += abs(fftOutput[iFFT]);
     462:	4483      	add	fp, r0
            bass[1] += abs(fftOutput[iFFT + 1]);
     464:	448a      	add	sl, r1
        bass[1] = 0;
        mid[0] = 0;
        mid[1] = 0;
        treble[0] = 0;
        treble[1] = 0;
        for (iFFT = 2; (iFFT >> 1) * fundamentalFreq < bassUpper; iFFT += 2) {
     466:	d1ef      	bne.n	448 <loop+0x54>
     468:	2500      	movs	r5, #0
     46a:	4cb4      	ldr	r4, [pc, #720]	; (73c <loop+0x348>)
            bass[0] += abs(fftOutput[iFFT]);
            bass[1] += abs(fftOutput[iFFT + 1]);
        }

        // Add up fft real and complex magnitudes for midrange frequencies, [300, 1500] Hz
        for (iFFT; (iFFT >> 1) * fundamentalFreq < midUpper; iFFT += 2) {
     46c:	f643 2e97 	movw	lr, #14999	; 0x3a97
        bass[1] = 0;
        mid[0] = 0;
        mid[1] = 0;
        treble[0] = 0;
        treble[1] = 0;
        for (iFFT = 2; (iFFT >> 1) * fundamentalFreq < bassUpper; iFFT += 2) {
     470:	462e      	mov	r6, r5
            bass[1] += abs(fftOutput[iFFT + 1]);
        }

        // Add up fft real and complex magnitudes for midrange frequencies, [300, 1500] Hz
        for (iFFT; (iFFT >> 1) * fundamentalFreq < midUpper; iFFT += 2) {
            mid[0] += abs(fftOutput[iFFT]);
     472:	f937 8013 	ldrsh.w	r8, [r7, r3, lsl #1]
            bass[0] += abs(fftOutput[iFFT]);
            bass[1] += abs(fftOutput[iFFT + 1]);
        }

        // Add up fft real and complex magnitudes for midrange frequencies, [300, 1500] Hz
        for (iFFT; (iFFT >> 1) * fundamentalFreq < midUpper; iFFT += 2) {
     476:	3302      	adds	r3, #2
            mid[0] += abs(fftOutput[iFFT]);
            mid[1] += abs(fftOutput[iFFT + 1]);
     478:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
     47c:	3404      	adds	r4, #4
            bass[0] += abs(fftOutput[iFFT]);
            bass[1] += abs(fftOutput[iFFT + 1]);
        }

        // Add up fft real and complex magnitudes for midrange frequencies, [300, 1500] Hz
        for (iFFT; (iFFT >> 1) * fundamentalFreq < midUpper; iFFT += 2) {
     47e:	105a      	asrs	r2, r3, #1
            mid[0] += abs(fftOutput[iFFT]);
     480:	f1b8 0f00 	cmp.w	r8, #0
     484:	49ab      	ldr	r1, [pc, #684]	; (734 <loop+0x340>)
            bass[0] += abs(fftOutput[iFFT]);
            bass[1] += abs(fftOutput[iFFT + 1]);
        }

        // Add up fft real and complex magnitudes for midrange frequencies, [300, 1500] Hz
        for (iFFT; (iFFT >> 1) * fundamentalFreq < midUpper; iFFT += 2) {
     486:	eb02 1242 	add.w	r2, r2, r2, lsl #5
            mid[0] += abs(fftOutput[iFFT]);
     48a:	bfb8      	it	lt
     48c:	f1c8 0800 	rsblt	r8, r8, #0
            mid[1] += abs(fftOutput[iFFT + 1]);
     490:	2800      	cmp	r0, #0
            bass[0] += abs(fftOutput[iFFT]);
            bass[1] += abs(fftOutput[iFFT + 1]);
        }

        // Add up fft real and complex magnitudes for midrange frequencies, [300, 1500] Hz
        for (iFFT; (iFFT >> 1) * fundamentalFreq < midUpper; iFFT += 2) {
     492:	ea4f 0242 	mov.w	r2, r2, lsl #1
            mid[0] += abs(fftOutput[iFFT]);
     496:	4446      	add	r6, r8
            mid[1] += abs(fftOutput[iFFT + 1]);
     498:	bfb8      	it	lt
     49a:	4240      	neglt	r0, r0
            bass[0] += abs(fftOutput[iFFT]);
            bass[1] += abs(fftOutput[iFFT + 1]);
        }

        // Add up fft real and complex magnitudes for midrange frequencies, [300, 1500] Hz
        for (iFFT; (iFFT >> 1) * fundamentalFreq < midUpper; iFFT += 2) {
     49c:	4572      	cmp	r2, lr
            mid[0] += abs(fftOutput[iFFT]);
            mid[1] += abs(fftOutput[iFFT + 1]);
     49e:	4405      	add	r5, r0
            bass[0] += abs(fftOutput[iFFT]);
            bass[1] += abs(fftOutput[iFFT + 1]);
        }

        // Add up fft real and complex magnitudes for midrange frequencies, [300, 1500] Hz
        for (iFFT; (iFFT >> 1) * fundamentalFreq < midUpper; iFFT += 2) {
     4a0:	dde7      	ble.n	472 <loop+0x7e>
     4a2:	0230      	lsls	r0, r6, #8
            mid[0] += abs(fftOutput[iFFT]);
            mid[1] += abs(fftOutput[iFFT + 1]);
        }

        // Add up fft real and complex magnitudes for treble frequencies, [1500, 5000] Hz
        for (iFFT; (iFFT >> 1) * fundamentalFreq < trebleUpper; iFFT += 2) {
     4a4:	f24c 394f 	movw	r9, #49999	; 0xc34f
     4a8:	f8df 82a0 	ldr.w	r8, [pc, #672]	; 74c <loop+0x358>
     4ac:	9000      	str	r0, [sp, #0]
     4ae:	454a      	cmp	r2, r9
     4b0:	ea4f 2005 	mov.w	r0, r5, lsl #8
     4b4:	9001      	str	r0, [sp, #4]
     4b6:	f300 8132 	bgt.w	71e <loop+0x32a>
     4ba:	ea4f 0e43 	mov.w	lr, r3, lsl #1
     4be:	2500      	movs	r5, #0
     4c0:	4471      	add	r1, lr
     4c2:	462e      	mov	r6, r5
            treble[0] += abs(fftOutput[iFFT]);
     4c4:	f937 400e 	ldrsh.w	r4, [r7, lr]
            mid[0] += abs(fftOutput[iFFT]);
            mid[1] += abs(fftOutput[iFFT + 1]);
        }

        // Add up fft real and complex magnitudes for treble frequencies, [1500, 5000] Hz
        for (iFFT; (iFFT >> 1) * fundamentalFreq < trebleUpper; iFFT += 2) {
     4c8:	3302      	adds	r3, #2
            treble[0] += abs(fftOutput[iFFT]);
            treble[1] += abs(fftOutput[iFFT + 1]);
     4ca:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
     4ce:	3104      	adds	r1, #4
            mid[1] += abs(fftOutput[iFFT + 1]);
        }

        // Add up fft real and complex magnitudes for treble frequencies, [1500, 5000] Hz
        for (iFFT; (iFFT >> 1) * fundamentalFreq < trebleUpper; iFFT += 2) {
            treble[0] += abs(fftOutput[iFFT]);
     4d0:	2c00      	cmp	r4, #0
            mid[0] += abs(fftOutput[iFFT]);
            mid[1] += abs(fftOutput[iFFT + 1]);
        }

        // Add up fft real and complex magnitudes for treble frequencies, [1500, 5000] Hz
        for (iFFT; (iFFT >> 1) * fundamentalFreq < trebleUpper; iFFT += 2) {
     4d2:	ea4f 0263 	mov.w	r2, r3, asr #1
     4d6:	ea4f 0e43 	mov.w	lr, r3, lsl #1
            treble[0] += abs(fftOutput[iFFT]);
     4da:	bfb8      	it	lt
     4dc:	4264      	neglt	r4, r4
            mid[0] += abs(fftOutput[iFFT]);
            mid[1] += abs(fftOutput[iFFT + 1]);
        }

        // Add up fft real and complex magnitudes for treble frequencies, [1500, 5000] Hz
        for (iFFT; (iFFT >> 1) * fundamentalFreq < trebleUpper; iFFT += 2) {
     4de:	eb02 1242 	add.w	r2, r2, r2, lsl #5
            treble[0] += abs(fftOutput[iFFT]);
            treble[1] += abs(fftOutput[iFFT + 1]);
     4e2:	2800      	cmp	r0, #0
            mid[1] += abs(fftOutput[iFFT + 1]);
        }

        // Add up fft real and complex magnitudes for treble frequencies, [1500, 5000] Hz
        for (iFFT; (iFFT >> 1) * fundamentalFreq < trebleUpper; iFFT += 2) {
            treble[0] += abs(fftOutput[iFFT]);
     4e4:	4426      	add	r6, r4
            treble[1] += abs(fftOutput[iFFT + 1]);
     4e6:	bfb8      	it	lt
     4e8:	4240      	neglt	r0, r0
            mid[0] += abs(fftOutput[iFFT]);
            mid[1] += abs(fftOutput[iFFT + 1]);
        }

        // Add up fft real and complex magnitudes for treble frequencies, [1500, 5000] Hz
        for (iFFT; (iFFT >> 1) * fundamentalFreq < trebleUpper; iFFT += 2) {
     4ea:	ebb9 0f42 	cmp.w	r9, r2, lsl #1
            treble[0] += abs(fftOutput[iFFT]);
            treble[1] += abs(fftOutput[iFFT + 1]);
     4ee:	4405      	add	r5, r0
            mid[0] += abs(fftOutput[iFFT]);
            mid[1] += abs(fftOutput[iFFT + 1]);
        }

        // Add up fft real and complex magnitudes for treble frequencies, [1500, 5000] Hz
        for (iFFT; (iFFT >> 1) * fundamentalFreq < trebleUpper; iFFT += 2) {
     4f0:	dae8      	bge.n	4c4 <loop+0xd0>
     4f2:	0236      	lsls	r6, r6, #8
     4f4:	022d      	lsls	r5, r5, #8
            treble[0] += abs(fftOutput[iFFT]);
            treble[1] += abs(fftOutput[iFFT + 1]);
        }
        bass[0] <<= 8;
     4f6:	4892      	ldr	r0, [pc, #584]	; (740 <loop+0x34c>)
        bass[1] <<= 8;
     4f8:	ea4f 230a 	mov.w	r3, sl, lsl #8
        //    for (int j = (sizeof * fftOutput) - 1; j >= 0; j--) {
        //        Serial.print(p6[j], HEX);
        //    }
        //    Serial.println();*/
        //}
        arm_cmplx_mag_q31(bass, &bassAmplitude, 1); // output is in Q2,30 format
     4fc:	4f91      	ldr	r7, [pc, #580]	; (744 <loop+0x350>)
        // Add up fft real and complex magnitudes for treble frequencies, [1500, 5000] Hz
        for (iFFT; (iFFT >> 1) * fundamentalFreq < trebleUpper; iFFT += 2) {
            treble[0] += abs(fftOutput[iFFT]);
            treble[1] += abs(fftOutput[iFFT + 1]);
        }
        bass[0] <<= 8;
     4fe:	ea4f 220b 	mov.w	r2, fp, lsl #8
        bass[1] <<= 8;
        mid[0] <<= 8;
     502:	9900      	ldr	r1, [sp, #0]
        for (iFFT; (iFFT >> 1) * fundamentalFreq < trebleUpper; iFFT += 2) {
            treble[0] += abs(fftOutput[iFFT]);
            treble[1] += abs(fftOutput[iFFT + 1]);
        }
        bass[0] <<= 8;
        bass[1] <<= 8;
     504:	6043      	str	r3, [r0, #4]
        mid[0] <<= 8;
        mid[1] <<= 8;
     506:	9b01      	ldr	r3, [sp, #4]
        //        Serial.print(p6[j], HEX);
        //    }
        //    Serial.println();*/
        //}
        arm_cmplx_mag_q31(bass, &bassAmplitude, 1); // output is in Q2,30 format
        arm_cmplx_mag_q31(mid, &midAmplitude, 1); // output is in Q2,30 format
     508:	4c8f      	ldr	r4, [pc, #572]	; (748 <loop+0x354>)
            treble[1] += abs(fftOutput[iFFT + 1]);
        }
        bass[0] <<= 8;
        bass[1] <<= 8;
        mid[0] <<= 8;
        mid[1] <<= 8;
     50a:	f8c8 3004 	str.w	r3, [r8, #4]
            treble[0] += abs(fftOutput[iFFT]);
            treble[1] += abs(fftOutput[iFFT + 1]);
        }
        bass[0] <<= 8;
        bass[1] <<= 8;
        mid[0] <<= 8;
     50e:	f8c8 1000 	str.w	r1, [r8]
        //    for (int j = (sizeof * fftOutput) - 1; j >= 0; j--) {
        //        Serial.print(p6[j], HEX);
        //    }
        //    Serial.println();*/
        //}
        arm_cmplx_mag_q31(bass, &bassAmplitude, 1); // output is in Q2,30 format
     512:	4639      	mov	r1, r7
        // Add up fft real and complex magnitudes for treble frequencies, [1500, 5000] Hz
        for (iFFT; (iFFT >> 1) * fundamentalFreq < trebleUpper; iFFT += 2) {
            treble[0] += abs(fftOutput[iFFT]);
            treble[1] += abs(fftOutput[iFFT + 1]);
        }
        bass[0] <<= 8;
     514:	6002      	str	r2, [r0, #0]
        //    for (int j = (sizeof * fftOutput) - 1; j >= 0; j--) {
        //        Serial.print(p6[j], HEX);
        //    }
        //    Serial.println();*/
        //}
        arm_cmplx_mag_q31(bass, &bassAmplitude, 1); // output is in Q2,30 format
     516:	2201      	movs	r2, #1
        arm_cmplx_mag_q31(mid, &midAmplitude, 1); // output is in Q2,30 format
        arm_cmplx_mag_q31(treble, &trebleAmplitude, 1); // output is in Q2,30 format
     518:	f8df 8270 	ldr.w	r8, [pc, #624]	; 78c <loop+0x398>
        }
        bass[0] <<= 8;
        bass[1] <<= 8;
        mid[0] <<= 8;
        mid[1] <<= 8;
        treble[0] <<= 8;
     51c:	f8cc 6000 	str.w	r6, [ip]
        treble[1] <<= 8;
     520:	f8cc 5004 	str.w	r5, [ip, #4]
        //    for (int j = (sizeof * fftOutput) - 1; j >= 0; j--) {
        //        Serial.print(p6[j], HEX);
        //    }
        //    Serial.println();*/
        //}
        arm_cmplx_mag_q31(bass, &bassAmplitude, 1); // output is in Q2,30 format
     524:	f003 fbc2 	bl	3cac <arm_cmplx_mag_q31>
        arm_cmplx_mag_q31(mid, &midAmplitude, 1); // output is in Q2,30 format
     528:	4621      	mov	r1, r4
     52a:	2201      	movs	r2, #1
     52c:	4887      	ldr	r0, [pc, #540]	; (74c <loop+0x358>)
     52e:	f003 fbbd 	bl	3cac <arm_cmplx_mag_q31>
        arm_cmplx_mag_q31(treble, &trebleAmplitude, 1); // output is in Q2,30 format
     532:	2201      	movs	r2, #1
     534:	4641      	mov	r1, r8
     536:	4886      	ldr	r0, [pc, #536]	; (750 <loop+0x35c>)
     538:	f003 fbb8 	bl	3cac <arm_cmplx_mag_q31>
     53c:	2106      	movs	r1, #6
     53e:	4885      	ldr	r0, [pc, #532]	; (754 <loop+0x360>)
     540:	f003 f804 	bl	354c <usb_serial_write>
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
     544:	6839      	ldr	r1, [r7, #0]
     546:	4884      	ldr	r0, [pc, #528]	; (758 <loop+0x364>)
     548:	f003 f90e 	bl	3768 <Print::print(long)>
     54c:	4882      	ldr	r0, [pc, #520]	; (758 <loop+0x364>)
     54e:	f003 f8bb 	bl	36c8 <Print::println()>
     552:	2105      	movs	r1, #5
     554:	4881      	ldr	r0, [pc, #516]	; (75c <loop+0x368>)
     556:	f002 fff9 	bl	354c <usb_serial_write>
     55a:	6821      	ldr	r1, [r4, #0]
     55c:	487e      	ldr	r0, [pc, #504]	; (758 <loop+0x364>)
     55e:	f003 f903 	bl	3768 <Print::print(long)>
     562:	487d      	ldr	r0, [pc, #500]	; (758 <loop+0x364>)
     564:	f003 f8b0 	bl	36c8 <Print::println()>
     568:	2108      	movs	r1, #8
     56a:	487d      	ldr	r0, [pc, #500]	; (760 <loop+0x36c>)
     56c:	f002 ffee 	bl	354c <usb_serial_write>
     570:	f8d8 1000 	ldr.w	r1, [r8]
     574:	4878      	ldr	r0, [pc, #480]	; (758 <loop+0x364>)
     576:	f003 f8f7 	bl	3768 <Print::print(long)>
     57a:	4877      	ldr	r0, [pc, #476]	; (758 <loop+0x364>)
     57c:	f003 f8a4 	bl	36c8 <Print::println()>
        Serial.println(bassAmplitude);
        Serial.print("Mid: ");
        Serial.println(midAmplitude);
        Serial.print("Treble: ");
        Serial.println(trebleAmplitude);
        bassLedsOn = numLedsBy3 * bassAmplitude / maxBass;
     580:	6839      	ldr	r1, [r7, #0]
        midLedsOn = numLedsBy3 * midAmplitude / maxMid;
     582:	6822      	ldr	r2, [r4, #0]
        trebleLedsOn = numLedsBy3 * trebleAmplitude / maxTreble;
     584:	f8d8 3000 	ldr.w	r3, [r8]
        Serial.println(bassAmplitude);
        Serial.print("Mid: ");
        Serial.println(midAmplitude);
        Serial.print("Treble: ");
        Serial.println(trebleAmplitude);
        bassLedsOn = numLedsBy3 * bassAmplitude / maxBass;
     588:	eb01 0581 	add.w	r5, r1, r1, lsl #2
        midLedsOn = numLedsBy3 * midAmplitude / maxMid;
     58c:	eb02 0682 	add.w	r6, r2, r2, lsl #2
        Serial.println(bassAmplitude);
        Serial.print("Mid: ");
        Serial.println(midAmplitude);
        Serial.print("Treble: ");
        Serial.println(trebleAmplitude);
        bassLedsOn = numLedsBy3 * bassAmplitude / maxBass;
     590:	4874      	ldr	r0, [pc, #464]	; (764 <loop+0x370>)
        midLedsOn = numLedsBy3 * midAmplitude / maxMid;
        trebleLedsOn = numLedsBy3 * trebleAmplitude / maxTreble;
     592:	eb03 0483 	add.w	r4, r3, r3, lsl #2
     596:	4f74      	ldr	r7, [pc, #464]	; (768 <loop+0x374>)
        Serial.println(bassAmplitude);
        Serial.print("Mid: ");
        Serial.println(midAmplitude);
        Serial.print("Treble: ");
        Serial.println(trebleAmplitude);
        bassLedsOn = numLedsBy3 * bassAmplitude / maxBass;
     598:	ebc1 01c5 	rsb	r1, r1, r5, lsl #3
     59c:	4d73      	ldr	r5, [pc, #460]	; (76c <loop+0x378>)
        midLedsOn = numLedsBy3 * midAmplitude / maxMid;
        trebleLedsOn = numLedsBy3 * trebleAmplitude / maxTreble;
     59e:	ebc3 03c4 	rsb	r3, r3, r4, lsl #3
        Serial.print("Mid: ");
        Serial.println(midAmplitude);
        Serial.print("Treble: ");
        Serial.println(trebleAmplitude);
        bassLedsOn = numLedsBy3 * bassAmplitude / maxBass;
        midLedsOn = numLedsBy3 * midAmplitude / maxMid;
     5a2:	ebc2 02c6 	rsb	r2, r2, r6, lsl #3
        Serial.println(bassAmplitude);
        Serial.print("Mid: ");
        Serial.println(midAmplitude);
        Serial.print("Treble: ");
        Serial.println(trebleAmplitude);
        bassLedsOn = numLedsBy3 * bassAmplitude / maxBass;
     5a6:	fb80 4e01 	smull	r4, lr, r0, r1
     5aa:	17c9      	asrs	r1, r1, #31
        midLedsOn = numLedsBy3 * midAmplitude / maxMid;
        trebleLedsOn = numLedsBy3 * trebleAmplitude / maxTreble;
     5ac:	fb87 4703 	smull	r4, r7, r7, r3
        Serial.print("Mid: ");
        Serial.println(midAmplitude);
        Serial.print("Treble: ");
        Serial.println(trebleAmplitude);
        bassLedsOn = numLedsBy3 * bassAmplitude / maxBass;
        midLedsOn = numLedsBy3 * midAmplitude / maxMid;
     5b0:	fb80 4002 	smull	r4, r0, r0, r2
        trebleLedsOn = numLedsBy3 * trebleAmplitude / maxTreble;
     5b4:	17db      	asrs	r3, r3, #31
        Serial.println(bassAmplitude);
        Serial.print("Mid: ");
        Serial.println(midAmplitude);
        Serial.print("Treble: ");
        Serial.println(trebleAmplitude);
        bassLedsOn = numLedsBy3 * bassAmplitude / maxBass;
     5b6:	ebc1 512e 	rsb	r1, r1, lr, asr #20
        midLedsOn = numLedsBy3 * midAmplitude / maxMid;
     5ba:	4e6d      	ldr	r6, [pc, #436]	; (770 <loop+0x37c>)
     5bc:	17d2      	asrs	r2, r2, #31
        trebleLedsOn = numLedsBy3 * trebleAmplitude / maxTreble;
     5be:	4c6d      	ldr	r4, [pc, #436]	; (774 <loop+0x380>)
     5c0:	ebc3 43e7 	rsb	r3, r3, r7, asr #19
        if (bassLedsOn > numLedsBy3) bassLedsOn = numLedsBy3;
     5c4:	2927      	cmp	r1, #39	; 0x27
        Serial.print("Mid: ");
        Serial.println(midAmplitude);
        Serial.print("Treble: ");
        Serial.println(trebleAmplitude);
        bassLedsOn = numLedsBy3 * bassAmplitude / maxBass;
        midLedsOn = numLedsBy3 * midAmplitude / maxMid;
     5c6:	ebc2 5260 	rsb	r2, r2, r0, asr #21
        Serial.println(bassAmplitude);
        Serial.print("Mid: ");
        Serial.println(midAmplitude);
        Serial.print("Treble: ");
        Serial.println(trebleAmplitude);
        bassLedsOn = numLedsBy3 * bassAmplitude / maxBass;
     5ca:	8029      	strh	r1, [r5, #0]
        midLedsOn = numLedsBy3 * midAmplitude / maxMid;
        trebleLedsOn = numLedsBy3 * trebleAmplitude / maxTreble;
     5cc:	8023      	strh	r3, [r4, #0]
        Serial.print("Mid: ");
        Serial.println(midAmplitude);
        Serial.print("Treble: ");
        Serial.println(trebleAmplitude);
        bassLedsOn = numLedsBy3 * bassAmplitude / maxBass;
        midLedsOn = numLedsBy3 * midAmplitude / maxMid;
     5ce:	8032      	strh	r2, [r6, #0]
        trebleLedsOn = numLedsBy3 * trebleAmplitude / maxTreble;
        if (bassLedsOn > numLedsBy3) bassLedsOn = numLedsBy3;
     5d0:	dd01      	ble.n	5d6 <loop+0x1e2>
     5d2:	2127      	movs	r1, #39	; 0x27
     5d4:	8029      	strh	r1, [r5, #0]
        if (midLedsOn > numLedsBy3) midLedsOn = numLedsBy3;
     5d6:	2a27      	cmp	r2, #39	; 0x27
     5d8:	dd01      	ble.n	5de <loop+0x1ea>
     5da:	2227      	movs	r2, #39	; 0x27
     5dc:	8032      	strh	r2, [r6, #0]
        if (trebleLedsOn > numLedsBy3) trebleLedsOn = numLedsBy3;
     5de:	2b27      	cmp	r3, #39	; 0x27
     5e0:	f300 8090 	bgt.w	704 <loop+0x310>
     5e4:	210b      	movs	r1, #11
     5e6:	4864      	ldr	r0, [pc, #400]	; (778 <loop+0x384>)
     5e8:	f002 ffb0 	bl	354c <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     5ec:	f9b5 1000 	ldrsh.w	r1, [r5]
     5f0:	4859      	ldr	r0, [pc, #356]	; (758 <loop+0x364>)
     5f2:	f003 f8b9 	bl	3768 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     5f6:	4858      	ldr	r0, [pc, #352]	; (758 <loop+0x364>)
     5f8:	f003 f866 	bl	36c8 <Print::println()>
     5fc:	210a      	movs	r1, #10
     5fe:	485f      	ldr	r0, [pc, #380]	; (77c <loop+0x388>)
     600:	f002 ffa4 	bl	354c <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     604:	f9b6 1000 	ldrsh.w	r1, [r6]
     608:	4853      	ldr	r0, [pc, #332]	; (758 <loop+0x364>)
     60a:	f003 f8ad 	bl	3768 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     60e:	4852      	ldr	r0, [pc, #328]	; (758 <loop+0x364>)
     610:	f003 f85a 	bl	36c8 <Print::println()>
     614:	210d      	movs	r1, #13
     616:	485a      	ldr	r0, [pc, #360]	; (780 <loop+0x38c>)
     618:	f002 ff98 	bl	354c <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     61c:	f9b4 1000 	ldrsh.w	r1, [r4]
     620:	484d      	ldr	r0, [pc, #308]	; (758 <loop+0x364>)
     622:	f003 f8a1 	bl	3768 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     626:	484c      	ldr	r0, [pc, #304]	; (758 <loop+0x364>)
     628:	f003 f84e 	bl	36c8 <Print::println()>
        Serial.println(midLedsOn);
        Serial.print("Treble leds: ");
        Serial.println(trebleLedsOn);

        int ledCounter;
        for (ledCounter = 0; ledCounter < bassLedsOn; ledCounter++) {
     62c:	f9b5 1000 	ldrsh.w	r1, [r5]
     630:	2900      	cmp	r1, #0
     632:	dd6d      	ble.n	710 <loop+0x31c>
     634:	004a      	lsls	r2, r1, #1
     636:	4853      	ldr	r0, [pc, #332]	; (784 <loop+0x390>)
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
     638:	2500      	movs	r5, #0
        g = (colorcode >>  8) & 0xFF;
        b = (colorcode >>  0) & 0xFF;
     63a:	f04f 0eff 	mov.w	lr, #255	; 0xff
     63e:	1857      	adds	r7, r2, r1
     640:	4603      	mov	r3, r0
     642:	4407      	add	r7, r0
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
     644:	701d      	strb	r5, [r3, #0]
     646:	3303      	adds	r3, #3
        g = (colorcode >>  8) & 0xFF;
     648:	f803 5c02 	strb.w	r5, [r3, #-2]
        b = (colorcode >>  0) & 0xFF;
     64c:	f803 ec01 	strb.w	lr, [r3, #-1]
     650:	42bb      	cmp	r3, r7
     652:	d1f7      	bne.n	644 <loop+0x250>
            leds[ledCounter] = CRGB::Blue;
        }
        for (; ledCounter < numLedsBy3; ledCounter++) {
     654:	2926      	cmp	r1, #38	; 0x26
     656:	dc0a      	bgt.n	66e <loop+0x27a>
     658:	440a      	add	r2, r1
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
     65a:	2300      	movs	r3, #0
     65c:	4402      	add	r2, r0
     65e:	3101      	adds	r1, #1
     660:	7013      	strb	r3, [r2, #0]
        g = (colorcode >>  8) & 0xFF;
     662:	7053      	strb	r3, [r2, #1]
     664:	3203      	adds	r2, #3
     666:	2927      	cmp	r1, #39	; 0x27
        b = (colorcode >>  0) & 0xFF;
     668:	f802 3c01 	strb.w	r3, [r2, #-1]
     66c:	d1f7      	bne.n	65e <loop+0x26a>
            leds[ledCounter] = CRGB::Black;
        }
        for (ledCounter = 0; ledCounter < midLedsOn; ledCounter++) {
     66e:	f9b6 1000 	ldrsh.w	r1, [r6]
     672:	2900      	cmp	r1, #0
     674:	dd50      	ble.n	718 <loop+0x324>
     676:	004b      	lsls	r3, r1, #1
     678:	4a42      	ldr	r2, [pc, #264]	; (784 <loop+0x390>)
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
     67a:	25ff      	movs	r5, #255	; 0xff
        g = (colorcode >>  8) & 0xFF;
        b = (colorcode >>  0) & 0xFF;
     67c:	2700      	movs	r7, #0
     67e:	185e      	adds	r6, r3, r1
     680:	4406      	add	r6, r0
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
     682:	f882 5075 	strb.w	r5, [r2, #117]	; 0x75
     686:	3203      	adds	r2, #3
        g = (colorcode >>  8) & 0xFF;
     688:	f882 5073 	strb.w	r5, [r2, #115]	; 0x73
        b = (colorcode >>  0) & 0xFF;
     68c:	f882 7074 	strb.w	r7, [r2, #116]	; 0x74
     690:	42b2      	cmp	r2, r6
     692:	d1f6      	bne.n	682 <loop+0x28e>
            leds[ledCounter + numLedsBy3] = CRGB::Yellow;
        }
        for (; ledCounter < numLedsBy3; ledCounter++) {
     694:	2926      	cmp	r1, #38	; 0x26
     696:	dc0c      	bgt.n	6b2 <loop+0x2be>
     698:	440b      	add	r3, r1
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
     69a:	2200      	movs	r2, #0
     69c:	4403      	add	r3, r0
     69e:	3101      	adds	r1, #1
     6a0:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
        g = (colorcode >>  8) & 0xFF;
     6a4:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
     6a8:	3303      	adds	r3, #3
     6aa:	2927      	cmp	r1, #39	; 0x27
        b = (colorcode >>  0) & 0xFF;
     6ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
     6b0:	d1f5      	bne.n	69e <loop+0x2aa>
            leds[ledCounter + numLedsBy3] = CRGB::Black;
        }
        for (ledCounter = 0; ledCounter < trebleLedsOn; ledCounter++) {
     6b2:	f9b4 1000 	ldrsh.w	r1, [r4]
     6b6:	2900      	cmp	r1, #0
     6b8:	dd27      	ble.n	70a <loop+0x316>
     6ba:	004a      	lsls	r2, r1, #1
     6bc:	4b31      	ldr	r3, [pc, #196]	; (784 <loop+0x390>)
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
     6be:	26ff      	movs	r6, #255	; 0xff
        g = (colorcode >>  8) & 0xFF;
     6c0:	2400      	movs	r4, #0
     6c2:	1855      	adds	r5, r2, r1
     6c4:	4405      	add	r5, r0
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
     6c6:	f883 60ea 	strb.w	r6, [r3, #234]	; 0xea
     6ca:	3303      	adds	r3, #3
        g = (colorcode >>  8) & 0xFF;
     6cc:	f883 40e8 	strb.w	r4, [r3, #232]	; 0xe8
        b = (colorcode >>  0) & 0xFF;
     6d0:	f883 40e9 	strb.w	r4, [r3, #233]	; 0xe9
     6d4:	42ab      	cmp	r3, r5
     6d6:	d1f6      	bne.n	6c6 <loop+0x2d2>
            leds[ledCounter + numLedsBy3 * 2] = CRGB::Red;
        }
        for (; ledCounter < numLedsBy3; ledCounter++) {
     6d8:	2926      	cmp	r1, #38	; 0x26
     6da:	dc0c      	bgt.n	6f6 <loop+0x302>
     6dc:	440a      	add	r2, r1
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
     6de:	2400      	movs	r4, #0
     6e0:	1883      	adds	r3, r0, r2
     6e2:	3101      	adds	r1, #1
     6e4:	f883 40ea 	strb.w	r4, [r3, #234]	; 0xea
        g = (colorcode >>  8) & 0xFF;
     6e8:	f883 40eb 	strb.w	r4, [r3, #235]	; 0xeb
     6ec:	3303      	adds	r3, #3
     6ee:	2927      	cmp	r1, #39	; 0x27
        b = (colorcode >>  0) & 0xFF;
     6f0:	f883 40e9 	strb.w	r4, [r3, #233]	; 0xe9
     6f4:	d1f5      	bne.n	6e2 <loop+0x2ee>
	/// Update all our controllers with the current led colors, using the passed in brightness
	/// @param scale temporarily override the scale
	void show(uint8_t scale);

	/// Update all our controllers with the current led colors
	void show() { show(m_Scale); }
     6f6:	4824      	ldr	r0, [pc, #144]	; (788 <loop+0x394>)
     6f8:	7801      	ldrb	r1, [r0, #0]
        FastLED.show();
    }
    // micros2 = micros();
    // Serial.print("Time to compute fft: ");
    // Serial.println(micros2 - micros1);
}
     6fa:	b003      	add	sp, #12
     6fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     700:	f001 bad4 	b.w	1cac <CFastLED::show(unsigned char)>
        bassLedsOn = numLedsBy3 * bassAmplitude / maxBass;
        midLedsOn = numLedsBy3 * midAmplitude / maxMid;
        trebleLedsOn = numLedsBy3 * trebleAmplitude / maxTreble;
        if (bassLedsOn > numLedsBy3) bassLedsOn = numLedsBy3;
        if (midLedsOn > numLedsBy3) midLedsOn = numLedsBy3;
        if (trebleLedsOn > numLedsBy3) trebleLedsOn = numLedsBy3;
     704:	2327      	movs	r3, #39	; 0x27
     706:	8023      	strh	r3, [r4, #0]
     708:	e76c      	b.n	5e4 <loop+0x1f0>
            leds[ledCounter + numLedsBy3] = CRGB::Yellow;
        }
        for (; ledCounter < numLedsBy3; ledCounter++) {
            leds[ledCounter + numLedsBy3] = CRGB::Black;
        }
        for (ledCounter = 0; ledCounter < trebleLedsOn; ledCounter++) {
     70a:	2100      	movs	r1, #0
     70c:	460a      	mov	r2, r1
     70e:	e7e5      	b.n	6dc <loop+0x2e8>
        Serial.println(midLedsOn);
        Serial.print("Treble leds: ");
        Serial.println(trebleLedsOn);

        int ledCounter;
        for (ledCounter = 0; ledCounter < bassLedsOn; ledCounter++) {
     710:	2100      	movs	r1, #0
     712:	481c      	ldr	r0, [pc, #112]	; (784 <loop+0x390>)
     714:	460a      	mov	r2, r1
     716:	e79f      	b.n	658 <loop+0x264>
            leds[ledCounter] = CRGB::Blue;
        }
        for (; ledCounter < numLedsBy3; ledCounter++) {
            leds[ledCounter] = CRGB::Black;
        }
        for (ledCounter = 0; ledCounter < midLedsOn; ledCounter++) {
     718:	2100      	movs	r1, #0
     71a:	460b      	mov	r3, r1
     71c:	e7bc      	b.n	698 <loop+0x2a4>
            mid[0] += abs(fftOutput[iFFT]);
            mid[1] += abs(fftOutput[iFFT + 1]);
        }

        // Add up fft real and complex magnitudes for treble frequencies, [1500, 5000] Hz
        for (iFFT; (iFFT >> 1) * fundamentalFreq < trebleUpper; iFFT += 2) {
     71e:	2500      	movs	r5, #0
     720:	462e      	mov	r6, r5
     722:	e6e8      	b.n	4f6 <loop+0x102>
     724:	2001a4e8 	.word	0x2001a4e8
     728:	2001e4f2 	.word	0x2001e4f2
     72c:	2001a4f2 	.word	0x2001a4f2
     730:	200124bc 	.word	0x200124bc
     734:	200124e4 	.word	0x200124e4
     738:	2001a4f4 	.word	0x2001a4f4
     73c:	2001259c 	.word	0x2001259c
     740:	200124dc 	.word	0x200124dc
     744:	2001a4e4 	.word	0x2001a4e4
     748:	20022564 	.word	0x20022564
     74c:	2002255c 	.word	0x2002255c
     750:	2001a4ec 	.word	0x2001a4ec
     754:	20000048 	.word	0x20000048
     758:	200122d8 	.word	0x200122d8
     75c:	20000050 	.word	0x20000050
     760:	20000058 	.word	0x20000058
     764:	431bde83 	.word	0x431bde83
     768:	165e9f81 	.word	0x165e9f81
     76c:	200124d4 	.word	0x200124d4
     770:	200124b8 	.word	0x200124b8
     774:	200124d6 	.word	0x200124d6
     778:	20000064 	.word	0x20000064
     77c:	20000070 	.word	0x20000070
     780:	2000007c 	.word	0x2000007c
     784:	20012358 	.word	0x20012358
     788:	200225b0 	.word	0x200225b0
     78c:	200124d8 	.word	0x200124d8

00000790 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)>:
        }
      }
    }
  }

  uint32_t showRGBInternal(PixelController<RGB_ORDER,LANES, __FL_T4_MASK> &allpixels) {
     790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     794:	b097      	sub	sp, #92	; 0x5c
                d[2] = e[2] - d[2];
        }

        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
     796:	7c0b      	ldrb	r3, [r1, #16]
     798:	4606      	mov	r6, r0
     79a:	4608      	mov	r0, r1
     79c:	9101      	str	r1, [sp, #4]
     79e:	7b49      	ldrb	r1, [r1, #13]
    allpixels.preStepFirstByteDithering();
    _outlines b0;
    uint32_t start = ARM_DWT_CYCCNT;
     7a0:	4ace      	ldr	r2, [pc, #824]	; (adc <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x34c>)
     7a2:	1a5b      	subs	r3, r3, r1
     7a4:	fa5f fc83 	uxtb.w	ip, r3
     7a8:	f880 c00d 	strb.w	ip, [r0, #13]
     7ac:	6812      	ldr	r2, [r2, #0]

    for(int i = 0; i < m_nActualLanes; i++) {
     7ae:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
  }

  uint32_t showRGBInternal(PixelController<RGB_ORDER,LANES, __FL_T4_MASK> &allpixels) {
    allpixels.preStepFirstByteDithering();
    _outlines b0;
    uint32_t start = ARM_DWT_CYCCNT;
     7b2:	9205      	str	r2, [sp, #20]

    for(int i = 0; i < m_nActualLanes; i++) {
     7b4:	b313      	cbz	r3, 7fc <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x6c>
     7b6:	9901      	ldr	r1, [sp, #4]
     7b8:	3305      	adds	r3, #5
     7ba:	f106 0417 	add.w	r4, r6, #23
     7be:	f891 e013 	ldrb.w	lr, [r1, #19]
     7c2:	eb01 0583 	add.w	r5, r1, r3, lsl #2
     7c6:	680f      	ldr	r7, [r1, #0]
     7c8:	f101 0014 	add.w	r0, r1, #20
     7cc:	f10e 0e01 	add.w	lr, lr, #1
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }
     7d0:	f850 3f04 	ldr.w	r3, [r0, #4]!
      b0.bytes[m_bitOffsets[i]] = allpixels.loadAndScale0(i);
     7d4:	a916      	add	r1, sp, #88	; 0x58
     7d6:	f814 2f01 	ldrb.w	r2, [r4, #1]!
     7da:	443b      	add	r3, r7
     7dc:	440a      	add	r2, r1
     7de:	785b      	ldrb	r3, [r3, #1]
/// @param j - second byte to add
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
     7e0:	eb03 010c 	add.w	r1, r3, ip

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
     7e4:	b133      	cbz	r3, 7f4 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x64>
    if( t > 255) t = 255;
     7e6:	29ff      	cmp	r1, #255	; 0xff
     7e8:	bfa8      	it	ge
     7ea:	21ff      	movge	r1, #255	; 0xff
     7ec:	fb01 f30e 	mul.w	r3, r1, lr
     7f0:	f3c3 2307 	ubfx	r3, r3, #8, #8
  uint32_t showRGBInternal(PixelController<RGB_ORDER,LANES, __FL_T4_MASK> &allpixels) {
    allpixels.preStepFirstByteDithering();
    _outlines b0;
    uint32_t start = ARM_DWT_CYCCNT;

    for(int i = 0; i < m_nActualLanes; i++) {
     7f4:	4285      	cmp	r5, r0
      b0.bytes[m_bitOffsets[i]] = allpixels.loadAndScale0(i);
     7f6:	f802 3c40 	strb.w	r3, [r2, #-64]
  uint32_t showRGBInternal(PixelController<RGB_ORDER,LANES, __FL_T4_MASK> &allpixels) {
    allpixels.preStepFirstByteDithering();
    _outlines b0;
    uint32_t start = ARM_DWT_CYCCNT;

    for(int i = 0; i < m_nActualLanes; i++) {
     7fa:	d1e9      	bne.n	7d0 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x40>
      b0.bytes[m_bitOffsets[i]] = allpixels.loadAndScale0(i);
    }

    cli();
     7fc:	b672      	cpsid	i
    m_offsets[0] = _FASTLED_NS_TO_DWT(T1+T2+T3);
     7fe:	49b8      	ldr	r1, [pc, #736]	; (ae0 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x350>)
     800:	48b8      	ldr	r0, [pc, #736]	; (ae4 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x354>)
     802:	680c      	ldr	r4, [r1, #0]
    m_offsets[1] = _FASTLED_NS_TO_DWT(T2+T3);
     804:	680b      	ldr	r3, [r1, #0]
    for(int i = 0; i < m_nActualLanes; i++) {
      b0.bytes[m_bitOffsets[i]] = allpixels.loadAndScale0(i);
    }

    cli();
    m_offsets[0] = _FASTLED_NS_TO_DWT(T1+T2+T3);
     806:	0c24      	lsrs	r4, r4, #16
    m_offsets[1] = _FASTLED_NS_TO_DWT(T2+T3);
    m_offsets[2] = _FASTLED_NS_TO_DWT(T3);
     808:	680a      	ldr	r2, [r1, #0]
      b0.bytes[m_bitOffsets[i]] = allpixels.loadAndScale0(i);
    }

    cli();
    m_offsets[0] = _FASTLED_NS_TO_DWT(T1+T2+T3);
    m_offsets[1] = _FASTLED_NS_TO_DWT(T2+T3);
     80a:	0c1b      	lsrs	r3, r3, #16
    m_offsets[2] = _FASTLED_NS_TO_DWT(T3);
    uint32_t wait_off = _FASTLED_NS_TO_DWT((WAIT_TIME-INTERRUPT_THRESHOLD));
     80c:	6809      	ldr	r1, [r1, #0]
    }

    cli();
    m_offsets[0] = _FASTLED_NS_TO_DWT(T1+T2+T3);
    m_offsets[1] = _FASTLED_NS_TO_DWT(T2+T3);
    m_offsets[2] = _FASTLED_NS_TO_DWT(T3);
     80e:	0c12      	lsrs	r2, r2, #16
      b0.bytes[m_bitOffsets[i]] = allpixels.loadAndScale0(i);
    }

    cli();
    m_offsets[0] = _FASTLED_NS_TO_DWT(T1+T2+T3);
    m_offsets[1] = _FASTLED_NS_TO_DWT(T2+T3);
     810:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    for(int i = 0; i < m_nActualLanes; i++) {
      b0.bytes[m_bitOffsets[i]] = allpixels.loadAndScale0(i);
    }

    cli();
    m_offsets[0] = _FASTLED_NS_TO_DWT(T1+T2+T3);
     814:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    m_offsets[1] = _FASTLED_NS_TO_DWT(T2+T3);
     818:	019b      	lsls	r3, r3, #6
    m_offsets[2] = _FASTLED_NS_TO_DWT(T3);
    uint32_t wait_off = _FASTLED_NS_TO_DWT((WAIT_TIME-INTERRUPT_THRESHOLD));
     81a:	0c09      	lsrs	r1, r1, #16
    for(int i = 0; i < m_nActualLanes; i++) {
      b0.bytes[m_bitOffsets[i]] = allpixels.loadAndScale0(i);
    }

    cli();
    m_offsets[0] = _FASTLED_NS_TO_DWT(T1+T2+T3);
     81c:	01e4      	lsls	r4, r4, #7
    m_offsets[1] = _FASTLED_NS_TO_DWT(T2+T3);
    m_offsets[2] = _FASTLED_NS_TO_DWT(T3);
     81e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
      b0.bytes[m_bitOffsets[i]] = allpixels.loadAndScale0(i);
    }

    cli();
    m_offsets[0] = _FASTLED_NS_TO_DWT(T1+T2+T3);
    m_offsets[1] = _FASTLED_NS_TO_DWT(T2+T3);
     822:	085b      	lsrs	r3, r3, #1
    m_offsets[2] = _FASTLED_NS_TO_DWT(T3);
    uint32_t wait_off = _FASTLED_NS_TO_DWT((WAIT_TIME-INTERRUPT_THRESHOLD));
     824:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    }

    cli();
    m_offsets[0] = _FASTLED_NS_TO_DWT(T1+T2+T3);
    m_offsets[1] = _FASTLED_NS_TO_DWT(T2+T3);
    m_offsets[2] = _FASTLED_NS_TO_DWT(T3);
     828:	0195      	lsls	r5, r2, #6
    for(int i = 0; i < m_nActualLanes; i++) {
      b0.bytes[m_bitOffsets[i]] = allpixels.loadAndScale0(i);
    }

    cli();
    m_offsets[0] = _FASTLED_NS_TO_DWT(T1+T2+T3);
     82a:	fba0 4204 	umull	r4, r2, r0, r4
    m_offsets[1] = _FASTLED_NS_TO_DWT(T2+T3);
    m_offsets[2] = _FASTLED_NS_TO_DWT(T3);
    uint32_t wait_off = _FASTLED_NS_TO_DWT((WAIT_TIME-INTERRUPT_THRESHOLD));
     82e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
      b0.bytes[m_bitOffsets[i]] = allpixels.loadAndScale0(i);
    }

    cli();
    m_offsets[0] = _FASTLED_NS_TO_DWT(T1+T2+T3);
    m_offsets[1] = _FASTLED_NS_TO_DWT(T2+T3);
     832:	fba0 4303 	umull	r4, r3, r0, r3
    m_offsets[2] = _FASTLED_NS_TO_DWT(T3);
     836:	fba0 4505 	umull	r4, r5, r0, r5
    for(int i = 0; i < m_nActualLanes; i++) {
      b0.bytes[m_bitOffsets[i]] = allpixels.loadAndScale0(i);
    }

    cli();
    m_offsets[0] = _FASTLED_NS_TO_DWT(T1+T2+T3);
     83a:	0a12      	lsrs	r2, r2, #8
    m_offsets[1] = _FASTLED_NS_TO_DWT(T2+T3);
     83c:	0a1b      	lsrs	r3, r3, #8
    m_offsets[2] = _FASTLED_NS_TO_DWT(T3);
    uint32_t wait_off = _FASTLED_NS_TO_DWT((WAIT_TIME-INTERRUPT_THRESHOLD));

    uint32_t next_mark = ARM_DWT_CYCCNT + m_offsets[0];
     83e:	4ca7      	ldr	r4, [pc, #668]	; (adc <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x34c>)

    cli();
    m_offsets[0] = _FASTLED_NS_TO_DWT(T1+T2+T3);
    m_offsets[1] = _FASTLED_NS_TO_DWT(T2+T3);
    m_offsets[2] = _FASTLED_NS_TO_DWT(T3);
    uint32_t wait_off = _FASTLED_NS_TO_DWT((WAIT_TIME-INTERRUPT_THRESHOLD));
     840:	0849      	lsrs	r1, r1, #1
    for(int i = 0; i < m_nActualLanes; i++) {
      b0.bytes[m_bitOffsets[i]] = allpixels.loadAndScale0(i);
    }

    cli();
    m_offsets[0] = _FASTLED_NS_TO_DWT(T1+T2+T3);
     842:	6372      	str	r2, [r6, #52]	; 0x34
    m_offsets[1] = _FASTLED_NS_TO_DWT(T2+T3);
     844:	63b3      	str	r3, [r6, #56]	; 0x38
    m_offsets[2] = _FASTLED_NS_TO_DWT(T3);
     846:	0a2d      	lsrs	r5, r5, #8
    uint32_t wait_off = _FASTLED_NS_TO_DWT((WAIT_TIME-INTERRUPT_THRESHOLD));
     848:	fba0 1301 	umull	r1, r3, r0, r1

    uint32_t next_mark = ARM_DWT_CYCCNT + m_offsets[0];

    while(allpixels.has(1)) {
     84c:	9901      	ldr	r1, [sp, #4]
    }

    cli();
    m_offsets[0] = _FASTLED_NS_TO_DWT(T1+T2+T3);
    m_offsets[1] = _FASTLED_NS_TO_DWT(T2+T3);
    m_offsets[2] = _FASTLED_NS_TO_DWT(T3);
     84e:	63f5      	str	r5, [r6, #60]	; 0x3c
    uint32_t wait_off = _FASTLED_NS_TO_DWT((WAIT_TIME-INTERRUPT_THRESHOLD));

    uint32_t next_mark = ARM_DWT_CYCCNT + m_offsets[0];

    while(allpixels.has(1)) {
     850:	6889      	ldr	r1, [r1, #8]

    cli();
    m_offsets[0] = _FASTLED_NS_TO_DWT(T1+T2+T3);
    m_offsets[1] = _FASTLED_NS_TO_DWT(T2+T3);
    m_offsets[2] = _FASTLED_NS_TO_DWT(T3);
    uint32_t wait_off = _FASTLED_NS_TO_DWT((WAIT_TIME-INTERRUPT_THRESHOLD));
     852:	0a1b      	lsrs	r3, r3, #8

    uint32_t next_mark = ARM_DWT_CYCCNT + m_offsets[0];
     854:	6820      	ldr	r0, [r4, #0]

    while(allpixels.has(1)) {
     856:	2900      	cmp	r1, #0

    cli();
    m_offsets[0] = _FASTLED_NS_TO_DWT(T1+T2+T3);
    m_offsets[1] = _FASTLED_NS_TO_DWT(T2+T3);
    m_offsets[2] = _FASTLED_NS_TO_DWT(T3);
    uint32_t wait_off = _FASTLED_NS_TO_DWT((WAIT_TIME-INTERRUPT_THRESHOLD));
     858:	9304      	str	r3, [sp, #16]

    uint32_t next_mark = ARM_DWT_CYCCNT + m_offsets[0];
     85a:	eb02 0b00 	add.w	fp, r2, r0

    while(allpixels.has(1)) {
     85e:	f340 8420 	ble.w	10a2 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x912>
      allpixels.stepDithering();
      #if (FASTLED_ALLOW_INTERRUPTS == 1)
			cli();
			// if interrupts took longer than 45µs, punt on the current frame
			if(ARM_DWT_CYCCNT > next_mark) {
     862:	46a2      	mov	sl, r4

      uint32_t out = (b2.bg[3][i] << 24) | (b2.bg[2][i] << 16) | (b2.bg[1][i] << 8) | b2.bg[0][i];

      out = ((~out) & m_nWriteMask);
      while((next_mark - ARM_DWT_CYCCNT) > m_offsets[1]);
      *FastPin<FIRST_PIN>::cport() = out;
     864:	9602      	str	r6, [sp, #8]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     866:	9d01      	ldr	r5, [sp, #4]
                d[1] = e[1] - d[1];
     868:	7b68      	ldrb	r0, [r5, #13]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     86a:	7beb      	ldrb	r3, [r5, #15]
     86c:	7b29      	ldrb	r1, [r5, #12]
                d[1] = e[1] - d[1];
     86e:	7c2a      	ldrb	r2, [r5, #16]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     870:	1a59      	subs	r1, r3, r1
                d[1] = e[1] - d[1];
                d[2] = e[2] - d[2];
     872:	7c6b      	ldrb	r3, [r5, #17]
        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
                d[1] = e[1] - d[1];
     874:	1a12      	subs	r2, r2, r0
                d[2] = e[2] - d[2];
     876:	7ba8      	ldrb	r0, [r5, #14]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     878:	7329      	strb	r1, [r5, #12]
                d[1] = e[1] - d[1];
                d[2] = e[2] - d[2];
     87a:	1a1b      	subs	r3, r3, r0
        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
                d[1] = e[1] - d[1];
     87c:	736a      	strb	r2, [r5, #13]
                d[2] = e[2] - d[2];
     87e:	73ab      	strb	r3, [r5, #14]
    uint32_t next_mark = ARM_DWT_CYCCNT + m_offsets[0];

    while(allpixels.has(1)) {
      allpixels.stepDithering();
      #if (FASTLED_ALLOW_INTERRUPTS == 1)
			cli();
     880:	b672      	cpsid	i
			// if interrupts took longer than 45µs, punt on the current frame
			if(ARM_DWT_CYCCNT > next_mark) {
     882:	f8da 3000 	ldr.w	r3, [sl]
     886:	4a95      	ldr	r2, [pc, #596]	; (adc <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x34c>)
     888:	455b      	cmp	r3, fp
     88a:	d907      	bls.n	89c <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x10c>
				if((ARM_DWT_CYCCNT-next_mark) > wait_off) { sei(); return ARM_DWT_CYCCNT - start; }
     88c:	f8da 3000 	ldr.w	r3, [sl]
     890:	9904      	ldr	r1, [sp, #16]
     892:	ebcb 0303 	rsb	r3, fp, r3
     896:	4299      	cmp	r1, r3
     898:	f0c0 8411 	bcc.w	10be <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x92e>
/// data into LSB for a faster write (the code using this data can happily walk the array backwards)
__attribute__((always_inline)) inline void transpose8x1(unsigned char *A, unsigned char *B) {
  uint32_t x, y, t;

  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
     89c:	990c      	ldr	r1, [sp, #48]	; 0x30
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     89e:	f64c 48cc 	movw	r8, #52428	; 0xcccc
__attribute__((always_inline)) inline void transpose8x1(unsigned char *A, unsigned char *B) {
  uint32_t x, y, t;

  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);
     8a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     8a4:	ea81 14d1 	eor.w	r4, r1, r1, lsr #7
__attribute__((always_inline)) inline void transpose8x1(unsigned char *A, unsigned char *B) {
  uint32_t x, y, t;

  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);
     8a8:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     8ac:	ea83 10d3 	eor.w	r0, r3, r3, lsr #7
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     8b0:	4642      	mov	r2, r8

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     8b2:	f004 14aa 	and.w	r4, r4, #11141290	; 0xaa00aa
/// data into LSB for a faster write (the code using this data can happily walk the array backwards)
__attribute__((always_inline)) inline void transpose8x1(unsigned char *A, unsigned char *B) {
  uint32_t x, y, t;

  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
     8b6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     8b8:	f000 10aa 	and.w	r0, r0, #11141290	; 0xaa00aa
/// data into LSB for a faster write (the code using this data can happily walk the array backwards)
__attribute__((always_inline)) inline void transpose8x1(unsigned char *A, unsigned char *B) {
  uint32_t x, y, t;

  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
     8bc:	9d08      	ldr	r5, [sp, #32]
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     8be:	4061      	eors	r1, r4
__attribute__((always_inline)) inline void transpose8x1(unsigned char *A, unsigned char *B) {
  uint32_t x, y, t;

  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);
     8c0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     8c4:	4043      	eors	r3, r0
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     8c6:	ea87 1ed7 	eor.w	lr, r7, r7, lsr #7
     8ca:	ea81 14c4 	eor.w	r4, r1, r4, lsl #7
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     8ce:	ea83 10c0 	eor.w	r0, r3, r0, lsl #7
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     8d2:	f00e 1eaa 	and.w	lr, lr, #11141290	; 0xaa00aa
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     8d6:	ea84 3194 	eor.w	r1, r4, r4, lsr #14
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     8da:	ea8c 13dc 	eor.w	r3, ip, ip, lsr #7
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     8de:	ea87 070e 	eor.w	r7, r7, lr
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     8e2:	ea01 0808 	and.w	r8, r1, r8
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     8e6:	ea80 3190 	eor.w	r1, r0, r0, lsr #14
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     8ea:	f003 13aa 	and.w	r3, r3, #11141290	; 0xaa00aa
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     8ee:	ea87 17ce 	eor.w	r7, r7, lr, lsl #7
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     8f2:	400a      	ands	r2, r1

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     8f4:	ea84 0108 	eor.w	r1, r4, r8
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     8f8:	ea8c 0403 	eor.w	r4, ip, r3
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     8fc:	ea85 1cd5 	eor.w	ip, r5, r5, lsr #7
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     900:	ea81 3188 	eor.w	r1, r1, r8, lsl #14
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     904:	4050      	eors	r0, r2
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     906:	ea84 13c3 	eor.w	r3, r4, r3, lsl #7
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     90a:	f00c 1caa 	and.w	ip, ip, #11141290	; 0xaa00aa
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     90e:	ea80 3282 	eor.w	r2, r0, r2, lsl #14
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
     912:	f001 300f 	and.w	r0, r1, #252645135	; 0xf0f0f0f
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     916:	ea89 14d9 	eor.w	r4, r9, r9, lsr #7
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     91a:	ea85 050c 	eor.w	r5, r5, ip
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
     91e:	4606      	mov	r6, r0
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     920:	9806      	ldr	r0, [sp, #24]
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     922:	f004 14aa 	and.w	r4, r4, #11141290	; 0xaa00aa
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     926:	ea85 15cc 	eor.w	r5, r5, ip, lsl #7
     92a:	ea80 18d0 	eor.w	r8, r0, r0, lsr #7
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     92e:	9807      	ldr	r0, [sp, #28]
     930:	ea89 0e04 	eor.w	lr, r9, r4
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     934:	0909      	lsrs	r1, r1, #4
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     936:	ea80 1cd0 	eor.w	ip, r0, r0, lsr #7
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     93a:	f008 18aa 	and.w	r8, r8, #11141290	; 0xaa00aa
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     93e:	ea8e 1ec4 	eor.w	lr, lr, r4, lsl #7
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     942:	9806      	ldr	r0, [sp, #24]
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     944:	f00c 1caa 	and.w	ip, ip, #11141290	; 0xaa00aa
     948:	9c07      	ldr	r4, [sp, #28]
  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
     94a:	f002 39f0 	and.w	r9, r2, #4042322160	; 0xf0f0f0f0
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     94e:	ea80 0008 	eor.w	r0, r0, r8
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     952:	ea84 040c 	eor.w	r4, r4, ip
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     956:	0112      	lsls	r2, r2, #4
  *((uint32_t*)(B+4)) = x;
     958:	f001 310f 	and.w	r1, r1, #252645135	; 0xf0f0f0f
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     95c:	ea80 10c8 	eor.w	r0, r0, r8, lsl #7
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     960:	ea84 14cc 	eor.w	r4, r4, ip, lsl #7
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     964:	f002 32f0 	and.w	r2, r2, #4042322160	; 0xf0f0f0f0
  *((uint32_t*)(B+4)) = x;
     968:	ea41 0109 	orr.w	r1, r1, r9
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     96c:	ea87 3897 	eor.w	r8, r7, r7, lsr #14
     970:	f64c 4ccc 	movw	ip, #52428	; 0xcccc
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     974:	4332      	orrs	r2, r6
  *((uint32_t*)(B+4)) = x;
     976:	9115      	str	r1, [sp, #84]	; 0x54
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     978:	f64c 41cc 	movw	r1, #52428	; 0xcccc

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     97c:	ea08 0c0c 	and.w	ip, r8, ip
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     980:	ea83 3893 	eor.w	r8, r3, r3, lsr #14
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     984:	9214      	str	r2, [sp, #80]	; 0x50
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     986:	f64c 42cc 	movw	r2, #52428	; 0xcccc
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     98a:	ea08 0101 	and.w	r1, r8, r1

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     98e:	ea85 3895 	eor.w	r8, r5, r5, lsr #14
     992:	ea87 070c 	eor.w	r7, r7, ip
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     996:	ea84 3994 	eor.w	r9, r4, r4, lsr #14

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     99a:	ea08 0202 	and.w	r2, r8, r2
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     99e:	ea8e 389e 	eor.w	r8, lr, lr, lsr #14

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     9a2:	ea87 378c 	eor.w	r7, r7, ip, lsl #14
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     9a6:	f64c 4ccc 	movw	ip, #52428	; 0xcccc

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     9aa:	4055      	eors	r5, r2
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     9ac:	404b      	eors	r3, r1
     9ae:	ea08 0c0c 	and.w	ip, r8, ip

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     9b2:	ea80 3890 	eor.w	r8, r0, r0, lsr #14
     9b6:	ea85 3582 	eor.w	r5, r5, r2, lsl #14
     9ba:	f64c 42cc 	movw	r2, #52428	; 0xcccc
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     9be:	ea83 3381 	eor.w	r3, r3, r1, lsl #14
     9c2:	ea8e 0e0c 	eor.w	lr, lr, ip

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     9c6:	ea08 0202 	and.w	r2, r8, r2
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     9ca:	f64c 48cc 	movw	r8, #52428	; 0xcccc
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     9ce:	0939      	lsrs	r1, r7, #4
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
     9d0:	f007 370f 	and.w	r7, r7, #252645135	; 0xf0f0f0f
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     9d4:	ea09 0808 	and.w	r8, r9, r8

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     9d8:	4050      	eors	r0, r2

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
     9da:	f003 39f0 	and.w	r9, r3, #4042322160	; 0xf0f0f0f0
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     9de:	011b      	lsls	r3, r3, #4
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     9e0:	ea84 0408 	eor.w	r4, r4, r8

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     9e4:	ea80 3082 	eor.w	r0, r0, r2, lsl #14
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     9e8:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
  *((uint32_t*)(B+4)) = x;
     9ec:	f001 310f 	and.w	r1, r1, #252645135	; 0xf0f0f0f
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     9f0:	ea84 3488 	eor.w	r4, r4, r8, lsl #14
     9f4:	9e02      	ldr	r6, [sp, #8]
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     9f6:	433b      	orrs	r3, r7
  *((uint32_t*)(B+4)) = x;
     9f8:	0907      	lsrs	r7, r0, #4
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     9fa:	0122      	lsls	r2, r4, #4
  *((uint32_t*)(B+4)) = x;
     9fc:	ea41 0109 	orr.w	r1, r1, r9
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     a00:	ea8e 3e8c 	eor.w	lr, lr, ip, lsl #14
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
     a04:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     a08:	ea4f 1915 	mov.w	r9, r5, lsr #4
     a0c:	f007 370f 	and.w	r7, r7, #252645135	; 0xf0f0f0f
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     a10:	f002 32f0 	and.w	r2, r2, #4042322160	; 0xf0f0f0f0
  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
     a14:	f004 34f0 	and.w	r4, r4, #4042322160	; 0xf0f0f0f0
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     a18:	ea4f 180e 	mov.w	r8, lr, lsl #4
  *((uint32_t*)(B+4)) = x;
     a1c:	f009 390f 	and.w	r9, r9, #252645135	; 0xf0f0f0f
  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
     a20:	f00e 3ef0 	and.w	lr, lr, #4042322160	; 0xf0f0f0f0
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     a24:	433c      	orrs	r4, r7
     a26:	9113      	str	r1, [sp, #76]	; 0x4c
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     a28:	ea42 0100 	orr.w	r1, r2, r0
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane, uint8_t scale) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane, scale); }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getd(PixelController & pc) { return pc.d[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getscale(PixelController & pc) { return pc.mScale.raw[RO(SLOT)]; }
     a2c:	9f01      	ldr	r7, [sp, #4]
     a2e:	f008 3cf0 	and.w	ip, r8, #4042322160	; 0xf0f0f0f0
  *((uint32_t*)(B+4)) = x;
     a32:	ea49 090e 	orr.w	r9, r9, lr
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
     a36:	f005 350f 	and.w	r5, r5, #252645135	; 0xf0f0f0f
     a3a:	f897 e012 	ldrb.w	lr, [r7, #18]
     a3e:	aa0e      	add	r2, sp, #56	; 0x38
  x = t;

  *((uint32_t*)B) = y;
     a40:	910e      	str	r1, [sp, #56]	; 0x38
     a42:	ea4c 0505 	orr.w	r5, ip, r5
     a46:	6839      	ldr	r1, [r7, #0]
     a48:	f10e 0e01 	add.w	lr, lr, #1
     a4c:	9312      	str	r3, [sp, #72]	; 0x48
    transpose8x1(b.bg[0], b2.bg[0]);

    register uint8_t d = pixels.template getd<PX>(pixels);
    register uint8_t scale = pixels.template getscale<PX>(pixels);

    int x = 0;
     a4e:	2000      	movs	r0, #0
    for(uint32_t i = 8; i > 0;) {
     a50:	2308      	movs	r3, #8

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane, uint8_t scale) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane, scale); }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getd(PixelController & pc) { return pc.d[RO(SLOT)]; }
     a52:	f897 800c 	ldrb.w	r8, [r7, #12]
     a56:	468c      	mov	ip, r1
  *((uint32_t*)(B+4)) = x;
     a58:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     a5c:	9510      	str	r5, [sp, #64]	; 0x40
  *((uint32_t*)(B+4)) = x;
     a5e:	940f      	str	r4, [sp, #60]	; 0x3c
     a60:	9103      	str	r1, [sp, #12]
      i--;
     a62:	3b01      	subs	r3, #1
      while(ARM_DWT_CYCCNT < next_mark);
     a64:	f8da 1000 	ldr.w	r1, [sl]
     a68:	4559      	cmp	r1, fp
     a6a:	d3fb      	bcc.n	a64 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x2d4>
      *FastPin<FIRST_PIN>::sport() = m_nWriteMask;
     a6c:	6af1      	ldr	r1, [r6, #44]	; 0x2c
     a6e:	4c1e      	ldr	r4, [pc, #120]	; (ae8 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x358>)
     a70:	6021      	str	r1, [r4, #0]
      next_mark = ARM_DWT_CYCCNT + m_offsets[0];

      uint32_t out = (b2.bg[3][i] << 24) | (b2.bg[2][i] << 16) | (b2.bg[1][i] << 8) | b2.bg[0][i];

      out = ((~out) & m_nWriteMask);
     a72:	7dd1      	ldrb	r1, [r2, #23]
     a74:	7fd5      	ldrb	r5, [r2, #31]
     a76:	0409      	lsls	r1, r1, #16
     a78:	79d7      	ldrb	r7, [r2, #7]
     a7a:	f892 900f 	ldrb.w	r9, [r2, #15]
     a7e:	ea41 6505 	orr.w	r5, r1, r5, lsl #24
     a82:	6af4      	ldr	r4, [r6, #44]	; 0x2c
     a84:	ea45 0107 	orr.w	r1, r5, r7
    int x = 0;
    for(uint32_t i = 8; i > 0;) {
      i--;
      while(ARM_DWT_CYCCNT < next_mark);
      *FastPin<FIRST_PIN>::sport() = m_nWriteMask;
      next_mark = ARM_DWT_CYCCNT + m_offsets[0];
     a88:	4d14      	ldr	r5, [pc, #80]	; (adc <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x34c>)
     a8a:	682f      	ldr	r7, [r5, #0]

      uint32_t out = (b2.bg[3][i] << 24) | (b2.bg[2][i] << 16) | (b2.bg[1][i] << 8) | b2.bg[0][i];

      out = ((~out) & m_nWriteMask);
     a8c:	ea41 2509 	orr.w	r5, r1, r9, lsl #8
    int x = 0;
    for(uint32_t i = 8; i > 0;) {
      i--;
      while(ARM_DWT_CYCCNT < next_mark);
      *FastPin<FIRST_PIN>::sport() = m_nWriteMask;
      next_mark = ARM_DWT_CYCCNT + m_offsets[0];
     a90:	6b71      	ldr	r1, [r6, #52]	; 0x34

      uint32_t out = (b2.bg[3][i] << 24) | (b2.bg[2][i] << 16) | (b2.bg[1][i] << 8) | b2.bg[0][i];

      out = ((~out) & m_nWriteMask);
     a92:	ea24 0405 	bic.w	r4, r4, r5
     a96:	6bb5      	ldr	r5, [r6, #56]	; 0x38
    int x = 0;
    for(uint32_t i = 8; i > 0;) {
      i--;
      while(ARM_DWT_CYCCNT < next_mark);
      *FastPin<FIRST_PIN>::sport() = m_nWriteMask;
      next_mark = ARM_DWT_CYCCNT + m_offsets[0];
     a98:	eb07 0b01 	add.w	fp, r7, r1

      uint32_t out = (b2.bg[3][i] << 24) | (b2.bg[2][i] << 16) | (b2.bg[1][i] << 8) | b2.bg[0][i];

      out = ((~out) & m_nWriteMask);
      while((next_mark - ARM_DWT_CYCCNT) > m_offsets[1]);
     a9c:	f8da 1000 	ldr.w	r1, [sl]
     aa0:	ebc1 010b 	rsb	r1, r1, fp
     aa4:	42a9      	cmp	r1, r5
     aa6:	d8f9      	bhi.n	a9c <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x30c>
      *FastPin<FIRST_PIN>::cport() = out;
     aa8:	4910      	ldr	r1, [pc, #64]	; (aec <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x35c>)
     aaa:	600c      	str	r4, [r1, #0]

      out = m_nWriteMask;
     aac:	6af5      	ldr	r5, [r6, #44]	; 0x2c
     aae:	6bf4      	ldr	r4, [r6, #60]	; 0x3c
      while((next_mark - ARM_DWT_CYCCNT) > m_offsets[2]);
     ab0:	f8da 1000 	ldr.w	r1, [sl]
     ab4:	ebc1 010b 	rsb	r1, r1, fp
     ab8:	42a1      	cmp	r1, r4
     aba:	d8f9      	bhi.n	ab0 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x320>
      *FastPin<FIRST_PIN>::cport() = out;
     abc:	490b      	ldr	r1, [pc, #44]	; (aec <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x35c>)
     abe:	600d      	str	r5, [r1, #0]

      // Read and store up to two bytes
      if (x < m_nActualLanes) {
     ac0:	f896 4028 	ldrb.w	r4, [r6, #40]	; 0x28
     ac4:	4284      	cmp	r4, r0
     ac6:	dd39      	ble.n	b3c <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x3ac>
     ac8:	9901      	ldr	r1, [sp, #4]
        b.bytes[m_bitOffsets[x]] = pixels.template loadAndScale<PX>(pixels,x,d,scale);
     aca:	1835      	adds	r5, r6, r0
     acc:	eb01 0780 	add.w	r7, r1, r0, lsl #2
     ad0:	7e2d      	ldrb	r5, [r5, #24]
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }
     ad2:	69b9      	ldr	r1, [r7, #24]
     ad4:	f81c 1001 	ldrb.w	r1, [ip, r1]

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & , uint8_t b, uint8_t d) { return b ? qadd8(b,d) : 0; }
     ad8:	b191      	cbz	r1, b00 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x370>
     ada:	e009      	b.n	af0 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x360>
     adc:	e0001004 	.word	0xe0001004
     ae0:	200122a8 	.word	0x200122a8
     ae4:	08972311 	.word	0x08972311
     ae8:	42000084 	.word	0x42000084
     aec:	42000088 	.word	0x42000088
/// @param j - second byte to add
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
     af0:	4441      	add	r1, r8
    if( t > 255) t = 255;
     af2:	29ff      	cmp	r1, #255	; 0xff
     af4:	bfa8      	it	ge
     af6:	21ff      	movge	r1, #255	; 0xff
     af8:	fb01 f10e 	mul.w	r1, r1, lr
     afc:	f3c1 2107 	ubfx	r1, r1, #8, #8
     b00:	f10d 0958 	add.w	r9, sp, #88	; 0x58
     b04:	444d      	add	r5, r9
        x++;
     b06:	f100 0901 	add.w	r9, r0, #1
        if (x < m_nActualLanes) {
     b0a:	454c      	cmp	r4, r9
      while((next_mark - ARM_DWT_CYCCNT) > m_offsets[2]);
      *FastPin<FIRST_PIN>::cport() = out;

      // Read and store up to two bytes
      if (x < m_nActualLanes) {
        b.bytes[m_bitOffsets[x]] = pixels.template loadAndScale<PX>(pixels,x,d,scale);
     b0c:	f805 1c40 	strb.w	r1, [r5, #-64]
        x++;
        if (x < m_nActualLanes) {
     b10:	f340 82d1 	ble.w	10b6 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x926>
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }
     b14:	69f9      	ldr	r1, [r7, #28]
          b.bytes[m_bitOffsets[x]] = pixels.template loadAndScale<PX>(pixels,x,d,scale);
     b16:	44b1      	add	r9, r6
     b18:	f81c 1001 	ldrb.w	r1, [ip, r1]
     b1c:	f899 4018 	ldrb.w	r4, [r9, #24]

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & , uint8_t b, uint8_t d) { return b ? qadd8(b,d) : 0; }
     b20:	b139      	cbz	r1, b32 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x3a2>
/// @param j - second byte to add
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
     b22:	4441      	add	r1, r8
    if( t > 255) t = 255;
     b24:	29ff      	cmp	r1, #255	; 0xff
     b26:	bfa8      	it	ge
     b28:	21ff      	movge	r1, #255	; 0xff
     b2a:	fb0e f101 	mul.w	r1, lr, r1
     b2e:	f3c1 2107 	ubfx	r1, r1, #8, #8
     b32:	ad16      	add	r5, sp, #88	; 0x58
          x++;
     b34:	3002      	adds	r0, #2
      // Read and store up to two bytes
      if (x < m_nActualLanes) {
        b.bytes[m_bitOffsets[x]] = pixels.template loadAndScale<PX>(pixels,x,d,scale);
        x++;
        if (x < m_nActualLanes) {
          b.bytes[m_bitOffsets[x]] = pixels.template loadAndScale<PX>(pixels,x,d,scale);
     b36:	442c      	add	r4, r5
     b38:	f804 1c40 	strb.w	r1, [r4, #-64]
     b3c:	3a01      	subs	r2, #1

    register uint8_t d = pixels.template getd<PX>(pixels);
    register uint8_t scale = pixels.template getscale<PX>(pixels);

    int x = 0;
    for(uint32_t i = 8; i > 0;) {
     b3e:	2b00      	cmp	r3, #0
     b40:	d18f      	bne.n	a62 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x2d2>
/// data into LSB for a faster write (the code using this data can happily walk the array backwards)
__attribute__((always_inline)) inline void transpose8x1(unsigned char *A, unsigned char *B) {
  uint32_t x, y, t;

  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
     b42:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     b44:	f64c 44cc 	movw	r4, #52428	; 0xcccc
__attribute__((always_inline)) inline void transpose8x1(unsigned char *A, unsigned char *B) {
  uint32_t x, y, t;

  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);
     b48:	990d      	ldr	r1, [sp, #52]	; 0x34
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     b4a:	ea82 1cd2 	eor.w	ip, r2, r2, lsr #7
__attribute__((always_inline)) inline void transpose8x1(unsigned char *A, unsigned char *B) {
  uint32_t x, y, t;

  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);
     b4e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     b50:	ea81 10d1 	eor.w	r0, r1, r1, lsr #7
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     b54:	46a6      	mov	lr, r4

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     b56:	f00c 1caa 	and.w	ip, ip, #11141290	; 0xaa00aa
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     b5a:	ea85 18d5 	eor.w	r8, r5, r5, lsr #7
     b5e:	f000 10aa 	and.w	r0, r0, #11141290	; 0xaa00aa
/// data into LSB for a faster write (the code using this data can happily walk the array backwards)
__attribute__((always_inline)) inline void transpose8x1(unsigned char *A, unsigned char *B) {
  uint32_t x, y, t;

  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
     b62:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     b64:	ea82 020c 	eor.w	r2, r2, ip
/// data into LSB for a faster write (the code using this data can happily walk the array backwards)
__attribute__((always_inline)) inline void transpose8x1(unsigned char *A, unsigned char *B) {
  uint32_t x, y, t;

  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
     b68:	f8dd 9020 	ldr.w	r9, [sp, #32]
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     b6c:	4041      	eors	r1, r0
     b6e:	9602      	str	r6, [sp, #8]
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     b70:	ea82 12cc 	eor.w	r2, r2, ip, lsl #7
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     b74:	9e07      	ldr	r6, [sp, #28]
     b76:	ea81 10c0 	eor.w	r0, r1, r0, lsl #7
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     b7a:	ea82 3192 	eor.w	r1, r2, r2, lsr #14
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     b7e:	ea87 1cd7 	eor.w	ip, r7, r7, lsr #7
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     b82:	400c      	ands	r4, r1
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     b84:	ea80 3190 	eor.w	r1, r0, r0, lsr #14

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     b88:	f00c 1caa 	and.w	ip, ip, #11141290	; 0xaa00aa
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     b8c:	ea01 0e0e 	and.w	lr, r1, lr

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     b90:	ea82 0104 	eor.w	r1, r2, r4
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     b94:	f008 12aa 	and.w	r2, r8, #11141290	; 0xaa00aa
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     b98:	ea87 070c 	eor.w	r7, r7, ip
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     b9c:	ea81 3484 	eor.w	r4, r1, r4, lsl #14
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     ba0:	ea80 000e 	eor.w	r0, r0, lr
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     ba4:	ea85 0102 	eor.w	r1, r5, r2
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     ba8:	ea87 17cc 	eor.w	r7, r7, ip, lsl #7
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     bac:	ea80 3e8e 	eor.w	lr, r0, lr, lsl #14
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
     bb0:	f004 380f 	and.w	r8, r4, #252645135	; 0xf0f0f0f
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     bb4:	ea81 12c2 	eor.w	r2, r1, r2, lsl #7
     bb8:	9909      	ldr	r1, [sp, #36]	; 0x24
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     bba:	0924      	lsrs	r4, r4, #4
  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
     bbc:	f00e 3cf0 	and.w	ip, lr, #4042322160	; 0xf0f0f0f0
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     bc0:	ea81 11d1 	eor.w	r1, r1, r1, lsr #7
     bc4:	9809      	ldr	r0, [sp, #36]	; 0x24
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     bc6:	f004 340f 	and.w	r4, r4, #252645135	; 0xf0f0f0f
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     bca:	ea89 15d9 	eor.w	r5, r9, r9, lsr #7
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     bce:	f001 11aa 	and.w	r1, r1, #11141290	; 0xaa00aa
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     bd2:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  *((uint32_t*)(B+4)) = x;
     bd6:	ea44 0c0c 	orr.w	ip, r4, ip
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     bda:	9c06      	ldr	r4, [sp, #24]
     bdc:	f005 15aa 	and.w	r5, r5, #11141290	; 0xaa00aa
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     be0:	f00e 3ef0 	and.w	lr, lr, #4042322160	; 0xf0f0f0f0
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     be4:	4048      	eors	r0, r1
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     be6:	ea84 14d4 	eor.w	r4, r4, r4, lsr #7
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     bea:	ea4e 0808 	orr.w	r8, lr, r8
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     bee:	ea89 0905 	eor.w	r9, r9, r5
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     bf2:	ea87 3e97 	eor.w	lr, r7, r7, lsr #14
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     bf6:	f004 14aa 	and.w	r4, r4, #11141290	; 0xaa00aa
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     bfa:	ea80 10c1 	eor.w	r0, r0, r1, lsl #7
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     bfe:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     c02:	9906      	ldr	r1, [sp, #24]
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     c04:	f64c 4ccc 	movw	ip, #52428	; 0xcccc
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     c08:	ea89 15c5 	eor.w	r5, r9, r5, lsl #7
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     c0c:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     c10:	ea81 0904 	eor.w	r9, r1, r4
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     c14:	ea0e 0c0c 	and.w	ip, lr, ip
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     c18:	9907      	ldr	r1, [sp, #28]
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     c1a:	ea82 3e92 	eor.w	lr, r2, r2, lsr #14

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     c1e:	ea89 14c4 	eor.w	r4, r9, r4, lsl #7
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     c22:	ea87 090c 	eor.w	r9, r7, ip
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     c26:	ea81 11d1 	eor.w	r1, r1, r1, lsr #7
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     c2a:	f64c 47cc 	movw	r7, #52428	; 0xcccc

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     c2e:	ea89 3c8c 	eor.w	ip, r9, ip, lsl #14
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     c32:	ea0e 0707 	and.w	r7, lr, r7
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     c36:	f001 11aa 	and.w	r1, r1, #11141290	; 0xaa00aa
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     c3a:	ea85 3995 	eor.w	r9, r5, r5, lsr #14
     c3e:	f64c 4ecc 	movw	lr, #52428	; 0xcccc
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     c42:	ea86 0801 	eor.w	r8, r6, r1
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     c46:	407a      	eors	r2, r7

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     c48:	ea09 0e0e 	and.w	lr, r9, lr

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
     c4c:	f00c 360f 	and.w	r6, ip, #252645135	; 0xf0f0f0f
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     c50:	ea88 11c1 	eor.w	r1, r8, r1, lsl #7
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     c54:	ea82 3287 	eor.w	r2, r2, r7, lsl #14

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     c58:	ea85 050e 	eor.w	r5, r5, lr
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     c5c:	ea4f 181c 	mov.w	r8, ip, lsr #4
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     c60:	f64c 47cc 	movw	r7, #52428	; 0xcccc
  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
     c64:	f002 3cf0 	and.w	ip, r2, #4042322160	; 0xf0f0f0f0
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     c68:	ea85 358e 	eor.w	r5, r5, lr, lsl #14
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     c6c:	f008 380f 	and.w	r8, r8, #252645135	; 0xf0f0f0f
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     c70:	ea84 3e94 	eor.w	lr, r4, r4, lsr #14
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     c74:	ea80 3990 	eor.w	r9, r0, r0, lsr #14
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     c78:	ea48 0c0c 	orr.w	ip, r8, ip
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     c7c:	f64c 48cc 	movw	r8, #52428	; 0xcccc
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     c80:	ea09 0707 	and.w	r7, r9, r7
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     c84:	0112      	lsls	r2, r2, #4
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     c86:	ea0e 0808 	and.w	r8, lr, r8
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     c8a:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     c8e:	ea81 3e91 	eor.w	lr, r1, r1, lsr #14
     c92:	f64c 4ccc 	movw	ip, #52428	; 0xcccc
     c96:	4078      	eors	r0, r7
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     c98:	f002 32f0 	and.w	r2, r2, #4042322160	; 0xf0f0f0f0
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     c9c:	ea0e 0c0c 	and.w	ip, lr, ip

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     ca0:	ea84 0408 	eor.w	r4, r4, r8
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     ca4:	ea80 3087 	eor.w	r0, r0, r7, lsl #14
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     ca8:	4332      	orrs	r2, r6
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     caa:	ea81 070c 	eor.w	r7, r1, ip

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     cae:	ea84 3488 	eor.w	r4, r4, r8, lsl #14
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     cb2:	9212      	str	r2, [sp, #72]	; 0x48
     cb4:	0102      	lsls	r2, r0, #4
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     cb6:	ea87 3c8c 	eor.w	ip, r7, ip, lsl #14
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane, uint8_t scale) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane, scale); }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getd(PixelController & pc) { return pc.d[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getscale(PixelController & pc) { return pc.mScale.raw[RO(SLOT)]; }
     cba:	9e01      	ldr	r6, [sp, #4]
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     cbc:	f002 3ef0 	and.w	lr, r2, #4042322160	; 0xf0f0f0f0
  *((uint32_t*)(B+4)) = x;
     cc0:	0929      	lsrs	r1, r5, #4
     cc2:	0927      	lsrs	r7, r4, #4
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
     cc4:	f005 350f 	and.w	r5, r5, #252645135	; 0xf0f0f0f
  x = t;

  *((uint32_t*)B) = y;
     cc8:	ea4f 120c 	mov.w	r2, ip, lsl #4
  *((uint32_t*)(B+4)) = x;
     ccc:	f001 310f 	and.w	r1, r1, #252645135	; 0xf0f0f0f
  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
     cd0:	f00c 3cf0 	and.w	ip, ip, #4042322160	; 0xf0f0f0f0
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     cd4:	ea4e 0505 	orr.w	r5, lr, r5
     cd8:	f002 32f0 	and.w	r2, r2, #4042322160	; 0xf0f0f0f0
     cdc:	f896 e014 	ldrb.w	lr, [r6, #20]
  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
     ce0:	f000 30f0 	and.w	r0, r0, #4042322160	; 0xf0f0f0f0
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
     ce4:	f004 340f 	and.w	r4, r4, #252645135	; 0xf0f0f0f
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     ce8:	f007 370f 	and.w	r7, r7, #252645135	; 0xf0f0f0f

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane, uint8_t scale) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane, scale); }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getd(PixelController & pc) { return pc.d[RO(SLOT)]; }
     cec:	f896 800e 	ldrb.w	r8, [r6, #14]
     cf0:	4308      	orrs	r0, r1
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     cf2:	4314      	orrs	r4, r2
  *((uint32_t*)(B+4)) = x;
     cf4:	ea47 070c 	orr.w	r7, r7, ip
     cf8:	aa0e      	add	r2, sp, #56	; 0x38
     cfa:	f10e 0e01 	add.w	lr, lr, #1
     cfe:	2108      	movs	r1, #8
     d00:	f8dd c00c 	ldr.w	ip, [sp, #12]
     d04:	9e02      	ldr	r6, [sp, #8]
     d06:	9011      	str	r0, [sp, #68]	; 0x44
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     d08:	9510      	str	r5, [sp, #64]	; 0x40
  *((uint32_t*)(B+4)) = x;
     d0a:	970f      	str	r7, [sp, #60]	; 0x3c
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     d0c:	940e      	str	r4, [sp, #56]	; 0x38
      i--;
     d0e:	3901      	subs	r1, #1
      while(ARM_DWT_CYCCNT < next_mark);
     d10:	f8da 0000 	ldr.w	r0, [sl]
     d14:	4558      	cmp	r0, fp
     d16:	d3fb      	bcc.n	d10 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x580>
      *FastPin<FIRST_PIN>::sport() = m_nWriteMask;
     d18:	6af0      	ldr	r0, [r6, #44]	; 0x2c
     d1a:	4ccb      	ldr	r4, [pc, #812]	; (1048 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x8b8>)
     d1c:	6020      	str	r0, [r4, #0]
      next_mark = ARM_DWT_CYCCNT + m_offsets[0];

      uint32_t out = (b2.bg[3][i] << 24) | (b2.bg[2][i] << 16) | (b2.bg[1][i] << 8) | b2.bg[0][i];

      out = ((~out) & m_nWriteMask);
     d1e:	7dd0      	ldrb	r0, [r2, #23]
     d20:	7fd5      	ldrb	r5, [r2, #31]
     d22:	0400      	lsls	r0, r0, #16
     d24:	79d7      	ldrb	r7, [r2, #7]
     d26:	f892 900f 	ldrb.w	r9, [r2, #15]
     d2a:	ea40 6505 	orr.w	r5, r0, r5, lsl #24
     d2e:	6af4      	ldr	r4, [r6, #44]	; 0x2c
     d30:	ea45 0007 	orr.w	r0, r5, r7
    int x = 0;
    for(uint32_t i = 8; i > 0;) {
      i--;
      while(ARM_DWT_CYCCNT < next_mark);
      *FastPin<FIRST_PIN>::sport() = m_nWriteMask;
      next_mark = ARM_DWT_CYCCNT + m_offsets[0];
     d34:	4dc5      	ldr	r5, [pc, #788]	; (104c <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x8bc>)
     d36:	682f      	ldr	r7, [r5, #0]

      uint32_t out = (b2.bg[3][i] << 24) | (b2.bg[2][i] << 16) | (b2.bg[1][i] << 8) | b2.bg[0][i];

      out = ((~out) & m_nWriteMask);
     d38:	ea40 2509 	orr.w	r5, r0, r9, lsl #8
    int x = 0;
    for(uint32_t i = 8; i > 0;) {
      i--;
      while(ARM_DWT_CYCCNT < next_mark);
      *FastPin<FIRST_PIN>::sport() = m_nWriteMask;
      next_mark = ARM_DWT_CYCCNT + m_offsets[0];
     d3c:	6b70      	ldr	r0, [r6, #52]	; 0x34

      uint32_t out = (b2.bg[3][i] << 24) | (b2.bg[2][i] << 16) | (b2.bg[1][i] << 8) | b2.bg[0][i];

      out = ((~out) & m_nWriteMask);
     d3e:	ea24 0405 	bic.w	r4, r4, r5
     d42:	6bb5      	ldr	r5, [r6, #56]	; 0x38
    int x = 0;
    for(uint32_t i = 8; i > 0;) {
      i--;
      while(ARM_DWT_CYCCNT < next_mark);
      *FastPin<FIRST_PIN>::sport() = m_nWriteMask;
      next_mark = ARM_DWT_CYCCNT + m_offsets[0];
     d44:	eb07 0b00 	add.w	fp, r7, r0

      uint32_t out = (b2.bg[3][i] << 24) | (b2.bg[2][i] << 16) | (b2.bg[1][i] << 8) | b2.bg[0][i];

      out = ((~out) & m_nWriteMask);
      while((next_mark - ARM_DWT_CYCCNT) > m_offsets[1]);
     d48:	f8da 0000 	ldr.w	r0, [sl]
     d4c:	ebc0 000b 	rsb	r0, r0, fp
     d50:	42a8      	cmp	r0, r5
     d52:	d8f9      	bhi.n	d48 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x5b8>
      *FastPin<FIRST_PIN>::cport() = out;
     d54:	48be      	ldr	r0, [pc, #760]	; (1050 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x8c0>)
     d56:	6004      	str	r4, [r0, #0]

      out = m_nWriteMask;
     d58:	6af5      	ldr	r5, [r6, #44]	; 0x2c
     d5a:	6bf4      	ldr	r4, [r6, #60]	; 0x3c
      while((next_mark - ARM_DWT_CYCCNT) > m_offsets[2]);
     d5c:	f8da 0000 	ldr.w	r0, [sl]
     d60:	ebc0 000b 	rsb	r0, r0, fp
     d64:	42a0      	cmp	r0, r4
     d66:	d8f9      	bhi.n	d5c <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x5cc>
      *FastPin<FIRST_PIN>::cport() = out;
     d68:	48b9      	ldr	r0, [pc, #740]	; (1050 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x8c0>)
     d6a:	6005      	str	r5, [r0, #0]

      // Read and store up to two bytes
      if (x < m_nActualLanes) {
     d6c:	f896 4028 	ldrb.w	r4, [r6, #40]	; 0x28
     d70:	429c      	cmp	r4, r3
     d72:	dd2e      	ble.n	dd2 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x642>
     d74:	9801      	ldr	r0, [sp, #4]
        b.bytes[m_bitOffsets[x]] = pixels.template loadAndScale<PX>(pixels,x,d,scale);
     d76:	18f5      	adds	r5, r6, r3
     d78:	eb00 0783 	add.w	r7, r0, r3, lsl #2
     d7c:	7e2d      	ldrb	r5, [r5, #24]
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }
     d7e:	69b8      	ldr	r0, [r7, #24]
     d80:	4460      	add	r0, ip
     d82:	7880      	ldrb	r0, [r0, #2]

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & , uint8_t b, uint8_t d) { return b ? qadd8(b,d) : 0; }
     d84:	b138      	cbz	r0, d96 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x606>
/// @param j - second byte to add
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
     d86:	4440      	add	r0, r8
    if( t > 255) t = 255;
     d88:	28ff      	cmp	r0, #255	; 0xff
     d8a:	bfa8      	it	ge
     d8c:	20ff      	movge	r0, #255	; 0xff
     d8e:	fb00 f00e 	mul.w	r0, r0, lr
     d92:	f3c0 2007 	ubfx	r0, r0, #8, #8
     d96:	f10d 0958 	add.w	r9, sp, #88	; 0x58
     d9a:	444d      	add	r5, r9
        x++;
     d9c:	f103 0901 	add.w	r9, r3, #1
        if (x < m_nActualLanes) {
     da0:	454c      	cmp	r4, r9
      while((next_mark - ARM_DWT_CYCCNT) > m_offsets[2]);
      *FastPin<FIRST_PIN>::cport() = out;

      // Read and store up to two bytes
      if (x < m_nActualLanes) {
        b.bytes[m_bitOffsets[x]] = pixels.template loadAndScale<PX>(pixels,x,d,scale);
     da2:	f805 0c40 	strb.w	r0, [r5, #-64]
        x++;
        if (x < m_nActualLanes) {
     da6:	f340 8188 	ble.w	10ba <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x92a>
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }
     daa:	69f8      	ldr	r0, [r7, #28]
          b.bytes[m_bitOffsets[x]] = pixels.template loadAndScale<PX>(pixels,x,d,scale);
     dac:	44b1      	add	r9, r6
     dae:	4460      	add	r0, ip
     db0:	f899 4018 	ldrb.w	r4, [r9, #24]
     db4:	7880      	ldrb	r0, [r0, #2]

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & , uint8_t b, uint8_t d) { return b ? qadd8(b,d) : 0; }
     db6:	b138      	cbz	r0, dc8 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x638>
/// @param j - second byte to add
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
     db8:	4440      	add	r0, r8
    if( t > 255) t = 255;
     dba:	28ff      	cmp	r0, #255	; 0xff
     dbc:	bfa8      	it	ge
     dbe:	20ff      	movge	r0, #255	; 0xff
     dc0:	fb0e f000 	mul.w	r0, lr, r0
     dc4:	f3c0 2007 	ubfx	r0, r0, #8, #8
     dc8:	ad16      	add	r5, sp, #88	; 0x58
          x++;
     dca:	3302      	adds	r3, #2
      // Read and store up to two bytes
      if (x < m_nActualLanes) {
        b.bytes[m_bitOffsets[x]] = pixels.template loadAndScale<PX>(pixels,x,d,scale);
        x++;
        if (x < m_nActualLanes) {
          b.bytes[m_bitOffsets[x]] = pixels.template loadAndScale<PX>(pixels,x,d,scale);
     dcc:	442c      	add	r4, r5
     dce:	f804 0c40 	strb.w	r0, [r4, #-64]
     dd2:	3a01      	subs	r2, #1

    register uint8_t d = pixels.template getd<PX>(pixels);
    register uint8_t scale = pixels.template getscale<PX>(pixels);

    int x = 0;
    for(uint32_t i = 8; i > 0;) {
     dd4:	2900      	cmp	r1, #0
     dd6:	d19a      	bne.n	d0e <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x57e>
/// data into LSB for a faster write (the code using this data can happily walk the array backwards)
__attribute__((always_inline)) inline void transpose8x1(unsigned char *A, unsigned char *B) {
  uint32_t x, y, t;

  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
     dd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     dda:	f64c 44cc 	movw	r4, #52428	; 0xcccc
__attribute__((always_inline)) inline void transpose8x1(unsigned char *A, unsigned char *B) {
  uint32_t x, y, t;

  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);
     dde:	980d      	ldr	r0, [sp, #52]	; 0x34
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     de0:	ea83 12d3 	eor.w	r2, r3, r3, lsr #7
__attribute__((always_inline)) inline void transpose8x1(unsigned char *A, unsigned char *B) {
  uint32_t x, y, t;

  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);
     de4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     de6:	ea80 1cd0 	eor.w	ip, r0, r0, lsr #7
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     dea:	46a6      	mov	lr, r4

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     dec:	f002 12aa 	and.w	r2, r2, #11141290	; 0xaa00aa
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     df0:	ea85 18d5 	eor.w	r8, r5, r5, lsr #7
     df4:	f00c 1caa 	and.w	ip, ip, #11141290	; 0xaa00aa
/// data into LSB for a faster write (the code using this data can happily walk the array backwards)
__attribute__((always_inline)) inline void transpose8x1(unsigned char *A, unsigned char *B) {
  uint32_t x, y, t;

  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
     df8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     dfa:	4053      	eors	r3, r2
/// data into LSB for a faster write (the code using this data can happily walk the array backwards)
__attribute__((always_inline)) inline void transpose8x1(unsigned char *A, unsigned char *B) {
  uint32_t x, y, t;

  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
     dfc:	f8dd 9020 	ldr.w	r9, [sp, #32]
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     e00:	ea80 000c 	eor.w	r0, r0, ip
     e04:	9602      	str	r6, [sp, #8]
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     e06:	ea83 12c2 	eor.w	r2, r3, r2, lsl #7
    transpose8x1(b.bg[0], b2.bg[0]);

    register uint8_t d = pixels.template getd<PX>(pixels);
    register uint8_t scale = pixels.template getscale<PX>(pixels);

    int x = 0;
     e0a:	460b      	mov	r3, r1
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     e0c:	ea80 10cc 	eor.w	r0, r0, ip, lsl #7
     e10:	9e07      	ldr	r6, [sp, #28]
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     e12:	ea82 3192 	eor.w	r1, r2, r2, lsr #14
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     e16:	ea87 1cd7 	eor.w	ip, r7, r7, lsr #7
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     e1a:	400c      	ands	r4, r1
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     e1c:	ea80 3190 	eor.w	r1, r0, r0, lsr #14

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     e20:	f00c 1caa 	and.w	ip, ip, #11141290	; 0xaa00aa
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     e24:	ea01 0e0e 	and.w	lr, r1, lr

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     e28:	ea82 0104 	eor.w	r1, r2, r4
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     e2c:	f008 12aa 	and.w	r2, r8, #11141290	; 0xaa00aa
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     e30:	ea87 070c 	eor.w	r7, r7, ip
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     e34:	ea81 3484 	eor.w	r4, r1, r4, lsl #14
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     e38:	ea80 000e 	eor.w	r0, r0, lr
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     e3c:	ea85 0102 	eor.w	r1, r5, r2
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     e40:	ea87 17cc 	eor.w	r7, r7, ip, lsl #7
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     e44:	ea80 3e8e 	eor.w	lr, r0, lr, lsl #14
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
     e48:	f004 380f 	and.w	r8, r4, #252645135	; 0xf0f0f0f
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     e4c:	ea81 12c2 	eor.w	r2, r1, r2, lsl #7
     e50:	9909      	ldr	r1, [sp, #36]	; 0x24
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     e52:	0924      	lsrs	r4, r4, #4
  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
     e54:	f00e 3cf0 	and.w	ip, lr, #4042322160	; 0xf0f0f0f0
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     e58:	ea81 11d1 	eor.w	r1, r1, r1, lsr #7
     e5c:	9809      	ldr	r0, [sp, #36]	; 0x24
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     e5e:	f004 340f 	and.w	r4, r4, #252645135	; 0xf0f0f0f
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     e62:	ea89 15d9 	eor.w	r5, r9, r9, lsr #7
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     e66:	f001 11aa 	and.w	r1, r1, #11141290	; 0xaa00aa
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     e6a:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  *((uint32_t*)(B+4)) = x;
     e6e:	ea44 0c0c 	orr.w	ip, r4, ip
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     e72:	9c06      	ldr	r4, [sp, #24]
     e74:	f005 15aa 	and.w	r5, r5, #11141290	; 0xaa00aa
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     e78:	f00e 3ef0 	and.w	lr, lr, #4042322160	; 0xf0f0f0f0
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     e7c:	4048      	eors	r0, r1
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     e7e:	ea84 14d4 	eor.w	r4, r4, r4, lsr #7
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     e82:	ea4e 0808 	orr.w	r8, lr, r8
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     e86:	ea89 0905 	eor.w	r9, r9, r5
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     e8a:	ea87 3e97 	eor.w	lr, r7, r7, lsr #14
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     e8e:	f004 14aa 	and.w	r4, r4, #11141290	; 0xaa00aa
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     e92:	ea80 10c1 	eor.w	r0, r0, r1, lsl #7
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     e96:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     e9a:	9906      	ldr	r1, [sp, #24]
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     e9c:	f64c 4ccc 	movw	ip, #52428	; 0xcccc
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     ea0:	ea89 15c5 	eor.w	r5, r9, r5, lsl #7
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     ea4:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     ea8:	ea81 0904 	eor.w	r9, r1, r4
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     eac:	ea0e 0c0c 	and.w	ip, lr, ip
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     eb0:	9907      	ldr	r1, [sp, #28]
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     eb2:	ea82 3e92 	eor.w	lr, r2, r2, lsr #14

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     eb6:	ea89 14c4 	eor.w	r4, r9, r4, lsl #7
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     eba:	ea87 090c 	eor.w	r9, r7, ip
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     ebe:	ea81 11d1 	eor.w	r1, r1, r1, lsr #7
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     ec2:	f64c 47cc 	movw	r7, #52428	; 0xcccc

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     ec6:	ea89 3c8c 	eor.w	ip, r9, ip, lsl #14
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     eca:	ea0e 0707 	and.w	r7, lr, r7
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     ece:	f001 11aa 	and.w	r1, r1, #11141290	; 0xaa00aa
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     ed2:	ea85 3995 	eor.w	r9, r5, r5, lsr #14
     ed6:	f64c 4ecc 	movw	lr, #52428	; 0xcccc
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     eda:	ea86 0801 	eor.w	r8, r6, r1
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     ede:	407a      	eors	r2, r7

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     ee0:	ea09 0e0e 	and.w	lr, r9, lr

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
     ee4:	f00c 360f 	and.w	r6, ip, #252645135	; 0xf0f0f0f
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     ee8:	ea88 11c1 	eor.w	r1, r8, r1, lsl #7
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     eec:	ea82 3287 	eor.w	r2, r2, r7, lsl #14

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     ef0:	ea85 050e 	eor.w	r5, r5, lr
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     ef4:	ea4f 181c 	mov.w	r8, ip, lsr #4
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     ef8:	f64c 47cc 	movw	r7, #52428	; 0xcccc
  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
     efc:	f002 3cf0 	and.w	ip, r2, #4042322160	; 0xf0f0f0f0
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     f00:	ea80 3990 	eor.w	r9, r0, r0, lsr #14
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     f04:	f008 380f 	and.w	r8, r8, #252645135	; 0xf0f0f0f
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     f08:	ea85 358e 	eor.w	r5, r5, lr, lsl #14
     f0c:	ea84 3e94 	eor.w	lr, r4, r4, lsr #14
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     f10:	ea09 0707 	and.w	r7, r9, r7
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     f14:	ea48 0c0c 	orr.w	ip, r8, ip
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     f18:	f64c 48cc 	movw	r8, #52428	; 0xcccc
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     f1c:	0112      	lsls	r2, r2, #4
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     f1e:	4078      	eors	r0, r7

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     f20:	ea0e 0808 	and.w	r8, lr, r8
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     f24:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     f28:	ea81 3e91 	eor.w	lr, r1, r1, lsr #14
     f2c:	f64c 4ccc 	movw	ip, #52428	; 0xcccc
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     f30:	f002 32f0 	and.w	r2, r2, #4042322160	; 0xf0f0f0f0
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     f34:	ea80 3087 	eor.w	r0, r0, r7, lsl #14
     f38:	ea0e 0c0c 	and.w	ip, lr, ip

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     f3c:	ea84 0408 	eor.w	r4, r4, r8
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     f40:	4332      	orrs	r2, r6
  *((uint32_t*)(B+4)) = x;
     f42:	092f      	lsrs	r7, r5, #4
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     f44:	ea81 010c 	eor.w	r1, r1, ip

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     f48:	ea84 3488 	eor.w	r4, r4, r8, lsl #14
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     f4c:	9212      	str	r2, [sp, #72]	; 0x48
     f4e:	0102      	lsls	r2, r0, #4
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     f50:	ea81 3c8c 	eor.w	ip, r1, ip, lsl #14

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     f54:	9e01      	ldr	r6, [sp, #4]
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     f56:	f002 3ef0 	and.w	lr, r2, #4042322160	; 0xf0f0f0f0
  *((uint32_t*)(B+4)) = x;
     f5a:	f007 370f 	and.w	r7, r7, #252645135	; 0xf0f0f0f
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     f5e:	ea4f 120c 	mov.w	r2, ip, lsl #4
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
     f62:	f005 350f 	and.w	r5, r5, #252645135	; 0xf0f0f0f
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     f66:	0921      	lsrs	r1, r4, #4
  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
     f68:	f000 30f0 	and.w	r0, r0, #4042322160	; 0xf0f0f0f0
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     f6c:	f002 32f0 	and.w	r2, r2, #4042322160	; 0xf0f0f0f0
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
     f70:	f004 340f 	and.w	r4, r4, #252645135	; 0xf0f0f0f
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     f74:	4338      	orrs	r0, r7
  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
     f76:	f00c 3cf0 	and.w	ip, ip, #4042322160	; 0xf0f0f0f0
     f7a:	68b7      	ldr	r7, [r6, #8]
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     f7c:	ea4e 0505 	orr.w	r5, lr, r5
     f80:	4314      	orrs	r4, r2
     f82:	f996 e015 	ldrsb.w	lr, [r6, #21]
     f86:	4632      	mov	r2, r6
  *((uint32_t*)(B+4)) = x;
     f88:	f001 310f 	and.w	r1, r1, #252645135	; 0xf0f0f0f
     f8c:	9e03      	ldr	r6, [sp, #12]
     f8e:	3f01      	subs	r7, #1
     f90:	ea41 010c 	orr.w	r1, r1, ip
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane, uint8_t scale) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane, scale); }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getd(PixelController & pc) { return pc.d[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getscale(PixelController & pc) { return pc.mScale.raw[RO(SLOT)]; }
     f94:	f892 c013 	ldrb.w	ip, [r2, #19]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     f98:	4476      	add	r6, lr
     f9a:	9011      	str	r0, [sp, #68]	; 0x44
     f9c:	910f      	str	r1, [sp, #60]	; 0x3c
     f9e:	a90e      	add	r1, sp, #56	; 0x38
     fa0:	46b6      	mov	lr, r6
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane, uint8_t scale) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane, scale); }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getd(PixelController & pc) { return pc.d[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getscale(PixelController & pc) { return pc.mScale.raw[RO(SLOT)]; }
     fa2:	4616      	mov	r6, r2
     fa4:	f10c 0c01 	add.w	ip, ip, #1
     fa8:	460a      	mov	r2, r1

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     faa:	f8c6 e000 	str.w	lr, [r6]
    for(uint32_t i = 8; i > 0;) {
     fae:	2008      	movs	r0, #8
     fb0:	60b7      	str	r7, [r6, #8]

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane, uint8_t scale) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane, scale); }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getd(PixelController & pc) { return pc.d[RO(SLOT)]; }
     fb2:	f896 900d 	ldrb.w	r9, [r6, #13]
     fb6:	9e02      	ldr	r6, [sp, #8]
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     fb8:	9510      	str	r5, [sp, #64]	; 0x40
     fba:	940e      	str	r4, [sp, #56]	; 0x38
      i--;
     fbc:	3801      	subs	r0, #1
      while(ARM_DWT_CYCCNT < next_mark);
     fbe:	f8da 1000 	ldr.w	r1, [sl]
     fc2:	4559      	cmp	r1, fp
     fc4:	d3fb      	bcc.n	fbe <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x82e>
      *FastPin<FIRST_PIN>::sport() = m_nWriteMask;
     fc6:	6af1      	ldr	r1, [r6, #44]	; 0x2c
     fc8:	4c1f      	ldr	r4, [pc, #124]	; (1048 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x8b8>)
     fca:	6021      	str	r1, [r4, #0]
      next_mark = ARM_DWT_CYCCNT + m_offsets[0];

      uint32_t out = (b2.bg[3][i] << 24) | (b2.bg[2][i] << 16) | (b2.bg[1][i] << 8) | b2.bg[0][i];

      out = ((~out) & m_nWriteMask);
     fcc:	7dd1      	ldrb	r1, [r2, #23]
     fce:	7fd5      	ldrb	r5, [r2, #31]
     fd0:	0409      	lsls	r1, r1, #16
     fd2:	79d7      	ldrb	r7, [r2, #7]
     fd4:	f892 800f 	ldrb.w	r8, [r2, #15]
     fd8:	ea41 6505 	orr.w	r5, r1, r5, lsl #24
     fdc:	6af4      	ldr	r4, [r6, #44]	; 0x2c
     fde:	ea45 0107 	orr.w	r1, r5, r7
    int x = 0;
    for(uint32_t i = 8; i > 0;) {
      i--;
      while(ARM_DWT_CYCCNT < next_mark);
      *FastPin<FIRST_PIN>::sport() = m_nWriteMask;
      next_mark = ARM_DWT_CYCCNT + m_offsets[0];
     fe2:	4d1a      	ldr	r5, [pc, #104]	; (104c <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x8bc>)
     fe4:	682f      	ldr	r7, [r5, #0]

      uint32_t out = (b2.bg[3][i] << 24) | (b2.bg[2][i] << 16) | (b2.bg[1][i] << 8) | b2.bg[0][i];

      out = ((~out) & m_nWriteMask);
     fe6:	ea41 2508 	orr.w	r5, r1, r8, lsl #8
    int x = 0;
    for(uint32_t i = 8; i > 0;) {
      i--;
      while(ARM_DWT_CYCCNT < next_mark);
      *FastPin<FIRST_PIN>::sport() = m_nWriteMask;
      next_mark = ARM_DWT_CYCCNT + m_offsets[0];
     fea:	6b71      	ldr	r1, [r6, #52]	; 0x34

      uint32_t out = (b2.bg[3][i] << 24) | (b2.bg[2][i] << 16) | (b2.bg[1][i] << 8) | b2.bg[0][i];

      out = ((~out) & m_nWriteMask);
     fec:	ea24 0405 	bic.w	r4, r4, r5
     ff0:	6bb5      	ldr	r5, [r6, #56]	; 0x38
    int x = 0;
    for(uint32_t i = 8; i > 0;) {
      i--;
      while(ARM_DWT_CYCCNT < next_mark);
      *FastPin<FIRST_PIN>::sport() = m_nWriteMask;
      next_mark = ARM_DWT_CYCCNT + m_offsets[0];
     ff2:	eb07 0b01 	add.w	fp, r7, r1

      uint32_t out = (b2.bg[3][i] << 24) | (b2.bg[2][i] << 16) | (b2.bg[1][i] << 8) | b2.bg[0][i];

      out = ((~out) & m_nWriteMask);
      while((next_mark - ARM_DWT_CYCCNT) > m_offsets[1]);
     ff6:	f8da 1000 	ldr.w	r1, [sl]
     ffa:	ebc1 010b 	rsb	r1, r1, fp
     ffe:	42a9      	cmp	r1, r5
    1000:	d8f9      	bhi.n	ff6 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x866>
      *FastPin<FIRST_PIN>::cport() = out;
    1002:	4913      	ldr	r1, [pc, #76]	; (1050 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x8c0>)
    1004:	600c      	str	r4, [r1, #0]

      out = m_nWriteMask;
    1006:	6af5      	ldr	r5, [r6, #44]	; 0x2c
    1008:	6bf4      	ldr	r4, [r6, #60]	; 0x3c
      while((next_mark - ARM_DWT_CYCCNT) > m_offsets[2]);
    100a:	f8da 1000 	ldr.w	r1, [sl]
    100e:	ebc1 010b 	rsb	r1, r1, fp
    1012:	42a1      	cmp	r1, r4
    1014:	d8f9      	bhi.n	100a <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x87a>
      *FastPin<FIRST_PIN>::cport() = out;
    1016:	490e      	ldr	r1, [pc, #56]	; (1050 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x8c0>)
    1018:	600d      	str	r5, [r1, #0]

      // Read and store up to two bytes
      if (x < m_nActualLanes) {
    101a:	f896 4028 	ldrb.w	r4, [r6, #40]	; 0x28
    101e:	429c      	cmp	r4, r3
    1020:	dd35      	ble.n	108e <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x8fe>
    1022:	9901      	ldr	r1, [sp, #4]
        b.bytes[m_bitOffsets[x]] = pixels.template loadAndScale<PX>(pixels,x,d,scale);
    1024:	18f5      	adds	r5, r6, r3
    1026:	eb01 0783 	add.w	r7, r1, r3, lsl #2
    102a:	7e2d      	ldrb	r5, [r5, #24]
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }
    102c:	69b9      	ldr	r1, [r7, #24]
    102e:	4471      	add	r1, lr
    1030:	7849      	ldrb	r1, [r1, #1]

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & , uint8_t b, uint8_t d) { return b ? qadd8(b,d) : 0; }
    1032:	b179      	cbz	r1, 1054 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x8c4>
/// @param j - second byte to add
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
    1034:	4449      	add	r1, r9
    if( t > 255) t = 255;
    1036:	29ff      	cmp	r1, #255	; 0xff
    1038:	bfa8      	it	ge
    103a:	21ff      	movge	r1, #255	; 0xff
    103c:	fb01 f10c 	mul.w	r1, r1, ip
    1040:	f3c1 2107 	ubfx	r1, r1, #8, #8
    1044:	e006      	b.n	1054 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x8c4>
    1046:	bf00      	nop
    1048:	42000084 	.word	0x42000084
    104c:	e0001004 	.word	0xe0001004
    1050:	42000088 	.word	0x42000088
    1054:	f10d 0858 	add.w	r8, sp, #88	; 0x58
    1058:	4445      	add	r5, r8
        x++;
    105a:	f103 0801 	add.w	r8, r3, #1
        if (x < m_nActualLanes) {
    105e:	4544      	cmp	r4, r8
      while((next_mark - ARM_DWT_CYCCNT) > m_offsets[2]);
      *FastPin<FIRST_PIN>::cport() = out;

      // Read and store up to two bytes
      if (x < m_nActualLanes) {
        b.bytes[m_bitOffsets[x]] = pixels.template loadAndScale<PX>(pixels,x,d,scale);
    1060:	f805 1c40 	strb.w	r1, [r5, #-64]
        x++;
        if (x < m_nActualLanes) {
    1064:	dd25      	ble.n	10b2 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x922>
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }
    1066:	69f9      	ldr	r1, [r7, #28]
          b.bytes[m_bitOffsets[x]] = pixels.template loadAndScale<PX>(pixels,x,d,scale);
    1068:	44b0      	add	r8, r6
    106a:	4471      	add	r1, lr
    106c:	f898 4018 	ldrb.w	r4, [r8, #24]
    1070:	7849      	ldrb	r1, [r1, #1]

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & , uint8_t b, uint8_t d) { return b ? qadd8(b,d) : 0; }
    1072:	b139      	cbz	r1, 1084 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x8f4>
/// @param j - second byte to add
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
    1074:	4449      	add	r1, r9
    if( t > 255) t = 255;
    1076:	29ff      	cmp	r1, #255	; 0xff
    1078:	bfa8      	it	ge
    107a:	21ff      	movge	r1, #255	; 0xff
    107c:	fb0c f101 	mul.w	r1, ip, r1
    1080:	f3c1 2107 	ubfx	r1, r1, #8, #8
    1084:	ad16      	add	r5, sp, #88	; 0x58
          x++;
    1086:	3302      	adds	r3, #2
      // Read and store up to two bytes
      if (x < m_nActualLanes) {
        b.bytes[m_bitOffsets[x]] = pixels.template loadAndScale<PX>(pixels,x,d,scale);
        x++;
        if (x < m_nActualLanes) {
          b.bytes[m_bitOffsets[x]] = pixels.template loadAndScale<PX>(pixels,x,d,scale);
    1088:	442c      	add	r4, r5
    108a:	f804 1c40 	strb.w	r1, [r4, #-64]
    108e:	3a01      	subs	r2, #1

    register uint8_t d = pixels.template getd<PX>(pixels);
    register uint8_t scale = pixels.template getscale<PX>(pixels);

    int x = 0;
    for(uint32_t i = 8; i > 0;) {
    1090:	2800      	cmp	r0, #0
    1092:	d193      	bne.n	fbc <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x82c>
    1094:	9602      	str	r6, [sp, #8]

			// Write third byte
			writeBits<8+XTRA0,0>(next_mark, b0, allpixels);

			#if (FASTLED_ALLOW_INTERRUPTS == 1)
			sei();
    1096:	b662      	cpsie	i
    m_offsets[2] = _FASTLED_NS_TO_DWT(T3);
    uint32_t wait_off = _FASTLED_NS_TO_DWT((WAIT_TIME-INTERRUPT_THRESHOLD));

    uint32_t next_mark = ARM_DWT_CYCCNT + m_offsets[0];

    while(allpixels.has(1)) {
    1098:	9b01      	ldr	r3, [sp, #4]
    109a:	689b      	ldr	r3, [r3, #8]
    109c:	2b00      	cmp	r3, #0
    109e:	f73f abe2 	bgt.w	866 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0xd6>
			#if (FASTLED_ALLOW_INTERRUPTS == 1)
			sei();
			#endif
    }

    sei();
    10a2:	b662      	cpsie	i

    return ARM_DWT_CYCCNT - start;
    10a4:	4b09      	ldr	r3, [pc, #36]	; (10cc <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x93c>)
    10a6:	6818      	ldr	r0, [r3, #0]
    10a8:	9b05      	ldr	r3, [sp, #20]
    10aa:	1ac0      	subs	r0, r0, r3
  }
    10ac:	b017      	add	sp, #92	; 0x5c
    10ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

      // Read and store up to two bytes
      if (x < m_nActualLanes) {
        b.bytes[m_bitOffsets[x]] = pixels.template loadAndScale<PX>(pixels,x,d,scale);
        x++;
        if (x < m_nActualLanes) {
    10b2:	4643      	mov	r3, r8
    10b4:	e7eb      	b.n	108e <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x8fe>
    10b6:	4648      	mov	r0, r9
    10b8:	e540      	b.n	b3c <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x3ac>
    10ba:	464b      	mov	r3, r9
    10bc:	e689      	b.n	dd2 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x642>
      allpixels.stepDithering();
      #if (FASTLED_ALLOW_INTERRUPTS == 1)
			cli();
			// if interrupts took longer than 45µs, punt on the current frame
			if(ARM_DWT_CYCCNT > next_mark) {
				if((ARM_DWT_CYCCNT-next_mark) > wait_off) { sei(); return ARM_DWT_CYCCNT - start; }
    10be:	b662      	cpsie	i
    10c0:	6810      	ldr	r0, [r2, #0]
    10c2:	9b05      	ldr	r3, [sp, #20]
    10c4:	1ac0      	subs	r0, r0, r3
    }

    sei();

    return ARM_DWT_CYCCNT - start;
  }
    10c6:	b017      	add	sp, #92	; 0x5c
    10c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    10cc:	e0001004 	.word	0xe0001004

000010d0 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 1ul>&)>:
    m_nOutBlocks = (m_nHighBit + 8)/8;

  }


  virtual void showPixels(PixelController<RGB_ORDER, LANES, __FL_T4_MASK> & pixels) {
    10d0:	b538      	push	{r3, r4, r5, lr}
    10d2:	4604      	mov	r4, r0
    10d4:	460d      	mov	r5, r1

	void wait() {
		uint16_t diff;
		do {
			diff = (micros() & 0xFFFF) - mLastMicros;
    10d6:	f001 f839 	bl	214c <micros>
public:
	CMinWait() { mLastMicros = 0; }

	void wait() {
		uint16_t diff;
		do {
    10da:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
    10de:	1ac0      	subs	r0, r0, r3
    10e0:	b280      	uxth	r0, r0
    10e2:	2831      	cmp	r0, #49	; 0x31
    10e4:	d9f7      	bls.n	10d6 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 1ul>&)+0x6>
		uint32_t clocks = showRGBInternal(pixels);
		// Adjust the timer
		long microsTaken = CLKS_TO_MICROS(clocks);
		MS_COUNTER += (1 + (microsTaken / 1000));
		#else
      showRGBInternal(pixels);
    10e6:	4629      	mov	r1, r5
    10e8:	4620      	mov	r0, r4
    10ea:	f7ff fb51 	bl	790 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)>
			diff = (micros() & 0xFFFF) - mLastMicros;
		} while(diff < WAIT);
	}

	void mark() { mLastMicros = micros() & 0xFFFF; }
    10ee:	f001 f82d 	bl	214c <micros>
    10f2:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40
    10f6:	bd38      	pop	{r3, r4, r5, pc}

000010f8 <CPixelLEDController<(EOrder)66, 1, 1ul>::showColor(CRGB const&, int, CRGB)>:

  /// set all the leds on the controller to a given color
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    10f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    10fa:	4604      	mov	r4, r0
    10fc:	b089      	sub	sp, #36	; 0x24

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    10fe:	785d      	ldrb	r5, [r3, #1]
        b = rhs.b;
    1100:	7898      	ldrb	r0, [r3, #2]
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
    1102:	9101      	str	r1, [sp, #4]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1104:	7819      	ldrb	r1, [r3, #0]
    1106:	7ca3      	ldrb	r3, [r4, #18]
    1108:	9202      	str	r2, [sp, #8]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
    110a:	2b01      	cmp	r3, #1
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
    110c:	9203      	str	r2, [sp, #12]
    110e:	f88d 1016 	strb.w	r1, [sp, #22]
        g = rhs.g;
    1112:	f88d 5017 	strb.w	r5, [sp, #23]
        b = rhs.b;
    1116:	f88d 0018 	strb.w	r0, [sp, #24]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
    111a:	d027      	beq.n	116c <CPixelLEDController<(EOrder)66, 1, 1ul>::showColor(CRGB const&, int, CRGB)+0x74>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
    111c:	2300      	movs	r3, #0
    111e:	f88d 3015 	strb.w	r3, [sp, #21]
    1122:	f88d 3014 	strb.w	r3, [sp, #20]
    1126:	f88d 3013 	strb.w	r3, [sp, #19]
    112a:	f88d 3012 	strb.w	r3, [sp, #18]
    112e:	f88d 3011 	strb.w	r3, [sp, #17]
    1132:	f88d 3010 	strb.w	r3, [sp, #16]
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
    1136:	6822      	ldr	r2, [r4, #0]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
    1138:	2300      	movs	r3, #0
    113a:	492a      	ldr	r1, [pc, #168]	; (11e4 <CPixelLEDController<(EOrder)66, 1, 1ul>::showColor(CRGB const&, int, CRGB)+0xec>)
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
    113c:	6992      	ldr	r2, [r2, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
    113e:	f88d 3019 	strb.w	r3, [sp, #25]
    1142:	428a      	cmp	r2, r1
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
    1144:	9307      	str	r3, [sp, #28]
    1146:	d148      	bne.n	11da <CPixelLEDController<(EOrder)66, 1, 1ul>::showColor(CRGB const&, int, CRGB)+0xe2>
	CMinWait() { mLastMicros = 0; }

	void wait() {
		uint16_t diff;
		do {
			diff = (micros() & 0xFFFF) - mLastMicros;
    1148:	f001 f800 	bl	214c <micros>
public:
	CMinWait() { mLastMicros = 0; }

	void wait() {
		uint16_t diff;
		do {
    114c:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
    1150:	1ac0      	subs	r0, r0, r3
    1152:	b280      	uxth	r0, r0
    1154:	2831      	cmp	r0, #49	; 0x31
    1156:	d9f7      	bls.n	1148 <CPixelLEDController<(EOrder)66, 1, 1ul>::showColor(CRGB const&, int, CRGB)+0x50>
    1158:	a901      	add	r1, sp, #4
    115a:	4620      	mov	r0, r4
    115c:	f7ff fb18 	bl	790 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)>
			diff = (micros() & 0xFFFF) - mLastMicros;
		} while(diff < WAIT);
	}

	void mark() { mLastMicros = micros() & 0xFFFF; }
    1160:	f000 fff4 	bl	214c <micros>
    1164:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
  }
    1168:	b009      	add	sp, #36	; 0x24
    116a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
    116c:	4a1e      	ldr	r2, [pc, #120]	; (11e8 <CPixelLEDController<(EOrder)66, 1, 1ul>::showColor(CRGB const&, int, CRGB)+0xf0>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
    116e:	7813      	ldrb	r3, [r2, #0]
    1170:	3301      	adds	r3, #1
    1172:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
    1176:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
    117a:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
    117c:	bf14      	ite	ne
    117e:	2280      	movne	r2, #128	; 0x80
    1180:	2200      	moveq	r2, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
    1182:	0798      	lsls	r0, r3, #30
    1184:	d502      	bpl.n	118c <CPixelLEDController<(EOrder)66, 1, 1ul>::showColor(CRGB const&, int, CRGB)+0x94>
    1186:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    118a:	b2d2      	uxtb	r2, r2
                if(R & 0x04) { Q |= 0x20; }
    118c:	075b      	lsls	r3, r3, #29
    118e:	f10d 0716 	add.w	r7, sp, #22
    1192:	f10d 0313 	add.w	r3, sp, #19
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
    1196:	f44f 7e80 	mov.w	lr, #256	; 0x100

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
                if(R & 0x04) { Q |= 0x20; }
    119a:	bf48      	it	mi
    119c:	f042 0220 	orrmi.w	r2, r2, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
    11a0:	3210      	adds	r2, #16
    11a2:	b2d2      	uxtb	r2, r2
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
    11a4:	b1a9      	cbz	r1, 11d2 <CPixelLEDController<(EOrder)66, 1, 1ul>::showColor(CRGB const&, int, CRGB)+0xda>
    11a6:	fb9e f1f1 	sdiv	r1, lr, r1
    11aa:	b2c9      	uxtb	r1, r1
    11ac:	1c48      	adds	r0, r1, #1
    11ae:	b2c0      	uxtb	r0, r0
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    11b0:	fb00 2502 	mla	r5, r0, r2, r2
    11b4:	7018      	strb	r0, [r3, #0]
    11b6:	122d      	asrs	r5, r5, #8
    11b8:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
    11ba:	b105      	cbz	r5, 11be <CPixelLEDController<(EOrder)66, 1, 1ul>::showColor(CRGB const&, int, CRGB)+0xc6>
    11bc:	3e01      	subs	r6, #1
    11be:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
    11c2:	b100      	cbz	r0, 11c6 <CPixelLEDController<(EOrder)66, 1, 1ul>::showColor(CRGB const&, int, CRGB)+0xce>
    11c4:	7019      	strb	r1, [r3, #0]
    11c6:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
    11c8:	42bb      	cmp	r3, r7
    11ca:	d0b4      	beq.n	1136 <CPixelLEDController<(EOrder)66, 1, 1ul>::showColor(CRGB const&, int, CRGB)+0x3e>
    11cc:	78d9      	ldrb	r1, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
    11ce:	2900      	cmp	r1, #0
    11d0:	d1e9      	bne.n	11a6 <CPixelLEDController<(EOrder)66, 1, 1ul>::showColor(CRGB const&, int, CRGB)+0xae>
    11d2:	7019      	strb	r1, [r3, #0]
                    d[i] = scale8(Q, e[i]);
    11d4:	f803 1c03 	strb.w	r1, [r3, #-3]
    11d8:	e7f5      	b.n	11c6 <CPixelLEDController<(EOrder)66, 1, 1ul>::showColor(CRGB const&, int, CRGB)+0xce>
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
    11da:	4620      	mov	r0, r4
    11dc:	a901      	add	r1, sp, #4
    11de:	4790      	blx	r2
  }
    11e0:	b009      	add	sp, #36	; 0x24
    11e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    11e4:	000010d1 	.word	0x000010d1
    11e8:	2001230c 	.word	0x2001230c

000011ec <CPixelLEDController<(EOrder)66, 1, 1ul>::show(CRGB const*, int, CRGB)>:

/// write the passed in rgb data out to the leds managed by this controller
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    11ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    11ee:	4604      	mov	r4, r0
    11f0:	b089      	sub	sp, #36	; 0x24

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    11f2:	785d      	ldrb	r5, [r3, #1]
        b = rhs.b;
    11f4:	7898      	ldrb	r0, [r3, #2]
            mData += skip;
            mAdvance = (advance) ? 3+skip : 0;
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
    11f6:	9101      	str	r1, [sp, #4]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    11f8:	7819      	ldrb	r1, [r3, #0]
    11fa:	7ca3      	ldrb	r3, [r4, #18]
    11fc:	9202      	str	r2, [sp, #8]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
    11fe:	2b01      	cmp	r3, #1
            mData += skip;
            mAdvance = (advance) ? 3+skip : 0;
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
    1200:	9203      	str	r2, [sp, #12]
    1202:	f88d 1016 	strb.w	r1, [sp, #22]
        g = rhs.g;
    1206:	f88d 5017 	strb.w	r5, [sp, #23]
        b = rhs.b;
    120a:	f88d 0018 	strb.w	r0, [sp, #24]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
    120e:	d028      	beq.n	1262 <CPixelLEDController<(EOrder)66, 1, 1ul>::show(CRGB const*, int, CRGB)+0x76>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
    1210:	2300      	movs	r3, #0
    1212:	f88d 3015 	strb.w	r3, [sp, #21]
    1216:	f88d 3014 	strb.w	r3, [sp, #20]
    121a:	f88d 3013 	strb.w	r3, [sp, #19]
    121e:	f88d 3012 	strb.w	r3, [sp, #18]
    1222:	f88d 3011 	strb.w	r3, [sp, #17]
    1226:	f88d 3010 	strb.w	r3, [sp, #16]
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
    122a:	6823      	ldr	r3, [r4, #0]
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
    122c:	2003      	movs	r0, #3
    122e:	4a2b      	ldr	r2, [pc, #172]	; (12dc <CPixelLEDController<(EOrder)66, 1, 1ul>::show(CRGB const*, int, CRGB)+0xf0>)
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
    1230:	2100      	movs	r1, #0
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
    1232:	699b      	ldr	r3, [r3, #24]
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
    1234:	f88d 0019 	strb.w	r0, [sp, #25]
    1238:	4293      	cmp	r3, r2
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
    123a:	9107      	str	r1, [sp, #28]
    123c:	d148      	bne.n	12d0 <CPixelLEDController<(EOrder)66, 1, 1ul>::show(CRGB const*, int, CRGB)+0xe4>
	CMinWait() { mLastMicros = 0; }

	void wait() {
		uint16_t diff;
		do {
			diff = (micros() & 0xFFFF) - mLastMicros;
    123e:	f000 ff85 	bl	214c <micros>
public:
	CMinWait() { mLastMicros = 0; }

	void wait() {
		uint16_t diff;
		do {
    1242:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
    1246:	1ac0      	subs	r0, r0, r3
    1248:	b280      	uxth	r0, r0
    124a:	2831      	cmp	r0, #49	; 0x31
    124c:	d9f7      	bls.n	123e <CPixelLEDController<(EOrder)66, 1, 1ul>::show(CRGB const*, int, CRGB)+0x52>
    124e:	a901      	add	r1, sp, #4
    1250:	4620      	mov	r0, r4
    1252:	f7ff fa9d 	bl	790 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)>
			diff = (micros() & 0xFFFF) - mLastMicros;
		} while(diff < WAIT);
	}

	void mark() { mLastMicros = micros() & 0xFFFF; }
    1256:	f000 ff79 	bl	214c <micros>
    125a:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
  }
    125e:	b009      	add	sp, #36	; 0x24
    1260:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
    1262:	4a1f      	ldr	r2, [pc, #124]	; (12e0 <CPixelLEDController<(EOrder)66, 1, 1ul>::show(CRGB const*, int, CRGB)+0xf4>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
    1264:	7813      	ldrb	r3, [r2, #0]
    1266:	3301      	adds	r3, #1
    1268:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
    126c:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
    1270:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
    1272:	bf14      	ite	ne
    1274:	2280      	movne	r2, #128	; 0x80
    1276:	2200      	moveq	r2, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
    1278:	0798      	lsls	r0, r3, #30
    127a:	d502      	bpl.n	1282 <CPixelLEDController<(EOrder)66, 1, 1ul>::show(CRGB const*, int, CRGB)+0x96>
    127c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    1280:	b2d2      	uxtb	r2, r2
                if(R & 0x04) { Q |= 0x20; }
    1282:	075b      	lsls	r3, r3, #29
    1284:	f10d 0716 	add.w	r7, sp, #22
    1288:	f10d 0313 	add.w	r3, sp, #19
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
    128c:	f44f 7e80 	mov.w	lr, #256	; 0x100

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
                if(R & 0x04) { Q |= 0x20; }
    1290:	bf48      	it	mi
    1292:	f042 0220 	orrmi.w	r2, r2, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
    1296:	3210      	adds	r2, #16
    1298:	b2d2      	uxtb	r2, r2
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
    129a:	b1a9      	cbz	r1, 12c8 <CPixelLEDController<(EOrder)66, 1, 1ul>::show(CRGB const*, int, CRGB)+0xdc>
    129c:	fb9e f1f1 	sdiv	r1, lr, r1
    12a0:	b2c9      	uxtb	r1, r1
    12a2:	1c48      	adds	r0, r1, #1
    12a4:	b2c0      	uxtb	r0, r0
    12a6:	fb00 2502 	mla	r5, r0, r2, r2
    12aa:	7018      	strb	r0, [r3, #0]
    12ac:	122d      	asrs	r5, r5, #8
    12ae:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
    12b0:	b105      	cbz	r5, 12b4 <CPixelLEDController<(EOrder)66, 1, 1ul>::show(CRGB const*, int, CRGB)+0xc8>
    12b2:	3e01      	subs	r6, #1
    12b4:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
    12b8:	b100      	cbz	r0, 12bc <CPixelLEDController<(EOrder)66, 1, 1ul>::show(CRGB const*, int, CRGB)+0xd0>
    12ba:	7019      	strb	r1, [r3, #0]
    12bc:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
    12be:	42bb      	cmp	r3, r7
    12c0:	d0b3      	beq.n	122a <CPixelLEDController<(EOrder)66, 1, 1ul>::show(CRGB const*, int, CRGB)+0x3e>
    12c2:	78d9      	ldrb	r1, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
    12c4:	2900      	cmp	r1, #0
    12c6:	d1e9      	bne.n	129c <CPixelLEDController<(EOrder)66, 1, 1ul>::show(CRGB const*, int, CRGB)+0xb0>
    12c8:	7019      	strb	r1, [r3, #0]
                    d[i] = scale8(Q, e[i]);
    12ca:	f803 1c03 	strb.w	r1, [r3, #-3]
    12ce:	e7f5      	b.n	12bc <CPixelLEDController<(EOrder)66, 1, 1ul>::show(CRGB const*, int, CRGB)+0xd0>
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
    12d0:	4620      	mov	r0, r4
    12d2:	a901      	add	r1, sp, #4
    12d4:	4798      	blx	r3
  }
    12d6:	b009      	add	sp, #36	; 0x24
    12d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    12da:	bf00      	nop
    12dc:	000010d1 	.word	0x000010d1
    12e0:	2001230c 	.word	0x2001230c

000012e4 <CLEDController::clearLeds(int)>:

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
    12e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    12e6:	2300      	movs	r3, #0
    12e8:	b08b      	sub	sp, #44	; 0x2c
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
    12ea:	6805      	ldr	r5, [r0, #0]
    12ec:	4a45      	ldr	r2, [pc, #276]	; (1404 <CLEDController::clearLeds(int)+0x120>)
    12ee:	f88d 3004 	strb.w	r3, [sp, #4]
    12f2:	f88d 3005 	strb.w	r3, [sp, #5]
    12f6:	f88d 3006 	strb.w	r3, [sp, #6]
    12fa:	682e      	ldr	r6, [r5, #0]
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
    12fc:	f88d 3008 	strb.w	r3, [sp, #8]
    1300:	4296      	cmp	r6, r2
    1302:	f88d 3009 	strb.w	r3, [sp, #9]
    1306:	f88d 300a 	strb.w	r3, [sp, #10]
    130a:	d170      	bne.n	13ee <CLEDController::clearLeds(int)+0x10a>
    130c:	4604      	mov	r4, r0
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
    130e:	a801      	add	r0, sp, #4
    1310:	9104      	str	r1, [sp, #16]
    1312:	7ca2      	ldrb	r2, [r4, #18]
    1314:	9105      	str	r1, [sp, #20]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
    1316:	2a01      	cmp	r2, #1
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1318:	f88d 301e 	strb.w	r3, [sp, #30]
        g = rhs.g;
    131c:	f88d 301f 	strb.w	r3, [sp, #31]
        b = rhs.b;
    1320:	f88d 3020 	strb.w	r3, [sp, #32]
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
    1324:	9003      	str	r0, [sp, #12]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
    1326:	d025      	beq.n	1374 <CLEDController::clearLeds(int)+0x90>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
    1328:	f88d 301d 	strb.w	r3, [sp, #29]
    132c:	f88d 301c 	strb.w	r3, [sp, #28]
    1330:	f88d 301b 	strb.w	r3, [sp, #27]
    1334:	f88d 301a 	strb.w	r3, [sp, #26]
    1338:	f88d 3019 	strb.w	r3, [sp, #25]
    133c:	f88d 3018 	strb.w	r3, [sp, #24]
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
    1340:	69aa      	ldr	r2, [r5, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
    1342:	2300      	movs	r3, #0
    1344:	4930      	ldr	r1, [pc, #192]	; (1408 <CLEDController::clearLeds(int)+0x124>)
    1346:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    134a:	428a      	cmp	r2, r1
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
    134c:	9309      	str	r3, [sp, #36]	; 0x24
    134e:	d154      	bne.n	13fa <CLEDController::clearLeds(int)+0x116>
	CMinWait() { mLastMicros = 0; }

	void wait() {
		uint16_t diff;
		do {
			diff = (micros() & 0xFFFF) - mLastMicros;
    1350:	f000 fefc 	bl	214c <micros>
public:
	CMinWait() { mLastMicros = 0; }

	void wait() {
		uint16_t diff;
		do {
    1354:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
    1358:	1ac0      	subs	r0, r0, r3
    135a:	b280      	uxth	r0, r0
    135c:	2831      	cmp	r0, #49	; 0x31
    135e:	d9f7      	bls.n	1350 <CLEDController::clearLeds(int)+0x6c>
    1360:	a903      	add	r1, sp, #12
    1362:	4620      	mov	r0, r4
    1364:	f7ff fa14 	bl	790 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)>
			diff = (micros() & 0xFFFF) - mLastMicros;
		} while(diff < WAIT);
	}

	void mark() { mLastMicros = micros() & 0xFFFF; }
    1368:	f000 fef0 	bl	214c <micros>
    136c:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
    1370:	b00b      	add	sp, #44	; 0x2c
    1372:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
    1374:	4a25      	ldr	r2, [pc, #148]	; (140c <CLEDController::clearLeds(int)+0x128>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
    1376:	7813      	ldrb	r3, [r2, #0]
    1378:	3301      	adds	r3, #1
    137a:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
    137e:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
    1382:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
    1384:	bf14      	ite	ne
    1386:	2180      	movne	r1, #128	; 0x80
    1388:	2100      	moveq	r1, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
    138a:	079a      	lsls	r2, r3, #30
    138c:	d502      	bpl.n	1394 <CLEDController::clearLeds(int)+0xb0>
    138e:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    1392:	b2c9      	uxtb	r1, r1
                if(R & 0x04) { Q |= 0x20; }
    1394:	075b      	lsls	r3, r3, #29
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
    1396:	f04f 0200 	mov.w	r2, #0
    139a:	f10d 031b 	add.w	r3, sp, #27
    139e:	f10d 071e 	add.w	r7, sp, #30

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
                if(R & 0x04) { Q |= 0x20; }
    13a2:	bf48      	it	mi
    13a4:	f041 0120 	orrmi.w	r1, r1, #32
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
    13a8:	f44f 7e80 	mov.w	lr, #256	; 0x100
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
    13ac:	3110      	adds	r1, #16
    13ae:	b2c9      	uxtb	r1, r1
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
    13b0:	b1aa      	cbz	r2, 13de <CLEDController::clearLeds(int)+0xfa>
    13b2:	fb9e f2f2 	sdiv	r2, lr, r2
    13b6:	b2d2      	uxtb	r2, r2
    13b8:	1c50      	adds	r0, r2, #1
    13ba:	b2c0      	uxtb	r0, r0
    13bc:	fb00 1501 	mla	r5, r0, r1, r1
    13c0:	7018      	strb	r0, [r3, #0]
    13c2:	122d      	asrs	r5, r5, #8
    13c4:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
    13c6:	b105      	cbz	r5, 13ca <CLEDController::clearLeds(int)+0xe6>
    13c8:	3e01      	subs	r6, #1
    13ca:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
    13ce:	b100      	cbz	r0, 13d2 <CLEDController::clearLeds(int)+0xee>
    13d0:	701a      	strb	r2, [r3, #0]
    13d2:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
    13d4:	429f      	cmp	r7, r3
    13d6:	d008      	beq.n	13ea <CLEDController::clearLeds(int)+0x106>
    13d8:	78da      	ldrb	r2, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
    13da:	2a00      	cmp	r2, #0
    13dc:	d1e9      	bne.n	13b2 <CLEDController::clearLeds(int)+0xce>
    13de:	701a      	strb	r2, [r3, #0]
    13e0:	3301      	adds	r3, #1
                    d[i] = scale8(Q, e[i]);
    13e2:	f803 2c04 	strb.w	r2, [r3, #-4]
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
    13e6:	429f      	cmp	r7, r3
    13e8:	d1f6      	bne.n	13d8 <CLEDController::clearLeds(int)+0xf4>
    13ea:	6825      	ldr	r5, [r4, #0]
    13ec:	e7a8      	b.n	1340 <CLEDController::clearLeds(int)+0x5c>
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
    13ee:	460a      	mov	r2, r1
    13f0:	ab02      	add	r3, sp, #8
    13f2:	a901      	add	r1, sp, #4
    13f4:	47b0      	blx	r6

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
    13f6:	b00b      	add	sp, #44	; 0x2c
    13f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
    13fa:	4620      	mov	r0, r4
    13fc:	a903      	add	r1, sp, #12
    13fe:	4790      	blx	r2

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
    1400:	b00b      	add	sp, #44	; 0x2c
    1402:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1404:	000010f9 	.word	0x000010f9
    1408:	000010d1 	.word	0x000010d1
    140c:	2001230c 	.word	0x2001230c

00001410 <_GLOBAL__sub_I_ADC0>:
#define ADC_IR_Priority 64 // interrupt priority
#define N_SAMPLES 8192 // number of samples

void readAdc(void);

My_ADC ADC0(0);
    1410:	2100      	movs	r1, #0
    1412:	4801      	ldr	r0, [pc, #4]	; (1418 <_GLOBAL__sub_I_ADC0+0x8>)
    1414:	f000 b802 	b.w	141c <My_ADC::My_ADC(unsigned char)>
    1418:	200224f4 	.word	0x200224f4

0000141c <My_ADC::My_ADC(unsigned char)>:
/* Constructor
*   Point the registers to the correct ADC module
*   Copy the correct channel2sc1a
*   Call init
*/
My_ADC::My_ADC(uint8_t ADC_number) : ADC_num(ADC_number), channel2sc1a(ADC_num ? channel2sc1aADC1 : channel2sc1aADC0),
    141c:	b5f0      	push	{r4, r5, r6, r7, lr}
    141e:	4604      	mov	r4, r0
#ifdef ADC_USE_PDB
	,
	PDB0_CHnC1(ADC_num ? PDB0_CH1C1 : PDB0_CH0C1)
#endif
	,
	XBAR_IN(ADC_num ? XBARA1_IN_QTIMER4_TIMER3 : XBARA1_IN_QTIMER4_TIMER0), XBAR_OUT(ADC_num ? XBARA1_OUT_ADC_ETC_TRIG10 : XBARA1_OUT_ADC_ETC_TRIG00), QTIMER4_INDEX(ADC_num ? 3 : 0), ADC_ETC_TRIGGER_INDEX(ADC_num ? 4 : 0), IRQ_ADC(ADC_num ? IRQ_NUMBER_t::IRQ_ADC2 : IRQ_NUMBER_t::IRQ_ADC1) {
    1420:	7501      	strb	r1, [r0, #20]
    1422:	2900      	cmp	r1, #0
    1424:	d03d      	beq.n	14a2 <My_ADC::My_ADC(unsigned char)+0x86>
    1426:	2600      	movs	r6, #0
    1428:	2344      	movs	r3, #68	; 0x44
    142a:	f100 054c 	add.w	r5, r0, #76	; 0x4c
    142e:	2727      	movs	r7, #39	; 0x27
    1430:	206b      	movs	r0, #107	; 0x6b
    1432:	2103      	movs	r1, #3
    1434:	2204      	movs	r2, #4
    1436:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
    143a:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    143e:	f104 0630 	add.w	r6, r4, #48	; 0x30
    1442:	4b23      	ldr	r3, [pc, #140]	; (14d0 <My_ADC::My_ADC(unsigned char)+0xb4>)
    1444:	6225      	str	r5, [r4, #32]
    1446:	f884 7025 	strb.w	r7, [r4, #37]	; 0x25
    144a:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    144e:	f884 1027 	strb.w	r1, [r4, #39]	; 0x27
    1452:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
    1456:	f8df e080 	ldr.w	lr, [pc, #128]	; 14d8 <My_ADC::My_ADC(unsigned char)+0xbc>

/* Initialize stuff: Set initial ADC settings via corresponding functions.
* 
*/
void My_ADC::analog_init() {
	calibrating = 0;
    145a:	f04f 0c00 	mov.w	ip, #0
#ifdef ADC_USE_PDB
	,
	PDB0_CHnC1(ADC_num ? PDB0_CH1C1 : PDB0_CH0C1)
#endif
	,
	XBAR_IN(ADC_num ? XBARA1_IN_QTIMER4_TIMER3 : XBARA1_IN_QTIMER4_TIMER0), XBAR_OUT(ADC_num ? XBARA1_OUT_ADC_ETC_TRIG10 : XBARA1_OUT_ADC_ETC_TRIG00), QTIMER4_INDEX(ADC_num ? 3 : 0), ADC_ETC_TRIGGER_INDEX(ADC_num ? 4 : 0), IRQ_ADC(ADC_num ? IRQ_NUMBER_t::IRQ_ADC2 : IRQ_NUMBER_t::IRQ_ADC1) {
    145e:	62e3      	str	r3, [r4, #44]	; 0x2c
    1460:	f8de 0000 	ldr.w	r0, [lr]
    1464:	4677      	mov	r7, lr
    1466:	f8de 1004 	ldr.w	r1, [lr, #4]
    146a:	f8de 2008 	ldr.w	r2, [lr, #8]
    146e:	f8de 300c 	ldr.w	r3, [lr, #12]
    1472:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    1474:	f8de 0010 	ldr.w	r0, [lr, #16]
    1478:	f8de 1014 	ldr.w	r1, [lr, #20]
    147c:	f8de 2018 	ldr.w	r2, [lr, #24]
    1480:	c607      	stmia	r6!, {r0, r1, r2}
    1482:	f857 0f1c 	ldr.w	r0, [r7, #28]!
    1486:	6879      	ldr	r1, [r7, #4]
    1488:	68ba      	ldr	r2, [r7, #8]
    148a:	68fb      	ldr	r3, [r7, #12]
    148c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    148e:	6938      	ldr	r0, [r7, #16]
    1490:	6979      	ldr	r1, [r7, #20]
    1492:	69ba      	ldr	r2, [r7, #24]
    1494:	c507      	stmia	r5!, {r0, r1, r2}

/* Initialize stuff: Set initial ADC settings via corresponding functions.
* 
*/
void My_ADC::analog_init() {
	calibrating = 0;
    1496:	f884 c015 	strb.w	ip, [r4, #21]
#endif
	,
	XBAR_IN(ADC_num ? XBARA1_IN_QTIMER4_TIMER3 : XBARA1_IN_QTIMER4_TIMER0), XBAR_OUT(ADC_num ? XBARA1_OUT_ADC_ETC_TRIG10 : XBARA1_OUT_ADC_ETC_TRIG00), QTIMER4_INDEX(ADC_num ? 3 : 0), ADC_ETC_TRIGGER_INDEX(ADC_num ? 4 : 0), IRQ_ADC(ADC_num ? IRQ_NUMBER_t::IRQ_ADC2 : IRQ_NUMBER_t::IRQ_ADC1) {
	// call our init
	analog_init();
}
    149a:	4620      	mov	r0, r4
/* Initialize stuff: Set initial ADC settings via corresponding functions.
* 
*/
void My_ADC::analog_init() {
	calibrating = 0;
	fail_flag = ADC_ERROR::CLEAR; // clear all errors
    149c:	f8a4 c012 	strh.w	ip, [r4, #18]
#endif
	,
	XBAR_IN(ADC_num ? XBARA1_IN_QTIMER4_TIMER3 : XBARA1_IN_QTIMER4_TIMER0), XBAR_OUT(ADC_num ? XBARA1_OUT_ADC_ETC_TRIG10 : XBARA1_OUT_ADC_ETC_TRIG00), QTIMER4_INDEX(ADC_num ? 3 : 0), ADC_ETC_TRIGGER_INDEX(ADC_num ? 4 : 0), IRQ_ADC(ADC_num ? IRQ_NUMBER_t::IRQ_ADC2 : IRQ_NUMBER_t::IRQ_ADC1) {
	// call our init
	analog_init();
}
    14a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
#ifdef ADC_USE_PDB
	,
	PDB0_CHnC1(ADC_num ? PDB0_CH1C1 : PDB0_CH0C1)
#endif
	,
	XBAR_IN(ADC_num ? XBARA1_IN_QTIMER4_TIMER3 : XBARA1_IN_QTIMER4_TIMER0), XBAR_OUT(ADC_num ? XBARA1_OUT_ADC_ETC_TRIG10 : XBARA1_OUT_ADC_ETC_TRIG00), QTIMER4_INDEX(ADC_num ? 3 : 0), ADC_ETC_TRIGGER_INDEX(ADC_num ? 4 : 0), IRQ_ADC(ADC_num ? IRQ_NUMBER_t::IRQ_ADC2 : IRQ_NUMBER_t::IRQ_ADC1) {
    14a2:	f100 0630 	add.w	r6, r0, #48	; 0x30
    14a6:	2724      	movs	r7, #36	; 0x24
    14a8:	2067      	movs	r0, #103	; 0x67
    14aa:	2243      	movs	r2, #67	; 0x43
    14ac:	4b09      	ldr	r3, [pc, #36]	; (14d4 <My_ADC::My_ADC(unsigned char)+0xb8>)
    14ae:	f104 054c 	add.w	r5, r4, #76	; 0x4c
    14b2:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
    14b6:	f884 1027 	strb.w	r1, [r4, #39]	; 0x27
    14ba:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
    14be:	6226      	str	r6, [r4, #32]
    14c0:	f884 7025 	strb.w	r7, [r4, #37]	; 0x25
    14c4:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    14c8:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
    14cc:	e7c3      	b.n	1456 <My_ADC::My_ADC(unsigned char)+0x3a>
    14ce:	bf00      	nop
    14d0:	400c8000 	.word	0x400c8000
    14d4:	400c4000 	.word	0x400c4000
    14d8:	2000008c 	.word	0x2000008c

000014dc <My_ADC::wait_for_cal()>:
*
*/
void My_ADC::wait_for_cal(void) {

	// wait for calibration to finish
	while (atomic::getBitFlag(adc_regs.GC, ADC_GC_CAL)) { // Bit ADC_GC_CAL in register GC cleared when calib. finishes.
    14dc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    14de:	2200      	movs	r2, #0
    }

    template <typename T>
    __attribute__((always_inline)) inline volatile bool getBitFlag(volatile T &reg, T flag)
    {
        return (volatile bool)((reg)&flag) >> (31 - __builtin_clzl(flag));
    14e0:	6c99      	ldr	r1, [r3, #72]	; 0x48
    14e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	}
	if (atomic::getBitFlag(adc_regs.GS, ADC_GS_CALF)) { // calibration failed
		fail_flag |= ADC_ERROR::CALIB; // the user should know and recalibrate manually
	}

	calibrating = 0;
    14e4:	7542      	strb	r2, [r0, #21]
    14e6:	4770      	bx	lr

000014e8 <My_ADC::recalibrate()>:
}

// starts calibration
void My_ADC::calibrate() {

	__disable_irq();
    14e8:	b672      	cpsid	i

	calibrating = 1;
    14ea:	2201      	movs	r2, #1
	atomic::clearBitFlag(adc_regs.GS, ADC_GS_CALF);
    14ec:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
// starts calibration
void My_ADC::calibrate() {

	__disable_irq();

	calibrating = 1;
    14ee:	7542      	strb	r2, [r0, #21]
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    14f0:	b672      	cpsid	i
        reg &= ~flag;
    14f2:	6cca      	ldr	r2, [r1, #76]	; 0x4c
    14f4:	f022 0202 	bic.w	r2, r2, #2
    14f8:	64ca      	str	r2, [r1, #76]	; 0x4c
        __enable_irq();
    14fa:	b662      	cpsie	i
	atomic::clearBitFlag(adc_regs.GS, ADC_GS_CALF);
	atomic::setBitFlag(adc_regs.GC, ADC_GC_CAL);
    14fc:	6ac2      	ldr	r2, [r0, #44]	; 0x2c

#elif defined(__IMXRT1062__) // Teensy 4
    template <typename T>
    __attribute__((always_inline)) inline void setBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    14fe:	b672      	cpsid	i
        reg |= flag;
    1500:	6c93      	ldr	r3, [r2, #72]	; 0x48
    1502:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1506:	6493      	str	r3, [r2, #72]	; 0x48
        __enable_irq();
    1508:	b662      	cpsie	i

	__enable_irq();
    150a:	b662      	cpsie	i
/** Usually it's not necessary to call this function directly, but do it if the "environment" changed
*   significantly since the program was started.
*/
void My_ADC::recalibrate() {
	calibrate();
	wait_for_cal();
    150c:	f7ff bfe6 	b.w	14dc <My_ADC::wait_for_cal()>

00001510 <My_ADC::setReference(ADC_settings::ADC_REFERENCE)>:
*  Use ADC_REF_3V3, ADC_REF_1V2 (not for Teensy LC) or ADC_REF_EXT
*/
void My_ADC::setReference(ADC_REFERENCE type) {
	ADC_REF_SOURCE ref_type = static_cast<ADC_REF_SOURCE>(type); // cast to source type, that is, either internal or default

	if (analog_reference_internal == ref_type) { // don't need to change anything
    1510:	7f43      	ldrb	r3, [r0, #29]
    1512:	428b      	cmp	r3, r1
    1514:	d014      	beq.n	1540 <My_ADC::setReference(ADC_settings::ADC_REFERENCE)+0x30>
		return;
	}

	if (ref_type == ADC_REF_SOURCE::REF_ALT) { // 1.2V ref for Teensy 3.x, 3.3 VDD for Teensy LC
    1516:	2901      	cmp	r1, #1
    1518:	d01c      	beq.n	1554 <My_ADC::setReference(ADC_settings::ADC_REFERENCE)+0x44>
		VREF::start(); // enable VREF if Teensy 3.x
#endif

		analog_reference_internal = ADC_REF_SOURCE::REF_ALT;
	}
	else if (ref_type == ADC_REF_SOURCE::REF_DEFAULT) {   // ext ref for all Teensys, vcc also for Teensy 3.x
    151a:	b191      	cbz	r1, 1542 <My_ADC::setReference(ADC_settings::ADC_REFERENCE)+0x32>
}

// starts calibration
void My_ADC::calibrate() {

	__disable_irq();
    151c:	b672      	cpsid	i

	calibrating = 1;
    151e:	2301      	movs	r3, #1
	atomic::clearBitFlag(adc_regs.GS, ADC_GS_CALF);
    1520:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
// starts calibration
void My_ADC::calibrate() {

	__disable_irq();

	calibrating = 1;
    1522:	7543      	strb	r3, [r0, #21]
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    1524:	b672      	cpsid	i
        reg &= ~flag;
    1526:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
    1528:	f023 0302 	bic.w	r3, r3, #2
    152c:	64d3      	str	r3, [r2, #76]	; 0x4c
        __enable_irq();
    152e:	b662      	cpsie	i
	atomic::clearBitFlag(adc_regs.GS, ADC_GS_CALF);
	atomic::setBitFlag(adc_regs.GC, ADC_GC_CAL);
    1530:	6ac2      	ldr	r2, [r0, #44]	; 0x2c

#elif defined(__IMXRT1062__) // Teensy 4
    template <typename T>
    __attribute__((always_inline)) inline void setBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    1532:	b672      	cpsid	i
        reg |= flag;
    1534:	6c93      	ldr	r3, [r2, #72]	; 0x48
    1536:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    153a:	6493      	str	r3, [r2, #72]	; 0x48
        __enable_irq();
    153c:	b662      	cpsie	i

	__enable_irq();
    153e:	b662      	cpsie	i
    1540:	4770      	bx	lr

#ifdef ADC_USE_INTERNAL_VREF
		VREF::stop(); // disable 1.2V reference source when using the external ref (p. 102, 3.7.1.7)
#endif

		analog_reference_internal = ADC_REF_SOURCE::REF_DEFAULT;
    1542:	7741      	strb	r1, [r0, #29]
		atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_REFSEL(3));
    1544:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    1546:	b672      	cpsid	i
        reg &= ~flag;
    1548:	6c53      	ldr	r3, [r2, #68]	; 0x44
    154a:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
    154e:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
    1550:	b662      	cpsie	i
    1552:	e7e3      	b.n	151c <My_ADC::setReference(ADC_settings::ADC_REFERENCE)+0xc>
// internal reference requested
#ifdef ADC_USE_INTERNAL_VREF
		VREF::start(); // enable VREF if Teensy 3.x
#endif

		analog_reference_internal = ADC_REF_SOURCE::REF_ALT;
    1554:	7741      	strb	r1, [r0, #29]
    1556:	e7e1      	b.n	151c <My_ADC::setReference(ADC_settings::ADC_REFERENCE)+0xc>

00001558 <My_ADC::setResolution(unsigned char)>:
*  If you want something in between (11 bits single-ended for example) select the inmediate higher
*  and shift the result one to the right.
*
*  It doesn't recalibrate
*/
void My_ADC::setResolution(uint8_t bits) {
    1558:	b538      	push	{r3, r4, r5, lr}

	if (analog_res_bits == bits) {
    155a:	7dc3      	ldrb	r3, [r0, #23]
    155c:	428b      	cmp	r3, r1
    155e:	d00a      	beq.n	1576 <My_ADC::setResolution(unsigned char)+0x1e>
		return;
	}

	if (calibrating)
    1560:	7d43      	ldrb	r3, [r0, #21]
    1562:	4604      	mov	r4, r0
    1564:	460d      	mov	r5, r1
    1566:	b93b      	cbnz	r3, 1578 <My_ADC::setResolution(unsigned char)+0x20>
		wait_for_cal();

	// conversion resolution
	// single-ended 8 bits is the same as differential 9 bits, etc.
	if (bits == 8) {
    1568:	2d08      	cmp	r5, #8
    156a:	d009      	beq.n	1580 <My_ADC::setResolution(unsigned char)+0x28>
		atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_MODE(3));
		analog_max_val = 255; // diff mode 9 bits has 1 bit for sign, so max value is the same as single 8 bits
	}
	else if (bits == 10) {
    156c:	2d0a      	cmp	r5, #10
    156e:	d012      	beq.n	1596 <My_ADC::setResolution(unsigned char)+0x3e>
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_MODE(3), ADC_CFG_MODE(1));
		analog_max_val = 1023;
	}
	else if (bits == 12) {
    1570:	2d0c      	cmp	r5, #12
    1572:	d022      	beq.n	15ba <My_ADC::setResolution(unsigned char)+0x62>
	}
	else {
		// error
	}

	analog_res_bits = bits;
    1574:	75e5      	strb	r5, [r4, #23]
    1576:	bd38      	pop	{r3, r4, r5, pc}
	if (analog_res_bits == bits) {
		return;
	}

	if (calibrating)
		wait_for_cal();
    1578:	f7ff ffb0 	bl	14dc <My_ADC::wait_for_cal()>

	// conversion resolution
	// single-ended 8 bits is the same as differential 9 bits, etc.
	if (bits == 8) {
    157c:	2d08      	cmp	r5, #8
    157e:	d1f5      	bne.n	156c <My_ADC::setResolution(unsigned char)+0x14>
		atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_MODE(3));
    1580:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    1582:	b672      	cpsid	i
        reg &= ~flag;
    1584:	6c53      	ldr	r3, [r2, #68]	; 0x44
    1586:	f023 030c 	bic.w	r3, r3, #12
    158a:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
    158c:	b662      	cpsie	i
		analog_max_val = 255; // diff mode 9 bits has 1 bit for sign, so max value is the same as single 8 bits
    158e:	23ff      	movs	r3, #255	; 0xff
	}
	else {
		// error
	}

	analog_res_bits = bits;
    1590:	75e5      	strb	r5, [r4, #23]

	// conversion resolution
	// single-ended 8 bits is the same as differential 9 bits, etc.
	if (bits == 8) {
		atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_MODE(3));
		analog_max_val = 255; // diff mode 9 bits has 1 bit for sign, so max value is the same as single 8 bits
    1592:	61a3      	str	r3, [r4, #24]
    1594:	e7ef      	b.n	1576 <My_ADC::setResolution(unsigned char)+0x1e>
	}
	else if (bits == 10) {
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_MODE(3), ADC_CFG_MODE(1));
    1596:	6ae3      	ldr	r3, [r4, #44]	; 0x2c

#elif defined(__IMXRT1062__) // Teensy 4
    template <typename T>
    __attribute__((always_inline)) inline void setBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    1598:	b672      	cpsid	i
        reg |= flag;
    159a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    159c:	f042 0204 	orr.w	r2, r2, #4
    15a0:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
    15a2:	b662      	cpsie	i
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    15a4:	b672      	cpsid	i
        reg &= ~flag;
    15a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    15a8:	f022 0208 	bic.w	r2, r2, #8
    15ac:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
    15ae:	b662      	cpsie	i
		analog_max_val = 1023;
    15b0:	f240 33ff 	movw	r3, #1023	; 0x3ff
	}
	else {
		// error
	}

	analog_res_bits = bits;
    15b4:	75e5      	strb	r5, [r4, #23]
		atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_MODE(3));
		analog_max_val = 255; // diff mode 9 bits has 1 bit for sign, so max value is the same as single 8 bits
	}
	else if (bits == 10) {
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_MODE(3), ADC_CFG_MODE(1));
		analog_max_val = 1023;
    15b6:	61a3      	str	r3, [r4, #24]
    15b8:	e7dd      	b.n	1576 <My_ADC::setResolution(unsigned char)+0x1e>
	}
	else if (bits == 12) {
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_MODE(3), ADC_CFG_MODE(2));
    15ba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    15bc:	b672      	cpsid	i
        reg &= ~flag;
    15be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    15c0:	f022 0204 	bic.w	r2, r2, #4
    15c4:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
    15c6:	b662      	cpsie	i

#elif defined(__IMXRT1062__) // Teensy 4
    template <typename T>
    __attribute__((always_inline)) inline void setBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    15c8:	b672      	cpsid	i
        reg |= flag;
    15ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    15cc:	f042 0208 	orr.w	r2, r2, #8
    15d0:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
    15d2:	b662      	cpsie	i
		analog_max_val = 4095;
    15d4:	f640 73ff 	movw	r3, #4095	; 0xfff
	}
	else {
		// error
	}

	analog_res_bits = bits;
    15d8:	75e5      	strb	r5, [r4, #23]
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_MODE(3), ADC_CFG_MODE(1));
		analog_max_val = 1023;
	}
	else if (bits == 12) {
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_MODE(3), ADC_CFG_MODE(2));
		analog_max_val = 4095;
    15da:	61a3      	str	r3, [r4, #24]
    15dc:	e7cb      	b.n	1576 <My_ADC::setResolution(unsigned char)+0x1e>
    15de:	bf00      	nop

000015e0 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)>:
* HIGH_SPEED adds +6 ADCK.
* VERY_HIGH_SPEED is the highest possible sampling speed (0 ADCK added).
*/
void My_ADC::setConversionSpeed(ADC_CONVERSION_SPEED speed) {

	if (speed == conversion_speed) { // no change
    15e0:	7f83      	ldrb	r3, [r0, #30]
    15e2:	428b      	cmp	r3, r1
* LOW_SPEED adds +16 ADCK.
* MED_SPEED adds +10 ADCK.
* HIGH_SPEED adds +6 ADCK.
* VERY_HIGH_SPEED is the highest possible sampling speed (0 ADCK added).
*/
void My_ADC::setConversionSpeed(ADC_CONVERSION_SPEED speed) {
    15e4:	b470      	push	{r4, r5, r6}

	if (speed == conversion_speed) { // no change
    15e6:	d00d      	beq.n	1604 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x24>
	//if (calibrating) wait_for_cal();

	bool is_adack = false;
	uint32_t ADC_CFG1_speed = 0; // store the clock and divisor (set to 0 to avoid warnings)

	switch (speed) {
    15e8:	2904      	cmp	r1, #4
    15ea:	d806      	bhi.n	15fa <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x1a>
    15ec:	e8df f011 	tbh	[pc, r1, lsl #1]
    15f0:	007a002b 	.word	0x007a002b
    15f4:	00c500a0 	.word	0x00c500a0
    15f8:	000c      	.short	0x000c
        return static_cast<ADC_ERROR>(static_cast<uint16_t>(lhs) & static_cast<uint16_t>(rhs));
    }
    //! |= operator for ADC_ERRORs, it changes the left hand side ADC_ERROR. @internal
    inline ADC_ERROR operator|=(volatile ADC_ERROR &lhs, ADC_ERROR rhs)
    {
        return lhs = static_cast<ADC_ERROR>(static_cast<uint16_t>(lhs) | static_cast<uint16_t>(rhs));
    15fa:	8a43      	ldrh	r3, [r0, #18]
    15fc:	b29b      	uxth	r3, r3
    15fe:	f043 0301 	orr.w	r3, r3, #1
    1602:	8243      	strh	r3, [r0, #18]
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADICLK(3), ADC_CFG1_speed & ADC_CFG_ADICLK(3)); // bus or bus/2
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADIV(3), ADC_CFG1_speed & ADC_CFG_ADIV(3));     // divisor for the clock source
	}

	conversion_speed = speed;
}
    1604:	bc70      	pop	{r4, r5, r6}
    1606:	4770      	bx	lr
	case ADC_CONVERSION_SPEED::ADACK_10:
		atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADHSC);
		is_adack = true;
		break;
	case ADC_CONVERSION_SPEED::ADACK_20:
		atomic::setBitFlag(adc_regs.CFG, ADC_CFG_ADHSC);
    1608:	6ac2      	ldr	r2, [r0, #44]	; 0x2c

#elif defined(__IMXRT1062__) // Teensy 4
    template <typename T>
    __attribute__((always_inline)) inline void setBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    160a:	b672      	cpsid	i
        reg |= flag;
    160c:	6c53      	ldr	r3, [r2, #68]	; 0x44
    160e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    1612:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
    1614:	b662      	cpsie	i
		return;
	}

	if (is_adack) {
		// async clock source, independent of the bus clock
		atomic::setBitFlag(adc_regs.CFG, ADC_CFG_ADICLK(3)); // select ADACK as clock source
    1616:	6ac2      	ldr	r2, [r0, #44]	; 0x2c

#elif defined(__IMXRT1062__) // Teensy 4
    template <typename T>
    __attribute__((always_inline)) inline void setBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    1618:	b672      	cpsid	i
        reg |= flag;
    161a:	6c53      	ldr	r3, [r2, #68]	; 0x44
    161c:	f043 0303 	orr.w	r3, r3, #3
    1620:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
    1622:	b662      	cpsie	i
		atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADIV(3)); // select no dividers
    1624:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    1626:	b672      	cpsid	i
        reg &= ~flag;
    1628:	6c53      	ldr	r3, [r2, #68]	; 0x44
    162a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    162e:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
    1630:	b662      	cpsie	i
		atomic::setBitFlag(adc_regs.GC, ADC_GC_ADACKEN);
    1632:	6ac2      	ldr	r2, [r0, #44]	; 0x2c

#elif defined(__IMXRT1062__) // Teensy 4
    template <typename T>
    __attribute__((always_inline)) inline void setBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    1634:	b672      	cpsid	i
        reg |= flag;
    1636:	6c93      	ldr	r3, [r2, #72]	; 0x48
    1638:	f043 0301 	orr.w	r3, r3, #1
    163c:	6493      	str	r3, [r2, #72]	; 0x48
        __enable_irq();
    163e:	b662      	cpsie	i
		atomic::clearBitFlag(adc_regs.GC, ADC_GC_ADACKEN);                                          // disable async
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADICLK(3), ADC_CFG1_speed & ADC_CFG_ADICLK(3)); // bus or bus/2
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADIV(3), ADC_CFG1_speed & ADC_CFG_ADIV(3));     // divisor for the clock source
	}

	conversion_speed = speed;
    1640:	7781      	strb	r1, [r0, #30]
}
    1642:	bc70      	pop	{r4, r5, r6}
    1644:	4770      	bx	lr
	uint32_t ADC_CFG1_speed = 0; // store the clock and divisor (set to 0 to avoid warnings)

	switch (speed) {
		// normal bus clock
	case ADC_CONVERSION_SPEED::LOW_SPEED:
		atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADHSC);
    1646:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    1648:	b672      	cpsid	i
        reg &= ~flag;
    164a:	6c53      	ldr	r3, [r2, #68]	; 0x44
    164c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    1650:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
    1652:	b662      	cpsie	i
		atomic::setBitFlag(adc_regs.CFG, ADC_CFG_ADLPC);
    1654:	6ac2      	ldr	r2, [r0, #44]	; 0x2c

#elif defined(__IMXRT1062__) // Teensy 4
    template <typename T>
    __attribute__((always_inline)) inline void setBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    1656:	b672      	cpsid	i
        reg |= flag;
    1658:	6c53      	ldr	r3, [r2, #68]	; 0x44
    165a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    165e:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
    1660:	b662      	cpsie	i
		// ADC_CFG1_speed = ADC_CFG1_LOW_SPEED;
		ADC_CFG1_speed = get_CFG_LOW_SPEED(ADC_F_BUS);
    1662:	4b69      	ldr	r3, [pc, #420]	; (1808 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x228>)
    }

    //! ADC_CFG1_LOW_SPEED is the lowest freq for 16 bits @internal
    constexpr uint32_t get_CFG_LOW_SPEED(uint32_t f_adc_clock)
    {
        if (f_adc_clock / 16 >= ADC_MIN_FREQ_16BITS)
    1664:	4a69      	ldr	r2, [pc, #420]	; (180c <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x22c>)
    1666:	681b      	ldr	r3, [r3, #0]
    1668:	4293      	cmp	r3, r2
    166a:	f200 80b0 	bhi.w	17ce <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x1ee>
        {
            return (ADC_LIB_CFG1_ADIV(3) + ADC_LIB_CFG1_ADICLK(1));
        }
        else if (f_adc_clock / 8 >= ADC_MIN_FREQ_16BITS)
    166e:	f1a2 72f4 	sub.w	r2, r2, #31981568	; 0x1e80000
    1672:	f5a2 4290 	sub.w	r2, r2, #18432	; 0x4800
    1676:	4293      	cmp	r3, r2
    1678:	d87b      	bhi.n	1772 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x192>
        {
            return (ADC_LIB_CFG1_ADIV(3) + ADC_LIB_CFG1_ADICLK(0));
        }
        else if (f_adc_clock / 4 >= ADC_MIN_FREQ_16BITS)
    167a:	4a65      	ldr	r2, [pc, #404]	; (1810 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x230>)
    167c:	4293      	cmp	r3, r2
    167e:	f200 80bd 	bhi.w	17fc <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x21c>
        {
            return (ADC_LIB_CFG1_ADIV(2) + ADC_LIB_CFG1_ADICLK(0));
        }
        else if (f_adc_clock / 2 >= ADC_MIN_FREQ_16BITS)
    1682:	4a64      	ldr	r2, [pc, #400]	; (1814 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x234>)
    1684:	4293      	cmp	r3, r2
    1686:	f240 809e 	bls.w	17c6 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x1e6>
    }

    //! ADC_CFG1_HI_SPEED_16_BITS is the highest freq for 16 bits @internal
    constexpr uint32_t get_CFG_HI_SPEED_16_BITS(uint32_t f_adc_clock)
    {
        if (f_adc_clock <= ADC_MAX_FREQ_16BITS)
    168a:	2300      	movs	r3, #0
    168c:	2601      	movs	r6, #1
    168e:	461d      	mov	r5, r3
		atomic::setBitFlag(adc_regs.GC, ADC_GC_ADACKEN);
	}
	else {
		// normal bus clock used - disable the internal asynchronous clock
		// total speed can be: bus, bus/2, bus/4, bus/8 or bus/16.
		atomic::clearBitFlag(adc_regs.GC, ADC_GC_ADACKEN);                                          // disable async
    1690:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    1692:	b672      	cpsid	i
        reg &= ~flag;
    1694:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    1696:	f022 0201 	bic.w	r2, r2, #1
    169a:	64a2      	str	r2, [r4, #72]	; 0x48
        __enable_irq();
    169c:	b662      	cpsie	i
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADICLK(3), ADC_CFG1_speed & ADC_CFG_ADICLK(3)); // bus or bus/2
    169e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
            }
        }
        else
        { // 2 bits
            // lsb first
            if ((state >> __builtin_ctzl(flag)) & 0x1)
    16a0:	2b00      	cmp	r3, #0
    16a2:	f000 8082 	beq.w	17aa <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x1ca>

#elif defined(__IMXRT1062__) // Teensy 4
    template <typename T>
    __attribute__((always_inline)) inline void setBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    16a6:	b672      	cpsid	i
        reg |= flag;
    16a8:	6c53      	ldr	r3, [r2, #68]	; 0x44
    16aa:	f043 0301 	orr.w	r3, r3, #1
    16ae:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
    16b0:	b662      	cpsie	i
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    16b2:	b672      	cpsid	i
        reg &= ~flag;
    16b4:	6c53      	ldr	r3, [r2, #68]	; 0x44
    16b6:	f023 0302 	bic.w	r3, r3, #2
    16ba:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
    16bc:	b662      	cpsie	i
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADIV(3), ADC_CFG1_speed & ADC_CFG_ADIV(3));     // divisor for the clock source
    16be:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
            }
        }
        else
        { // 2 bits
            // lsb first
            if ((state >> __builtin_ctzl(flag)) & 0x1)
    16c0:	2e00      	cmp	r6, #0
    16c2:	d062      	beq.n	178a <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x1aa>

#elif defined(__IMXRT1062__) // Teensy 4
    template <typename T>
    __attribute__((always_inline)) inline void setBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    16c4:	b672      	cpsid	i
        reg |= flag;
    16c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    16c8:	f042 0220 	orr.w	r2, r2, #32
    16cc:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
    16ce:	b662      	cpsie	i
            else
            { // lsb is 0
                clearBitFlag(reg, (uint32_t)(1 << __builtin_ctzl(flag)));
            }
            // msb
            if ((state >> (31 - __builtin_clzl(flag))) & 0x1)
    16d0:	2d00      	cmp	r5, #0
    16d2:	d062      	beq.n	179a <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x1ba>

#elif defined(__IMXRT1062__) // Teensy 4
    template <typename T>
    __attribute__((always_inline)) inline void setBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    16d4:	b672      	cpsid	i
        reg |= flag;
    16d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    16d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    16dc:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
    16de:	b662      	cpsie	i
	}

	conversion_speed = speed;
    16e0:	7781      	strb	r1, [r0, #30]
    16e2:	e7ae      	b.n	1642 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x62>
		atomic::setBitFlag(adc_regs.CFG, ADC_CFG_ADLPC);
		// ADC_CFG1_speed = ADC_CFG1_LOW_SPEED;
		ADC_CFG1_speed = get_CFG_LOW_SPEED(ADC_F_BUS);
		break;
	case ADC_CONVERSION_SPEED::MED_SPEED:
		atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADHSC);
    16e4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    16e6:	b672      	cpsid	i
        reg &= ~flag;
    16e8:	6c53      	ldr	r3, [r2, #68]	; 0x44
    16ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    16ee:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
    16f0:	b662      	cpsie	i
		atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADLPC);
    16f2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    16f4:	b672      	cpsid	i
        reg &= ~flag;
    16f6:	6c53      	ldr	r3, [r2, #68]	; 0x44
    16f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    16fc:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
    16fe:	b662      	cpsie	i
		ADC_CFG1_speed = get_CFG_MEDIUM_SPEED(ADC_F_BUS);
    1700:	4b41      	ldr	r3, [pc, #260]	; (1808 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x228>)
    }

    //! ADC_CFG1_LOW_SPEED is the lowest freq for 16 bits @internal
    constexpr uint32_t get_CFG_LOW_SPEED(uint32_t f_adc_clock)
    {
        if (f_adc_clock / 16 >= ADC_MIN_FREQ_16BITS)
    1702:	4a42      	ldr	r2, [pc, #264]	; (180c <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x22c>)
    1704:	681b      	ldr	r3, [r3, #0]
    1706:	4293      	cmp	r3, r2
    1708:	d865      	bhi.n	17d6 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x1f6>
        {
            return (ADC_LIB_CFG1_ADIV(3) + ADC_LIB_CFG1_ADICLK(1));
        }
        else if (f_adc_clock / 8 >= ADC_MIN_FREQ_16BITS)
    170a:	f1a2 72f4 	sub.w	r2, r2, #31981568	; 0x1e80000
    170e:	f5a2 4290 	sub.w	r2, r2, #18432	; 0x4800
    1712:	4293      	cmp	r3, r2
    1714:	d950      	bls.n	17b8 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x1d8>
    }

    //! ADC_CFG1_HI_SPEED_16_BITS is the highest freq for 16 bits @internal
    constexpr uint32_t get_CFG_HI_SPEED_16_BITS(uint32_t f_adc_clock)
    {
        if (f_adc_clock <= ADC_MAX_FREQ_16BITS)
    1716:	4a40      	ldr	r2, [pc, #256]	; (1818 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x238>)
    1718:	4293      	cmp	r3, r2
    171a:	d9b6      	bls.n	168a <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xaa>
        {
            return (ADC_LIB_CFG1_ADIV(0) + ADC_LIB_CFG1_ADICLK(0));
        }
        else if (f_adc_clock / 2 <= ADC_MAX_FREQ_16BITS)
        {
            return (ADC_LIB_CFG1_ADIV(1) + ADC_LIB_CFG1_ADICLK(0));
    171c:	2320      	movs	r3, #32
    171e:	3320      	adds	r3, #32
    1720:	f003 0560 	and.w	r5, r3, #96	; 0x60
    1724:	f003 0301 	and.w	r3, r3, #1
    1728:	f3c5 1640 	ubfx	r6, r5, #5, #1
    172c:	09ad      	lsrs	r5, r5, #6
    172e:	e7af      	b.n	1690 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xb0>
		break;
	case ADC_CONVERSION_SPEED::HIGH_SPEED:
		atomic::setBitFlag(adc_regs.CFG, ADC_CFG_ADHSC);
    1730:	6ac2      	ldr	r2, [r0, #44]	; 0x2c

#elif defined(__IMXRT1062__) // Teensy 4
    template <typename T>
    __attribute__((always_inline)) inline void setBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    1732:	b672      	cpsid	i
        reg |= flag;
    1734:	6c53      	ldr	r3, [r2, #68]	; 0x44
    1736:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    173a:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
    173c:	b662      	cpsie	i
		atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADLPC);
    173e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    1740:	b672      	cpsid	i
        reg &= ~flag;
    1742:	6c53      	ldr	r3, [r2, #68]	; 0x44
    1744:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    1748:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
    174a:	b662      	cpsie	i
		ADC_CFG1_speed = get_CFG_HIGH_SPEED(ADC_F_BUS);
    174c:	4b2e      	ldr	r3, [pc, #184]	; (1808 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x228>)
    }

    //! ADC_CFG1_HI_SPEED is the highest freq for under 16 bits @internal
    constexpr uint32_t get_CFG_HIGH_SPEED(uint32_t f_adc_clock)
    {
        if (f_adc_clock <= ADC_MAX_FREQ)
    174e:	4a32      	ldr	r2, [pc, #200]	; (1818 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x238>)
    1750:	681b      	ldr	r3, [r3, #0]
    1752:	4293      	cmp	r3, r2
    1754:	d937      	bls.n	17c6 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x1e6>
        {
            return (ADC_LIB_CFG1_ADIV(0) + ADC_LIB_CFG1_ADICLK(0));
        }
        else if (f_adc_clock / 2 <= ADC_MAX_FREQ)
    1756:	4a31      	ldr	r2, [pc, #196]	; (181c <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x23c>)
    1758:	4293      	cmp	r3, r2
    175a:	d996      	bls.n	168a <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xaa>
        {
            return (ADC_LIB_CFG1_ADIV(1) + ADC_LIB_CFG1_ADICLK(0));
        }
        else if (f_adc_clock / 4 <= ADC_MAX_FREQ)
    175c:	4a30      	ldr	r2, [pc, #192]	; (1820 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x240>)
    175e:	4293      	cmp	r3, r2
    1760:	d94c      	bls.n	17fc <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x21c>
        {
            return (ADC_LIB_CFG1_ADIV(2) + ADC_LIB_CFG1_ADICLK(0));
        }
        else if (f_adc_clock / 8 <= ADC_MAX_FREQ)
    1762:	f102 6218 	add.w	r2, r2, #159383552	; 0x9800000
    1766:	f502 2216 	add.w	r2, r2, #614400	; 0x96000
    176a:	f602 0204 	addw	r2, r2, #2052	; 0x804
    176e:	4293      	cmp	r3, r2
    1770:	d82d      	bhi.n	17ce <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x1ee>
        }
        else if (f_adc_clock / 8 >= ADC_MIN_FREQ_16BITS)
        {
            return (ADC_LIB_CFG1_ADIV(3) + ADC_LIB_CFG1_ADICLK(0));
        }
        else if (f_adc_clock / 4 >= ADC_MIN_FREQ_16BITS)
    1772:	2501      	movs	r5, #1
    1774:	2300      	movs	r3, #0
    1776:	462e      	mov	r6, r5
    1778:	e78a      	b.n	1690 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xb0>
		break;
		// adack - async clock source, independent of the bus clock
// fADK = 10 or 20 MHz
	case ADC_CONVERSION_SPEED::ADACK_10:
		atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADHSC);
    177a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    177c:	b672      	cpsid	i
        reg &= ~flag;
    177e:	6c53      	ldr	r3, [r2, #68]	; 0x44
    1780:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    1784:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
    1786:	b662      	cpsie	i
		is_adack = true;
		break;
    1788:	e745      	b.n	1616 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x36>
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    178a:	b672      	cpsid	i
        reg &= ~flag;
    178c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    178e:	f022 0220 	bic.w	r2, r2, #32
    1792:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
    1794:	b662      	cpsie	i
            else
            { // lsb is 0
                clearBitFlag(reg, (uint32_t)(1 << __builtin_ctzl(flag)));
            }
            // msb
            if ((state >> (31 - __builtin_clzl(flag))) & 0x1)
    1796:	2d00      	cmp	r5, #0
    1798:	d19c      	bne.n	16d4 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xf4>
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    179a:	b672      	cpsid	i
        reg &= ~flag;
    179c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    179e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    17a2:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
    17a4:	b662      	cpsie	i
		atomic::clearBitFlag(adc_regs.GC, ADC_GC_ADACKEN);                                          // disable async
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADICLK(3), ADC_CFG1_speed & ADC_CFG_ADICLK(3)); // bus or bus/2
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADIV(3), ADC_CFG1_speed & ADC_CFG_ADIV(3));     // divisor for the clock source
	}

	conversion_speed = speed;
    17a6:	7781      	strb	r1, [r0, #30]
    17a8:	e74b      	b.n	1642 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x62>
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    17aa:	b672      	cpsid	i
        reg &= ~flag;
    17ac:	6c53      	ldr	r3, [r2, #68]	; 0x44
    17ae:	f023 0301 	bic.w	r3, r3, #1
    17b2:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
    17b4:	b662      	cpsie	i
    17b6:	e77c      	b.n	16b2 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xd2>
    17b8:	f5a2 0274 	sub.w	r2, r2, #15990784	; 0xf40000
    17bc:	f5a2 5210 	sub.w	r2, r2, #9216	; 0x2400
    17c0:	4293      	cmp	r3, r2
    17c2:	f63f af62 	bhi.w	168a <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xaa>
    17c6:	2300      	movs	r3, #0
    17c8:	461d      	mov	r5, r3
    17ca:	461e      	mov	r6, r3
    17cc:	e760      	b.n	1690 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xb0>
    17ce:	2301      	movs	r3, #1
    17d0:	461d      	mov	r5, r3
    17d2:	461e      	mov	r6, r3
    17d4:	e75c      	b.n	1690 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xb0>
    {
        if (f_adc_clock <= ADC_MAX_FREQ_16BITS)
        {
            return (ADC_LIB_CFG1_ADIV(0) + ADC_LIB_CFG1_ADICLK(0));
        }
        else if (f_adc_clock / 2 <= ADC_MAX_FREQ_16BITS)
    17d6:	4a11      	ldr	r2, [pc, #68]	; (181c <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x23c>)
    17d8:	4293      	cmp	r3, r2
    17da:	d90f      	bls.n	17fc <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x21c>
        {
            return (ADC_LIB_CFG1_ADIV(1) + ADC_LIB_CFG1_ADICLK(0));
        }
        else if (f_adc_clock / 4 <= ADC_MAX_FREQ_16BITS)
    17dc:	4a10      	ldr	r2, [pc, #64]	; (1820 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x240>)
    17de:	4293      	cmp	r3, r2
    17e0:	d910      	bls.n	1804 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x224>
        {
            return (ADC_LIB_CFG1_ADIV(2) + ADC_LIB_CFG1_ADICLK(0));
        }
        else if (f_adc_clock / 8 <= ADC_MAX_FREQ_16BITS)
    17e2:	4a10      	ldr	r2, [pc, #64]	; (1824 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x244>)
        {
            return (ADC_LIB_CFG1_ADIV(3) + ADC_LIB_CFG1_ADICLK(0));
        }
        else
        {
            return (ADC_LIB_CFG1_ADIV(3) + ADC_LIB_CFG1_ADICLK(1));
    17e4:	4293      	cmp	r3, r2
    17e6:	bf94      	ite	ls
    17e8:	2360      	movls	r3, #96	; 0x60
    17ea:	2361      	movhi	r3, #97	; 0x61
    17ec:	f003 0560 	and.w	r5, r3, #96	; 0x60
    17f0:	f003 0301 	and.w	r3, r3, #1
    17f4:	f3c5 1640 	ubfx	r6, r5, #5, #1
    17f8:	09ad      	lsrs	r5, r5, #6
    17fa:	e749      	b.n	1690 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xb0>
    {
        if (f_adc_clock <= ADC_MAX_FREQ_16BITS)
        {
            return (ADC_LIB_CFG1_ADIV(0) + ADC_LIB_CFG1_ADICLK(0));
        }
        else if (f_adc_clock / 2 <= ADC_MAX_FREQ_16BITS)
    17fc:	2300      	movs	r3, #0
    17fe:	2501      	movs	r5, #1
    1800:	461e      	mov	r6, r3
    1802:	e745      	b.n	1690 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xb0>
        {
            return (ADC_LIB_CFG1_ADIV(1) + ADC_LIB_CFG1_ADICLK(0));
        }
        else if (f_adc_clock / 4 <= ADC_MAX_FREQ_16BITS)
        {
            return (ADC_LIB_CFG1_ADIV(2) + ADC_LIB_CFG1_ADICLK(0));
    1804:	2340      	movs	r3, #64	; 0x40
    1806:	e78a      	b.n	171e <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x13e>
    1808:	200122a4 	.word	0x200122a4
    180c:	03d08fff 	.word	0x03d08fff
    1810:	00f423ff 	.word	0x00f423ff
    1814:	007a11ff 	.word	0x007a11ff
    1818:	02625a00 	.word	0x02625a00
    181c:	04c4b401 	.word	0x04c4b401
    1820:	09896803 	.word	0x09896803
    1824:	1312d007 	.word	0x1312d007

00001828 <My_ADC::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)>:
* MED_HIGH_SPEED takes 9 ADCK.
* HIGH_SPEED takes 7 ADCK.
* HIGH_VERY_HIGH_SPEED takes 5 ADCK
* VERY_HIGH_SPEED is the highest possible sampling speed (3 ADCK)
*/
void My_ADC::setSamplingSpeed(ADC_SAMPLING_SPEED speed) {
    1828:	b538      	push	{r3, r4, r5, lr}
	if (calibrating)
    182a:	7d43      	ldrb	r3, [r0, #21]
* MED_HIGH_SPEED takes 9 ADCK.
* HIGH_SPEED takes 7 ADCK.
* HIGH_VERY_HIGH_SPEED takes 5 ADCK
* VERY_HIGH_SPEED is the highest possible sampling speed (3 ADCK)
*/
void My_ADC::setSamplingSpeed(ADC_SAMPLING_SPEED speed) {
    182c:	4604      	mov	r4, r0
    182e:	460d      	mov	r5, r1
	if (calibrating)
    1830:	b9eb      	cbnz	r3, 186e <My_ADC::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0x46>
		wait_for_cal();

	switch (speed) {
    1832:	2d07      	cmp	r5, #7
    1834:	d819      	bhi.n	186a <My_ADC::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0x42>
    1836:	e8df f005 	tbb	[pc, r5]
    183a:	331d      	.short	0x331d
    183c:	59534d40 	.word	0x59534d40
    1840:	045f      	.short	0x045f
	case ADC_SAMPLING_SPEED::HIGH_VERY_HIGH_SPEED:
		atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADLSMP); // long sampling time disabled
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADSTS(3), ADC_CFG_ADSTS(1));
		break;
	case ADC_SAMPLING_SPEED::VERY_HIGH_SPEED:
		atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADLSMP); // long sampling time disabled
    1842:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    1844:	b672      	cpsid	i
        reg &= ~flag;
    1846:	6c53      	ldr	r3, [r2, #68]	; 0x44
    1848:	f023 0310 	bic.w	r3, r3, #16
    184c:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
    184e:	b662      	cpsie	i
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADSTS(3), ADC_CFG_ADSTS(0));
    1850:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    1852:	b672      	cpsid	i
        reg &= ~flag;
    1854:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    1856:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    185a:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
    185c:	b662      	cpsie	i
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    185e:	b672      	cpsid	i
        reg &= ~flag;
    1860:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    1862:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    1866:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
    1868:	b662      	cpsie	i
		break;
	}
	sampling_speed = speed;
    186a:	77e5      	strb	r5, [r4, #31]
    186c:	bd38      	pop	{r3, r4, r5, pc}
* HIGH_VERY_HIGH_SPEED takes 5 ADCK
* VERY_HIGH_SPEED is the highest possible sampling speed (3 ADCK)
*/
void My_ADC::setSamplingSpeed(ADC_SAMPLING_SPEED speed) {
	if (calibrating)
		wait_for_cal();
    186e:	f7ff fe35 	bl	14dc <My_ADC::wait_for_cal()>
    1872:	e7de      	b.n	1832 <My_ADC::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0xa>

	switch (speed) {
	case ADC_SAMPLING_SPEED::VERY_LOW_SPEED:
		atomic::setBitFlag(adc_regs.CFG, ADC_CFG_ADLSMP); // long sampling time enable
    1874:	6ae2      	ldr	r2, [r4, #44]	; 0x2c

#elif defined(__IMXRT1062__) // Teensy 4
    template <typename T>
    __attribute__((always_inline)) inline void setBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    1876:	b672      	cpsid	i
        reg |= flag;
    1878:	6c53      	ldr	r3, [r2, #68]	; 0x44
    187a:	f043 0310 	orr.w	r3, r3, #16

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
        reg &= ~flag;
    187e:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
    1880:	b662      	cpsie	i
		atomic::setBitFlag(adc_regs.CFG, ADC_CFG_ADLSMP); // long sampling time enable
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADSTS(3), ADC_CFG_ADSTS(0));
		break;
	case ADC_SAMPLING_SPEED::MED_HIGH_SPEED:
		atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADLSMP); // long sampling time disabled
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADSTS(3), ADC_CFG_ADSTS(3));
    1882:	6ae3      	ldr	r3, [r4, #44]	; 0x2c

#elif defined(__IMXRT1062__) // Teensy 4
    template <typename T>
    __attribute__((always_inline)) inline void setBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    1884:	b672      	cpsid	i
        reg |= flag;
    1886:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    1888:	f442 7280 	orr.w	r2, r2, #256	; 0x100

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
        reg &= ~flag;
    188c:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
    188e:	b662      	cpsie	i

#elif defined(__IMXRT1062__) // Teensy 4
    template <typename T>
    __attribute__((always_inline)) inline void setBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    1890:	b672      	cpsid	i
        reg |= flag;
    1892:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    1894:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    1898:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
    189a:	b662      	cpsie	i
	case ADC_SAMPLING_SPEED::VERY_HIGH_SPEED:
		atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADLSMP); // long sampling time disabled
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADSTS(3), ADC_CFG_ADSTS(0));
		break;
	}
	sampling_speed = speed;
    189c:	77e5      	strb	r5, [r4, #31]
    189e:	bd38      	pop	{r3, r4, r5, pc}
	case ADC_SAMPLING_SPEED::VERY_LOW_SPEED:
		atomic::setBitFlag(adc_regs.CFG, ADC_CFG_ADLSMP); // long sampling time enable
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADSTS(3), ADC_CFG_ADSTS(3));
		break;
	case ADC_SAMPLING_SPEED::LOW_SPEED:
		atomic::setBitFlag(adc_regs.CFG, ADC_CFG_ADLSMP); // long sampling time enable
    18a0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c

#elif defined(__IMXRT1062__) // Teensy 4
    template <typename T>
    __attribute__((always_inline)) inline void setBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    18a2:	b672      	cpsid	i
        reg |= flag;
    18a4:	6c53      	ldr	r3, [r2, #68]	; 0x44
    18a6:	f043 0310 	orr.w	r3, r3, #16
    18aa:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
    18ac:	b662      	cpsie	i
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADSTS(3), ADC_CFG_ADSTS(2));
    18ae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    18b0:	b672      	cpsid	i
        reg &= ~flag;
    18b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    18b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    18b8:	e7e8      	b.n	188c <My_ADC::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0x64>
		break;
	case ADC_SAMPLING_SPEED::LOW_MED_SPEED:
		atomic::setBitFlag(adc_regs.CFG, ADC_CFG_ADLSMP); // long sampling time enable
    18ba:	6ae2      	ldr	r2, [r4, #44]	; 0x2c

#elif defined(__IMXRT1062__) // Teensy 4
    template <typename T>
    __attribute__((always_inline)) inline void setBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    18bc:	b672      	cpsid	i
        reg |= flag;
    18be:	6c53      	ldr	r3, [r2, #68]	; 0x44
    18c0:	f043 0310 	orr.w	r3, r3, #16

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
        reg &= ~flag;
    18c4:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
    18c6:	b662      	cpsie	i
		atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADLSMP); // long sampling time disabled
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADSTS(3), ADC_CFG_ADSTS(2));
		break;
	case ADC_SAMPLING_SPEED::HIGH_VERY_HIGH_SPEED:
		atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADLSMP); // long sampling time disabled
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADSTS(3), ADC_CFG_ADSTS(1));
    18c8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c

#elif defined(__IMXRT1062__) // Teensy 4
    template <typename T>
    __attribute__((always_inline)) inline void setBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    18ca:	b672      	cpsid	i
        reg |= flag;
    18cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    18ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    18d2:	e7c2      	b.n	185a <My_ADC::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0x32>
	case ADC_SAMPLING_SPEED::LOW_MED_SPEED:
		atomic::setBitFlag(adc_regs.CFG, ADC_CFG_ADLSMP); // long sampling time enable
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADSTS(3), ADC_CFG_ADSTS(1));
		break;
	case ADC_SAMPLING_SPEED::MED_SPEED:
		atomic::setBitFlag(adc_regs.CFG, ADC_CFG_ADLSMP); // long sampling time enable
    18d4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c

#elif defined(__IMXRT1062__) // Teensy 4
    template <typename T>
    __attribute__((always_inline)) inline void setBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    18d6:	b672      	cpsid	i
        reg |= flag;
    18d8:	6c53      	ldr	r3, [r2, #68]	; 0x44
    18da:	f043 0310 	orr.w	r3, r3, #16
    18de:	e7b5      	b.n	184c <My_ADC::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0x24>
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADSTS(3), ADC_CFG_ADSTS(0));
		break;
	case ADC_SAMPLING_SPEED::MED_HIGH_SPEED:
		atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADLSMP); // long sampling time disabled
    18e0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    18e2:	b672      	cpsid	i
        reg &= ~flag;
    18e4:	6c53      	ldr	r3, [r2, #68]	; 0x44
    18e6:	f023 0310 	bic.w	r3, r3, #16
    18ea:	e7c8      	b.n	187e <My_ADC::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0x56>
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADSTS(3), ADC_CFG_ADSTS(3));
		break;
	case ADC_SAMPLING_SPEED::HIGH_SPEED:
		atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADLSMP); // long sampling time disabled
    18ec:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    18ee:	b672      	cpsid	i
        reg &= ~flag;
    18f0:	6c53      	ldr	r3, [r2, #68]	; 0x44
    18f2:	f023 0310 	bic.w	r3, r3, #16
    18f6:	e7d8      	b.n	18aa <My_ADC::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0x82>
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADSTS(3), ADC_CFG_ADSTS(2));
		break;
	case ADC_SAMPLING_SPEED::HIGH_VERY_HIGH_SPEED:
		atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADLSMP); // long sampling time disabled
    18f8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    18fa:	b672      	cpsid	i
        reg &= ~flag;
    18fc:	6c53      	ldr	r3, [r2, #68]	; 0x44
    18fe:	f023 0310 	bic.w	r3, r3, #16
    1902:	e7df      	b.n	18c4 <My_ADC::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0x9c>

00001904 <My_ADC::setAveraging(unsigned char)>:
}

/* Set the number of averages: 0, 4, 8, 16 or 32.
*
*/
void My_ADC::setAveraging(uint8_t num) {
    1904:	b538      	push	{r3, r4, r5, lr}

	if (calibrating)
    1906:	7d43      	ldrb	r3, [r0, #21]
}

/* Set the number of averages: 0, 4, 8, 16 or 32.
*
*/
void My_ADC::setAveraging(uint8_t num) {
    1908:	4604      	mov	r4, r0
    190a:	460d      	mov	r5, r1

	if (calibrating)
    190c:	bb13      	cbnz	r3, 1954 <My_ADC::setAveraging(unsigned char)+0x50>
		wait_for_cal();

	if (num <= 1) {
    190e:	2d01      	cmp	r5, #1
		num = 0;
		// ADC_SC3_avge = 0;
		atomic::clearBitFlag(adc_regs.GC, ADC_GC_AVGE);
    1910:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
void My_ADC::setAveraging(uint8_t num) {

	if (calibrating)
		wait_for_cal();

	if (num <= 1) {
    1912:	d924      	bls.n	195e <My_ADC::setAveraging(unsigned char)+0x5a>

#elif defined(__IMXRT1062__) // Teensy 4
    template <typename T>
    __attribute__((always_inline)) inline void setBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    1914:	b672      	cpsid	i
        reg |= flag;
    1916:	6c93      	ldr	r3, [r2, #72]	; 0x48
    1918:	f043 0320 	orr.w	r3, r3, #32
    191c:	6493      	str	r3, [r2, #72]	; 0x48
        __enable_irq();
    191e:	b662      	cpsie	i
	}
	else {
		// ADC_SC3_avge = 1;
		atomic::setBitFlag(adc_regs.GC, ADC_GC_AVGE);

		if (num <= 4) {
    1920:	2d04      	cmp	r5, #4
    1922:	d90d      	bls.n	1940 <My_ADC::setAveraging(unsigned char)+0x3c>
			num = 4;
			// ADC_SC3_avgs0 = 0;
			// ADC_SC3_avgs1 = 0;
			atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_AVGS(3));
		}
		else if (num <= 8) {
    1924:	2d08      	cmp	r5, #8
    1926:	d933      	bls.n	1990 <My_ADC::setAveraging(unsigned char)+0x8c>
			num = 8;
			// ADC_SC3_avgs0 = 1;
			// ADC_SC3_avgs1 = 0;
			atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_AVGS(3), ADC_CFG_AVGS(1));
		}
		else if (num <= 16) {
    1928:	2d10      	cmp	r5, #16
    192a:	d921      	bls.n	1970 <My_ADC::setAveraging(unsigned char)+0x6c>
		}
		else {
			num = 32;
			// ADC_SC3_avgs0 = 1;
			// ADC_SC3_avgs1 = 1;
			atomic::setBitFlag(adc_regs.CFG, ADC_CFG_AVGS(3));
    192c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c

#elif defined(__IMXRT1062__) // Teensy 4
    template <typename T>
    __attribute__((always_inline)) inline void setBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    192e:	b672      	cpsid	i
        reg |= flag;
    1930:	6c53      	ldr	r3, [r2, #68]	; 0x44
    1932:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
    1936:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
    1938:	b662      	cpsie	i
			// ADC_SC3_avgs0 = 0;
			// ADC_SC3_avgs1 = 1;
			atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_AVGS(3), ADC_CFG_AVGS(2));
		}
		else {
			num = 32;
    193a:	2320      	movs	r3, #32
			// ADC_SC3_avgs0 = 1;
			// ADC_SC3_avgs1 = 1;
			atomic::setBitFlag(adc_regs.CFG, ADC_CFG_AVGS(3));
		}
	}
	analog_num_average = num;
    193c:	7723      	strb	r3, [r4, #28]
    193e:	bd38      	pop	{r3, r4, r5, pc}

		if (num <= 4) {
			num = 4;
			// ADC_SC3_avgs0 = 0;
			// ADC_SC3_avgs1 = 0;
			atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_AVGS(3));
    1940:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    1942:	b672      	cpsid	i
        reg &= ~flag;
    1944:	6c53      	ldr	r3, [r2, #68]	; 0x44
    1946:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
    194a:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
    194c:	b662      	cpsie	i
	else {
		// ADC_SC3_avge = 1;
		atomic::setBitFlag(adc_regs.GC, ADC_GC_AVGE);

		if (num <= 4) {
			num = 4;
    194e:	2304      	movs	r3, #4
			// ADC_SC3_avgs0 = 1;
			// ADC_SC3_avgs1 = 1;
			atomic::setBitFlag(adc_regs.CFG, ADC_CFG_AVGS(3));
		}
	}
	analog_num_average = num;
    1950:	7723      	strb	r3, [r4, #28]
    1952:	bd38      	pop	{r3, r4, r5, pc}
*
*/
void My_ADC::setAveraging(uint8_t num) {

	if (calibrating)
		wait_for_cal();
    1954:	f7ff fdc2 	bl	14dc <My_ADC::wait_for_cal()>

	if (num <= 1) {
    1958:	2d01      	cmp	r5, #1
		num = 0;
		// ADC_SC3_avge = 0;
		atomic::clearBitFlag(adc_regs.GC, ADC_GC_AVGE);
    195a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
void My_ADC::setAveraging(uint8_t num) {

	if (calibrating)
		wait_for_cal();

	if (num <= 1) {
    195c:	d8da      	bhi.n	1914 <My_ADC::setAveraging(unsigned char)+0x10>
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    195e:	b672      	cpsid	i
        reg &= ~flag;
    1960:	6c93      	ldr	r3, [r2, #72]	; 0x48
    1962:	f023 0320 	bic.w	r3, r3, #32
    1966:	6493      	str	r3, [r2, #72]	; 0x48
        __enable_irq();
    1968:	b662      	cpsie	i
		num = 0;
    196a:	2300      	movs	r3, #0
			// ADC_SC3_avgs0 = 1;
			// ADC_SC3_avgs1 = 1;
			atomic::setBitFlag(adc_regs.CFG, ADC_CFG_AVGS(3));
		}
	}
	analog_num_average = num;
    196c:	7723      	strb	r3, [r4, #28]
    196e:	bd38      	pop	{r3, r4, r5, pc}
		}
		else if (num <= 16) {
			num = 16;
			// ADC_SC3_avgs0 = 0;
			// ADC_SC3_avgs1 = 1;
			atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_AVGS(3), ADC_CFG_AVGS(2));
    1970:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    1972:	b672      	cpsid	i
        reg &= ~flag;
    1974:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    1976:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    197a:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
    197c:	b662      	cpsie	i

#elif defined(__IMXRT1062__) // Teensy 4
    template <typename T>
    __attribute__((always_inline)) inline void setBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    197e:	b672      	cpsid	i
        reg |= flag;
    1980:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    1982:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    1986:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
    1988:	b662      	cpsie	i
			// ADC_SC3_avgs0 = 1;
			// ADC_SC3_avgs1 = 0;
			atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_AVGS(3), ADC_CFG_AVGS(1));
		}
		else if (num <= 16) {
			num = 16;
    198a:	2310      	movs	r3, #16
			// ADC_SC3_avgs0 = 1;
			// ADC_SC3_avgs1 = 1;
			atomic::setBitFlag(adc_regs.CFG, ADC_CFG_AVGS(3));
		}
	}
	analog_num_average = num;
    198c:	7723      	strb	r3, [r4, #28]
    198e:	bd38      	pop	{r3, r4, r5, pc}
		}
		else if (num <= 8) {
			num = 8;
			// ADC_SC3_avgs0 = 1;
			// ADC_SC3_avgs1 = 0;
			atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_AVGS(3), ADC_CFG_AVGS(1));
    1990:	6ae3      	ldr	r3, [r4, #44]	; 0x2c

#elif defined(__IMXRT1062__) // Teensy 4
    template <typename T>
    __attribute__((always_inline)) inline void setBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    1992:	b672      	cpsid	i
        reg |= flag;
    1994:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    1996:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    199a:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
    199c:	b662      	cpsie	i
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    199e:	b672      	cpsid	i
        reg &= ~flag;
    19a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    19a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    19a6:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
    19a8:	b662      	cpsie	i
			// ADC_SC3_avgs0 = 0;
			// ADC_SC3_avgs1 = 0;
			atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_AVGS(3));
		}
		else if (num <= 8) {
			num = 8;
    19aa:	2308      	movs	r3, #8
			// ADC_SC3_avgs0 = 1;
			// ADC_SC3_avgs1 = 1;
			atomic::setBitFlag(adc_regs.CFG, ADC_CFG_AVGS(3));
		}
	}
	analog_num_average = num;
    19ac:	7723      	strb	r3, [r4, #28]
    19ae:	bd38      	pop	{r3, r4, r5, pc}

000019b0 <My_ADC::enableInterrupts(void (*)(), unsigned char)>:
}

/* Enable interrupts: An ADC Interrupt will be raised when the conversion is completed
*  (including hardware averages and if the comparison (if any) is true).
*/
void My_ADC::enableInterrupts(void (*isr)(void), uint8_t priority) {
    19b0:	b570      	push	{r4, r5, r6, lr}
	if (calibrating)
    19b2:	7d43      	ldrb	r3, [r0, #21]
}

/* Enable interrupts: An ADC Interrupt will be raised when the conversion is completed
*  (including hardware averages and if the comparison (if any) is true).
*/
void My_ADC::enableInterrupts(void (*isr)(void), uint8_t priority) {
    19b4:	4604      	mov	r4, r0
    19b6:	460d      	mov	r5, r1
    19b8:	4616      	mov	r6, r2
	if (calibrating)
    19ba:	b10b      	cbz	r3, 19c0 <My_ADC::enableInterrupts(void (*)(), unsigned char)+0x10>
		wait_for_cal();
    19bc:	f7ff fd8e 	bl	14dc <My_ADC::wait_for_cal()>

	atomic::setBitFlag(adc_regs.HC0, ADC_HC_AIEN);
    19c0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c

#elif defined(__IMXRT1062__) // Teensy 4
    template <typename T>
    __attribute__((always_inline)) inline void setBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    19c2:	b672      	cpsid	i
        reg |= flag;
    19c4:	6803      	ldr	r3, [r0, #0]
    19c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    19ca:	6003      	str	r3, [r0, #0]
        __enable_irq();
    19cc:	b662      	cpsie	i
#define DMA_NUM_CHANNELS        32

#ifdef __cplusplus
extern "C" void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    19ce:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
	interrupts_enabled = true;
    19d2:	2001      	movs	r0, #1
    19d4:	4a09      	ldr	r2, [pc, #36]	; (19fc <My_ADC::enableInterrupts(void (*)(), unsigned char)+0x4c>)
    19d6:	3310      	adds	r3, #16
    19d8:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
    19dc:	f842 5023 	str.w	r5, [r2, r3, lsl #2]

	attachInterruptVector(IRQ_ADC, isr);
	NVIC_SET_PRIORITY(IRQ_ADC, priority);
    19e0:	4b07      	ldr	r3, [pc, #28]	; (1a00 <My_ADC::enableInterrupts(void (*)(), unsigned char)+0x50>)
    19e2:	f894 5029 	ldrb.w	r5, [r4, #41]	; 0x29
	NVIC_ENABLE_IRQ(IRQ_ADC);
    19e6:	4907      	ldr	r1, [pc, #28]	; (1a04 <My_ADC::enableInterrupts(void (*)(), unsigned char)+0x54>)

	atomic::setBitFlag(adc_regs.HC0, ADC_HC_AIEN);
	interrupts_enabled = true;

	attachInterruptVector(IRQ_ADC, isr);
	NVIC_SET_PRIORITY(IRQ_ADC, priority);
    19e8:	54ee      	strb	r6, [r5, r3]
	NVIC_ENABLE_IRQ(IRQ_ADC);
    19ea:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    19ee:	f003 021f 	and.w	r2, r3, #31
    19f2:	115b      	asrs	r3, r3, #5
    19f4:	4090      	lsls	r0, r2
    19f6:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    19fa:	bd70      	pop	{r4, r5, r6, pc}
    19fc:	20022c00 	.word	0x20022c00
    1a00:	e000e400 	.word	0xe000e400
    1a04:	e000e100 	.word	0xe000e100

00001a08 <My_ADC::startContinuous(unsigned char)>:
//////////////// INFORMATION ABOUT VALID PINS //////////////////

// check whether the pin is a valid analog pin
bool My_ADC::checkPin(uint8_t pin) {

	if (pin > ADC_MAX_PIN) {
    1a08:	291b      	cmp	r1, #27

/* Starts continuous conversion on the pin
 * It returns as soon as the ADC is set, use analogReadContinuous() to read the values
 * Set the resolution, number of averages and voltage reference using the appropriate functions BEFORE calling this function
*/
bool My_ADC::startContinuous(uint8_t pin) {
    1a0a:	b538      	push	{r3, r4, r5, lr}
    1a0c:	4604      	mov	r4, r0
//////////////// INFORMATION ABOUT VALID PINS //////////////////

// check whether the pin is a valid analog pin
bool My_ADC::checkPin(uint8_t pin) {

	if (pin > ADC_MAX_PIN) {
    1a0e:	d820      	bhi.n	1a52 <My_ADC::startContinuous(unsigned char)+0x4a>
		return false; // all others are invalid
	}

	// translate pin number to SC1A number, that also contains MUX a or b info.
	const uint8_t sc1a_pin = channel2sc1a[pin];
    1a10:	6a03      	ldr	r3, [r0, #32]

	// check for valid pin
	if ((sc1a_pin & ADC_SC1A_CHANNELS) == ADC_SC1A_PIN_INVALID) {
    1a12:	5c5b      	ldrb	r3, [r3, r1]
    1a14:	f003 031f 	and.w	r3, r3, #31
    1a18:	2b1f      	cmp	r3, #31
    1a1a:	d01a      	beq.n	1a52 <My_ADC::startContinuous(unsigned char)+0x4a>
		fail_flag |= ADC_ERROR::WRONG_PIN;
		return false;
	}

	// check for calibration before setting channels,
	if (calibrating)
    1a1c:	7d43      	ldrb	r3, [r0, #21]
    1a1e:	460d      	mov	r5, r1
    1a20:	b9f3      	cbnz	r3, 1a60 <My_ADC::startContinuous(unsigned char)+0x58>
		wait_for_cal();

	// increase the counter of measurements
	num_measurements++;
    1a22:	7c63      	ldrb	r3, [r4, #17]
	void disablePGA();
#endif

	//! Set continuous conversion mode
	void continuousMode() __attribute__((always_inline)) {
		atomic::setBitFlag(adc_regs.GC, ADC_GC_ADCO);
    1a24:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    1a26:	3301      	adds	r3, #1
    1a28:	7463      	strb	r3, [r4, #17]

#elif defined(__IMXRT1062__) // Teensy 4
    template <typename T>
    __attribute__((always_inline)) inline void setBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    1a2a:	b672      	cpsid	i
        reg |= flag;
    1a2c:	6c93      	ldr	r3, [r2, #72]	; 0x48
    1a2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1a32:	6493      	str	r3, [r2, #72]	; 0x48
        __enable_irq();
    1a34:	b662      	cpsie	i
// Doesn't do any of the checks on the pin
// It doesn't change the continuous conversion bit
void My_ADC::startReadFast(uint8_t pin) {

	// translate pin number to SC1A number, that also contains MUX a or b info.
	const uint8_t sc1a_pin = channel2sc1a[pin];
    1a36:	6a23      	ldr	r3, [r4, #32]
    1a38:	5d5b      	ldrb	r3, [r3, r5]

	// select pin for single-ended mode and start conversion, enable interrupts if requested
	__disable_irq();
    1a3a:	b672      	cpsid	i
	adc_regs.HC0 = (sc1a_pin & ADC_SC1A_CHANNELS) + interrupts_enabled * ADC_HC_AIEN;
    1a3c:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
    1a40:	f003 031f 	and.w	r3, r3, #31
    1a44:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    1a46:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
    1a4a:	6013      	str	r3, [r2, #0]

	__enable_irq();
    1a4c:	b662      	cpsie	i
	// set continuous conversion flag
	continuousMode();

	startReadFast(pin);

	return true;
    1a4e:	2001      	movs	r0, #1
    1a50:	bd38      	pop	{r3, r4, r5, pc}
        return static_cast<ADC_ERROR>(static_cast<uint16_t>(lhs) & static_cast<uint16_t>(rhs));
    }
    //! |= operator for ADC_ERRORs, it changes the left hand side ADC_ERROR. @internal
    inline ADC_ERROR operator|=(volatile ADC_ERROR &lhs, ADC_ERROR rhs)
    {
        return lhs = static_cast<ADC_ERROR>(static_cast<uint16_t>(lhs) | static_cast<uint16_t>(rhs));
    1a52:	8a63      	ldrh	r3, [r4, #18]
bool My_ADC::startContinuous(uint8_t pin) {

	// check whether the pin is correct
	if (!checkPin(pin)) {
		fail_flag |= ADC_ERROR::WRONG_PIN;
		return false;
    1a54:	2000      	movs	r0, #0
    1a56:	b29b      	uxth	r3, r3
    1a58:	f043 0304 	orr.w	r3, r3, #4
    1a5c:	8263      	strh	r3, [r4, #18]
    1a5e:	bd38      	pop	{r3, r4, r5, pc}
	}

	// check for calibration before setting channels,
	if (calibrating)
		wait_for_cal();
    1a60:	f7ff fd3c 	bl	14dc <My_ADC::wait_for_cal()>
    1a64:	e7dd      	b.n	1a22 <My_ADC::startContinuous(unsigned char)+0x1a>
    1a66:	bf00      	nop

00001a68 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>:
    1a68:	4804      	ldr	r0, [pc, #16]	; (1a7c <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x14>)
    1a6a:	6802      	ldr	r2, [r0, #0]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    1a6c:	4411      	add	r1, r2
    1a6e:	e001      	b.n	1a74 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0xc>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    1a70:	4299      	cmp	r1, r3
    1a72:	d302      	bcc.n	1a7a <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x12>
    1a74:	6803      	ldr	r3, [r0, #0]
    1a76:	429a      	cmp	r2, r3
    1a78:	d9fa      	bls.n	1a70 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x8>
    1a7a:	4770      	bx	lr
    1a7c:	200225dc 	.word	0x200225dc

00001a80 <VisualMicroDebug::outPacketStart(bool)>:
	return outPacketStart(false);
}


bool VisualMicroDebug::outPacketStart(bool noWait)
{
    1a80:	b410      	push	{r4}
    1a82:	4a0c      	ldr	r2, [pc, #48]	; (1ab4 <VisualMicroDebug::outPacketStart(bool)+0x34>)
    1a84:	4604      	mov	r4, r0
	yield();
#endif


#if defined(VM_DEBUG_BANDWIDTH_THROTTLE_MS) //&& (VM_DBT != VM_DBT_NET_UDP)
	if (!noWait)
    1a86:	b971      	cbnz	r1, 1aa6 <VisualMicroDebug::outPacketStart(bool)+0x26>
	{

		unsigned long ms_wait;
		ms_wait = (DBG_Millis() - lastPacketMS);
    1a88:	6841      	ldr	r1, [r0, #4]
    1a8a:	6813      	ldr	r3, [r2, #0]
    1a8c:	1a59      	subs	r1, r3, r1
		if (ms_wait < VM_DEBUG_BANDWIDTH_THROTTLE_MS)
    1a8e:	2931      	cmp	r1, #49	; 0x31
    1a90:	d809      	bhi.n	1aa6 <VisualMicroDebug::outPacketStart(bool)+0x26>
    1a92:	6810      	ldr	r0, [r2, #0]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    1a94:	f100 0332 	add.w	r3, r0, #50	; 0x32
    1a98:	1a59      	subs	r1, r3, r1
    1a9a:	e001      	b.n	1aa0 <VisualMicroDebug::outPacketStart(bool)+0x20>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    1a9c:	4299      	cmp	r1, r3
    1a9e:	d302      	bcc.n	1aa6 <VisualMicroDebug::outPacketStart(bool)+0x26>
    1aa0:	6813      	ldr	r3, [r2, #0]
    1aa2:	4298      	cmp	r0, r3
    1aa4:	d9fa      	bls.n	1a9c <VisualMicroDebug::outPacketStart(bool)+0x1c>
    1aa6:	6813      	ldr	r3, [r2, #0]
	transport->beginPacket();
#endif
#endif

	return true;
}
    1aa8:	2001      	movs	r0, #1
			//DBG_YieldAndWait(3)
		//}
	}
	//XXX: this should really be after packet end!
	//1501 for cosa - lastPacketMS=millis();
	lastPacketMS = DBG_Millis();
    1aaa:	6063      	str	r3, [r4, #4]
	transport->beginPacket();
#endif
#endif

	return true;
}
    1aac:	f85d 4b04 	ldr.w	r4, [sp], #4
    1ab0:	4770      	bx	lr
    1ab2:	bf00      	nop
    1ab4:	200225dc 	.word	0x200225dc

00001ab8 <VisualMicroDebug::outPacketEnd()>:
    1ab8:	4770      	bx	lr
    1aba:	bf00      	nop

00001abc <VisualMicroDebug::begin(unsigned long)>:
{

	//todo: detect usb type ports that need a delay
	//don't wait for the port unless we add a timeout and disable debug. because we might be discntected
	//todo: see if esp can handle this delay wuith wifi also connecting!
	delay(1000);
    1abc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    1ac0:	f000 bade 	b.w	2080 <delay>

00001ac4 <VisualMicroDebug::init(unsigned long)>:
	vmdebug.init();
	vmdebug.stats();
#endif


	baudRate = 0L; //gets a value later if required, only used by cosa for a re-begin!
    1ac4:	2300      	movs	r3, #0
    1ac6:	6443      	str	r3, [r0, #68]	; 0x44

	lastPacketMS = 0L;
    1ac8:	6043      	str	r3, [r0, #4]

	//note: a delay at start causes esp8266 wifi to fail to connect!!
	//		the delay can also be switched off via board/platform.txt property=
	if (delayMs > 0)
    1aca:	b141      	cbz	r1, 1ade <VisualMicroDebug::init(unsigned long)+0x1a>
    1acc:	4804      	ldr	r0, [pc, #16]	; (1ae0 <VisualMicroDebug::init(unsigned long)+0x1c>)
    1ace:	6802      	ldr	r2, [r0, #0]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    1ad0:	4411      	add	r1, r2
    1ad2:	e001      	b.n	1ad8 <VisualMicroDebug::init(unsigned long)+0x14>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    1ad4:	4299      	cmp	r1, r3
    1ad6:	d302      	bcc.n	1ade <VisualMicroDebug::init(unsigned long)+0x1a>
    1ad8:	6803      	ldr	r3, [r0, #0]
    1ada:	429a      	cmp	r2, r3
    1adc:	d9fa      	bls.n	1ad4 <VisualMicroDebug::init(unsigned long)+0x10>
    1ade:	4770      	bx	lr
    1ae0:	200225dc 	.word	0x200225dc

00001ae4 <VisualMicroDebug::sendContinuedACK(unsigned char)>:
}
#endif


void VisualMicroDebug::sendContinuedACK(uint8_t breakPointId)
{
    1ae4:	b538      	push	{r3, r4, r5, lr}
    1ae6:	4c0f      	ldr	r4, [pc, #60]	; (1b24 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x40>)
    1ae8:	460d      	mov	r5, r1
    1aea:	2106      	movs	r1, #6
    1aec:	6823      	ldr	r3, [r4, #0]
			//DBG_YieldAndWait(3)
		//}
	}
	//XXX: this should really be after packet end!
	//1501 for cosa - lastPacketMS=millis();
	lastPacketMS = DBG_Millis();
    1aee:	6043      	str	r3, [r0, #4]
    1af0:	480d      	ldr	r0, [pc, #52]	; (1b28 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x44>)
    1af2:	f001 fd2b 	bl	354c <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1af6:	220a      	movs	r2, #10
    1af8:	2300      	movs	r3, #0
    1afa:	4629      	mov	r1, r5
    1afc:	480b      	ldr	r0, [pc, #44]	; (1b2c <VisualMicroDebug::sendContinuedACK(unsigned char)+0x48>)
    1afe:	f001 fdf3 	bl	36e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1b02:	2106      	movs	r1, #6
    1b04:	480a      	ldr	r0, [pc, #40]	; (1b30 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x4c>)
    1b06:	f001 fd21 	bl	354c <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1b0a:	4808      	ldr	r0, [pc, #32]	; (1b2c <VisualMicroDebug::sendContinuedACK(unsigned char)+0x48>)
    1b0c:	f001 fddc 	bl	36c8 <Print::println()>
    1b10:	6822      	ldr	r2, [r4, #0]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    1b12:	f102 0132 	add.w	r1, r2, #50	; 0x32
    1b16:	e001      	b.n	1b1c <VisualMicroDebug::sendContinuedACK(unsigned char)+0x38>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    1b18:	4299      	cmp	r1, r3
    1b1a:	d302      	bcc.n	1b22 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x3e>
    1b1c:	6823      	ldr	r3, [r4, #0]
    1b1e:	429a      	cmp	r2, r3
    1b20:	d9fa      	bls.n	1b18 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x34>
    1b22:	bd38      	pop	{r3, r4, r5, pc}
    1b24:	200225dc 	.word	0x200225dc
    1b28:	200000dc 	.word	0x200000dc
    1b2c:	200122d8 	.word	0x200122d8
    1b30:	200000e4 	.word	0x200000e4

00001b34 <VisualMicroDebug::breakWait(unsigned char)>:
#if defined(VM_DBT) //&& ( VM_DBT == VM_DBT_HARDWARESERIAL || VM_DBT == VM_DBT_FASTSERIAL)
//TODO: implement sturcture serial com!
//we never get called if break was not set during compliation
//return _vm_cmd so that we can setVariable if required (caller needs to know result)
uint8_t VisualMicroDebug::breakWait(uint8_t breakPointId)
{
    1b34:	b538      	push	{r3, r4, r5, lr}
	//console write not working yet
#if defined(VM_DBT) && (VM_DBT == VM_DBT_NET_CONSOLE)
	return 'c';
#endif

	if (!alwaysBreak)
    1b36:	7e03      	ldrb	r3, [r0, #24]
    1b38:	b90b      	cbnz	r3, 1b3e <VisualMicroDebug::breakWait(unsigned char)+0xa>
		case 'h':
			//Serial.println("Remote debug session started");
#if defined(VM_DBT) && (VM_DBT == VM_DBT_NET_UDP)
			alwaysBreak = true;
#endif
			return 'c';
    1b3a:	2063      	movs	r0, #99	; 0x63
	//sendContinuedACK(breakPointId);
	//return 'c'; //if we get here we are continuing!

	//	return '?'; //software serial rubbish detected?
	return 'e';
}
    1b3c:	bd38      	pop	{r3, r4, r5, pc}
    1b3e:	460d      	mov	r5, r1
    1b40:	4604      	mov	r4, r0
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    1b42:	f001 fc9d 	bl	3480 <usb_serial_available>
#endif

	uint8_t b;

	//break/pause until we get a command
	if (available() == 0)
    1b46:	f010 0fff 	tst.w	r0, #255	; 0xff
    1b4a:	d101      	bne.n	1b50 <VisualMicroDebug::breakWait(unsigned char)+0x1c>
		if (!UDPConnectionStarted) {
			return 'c';
		}
#endif

		return 'e';
    1b4c:	2065      	movs	r0, #101	; 0x65
    1b4e:	bd38      	pop	{r3, r4, r5, pc}
    1b50:	f001 fc96 	bl	3480 <usb_serial_available>
	//doh!  better if we have any key to continue so users data doesn't get lost so much. 
	//NOTE. pause/breakpoints are best used with dedicated port!
	//while(true)
	//{

	while (available() > 0)
    1b54:	f010 0fff 	tst.w	r0, #255	; 0xff
    1b58:	d0f8      	beq.n	1b4c <VisualMicroDebug::breakWait(unsigned char)+0x18>
        virtual int read() { return usb_serial_getchar(); }
    1b5a:	f001 fcd1 	bl	3500 <usb_serial_getchar>
		//		while(VM_DEBUGGER_SOFT_TRANSPORT.available()>0)
		//		{
		//			b = VM_DEBUGGER_SOFT_TRANSPORT.read();
		//#endif
		//debug break commands
		switch (b)
    1b5e:	b2c0      	uxtb	r0, r0
    1b60:	f1a0 0358 	sub.w	r3, r0, #88	; 0x58
    1b64:	2b1e      	cmp	r3, #30
    1b66:	d8f3      	bhi.n	1b50 <VisualMicroDebug::breakWait(unsigned char)+0x1c>
    1b68:	a201      	add	r2, pc, #4	; (adr r2, 1b70 <VisualMicroDebug::breakWait(unsigned char)+0x3c>)
    1b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1b6e:	bf00      	nop
    1b70:	00001bf9 	.word	0x00001bf9
    1b74:	00001b51 	.word	0x00001b51
    1b78:	00001b51 	.word	0x00001b51
    1b7c:	00001b51 	.word	0x00001b51
    1b80:	00001b51 	.word	0x00001b51
    1b84:	00001b51 	.word	0x00001b51
    1b88:	00001b51 	.word	0x00001b51
    1b8c:	00001b51 	.word	0x00001b51
    1b90:	00001b51 	.word	0x00001b51
    1b94:	00001b51 	.word	0x00001b51
    1b98:	00001b51 	.word	0x00001b51
    1b9c:	00001bed 	.word	0x00001bed
    1ba0:	00001b51 	.word	0x00001b51
    1ba4:	00001b51 	.word	0x00001b51
    1ba8:	00001b51 	.word	0x00001b51
    1bac:	00001b51 	.word	0x00001b51
    1bb0:	00001b3b 	.word	0x00001b3b
    1bb4:	00001b51 	.word	0x00001b51
    1bb8:	00001b51 	.word	0x00001b51
    1bbc:	00001b51 	.word	0x00001b51
    1bc0:	00001b51 	.word	0x00001b51
    1bc4:	00001b51 	.word	0x00001b51
    1bc8:	00001b51 	.word	0x00001b51
    1bcc:	00001b51 	.word	0x00001b51
    1bd0:	00001b51 	.word	0x00001b51
    1bd4:	00001b3b 	.word	0x00001b3b
    1bd8:	00001b51 	.word	0x00001b51
    1bdc:	00001b51 	.word	0x00001b51
    1be0:	00001b51 	.word	0x00001b51
    1be4:	00001b51 	.word	0x00001b51
    1be8:	00001b3d 	.word	0x00001b3d
		{

		case 'c':
			sendContinuedACK(breakPointId);
    1bec:	4620      	mov	r0, r4
    1bee:	4629      	mov	r1, r5
    1bf0:	f7ff ff78 	bl	1ae4 <VisualMicroDebug::sendContinuedACK(unsigned char)>
			return 'c'; //if we get here we are continuing!
    1bf4:	2063      	movs	r0, #99	; 0x63
    1bf6:	bd38      	pop	{r3, r4, r5, pc}
					  //	sendContinuedACK(breakPointId);
					  //	return;

					  //switch off break until re-start. for dev/testing
		case 'X':
			alwaysBreak = false;
    1bf8:	2300      	movs	r3, #0
			return 'c';
    1bfa:	2063      	movs	r0, #99	; 0x63
					  //	sendContinuedACK(breakPointId);
					  //	return;

					  //switch off break until re-start. for dev/testing
		case 'X':
			alwaysBreak = false;
    1bfc:	7623      	strb	r3, [r4, #24]
    1bfe:	bd38      	pop	{r3, r4, r5, pc}

00001c00 <VisualMicroDebug::start(bool, bool)>:
}
#endif


void VisualMicroDebug::start(bool waitForKeyToStart, bool _alwaysBreak)
{
    1c00:	b570      	push	{r4, r5, r6, lr}
    1c02:	4605      	mov	r5, r0
    1c04:	4616      	mov	r6, r2
#if defined (VM_DEBUG_BREAKPAUSE)
	if (waitForKeyToStart)
    1c06:	b1a9      	cbz	r1, 1c34 <VisualMicroDebug::start(bool, bool)+0x34>
	{
		alwaysBreak = true;
    1c08:	2301      	movs	r3, #1
    1c0a:	4c0b      	ldr	r4, [pc, #44]	; (1c38 <VisualMicroDebug::start(bool, bool)+0x38>)
    1c0c:	7603      	strb	r3, [r0, #24]

		//server should know we are waiting sendMessage("Press any key to continue");
		while (breakWait(0) != 'c') {
    1c0e:	2100      	movs	r1, #0
    1c10:	4628      	mov	r0, r5
    1c12:	f7ff ff8f 	bl	1b34 <VisualMicroDebug::breakWait(unsigned char)>
    1c16:	2863      	cmp	r0, #99	; 0x63
    1c18:	d00c      	beq.n	1c34 <VisualMicroDebug::start(bool, bool)+0x34>
    1c1a:	6822      	ldr	r2, [r4, #0]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    1c1c:	1c51      	adds	r1, r2, #1
    1c1e:	6823      	ldr	r3, [r4, #0]

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    1c20:	429a      	cmp	r2, r3
    1c22:	d8f4      	bhi.n	1c0e <VisualMicroDebug::start(bool, bool)+0xe>
    1c24:	4299      	cmp	r1, r3
    1c26:	d2fa      	bcs.n	1c1e <VisualMicroDebug::start(bool, bool)+0x1e>
	if (waitForKeyToStart)
	{
		alwaysBreak = true;

		//server should know we are waiting sendMessage("Press any key to continue");
		while (breakWait(0) != 'c') {
    1c28:	2100      	movs	r1, #0
    1c2a:	4628      	mov	r0, r5
    1c2c:	f7ff ff82 	bl	1b34 <VisualMicroDebug::breakWait(unsigned char)>
    1c30:	2863      	cmp	r0, #99	; 0x63
    1c32:	d1f2      	bne.n	1c1a <VisualMicroDebug::start(bool, bool)+0x1a>
			DBG_YieldAndWait(1);
		}
		//breakWait(0);
	}
	alwaysBreak = _alwaysBreak;
    1c34:	762e      	strb	r6, [r5, #24]
    1c36:	bd70      	pop	{r4, r5, r6, pc}
    1c38:	200225dc 	.word	0x200225dc

00001c3c <_GLOBAL__sub_I__ZN16VisualMicroDebug16DBG_YieldAndWaitEm>:
	//wait if we have to
	//try to prevent new users from overloading bandwidth and filling windows buffer
	//can be overriden via preferences
	//defaults to 50ms; needs to allow time for windows to recover if it pauses, so we need to be slower than the extensions and debugger can process + a bit

	BreakStartMillis = 0L;
    1c3c:	4b03      	ldr	r3, [pc, #12]	; (1c4c <_GLOBAL__sub_I__ZN16VisualMicroDebug16DBG_YieldAndWaitEm+0x10>)
    1c3e:	2200      	movs	r2, #0
    1c40:	609a      	str	r2, [r3, #8]
	BreakPrevMillis = 0L;
    1c42:	60da      	str	r2, [r3, #12]
	InBreakMsgRepeatMS = 0L;
    1c44:	611a      	str	r2, [r3, #16]
	InBreakMsgSent = 0L;
    1c46:	615a      	str	r2, [r3, #20]
    1c48:	4770      	bx	lr
    1c4a:	bf00      	nop
    1c4c:	20022568 	.word	0x20022568

00001c50 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>:
	m_nPowerData = 0xFFFFFFFF;
}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
    1c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
    1c52:	1e1e      	subs	r6, r3, #0
	m_nPowerData = 0xFFFFFFFF;
}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
    1c54:	4604      	mov	r4, r0
    1c56:	460f      	mov	r7, r1
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
    1c58:	dd0f      	ble.n	1c7a <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x2a>
    1c5a:	eb02 0542 	add.w	r5, r2, r2, lsl #1
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
    1c5e:	6823      	ldr	r3, [r4, #0]
    1c60:	4620      	mov	r0, r4
    1c62:	689b      	ldr	r3, [r3, #8]
    1c64:	4798      	blx	r3
    /// get the next controller in the chain after this one.  will return NULL at the end of the chain
    CLEDController *next() { return m_pNext; }

	/// set the default array of leds to be used by this controller
    CLEDController & setLeds(CRGB *data, int nLeds) {
        m_Data = data;
    1c66:	197a      	adds	r2, r7, r5
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
    1c68:	6823      	ldr	r3, [r4, #0]
    1c6a:	6062      	str	r2, [r4, #4]
    1c6c:	4a0c      	ldr	r2, [pc, #48]	; (1ca0 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x50>)
    1c6e:	695b      	ldr	r3, [r3, #20]
        m_nLeds = nLeds;
    1c70:	6166      	str	r6, [r4, #20]
    1c72:	4293      	cmp	r3, r2
    1c74:	d104      	bne.n	1c80 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x30>
	return *pLed;
}
    1c76:	4620      	mov	r0, r4
    1c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;
    1c7a:	4616      	mov	r6, r2
    1c7c:	2500      	movs	r5, #0
    1c7e:	e7ee      	b.n	1c5e <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0xe>

	pLed->init();
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
    1c80:	4620      	mov	r0, r4
    1c82:	4798      	blx	r3

void CFastLED::setMaxRefreshRate(uint16_t refresh, bool constrain) {
  if(constrain) {
    // if we're constraining, the new value of m_nMinMicros _must_ be higher than previously (because we're only
    // allowed to slow things down if constraining)
    if(refresh > 0) {
    1c84:	2800      	cmp	r0, #0
    1c86:	d0f6      	beq.n	1c76 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x26>
      m_nMinMicros = ( (1000000/refresh) >  m_nMinMicros) ? (1000000/refresh) : m_nMinMicros;
    1c88:	4b06      	ldr	r3, [pc, #24]	; (1ca4 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x54>)
    1c8a:	4a07      	ldr	r2, [pc, #28]	; (1ca8 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x58>)
    1c8c:	fb93 f0f0 	sdiv	r0, r3, r0
    1c90:	6853      	ldr	r3, [r2, #4]
    1c92:	4298      	cmp	r0, r3
    1c94:	bf38      	it	cc
    1c96:	4618      	movcc	r0, r3
    1c98:	6050      	str	r0, [r2, #4]

	pLed->init();
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
	return *pLed;
}
    1c9a:	4620      	mov	r0, r4
    1c9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1c9e:	bf00      	nop
    1ca0:	0000007d 	.word	0x0000007d
    1ca4:	000f4240 	.word	0x000f4240
    1ca8:	200225b0 	.word	0x200225b0

00001cac <CFastLED::show(unsigned char)>:

void CFastLED::show(uint8_t scale) {
    1cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1cb0:	6843      	ldr	r3, [r0, #4]
    1cb2:	b083      	sub	sp, #12
    1cb4:	4606      	mov	r6, r0
    1cb6:	460f      	mov	r7, r1
    1cb8:	4c35      	ldr	r4, [pc, #212]	; (1d90 <CFastLED::show(unsigned char)+0xe4>)
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    1cba:	2b00      	cmp	r3, #0
    1cbc:	d15f      	bne.n	1d7e <CFastLED::show(unsigned char)+0xd2>
	lastshow = micros();
    1cbe:	f000 fa45 	bl	214c <micros>

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    1cc2:	68f3      	ldr	r3, [r6, #12]
}

void CFastLED::show(uint8_t scale) {
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
	lastshow = micros();
    1cc4:	6020      	str	r0, [r4, #0]

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    1cc6:	b11b      	cbz	r3, 1cd0 <CFastLED::show(unsigned char)+0x24>
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
    1cc8:	4638      	mov	r0, r7
    1cca:	68b1      	ldr	r1, [r6, #8]
    1ccc:	4798      	blx	r3
    1cce:	4607      	mov	r7, r0
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    /// get the first led controller in the chain of controllers
    static CLEDController *head() { return m_pHead; }
    1cd0:	4b30      	ldr	r3, [pc, #192]	; (1d94 <CFastLED::show(unsigned char)+0xe8>)
    1cd2:	681c      	ldr	r4, [r3, #0]
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    1cd4:	2c00      	cmp	r4, #0
    1cd6:	d037      	beq.n	1d48 <CFastLED::show(unsigned char)+0x9c>

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    1cd8:	2500      	movs	r5, #0
		uint8_t d = pCur->getDither();
		if(m_nFPS < 100) { pCur->setDither(0); }
    1cda:	8873      	ldrh	r3, [r6, #2]
    1cdc:	f894 8012 	ldrb.w	r8, [r4, #18]
    1ce0:	2b63      	cmp	r3, #99	; 0x63
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    1ce2:	6823      	ldr	r3, [r4, #0]
    1ce4:	6861      	ldr	r1, [r4, #4]

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    1ce6:	bf98      	it	ls
    1ce8:	74a5      	strbls	r5, [r4, #18]
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
    1cea:	f88d 5004 	strb.w	r5, [sp, #4]
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    1cee:	f8d3 9004 	ldr.w	r9, [r3, #4]
    1cf2:	f88d 5005 	strb.w	r5, [sp, #5]
    1cf6:	f88d 5006 	strb.w	r5, [sp, #6]
    1cfa:	6962      	ldr	r2, [r4, #20]
      #if defined(NO_CORRECTION) && (NO_CORRECTION==1)
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
    1cfc:	b1e7      	cbz	r7, 1d38 <CFastLED::show(unsigned char)+0x8c>
    1cfe:	f104 000b 	add.w	r0, r4, #11
    1d02:	f10d 0e04 	add.w	lr, sp, #4
    1d06:	f104 0c0e 	add.w	ip, r4, #14
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
    1d0a:	f810 af01 	ldrb.w	sl, [r0, #1]!
                      uint8_t ct = colorTemperature.raw[i];
    1d0e:	f890 b003 	ldrb.w	fp, [r0, #3]
                      if(cc > 0 && ct > 0) {
    1d12:	f1ba 0f00 	cmp.w	sl, #0
    1d16:	d00b      	beq.n	1d30 <CFastLED::show(unsigned char)+0x84>
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    1d18:	f10b 0301 	add.w	r3, fp, #1

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
                      uint8_t ct = colorTemperature.raw[i];
                      if(cc > 0 && ct > 0) {
    1d1c:	f1bb 0f00 	cmp.w	fp, #0
    1d20:	d006      	beq.n	1d30 <CFastLED::show(unsigned char)+0x84>
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    1d22:	fb0a 3303 	mla	r3, sl, r3, r3
    1d26:	fb07 f303 	mul.w	r3, r7, r3
                          work /= 0x10000L;
                          adj.raw[i] = work & 0xFF;
    1d2a:	0c1b      	lsrs	r3, r3, #16
    1d2c:	f88e 3000 	strb.w	r3, [lr]
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
    1d30:	4560      	cmp	r0, ip
    1d32:	f10e 0e01 	add.w	lr, lr, #1
    1d36:	d1e8      	bne.n	1d0a <CFastLED::show(unsigned char)+0x5e>
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    1d38:	4620      	mov	r0, r4
    1d3a:	ab01      	add	r3, sp, #4
    1d3c:	47c8      	blx	r9

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    1d3e:	f884 8012 	strb.w	r8, [r4, #18]
    1d42:	68a4      	ldr	r4, [r4, #8]
	if(m_pPowerFunc) {
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    1d44:	2c00      	cmp	r4, #0
    1d46:	d1c8      	bne.n	1cda <CFastLED::show(unsigned char)+0x2e>

void CFastLED::countFPS(int nFrames) {
  static int br = 0;
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
    1d48:	4813      	ldr	r0, [pc, #76]	; (1d98 <CFastLED::show(unsigned char)+0xec>)
    1d4a:	6802      	ldr	r2, [r0, #0]
    1d4c:	1c51      	adds	r1, r2, #1
    1d4e:	2a18      	cmp	r2, #24
    1d50:	6001      	str	r1, [r0, #0]
    1d52:	dd11      	ble.n	1d78 <CFastLED::show(unsigned char)+0xcc>
    1d54:	4d11      	ldr	r5, [pc, #68]	; (1d9c <CFastLED::show(unsigned char)+0xf0>)
      uint32_t now = millis();
      now -= lastframe;
      if( now == 0 ) {
          now = 1; // prevent division by zero below
      }
      m_nFPS = (br * 1000) / now;
    1d56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  static int br = 0;
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
      uint32_t now = millis();
      now -= lastframe;
    1d5a:	4c11      	ldr	r4, [pc, #68]	; (1da0 <CFastLED::show(unsigned char)+0xf4>)
      if( now == 0 ) {
          now = 1; // prevent division by zero below
      }
      m_nFPS = (br * 1000) / now;
    br = 0;
    1d5c:	2700      	movs	r7, #0
    1d5e:	682a      	ldr	r2, [r5, #0]
      uint32_t now = millis();
      now -= lastframe;
      if( now == 0 ) {
          now = 1; // prevent division by zero below
      }
      m_nFPS = (br * 1000) / now;
    1d60:	fb03 f101 	mul.w	r1, r3, r1
  static int br = 0;
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
      uint32_t now = millis();
      now -= lastframe;
    1d64:	6823      	ldr	r3, [r4, #0]
    1d66:	682d      	ldr	r5, [r5, #0]
      if( now == 0 ) {
          now = 1; // prevent division by zero below
    1d68:	1ad3      	subs	r3, r2, r3
      }
      m_nFPS = (br * 1000) / now;
    br = 0;
    1d6a:	6007      	str	r7, [r0, #0]
    lastframe = millis();
    1d6c:	6025      	str	r5, [r4, #0]

  if(br++ >= nFrames) {
      uint32_t now = millis();
      now -= lastframe;
      if( now == 0 ) {
          now = 1; // prevent division by zero below
    1d6e:	bf08      	it	eq
    1d70:	2301      	moveq	r3, #1
      }
      m_nFPS = (br * 1000) / now;
    1d72:	fbb1 f3f3 	udiv	r3, r1, r3
    1d76:	8073      	strh	r3, [r6, #2]
		pCur->showLeds(scale);
		pCur->setDither(d);
		pCur = pCur->next();
	}
	countFPS();
}
    1d78:	b003      	add	sp, #12
    1d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return *pLed;
}

void CFastLED::show(uint8_t scale) {
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    1d7e:	f000 f9e5 	bl	214c <micros>
    1d82:	6822      	ldr	r2, [r4, #0]
    1d84:	6873      	ldr	r3, [r6, #4]
    1d86:	1a80      	subs	r0, r0, r2
    1d88:	4298      	cmp	r0, r3
    1d8a:	d396      	bcc.n	1cba <CFastLED::show(unsigned char)+0xe>
    1d8c:	e797      	b.n	1cbe <CFastLED::show(unsigned char)+0x12>
    1d8e:	bf00      	nop
    1d90:	200225c8 	.word	0x200225c8
    1d94:	200225c0 	.word	0x200225c0
    1d98:	200225c4 	.word	0x200225c4
    1d9c:	200225dc 	.word	0x200225dc
    1da0:	200225cc 	.word	0x200225cc

00001da4 <_GLOBAL__sub_I_pSmartMatrix>:
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    1da4:	4b04      	ldr	r3, [pc, #16]	; (1db8 <_GLOBAL__sub_I_pSmartMatrix+0x14>)
	m_nFPS = 0;
    1da6:	2200      	movs	r2, #0
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    1da8:	20ff      	movs	r0, #255	; 0xff
	m_nFPS = 0;
	m_pPowerFunc = NULL;
	m_nPowerData = 0xFFFFFFFF;
    1daa:	f04f 31ff 	mov.w	r1, #4294967295

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
	m_nFPS = 0;
    1dae:	805a      	strh	r2, [r3, #2]
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    1db0:	7018      	strb	r0, [r3, #0]
	m_nFPS = 0;
	m_pPowerFunc = NULL;
	m_nPowerData = 0xFFFFFFFF;
    1db2:	6099      	str	r1, [r3, #8]
CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
	m_nFPS = 0;
	m_pPowerFunc = NULL;
    1db4:	60da      	str	r2, [r3, #12]
    1db6:	4770      	bx	lr
    1db8:	200225b0 	.word	0x200225b0

00001dbc <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    1dbc:	4a96      	ldr	r2, [pc, #600]	; (2018 <set_arm_clock+0x25c>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    1dbe:	4b97      	ldr	r3, [pc, #604]	; (201c <set_arm_clock+0x260>)
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    1dc0:	4290      	cmp	r0, r2
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
    1dc2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;
    1dc6:	4c96      	ldr	r4, [pc, #600]	; (2020 <set_arm_clock+0x264>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    1dc8:	f8d3 e014 	ldr.w	lr, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    1dcc:	6999      	ldr	r1, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    1dce:	68e6      	ldr	r6, [r4, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    1dd0:	d91c      	bls.n	1e0c <set_arm_clock+0x50>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    1dd2:	4b94      	ldr	r3, [pc, #592]	; (2024 <set_arm_clock+0x268>)
    1dd4:	4298      	cmp	r0, r3
    1dd6:	f240 8115 	bls.w	2004 <set_arm_clock+0x248>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    1dda:	4b93      	ldr	r3, [pc, #588]	; (2028 <set_arm_clock+0x26c>)
    1ddc:	f240 6527 	movw	r5, #1575	; 0x627
    1de0:	4f92      	ldr	r7, [pc, #584]	; (202c <set_arm_clock+0x270>)
    1de2:	4403      	add	r3, r0
    1de4:	4c92      	ldr	r4, [pc, #584]	; (2030 <set_arm_clock+0x274>)
    1de6:	0a1a      	lsrs	r2, r3, #8
    1de8:	fba7 3202 	umull	r3, r2, r7, r2
    1dec:	09d3      	lsrs	r3, r2, #7
    1dee:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    1df2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    1df6:	f202 43e2 	addw	r3, r2, #1250	; 0x4e2
    1dfa:	42ab      	cmp	r3, r5
    1dfc:	bf28      	it	cs
    1dfe:	462b      	movcs	r3, r5
    1e00:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
    1e04:	fba4 3503 	umull	r3, r5, r4, r3
    1e08:	08ed      	lsrs	r5, r5, #3
    1e0a:	e004      	b.n	1e16 <set_arm_clock+0x5a>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24000000) {
    1e0c:	4d89      	ldr	r5, [pc, #548]	; (2034 <set_arm_clock+0x278>)
    1e0e:	42a8      	cmp	r0, r5
    1e10:	bf94      	ite	ls
    1e12:	2506      	movls	r5, #6
    1e14:	250e      	movhi	r5, #14
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    1e16:	4a81      	ldr	r2, [pc, #516]	; (201c <set_arm_clock+0x260>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    1e18:	f006 071f 	and.w	r7, r6, #31
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    1e1c:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    1e20:	42af      	cmp	r7, r5
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    1e22:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    1e26:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    1e2a:	d20a      	bcs.n	1e42 <set_arm_clock+0x86>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    1e2c:	4b7c      	ldr	r3, [pc, #496]	; (2020 <set_arm_clock+0x264>)

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    1e2e:	f026 061f 	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    1e32:	461a      	mov	r2, r3
	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    1e34:	432e      	orrs	r6, r5
		DCDC_REG3 = dcdc;
    1e36:	60de      	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    1e38:	6813      	ldr	r3, [r2, #0]
    1e3a:	2b00      	cmp	r3, #0
    1e3c:	dafc      	bge.n	1e38 <set_arm_clock+0x7c>
    1e3e:	f006 071f 	and.w	r7, r6, #31
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    1e42:	f01e 7300 	ands.w	r3, lr, #33554432	; 0x2000000
    1e46:	d131      	bne.n	1eac <set_arm_clock+0xf0>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    1e48:	4c7b      	ldr	r4, [pc, #492]	; (2038 <set_arm_clock+0x27c>)
    1e4a:	4a7c      	ldr	r2, [pc, #496]	; (203c <set_arm_clock+0x280>)
    1e4c:	f8d4 c010 	ldr.w	ip, [r4, #16]
    1e50:	4614      	mov	r4, r2
    1e52:	ea0c 0202 	and.w	r2, ip, r2
    1e56:	42a2      	cmp	r2, r4
    1e58:	bf0a      	itet	eq
    1e5a:	f04f 53c0 	moveq.w	r3, #402653184	; 0x18000000
    1e5e:	f44f 5280 	movne.w	r2, #4096	; 0x1000
    1e62:	2200      	moveq	r2, #0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    1e64:	ea8e 0403 	eor.w	r4, lr, r3
    1e68:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    1e6c:	d008      	beq.n	1e80 <set_arm_clock+0xc4>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    1e6e:	f02e 5e60 	bic.w	lr, lr, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    1e72:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
			CCM_CBCDR = cbcdr;
    1e76:	4c69      	ldr	r4, [pc, #420]	; (201c <set_arm_clock+0x260>)
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    1e78:	ea43 0e0e 	orr.w	lr, r3, lr
			CCM_CBCDR = cbcdr;
    1e7c:	f8c4 e014 	str.w	lr, [r4, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    1e80:	ea81 0302 	eor.w	r3, r1, r2
    1e84:	f413 5f40 	tst.w	r3, #12288	; 0x3000
    1e88:	d008      	beq.n	1e9c <set_arm_clock+0xe0>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    1e8a:	4b64      	ldr	r3, [pc, #400]	; (201c <set_arm_clock+0x260>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    1e8c:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    1e90:	4311      	orrs	r1, r2
			CCM_CBCMR = cbcmr;
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    1e92:	461a      	mov	r2, r3
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    1e94:	6199      	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    1e96:	6c93      	ldr	r3, [r2, #72]	; 0x48
    1e98:	071c      	lsls	r4, r3, #28
    1e9a:	d4fc      	bmi.n	1e96 <set_arm_clock+0xda>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    1e9c:	f04e 7e00 	orr.w	lr, lr, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    1ea0:	4a5e      	ldr	r2, [pc, #376]	; (201c <set_arm_clock+0x260>)
    1ea2:	f8c2 e014 	str.w	lr, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    1ea6:	6c93      	ldr	r3, [r2, #72]	; 0x48
    1ea8:	0699      	lsls	r1, r3, #26
    1eaa:	d4fc      	bmi.n	1ea6 <set_arm_clock+0xea>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
    1eac:	2101      	movs	r1, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    1eae:	4c64      	ldr	r4, [pc, #400]	; (2040 <set_arm_clock+0x284>)
	}

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
    1eb0:	460a      	mov	r2, r1
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    1eb2:	fb01 f302 	mul.w	r3, r1, r2
    1eb6:	fb00 f303 	mul.w	r3, r0, r3
    1eba:	42a3      	cmp	r3, r4
    1ebc:	d809      	bhi.n	1ed2 <set_arm_clock+0x116>
		if (div_arm < 8) {
    1ebe:	2a07      	cmp	r2, #7
    1ec0:	f200 8095 	bhi.w	1fee <set_arm_clock+0x232>
			div_arm = div_arm + 1;
    1ec4:	3201      	adds	r2, #1
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    1ec6:	fb01 f302 	mul.w	r3, r1, r2
    1eca:	fb00 f303 	mul.w	r3, r0, r3
    1ece:	42a3      	cmp	r3, r4
    1ed0:	d9f5      	bls.n	1ebe <set_arm_clock+0x102>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    1ed2:	485c      	ldr	r0, [pc, #368]	; (2044 <set_arm_clock+0x288>)
    1ed4:	4c5c      	ldr	r4, [pc, #368]	; (2048 <set_arm_clock+0x28c>)
    1ed6:	4418      	add	r0, r3
    1ed8:	fba4 0300 	umull	r0, r3, r4, r0
    1edc:	0d1b      	lsrs	r3, r3, #20
	if (mult > 108) mult = 108;
    1ede:	2b6c      	cmp	r3, #108	; 0x6c
    1ee0:	f200 808b 	bhi.w	1ffa <set_arm_clock+0x23e>
	if (mult < 54) mult = 54;
    1ee4:	2b35      	cmp	r3, #53	; 0x35
    1ee6:	f200 808f 	bhi.w	2008 <set_arm_clock+0x24c>
    1eea:	f8df 8188 	ldr.w	r8, [pc, #392]	; 2074 <set_arm_clock+0x2b8>
    1eee:	2336      	movs	r3, #54	; 0x36
    1ef0:	4856      	ldr	r0, [pc, #344]	; (204c <set_arm_clock+0x290>)

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    1ef2:	f8df c144 	ldr.w	ip, [pc, #324]	; 2038 <set_arm_clock+0x27c>
    1ef6:	4c56      	ldr	r4, [pc, #344]	; (2050 <set_arm_clock+0x294>)
    1ef8:	f8dc 9000 	ldr.w	r9, [ip]
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    1efc:	fbb0 f0f2 	udiv	r0, r0, r2

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    1f00:	ea09 0404 	and.w	r4, r9, r4
    1f04:	4544      	cmp	r4, r8
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    1f06:	fbb0 f0f1 	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    1f0a:	d00b      	beq.n	1f24 <set_arm_clock+0x168>
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    1f0c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    1f10:	f44f 5880 	mov.w	r8, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    1f14:	4664      	mov	r4, ip
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    1f16:	f8cc 8000 	str.w	r8, [ip]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    1f1a:	f8cc 3000 	str.w	r3, [ip]
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    1f1e:	6823      	ldr	r3, [r4, #0]
    1f20:	2b00      	cmp	r3, #0
    1f22:	dafc      	bge.n	1f1e <set_arm_clock+0x162>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    1f24:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 201c <set_arm_clock+0x260>
    1f28:	3a01      	subs	r2, #1
    1f2a:	f8dc 3010 	ldr.w	r3, [ip, #16]
    1f2e:	f003 0307 	and.w	r3, r3, #7
    1f32:	4293      	cmp	r3, r2
    1f34:	d007      	beq.n	1f46 <set_arm_clock+0x18a>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    1f36:	f002 0207 	and.w	r2, r2, #7
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    1f3a:	4664      	mov	r4, ip
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    1f3c:	f8cc 2010 	str.w	r2, [ip, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    1f40:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    1f42:	03db      	lsls	r3, r3, #15
    1f44:	d4fc      	bmi.n	1f40 <set_arm_clock+0x184>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    1f46:	3901      	subs	r1, #1
    1f48:	0289      	lsls	r1, r1, #10
    1f4a:	ea8e 0301 	eor.w	r3, lr, r1
    1f4e:	f413 5fe0 	tst.w	r3, #7168	; 0x1c00
    1f52:	d00c      	beq.n	1f6e <set_arm_clock+0x1b2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
		CCM_CBCDR = cbcdr;
    1f54:	4b31      	ldr	r3, [pc, #196]	; (201c <set_arm_clock+0x260>)
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    1f56:	f42e 5ee0 	bic.w	lr, lr, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    1f5a:	f401 51e0 	and.w	r1, r1, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    1f5e:	461a      	mov	r2, r3
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    1f60:	ea41 0e0e 	orr.w	lr, r1, lr
		CCM_CBCDR = cbcdr;
    1f64:	f8c3 e014 	str.w	lr, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    1f68:	6c93      	ldr	r3, [r2, #72]	; 0x48
    1f6a:	0799      	lsls	r1, r3, #30
    1f6c:	d4fc      	bmi.n	1f68 <set_arm_clock+0x1ac>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    1f6e:	4b39      	ldr	r3, [pc, #228]	; (2054 <set_arm_clock+0x298>)
    1f70:	4939      	ldr	r1, [pc, #228]	; (2058 <set_arm_clock+0x29c>)
    1f72:	4403      	add	r3, r0
    1f74:	09db      	lsrs	r3, r3, #7
    1f76:	fba1 3103 	umull	r3, r1, r1, r3
    1f7a:	0b09      	lsrs	r1, r1, #12
    1f7c:	2904      	cmp	r1, #4
    1f7e:	bf28      	it	cs
    1f80:	2104      	movcs	r1, #4
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    1f82:	1e4b      	subs	r3, r1, #1
    1f84:	021b      	lsls	r3, r3, #8
    1f86:	ea8e 0203 	eor.w	r2, lr, r3
    1f8a:	f412 7f40 	tst.w	r2, #768	; 0x300
    1f8e:	d007      	beq.n	1fa0 <set_arm_clock+0x1e4>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    1f90:	f42e 7e40 	bic.w	lr, lr, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    1f94:	f403 7340 	and.w	r3, r3, #768	; 0x300
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    1f98:	4a20      	ldr	r2, [pc, #128]	; (201c <set_arm_clock+0x260>)

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    1f9a:	ea43 030e 	orr.w	r3, r3, lr
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    1f9e:	6153      	str	r3, [r2, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    1fa0:	4b1e      	ldr	r3, [pc, #120]	; (201c <set_arm_clock+0x260>)
    1fa2:	695c      	ldr	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    1fa4:	461a      	mov	r2, r3
		CCM_CBCDR = cbcdr;
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    1fa6:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
    1faa:	615c      	str	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    1fac:	6c93      	ldr	r3, [r2, #72]	; 0x48
    1fae:	069b      	lsls	r3, r3, #26
    1fb0:	d4fc      	bmi.n	1fac <set_arm_clock+0x1f0>

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    1fb2:	4b2a      	ldr	r3, [pc, #168]	; (205c <set_arm_clock+0x2a0>)
    1fb4:	f04f 32ff 	mov.w	r2, #4294967295
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    1fb8:	4c29      	ldr	r4, [pc, #164]	; (2060 <set_arm_clock+0x2a4>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    1fba:	42bd      	cmp	r5, r7
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    1fbc:	fba3 e300 	umull	lr, r3, r3, r0
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    1fc0:	6020      	str	r0, [r4, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    1fc2:	ea4f 4393 	mov.w	r3, r3, lsr #18
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    1fc6:	4c27      	ldr	r4, [pc, #156]	; (2064 <set_arm_clock+0x2a8>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    1fc8:	fbb2 f3f3 	udiv	r3, r2, r3
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    1fcc:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    1fd0:	4a25      	ldr	r2, [pc, #148]	; (2068 <set_arm_clock+0x2ac>)
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    1fd2:	6021      	str	r1, [r4, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    1fd4:	6013      	str	r3, [r2, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    1fd6:	d208      	bcs.n	1fea <set_arm_clock+0x22e>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    1fd8:	4b11      	ldr	r3, [pc, #68]	; (2020 <set_arm_clock+0x264>)
	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    1fda:	f026 061f 	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    1fde:	461a      	mov	r2, r3

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    1fe0:	432e      	orrs	r6, r5
		DCDC_REG3 = dcdc;
    1fe2:	60de      	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    1fe4:	6813      	ldr	r3, [r2, #0]
    1fe6:	2b00      	cmp	r3, #0
    1fe8:	dafc      	bge.n	1fe4 <set_arm_clock+0x228>
	}

	return frequency;
}
    1fea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
    1fee:	2904      	cmp	r1, #4
    1ff0:	f63f af6f 	bhi.w	1ed2 <set_arm_clock+0x116>
				div_ahb = div_ahb + 1;
    1ff4:	3101      	adds	r1, #1
				div_arm = 1;
    1ff6:	2201      	movs	r2, #1
    1ff8:	e75b      	b.n	1eb2 <set_arm_clock+0xf6>
    1ffa:	f8df 807c 	ldr.w	r8, [pc, #124]	; 2078 <set_arm_clock+0x2bc>
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
    1ffe:	236c      	movs	r3, #108	; 0x6c
    2000:	481a      	ldr	r0, [pc, #104]	; (206c <set_arm_clock+0x2b0>)
    2002:	e776      	b.n	1ef2 <set_arm_clock+0x136>
    2004:	2512      	movs	r5, #18
    2006:	e706      	b.n	1e16 <set_arm_clock+0x5a>
    2008:	4819      	ldr	r0, [pc, #100]	; (2070 <set_arm_clock+0x2b4>)
    200a:	f8df 8070 	ldr.w	r8, [pc, #112]	; 207c <set_arm_clock+0x2c0>
    200e:	fb00 f003 	mul.w	r0, r0, r3
    2012:	ea43 0808 	orr.w	r8, r3, r8
    2016:	e76c      	b.n	1ef2 <set_arm_clock+0x136>
    2018:	1f78a400 	.word	0x1f78a400
    201c:	400fc000 	.word	0x400fc000
    2020:	40080000 	.word	0x40080000
    2024:	23c34600 	.word	0x23c34600
    2028:	dc3cba00 	.word	0xdc3cba00
    202c:	004cb223 	.word	0x004cb223
    2030:	51eb851f 	.word	0x51eb851f
    2034:	016e3600 	.word	0x016e3600
    2038:	400d8000 	.word	0x400d8000
    203c:	80003040 	.word	0x80003040
    2040:	269fb1ff 	.word	0x269fb1ff
    2044:	005b8d80 	.word	0x005b8d80
    2048:	165e9f81 	.word	0x165e9f81
    204c:	269fb200 	.word	0x269fb200
    2050:	8001307f 	.word	0x8001307f
    2054:	08f0d17f 	.word	0x08f0d17f
    2058:	00e5109f 	.word	0x00e5109f
    205c:	431bde83 	.word	0x431bde83
    2060:	200122a8 	.word	0x200122a8
    2064:	200122a4 	.word	0x200122a4
    2068:	200225d8 	.word	0x200225d8
    206c:	4d3f6400 	.word	0x4d3f6400
    2070:	00b71b00 	.word	0x00b71b00
    2074:	80002036 	.word	0x80002036
    2078:	8000206c 	.word	0x8000206c
    207c:	80002000 	.word	0x80002000

00002080 <delay>:

void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    2080:	2800      	cmp	r0, #0
    2082:	d057      	beq.n	2134 <delay+0xb4>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    2084:	2201      	movs	r2, #1
{

}*/

void delay(uint32_t msec)
{
    2086:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    208a:	b085      	sub	sp, #20
    208c:	4683      	mov	fp, r0
    208e:	4c2a      	ldr	r4, [pc, #168]	; (2138 <delay+0xb8>)
    2090:	4d2a      	ldr	r5, [pc, #168]	; (213c <delay+0xbc>)
    2092:	4e2b      	ldr	r6, [pc, #172]	; (2140 <delay+0xc0>)
    2094:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    2098:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    209c:	6828      	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    209e:	6833      	ldr	r3, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    20a0:	e844 2100 	strex	r1, r2, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    20a4:	2900      	cmp	r1, #0
    20a6:	d1f7      	bne.n	2098 <delay+0x18>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    20a8:	4f26      	ldr	r7, [pc, #152]	; (2144 <delay+0xc4>)
    20aa:	e9cd 8902 	strd	r8, r9, [sp, #8]
    20ae:	683a      	ldr	r2, [r7, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    20b0:	1ad3      	subs	r3, r2, r3
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    20b2:	4a25      	ldr	r2, [pc, #148]	; (2148 <delay+0xc8>)
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    20b4:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    20b8:	9701      	str	r7, [sp, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    20ba:	6812      	ldr	r2, [r2, #0]
    20bc:	2701      	movs	r7, #1
    20be:	fba3 2302 	umull	r2, r3, r3, r2
	if (frac > 1000) frac = 1000;
    20c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    20c6:	4698      	mov	r8, r3
	if (frac > 1000) frac = 1000;
    20c8:	2300      	movs	r3, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    20ca:	428b      	cmp	r3, r1
    20cc:	bf08      	it	eq
    20ce:	4542      	cmpeq	r2, r8
    20d0:	bf2c      	ite	cs
    20d2:	46c2      	movcs	sl, r8
    20d4:	46f2      	movcc	sl, lr
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    20d6:	fb0e aa00 	mla	sl, lr, r0, sl
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    20da:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    20de:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    20e0:	6831      	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    20e2:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    20e6:	2b00      	cmp	r3, #0
    20e8:	d1f7      	bne.n	20da <delay+0x5a>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    20ea:	9801      	ldr	r0, [sp, #4]
    20ec:	6800      	ldr	r0, [r0, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    20ee:	1a41      	subs	r1, r0, r1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    20f0:	4815      	ldr	r0, [pc, #84]	; (2148 <delay+0xc8>)
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    20f2:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    20f6:	6800      	ldr	r0, [r0, #0]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    20f8:	fb0e f202 	mul.w	r2, lr, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    20fc:	fba1 0100 	umull	r0, r1, r1, r0
	if (frac > 1000) frac = 1000;
    2100:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    2104:	ebca 0202 	rsb	r2, sl, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    2108:	4688      	mov	r8, r1
	if (frac > 1000) frac = 1000;
    210a:	2100      	movs	r1, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    210c:	4299      	cmp	r1, r3
    210e:	bf08      	it	eq
    2110:	4540      	cmpeq	r0, r8
    2112:	bf2c      	ite	cs
    2114:	4643      	movcs	r3, r8
    2116:	4673      	movcc	r3, lr
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    2118:	441a      	add	r2, r3
    211a:	4572      	cmp	r2, lr
    211c:	d307      	bcc.n	212e <delay+0xae>
			if (--msec == 0) return;
    211e:	f1bb 0b01 	subs.w	fp, fp, #1
			start += 1000;
    2122:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
    2126:	d1d8      	bne.n	20da <delay+0x5a>
			start += 1000;
		}
		yield();
	}
	// TODO...
}
    2128:	b005      	add	sp, #20
    212a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
			start += 1000;
		}
		yield();
    212e:	f001 fb3b 	bl	37a8 <yield>
	}
    2132:	e7d2      	b.n	20da <delay+0x5a>
    2134:	4770      	bx	lr
    2136:	bf00      	nop
    2138:	20022834 	.word	0x20022834
    213c:	200225dc 	.word	0x200225dc
    2140:	200225d4 	.word	0x200225d4
    2144:	e0001004 	.word	0xe0001004
    2148:	200225d8 	.word	0x200225d8

0000214c <micros>:
	// TODO...
}

uint32_t micros(void)
{
    214c:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
    2150:	4a12      	ldr	r2, [pc, #72]	; (219c <micros+0x50>)
    2152:	2601      	movs	r6, #1
    2154:	4d12      	ldr	r5, [pc, #72]	; (21a0 <micros+0x54>)
    2156:	4c13      	ldr	r4, [pc, #76]	; (21a4 <micros+0x58>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    2158:	e852 3f00 	ldrex	r3, [r2]
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    215c:	6829      	ldr	r1, [r5, #0]
		scc = systick_cycle_count;
    215e:	6820      	ldr	r0, [r4, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    2160:	e842 6300 	strex	r3, r6, [r2]
	} while ( __STREXW(1, &systick_safe_read));
    2164:	2b00      	cmp	r3, #0
    2166:	d1f7      	bne.n	2158 <micros+0xc>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    2168:	4a0f      	ldr	r2, [pc, #60]	; (21a8 <micros+0x5c>)
    216a:	6816      	ldr	r6, [r2, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    216c:	4f0f      	ldr	r7, [pc, #60]	; (21ac <micros+0x60>)
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    216e:	1a32      	subs	r2, r6, r0
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
    2170:	f04f 0900 	mov.w	r9, #0
    2174:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    2178:	683e      	ldr	r6, [r7, #0]
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
	return usec;
    217a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    217e:	4599      	cmp	r9, r3
    2180:	fba2 6706 	umull	r6, r7, r2, r6
    2184:	bf08      	it	eq
    2186:	45b8      	cmpeq	r8, r7
    2188:	463c      	mov	r4, r7
    218a:	bf2c      	ite	cs
    218c:	463c      	movcs	r4, r7
    218e:	4604      	movcc	r4, r0
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
	return usec;
}
    2190:	fb00 4001 	mla	r0, r0, r1, r4
    2194:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
    2198:	4770      	bx	lr
    219a:	bf00      	nop
    219c:	20022834 	.word	0x20022834
    21a0:	200225dc 	.word	0x200225dc
    21a4:	200225d4 	.word	0x200225d4
    21a8:	e0001004 	.word	0xe0001004
    21ac:	200225d8 	.word	0x200225d8

000021b0 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    21b0:	2827      	cmp	r0, #39	; 0x27
    21b2:	d81c      	bhi.n	21ee <pinMode+0x3e>
	p = digital_pin_to_info_PGM + pin;
    21b4:	0100      	lsls	r0, r0, #4
    21b6:	4a1a      	ldr	r2, [pc, #104]	; (2220 <pinMode+0x70>)
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    21b8:	2901      	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    21ba:	eb02 0300 	add.w	r3, r2, r0
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    21be:	5810      	ldr	r0, [r2, r0]
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}

void pinMode(uint8_t pin, uint8_t mode)
{
    21c0:	b410      	push	{r4}
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    21c2:	d015      	beq.n	21f0 <pinMode+0x40>
    21c4:	2904      	cmp	r1, #4
    21c6:	d013      	beq.n	21f0 <pinMode+0x40>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    21c8:	68dc      	ldr	r4, [r3, #12]
    21ca:	6842      	ldr	r2, [r0, #4]
    21cc:	ea22 0204 	bic.w	r2, r2, r4
    21d0:	6042      	str	r2, [r0, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    21d2:	689a      	ldr	r2, [r3, #8]
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
    21d4:	b1e9      	cbz	r1, 2212 <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
    21d6:	2902      	cmp	r1, #2
    21d8:	d01e      	beq.n	2218 <pinMode+0x68>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    21da:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    21dc:	685b      	ldr	r3, [r3, #4]
}
    21de:	f85d 4b04 	ldr.w	r4, [sp], #4
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    21e2:	bf0c      	ite	eq
    21e4:	490f      	ldreq	r1, [pc, #60]	; (2224 <pinMode+0x74>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    21e6:	4910      	ldrne	r1, [pc, #64]	; (2228 <pinMode+0x78>)
    21e8:	6011      	str	r1, [r2, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    21ea:	2215      	movs	r2, #21
    21ec:	601a      	str	r2, [r3, #0]
}
    21ee:	4770      	bx	lr
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    21f0:	68da      	ldr	r2, [r3, #12]
		if (mode == OUTPUT) {
    21f2:	2901      	cmp	r1, #1
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    21f4:	6844      	ldr	r4, [r0, #4]
    21f6:	ea42 0204 	orr.w	r2, r2, r4
    21fa:	6042      	str	r2, [r0, #4]
		if (mode == OUTPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    21fc:	689a      	ldr	r2, [r3, #8]

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
		if (mode == OUTPUT) {
    21fe:	d008      	beq.n	2212 <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    2200:	f640 0138 	movw	r1, #2104	; 0x838
    2204:	6011      	str	r1, [r2, #0]
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    2206:	685b      	ldr	r3, [r3, #4]
    2208:	2215      	movs	r2, #21
}
    220a:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    220e:	601a      	str	r2, [r3, #0]
}
    2210:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    2212:	2138      	movs	r1, #56	; 0x38
    2214:	6011      	str	r1, [r2, #0]
    2216:	e7f6      	b.n	2206 <pinMode+0x56>
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    2218:	4904      	ldr	r1, [pc, #16]	; (222c <pinMode+0x7c>)
    221a:	6011      	str	r1, [r2, #0]
    221c:	e7f3      	b.n	2206 <pinMode+0x56>
    221e:	bf00      	nop
    2220:	20000134 	.word	0x20000134
    2224:	00013038 	.word	0x00013038
    2228:	00010038 	.word	0x00010038
    222c:	0001f038 	.word	0x0001f038

00002230 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    2230:	48a4      	ldr	r0, [pc, #656]	; (24c4 <pwm_init+0x294>)
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    2232:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    2236:	4ba4      	ldr	r3, [pc, #656]	; (24c8 <pwm_init+0x298>)
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    2238:	6f82      	ldr	r2, [r0, #120]	; 0x78
    223a:	f442 027f 	orr.w	r2, r2, #16711680	; 0xff0000
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

void pwm_init(void)
{
    223e:	b5f0      	push	{r4, r5, r6, r7, lr}
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    2240:	6782      	str	r2, [r0, #120]	; 0x78
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    2242:	2500      	movs	r5, #0
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    2244:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    2248:	f44f 4670 	mov.w	r6, #61440	; 0xf000
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    224c:	4c9f      	ldr	r4, [pc, #636]	; (24cc <pwm_init+0x29c>)
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    224e:	f44f 4e60 	mov.w	lr, #57344	; 0xe000

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    2252:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    2254:	f44f 6780 	mov.w	r7, #1024	; 0x400
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    2258:	4314      	orrs	r4, r2
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    225a:	462a      	mov	r2, r5
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    225c:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    2260:	f8a3 618c 	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    2264:	f248 26b8 	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    2268:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    226c:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    2270:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
    2274:	b280      	uxth	r0, r0
    2276:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
    227a:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
    227e:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    2282:	4b91      	ldr	r3, [pc, #580]	; (24c8 <pwm_init+0x298>)
	for (i=0; i < 4; i++) {
    2284:	3101      	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    2286:	2500      	movs	r5, #0
    2288:	0140      	lsls	r0, r0, #5
    228a:	461c      	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    228c:	2904      	cmp	r1, #4
    228e:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    2290:	f8a3 e004 	strh.w	lr, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    2294:	80df      	strh	r7, [r3, #6]
		p->SM[i].OCTRL = 0;
    2296:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    2298:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    229a:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    229c:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    229e:	81de      	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    22a0:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    22a2:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    22a4:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    22a6:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    22a8:	d1e9      	bne.n	227e <pwm_init+0x4e>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    22aa:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    22ae:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    22b2:	4b87      	ldr	r3, [pc, #540]	; (24d0 <pwm_init+0x2a0>)
    22b4:	f44f 4670 	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    22b8:	b280      	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    22ba:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    22bc:	f44f 4760 	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    22c0:	462a      	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    22c2:	ea40 000c 	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    22c6:	f44f 6e80 	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    22ca:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    22ce:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
    22d2:	b280      	uxth	r0, r0
    22d4:	f440 6070 	orr.w	r0, r0, #3840	; 0xf00
    22d8:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    22dc:	f8a3 618c 	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    22e0:	f248 26b8 	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    22e4:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    22e8:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    22ec:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
    22f0:	b280      	uxth	r0, r0
    22f2:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
    22f6:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
    22fa:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    22fe:	4b74      	ldr	r3, [pc, #464]	; (24d0 <pwm_init+0x2a0>)
	for (i=0; i < 4; i++) {
    2300:	3101      	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    2302:	2500      	movs	r5, #0
    2304:	0140      	lsls	r0, r0, #5
    2306:	461c      	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    2308:	2904      	cmp	r1, #4
    230a:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    230c:	809f      	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    230e:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    2312:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    2314:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    2316:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    2318:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    231a:	81de      	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    231c:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    231e:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    2320:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    2322:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    2324:	d1e9      	bne.n	22fa <pwm_init+0xca>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2326:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    232a:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    232e:	4b69      	ldr	r3, [pc, #420]	; (24d4 <pwm_init+0x2a4>)
    2330:	f44f 4670 	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2334:	b280      	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    2336:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    2338:	f44f 4760 	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    233c:	462a      	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    233e:	ea40 000c 	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    2342:	f44f 6e80 	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2346:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    234a:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
    234e:	b280      	uxth	r0, r0
    2350:	f440 6070 	orr.w	r0, r0, #3840	; 0xf00
    2354:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    2358:	f8a3 618c 	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    235c:	f248 26b8 	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    2360:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    2364:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    2368:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
    236c:	b280      	uxth	r0, r0
    236e:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
    2372:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
    2376:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    237a:	4b56      	ldr	r3, [pc, #344]	; (24d4 <pwm_init+0x2a4>)
	for (i=0; i < 4; i++) {
    237c:	3101      	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    237e:	2500      	movs	r5, #0
    2380:	0140      	lsls	r0, r0, #5
    2382:	461c      	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    2384:	2904      	cmp	r1, #4
    2386:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    2388:	809f      	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    238a:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    238e:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    2390:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    2392:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    2394:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    2396:	81de      	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    2398:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    239a:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    239c:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    239e:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    23a0:	d1e9      	bne.n	2376 <pwm_init+0x146>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    23a2:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    23a6:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    23aa:	4b4b      	ldr	r3, [pc, #300]	; (24d8 <pwm_init+0x2a8>)
    23ac:	f44f 4770 	mov.w	r7, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    23b0:	b280      	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    23b2:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    23b4:	f44f 4660 	mov.w	r6, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    23b8:	462a      	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    23ba:	ea40 000c 	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    23be:	f44f 6e80 	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    23c2:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    23c6:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
    23ca:	b280      	uxth	r0, r0
    23cc:	f440 6070 	orr.w	r0, r0, #3840	; 0xf00
    23d0:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    23d4:	f8a3 718c 	strh.w	r7, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    23d8:	f248 27b8 	movw	r7, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    23dc:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    23e0:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    23e4:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
    23e8:	b280      	uxth	r0, r0
    23ea:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
    23ee:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
    23f2:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    23f6:	4b38      	ldr	r3, [pc, #224]	; (24d8 <pwm_init+0x2a8>)
	for (i=0; i < 4; i++) {
    23f8:	3101      	adds	r1, #1
    23fa:	0140      	lsls	r0, r0, #5
    23fc:	461c      	mov	r4, r3
    23fe:	2904      	cmp	r1, #4
    2400:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    2402:	809e      	strh	r6, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    2404:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    2408:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    240a:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    240c:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    240e:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    2410:	81df      	strh	r7, [r3, #14]
		p->SM[i].VAL2 = 0;
    2412:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    2414:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    2416:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    2418:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    241a:	d1ea      	bne.n	23f2 <pwm_init+0x1c2>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    241c:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    2420:	270f      	movs	r7, #15

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    2422:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    2424:	f241 0601 	movw	r6, #4097	; 0x1001
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2428:	b29b      	uxth	r3, r3
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    242a:	f645 5ec0 	movw	lr, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    242e:	4611      	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    2430:	f243 0526 	movw	r5, #12326	; 0x3026
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2434:	433b      	orrs	r3, r7
    2436:	f8a4 3188 	strh.w	r3, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    243a:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
    243e:	b29b      	uxth	r3, r3
    2440:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    2444:	f8a4 3188 	strh.w	r3, [r4, #392]	; 0x188
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    2448:	0150      	lsls	r0, r2, #5
    244a:	4b24      	ldr	r3, [pc, #144]	; (24dc <pwm_init+0x2ac>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    244c:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    244e:	4403      	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    2450:	2a04      	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    2452:	8199      	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    2454:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    2456:	81df      	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    2458:	829e      	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    245a:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    245e:	8019      	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    2460:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    2462:	819d      	strh	r5, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    2464:	d1f0      	bne.n	2448 <pwm_init+0x218>
    2466:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    2468:	270f      	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    246a:	f241 0601 	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    246e:	f645 55c0 	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    2472:	4611      	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    2474:	f243 0426 	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    2478:	0150      	lsls	r0, r2, #5
    247a:	4b19      	ldr	r3, [pc, #100]	; (24e0 <pwm_init+0x2b0>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    247c:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    247e:	4403      	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    2480:	2a04      	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    2482:	8199      	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    2484:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    2486:	81df      	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    2488:	829e      	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    248a:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    248c:	8019      	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    248e:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    2490:	819c      	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    2492:	d1f1      	bne.n	2478 <pwm_init+0x248>
    2494:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    2496:	270f      	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    2498:	f241 0601 	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    249c:	f645 55c0 	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    24a0:	4611      	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    24a2:	f243 0426 	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    24a6:	0150      	lsls	r0, r2, #5
    24a8:	4b0e      	ldr	r3, [pc, #56]	; (24e4 <pwm_init+0x2b4>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    24aa:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    24ac:	4403      	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    24ae:	2a04      	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    24b0:	8199      	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    24b2:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    24b4:	81df      	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    24b6:	829e      	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    24b8:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    24ba:	8019      	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    24bc:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    24be:	819c      	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    24c0:	d1f1      	bne.n	24a6 <pwm_init+0x276>
	flexpwm_init(&IMXRT_FLEXPWM3);
	flexpwm_init(&IMXRT_FLEXPWM4);
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    24c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    24c4:	400fc000 	.word	0x400fc000
    24c8:	403dc000 	.word	0x403dc000
    24cc:	fc030000 	.word	0xfc030000
    24d0:	403e0000 	.word	0x403e0000
    24d4:	403e4000 	.word	0x403e4000
    24d8:	403e8000 	.word	0x403e8000
    24dc:	401dc000 	.word	0x401dc000
    24e0:	401e0000 	.word	0x401e0000
    24e4:	401e4000 	.word	0x401e4000

000024e8 <unused_interrupt_vector>:
//  R0
// Code from :: https://community.nxp.com/thread/389002
__attribute__((naked))
void unused_interrupt_vector(void)
{
  __asm( ".syntax unified\n"
    24e8:	2004      	movs	r0, #4
    24ea:	4671      	mov	r1, lr
    24ec:	4208      	tst	r0, r1
    24ee:	d003      	beq.n	24f8 <_MSP>
    24f0:	f3ef 8009 	mrs	r0, PSP
    24f4:	f000 b808 	b.w	2508 <HardFault_HandlerC>

000024f8 <_MSP>:
    24f8:	f3ef 8008 	mrs	r0, MSP
    24fc:	f000 b804 	b.w	2508 <HardFault_HandlerC>

00002500 <startup_default_early_hook>:
         "B HardFault_HandlerC \n"
         "_MSP: \n"
         "MRS R0, MSP \n"
         "B HardFault_HandlerC \n"
         ".syntax divided\n") ;
}
    2500:	4770      	bx	lr
    2502:	bf00      	nop

00002504 <startup_default_late_hook>:
uint8_t external_psram_size = 0;

extern int main (void);
void startup_default_early_hook(void) {}
void startup_early_hook(void)		__attribute__ ((weak, alias("startup_default_early_hook")));
void startup_default_late_hook(void) {}
    2504:	4770      	bx	lr
    2506:	bf00      	nop

00002508 <HardFault_HandlerC>:
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    2508:	4b1b      	ldr	r3, [pc, #108]	; (2578 <HardFault_HandlerC+0x70>)
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    250a:	2105      	movs	r1, #5
    250c:	4a1b      	ldr	r2, [pc, #108]	; (257c <HardFault_HandlerC+0x74>)
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    250e:	2038      	movs	r0, #56	; 0x38
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    2510:	b530      	push	{r4, r5, lr}
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    2512:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
  GPIO2_DR_SET = (1 << 3);
    2516:	2108      	movs	r1, #8
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    2518:	f8c2 0338 	str.w	r0, [r2, #824]	; 0x338
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    251c:	b083      	sub	sp, #12
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    251e:	685a      	ldr	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    2520:	4c17      	ldr	r4, [pc, #92]	; (2580 <HardFault_HandlerC+0x78>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    2522:	430a      	orrs	r2, r1
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    2524:	4817      	ldr	r0, [pc, #92]	; (2584 <HardFault_HandlerC+0x7c>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    2526:	605a      	str	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
    2528:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    252c:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88

  if ( F_CPU_ACTUAL >= 600000000 )
    2530:	6823      	ldr	r3, [r4, #0]
    2532:	4283      	cmp	r3, r0
    2534:	d902      	bls.n	253c <HardFault_HandlerC+0x34>
    set_arm_clock(300000000);
    2536:	4814      	ldr	r0, [pc, #80]	; (2588 <HardFault_HandlerC+0x80>)
    2538:	f7ff fc40 	bl	1dbc <set_arm_clock>

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    253c:	4d0e      	ldr	r5, [pc, #56]	; (2578 <HardFault_HandlerC+0x70>)
    253e:	2408      	movs	r4, #8
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    2540:	2000      	movs	r0, #0
    2542:	4a12      	ldr	r2, [pc, #72]	; (258c <HardFault_HandlerC+0x84>)
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    2544:	4912      	ldr	r1, [pc, #72]	; (2590 <HardFault_HandlerC+0x88>)
  if ( F_CPU_ACTUAL >= 600000000 )
    set_arm_clock(300000000);

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    2546:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    254a:	9001      	str	r0, [sp, #4]
    254c:	9b01      	ldr	r3, [sp, #4]
    254e:	4293      	cmp	r3, r2
    2550:	d805      	bhi.n	255e <HardFault_HandlerC+0x56>
    2552:	9b01      	ldr	r3, [sp, #4]
    2554:	3301      	adds	r3, #1
    2556:	9301      	str	r3, [sp, #4]
    2558:	9b01      	ldr	r3, [sp, #4]
    255a:	4293      	cmp	r3, r2
    255c:	d9f9      	bls.n	2552 <HardFault_HandlerC+0x4a>
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    255e:	f8c5 4088 	str.w	r4, [r5, #136]	; 0x88
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    2562:	9001      	str	r0, [sp, #4]
    2564:	9b01      	ldr	r3, [sp, #4]
    2566:	428b      	cmp	r3, r1
    2568:	d8ed      	bhi.n	2546 <HardFault_HandlerC+0x3e>
    256a:	9b01      	ldr	r3, [sp, #4]
    256c:	3301      	adds	r3, #1
    256e:	9301      	str	r3, [sp, #4]
    2570:	9b01      	ldr	r3, [sp, #4]
    2572:	428b      	cmp	r3, r1
    2574:	d9f9      	bls.n	256a <HardFault_HandlerC+0x62>
    2576:	e7e6      	b.n	2546 <HardFault_HandlerC+0x3e>
    2578:	401bc000 	.word	0x401bc000
    257c:	401f8000 	.word	0x401f8000
    2580:	200122a8 	.word	0x200122a8
    2584:	23c345ff 	.word	0x23c345ff
    2588:	11e1a300 	.word	0x11e1a300
    258c:	000f423f 	.word	0x000f423f
    2590:	0089543f 	.word	0x0089543f

00002594 <Panic_Temp_isr>:

static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
    2594:	b672      	cpsid	i
  IOMUXC_GPR_GPR16 = 0x00000007;
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
    2596:	4a06      	ldr	r2, [pc, #24]	; (25b0 <Panic_Temp_isr+0x1c>)
static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
  IOMUXC_GPR_GPR16 = 0x00000007;
    2598:	2107      	movs	r1, #7
    259a:	4b06      	ldr	r3, [pc, #24]	; (25b4 <Panic_Temp_isr+0x20>)
    259c:	6419      	str	r1, [r3, #64]	; 0x40
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
    259e:	6b93      	ldr	r3, [r2, #56]	; 0x38
    25a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    25a4:	6393      	str	r3, [r2, #56]	; 0x38
  asm volatile ("dsb":::"memory");
    25a6:	f3bf 8f4f 	dsb	sy
  while (1) asm ("wfi");
    25aa:	bf30      	wfi
    25ac:	e7fd      	b.n	25aa <Panic_Temp_isr+0x16>
    25ae:	bf00      	nop
    25b0:	400d4000 	.word	0x400d4000
    25b4:	400ac000 	.word	0x400ac000

000025b8 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    25b8:	6b83      	ldr	r3, [r0, #56]	; 0x38
	}
}
#endif

static void schedule_transfer(endpoint_t *endpoint, uint32_t epmask, transfer_t *transfer)
{
    25ba:	b4f0      	push	{r4, r5, r6, r7}
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    25bc:	b11b      	cbz	r3, 25c6 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    25be:	6853      	ldr	r3, [r2, #4]
    25c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    25c4:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    25c6:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    25c8:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    25ca:	b1dc      	cbz	r4, 2604 <schedule_transfer+0x4c>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    25cc:	4b14      	ldr	r3, [pc, #80]	; (2620 <schedule_transfer+0x68>)
	__disable_irq();
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
    25ce:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    25d0:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    25d4:	420c      	tst	r4, r1
    25d6:	d11f      	bne.n	2618 <schedule_transfer+0x60>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    25d8:	4d12      	ldr	r5, [pc, #72]	; (2624 <schedule_transfer+0x6c>)
    25da:	682f      	ldr	r7, [r5, #0]
    25dc:	e004      	b.n	25e8 <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    25de:	682c      	ldr	r4, [r5, #0]
    25e0:	1be4      	subs	r4, r4, r7
    25e2:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
    25e6:	d20b      	bcs.n	2600 <schedule_transfer+0x48>
		if (USB1_ENDPTPRIME & epmask) goto end;
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    25e8:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    25ec:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    25f0:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    25f4:	f8d3 61b8 	ldr.w	r6, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    25f8:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    25fc:	0464      	lsls	r4, r4, #17
    25fe:	d5ee      	bpl.n	25de <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    2600:	4231      	tst	r1, r6
    2602:	d109      	bne.n	2618 <schedule_transfer+0x60>
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
    2604:	2300      	movs	r3, #0
	USB1_ENDPTPRIME |= epmask;
    2606:	4c06      	ldr	r4, [pc, #24]	; (2620 <schedule_transfer+0x68>)
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
    2608:	6082      	str	r2, [r0, #8]
	endpoint->status = 0;
    260a:	60c3      	str	r3, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
    260c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2610:	4319      	orrs	r1, r3
    2612:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    2616:	6302      	str	r2, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
    2618:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    261a:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    261c:	bcf0      	pop	{r4, r5, r6, r7}
    261e:	4770      	bx	lr
    2620:	402e0000 	.word	0x402e0000
    2624:	e0001004 	.word	0xe0001004

00002628 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    2628:	b570      	push	{r4, r5, r6, lr}
    262a:	4606      	mov	r6, r0
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    262c:	6b00      	ldr	r0, [r0, #48]	; 0x30
	if (first == NULL) return;
    262e:	b190      	cbz	r0, 2656 <run_callbacks+0x2e>
    2630:	4602      	mov	r2, r0
    2632:	2400      	movs	r4, #0
    2634:	e003      	b.n	263e <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    2636:	6812      	ldr	r2, [r2, #0]
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
    2638:	3401      	adds	r4, #1
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
    263a:	2a01      	cmp	r2, #1
    263c:	d00c      	beq.n	2658 <run_callbacks+0x30>

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
	transfer_t *t = first;
	while (1) {
		if (t->status & (1<<7)) {
    263e:	6853      	ldr	r3, [r2, #4]
    2640:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    2644:	d0f7      	beq.n	2636 <run_callbacks+0xe>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
    2646:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    2648:	b12c      	cbz	r4, 2656 <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
    264a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
			break;
		}
	}
	// do all the callbacks
	while (count) {
		transfer_t *next = (transfer_t *)first->next;
    264c:	6805      	ldr	r5, [r0, #0]
		ep->callback_function(first);
    264e:	4798      	blx	r3
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    2650:	3c01      	subs	r4, #1
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
		first = next;
    2652:	4628      	mov	r0, r5
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    2654:	d1f9      	bne.n	264a <run_callbacks+0x22>
    2656:	bd70      	pop	{r4, r5, r6, pc}
		count++;
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
			// reached end of list, all need callbacks, new list is empty
			//printf(" end of list\n");
			ep->first_transfer = NULL;
    2658:	6333      	str	r3, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
    265a:	6373      	str	r3, [r6, #52]	; 0x34
			break;
    265c:	e7f4      	b.n	2648 <run_callbacks+0x20>
    265e:	bf00      	nop

00002660 <endpoint0_transmit.constprop.1>:
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
}

static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    2660:	b5f0      	push	{r4, r5, r6, r7, lr}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
    2662:	b9e1      	cbnz	r1, 269e <endpoint0_transmit.constprop.1+0x3e>
    2664:	4c21      	ldr	r4, [pc, #132]	; (26ec <endpoint0_transmit.constprop.1+0x8c>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2666:	4922      	ldr	r1, [pc, #136]	; (26f0 <endpoint0_transmit.constprop.1+0x90>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    2668:	2000      	movs	r0, #0
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    266a:	4b22      	ldr	r3, [pc, #136]	; (26f4 <endpoint0_transmit.constprop.1+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    266c:	2201      	movs	r2, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    266e:	f04f 1501 	mov.w	r5, #65537	; 0x10001
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2672:	2680      	movs	r6, #128	; 0x80
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2674:	600a      	str	r2, [r1, #0]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
    2676:	461a      	mov	r2, r3
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    2678:	60a1      	str	r1, [r4, #8]
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    267a:	604e      	str	r6, [r1, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
    267c:	60e0      	str	r0, [r4, #12]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    267e:	f8c3 51bc 	str.w	r5, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    2682:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    2686:	4d1c      	ldr	r5, [pc, #112]	; (26f8 <endpoint0_transmit.constprop.1+0x98>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    2688:	f044 0401 	orr.w	r4, r4, #1
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    268c:	6088      	str	r0, [r1, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    268e:	f8c3 41b0 	str.w	r4, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    2692:	6028      	str	r0, [r5, #0]
	while (USB1_ENDPTPRIME) ;
    2694:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    2698:	2b00      	cmp	r3, #0
    269a:	d1fb      	bne.n	2694 <endpoint0_transmit.constprop.1+0x34>
}
    269c:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    269e:	0409      	lsls	r1, r1, #16
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    26a0:	4b16      	ldr	r3, [pc, #88]	; (26fc <endpoint0_transmit.constprop.1+0x9c>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    26a2:	4d14      	ldr	r5, [pc, #80]	; (26f4 <endpoint0_transmit.constprop.1+0x94>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    26a4:	2601      	movs	r6, #1
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    26a6:	4c11      	ldr	r4, [pc, #68]	; (26ec <endpoint0_transmit.constprop.1+0x8c>)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    26a8:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    26ac:	2200      	movs	r2, #0
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    26ae:	601e      	str	r6, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    26b0:	6059      	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    26b2:	f500 5c80 	add.w	ip, r0, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    26b6:	64e2      	str	r2, [r4, #76]	; 0x4c
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    26b8:	f500 5e00 	add.w	lr, r0, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    26bc:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    26be:	f500 5740 	add.w	r7, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    26c2:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    26c6:	f500 4680 	add.w	r6, r0, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
    26ca:	462a      	mov	r2, r5
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    26cc:	6098      	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    26ce:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    26d2:	f8c3 c00c 	str.w	ip, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    26d6:	f8c3 e010 	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    26da:	615f      	str	r7, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    26dc:	619e      	str	r6, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    26de:	f8c5 11b0 	str.w	r1, [r5, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    26e2:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    26e6:	2b00      	cmp	r3, #0
    26e8:	d1fb      	bne.n	26e2 <endpoint0_transmit.constprop.1+0x82>
    26ea:	e7bc      	b.n	2666 <endpoint0_transmit.constprop.1+0x6>
    26ec:	20024000 	.word	0x20024000
    26f0:	20023020 	.word	0x20023020
    26f4:	402e0000 	.word	0x402e0000
    26f8:	20022604 	.word	0x20022604
    26fc:	20023000 	.word	0x20023000

00002700 <isr>:
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}


static void isr(void)
{
    2700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    2704:	4cac      	ldr	r4, [pc, #688]	; (29b8 <isr+0x2b8>)
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}


static void isr(void)
{
    2706:	b083      	sub	sp, #12
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    2708:	f8d4 8144 	ldr.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    270c:	f018 0f01 	tst.w	r8, #1
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
	USB1_USBSTS = status;
    2710:	f8c4 8144 	str.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    2714:	d05e      	beq.n	27d4 <isr+0xd4>
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    2716:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    271a:	2b00      	cmp	r3, #0
    271c:	d055      	beq.n	27ca <isr+0xca>
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    271e:	f04f 1b01 	mov.w	fp, #65537	; 0x10001
    2722:	f8df 92bc 	ldr.w	r9, [pc, #700]	; 29e0 <isr+0x2e0>
    2726:	4ea5      	ldr	r6, [pc, #660]	; (29bc <isr+0x2bc>)
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    2728:	4625      	mov	r5, r4
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    272a:	46da      	mov	sl, fp
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
    272c:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
    2730:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    2732:	6af2      	ldr	r2, [r6, #44]	; 0x2c
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    2734:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    2738:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    273c:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    2740:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    2744:	049f      	lsls	r7, r3, #18
    2746:	d5f5      	bpl.n	2734 <isr+0x34>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    2748:	f8d5 3140 	ldr.w	r3, [r5, #320]	; 0x140
    274c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    2750:	f8c5 3140 	str.w	r3, [r5, #320]	; 0x140
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    2754:	f8c5 a1b4 	str.w	sl, [r5, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    2758:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    275c:	f013 1301 	ands.w	r3, r3, #65537	; 0x10001
    2760:	d1fa      	bne.n	2758 <isr+0x58>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    2762:	b281      	uxth	r1, r0
    2764:	f240 6781 	movw	r7, #1665	; 0x681
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
    2768:	f8c9 3000 	str.w	r3, [r9]
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    276c:	42b9      	cmp	r1, r7
    276e:	f200 80b4 	bhi.w	28da <isr+0x1da>
    2772:	f5b1 6fd0 	cmp.w	r1, #1664	; 0x680
    2776:	f080 81e9 	bcs.w	2b4c <isr+0x44c>
    277a:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
    277e:	f000 816b 	beq.w	2a58 <isr+0x358>
    2782:	f200 80f0 	bhi.w	2966 <isr+0x266>
    2786:	2980      	cmp	r1, #128	; 0x80
    2788:	f000 8159 	beq.w	2a3e <isr+0x33e>
    278c:	2982      	cmp	r1, #130	; 0x82
    278e:	f040 80e2 	bne.w	2956 <isr+0x256>
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
    2792:	b292      	uxth	r2, r2
    2794:	f002 017f 	and.w	r1, r2, #127	; 0x7f
		if (endpoint > 7) break;
    2798:	2907      	cmp	r1, #7
    279a:	f200 80dc 	bhi.w	2956 <isr+0x256>
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    279e:	0089      	lsls	r1, r1, #2
    27a0:	4887      	ldr	r0, [pc, #540]	; (29c0 <isr+0x2c0>)
		reply_buffer[0] = 0;
    27a2:	4f88      	ldr	r7, [pc, #544]	; (29c4 <isr+0x2c4>)
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    27a4:	4408      	add	r0, r1
    27a6:	6801      	ldr	r1, [r0, #0]
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    27a8:	0610      	lsls	r0, r2, #24
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
    27aa:	703b      	strb	r3, [r7, #0]
		reply_buffer[1] = 0;
    27ac:	707b      	strb	r3, [r7, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    27ae:	f140 820c 	bpl.w	2bca <isr+0x4ca>
    27b2:	03ca      	lsls	r2, r1, #15
    27b4:	d501      	bpl.n	27ba <isr+0xba>
			reply_buffer[0] = 1;
    27b6:	2301      	movs	r3, #1
    27b8:	703b      	strb	r3, [r7, #0]
		}
		endpoint0_transmit(reply_buffer, 2, 0);
    27ba:	2102      	movs	r1, #2
    27bc:	4881      	ldr	r0, [pc, #516]	; (29c4 <isr+0x2c4>)
    27be:	f7ff ff4f 	bl	2660 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    27c2:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    27c6:	2b00      	cmp	r3, #0
    27c8:	d1b0      	bne.n	272c <isr+0x2c>
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    27ca:	4a7b      	ldr	r2, [pc, #492]	; (29b8 <isr+0x2b8>)
    27cc:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    27d0:	2b00      	cmp	r3, #0
    27d2:	d150      	bne.n	2876 <isr+0x176>
			}
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
    27d4:	f018 0f40 	tst.w	r8, #64	; 0x40
    27d8:	d018      	beq.n	280c <isr+0x10c>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    27da:	4b77      	ldr	r3, [pc, #476]	; (29b8 <isr+0x2b8>)
    27dc:	f8d3 11ac 	ldr.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    27e0:	461a      	mov	r2, r3
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    27e2:	f8c3 11ac 	str.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    27e6:	f8d3 11bc 	ldr.w	r1, [r3, #444]	; 0x1bc
    27ea:	f8c3 11bc 	str.w	r1, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    27ee:	f8d2 41b0 	ldr.w	r4, [r2, #432]	; 0x1b0
    27f2:	4b71      	ldr	r3, [pc, #452]	; (29b8 <isr+0x2b8>)
    27f4:	2c00      	cmp	r4, #0
    27f6:	d1fa      	bne.n	27ee <isr+0xee>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    27f8:	f04f 32ff 	mov.w	r2, #4294967295
    27fc:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    2800:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
			// we took too long to respond :(
			// TODO; is this ever really a problem?
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
    2804:	f000 fd1e 	bl	3244 <usb_serial_reset>
		#endif
		endpointN_notify_mask = 0;
    2808:	4b6f      	ldr	r3, [pc, #444]	; (29c8 <isr+0x2c8>)
    280a:	601c      	str	r4, [r3, #0]
			// shut off USB - easier to see results in protocol analyzer
			//USB1_USBCMD &= ~USB_USBCMD_RS;
			//printf("shut off USB\n");
		//}
	}
	if (status & USB_USBSTS_TI0) {
    280c:	f018 7f80 	tst.w	r8, #16777216	; 0x1000000
    2810:	d003      	beq.n	281a <isr+0x11a>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    2812:	4b6e      	ldr	r3, [pc, #440]	; (29cc <isr+0x2cc>)
    2814:	681b      	ldr	r3, [r3, #0]
    2816:	b103      	cbz	r3, 281a <isr+0x11a>
    2818:	4798      	blx	r3
	}
	if (status & USB_USBSTS_TI1) {
    281a:	f018 7f00 	tst.w	r8, #33554432	; 0x2000000
    281e:	d003      	beq.n	2828 <isr+0x128>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    2820:	4b6b      	ldr	r3, [pc, #428]	; (29d0 <isr+0x2d0>)
    2822:	681b      	ldr	r3, [r3, #0]
    2824:	b103      	cbz	r3, 2828 <isr+0x128>
    2826:	4798      	blx	r3
	}
	if (status & USB_USBSTS_PCI) {
    2828:	f018 0f04 	tst.w	r8, #4
    282c:	d008      	beq.n	2840 <isr+0x140>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    282e:	4b62      	ldr	r3, [pc, #392]	; (29b8 <isr+0x2b8>)
    2830:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    2834:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    2838:	d04c      	beq.n	28d4 <isr+0x1d4>
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
    283a:	4b66      	ldr	r3, [pc, #408]	; (29d4 <isr+0x2d4>)
    283c:	2201      	movs	r2, #1
    283e:	701a      	strb	r2, [r3, #0]
		//printf("suspend\n");
	}
	if (status & USB_USBSTS_UEI) {
		//printf("error\n");
	}
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    2840:	4b5d      	ldr	r3, [pc, #372]	; (29b8 <isr+0x2b8>)
    2842:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    2846:	0612      	lsls	r2, r2, #24
    2848:	d512      	bpl.n	2870 <isr+0x170>
    284a:	f018 0f80 	tst.w	r8, #128	; 0x80
    284e:	d00f      	beq.n	2870 <isr+0x170>
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
    2850:	4961      	ldr	r1, [pc, #388]	; (29d8 <isr+0x2d8>)
    2852:	780a      	ldrb	r2, [r1, #0]
    2854:	b162      	cbz	r2, 2870 <isr+0x170>
			if (--usb_reboot_timer == 0) {
    2856:	3a01      	subs	r2, #1
    2858:	b2d2      	uxtb	r2, r2
    285a:	700a      	strb	r2, [r1, #0]
    285c:	b942      	cbnz	r2, 2870 <isr+0x170>
	__enable_irq();
}

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
    285e:	495f      	ldr	r1, [pc, #380]	; (29dc <isr+0x2dc>)
    2860:	780a      	ldrb	r2, [r1, #0]
    2862:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    2866:	700a      	strb	r2, [r1, #0]
	if (sof_usage == 0) {
    2868:	2a00      	cmp	r2, #0
    286a:	f000 8232 	beq.w	2cd2 <isr+0x5d2>
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
			if (--usb_reboot_timer == 0) {
				usb_stop_sof_interrupts(NUM_INTERFACE);
				asm("bkpt #251"); // run bootloader
    286e:	befb      	bkpt	0x00fb
		#endif
		#ifdef FLIGHTSIM_INTERFACE
		usb_flightsim_flush_output();
		#endif
	}
}
    2870:	b003      	add	sp, #12
    2872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    2876:	495a      	ldr	r1, [pc, #360]	; (29e0 <isr+0x2e0>)
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
    2878:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    287c:	6808      	ldr	r0, [r1, #0]
    287e:	4203      	tst	r3, r0
    2880:	f040 81e6 	bne.w	2c50 <isr+0x550>
				endpoint0_notify_mask = 0;
				endpoint0_complete();
			}
			completestatus &= endpointN_notify_mask;
    2884:	4a50      	ldr	r2, [pc, #320]	; (29c8 <isr+0x2c8>)
    2886:	6815      	ldr	r5, [r2, #0]
#if 1
			if (completestatus) {
    2888:	401d      	ands	r5, r3
    288a:	d0a3      	beq.n	27d4 <isr+0xd4>

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
    288c:	0c2f      	lsrs	r7, r5, #16
    288e:	d00f      	beq.n	28b0 <isr+0x1b0>
    2890:	4e4a      	ldr	r6, [pc, #296]	; (29bc <isr+0x2bc>)
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
    2892:	f04f 0901 	mov.w	r9, #1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
    2896:	fa97 f4a7 	rbit	r4, r7
    289a:	fab4 f484 	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    289e:	eb06 10c4 	add.w	r0, r6, r4, lsl #7
					tx &= ~(1<<p);
    28a2:	fa09 f404 	lsl.w	r4, r9, r4

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    28a6:	3040      	adds	r0, #64	; 0x40
    28a8:	f7ff febe 	bl	2628 <run_callbacks>
#if 1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
    28ac:	43a7      	bics	r7, r4
    28ae:	d1f2      	bne.n	2896 <isr+0x196>
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
    28b0:	b2ad      	uxth	r5, r5
				while(rx) {
    28b2:	2d00      	cmp	r5, #0
    28b4:	d08e      	beq.n	27d4 <isr+0xd4>
    28b6:	4e41      	ldr	r6, [pc, #260]	; (29bc <isr+0x2bc>)
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
					rx &= ~(1<<p);
    28b8:	2701      	movs	r7, #1
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
    28ba:	fa95 f4a5 	rbit	r4, r5
    28be:	fab4 f484 	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2);
    28c2:	eb06 10c4 	add.w	r0, r6, r4, lsl #7
					rx &= ~(1<<p);
    28c6:	fa07 f404 	lsl.w	r4, r7, r4

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
    28ca:	f7ff fead 	bl	2628 <run_callbacks>
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
    28ce:	43a5      	bics	r5, r4
    28d0:	d1f3      	bne.n	28ba <isr+0x1ba>
    28d2:	e77f      	b.n	27d4 <isr+0xd4>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
		} else {
			//printf("port at 12 Mbit\n");
			usb_high_speed = 0;
    28d4:	4a3f      	ldr	r2, [pc, #252]	; (29d4 <isr+0x2d4>)
    28d6:	7013      	strb	r3, [r2, #0]
    28d8:	e7b2      	b.n	2840 <isr+0x140>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    28da:	f242 0721 	movw	r7, #8225	; 0x2021
    28de:	42b9      	cmp	r1, r7
    28e0:	d035      	beq.n	294e <isr+0x24e>
    28e2:	f200 8089 	bhi.w	29f8 <isr+0x2f8>
    28e6:	f5b1 6f08 	cmp.w	r1, #2176	; 0x880
    28ea:	f000 8121 	beq.w	2b30 <isr+0x430>
    28ee:	f5b1 6f10 	cmp.w	r1, #2304	; 0x900
    28f2:	d130      	bne.n	2956 <isr+0x256>
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    28f4:	f3c0 4007 	ubfx	r0, r0, #16, #8
    28f8:	4a3a      	ldr	r2, [pc, #232]	; (29e4 <isr+0x2e4>)
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    28fa:	493b      	ldr	r1, [pc, #236]	; (29e8 <isr+0x2e8>)
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    28fc:	7010      	strb	r0, [r2, #0]
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    28fe:	4f3b      	ldr	r7, [pc, #236]	; (29ec <isr+0x2ec>)
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    2900:	4a3b      	ldr	r2, [pc, #236]	; (29f0 <isr+0x2f0>)
    2902:	9301      	str	r3, [sp, #4]
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    2904:	f8c5 71c8 	str.w	r7, [r5, #456]	; 0x1c8
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    2908:	f8c5 11cc 	str.w	r1, [r5, #460]	; 0x1cc
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    290c:	f8c5 21d0 	str.w	r2, [r5, #464]	; 0x1d0
		#endif
		#if defined(ENDPOINT7_CONFIG)
		USB1_ENDPTCTRL7 = ENDPOINT7_CONFIG;
		#endif
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_configure();
    2910:	f000 fc9a 	bl	3248 <usb_serial_configure>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2914:	4a37      	ldr	r2, [pc, #220]	; (29f4 <isr+0x2f4>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    2916:	9b01      	ldr	r3, [sp, #4]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2918:	2180      	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    291a:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    291c:	64b2      	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    291e:	6051      	str	r1, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2920:	6010      	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    2922:	64f3      	str	r3, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    2924:	f8c5 b1bc 	str.w	fp, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    2928:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    292c:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    292e:	f441 3280 	orr.w	r2, r1, #65536	; 0x10000
    2932:	f8c5 21b0 	str.w	r2, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    2936:	4a2a      	ldr	r2, [pc, #168]	; (29e0 <isr+0x2e0>)
    2938:	6013      	str	r3, [r2, #0]
	while (USB1_ENDPTPRIME) ;
    293a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    293e:	2b00      	cmp	r3, #0
    2940:	d1fb      	bne.n	293a <isr+0x23a>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    2942:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    2946:	2b00      	cmp	r3, #0
    2948:	f47f aef0 	bne.w	272c <isr+0x2c>
    294c:	e73d      	b.n	27ca <isr+0xca>
		// fall through to next case, to always send ZLP ACK
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
    294e:	0c11      	lsrs	r1, r2, #16
    2950:	2907      	cmp	r1, #7
    2952:	f000 813e 	beq.w	2bd2 <isr+0x4d2>
			return;
		}
		break;
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    2956:	f8c4 b1c0 	str.w	fp, [r4, #448]	; 0x1c0
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    295a:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    295e:	2b00      	cmp	r3, #0
    2960:	f47f aee4 	bne.w	272c <isr+0x2c>
    2964:	e731      	b.n	27ca <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    2966:	f240 3702 	movw	r7, #770	; 0x302
    296a:	42b9      	cmp	r1, r7
    296c:	f000 80b0 	beq.w	2ad0 <isr+0x3d0>
    2970:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
    2974:	d1ef      	bne.n	2956 <isr+0x256>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2976:	4a1f      	ldr	r2, [pc, #124]	; (29f4 <isr+0x2f4>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2978:	2180      	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    297a:	2701      	movs	r7, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    297c:	64f3      	str	r3, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    297e:	64b2      	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2980:	6017      	str	r7, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2982:	6051      	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    2984:	f8c5 b1bc 	str.w	fp, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    2988:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    298c:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    298e:	f441 3380 	orr.w	r3, r1, #65536	; 0x10000
    2992:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    2996:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    299a:	2b00      	cmp	r3, #0
    299c:	d1fb      	bne.n	2996 <isr+0x296>

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    299e:	0c03      	lsrs	r3, r0, #16
    29a0:	065b      	lsls	r3, r3, #25
    29a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    29a6:	f8c5 3154 	str.w	r3, [r5, #340]	; 0x154
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    29aa:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    29ae:	2b00      	cmp	r3, #0
    29b0:	f47f aebc 	bne.w	272c <isr+0x2c>
    29b4:	e709      	b.n	27ca <isr+0xca>
    29b6:	bf00      	nop
    29b8:	402e0000 	.word	0x402e0000
    29bc:	20024000 	.word	0x20024000
    29c0:	402e01c0 	.word	0x402e01c0
    29c4:	20022618 	.word	0x20022618
    29c8:	200225f4 	.word	0x200225f4
    29cc:	200225f0 	.word	0x200225f0
    29d0:	200225fc 	.word	0x200225fc
    29d4:	20022600 	.word	0x20022600
    29d8:	20022608 	.word	0x20022608
    29dc:	200225f8 	.word	0x200225f8
    29e0:	20022604 	.word	0x20022604
    29e4:	20022628 	.word	0x20022628
    29e8:	000200c8 	.word	0x000200c8
    29ec:	00cc0002 	.word	0x00cc0002
    29f0:	00c80002 	.word	0x00c80002
    29f4:	20023020 	.word	0x20023020
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    29f8:	f242 2321 	movw	r3, #8737	; 0x2221
    29fc:	4299      	cmp	r1, r3
    29fe:	d05b      	beq.n	2ab8 <isr+0x3b8>
    2a00:	f242 3321 	movw	r3, #8993	; 0x2321
    2a04:	4299      	cmp	r1, r3
    2a06:	d1a6      	bne.n	2956 <isr+0x256>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2a08:	4bb5      	ldr	r3, [pc, #724]	; (2ce0 <isr+0x5e0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2a0a:	2280      	movs	r2, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    2a0c:	2100      	movs	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2a0e:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    2a10:	64b3      	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2a12:	6018      	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2a14:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    2a16:	64f1      	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    2a18:	f8c4 b1bc 	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    2a1c:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    2a20:	6099      	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    2a22:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
    2a26:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    2a2a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2a2e:	2b00      	cmp	r3, #0
    2a30:	d1fb      	bne.n	2a2a <isr+0x32a>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    2a32:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    2a36:	2b00      	cmp	r3, #0
    2a38:	f47f ae78 	bne.w	272c <isr+0x2c>
    2a3c:	e6c5      	b.n	27ca <isr+0xca>
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    2a3e:	4aa9      	ldr	r2, [pc, #676]	; (2ce4 <isr+0x5e4>)
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
    2a40:	2102      	movs	r1, #2
    2a42:	4610      	mov	r0, r2
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    2a44:	7013      	strb	r3, [r2, #0]
		reply_buffer[1] = 0;
    2a46:	7053      	strb	r3, [r2, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    2a48:	f7ff fe0a 	bl	2660 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    2a4c:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    2a50:	2b00      	cmp	r3, #0
    2a52:	f47f ae6b 	bne.w	272c <isr+0x2c>
    2a56:	e6b8      	b.n	27ca <isr+0xca>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    2a58:	b292      	uxth	r2, r2
    2a5a:	f002 037f 	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    2a5e:	2b07      	cmp	r3, #7
    2a60:	f63f af79 	bhi.w	2956 <isr+0x256>
		dir = setup.wIndex & 0x80;
		if (dir) {
    2a64:	f012 0f80 	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    2a68:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2a6c:	4a9e      	ldr	r2, [pc, #632]	; (2ce8 <isr+0x5e8>)
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    2a6e:	f04f 0100 	mov.w	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2a72:	f04f 0001 	mov.w	r0, #1
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    2a76:	441a      	add	r2, r3
    2a78:	6813      	ldr	r3, [r2, #0]
    2a7a:	bf14      	ite	ne
    2a7c:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    2a80:	f023 0301 	biceq.w	r3, r3, #1
    2a84:	6013      	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2a86:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2a88:	4b95      	ldr	r3, [pc, #596]	; (2ce0 <isr+0x5e0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    2a8a:	64f1      	str	r1, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    2a8c:	64b3      	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2a8e:	6018      	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2a90:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    2a92:	f8c4 b1bc 	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    2a96:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    2a9a:	6099      	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    2a9c:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
    2aa0:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    2aa4:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2aa8:	2b00      	cmp	r3, #0
    2aaa:	d1fb      	bne.n	2aa4 <isr+0x3a4>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    2aac:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    2ab0:	2b00      	cmp	r3, #0
    2ab2:	f47f ae3b 	bne.w	272c <isr+0x2c>
    2ab6:	e688      	b.n	27ca <isr+0xca>
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    2ab8:	b292      	uxth	r2, r2
    2aba:	2a00      	cmp	r2, #0
    2abc:	d1a4      	bne.n	2a08 <isr+0x308>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    2abe:	4b8b      	ldr	r3, [pc, #556]	; (2cec <isr+0x5ec>)
			usb_cdc_line_rtsdtr = setup.wValue;
    2ac0:	f3c0 4007 	ubfx	r0, r0, #16, #8
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    2ac4:	4a8a      	ldr	r2, [pc, #552]	; (2cf0 <isr+0x5f0>)
    2ac6:	6819      	ldr	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    2ac8:	4b8a      	ldr	r3, [pc, #552]	; (2cf4 <isr+0x5f4>)
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    2aca:	6011      	str	r1, [r2, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    2acc:	7018      	strb	r0, [r3, #0]
    2ace:	e79b      	b.n	2a08 <isr+0x308>
			reply_buffer[0] = 1;
		}
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    2ad0:	b292      	uxth	r2, r2
    2ad2:	f002 037f 	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    2ad6:	2b07      	cmp	r3, #7
    2ad8:	f63f af3d 	bhi.w	2956 <isr+0x256>
		dir = setup.wIndex & 0x80;
		if (dir) {
    2adc:	f012 0f80 	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    2ae0:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2ae4:	4a80      	ldr	r2, [pc, #512]	; (2ce8 <isr+0x5e8>)
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    2ae6:	f04f 0100 	mov.w	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2aea:	f04f 0001 	mov.w	r0, #1
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    2aee:	441a      	add	r2, r3
    2af0:	6813      	ldr	r3, [r2, #0]
    2af2:	bf14      	ite	ne
    2af4:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    2af8:	f043 0301 	orreq.w	r3, r3, #1
    2afc:	6013      	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2afe:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2b00:	4b77      	ldr	r3, [pc, #476]	; (2ce0 <isr+0x5e0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    2b02:	64f1      	str	r1, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    2b04:	64b3      	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2b06:	6018      	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2b08:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    2b0a:	f8c4 b1bc 	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    2b0e:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    2b12:	6099      	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    2b14:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
    2b18:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    2b1c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2b20:	2b00      	cmp	r3, #0
    2b22:	d1fb      	bne.n	2b1c <isr+0x41c>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    2b24:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    2b28:	2b00      	cmp	r3, #0
    2b2a:	f47f adff 	bne.w	272c <isr+0x2c>
    2b2e:	e64c      	b.n	27ca <isr+0xca>
		usb_audio_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    2b30:	4a71      	ldr	r2, [pc, #452]	; (2cf8 <isr+0x5f8>)
		endpoint0_transmit(reply_buffer, 1, 0);
    2b32:	2101      	movs	r1, #1
		usb_audio_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    2b34:	4b6b      	ldr	r3, [pc, #428]	; (2ce4 <isr+0x5e4>)
    2b36:	7812      	ldrb	r2, [r2, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    2b38:	4618      	mov	r0, r3
		usb_audio_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    2b3a:	701a      	strb	r2, [r3, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    2b3c:	f7ff fd90 	bl	2660 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    2b40:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    2b44:	2b00      	cmp	r3, #0
    2b46:	f47f adf1 	bne.w	272c <isr+0x2c>
    2b4a:	e63e      	b.n	27ca <isr+0xca>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    2b4c:	4b6b      	ldr	r3, [pc, #428]	; (2cfc <isr+0x5fc>)
    2b4e:	6859      	ldr	r1, [r3, #4]
    2b50:	2900      	cmp	r1, #0
    2b52:	f43f af00 	beq.w	2956 <isr+0x256>
    2b56:	0c00      	lsrs	r0, r0, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    2b58:	fa1f fe82 	uxth.w	lr, r2
    2b5c:	e004      	b.n	2b68 <isr+0x468>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    2b5e:	330c      	adds	r3, #12
    2b60:	6859      	ldr	r1, [r3, #4]
    2b62:	2900      	cmp	r1, #0
    2b64:	f43f aef7 	beq.w	2956 <isr+0x256>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    2b68:	881f      	ldrh	r7, [r3, #0]
    2b6a:	4287      	cmp	r7, r0
    2b6c:	d1f7      	bne.n	2b5e <isr+0x45e>
    2b6e:	885f      	ldrh	r7, [r3, #2]
    2b70:	4577      	cmp	r7, lr
    2b72:	d1f4      	bne.n	2b5e <isr+0x45e>
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
    2b74:	0a07      	lsrs	r7, r0, #8
    2b76:	2f03      	cmp	r7, #3
    2b78:	f000 80e9 	beq.w	2d4e <isr+0x64e>
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
    2b7c:	891b      	ldrh	r3, [r3, #8]
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    2b7e:	0c12      	lsrs	r2, r2, #16
    2b80:	4293      	cmp	r3, r2
    2b82:	bf28      	it	cs
    2b84:	4613      	movcs	r3, r2

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
    2b86:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    2b8a:	f000 80d1 	beq.w	2d30 <isr+0x630>
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
    2b8e:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
    2b92:	f000 808b 	beq.w	2cac <isr+0x5ac>
    2b96:	4f5a      	ldr	r7, [pc, #360]	; (2d00 <isr+0x600>)
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
					usb_descriptor_buffer[1] = 7;
				} else {
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    2b98:	461a      	mov	r2, r3
    2b9a:	9301      	str	r3, [sp, #4]
    2b9c:	4638      	mov	r0, r7
    2b9e:	f000 fe7b 	bl	3898 <memcpy>
    2ba2:	9b01      	ldr	r3, [sp, #4]
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    2ba4:	f027 021f 	bic.w	r2, r7, #31
	uint32_t end_addr = (uint32_t)addr + size;
    2ba8:	441f      	add	r7, r3
	asm volatile("": : :"memory");
	asm("dsb");
    2baa:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    2bae:	4955      	ldr	r1, [pc, #340]	; (2d04 <isr+0x604>)
    2bb0:	600a      	str	r2, [r1, #0]
		location += 32;
    2bb2:	3220      	adds	r2, #32
	} while (location < end_addr);
    2bb4:	4297      	cmp	r7, r2
    2bb6:	d8fa      	bhi.n	2bae <isr+0x4ae>
	asm("dsb");
    2bb8:	f3bf 8f4f 	dsb	sy
	asm("isb");
    2bbc:	f3bf 8f6f 	isb	sy
				}
				// prep transmit
				arm_dcache_flush_delete(usb_descriptor_buffer, datalen);
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    2bc0:	484f      	ldr	r0, [pc, #316]	; (2d00 <isr+0x600>)
    2bc2:	4619      	mov	r1, r3
    2bc4:	f7ff fd4c 	bl	2660 <endpoint0_transmit.constprop.1>
    2bc8:	e5fb      	b.n	27c2 <isr+0xc2>
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    2bca:	07cb      	lsls	r3, r1, #31
    2bcc:	f57f adf5 	bpl.w	27ba <isr+0xba>
    2bd0:	e5f1      	b.n	27b6 <isr+0xb6>
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    2bd2:	4f4d      	ldr	r7, [pc, #308]	; (2d08 <isr+0x608>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    2bd4:	f04f 0e01 	mov.w	lr, #1
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
    2bd8:	60f3      	str	r3, [r6, #12]
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    2bda:	494c      	ldr	r1, [pc, #304]	; (2d0c <isr+0x60c>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    2bdc:	4b4c      	ldr	r3, [pc, #304]	; (2d10 <isr+0x610>)
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    2bde:	6038      	str	r0, [r7, #0]
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    2be0:	f8c3 e000 	str.w	lr, [r3]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    2be4:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    2be6:	60b3      	str	r3, [r6, #8]
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
    2be8:	494a      	ldr	r1, [pc, #296]	; (2d14 <isr+0x614>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    2bea:	f8d5 01b0 	ldr.w	r0, [r5, #432]	; 0x1b0
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    2bee:	607a      	str	r2, [r7, #4]
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    2bf0:	f501 5780 	add.w	r7, r1, #4096	; 0x1000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    2bf4:	ea40 020e 	orr.w	r2, r0, lr
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    2bf8:	6099      	str	r1, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    2bfa:	f501 5e00 	add.w	lr, r1, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    2bfe:	f501 5040 	add.w	r0, r1, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    2c02:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    2c06:	f8c5 21b0 	str.w	r2, [r5, #432]	; 0x1b0
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    2c0a:	60df      	str	r7, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    2c0c:	f8c3 e010 	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    2c10:	6158      	str	r0, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    2c12:	6199      	str	r1, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
    2c14:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2c18:	2b00      	cmp	r3, #0
    2c1a:	d1fb      	bne.n	2c14 <isr+0x514>
	}
	endpoint0_transfer_ack.next = 1;
    2c1c:	4a30      	ldr	r2, [pc, #192]	; (2ce0 <isr+0x5e0>)
    2c1e:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2c20:	f248 0180 	movw	r1, #32896	; 0x8080
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    2c24:	64f3      	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2c26:	6010      	str	r0, [r2, #0]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    2c28:	f44f 3080 	mov.w	r0, #65536	; 0x10000
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    2c2c:	64b2      	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2c2e:	6051      	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    2c30:	f8c5 b1bc 	str.w	fp, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    2c34:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    2c38:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    2c3a:	ea41 0300 	orr.w	r3, r1, r0
    2c3e:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    2c42:	f8c9 0000 	str.w	r0, [r9]
	while (USB1_ENDPTPRIME) ;
    2c46:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2c4a:	2b00      	cmp	r3, #0
    2c4c:	d1fb      	bne.n	2c46 <isr+0x546>
    2c4e:	e5b8      	b.n	27c2 <isr+0xc2>

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    2c50:	482d      	ldr	r0, [pc, #180]	; (2d08 <isr+0x608>)
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    2c52:	f242 0421 	movw	r4, #8225	; 0x2021
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    2c56:	2600      	movs	r6, #0

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    2c58:	8805      	ldrh	r5, [r0, #0]
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    2c5a:	600e      	str	r6, [r1, #0]

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    2c5c:	42a5      	cmp	r5, r4

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    2c5e:	6840      	ldr	r0, [r0, #4]
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    2c60:	f47f ae10 	bne.w	2884 <isr+0x184>
    2c64:	b281      	uxth	r1, r0
    2c66:	2900      	cmp	r1, #0
    2c68:	f47f ae0c 	bne.w	2884 <isr+0x184>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    2c6c:	4929      	ldr	r1, [pc, #164]	; (2d14 <isr+0x614>)
    2c6e:	4c2a      	ldr	r4, [pc, #168]	; (2d18 <isr+0x618>)
    2c70:	c903      	ldmia	r1, {r0, r1}
    2c72:	0c0d      	lsrs	r5, r1, #16
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    2c74:	2886      	cmp	r0, #134	; 0x86
	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    2c76:	6020      	str	r0, [r4, #0]
    2c78:	80a1      	strh	r1, [r4, #4]
    2c7a:	71a5      	strb	r5, [r4, #6]
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    2c7c:	f47f ae02 	bne.w	2884 <isr+0x184>
}


void usb_start_sof_interrupts(int interface)
{
	__disable_irq();
    2c80:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    2c82:	4826      	ldr	r0, [pc, #152]	; (2d1c <isr+0x61c>)
    2c84:	7801      	ldrb	r1, [r0, #0]
    2c86:	f041 0104 	orr.w	r1, r1, #4
    2c8a:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    2c8c:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    2c90:	0608      	lsls	r0, r1, #24
    2c92:	d406      	bmi.n	2ca2 <isr+0x5a2>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    2c94:	f041 0180 	orr.w	r1, r1, #128	; 0x80
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    2c98:	2080      	movs	r0, #128	; 0x80
    2c9a:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    2c9e:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	}
	__enable_irq();
    2ca2:	b662      	cpsie	i
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
			usb_start_sof_interrupts(NUM_INTERFACE);
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    2ca4:	4a1e      	ldr	r2, [pc, #120]	; (2d20 <isr+0x620>)
    2ca6:	2150      	movs	r1, #80	; 0x50
    2ca8:	7011      	strb	r1, [r2, #0]
    2caa:	e5eb      	b.n	2884 <isr+0x184>
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    2cac:	481d      	ldr	r0, [pc, #116]	; (2d24 <isr+0x624>)
					memcpy(usb_descriptor_buffer, src, datalen);
    2cae:	461a      	mov	r2, r3
    2cb0:	4f13      	ldr	r7, [pc, #76]	; (2d00 <isr+0x600>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    2cb2:	f890 e000 	ldrb.w	lr, [r0]
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
    2cb6:	491c      	ldr	r1, [pc, #112]	; (2d28 <isr+0x628>)
    2cb8:	481c      	ldr	r0, [pc, #112]	; (2d2c <isr+0x62c>)
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
    2cba:	9301      	str	r3, [sp, #4]
    2cbc:	f1be 0f00 	cmp.w	lr, #0
    2cc0:	bf08      	it	eq
    2cc2:	4601      	moveq	r1, r0
    2cc4:	4638      	mov	r0, r7
    2cc6:	f000 fde7 	bl	3898 <memcpy>
					usb_descriptor_buffer[1] = 7;
    2cca:	2207      	movs	r2, #7
    2ccc:	9b01      	ldr	r3, [sp, #4]
    2cce:	707a      	strb	r2, [r7, #1]
    2cd0:	e768      	b.n	2ba4 <isr+0x4a4>

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
	if (sof_usage == 0) {
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    2cd2:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    2cd6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    2cda:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    2cde:	e5c6      	b.n	286e <isr+0x16e>
    2ce0:	20023020 	.word	0x20023020
    2ce4:	20022618 	.word	0x20022618
    2ce8:	402e01c0 	.word	0x402e01c0
    2cec:	200225dc 	.word	0x200225dc
    2cf0:	20024288 	.word	0x20024288
    2cf4:	20022768 	.word	0x20022768
    2cf8:	20022628 	.word	0x20022628
    2cfc:	200003b4 	.word	0x200003b4
    2d00:	20200000 	.word	0x20200000
    2d04:	e000ef70 	.word	0xe000ef70
    2d08:	20022610 	.word	0x20022610
    2d0c:	00070080 	.word	0x00070080
    2d10:	20023000 	.word	0x20023000
    2d14:	20022620 	.word	0x20022620
    2d18:	20024280 	.word	0x20024280
    2d1c:	200225f8 	.word	0x200225f8
    2d20:	20022608 	.word	0x20022608
    2d24:	20022600 	.word	0x20022600
    2d28:	60001694 	.word	0x60001694
    2d2c:	600016d8 	.word	0x600016d8

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
    2d30:	480a      	ldr	r0, [pc, #40]	; (2d5c <isr+0x65c>)
					memcpy(usb_descriptor_buffer, src, datalen);
    2d32:	461a      	mov	r2, r3
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    2d34:	490a      	ldr	r1, [pc, #40]	; (2d60 <isr+0x660>)
					if (usb_high_speed) src = usb_config_descriptor_480;
    2d36:	7807      	ldrb	r7, [r0, #0]
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    2d38:	480a      	ldr	r0, [pc, #40]	; (2d64 <isr+0x664>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
    2d3a:	9301      	str	r3, [sp, #4]
    2d3c:	2f00      	cmp	r7, #0
    2d3e:	bf08      	it	eq
    2d40:	4601      	moveq	r1, r0
    2d42:	4809      	ldr	r0, [pc, #36]	; (2d68 <isr+0x668>)
    2d44:	f000 fda8 	bl	3898 <memcpy>
    2d48:	4f07      	ldr	r7, [pc, #28]	; (2d68 <isr+0x668>)
    2d4a:	9b01      	ldr	r3, [sp, #4]
    2d4c:	e72a      	b.n	2ba4 <isr+0x4a4>
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    2d4e:	0c12      	lsrs	r2, r2, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
    2d50:	780b      	ldrb	r3, [r1, #0]
    2d52:	4293      	cmp	r3, r2
    2d54:	bf28      	it	cs
    2d56:	4613      	movcs	r3, r2
    2d58:	e719      	b.n	2b8e <isr+0x48e>
    2d5a:	bf00      	nop
    2d5c:	20022600 	.word	0x20022600
    2d60:	600016d8 	.word	0x600016d8
    2d64:	60001694 	.word	0x60001694
    2d68:	20200000 	.word	0x20200000

00002d6c <usb_config_rx>:
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    2d6c:	2a00      	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    2d6e:	f1a0 0202 	sub.w	r2, r0, #2
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    2d72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    2d76:	bf14      	ite	ne
    2d78:	2700      	movne	r7, #0
    2d7a:	f04f 5700 	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    2d7e:	2a02      	cmp	r2, #2
    2d80:	d901      	bls.n	2d86 <usb_config_rx+0x1a>
    2d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    2d86:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
    2d8a:	f8df 9040 	ldr.w	r9, [pc, #64]	; 2dcc <usb_config_rx+0x60>
    2d8e:	460d      	mov	r5, r1
    2d90:	4604      	mov	r4, r0
    2d92:	eb0a 0609 	add.w	r6, sl, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    2d96:	2100      	movs	r1, #0
    2d98:	2240      	movs	r2, #64	; 0x40
    2d9a:	4698      	mov	r8, r3
    2d9c:	4630      	mov	r0, r6
    2d9e:	f001 fc99 	bl	46d4 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    2da2:	2001      	movs	r0, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    2da4:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
    2da8:	f84a 1009 	str.w	r1, [sl, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    2dac:	f8c6 8038 	str.w	r8, [r6, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    2db0:	60b0      	str	r0, [r6, #8]
void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
    2db2:	f1b8 0f00 	cmp.w	r8, #0
    2db6:	d0e4      	beq.n	2d82 <usb_config_rx+0x16>
    2db8:	4b03      	ldr	r3, [pc, #12]	; (2dc8 <usb_config_rx+0x5c>)
    2dba:	40a0      	lsls	r0, r4
    2dbc:	681c      	ldr	r4, [r3, #0]
    2dbe:	4320      	orrs	r0, r4
    2dc0:	6018      	str	r0, [r3, #0]
    2dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2dc6:	bf00      	nop
    2dc8:	200225f4 	.word	0x200225f4
    2dcc:	20024000 	.word	0x20024000

00002dd0 <usb_config_tx>:
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    2dd0:	2a00      	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    2dd2:	f1a0 0202 	sub.w	r2, r0, #2
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    2dd6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    2dda:	bf14      	ite	ne
    2ddc:	2700      	movne	r7, #0
    2dde:	f04f 5700 	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    2de2:	2a02      	cmp	r2, #2
    2de4:	d901      	bls.n	2dea <usb_config_tx+0x1a>
    2de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    2dea:	2240      	movs	r2, #64	; 0x40

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    2dec:	01c5      	lsls	r5, r0, #7
    2dee:	f8df 9044 	ldr.w	r9, [pc, #68]	; 2e34 <usb_config_tx+0x64>
    2df2:	4688      	mov	r8, r1
    2df4:	4415      	add	r5, r2
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    2df6:	2100      	movs	r1, #0
    2df8:	4604      	mov	r4, r0
    2dfa:	461e      	mov	r6, r3

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    2dfc:	eb05 0a09 	add.w	sl, r5, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    2e00:	4650      	mov	r0, sl
    2e02:	f001 fc67 	bl	46d4 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    2e06:	2201      	movs	r2, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    2e08:	ea47 4108 	orr.w	r1, r7, r8, lsl #16
    2e0c:	f845 1009 	str.w	r1, [r5, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    2e10:	f8ca 6038 	str.w	r6, [sl, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    2e14:	f8ca 2008 	str.w	r2, [sl, #8]
void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    2e18:	2e00      	cmp	r6, #0
    2e1a:	d0e4      	beq.n	2de6 <usb_config_tx+0x16>
    2e1c:	f104 0010 	add.w	r0, r4, #16
    2e20:	4b03      	ldr	r3, [pc, #12]	; (2e30 <usb_config_tx+0x60>)
    2e22:	4082      	lsls	r2, r0
    2e24:	6818      	ldr	r0, [r3, #0]
    2e26:	4302      	orrs	r2, r0
    2e28:	601a      	str	r2, [r3, #0]
    2e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2e2e:	bf00      	nop
    2e30:	200225f4 	.word	0x200225f4
    2e34:	20024000 	.word	0x20024000

00002e38 <usb_prepare_transfer>:


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    2e38:	0412      	lsls	r2, r2, #16
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
    2e3a:	6081      	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
	transfer->pointer3 = addr + 12288;
	transfer->pointer4 = addr + 16384;
	transfer->callback_param = param;
    2e3c:	61c3      	str	r3, [r0, #28]


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    2e3e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
}



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
    2e42:	b4f0      	push	{r4, r5, r6, r7}
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    2e44:	6042      	str	r2, [r0, #4]



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    2e46:	2701      	movs	r7, #1
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    2e48:	f501 5680 	add.w	r6, r1, #4096	; 0x1000
	transfer->pointer2 = addr + 8192;
    2e4c:	f501 5500 	add.w	r5, r1, #8192	; 0x2000
	transfer->pointer3 = addr + 12288;
    2e50:	f501 5440 	add.w	r4, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    2e54:	f501 4280 	add.w	r2, r1, #16384	; 0x4000



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    2e58:	6007      	str	r7, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    2e5a:	60c6      	str	r6, [r0, #12]
	transfer->pointer2 = addr + 8192;
    2e5c:	6105      	str	r5, [r0, #16]
	transfer->pointer3 = addr + 12288;
    2e5e:	6144      	str	r4, [r0, #20]
	transfer->pointer4 = addr + 16384;
    2e60:	6182      	str	r2, [r0, #24]
	transfer->callback_param = param;
}
    2e62:	bcf0      	pop	{r4, r5, r6, r7}
    2e64:	4770      	bx	lr
    2e66:	bf00      	nop

00002e68 <usb_transmit>:
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    2e68:	1e83      	subs	r3, r0, #2
    2e6a:	2b02      	cmp	r3, #2
    2e6c:	d900      	bls.n	2e70 <usb_transmit+0x8>
    2e6e:	4770      	bx	lr
		count--;
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    2e70:	b430      	push	{r4, r5}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    2e72:	4b06      	ldr	r3, [pc, #24]	; (2e8c <usb_transmit+0x24>)
    2e74:	f100 0410 	add.w	r4, r0, #16
    2e78:	2501      	movs	r5, #1
    2e7a:	460a      	mov	r2, r1
    2e7c:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    2e80:	fa05 f104 	lsl.w	r1, r5, r4
}
    2e84:	bc30      	pop	{r4, r5}
void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    2e86:	f7ff bb97 	b.w	25b8 <schedule_transfer>
    2e8a:	bf00      	nop
    2e8c:	20024040 	.word	0x20024040

00002e90 <usb_receive>:
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    2e90:	1e83      	subs	r3, r0, #2
    2e92:	2b02      	cmp	r3, #2
    2e94:	d900      	bls.n	2e98 <usb_receive+0x8>
    2e96:	4770      	bx	lr
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
    2e98:	b410      	push	{r4}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    2e9a:	4b05      	ldr	r3, [pc, #20]	; (2eb0 <usb_receive+0x20>)
    2e9c:	2401      	movs	r4, #1
    2e9e:	460a      	mov	r2, r1
    2ea0:	fa04 f100 	lsl.w	r1, r4, r0
    2ea4:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
}
    2ea8:	f85d 4b04 	ldr.w	r4, [sp], #4
void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    2eac:	f7ff bb84 	b.w	25b8 <schedule_transfer>
    2eb0:	20024000 	.word	0x20024000

00002eb4 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    2eb4:	6840      	ldr	r0, [r0, #4]
#endif
}
    2eb6:	4770      	bx	lr

00002eb8 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    2eb8:	4a12      	ldr	r2, [pc, #72]	; (2f04 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    2eba:	4b13      	ldr	r3, [pc, #76]	; (2f08 <usb_init_serialnumber+0x50>)
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    2ebc:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    2ec0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    2ec4:	4298      	cmp	r0, r3
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    2ec6:	b510      	push	{r4, lr}
    2ec8:	b084      	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    2eca:	d802      	bhi.n	2ed2 <usb_init_serialnumber+0x1a>
    2ecc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    2ed0:	0040      	lsls	r0, r0, #1
    2ed2:	4c0e      	ldr	r4, [pc, #56]	; (2f0c <usb_init_serialnumber+0x54>)
	ultoa(num, buf, 10);
    2ed4:	a901      	add	r1, sp, #4
    2ed6:	220a      	movs	r2, #10
    2ed8:	f000 fd78 	bl	39cc <ultoa>
    2edc:	a901      	add	r1, sp, #4
	for (i=0; i<10; i++) {
    2ede:	2300      	movs	r3, #0
    2ee0:	4620      	mov	r0, r4
		char c = buf[i];
    2ee2:	f811 2b01 	ldrb.w	r2, [r1], #1
    2ee6:	3301      	adds	r3, #1
		if (!c) break;
    2ee8:	b13a      	cbz	r2, 2efa <usb_init_serialnumber+0x42>

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    2eea:	2b0a      	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    2eec:	f820 2f02 	strh.w	r2, [r0, #2]!

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    2ef0:	d1f7      	bne.n	2ee2 <usb_init_serialnumber+0x2a>
    2ef2:	2316      	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    2ef4:	7023      	strb	r3, [r4, #0]
}
    2ef6:	b004      	add	sp, #16
    2ef8:	bd10      	pop	{r4, pc}
    2efa:	005b      	lsls	r3, r3, #1
    2efc:	b2db      	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    2efe:	7023      	strb	r3, [r4, #0]
}
    2f00:	b004      	add	sp, #16
    2f02:	bd10      	pop	{r4, pc}
    2f04:	401f4400 	.word	0x401f4400
    2f08:	0098967f 	.word	0x0098967f
    2f0c:	200122c0 	.word	0x200122c0

00002f10 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    2f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    2f12:	4914      	ldr	r1, [pc, #80]	; (2f64 <rx_queue_transfer+0x54>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    2f14:	f44f 3700 	mov.w	r7, #131072	; 0x20000
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    2f18:	4d13      	ldr	r5, [pc, #76]	; (2f68 <rx_queue_transfer+0x58>)
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    2f1a:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    2f1c:	eb01 2440 	add.w	r4, r1, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    2f20:	4e12      	ldr	r6, [pc, #72]	; (2f6c <rx_queue_transfer+0x5c>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    2f22:	4a13      	ldr	r2, [pc, #76]	; (2f70 <rx_queue_transfer+0x60>)
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    2f24:	eb05 1540 	add.w	r5, r5, r0, lsl #5
    2f28:	4621      	mov	r1, r4
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    2f2a:	6017      	str	r7, [r2, #0]
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    2f2c:	4628      	mov	r0, r5
    2f2e:	8832      	ldrh	r2, [r6, #0]
    2f30:	f7ff ff82 	bl	2e38 <usb_prepare_transfer>
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    2f34:	8831      	ldrh	r1, [r6, #0]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    2f36:	f024 031f 	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    2f3a:	4421      	add	r1, r4
	asm volatile("": : :"memory");
	asm("dsb");
    2f3c:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    2f40:	4a0c      	ldr	r2, [pc, #48]	; (2f74 <rx_queue_transfer+0x64>)
    2f42:	6013      	str	r3, [r2, #0]
		location += 32;
    2f44:	3320      	adds	r3, #32
	} while (location < end_addr);
    2f46:	4299      	cmp	r1, r3
    2f48:	d8fb      	bhi.n	2f42 <rx_queue_transfer+0x32>
	asm("dsb");
    2f4a:	f3bf 8f4f 	dsb	sy
	asm("isb");
    2f4e:	f3bf 8f6f 	isb	sy
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    2f52:	2003      	movs	r0, #3
    2f54:	4629      	mov	r1, r5
    2f56:	f7ff ff9b 	bl	2e90 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    2f5a:	4b07      	ldr	r3, [pc, #28]	; (2f78 <rx_queue_transfer+0x68>)
    2f5c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    2f60:	601a      	str	r2, [r3, #0]
    2f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2f64:	20200060 	.word	0x20200060
    2f68:	20022640 	.word	0x20022640
    2f6c:	2002274e 	.word	0x2002274e
    2f70:	e000e18c 	.word	0xe000e18c
    2f74:	e000ef5c 	.word	0xe000ef5c
    2f78:	e000e10c 	.word	0xe000e10c

00002f7c <rx_event>:
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    2f7c:	4a24      	ldr	r2, [pc, #144]	; (3010 <rx_event+0x94>)
    2f7e:	6843      	ldr	r3, [r0, #4]
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
    2f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    2f84:	f3c3 430e 	ubfx	r3, r3, #16, #15
    2f88:	8814      	ldrh	r4, [r2, #0]
	int i = t->callback_param;
    2f8a:	69c5      	ldr	r5, [r0, #28]
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    2f8c:	1ae4      	subs	r4, r4, r3
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    2f8e:	2c00      	cmp	r4, #0
    2f90:	dd38      	ble.n	3004 <rx_event+0x88>
		// received a packet with data
		uint32_t head = rx_head;
    2f92:	4920      	ldr	r1, [pc, #128]	; (3014 <rx_event+0x98>)
		if (head != rx_tail) {
    2f94:	4a20      	ldr	r2, [pc, #128]	; (3018 <rx_event+0x9c>)
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    2f96:	780b      	ldrb	r3, [r1, #0]
		if (head != rx_tail) {
    2f98:	7812      	ldrb	r2, [r2, #0]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    2f9a:	b2db      	uxtb	r3, r3
		if (head != rx_tail) {
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    2f9c:	481f      	ldr	r0, [pc, #124]	; (301c <rx_event+0xa0>)
			uint32_t count = rx_count[ii];
    2f9e:	4e20      	ldr	r6, [pc, #128]	; (3020 <rx_event+0xa4>)
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
		if (head != rx_tail) {
    2fa0:	4293      	cmp	r3, r2
    2fa2:	d007      	beq.n	2fb4 <rx_event+0x38>
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    2fa4:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    2fa8:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    2fac:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    2fb0:	4294      	cmp	r4, r2
    2fb2:	d912      	bls.n	2fda <rx_event+0x5e>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    2fb4:	3301      	adds	r3, #1
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
    2fb6:	2200      	movs	r2, #0
    2fb8:	4f1a      	ldr	r7, [pc, #104]	; (3024 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    2fba:	2b08      	cmp	r3, #8
				// TODO: trigger serialEvent
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
    2fbc:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		rx_index[i] = 0;
    2fc0:	f827 2015 	strh.w	r2, [r7, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
		rx_head = head;
		rx_available += len;
    2fc4:	4e18      	ldr	r6, [pc, #96]	; (3028 <rx_event+0xac>)
    2fc6:	bf94      	ite	ls
    2fc8:	b2da      	uxtbls	r2, r3
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    2fca:	4613      	movhi	r3, r2
		rx_list[head] = i;
		rx_head = head;
    2fcc:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    2fce:	6832      	ldr	r2, [r6, #0]
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
    2fd0:	54c5      	strb	r5, [r0, r3]
		rx_head = head;
		rx_available += len;
    2fd2:	4414      	add	r4, r2
    2fd4:	6034      	str	r4, [r6, #0]
    2fd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    2fda:	4b14      	ldr	r3, [pc, #80]	; (302c <rx_event+0xb0>)
    2fdc:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    2fe0:	4622      	mov	r2, r4
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    2fe2:	4427      	add	r7, r4
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    2fe4:	eb03 2145 	add.w	r1, r3, r5, lsl #9
    2fe8:	4418      	add	r0, r3
    2fea:	f000 fc55 	bl	3898 <memcpy>
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
    2fee:	4a0e      	ldr	r2, [pc, #56]	; (3028 <rx_event+0xac>)
				rx_queue_transfer(i);
    2ff0:	4628      	mov	r0, r5
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    2ff2:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    2ff6:	6813      	ldr	r3, [r2, #0]
    2ff8:	441c      	add	r4, r3
    2ffa:	6014      	str	r4, [r2, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    2ffc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
				rx_queue_transfer(i);
    3000:	f7ff bf86 	b.w	2f10 <rx_queue_transfer>
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    3004:	4628      	mov	r0, r5
	}
}
    3006:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    300a:	f7ff bf81 	b.w	2f10 <rx_queue_transfer>
    300e:	bf00      	nop
    3010:	2002274e 	.word	0x2002274e
    3014:	20022764 	.word	0x20022764
    3018:	20022740 	.word	0x20022740
    301c:	20022744 	.word	0x20022744
    3020:	20022750 	.word	0x20022750
    3024:	2002262c 	.word	0x2002262c
    3028:	20022760 	.word	0x20022760
    302c:	20200060 	.word	0x20200060

00003030 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    3030:	4b1e      	ldr	r3, [pc, #120]	; (30ac <usb_serial_flush_callback+0x7c>)
    3032:	781a      	ldrb	r2, [r3, #0]
    3034:	b95a      	cbnz	r2, 304e <usb_serial_flush_callback+0x1e>
    3036:	f002 03ff 	and.w	r3, r2, #255	; 0xff
	if (!usb_configuration) return;
    303a:	4a1d      	ldr	r2, [pc, #116]	; (30b0 <usb_serial_flush_callback+0x80>)
    303c:	7812      	ldrb	r2, [r2, #0]
    303e:	b132      	cbz	r2, 304e <usb_serial_flush_callback+0x1e>
	tx_available = 0;
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
    3040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
    3044:	4d1b      	ldr	r5, [pc, #108]	; (30b4 <usb_serial_flush_callback+0x84>)
    3046:	882a      	ldrh	r2, [r5, #0]
    3048:	b912      	cbnz	r2, 3050 <usb_serial_flush_callback+0x20>
    304a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    304e:	4770      	bx	lr
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    3050:	4e19      	ldr	r6, [pc, #100]	; (30b8 <usb_serial_flush_callback+0x88>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    3052:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    3056:	4f19      	ldr	r7, [pc, #100]	; (30bc <usb_serial_flush_callback+0x8c>)
    3058:	7831      	ldrb	r1, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    305a:	4642      	mov	r2, r8
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    305c:	4c18      	ldr	r4, [pc, #96]	; (30c0 <usb_serial_flush_callback+0x90>)
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    305e:	eb07 1741 	add.w	r7, r7, r1, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    3062:	eb04 24c1 	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    3066:	4638      	mov	r0, r7
    3068:	4621      	mov	r1, r4
    306a:	f7ff fee5 	bl	2e38 <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    306e:	eb08 0204 	add.w	r2, r8, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    3072:	f024 011f 	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    3076:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    307a:	4b12      	ldr	r3, [pc, #72]	; (30c4 <usb_serial_flush_callback+0x94>)
    307c:	6019      	str	r1, [r3, #0]
		location += 32;
    307e:	3120      	adds	r1, #32
	} while (location < end_addr);
    3080:	428a      	cmp	r2, r1
    3082:	d8fb      	bhi.n	307c <usb_serial_flush_callback+0x4c>
	asm("dsb");
    3084:	f3bf 8f4f 	dsb	sy
	asm("isb");
    3088:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    308c:	2004      	movs	r0, #4
    308e:	4639      	mov	r1, r7
    3090:	f7ff feea 	bl	2e68 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    3094:	7833      	ldrb	r3, [r6, #0]
    3096:	4a08      	ldr	r2, [pc, #32]	; (30b8 <usb_serial_flush_callback+0x88>)
    3098:	3301      	adds	r3, #1
    309a:	b2db      	uxtb	r3, r3
    309c:	2b03      	cmp	r3, #3
    309e:	bf88      	it	hi
    30a0:	2300      	movhi	r3, #0
    30a2:	7013      	strb	r3, [r2, #0]
	tx_available = 0;
    30a4:	2300      	movs	r3, #0
    30a6:	802b      	strh	r3, [r5, #0]
    30a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    30ac:	2002263e 	.word	0x2002263e
    30b0:	20022628 	.word	0x20022628
    30b4:	20022766 	.word	0x20022766
    30b8:	2002263f 	.word	0x2002263f
    30bc:	20022780 	.word	0x20022780
    30c0:	20201060 	.word	0x20201060
    30c4:	e000ef70 	.word	0xe000ef70

000030c8 <usb_serial_write.part.1>:
{
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
    30c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    30cc:	b085      	sub	sp, #20
    30ce:	9002      	str	r0, [sp, #8]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    30d0:	9101      	str	r1, [sp, #4]
    30d2:	2900      	cmp	r1, #0
    30d4:	f000 80a2 	beq.w	321c <usb_serial_write.part.1+0x154>
    30d8:	2300      	movs	r3, #0
    30da:	f8df 815c 	ldr.w	r8, [pc, #348]	; 3238 <usb_serial_write.part.1+0x170>
    30de:	f8df 914c 	ldr.w	r9, [pc, #332]	; 322c <usb_serial_write.part.1+0x164>
    30e2:	9300      	str	r3, [sp, #0]
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
    30e4:	4e4e      	ldr	r6, [pc, #312]	; (3220 <usb_serial_write.part.1+0x158>)
    30e6:	f8b8 3000 	ldrh.w	r3, [r8]
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    30ea:	f8df a150 	ldr.w	sl, [pc, #336]	; 323c <usb_serial_write.part.1+0x174>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
	do {
		SCB_CACHE_DCCIMVAC = location;
    30ee:	f8df b150 	ldr.w	fp, [pc, #336]	; 3240 <usb_serial_write.part.1+0x178>
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
    30f2:	4a4c      	ldr	r2, [pc, #304]	; (3224 <usb_serial_write.part.1+0x15c>)
    30f4:	7814      	ldrb	r4, [r2, #0]
    30f6:	4a4c      	ldr	r2, [pc, #304]	; (3228 <usb_serial_write.part.1+0x160>)
    30f8:	eb02 1744 	add.w	r7, r2, r4, lsl #5
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    30fc:	2b00      	cmp	r3, #0
    30fe:	d16e      	bne.n	31de <usb_serial_write.part.1+0x116>
    3100:	461d      	mov	r5, r3
    3102:	461c      	mov	r4, r3
    3104:	e014      	b.n	3130 <usb_serial_write.part.1+0x68>
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    3106:	f899 3000 	ldrb.w	r3, [r9]
				}
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
    310a:	b904      	cbnz	r4, 310e <usb_serial_write.part.1+0x46>
				wait_begin_at = systick_millis_count;
    310c:	6835      	ldr	r5, [r6, #0]
    310e:	2401      	movs	r4, #1
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    3110:	2b00      	cmp	r3, #0
    3112:	d15e      	bne.n	31d2 <usb_serial_write.part.1+0x10a>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    3114:	6833      	ldr	r3, [r6, #0]
    3116:	1b5b      	subs	r3, r3, r5
    3118:	2b78      	cmp	r3, #120	; 0x78
    311a:	d879      	bhi.n	3210 <usb_serial_write.part.1+0x148>
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    311c:	f89a 3000 	ldrb.w	r3, [sl]
    3120:	2b00      	cmp	r3, #0
    3122:	d056      	beq.n	31d2 <usb_serial_write.part.1+0x10a>
			yield();
    3124:	f000 fb40 	bl	37a8 <yield>
	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    3128:	f8b8 3000 	ldrh.w	r3, [r8]
    312c:	2b00      	cmp	r3, #0
    312e:	d154      	bne.n	31da <usb_serial_write.part.1+0x112>
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
    3130:	4638      	mov	r0, r7
    3132:	f7ff febf 	bl	2eb4 <usb_transfer_status>
			if (!(status & 0x80)) {
    3136:	f010 0080 	ands.w	r0, r0, #128	; 0x80
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    313a:	4a3c      	ldr	r2, [pc, #240]	; (322c <usb_serial_write.part.1+0x164>)
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
			if (!(status & 0x80)) {
    313c:	d1e3      	bne.n	3106 <usb_serial_write.part.1+0x3e>
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    313e:	f44f 6300 	mov.w	r3, #2048	; 0x800
    3142:	4a38      	ldr	r2, [pc, #224]	; (3224 <usb_serial_write.part.1+0x15c>)
				transmit_previous_timeout = 0;
    3144:	f889 0000 	strb.w	r0, [r9]
    3148:	7814      	ldrb	r4, [r2, #0]
    314a:	461a      	mov	r2, r3
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    314c:	f8a8 3000 	strh.w	r3, [r8]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    3150:	02e4      	lsls	r4, r4, #11
		if (size >= tx_available) {
    3152:	9d01      	ldr	r5, [sp, #4]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    3154:	4936      	ldr	r1, [pc, #216]	; (3230 <usb_serial_write.part.1+0x168>)
    3156:	4420      	add	r0, r4
		if (size >= tx_available) {
    3158:	4295      	cmp	r5, r2
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    315a:	4408      	add	r0, r1
		if (size >= tx_available) {
    315c:	d343      	bcc.n	31e6 <usb_serial_write.part.1+0x11e>
			memcpy(txdata, data, tx_available);
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    315e:	440c      	add	r4, r1
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
    3160:	9902      	ldr	r1, [sp, #8]
    3162:	f000 fb99 	bl	3898 <memcpy>
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    3166:	2300      	movs	r3, #0
    3168:	4621      	mov	r1, r4
    316a:	f44f 6200 	mov.w	r2, #2048	; 0x800
    316e:	4638      	mov	r0, r7
    3170:	f7ff fe62 	bl	2e38 <usb_prepare_transfer>
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    3174:	f024 031f 	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    3178:	f504 6400 	add.w	r4, r4, #2048	; 0x800
	asm volatile("": : :"memory");
	asm("dsb");
    317c:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    3180:	f8cb 3000 	str.w	r3, [fp]
		location += 32;
    3184:	3320      	adds	r3, #32
	} while (location < end_addr);
    3186:	429c      	cmp	r4, r3
    3188:	d8fa      	bhi.n	3180 <usb_serial_write.part.1+0xb8>
	asm("dsb");
    318a:	f3bf 8f4f 	dsb	sy
	asm("isb");
    318e:	f3bf 8f6f 	isb	sy
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    3192:	2004      	movs	r0, #4
    3194:	4639      	mov	r1, r7
    3196:	f7ff fe67 	bl	2e68 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    319a:	4b22      	ldr	r3, [pc, #136]	; (3224 <usb_serial_write.part.1+0x15c>)
    319c:	4a21      	ldr	r2, [pc, #132]	; (3224 <usb_serial_write.part.1+0x15c>)
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
    319e:	2100      	movs	r1, #0
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    31a0:	781b      	ldrb	r3, [r3, #0]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    31a2:	4824      	ldr	r0, [pc, #144]	; (3234 <usb_serial_write.part.1+0x16c>)
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    31a4:	3301      	adds	r3, #1
    31a6:	b2db      	uxtb	r3, r3
    31a8:	2b03      	cmp	r3, #3
    31aa:	bf88      	it	hi
    31ac:	2300      	movhi	r3, #0
    31ae:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    31b0:	f8b8 2000 	ldrh.w	r2, [r8]
			sent += tx_available;
    31b4:	9b00      	ldr	r3, [sp, #0]
			data += tx_available;
			tx_available = 0;
    31b6:	f8a8 1000 	strh.w	r1, [r8]
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
			sent += tx_available;
    31ba:	4413      	add	r3, r2
    31bc:	9300      	str	r3, [sp, #0]
			data += tx_available;
    31be:	9b02      	ldr	r3, [sp, #8]
    31c0:	4413      	add	r3, r2
    31c2:	9302      	str	r3, [sp, #8]
    31c4:	460b      	mov	r3, r1
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    31c6:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    31ca:	9901      	ldr	r1, [sp, #4]
    31cc:	1a8a      	subs	r2, r1, r2
    31ce:	9201      	str	r2, [sp, #4]
    31d0:	d18f      	bne.n	30f2 <usb_serial_write.part.1+0x2a>
    31d2:	9800      	ldr	r0, [sp, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    31d4:	b005      	add	sp, #20
    31d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    31da:	4a12      	ldr	r2, [pc, #72]	; (3224 <usb_serial_write.part.1+0x15c>)
    31dc:	7814      	ldrb	r4, [r2, #0]
    31de:	461a      	mov	r2, r3
    31e0:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    31e4:	e7b4      	b.n	3150 <usb_serial_write.part.1+0x88>
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
    31e6:	9c01      	ldr	r4, [sp, #4]
    31e8:	9902      	ldr	r1, [sp, #8]
    31ea:	4622      	mov	r2, r4
    31ec:	9303      	str	r3, [sp, #12]
    31ee:	f000 fb53 	bl	3898 <memcpy>
			tx_available -= size;
    31f2:	9b03      	ldr	r3, [sp, #12]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    31f4:	4a0f      	ldr	r2, [pc, #60]	; (3234 <usb_serial_write.part.1+0x16c>)
    31f6:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
    31fa:	1b1b      	subs	r3, r3, r4
    31fc:	f8a8 3000 	strh.w	r3, [r8]
    3200:	9b00      	ldr	r3, [sp, #0]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    3202:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    3206:	4618      	mov	r0, r3
    3208:	4420      	add	r0, r4
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    320a:	b005      	add	sp, #20
    320c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    3210:	2301      	movs	r3, #1
				return sent;
    3212:	9800      	ldr	r0, [sp, #0]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    3214:	7013      	strb	r3, [r2, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    3216:	b005      	add	sp, #20
    3218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    321c:	9801      	ldr	r0, [sp, #4]
    321e:	e7d9      	b.n	31d4 <usb_serial_write.part.1+0x10c>
    3220:	200225dc 	.word	0x200225dc
    3224:	2002263f 	.word	0x2002263f
    3228:	20022780 	.word	0x20022780
    322c:	20022765 	.word	0x20022765
    3230:	20201060 	.word	0x20201060
    3234:	402e0000 	.word	0x402e0000
    3238:	20022766 	.word	0x20022766
    323c:	20022628 	.word	0x20022628
    3240:	e000ef70 	.word	0xe000ef70

00003244 <usb_serial_reset>:
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);


void usb_serial_reset(void)
{
    3244:	4770      	bx	lr
    3246:	bf00      	nop

00003248 <usb_serial_configure>:
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    3248:	4b31      	ldr	r3, [pc, #196]	; (3310 <usb_serial_configure+0xc8>)
	printf("usb_serial_reset\n");
	// deallocate all transfer descriptors
}

void usb_serial_configure(void)
{
    324a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    324e:	781b      	ldrb	r3, [r3, #0]
		tx_packet_size = CDC_TX_SIZE_480;
    3250:	4f30      	ldr	r7, [pc, #192]	; (3314 <usb_serial_configure+0xcc>)
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    3252:	2b00      	cmp	r3, #0
    3254:	d054      	beq.n	3300 <usb_serial_configure+0xb8>
		tx_packet_size = CDC_TX_SIZE_480;
    3256:	f44f 7300 	mov.w	r3, #512	; 0x200
		rx_packet_size = CDC_RX_SIZE_480;
    325a:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 3348 <usb_serial_configure+0x100>
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
    325e:	803b      	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    3260:	f8a8 3000 	strh.w	r3, [r8]
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    3264:	2100      	movs	r1, #0
    3266:	2280      	movs	r2, #128	; 0x80
    3268:	482b      	ldr	r0, [pc, #172]	; (3318 <usb_serial_configure+0xd0>)
	tx_head = 0;
    326a:	460d      	mov	r5, r1
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    326c:	4e2b      	ldr	r6, [pc, #172]	; (331c <usb_serial_configure+0xd4>)
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    326e:	f001 fa31 	bl	46d4 <memset>
	tx_head = 0;
    3272:	4c2b      	ldr	r4, [pc, #172]	; (3320 <usb_serial_configure+0xd8>)
	tx_available = 0;
    3274:	4b2b      	ldr	r3, [pc, #172]	; (3324 <usb_serial_configure+0xdc>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    3276:	4629      	mov	r1, r5
    3278:	f44f 7280 	mov.w	r2, #256	; 0x100
    327c:	482a      	ldr	r0, [pc, #168]	; (3328 <usb_serial_configure+0xe0>)
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    327e:	7025      	strb	r5, [r4, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    3280:	462c      	mov	r4, r5
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    3282:	801d      	strh	r5, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    3284:	f001 fa26 	bl	46d4 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    3288:	6035      	str	r5, [r6, #0]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    328a:	462b      	mov	r3, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    328c:	6075      	str	r5, [r6, #4]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    328e:	462a      	mov	r2, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    3290:	60b5      	str	r5, [r6, #8]
    3292:	60f5      	str	r5, [r6, #12]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    3294:	4925      	ldr	r1, [pc, #148]	; (332c <usb_serial_configure+0xe4>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    3296:	4e26      	ldr	r6, [pc, #152]	; (3330 <usb_serial_configure+0xe8>)
	rx_head = 0;
	rx_tail = 0;
    3298:	4826      	ldr	r0, [pc, #152]	; (3334 <usb_serial_configure+0xec>)
	rx_available = 0;
    329a:	f8df e0b0 	ldr.w	lr, [pc, #176]	; 334c <usb_serial_configure+0x104>
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    329e:	700d      	strb	r5, [r1, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    32a0:	2110      	movs	r1, #16
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
    32a2:	7005      	strb	r5, [r0, #0]
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    32a4:	2002      	movs	r0, #2
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    32a6:	6035      	str	r5, [r6, #0]
    32a8:	6075      	str	r5, [r6, #4]
    32aa:	60b5      	str	r5, [r6, #8]
    32ac:	60f5      	str	r5, [r6, #12]
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
    32ae:	f8ce 5000 	str.w	r5, [lr]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    32b2:	f7ff fd8d 	bl	2dd0 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    32b6:	f8b8 1000 	ldrh.w	r1, [r8]
    32ba:	462a      	mov	r2, r5
    32bc:	4b1e      	ldr	r3, [pc, #120]	; (3338 <usb_serial_configure+0xf0>)
    32be:	2003      	movs	r0, #3
    32c0:	f7ff fd54 	bl	2d6c <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    32c4:	462b      	mov	r3, r5
    32c6:	8839      	ldrh	r1, [r7, #0]
    32c8:	2201      	movs	r2, #1
    32ca:	2004      	movs	r0, #4
    32cc:	f7ff fd80 	bl	2dd0 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    32d0:	4620      	mov	r0, r4
    32d2:	3401      	adds	r4, #1
    32d4:	f7ff fe1c 	bl	2f10 <rx_queue_transfer>
    32d8:	2c08      	cmp	r4, #8
    32da:	d1f9      	bne.n	32d0 <usb_serial_configure+0x88>
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
	USB1_GPTIMER0CTRL = 0;
    32dc:	4b17      	ldr	r3, [pc, #92]	; (333c <usb_serial_configure+0xf4>)
	USB1_GPTIMER0LD = microseconds - 1;
    32de:	224a      	movs	r2, #74	; 0x4a
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    32e0:	4817      	ldr	r0, [pc, #92]	; (3340 <usb_serial_configure+0xf8>)
	USB1_GPTIMER0CTRL = 0;
    32e2:	2100      	movs	r1, #0
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    32e4:	4c17      	ldr	r4, [pc, #92]	; (3344 <usb_serial_configure+0xfc>)
    32e6:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    32e8:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    32ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    32f0:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    32f4:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    32f8:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    32fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    3300:	2340      	movs	r3, #64	; 0x40
		rx_packet_size = CDC_RX_SIZE_12;
    3302:	f8df 8044 	ldr.w	r8, [pc, #68]	; 3348 <usb_serial_configure+0x100>
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    3306:	803b      	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_12;
    3308:	f8a8 3000 	strh.w	r3, [r8]
    330c:	e7aa      	b.n	3264 <usb_serial_configure+0x1c>
    330e:	bf00      	nop
    3310:	20022600 	.word	0x20022600
    3314:	2002263c 	.word	0x2002263c
    3318:	20022780 	.word	0x20022780
    331c:	20022750 	.word	0x20022750
    3320:	2002263f 	.word	0x2002263f
    3324:	20022766 	.word	0x20022766
    3328:	20022640 	.word	0x20022640
    332c:	20022764 	.word	0x20022764
    3330:	2002262c 	.word	0x2002262c
    3334:	20022740 	.word	0x20022740
    3338:	00002f7d 	.word	0x00002f7d
    333c:	402e0000 	.word	0x402e0000
    3340:	200225f0 	.word	0x200225f0
    3344:	00003031 	.word	0x00003031
    3348:	2002274e 	.word	0x2002274e
    334c:	20022760 	.word	0x20022760

00003350 <usb_serial_read>:
int usb_serial_read(void *buffer, uint32_t size)
{
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    3350:	4b31      	ldr	r3, [pc, #196]	; (3418 <usb_serial_read+0xc8>)
    3352:	f44f 3200 	mov.w	r2, #131072	; 0x20000

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    3356:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    335a:	601a      	str	r2, [r3, #0]

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    335c:	b083      	sub	sp, #12
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    335e:	4b2f      	ldr	r3, [pc, #188]	; (341c <usb_serial_read+0xcc>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    3360:	4689      	mov	r9, r1
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    3362:	781c      	ldrb	r4, [r3, #0]
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    3364:	2900      	cmp	r1, #0
    3366:	d053      	beq.n	3410 <usb_serial_read+0xc0>
    3368:	4b2d      	ldr	r3, [pc, #180]	; (3420 <usb_serial_read+0xd0>)
    336a:	b2e4      	uxtb	r4, r4
    336c:	781b      	ldrb	r3, [r3, #0]
    336e:	429c      	cmp	r4, r3
    3370:	d050      	beq.n	3414 <usb_serial_read+0xc4>
    3372:	4682      	mov	sl, r0
    3374:	2700      	movs	r7, #0
    3376:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 3438 <usb_serial_read+0xe8>
		if (++tail > RX_NUM) tail = 0;
    337a:	3401      	adds	r4, #1
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    337c:	4b29      	ldr	r3, [pc, #164]	; (3424 <usb_serial_read+0xd4>)
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
    337e:	ebc7 0809 	rsb	r8, r7, r9
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    3382:	4650      	mov	r0, sl
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    3384:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    3386:	9301      	str	r3, [sp, #4]
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
    3388:	4b27      	ldr	r3, [pc, #156]	; (3428 <usb_serial_read+0xd8>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    338a:	bf28      	it	cs
    338c:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    338e:	5d1d      	ldrb	r5, [r3, r4]
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    3390:	4b24      	ldr	r3, [pc, #144]	; (3424 <usb_serial_read+0xd4>)
    3392:	f833 e015 	ldrh.w	lr, [r3, r5, lsl #1]
    3396:	4b25      	ldr	r3, [pc, #148]	; (342c <usb_serial_read+0xdc>)
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    3398:	eb0e 2145 	add.w	r1, lr, r5, lsl #9
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    339c:	f833 6015 	ldrh.w	r6, [r3, r5, lsl #1]
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    33a0:	4b23      	ldr	r3, [pc, #140]	; (3430 <usb_serial_read+0xe0>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    33a2:	ebce 0606 	rsb	r6, lr, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    33a6:	4419      	add	r1, r3
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    33a8:	45b0      	cmp	r8, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    33aa:	4632      	mov	r2, r6
			p += avail;
			rx_available -= avail;
			count += avail;
    33ac:	4437      	add	r7, r6
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    33ae:	d219      	bcs.n	33e4 <usb_serial_read+0x94>
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    33b0:	eb0e 2145 	add.w	r1, lr, r5, lsl #9
    33b4:	4642      	mov	r2, r8
    33b6:	4419      	add	r1, r3
    33b8:	f000 fa6e 	bl	3898 <memcpy>
			rx_available -= len;
			rx_index[i] += len;
    33bc:	9b01      	ldr	r3, [sp, #4]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    33be:	f8db 1000 	ldr.w	r1, [fp]
    33c2:	4648      	mov	r0, r9
			rx_index[i] += len;
    33c4:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    33c8:	ebc8 0101 	rsb	r1, r8, r1
			rx_index[i] += len;
    33cc:	4490      	add	r8, r2
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    33ce:	f8cb 1000 	str.w	r1, [fp]
			rx_index[i] += len;
    33d2:	f823 8015 	strh.w	r8, [r3, r5, lsl #1]
			count += avail;
			rx_tail = tail;
			rx_queue_transfer(i);
		}
	}
	NVIC_ENABLE_IRQ(IRQ_USB1);
    33d6:	4b17      	ldr	r3, [pc, #92]	; (3434 <usb_serial_read+0xe4>)
    33d8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    33dc:	601a      	str	r2, [r3, #0]
	return count;
}
    33de:	b003      	add	sp, #12
    33e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    33e4:	f000 fa58 	bl	3898 <memcpy>
			p += avail;
			rx_available -= avail;
    33e8:	f8db 2000 	ldr.w	r2, [fp]
			count += avail;
			rx_tail = tail;
    33ec:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
    33ee:	4628      	mov	r0, r5
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
			rx_available -= avail;
    33f0:	1b92      	subs	r2, r2, r6
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
    33f2:	44b2      	add	sl, r6
			rx_available -= avail;
    33f4:	f8cb 2000 	str.w	r2, [fp]
			count += avail;
			rx_tail = tail;
    33f8:	4a08      	ldr	r2, [pc, #32]	; (341c <usb_serial_read+0xcc>)
    33fa:	7013      	strb	r3, [r2, #0]
			rx_queue_transfer(i);
    33fc:	f7ff fd88 	bl	2f10 <rx_queue_transfer>

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    3400:	45b9      	cmp	r9, r7
    3402:	d903      	bls.n	340c <usb_serial_read+0xbc>
    3404:	4b06      	ldr	r3, [pc, #24]	; (3420 <usb_serial_read+0xd0>)
    3406:	781b      	ldrb	r3, [r3, #0]
    3408:	429c      	cmp	r4, r3
    340a:	d1b6      	bne.n	337a <usb_serial_read+0x2a>
    340c:	4638      	mov	r0, r7
    340e:	e7e2      	b.n	33d6 <usb_serial_read+0x86>
    3410:	4608      	mov	r0, r1
    3412:	e7e0      	b.n	33d6 <usb_serial_read+0x86>
    3414:	2000      	movs	r0, #0
    3416:	e7de      	b.n	33d6 <usb_serial_read+0x86>
    3418:	e000e18c 	.word	0xe000e18c
    341c:	20022740 	.word	0x20022740
    3420:	20022764 	.word	0x20022764
    3424:	2002262c 	.word	0x2002262c
    3428:	20022744 	.word	0x20022744
    342c:	20022750 	.word	0x20022750
    3430:	20200060 	.word	0x20200060
    3434:	e000e10c 	.word	0xe000e10c
    3438:	20022760 	.word	0x20022760

0000343c <usb_serial_peekchar>:
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    343c:	4b0b      	ldr	r3, [pc, #44]	; (346c <usb_serial_peekchar+0x30>)
	if (tail == rx_head) return -1;
    343e:	4a0c      	ldr	r2, [pc, #48]	; (3470 <usb_serial_peekchar+0x34>)
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    3440:	781b      	ldrb	r3, [r3, #0]
	if (tail == rx_head) return -1;
    3442:	7812      	ldrb	r2, [r2, #0]
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    3444:	b2db      	uxtb	r3, r3
	if (tail == rx_head) return -1;
    3446:	4293      	cmp	r3, r2
    3448:	d00d      	beq.n	3466 <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    344a:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    344c:	4809      	ldr	r0, [pc, #36]	; (3474 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    344e:	4a0a      	ldr	r2, [pc, #40]	; (3478 <usb_serial_peekchar+0x3c>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    3450:	2b09      	cmp	r3, #9
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    3452:	490a      	ldr	r1, [pc, #40]	; (347c <usb_serial_peekchar+0x40>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    3454:	bf28      	it	cs
    3456:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    3458:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    345a:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
    345e:	eb02 2343 	add.w	r3, r2, r3, lsl #9
    3462:	5c58      	ldrb	r0, [r3, r1]
    3464:	4770      	bx	lr

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
    3466:	f04f 30ff 	mov.w	r0, #4294967295
	if (++tail > RX_NUM) tail = 0;
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
}
    346a:	4770      	bx	lr
    346c:	20022740 	.word	0x20022740
    3470:	20022764 	.word	0x20022764
    3474:	20022744 	.word	0x20022744
    3478:	20200060 	.word	0x20200060
    347c:	2002262c 	.word	0x2002262c

00003480 <usb_serial_available>:

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	return rx_available;
    3480:	4b01      	ldr	r3, [pc, #4]	; (3488 <usb_serial_available+0x8>)
    3482:	6818      	ldr	r0, [r3, #0]
}
    3484:	4770      	bx	lr
    3486:	bf00      	nop
    3488:	20022760 	.word	0x20022760

0000348c <usb_serial_flush_input>:

// discard any buffered input
void usb_serial_flush_input(void)
{
    348c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    3490:	4e15      	ldr	r6, [pc, #84]	; (34e8 <usb_serial_flush_input+0x5c>)
	while (tail != rx_head) {
    3492:	4d16      	ldr	r5, [pc, #88]	; (34ec <usb_serial_flush_input+0x60>)
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    3494:	7834      	ldrb	r4, [r6, #0]
	while (tail != rx_head) {
    3496:	782b      	ldrb	r3, [r5, #0]
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    3498:	b2e4      	uxtb	r4, r4
	while (tail != rx_head) {
    349a:	429c      	cmp	r4, r3
    349c:	d021      	beq.n	34e2 <usb_serial_flush_input+0x56>
    349e:	f8df 9054 	ldr.w	r9, [pc, #84]	; 34f4 <usb_serial_flush_input+0x68>
    34a2:	f8df b054 	ldr.w	fp, [pc, #84]	; 34f8 <usb_serial_flush_input+0x6c>
    34a6:	f8df 8054 	ldr.w	r8, [pc, #84]	; 34fc <usb_serial_flush_input+0x70>
    34aa:	4f11      	ldr	r7, [pc, #68]	; (34f0 <usb_serial_flush_input+0x64>)
		if (++tail > RX_NUM) tail = 0;
    34ac:	3401      	adds	r4, #1
    34ae:	2c08      	cmp	r4, #8
    34b0:	fa5f fa84 	uxtb.w	sl, r4
    34b4:	d901      	bls.n	34ba <usb_serial_flush_input+0x2e>
    34b6:	2400      	movs	r4, #0
    34b8:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
    34ba:	f819 1004 	ldrb.w	r1, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    34be:	f8db 2000 	ldr.w	r2, [fp]
    34c2:	f838 3011 	ldrh.w	r3, [r8, r1, lsl #1]
		rx_queue_transfer(i);
    34c6:	4608      	mov	r0, r1
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		rx_available -= rx_count[i] - rx_index[i];
    34c8:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
    34cc:	1a5b      	subs	r3, r3, r1
    34ce:	1ad3      	subs	r3, r2, r3
    34d0:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
    34d4:	f7ff fd1c 	bl	2f10 <rx_queue_transfer>
		rx_tail = tail;
    34d8:	f886 a000 	strb.w	sl, [r6]

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
    34dc:	782b      	ldrb	r3, [r5, #0]
    34de:	429c      	cmp	r4, r3
    34e0:	d1e4      	bne.n	34ac <usb_serial_flush_input+0x20>
    34e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    34e6:	bf00      	nop
    34e8:	20022740 	.word	0x20022740
    34ec:	20022764 	.word	0x20022764
    34f0:	2002262c 	.word	0x2002262c
    34f4:	20022744 	.word	0x20022744
    34f8:	20022760 	.word	0x20022760
    34fc:	20022750 	.word	0x20022750

00003500 <usb_serial_getchar>:
}


// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    3500:	b500      	push	{lr}
    3502:	b083      	sub	sp, #12
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
    3504:	2101      	movs	r1, #1
    3506:	f10d 0007 	add.w	r0, sp, #7
    350a:	f7ff ff21 	bl	3350 <usb_serial_read>
    350e:	b120      	cbz	r0, 351a <usb_serial_getchar+0x1a>
    3510:	f89d 0007 	ldrb.w	r0, [sp, #7]
	return -1;
}
    3514:	b003      	add	sp, #12
    3516:	f85d fb04 	ldr.w	pc, [sp], #4
// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
	return -1;
    351a:	f04f 30ff 	mov.w	r0, #4294967295
    351e:	e7f9      	b.n	3514 <usb_serial_getchar+0x14>

00003520 <usb_serial_putchar>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    3520:	4b09      	ldr	r3, [pc, #36]	; (3548 <usb_serial_putchar+0x28>)
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    3522:	b500      	push	{lr}
    3524:	b083      	sub	sp, #12
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    3526:	781b      	ldrb	r3, [r3, #0]
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    3528:	f88d 0007 	strb.w	r0, [sp, #7]
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    352c:	b923      	cbnz	r3, 3538 <usb_serial_putchar+0x18>
    352e:	f003 00ff 	and.w	r0, r3, #255	; 0xff

// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
	return usb_serial_write(&c, 1);
}
    3532:	b003      	add	sp, #12
    3534:	f85d fb04 	ldr.w	pc, [sp], #4
    3538:	2101      	movs	r1, #1
    353a:	f10d 0007 	add.w	r0, sp, #7
    353e:	f7ff fdc3 	bl	30c8 <usb_serial_write.part.1>
    3542:	b003      	add	sp, #12
    3544:	f85d fb04 	ldr.w	pc, [sp], #4
    3548:	20022628 	.word	0x20022628

0000354c <usb_serial_write>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    354c:	4b04      	ldr	r3, [pc, #16]	; (3560 <usb_serial_write+0x14>)
    354e:	781b      	ldrb	r3, [r3, #0]
    3550:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    3554:	b10b      	cbz	r3, 355a <usb_serial_write+0xe>
    3556:	f7ff bdb7 	b.w	30c8 <usb_serial_write.part.1>
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    355a:	4610      	mov	r0, r2
    355c:	4770      	bx	lr
    355e:	bf00      	nop
    3560:	20022628 	.word	0x20022628

00003564 <usb_serial_write_buffer_free>:

int usb_serial_write_buffer_free(void)
{
    3564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    3568:	2400      	movs	r4, #0
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
    356a:	f8df 8040 	ldr.w	r8, [pc, #64]	; 35ac <usb_serial_write_buffer_free+0x48>
    356e:	2301      	movs	r3, #1
    3570:	4d0c      	ldr	r5, [pc, #48]	; (35a4 <usb_serial_write_buffer_free+0x40>)
	return sent;
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
    3572:	4627      	mov	r7, r4
    3574:	4e0c      	ldr	r6, [pc, #48]	; (35a8 <usb_serial_write_buffer_free+0x44>)
	tx_noautoflush = 1;
    3576:	f888 3000 	strb.w	r3, [r8]
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    357a:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    357c:	4628      	mov	r0, r5
    357e:	3520      	adds	r5, #32
int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    3580:	42a3      	cmp	r3, r4

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    3582:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
    3586:	d005      	beq.n	3594 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    3588:	f7ff fc94 	bl	2eb4 <usb_transfer_status>
    358c:	0603      	lsls	r3, r0, #24
    358e:	bf58      	it	pl
    3590:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    3594:	2c04      	cmp	r4, #4
    3596:	d1f0      	bne.n	357a <usb_serial_write_buffer_free+0x16>
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    3598:	2300      	movs	r3, #0
	return sum;
}
    359a:	4638      	mov	r0, r7
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    359c:	f888 3000 	strb.w	r3, [r8]
	return sum;
}
    35a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    35a4:	20022780 	.word	0x20022780
    35a8:	2002263f 	.word	0x2002263f
    35ac:	2002263e 	.word	0x2002263e

000035b0 <usb_serial_flush_output>:

void usb_serial_flush_output(void)
{
    35b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	if (!usb_configuration) return;
    35b4:	4b1f      	ldr	r3, [pc, #124]	; (3634 <usb_serial_flush_output+0x84>)
    35b6:	781b      	ldrb	r3, [r3, #0]
    35b8:	b113      	cbz	r3, 35c0 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    35ba:	4d1f      	ldr	r5, [pc, #124]	; (3638 <usb_serial_flush_output+0x88>)
    35bc:	882a      	ldrh	r2, [r5, #0]
    35be:	b90a      	cbnz	r2, 35c4 <usb_serial_flush_output+0x14>
    35c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    35c4:	f8df 8084 	ldr.w	r8, [pc, #132]	; 364c <usb_serial_flush_output+0x9c>
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    35c8:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    35cc:	4e1b      	ldr	r6, [pc, #108]	; (363c <usb_serial_flush_output+0x8c>)
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    35ce:	f04f 0e01 	mov.w	lr, #1
	transfer_t *xfer = tx_transfer + tx_head;
    35d2:	f898 1000 	ldrb.w	r1, [r8]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    35d6:	464a      	mov	r2, r9

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    35d8:	4c19      	ldr	r4, [pc, #100]	; (3640 <usb_serial_flush_output+0x90>)
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    35da:	2300      	movs	r3, #0
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    35dc:	eb06 1641 	add.w	r6, r6, r1, lsl #5
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    35e0:	4f18      	ldr	r7, [pc, #96]	; (3644 <usb_serial_flush_output+0x94>)
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    35e2:	eb04 24c1 	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    35e6:	4630      	mov	r0, r6
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    35e8:	f887 e000 	strb.w	lr, [r7]
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    35ec:	4621      	mov	r1, r4
    35ee:	f7ff fc23 	bl	2e38 <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    35f2:	eb09 0204 	add.w	r2, r9, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    35f6:	f024 011f 	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    35fa:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    35fe:	4b12      	ldr	r3, [pc, #72]	; (3648 <usb_serial_flush_output+0x98>)
    3600:	6019      	str	r1, [r3, #0]
		location += 32;
    3602:	3120      	adds	r1, #32
	} while (location < end_addr);
    3604:	428a      	cmp	r2, r1
    3606:	d8fb      	bhi.n	3600 <usb_serial_flush_output+0x50>
	asm("dsb");
    3608:	f3bf 8f4f 	dsb	sy
	asm("isb");
    360c:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    3610:	2004      	movs	r0, #4
    3612:	4631      	mov	r1, r6
    3614:	f7ff fc28 	bl	2e68 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    3618:	f898 3000 	ldrb.w	r3, [r8]
    361c:	4a0b      	ldr	r2, [pc, #44]	; (364c <usb_serial_flush_output+0x9c>)
    361e:	3301      	adds	r3, #1
    3620:	b2db      	uxtb	r3, r3
    3622:	2b03      	cmp	r3, #3
    3624:	bf88      	it	hi
    3626:	2300      	movhi	r3, #0
    3628:	7013      	strb	r3, [r2, #0]
	tx_available = 0;
    362a:	2300      	movs	r3, #0
    362c:	802b      	strh	r3, [r5, #0]
	tx_noautoflush = 0;
    362e:	703b      	strb	r3, [r7, #0]
    3630:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3634:	20022628 	.word	0x20022628
    3638:	20022766 	.word	0x20022766
    363c:	20022780 	.word	0x20022780
    3640:	20201060 	.word	0x20201060
    3644:	2002263e 	.word	0x2002263e
    3648:	e000ef70 	.word	0xe000ef70
    364c:	2002263f 	.word	0x2002263f

00003650 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    3650:	b570      	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3652:	f3ef 8110 	mrs	r1, PRIMASK
		__disable_irq();
    3656:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    3658:	4c0c      	ldr	r4, [pc, #48]	; (368c <EventResponder::runFromInterrupt()+0x3c>)
    365a:	6823      	ldr	r3, [r4, #0]
		if (first) {
    365c:	b18b      	cbz	r3, 3682 <EventResponder::runFromInterrupt()+0x32>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    365e:	4e0c      	ldr	r6, [pc, #48]	; (3690 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    3660:	2500      	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    3662:	695a      	ldr	r2, [r3, #20]
    3664:	6022      	str	r2, [r4, #0]
			if (firstInterrupt) {
    3666:	b17a      	cbz	r2, 3688 <EventResponder::runFromInterrupt()+0x38>
				firstInterrupt->_prev = nullptr;
    3668:	6195      	str	r5, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    366a:	b901      	cbnz	r1, 366e <EventResponder::runFromInterrupt()+0x1e>
    366c:	b662      	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    366e:	775d      	strb	r5, [r3, #29]
			(*(first->_function))(*first);
    3670:	4618      	mov	r0, r3
    3672:	689b      	ldr	r3, [r3, #8]
    3674:	4798      	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3676:	f3ef 8110 	mrs	r1, PRIMASK
		__disable_irq();
    367a:	b672      	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    367c:	6823      	ldr	r3, [r4, #0]
		if (first) {
    367e:	2b00      	cmp	r3, #0
    3680:	d1ef      	bne.n	3662 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3682:	b901      	cbnz	r1, 3686 <EventResponder::runFromInterrupt()+0x36>
    3684:	b662      	cpsie	i
    3686:	bd70      	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    3688:	6032      	str	r2, [r6, #0]
    368a:	e7ee      	b.n	366a <EventResponder::runFromInterrupt()+0x1a>
    368c:	20022800 	.word	0x20022800
    3690:	20022804 	.word	0x20022804

00003694 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

extern "C" void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    3694:	f7ff bfdc 	b.w	3650 <EventResponder::runFromInterrupt()>

00003698 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    3698:	4a04      	ldr	r2, [pc, #16]	; (36ac <systick_isr+0x14>)
    369a:	4b05      	ldr	r3, [pc, #20]	; (36b0 <systick_isr+0x18>)
    369c:	6811      	ldr	r1, [r2, #0]
	systick_millis_count++;
    369e:	4a05      	ldr	r2, [pc, #20]	; (36b4 <systick_isr+0x1c>)
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    36a0:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    36a2:	6813      	ldr	r3, [r2, #0]
    36a4:	3301      	adds	r3, #1
    36a6:	6013      	str	r3, [r2, #0]
    36a8:	4770      	bx	lr
    36aa:	bf00      	nop
    36ac:	e0001004 	.word	0xe0001004
    36b0:	200225d4 	.word	0x200225d4
    36b4:	200225dc 	.word	0x200225dc

000036b8 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    36b8:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    36ba:	f7fc fdf7 	bl	2ac <setup>
	while (1) {
		loop();
    36be:	f7fc fe99 	bl	3f4 <loop>
		yield();
    36c2:	f000 f871 	bl	37a8 <yield>
    36c6:	e7fa      	b.n	36be <main+0x6>

000036c8 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    36c8:	b510      	push	{r4, lr}
	uint8_t buf[2]={'\r', '\n'};
    36ca:	4c06      	ldr	r4, [pc, #24]	; (36e4 <Print::println()+0x1c>)
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    36cc:	b082      	sub	sp, #8
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    36ce:	6803      	ldr	r3, [r0, #0]
    36d0:	2202      	movs	r2, #2
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    36d2:	8824      	ldrh	r4, [r4, #0]
	return write(buf, 2);
    36d4:	a901      	add	r1, sp, #4
    36d6:	685b      	ldr	r3, [r3, #4]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    36d8:	f8ad 4004 	strh.w	r4, [sp, #4]
	return write(buf, 2);
    36dc:	4798      	blx	r3
}
    36de:	b002      	add	sp, #8
    36e0:	bd10      	pop	{r4, pc}
    36e2:	bf00      	nop
    36e4:	20000420 	.word	0x20000420

000036e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	return vdprintf((int)this, (const char *)format, ap);
#endif
}

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    36e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    36ea:	4606      	mov	r6, r0
    36ec:	b08b      	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    36ee:	2a00      	cmp	r2, #0
    36f0:	d033      	beq.n	375a <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    36f2:	2a01      	cmp	r2, #1
    36f4:	bf08      	it	eq
    36f6:	220a      	moveq	r2, #10
	}


	if (n == 0) {
    36f8:	b351      	cbz	r1, 3750 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    36fa:	2521      	movs	r5, #33	; 0x21
    36fc:	e000      	b.n	3700 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    36fe:	b2fd      	uxtb	r5, r7
    3700:	1e6f      	subs	r7, r5, #1
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    3702:	fbb1 f4f2 	udiv	r4, r1, r2
    3706:	fb02 1114 	mls	r1, r2, r4, r1
    370a:	b2c8      	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    370c:	2909      	cmp	r1, #9
    370e:	f100 0137 	add.w	r1, r0, #55	; 0x37
    3712:	f100 0030 	add.w	r0, r0, #48	; 0x30
    3716:	bf88      	it	hi
    3718:	b2c8      	uxtbhi	r0, r1
			n /= base;
			if (n == 0) break;
    371a:	4621      	mov	r1, r4
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    371c:	ac0a      	add	r4, sp, #40	; 0x28
    371e:	bf98      	it	ls
    3720:	b2c0      	uxtbls	r0, r0
    3722:	442c      	add	r4, r5
    3724:	f804 0c24 	strb.w	r0, [r4, #-36]
			n /= base;
			if (n == 0) break;
    3728:	2900      	cmp	r1, #0
    372a:	d1e8      	bne.n	36fe <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    372c:	b133      	cbz	r3, 373c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    372e:	3d01      	subs	r5, #1
		buf[i] = '-';
    3730:	ab0a      	add	r3, sp, #40	; 0x28
    3732:	222d      	movs	r2, #45	; 0x2d
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
		i--;
    3734:	b2ed      	uxtb	r5, r5
		buf[i] = '-';
    3736:	442b      	add	r3, r5
    3738:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    373c:	6833      	ldr	r3, [r6, #0]
    373e:	a901      	add	r1, sp, #4
    3740:	f1c5 0222 	rsb	r2, r5, #34	; 0x22
    3744:	4630      	mov	r0, r6
    3746:	4429      	add	r1, r5
    3748:	685b      	ldr	r3, [r3, #4]
    374a:	4798      	blx	r3
}
    374c:	b00b      	add	sp, #44	; 0x2c
    374e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    3750:	2230      	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    3752:	2521      	movs	r5, #33	; 0x21
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    3754:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
    3758:	e7e8      	b.n	372c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    375a:	6803      	ldr	r3, [r0, #0]
    375c:	b2c9      	uxtb	r1, r1
    375e:	681b      	ldr	r3, [r3, #0]
    3760:	4798      	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    3762:	b00b      	add	sp, #44	; 0x2c
    3764:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3766:	bf00      	nop

00003768 <Print::print(long)>:

size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
    3768:	2900      	cmp	r1, #0
    376a:	db03      	blt.n	3774 <Print::print(long)+0xc>
}


size_t Print::print(long n)
{
	uint8_t sign=0;
    376c:	2300      	movs	r3, #0

	if (n < 0) {
		sign = '-';
		n = -n;
	}
	return printNumber(n, 10, sign);
    376e:	220a      	movs	r2, #10
    3770:	f7ff bfba 	b.w	36e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
		n = -n;
    3774:	4249      	negs	r1, r1
size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
    3776:	232d      	movs	r3, #45	; 0x2d
		n = -n;
	}
	return printNumber(n, 10, sign);
    3778:	220a      	movs	r2, #10
    377a:	f7ff bfb5 	b.w	36e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    377e:	bf00      	nop

00003780 <usb_serial_class::clear()>:
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    3780:	f7ff be84 	b.w	348c <usb_serial_flush_input>

00003784 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    3784:	f7ff be5a 	b.w	343c <usb_serial_peekchar>

00003788 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    3788:	f7ff beba 	b.w	3500 <usb_serial_getchar>

0000378c <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    378c:	f7ff be78 	b.w	3480 <usb_serial_available>

00003790 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    3790:	f7ff bf0e 	b.w	35b0 <usb_serial_flush_output>

00003794 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    3794:	f7ff bee6 	b.w	3564 <usb_serial_write_buffer_free>

00003798 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    3798:	4608      	mov	r0, r1
    379a:	4611      	mov	r1, r2
    379c:	f7ff bed6 	b.w	354c <usb_serial_write>

000037a0 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    37a0:	4608      	mov	r0, r1
    37a2:	f7ff bebd 	b.w	3520 <usb_serial_putchar>
    37a6:	bf00      	nop

000037a8 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    37a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    37ac:	4e32      	ldr	r6, [pc, #200]	; (3878 <yield+0xd0>)
    37ae:	7833      	ldrb	r3, [r6, #0]
    37b0:	b193      	cbz	r3, 37d8 <yield+0x30>
	if (running) return; // TODO: does this need to be atomic?
    37b2:	4f32      	ldr	r7, [pc, #200]	; (387c <yield+0xd4>)
    37b4:	783a      	ldrb	r2, [r7, #0]
    37b6:	b97a      	cbnz	r2, 37d8 <yield+0x30>
	running = 1;
    37b8:	2201      	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    37ba:	07d9      	lsls	r1, r3, #31
void yield(void)
{
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    37bc:	703a      	strb	r2, [r7, #0]


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    37be:	d437      	bmi.n	3830 <yield+0x88>
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();
    37c0:	079a      	lsls	r2, r3, #30
    37c2:	d419      	bmi.n	37f8 <yield+0x50>

	running = 0;
    37c4:	2200      	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    37c6:	075b      	lsls	r3, r3, #29
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();

	running = 0;
    37c8:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    37ca:	d505      	bpl.n	37d8 <yield+0x30>
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    37cc:	4b2c      	ldr	r3, [pc, #176]	; (3880 <yield+0xd8>)
    37ce:	681a      	ldr	r2, [r3, #0]
    37d0:	b112      	cbz	r2, 37d8 <yield+0x30>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    37d2:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    37d6:	b10a      	cbz	r2, 37dc <yield+0x34>
    37d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    37dc:	f3ef 8010 	mrs	r0, PRIMASK
		__disable_irq();
    37e0:	b672      	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    37e2:	681a      	ldr	r2, [r3, #0]
		if (first == nullptr) {
    37e4:	b11a      	cbz	r2, 37ee <yield+0x46>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    37e6:	4c27      	ldr	r4, [pc, #156]	; (3884 <yield+0xdc>)
    37e8:	7821      	ldrb	r1, [r4, #0]
    37ea:	2900      	cmp	r1, #0
    37ec:	d02f      	beq.n	384e <yield+0xa6>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    37ee:	2800      	cmp	r0, #0
    37f0:	d1f2      	bne.n	37d8 <yield+0x30>
    37f2:	b662      	cpsie	i
    37f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    37f8:	f8df 8094 	ldr.w	r8, [pc, #148]	; 3890 <yield+0xe8>
    37fc:	f898 2000 	ldrb.w	r2, [r8]
    3800:	2a00      	cmp	r2, #0
    3802:	d0df      	beq.n	37c4 <yield+0x1c>
    3804:	2400      	movs	r4, #0
    3806:	f8df 908c 	ldr.w	r9, [pc, #140]	; 3894 <yield+0xec>
    380a:	e005      	b.n	3818 <yield+0x70>
    380c:	3401      	adds	r4, #1
    380e:	f898 3000 	ldrb.w	r3, [r8]
    3812:	b2e4      	uxtb	r4, r4
    3814:	42a3      	cmp	r3, r4
    3816:	d913      	bls.n	3840 <yield+0x98>
			s_serials_with_serial_events[i]->doYieldCode();
    3818:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
	static HardwareSerial 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    381c:	682b      	ldr	r3, [r5, #0]
    381e:	4628      	mov	r0, r5
    3820:	691b      	ldr	r3, [r3, #16]
    3822:	4798      	blx	r3
    3824:	2800      	cmp	r0, #0
    3826:	d0f1      	beq.n	380c <yield+0x64>
    3828:	696b      	ldr	r3, [r5, #20]
    382a:	689b      	ldr	r3, [r3, #8]
    382c:	4798      	blx	r3
    382e:	e7ed      	b.n	380c <yield+0x64>
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    3830:	f7ff fe26 	bl	3480 <usb_serial_available>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    3834:	b9d0      	cbnz	r0, 386c <yield+0xc4>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    3836:	4b14      	ldr	r3, [pc, #80]	; (3888 <yield+0xe0>)
    3838:	781b      	ldrb	r3, [r3, #0]
    383a:	b91b      	cbnz	r3, 3844 <yield+0x9c>
    383c:	7833      	ldrb	r3, [r6, #0]
    383e:	e7bf      	b.n	37c0 <yield+0x18>
    3840:	7833      	ldrb	r3, [r6, #0]
    3842:	e7bf      	b.n	37c4 <yield+0x1c>
    3844:	7833      	ldrb	r3, [r6, #0]
    3846:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    384a:	7033      	strb	r3, [r6, #0]
    384c:	e7b8      	b.n	37c0 <yield+0x18>
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    384e:	2601      	movs	r6, #1
		firstYield = first->_next;
    3850:	6955      	ldr	r5, [r2, #20]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    3852:	7026      	strb	r6, [r4, #0]
		firstYield = first->_next;
    3854:	601d      	str	r5, [r3, #0]
		if (firstYield) {
    3856:	b165      	cbz	r5, 3872 <yield+0xca>
			firstYield->_prev = nullptr;
    3858:	61a9      	str	r1, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    385a:	b900      	cbnz	r0, 385e <yield+0xb6>
    385c:	b662      	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    385e:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    3860:	6893      	ldr	r3, [r2, #8]
    3862:	4610      	mov	r0, r2
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    3864:	7755      	strb	r5, [r2, #29]
		(*(first->_function))(*first);
    3866:	4798      	blx	r3
		runningFromYield = false;
    3868:	7025      	strb	r5, [r4, #0]
    386a:	e7b5      	b.n	37d8 <yield+0x30>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    386c:	f000 f8d6 	bl	3a1c <serialEvent()>
    3870:	e7e1      	b.n	3836 <yield+0x8e>
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    3872:	4b06      	ldr	r3, [pc, #24]	; (388c <yield+0xe4>)
    3874:	601d      	str	r5, [r3, #0]
    3876:	e7f0      	b.n	385a <yield+0xb2>
    3878:	200122e8 	.word	0x200122e8
    387c:	20022811 	.word	0x20022811
    3880:	2002280c 	.word	0x2002280c
    3884:	20022810 	.word	0x20022810
    3888:	60001726 	.word	0x60001726
    388c:	20022808 	.word	0x20022808
    3890:	20022830 	.word	0x20022830
    3894:	20022814 	.word	0x20022814

00003898 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    3898:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    389a:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    389e:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    38a2:	d16d      	bne.n	3980 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    38a4:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    38a6:	d341      	bcc.n	392c <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    38a8:	f851 3b04 	ldr.w	r3, [r1], #4
    38ac:	f840 3b04 	str.w	r3, [r0], #4
    38b0:	f851 3b04 	ldr.w	r3, [r1], #4
    38b4:	f840 3b04 	str.w	r3, [r0], #4
    38b8:	f851 3b04 	ldr.w	r3, [r1], #4
    38bc:	f840 3b04 	str.w	r3, [r0], #4
    38c0:	f851 3b04 	ldr.w	r3, [r1], #4
    38c4:	f840 3b04 	str.w	r3, [r0], #4
    38c8:	f851 3b04 	ldr.w	r3, [r1], #4
    38cc:	f840 3b04 	str.w	r3, [r0], #4
    38d0:	f851 3b04 	ldr.w	r3, [r1], #4
    38d4:	f840 3b04 	str.w	r3, [r0], #4
    38d8:	f851 3b04 	ldr.w	r3, [r1], #4
    38dc:	f840 3b04 	str.w	r3, [r0], #4
    38e0:	f851 3b04 	ldr.w	r3, [r1], #4
    38e4:	f840 3b04 	str.w	r3, [r0], #4
    38e8:	f851 3b04 	ldr.w	r3, [r1], #4
    38ec:	f840 3b04 	str.w	r3, [r0], #4
    38f0:	f851 3b04 	ldr.w	r3, [r1], #4
    38f4:	f840 3b04 	str.w	r3, [r0], #4
    38f8:	f851 3b04 	ldr.w	r3, [r1], #4
    38fc:	f840 3b04 	str.w	r3, [r0], #4
    3900:	f851 3b04 	ldr.w	r3, [r1], #4
    3904:	f840 3b04 	str.w	r3, [r0], #4
    3908:	f851 3b04 	ldr.w	r3, [r1], #4
    390c:	f840 3b04 	str.w	r3, [r0], #4
    3910:	f851 3b04 	ldr.w	r3, [r1], #4
    3914:	f840 3b04 	str.w	r3, [r0], #4
    3918:	f851 3b04 	ldr.w	r3, [r1], #4
    391c:	f840 3b04 	str.w	r3, [r0], #4
    3920:	f851 3b04 	ldr.w	r3, [r1], #4
    3924:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    3928:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    392a:	d2bd      	bcs.n	38a8 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    392c:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    392e:	d311      	bcc.n	3954 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    3930:	f851 3b04 	ldr.w	r3, [r1], #4
    3934:	f840 3b04 	str.w	r3, [r0], #4
    3938:	f851 3b04 	ldr.w	r3, [r1], #4
    393c:	f840 3b04 	str.w	r3, [r0], #4
    3940:	f851 3b04 	ldr.w	r3, [r1], #4
    3944:	f840 3b04 	str.w	r3, [r0], #4
    3948:	f851 3b04 	ldr.w	r3, [r1], #4
    394c:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    3950:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    3952:	d2ed      	bcs.n	3930 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    3954:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    3956:	d305      	bcc.n	3964 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    3958:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    395c:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    3960:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    3962:	d2f9      	bcs.n	3958 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    3964:	3204      	adds	r2, #4
	beq	.Ldone
    3966:	d008      	beq.n	397a <memcpy+0xe2>

	lsls	r2, r2, #31
    3968:	07d2      	lsls	r2, r2, #31
	itt ne
    396a:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    396c:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    3970:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    3974:	d301      	bcc.n	397a <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    3976:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    3978:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    397a:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    397c:	4770      	bx	lr
    397e:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    3980:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    3982:	d313      	bcc.n	39ac <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    3984:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    3986:	d08d      	beq.n	38a4 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    3988:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    398c:	d08a      	beq.n	38a4 <memcpy+0xc>

	rsb	r3, #4
    398e:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    3992:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    3994:	07db      	lsls	r3, r3, #31
	itt ne
    3996:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    3998:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    399c:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    39a0:	d380      	bcc.n	38a4 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    39a2:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    39a6:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    39aa:	e77b      	b.n	38a4 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    39ac:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    39ae:	d3d9      	bcc.n	3964 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    39b0:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    39b2:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    39b6:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    39ba:	d2f9      	bcs.n	39b0 <memcpy+0x118>

	ldrb	r3, [r1]
    39bc:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    39be:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    39c0:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    39c2:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    39c4:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    39c6:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    39c8:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    39ca:	4770      	bx	lr

000039cc <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    39cc:	b4f0      	push	{r4, r5, r6, r7}
    39ce:	1e4e      	subs	r6, r1, #1
	unsigned digit;
	int i=0, j;
    39d0:	2500      	movs	r5, #0
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    39d2:	4637      	mov	r7, r6
    39d4:	e000      	b.n	39d8 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    39d6:	3501      	adds	r5, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    39d8:	fbb0 f3f2 	udiv	r3, r0, r2
    39dc:	fb02 0013 	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    39e0:	f100 0437 	add.w	r4, r0, #55	; 0x37
    39e4:	2809      	cmp	r0, #9
    39e6:	f100 0030 	add.w	r0, r0, #48	; 0x30
    39ea:	b2e4      	uxtb	r4, r4
    39ec:	bf98      	it	ls
    39ee:	b2c4      	uxtbls	r4, r0
		val /= radix;
		if (val == 0) break;
    39f0:	4618      	mov	r0, r3
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    39f2:	f807 4f01 	strb.w	r4, [r7, #1]!
		val /= radix;
		if (val == 0) break;
    39f6:	2b00      	cmp	r3, #0
    39f8:	d1ed      	bne.n	39d6 <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    39fa:	194a      	adds	r2, r1, r5
    39fc:	7053      	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    39fe:	b14d      	cbz	r5, 3a14 <ultoa+0x48>
    3a00:	3301      	adds	r3, #1
		t = buf[j];
    3a02:	f816 4f01 	ldrb.w	r4, [r6, #1]!
		buf[j] = buf[i];
    3a06:	7817      	ldrb	r7, [r2, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    3a08:	1ae8      	subs	r0, r5, r3
		t = buf[j];
		buf[j] = buf[i];
    3a0a:	7037      	strb	r7, [r6, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    3a0c:	4283      	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    3a0e:	f802 4901 	strb.w	r4, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    3a12:	dbf5      	blt.n	3a00 <ultoa+0x34>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    3a14:	4608      	mov	r0, r1
    3a16:	bcf0      	pop	{r4, r5, r6, r7}
    3a18:	4770      	bx	lr
    3a1a:	bf00      	nop

00003a1c <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
    3a1c:	4770      	bx	lr
    3a1e:	bf00      	nop

00003a20 <arm_split_rfft_q15>:
    3a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3a24:	f06f 4440 	mvn.w	r4, #3221225472	; 0xc0000000
    3a28:	b083      	sub	sp, #12
    3a2a:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
    3a2e:	440c      	add	r4, r1
    3a30:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    3a32:	9001      	str	r0, [sp, #4]
    3a34:	3901      	subs	r1, #1
    3a36:	ea4f 0b85 	mov.w	fp, r5, lsl #2
    3a3a:	ea4f 0084 	mov.w	r0, r4, lsl #2
    3a3e:	445a      	add	r2, fp
    3a40:	445b      	add	r3, fp
    3a42:	9000      	str	r0, [sp, #0]
    3a44:	d030      	beq.n	3aa8 <arm_split_rfft_q15+0x88>
    3a46:	f100 0904 	add.w	r9, r0, #4
    3a4a:	9c01      	ldr	r4, [sp, #4]
    3a4c:	980c      	ldr	r0, [sp, #48]	; 0x30
    3a4e:	f1ae 0e08 	sub.w	lr, lr, #8
    3a52:	46a2      	mov	sl, r4
    3a54:	44a1      	add	r9, r4
    3a56:	f100 0808 	add.w	r8, r0, #8
    3a5a:	4486      	add	lr, r0
    3a5c:	f04f 0c00 	mov.w	ip, #0
    3a60:	f85a 4f04 	ldr.w	r4, [sl, #4]!
    3a64:	f852 000c 	ldr.w	r0, [r2, ip]
    3a68:	fb44 f500 	smusd	r5, r4, r0
    3a6c:	f859 6d04 	ldr.w	r6, [r9, #-4]!
    3a70:	f853 700c 	ldr.w	r7, [r3, ip]
    3a74:	fb26 5507 	smlad	r5, r6, r7, r5
    3a78:	fb46 f617 	smusdx	r6, r6, r7
    3a7c:	fb24 6010 	smladx	r0, r4, r0, r6
    3a80:	1400      	asrs	r0, r0, #16
    3a82:	3901      	subs	r1, #1
    3a84:	ea4f 4425 	mov.w	r4, r5, asr #16
    3a88:	44dc      	add	ip, fp
    3a8a:	f1c0 0500 	rsb	r5, r0, #0
    3a8e:	f828 0c02 	strh.w	r0, [r8, #-2]
    3a92:	f828 4c04 	strh.w	r4, [r8, #-4]
    3a96:	f1ae 0e04 	sub.w	lr, lr, #4
    3a9a:	f8ae 500a 	strh.w	r5, [lr, #10]
    3a9e:	f108 0804 	add.w	r8, r8, #4
    3aa2:	f8ae 4008 	strh.w	r4, [lr, #8]
    3aa6:	d1db      	bne.n	3a60 <arm_split_rfft_q15+0x40>
    3aa8:	9c01      	ldr	r4, [sp, #4]
    3aaa:	980c      	ldr	r0, [sp, #48]	; 0x30
    3aac:	9a00      	ldr	r2, [sp, #0]
    3aae:	f9b4 3000 	ldrsh.w	r3, [r4]
    3ab2:	4402      	add	r2, r0
    3ab4:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
    3ab8:	1a1b      	subs	r3, r3, r0
    3aba:	4611      	mov	r1, r2
    3abc:	2200      	movs	r2, #0
    3abe:	980c      	ldr	r0, [sp, #48]	; 0x30
    3ac0:	105b      	asrs	r3, r3, #1
    3ac2:	80ca      	strh	r2, [r1, #6]
    3ac4:	808b      	strh	r3, [r1, #4]
    3ac6:	f9b4 1000 	ldrsh.w	r1, [r4]
    3aca:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
    3ace:	8042      	strh	r2, [r0, #2]
    3ad0:	440b      	add	r3, r1
    3ad2:	105b      	asrs	r3, r3, #1
    3ad4:	8003      	strh	r3, [r0, #0]
    3ad6:	b003      	add	sp, #12
    3ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00003adc <arm_rfft_q15>:
    3adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3ae0:	4616      	mov	r6, r2
    3ae2:	7902      	ldrb	r2, [r0, #4]
    3ae4:	b085      	sub	sp, #20
    3ae6:	6804      	ldr	r4, [r0, #0]
    3ae8:	6943      	ldr	r3, [r0, #20]
    3aea:	2a01      	cmp	r2, #1
    3aec:	4605      	mov	r5, r0
    3aee:	460f      	mov	r7, r1
    3af0:	ea4f 0454 	mov.w	r4, r4, lsr #1
    3af4:	9303      	str	r3, [sp, #12]
    3af6:	d00f      	beq.n	3b18 <arm_rfft_q15+0x3c>
    3af8:	4618      	mov	r0, r3
    3afa:	796b      	ldrb	r3, [r5, #5]
    3afc:	f000 fa8c 	bl	4018 <arm_cfft_q15>
    3b00:	4621      	mov	r1, r4
    3b02:	68ac      	ldr	r4, [r5, #8]
    3b04:	4638      	mov	r0, r7
    3b06:	692b      	ldr	r3, [r5, #16]
    3b08:	68ea      	ldr	r2, [r5, #12]
    3b0a:	9600      	str	r6, [sp, #0]
    3b0c:	9401      	str	r4, [sp, #4]
    3b0e:	f7ff ff87 	bl	3a20 <arm_split_rfft_q15>
    3b12:	b005      	add	sp, #20
    3b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3b18:	f8d0 800c 	ldr.w	r8, [r0, #12]
    3b1c:	ea4f 0984 	mov.w	r9, r4, lsl #2
    3b20:	f8d0 c010 	ldr.w	ip, [r0, #16]
    3b24:	6883      	ldr	r3, [r0, #8]
    3b26:	b314      	cbz	r4, 3b6e <arm_rfft_q15+0x92>
    3b28:	f109 0904 	add.w	r9, r9, #4
    3b2c:	ea4f 0a83 	mov.w	sl, r3, lsl #2
    3b30:	46b3      	mov	fp, r6
    3b32:	4489      	add	r9, r1
    3b34:	f859 3d04 	ldr.w	r3, [r9, #-4]!
    3b38:	f8dc e000 	ldr.w	lr, [ip]
    3b3c:	fb43 f10e 	smusd	r1, r3, lr
    3b40:	f857 0b04 	ldr.w	r0, [r7], #4
    3b44:	f8d8 2000 	ldr.w	r2, [r8]
    3b48:	fb20 1102 	smlad	r1, r0, r2, r1
    3b4c:	fb23 f31e 	smuadx	r3, r3, lr
    3b50:	425b      	negs	r3, r3
    3b52:	fb42 3310 	smlsdx	r3, r2, r0, r3
    3b56:	4810      	ldr	r0, [pc, #64]	; (3b98 <arm_rfft_q15+0xbc>)
    3b58:	3c01      	subs	r4, #1
    3b5a:	44d4      	add	ip, sl
    3b5c:	44d0      	add	r8, sl
    3b5e:	ea00 0003 	and.w	r0, r0, r3
    3b62:	ea40 4111 	orr.w	r1, r0, r1, lsr #16
    3b66:	f84b 1b04 	str.w	r1, [fp], #4
    3b6a:	d1e3      	bne.n	3b34 <arm_rfft_q15+0x58>
    3b6c:	792a      	ldrb	r2, [r5, #4]
    3b6e:	796b      	ldrb	r3, [r5, #5]
    3b70:	4631      	mov	r1, r6
    3b72:	9803      	ldr	r0, [sp, #12]
    3b74:	f000 fa50 	bl	4018 <arm_cfft_q15>
    3b78:	682b      	ldr	r3, [r5, #0]
    3b7a:	2b00      	cmp	r3, #0
    3b7c:	d0c9      	beq.n	3b12 <arm_rfft_q15+0x36>
    3b7e:	3e02      	subs	r6, #2
    3b80:	2200      	movs	r2, #0
    3b82:	f936 3f02 	ldrsh.w	r3, [r6, #2]!
    3b86:	3201      	adds	r2, #1
    3b88:	005b      	lsls	r3, r3, #1
    3b8a:	8033      	strh	r3, [r6, #0]
    3b8c:	682b      	ldr	r3, [r5, #0]
    3b8e:	4293      	cmp	r3, r2
    3b90:	d8f7      	bhi.n	3b82 <arm_rfft_q15+0xa6>
    3b92:	b005      	add	sp, #20
    3b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3b98:	ffff0000 	.word	0xffff0000

00003b9c <arm_rfft_init_q15>:
    3b9c:	b289      	uxth	r1, r1
    3b9e:	b430      	push	{r4, r5}
    3ba0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    3ba4:	4d36      	ldr	r5, [pc, #216]	; (3c80 <arm_rfft_init_q15+0xe4>)
    3ba6:	4c37      	ldr	r4, [pc, #220]	; (3c84 <arm_rfft_init_q15+0xe8>)
    3ba8:	7102      	strb	r2, [r0, #4]
    3baa:	7143      	strb	r3, [r0, #5]
    3bac:	6001      	str	r1, [r0, #0]
    3bae:	60c5      	str	r5, [r0, #12]
    3bb0:	6104      	str	r4, [r0, #16]
    3bb2:	d050      	beq.n	3c56 <arm_rfft_init_q15+0xba>
    3bb4:	d911      	bls.n	3bda <arm_rfft_init_q15+0x3e>
    3bb6:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
    3bba:	d054      	beq.n	3c66 <arm_rfft_init_q15+0xca>
    3bbc:	d938      	bls.n	3c30 <arm_rfft_init_q15+0x94>
    3bbe:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    3bc2:	d022      	beq.n	3c0a <arm_rfft_init_q15+0x6e>
    3bc4:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
    3bc8:	d155      	bne.n	3c76 <arm_rfft_init_q15+0xda>
    3bca:	2101      	movs	r1, #1
    3bcc:	4a2e      	ldr	r2, [pc, #184]	; (3c88 <arm_rfft_init_q15+0xec>)
    3bce:	2300      	movs	r3, #0
    3bd0:	6081      	str	r1, [r0, #8]
    3bd2:	6142      	str	r2, [r0, #20]
    3bd4:	4618      	mov	r0, r3
    3bd6:	bc30      	pop	{r4, r5}
    3bd8:	4770      	bx	lr
    3bda:	2940      	cmp	r1, #64	; 0x40
    3bdc:	d033      	beq.n	3c46 <arm_rfft_init_q15+0xaa>
    3bde:	d91c      	bls.n	3c1a <arm_rfft_init_q15+0x7e>
    3be0:	2980      	cmp	r1, #128	; 0x80
    3be2:	d00a      	beq.n	3bfa <arm_rfft_init_q15+0x5e>
    3be4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    3be8:	d145      	bne.n	3c76 <arm_rfft_init_q15+0xda>
    3bea:	2120      	movs	r1, #32
    3bec:	4a27      	ldr	r2, [pc, #156]	; (3c8c <arm_rfft_init_q15+0xf0>)
    3bee:	2300      	movs	r3, #0
    3bf0:	6081      	str	r1, [r0, #8]
    3bf2:	6142      	str	r2, [r0, #20]
    3bf4:	4618      	mov	r0, r3
    3bf6:	bc30      	pop	{r4, r5}
    3bf8:	4770      	bx	lr
    3bfa:	2140      	movs	r1, #64	; 0x40
    3bfc:	4a24      	ldr	r2, [pc, #144]	; (3c90 <arm_rfft_init_q15+0xf4>)
    3bfe:	2300      	movs	r3, #0
    3c00:	6081      	str	r1, [r0, #8]
    3c02:	6142      	str	r2, [r0, #20]
    3c04:	4618      	mov	r0, r3
    3c06:	bc30      	pop	{r4, r5}
    3c08:	4770      	bx	lr
    3c0a:	2102      	movs	r1, #2
    3c0c:	4a21      	ldr	r2, [pc, #132]	; (3c94 <arm_rfft_init_q15+0xf8>)
    3c0e:	2300      	movs	r3, #0
    3c10:	6081      	str	r1, [r0, #8]
    3c12:	6142      	str	r2, [r0, #20]
    3c14:	4618      	mov	r0, r3
    3c16:	bc30      	pop	{r4, r5}
    3c18:	4770      	bx	lr
    3c1a:	2920      	cmp	r1, #32
    3c1c:	d12b      	bne.n	3c76 <arm_rfft_init_q15+0xda>
    3c1e:	f44f 7180 	mov.w	r1, #256	; 0x100
    3c22:	4a1d      	ldr	r2, [pc, #116]	; (3c98 <arm_rfft_init_q15+0xfc>)
    3c24:	2300      	movs	r3, #0
    3c26:	6081      	str	r1, [r0, #8]
    3c28:	6142      	str	r2, [r0, #20]
    3c2a:	4618      	mov	r0, r3
    3c2c:	bc30      	pop	{r4, r5}
    3c2e:	4770      	bx	lr
    3c30:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
    3c34:	d11f      	bne.n	3c76 <arm_rfft_init_q15+0xda>
    3c36:	2108      	movs	r1, #8
    3c38:	4a18      	ldr	r2, [pc, #96]	; (3c9c <arm_rfft_init_q15+0x100>)
    3c3a:	2300      	movs	r3, #0
    3c3c:	6081      	str	r1, [r0, #8]
    3c3e:	6142      	str	r2, [r0, #20]
    3c40:	4618      	mov	r0, r3
    3c42:	bc30      	pop	{r4, r5}
    3c44:	4770      	bx	lr
    3c46:	2180      	movs	r1, #128	; 0x80
    3c48:	4a15      	ldr	r2, [pc, #84]	; (3ca0 <arm_rfft_init_q15+0x104>)
    3c4a:	2300      	movs	r3, #0
    3c4c:	6081      	str	r1, [r0, #8]
    3c4e:	6142      	str	r2, [r0, #20]
    3c50:	4618      	mov	r0, r3
    3c52:	bc30      	pop	{r4, r5}
    3c54:	4770      	bx	lr
    3c56:	2110      	movs	r1, #16
    3c58:	4a12      	ldr	r2, [pc, #72]	; (3ca4 <arm_rfft_init_q15+0x108>)
    3c5a:	2300      	movs	r3, #0
    3c5c:	6081      	str	r1, [r0, #8]
    3c5e:	6142      	str	r2, [r0, #20]
    3c60:	4618      	mov	r0, r3
    3c62:	bc30      	pop	{r4, r5}
    3c64:	4770      	bx	lr
    3c66:	2104      	movs	r1, #4
    3c68:	4a0f      	ldr	r2, [pc, #60]	; (3ca8 <arm_rfft_init_q15+0x10c>)
    3c6a:	2300      	movs	r3, #0
    3c6c:	6081      	str	r1, [r0, #8]
    3c6e:	6142      	str	r2, [r0, #20]
    3c70:	4618      	mov	r0, r3
    3c72:	bc30      	pop	{r4, r5}
    3c74:	4770      	bx	lr
    3c76:	f04f 33ff 	mov.w	r3, #4294967295
    3c7a:	bc30      	pop	{r4, r5}
    3c7c:	4618      	mov	r0, r3
    3c7e:	4770      	bx	lr
    3c80:	2000044c 	.word	0x2000044c
    3c84:	2000444c 	.word	0x2000444c
    3c88:	200084ac 	.word	0x200084ac
    3c8c:	2000845c 	.word	0x2000845c
    3c90:	2000848c 	.word	0x2000848c
    3c94:	2000849c 	.word	0x2000849c
    3c98:	200084bc 	.word	0x200084bc
    3c9c:	2000846c 	.word	0x2000846c
    3ca0:	200084cc 	.word	0x200084cc
    3ca4:	2000844c 	.word	0x2000844c
    3ca8:	2000847c 	.word	0x2000847c

00003cac <arm_cmplx_mag_q31>:
    3cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3cb0:	0893      	lsrs	r3, r2, #2
    3cb2:	b087      	sub	sp, #28
    3cb4:	460f      	mov	r7, r1
    3cb6:	9203      	str	r2, [sp, #12]
    3cb8:	9002      	str	r0, [sp, #8]
    3cba:	9304      	str	r3, [sp, #16]
    3cbc:	d052      	beq.n	3d64 <arm_cmplx_mag_q31+0xb8>
    3cbe:	f100 0420 	add.w	r4, r0, #32
    3cc2:	460d      	mov	r5, r1
    3cc4:	9301      	str	r3, [sp, #4]
    3cc6:	9105      	str	r1, [sp, #20]
    3cc8:	f854 2c14 	ldr.w	r2, [r4, #-20]
    3ccc:	4629      	mov	r1, r5
    3cce:	f854 6c1c 	ldr.w	r6, [r4, #-28]
    3cd2:	3420      	adds	r4, #32
    3cd4:	f854 0c38 	ldr.w	r0, [r4, #-56]
    3cd8:	fb82 2302 	smull	r2, r3, r2, r2
    3cdc:	fb86 ab06 	smull	sl, fp, r6, r6
    3ce0:	f854 2c40 	ldr.w	r2, [r4, #-64]
    3ce4:	105e      	asrs	r6, r3, #1
    3ce6:	fb80 8900 	smull	r8, r9, r0, r0
    3cea:	fb82 2302 	smull	r2, r3, r2, r2
    3cee:	f854 ac24 	ldr.w	sl, [r4, #-36]
    3cf2:	ea4f 006b 	mov.w	r0, fp, asr #1
    3cf6:	f854 8c2c 	ldr.w	r8, [r4, #-44]
    3cfa:	eb06 0969 	add.w	r9, r6, r9, asr #1
    3cfe:	f854 7c28 	ldr.w	r7, [r4, #-40]
    3d02:	eb00 0063 	add.w	r0, r0, r3, asr #1
    3d06:	fb8a ab0a 	smull	sl, fp, sl, sl
    3d0a:	f854 6c30 	ldr.w	r6, [r4, #-48]
    3d0e:	f000 f847 	bl	3da0 <arm_sqrt_q31>
    3d12:	1d29      	adds	r1, r5, #4
    3d14:	4648      	mov	r0, r9
    3d16:	fb88 8908 	smull	r8, r9, r8, r8
    3d1a:	f000 f841 	bl	3da0 <arm_sqrt_q31>
    3d1e:	fb87 2307 	smull	r2, r3, r7, r7
    3d22:	ea4f 0e6b 	mov.w	lr, fp, asr #1
    3d26:	ea4f 0069 	mov.w	r0, r9, asr #1
    3d2a:	fb86 8906 	smull	r8, r9, r6, r6
    3d2e:	eb0e 0663 	add.w	r6, lr, r3, asr #1
    3d32:	f105 0108 	add.w	r1, r5, #8
    3d36:	eb00 0069 	add.w	r0, r0, r9, asr #1
    3d3a:	f000 f831 	bl	3da0 <arm_sqrt_q31>
    3d3e:	f105 010c 	add.w	r1, r5, #12
    3d42:	4630      	mov	r0, r6
    3d44:	3510      	adds	r5, #16
    3d46:	f000 f82b 	bl	3da0 <arm_sqrt_q31>
    3d4a:	9b01      	ldr	r3, [sp, #4]
    3d4c:	3b01      	subs	r3, #1
    3d4e:	9301      	str	r3, [sp, #4]
    3d50:	d1ba      	bne.n	3cc8 <arm_cmplx_mag_q31+0x1c>
    3d52:	9b02      	ldr	r3, [sp, #8]
    3d54:	9a04      	ldr	r2, [sp, #16]
    3d56:	9f05      	ldr	r7, [sp, #20]
    3d58:	4619      	mov	r1, r3
    3d5a:	eb07 1702 	add.w	r7, r7, r2, lsl #4
    3d5e:	eb01 1342 	add.w	r3, r1, r2, lsl #5
    3d62:	9302      	str	r3, [sp, #8]
    3d64:	9b03      	ldr	r3, [sp, #12]
    3d66:	f013 0803 	ands.w	r8, r3, #3
    3d6a:	d015      	beq.n	3d98 <arm_cmplx_mag_q31+0xec>
    3d6c:	9e02      	ldr	r6, [sp, #8]
    3d6e:	3608      	adds	r6, #8
    3d70:	f856 4c04 	ldr.w	r4, [r6, #-4]
    3d74:	1d38      	adds	r0, r7, #4
    3d76:	f856 2c08 	ldr.w	r2, [r6, #-8]
    3d7a:	4639      	mov	r1, r7
    3d7c:	fb84 4504 	smull	r4, r5, r4, r4
    3d80:	4607      	mov	r7, r0
    3d82:	fb82 2302 	smull	r2, r3, r2, r2
    3d86:	3608      	adds	r6, #8
    3d88:	1068      	asrs	r0, r5, #1
    3d8a:	eb00 0063 	add.w	r0, r0, r3, asr #1
    3d8e:	f000 f807 	bl	3da0 <arm_sqrt_q31>
    3d92:	f1b8 0801 	subs.w	r8, r8, #1
    3d96:	d1eb      	bne.n	3d70 <arm_cmplx_mag_q31+0xc4>
    3d98:	b007      	add	sp, #28
    3d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3d9e:	bf00      	nop

00003da0 <arm_sqrt_q31>:
    3da0:	2800      	cmp	r0, #0
    3da2:	dd6e      	ble.n	3e82 <arm_sqrt_q31+0xe2>
    3da4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3da8:	fab0 f680 	clz	r6, r0
    3dac:	1e77      	subs	r7, r6, #1
    3dae:	f017 0c01 	ands.w	ip, r7, #1
    3db2:	d05a      	beq.n	3e6a <arm_sqrt_q31+0xca>
    3db4:	1eb3      	subs	r3, r6, #2
    3db6:	4098      	lsls	r0, r3
    3db8:	ee07 0a90 	vmov	s15, r0
    3dbc:	4c33      	ldr	r4, [pc, #204]	; (3e8c <arm_sqrt_q31+0xec>)
    3dbe:	ea4f 0e60 	mov.w	lr, r0, asr #1
    3dc2:	eefa 7ae0 	vcvt.f32.s32	s15, s15, #31
    3dc6:	ee17 3a90 	vmov	r3, s15
    3dca:	105b      	asrs	r3, r3, #1
    3dcc:	1ae4      	subs	r4, r4, r3
    3dce:	ee07 4a90 	vmov	s15, r4
    3dd2:	eefe 7ac1 	vcvt.s32.f32	s15, s15, #30
    3dd6:	ee17 5a90 	vmov	r5, s15
    3dda:	fb85 8905 	smull	r8, r9, r5, r5
    3dde:	ea4f 72d8 	mov.w	r2, r8, lsr #31
    3de2:	ea42 0249 	orr.w	r2, r2, r9, lsl #1
    3de6:	fb82 230e 	smull	r2, r3, r2, lr
    3dea:	0fd4      	lsrs	r4, r2, #31
    3dec:	ea44 0443 	orr.w	r4, r4, r3, lsl #1
    3df0:	f1c4 5440 	rsb	r4, r4, #805306368	; 0x30000000
    3df4:	fb85 4504 	smull	r4, r5, r5, r4
    3df8:	0fe2      	lsrs	r2, r4, #31
    3dfa:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    3dfe:	0093      	lsls	r3, r2, #2
    3e00:	fb83 8903 	smull	r8, r9, r3, r3
    3e04:	ea4f 74d8 	mov.w	r4, r8, lsr #31
    3e08:	ea44 0449 	orr.w	r4, r4, r9, lsl #1
    3e0c:	fb8e 4504 	smull	r4, r5, lr, r4
    3e10:	0fe2      	lsrs	r2, r4, #31
    3e12:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    3e16:	f1c2 5240 	rsb	r2, r2, #805306368	; 0x30000000
    3e1a:	fb83 2302 	smull	r2, r3, r3, r2
    3e1e:	0fd2      	lsrs	r2, r2, #31
    3e20:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    3e24:	ea4f 0882 	mov.w	r8, r2, lsl #2
    3e28:	fb88 2308 	smull	r2, r3, r8, r8
    3e2c:	0fd4      	lsrs	r4, r2, #31
    3e2e:	ea44 0443 	orr.w	r4, r4, r3, lsl #1
    3e32:	fb8e 4504 	smull	r4, r5, lr, r4
    3e36:	0fe2      	lsrs	r2, r4, #31
    3e38:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    3e3c:	f1c2 5240 	rsb	r2, r2, #805306368	; 0x30000000
    3e40:	fb88 2302 	smull	r2, r3, r8, r2
    3e44:	0fd4      	lsrs	r4, r2, #31
    3e46:	ea44 0443 	orr.w	r4, r4, r3, lsl #1
    3e4a:	00a4      	lsls	r4, r4, #2
    3e4c:	fb80 4504 	smull	r4, r5, r0, r4
    3e50:	0fe3      	lsrs	r3, r4, #31
    3e52:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
    3e56:	005b      	lsls	r3, r3, #1
    3e58:	f1bc 0f00 	cmp.w	ip, #0
    3e5c:	d107      	bne.n	3e6e <arm_sqrt_q31+0xce>
    3e5e:	107f      	asrs	r7, r7, #1
    3e60:	2000      	movs	r0, #0
    3e62:	413b      	asrs	r3, r7
    3e64:	600b      	str	r3, [r1, #0]
    3e66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3e6a:	40b8      	lsls	r0, r7
    3e6c:	e7a4      	b.n	3db8 <arm_sqrt_q31+0x18>
    3e6e:	3e02      	subs	r6, #2
    3e70:	f04f 0000 	mov.w	r0, #0
    3e74:	bf48      	it	mi
    3e76:	463e      	movmi	r6, r7
    3e78:	1076      	asrs	r6, r6, #1
    3e7a:	4133      	asrs	r3, r6
    3e7c:	600b      	str	r3, [r1, #0]
    3e7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3e82:	2300      	movs	r3, #0
    3e84:	f04f 30ff 	mov.w	r0, #4294967295
    3e88:	600b      	str	r3, [r1, #0]
    3e8a:	4770      	bx	lr
    3e8c:	5f3759df 	.word	0x5f3759df

00003e90 <arm_cfft_radix4by2_q15>:
    3e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3e94:	084d      	lsrs	r5, r1, #1
    3e96:	4616      	mov	r6, r2
    3e98:	eb00 0741 	add.w	r7, r0, r1, lsl #1
    3e9c:	d04b      	beq.n	3f36 <arm_cfft_radix4by2_q15+0xa6>
    3e9e:	4604      	mov	r4, r0
    3ea0:	46be      	mov	lr, r7
    3ea2:	4690      	mov	r8, r2
    3ea4:	4629      	mov	r1, r5
    3ea6:	f04f 0c00 	mov.w	ip, #0
    3eaa:	f858 9b04 	ldr.w	r9, [r8], #4
    3eae:	6803      	ldr	r3, [r0, #0]
    3eb0:	fa93 f32c 	shadd16	r3, r3, ip
    3eb4:	f8de 2000 	ldr.w	r2, [lr]
    3eb8:	fa92 f22c 	shadd16	r2, r2, ip
    3ebc:	fad3 fa12 	qsub16	sl, r3, r2
    3ec0:	fa93 f322 	shadd16	r3, r3, r2
    3ec4:	f840 3b04 	str.w	r3, [r0], #4
    3ec8:	fb29 f20a 	smuad	r2, r9, sl
    3ecc:	fb49 f91a 	smusdx	r9, r9, sl
    3ed0:	4b1f      	ldr	r3, [pc, #124]	; (3f50 <arm_cfft_radix4by2_q15+0xc0>)
    3ed2:	3901      	subs	r1, #1
    3ed4:	ea09 0303 	and.w	r3, r9, r3
    3ed8:	ea43 4312 	orr.w	r3, r3, r2, lsr #16
    3edc:	f84e 3b04 	str.w	r3, [lr], #4
    3ee0:	d1e3      	bne.n	3eaa <arm_cfft_radix4by2_q15+0x1a>
    3ee2:	4629      	mov	r1, r5
    3ee4:	2302      	movs	r3, #2
    3ee6:	4632      	mov	r2, r6
    3ee8:	4620      	mov	r0, r4
    3eea:	f000 f953 	bl	4194 <arm_radix4_butterfly_q15>
    3eee:	4638      	mov	r0, r7
    3ef0:	2302      	movs	r3, #2
    3ef2:	4629      	mov	r1, r5
    3ef4:	4632      	mov	r2, r6
    3ef6:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
    3efa:	f000 f94b 	bl	4194 <arm_radix4_butterfly_q15>
    3efe:	4620      	mov	r0, r4
    3f00:	1ca3      	adds	r3, r4, #2
    3f02:	f933 7c02 	ldrsh.w	r7, [r3, #-2]
    3f06:	3008      	adds	r0, #8
    3f08:	f930 6c06 	ldrsh.w	r6, [r0, #-6]
    3f0c:	3308      	adds	r3, #8
    3f0e:	f930 4c04 	ldrsh.w	r4, [r0, #-4]
    3f12:	007f      	lsls	r7, r7, #1
    3f14:	f930 2c02 	ldrsh.w	r2, [r0, #-2]
    3f18:	0076      	lsls	r6, r6, #1
    3f1a:	0064      	lsls	r4, r4, #1
    3f1c:	f823 7c0a 	strh.w	r7, [r3, #-10]
    3f20:	0052      	lsls	r2, r2, #1
    3f22:	f820 6c06 	strh.w	r6, [r0, #-6]
    3f26:	f820 4c04 	strh.w	r4, [r0, #-4]
    3f2a:	f820 2c02 	strh.w	r2, [r0, #-2]
    3f2e:	4285      	cmp	r5, r0
    3f30:	d1e7      	bne.n	3f02 <arm_cfft_radix4by2_q15+0x72>
    3f32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3f36:	4629      	mov	r1, r5
    3f38:	2302      	movs	r3, #2
    3f3a:	f000 f92b 	bl	4194 <arm_radix4_butterfly_q15>
    3f3e:	4632      	mov	r2, r6
    3f40:	4629      	mov	r1, r5
    3f42:	4638      	mov	r0, r7
    3f44:	2302      	movs	r3, #2
    3f46:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3f4a:	f000 b923 	b.w	4194 <arm_radix4_butterfly_q15>
    3f4e:	bf00      	nop
    3f50:	ffff0000 	.word	0xffff0000

00003f54 <arm_cfft_radix4by2_inverse_q15>:
    3f54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3f58:	084d      	lsrs	r5, r1, #1
    3f5a:	4616      	mov	r6, r2
    3f5c:	eb00 0741 	add.w	r7, r0, r1, lsl #1
    3f60:	d04b      	beq.n	3ffa <arm_cfft_radix4by2_inverse_q15+0xa6>
    3f62:	4604      	mov	r4, r0
    3f64:	46be      	mov	lr, r7
    3f66:	4690      	mov	r8, r2
    3f68:	4629      	mov	r1, r5
    3f6a:	f04f 0c00 	mov.w	ip, #0
    3f6e:	f858 9b04 	ldr.w	r9, [r8], #4
    3f72:	6803      	ldr	r3, [r0, #0]
    3f74:	fa93 f32c 	shadd16	r3, r3, ip
    3f78:	f8de 2000 	ldr.w	r2, [lr]
    3f7c:	fa92 f22c 	shadd16	r2, r2, ip
    3f80:	fad3 fa12 	qsub16	sl, r3, r2
    3f84:	fa93 f322 	shadd16	r3, r3, r2
    3f88:	f840 3b04 	str.w	r3, [r0], #4
    3f8c:	fb49 f20a 	smusd	r2, r9, sl
    3f90:	fb29 f91a 	smuadx	r9, r9, sl
    3f94:	4b1f      	ldr	r3, [pc, #124]	; (4014 <arm_cfft_radix4by2_inverse_q15+0xc0>)
    3f96:	3901      	subs	r1, #1
    3f98:	ea09 0303 	and.w	r3, r9, r3
    3f9c:	ea43 4312 	orr.w	r3, r3, r2, lsr #16
    3fa0:	f84e 3b04 	str.w	r3, [lr], #4
    3fa4:	d1e3      	bne.n	3f6e <arm_cfft_radix4by2_inverse_q15+0x1a>
    3fa6:	4629      	mov	r1, r5
    3fa8:	2302      	movs	r3, #2
    3faa:	4632      	mov	r2, r6
    3fac:	4620      	mov	r0, r4
    3fae:	f000 fa2d 	bl	440c <arm_radix4_butterfly_inverse_q15>
    3fb2:	4638      	mov	r0, r7
    3fb4:	2302      	movs	r3, #2
    3fb6:	4629      	mov	r1, r5
    3fb8:	4632      	mov	r2, r6
    3fba:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
    3fbe:	f000 fa25 	bl	440c <arm_radix4_butterfly_inverse_q15>
    3fc2:	4620      	mov	r0, r4
    3fc4:	1ca3      	adds	r3, r4, #2
    3fc6:	f933 7c02 	ldrsh.w	r7, [r3, #-2]
    3fca:	3008      	adds	r0, #8
    3fcc:	f930 6c06 	ldrsh.w	r6, [r0, #-6]
    3fd0:	3308      	adds	r3, #8
    3fd2:	f930 4c04 	ldrsh.w	r4, [r0, #-4]
    3fd6:	007f      	lsls	r7, r7, #1
    3fd8:	f930 2c02 	ldrsh.w	r2, [r0, #-2]
    3fdc:	0076      	lsls	r6, r6, #1
    3fde:	0064      	lsls	r4, r4, #1
    3fe0:	f823 7c0a 	strh.w	r7, [r3, #-10]
    3fe4:	0052      	lsls	r2, r2, #1
    3fe6:	f820 6c06 	strh.w	r6, [r0, #-6]
    3fea:	f820 4c04 	strh.w	r4, [r0, #-4]
    3fee:	f820 2c02 	strh.w	r2, [r0, #-2]
    3ff2:	4285      	cmp	r5, r0
    3ff4:	d1e7      	bne.n	3fc6 <arm_cfft_radix4by2_inverse_q15+0x72>
    3ff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3ffa:	4629      	mov	r1, r5
    3ffc:	2302      	movs	r3, #2
    3ffe:	f000 fa05 	bl	440c <arm_radix4_butterfly_inverse_q15>
    4002:	4632      	mov	r2, r6
    4004:	4629      	mov	r1, r5
    4006:	4638      	mov	r0, r7
    4008:	2302      	movs	r3, #2
    400a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    400e:	f000 b9fd 	b.w	440c <arm_radix4_butterfly_inverse_q15>
    4012:	bf00      	nop
    4014:	ffff0000 	.word	0xffff0000

00004018 <arm_cfft_q15>:
    4018:	2a01      	cmp	r2, #1
    401a:	b570      	push	{r4, r5, r6, lr}
    401c:	460d      	mov	r5, r1
    401e:	4604      	mov	r4, r0
    4020:	461e      	mov	r6, r3
    4022:	8801      	ldrh	r1, [r0, #0]
    4024:	d024      	beq.n	4070 <arm_cfft_q15+0x58>
    4026:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    402a:	d013      	beq.n	4054 <arm_cfft_q15+0x3c>
    402c:	d808      	bhi.n	4040 <arm_cfft_q15+0x28>
    402e:	2920      	cmp	r1, #32
    4030:	d031      	beq.n	4096 <arm_cfft_q15+0x7e>
    4032:	d945      	bls.n	40c0 <arm_cfft_q15+0xa8>
    4034:	2940      	cmp	r1, #64	; 0x40
    4036:	d00d      	beq.n	4054 <arm_cfft_q15+0x3c>
    4038:	2980      	cmp	r1, #128	; 0x80
    403a:	d02c      	beq.n	4096 <arm_cfft_q15+0x7e>
    403c:	b98e      	cbnz	r6, 4062 <arm_cfft_q15+0x4a>
    403e:	bd70      	pop	{r4, r5, r6, pc}
    4040:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
    4044:	d006      	beq.n	4054 <arm_cfft_q15+0x3c>
    4046:	d923      	bls.n	4090 <arm_cfft_q15+0x78>
    4048:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
    404c:	d023      	beq.n	4096 <arm_cfft_q15+0x7e>
    404e:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    4052:	d1f3      	bne.n	403c <arm_cfft_q15+0x24>
    4054:	2301      	movs	r3, #1
    4056:	6862      	ldr	r2, [r4, #4]
    4058:	4628      	mov	r0, r5
    405a:	f000 f89b 	bl	4194 <arm_radix4_butterfly_q15>
    405e:	2e00      	cmp	r6, #0
    4060:	d0ed      	beq.n	403e <arm_cfft_q15+0x26>
    4062:	4628      	mov	r0, r5
    4064:	68a2      	ldr	r2, [r4, #8]
    4066:	89a1      	ldrh	r1, [r4, #12]
    4068:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    406c:	f000 b867 	b.w	413e <arm_bitreversal_16>
    4070:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    4074:	d01e      	beq.n	40b4 <arm_cfft_q15+0x9c>
    4076:	d813      	bhi.n	40a0 <arm_cfft_q15+0x88>
    4078:	2920      	cmp	r1, #32
    407a:	d004      	beq.n	4086 <arm_cfft_q15+0x6e>
    407c:	d927      	bls.n	40ce <arm_cfft_q15+0xb6>
    407e:	2940      	cmp	r1, #64	; 0x40
    4080:	d018      	beq.n	40b4 <arm_cfft_q15+0x9c>
    4082:	2980      	cmp	r1, #128	; 0x80
    4084:	d1da      	bne.n	403c <arm_cfft_q15+0x24>
    4086:	6862      	ldr	r2, [r4, #4]
    4088:	4628      	mov	r0, r5
    408a:	f7ff ff63 	bl	3f54 <arm_cfft_radix4by2_inverse_q15>
    408e:	e7d5      	b.n	403c <arm_cfft_q15+0x24>
    4090:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    4094:	d1d2      	bne.n	403c <arm_cfft_q15+0x24>
    4096:	6862      	ldr	r2, [r4, #4]
    4098:	4628      	mov	r0, r5
    409a:	f7ff fef9 	bl	3e90 <arm_cfft_radix4by2_q15>
    409e:	e7cd      	b.n	403c <arm_cfft_q15+0x24>
    40a0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
    40a4:	d006      	beq.n	40b4 <arm_cfft_q15+0x9c>
    40a6:	d90e      	bls.n	40c6 <arm_cfft_q15+0xae>
    40a8:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
    40ac:	d0eb      	beq.n	4086 <arm_cfft_q15+0x6e>
    40ae:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    40b2:	d1c3      	bne.n	403c <arm_cfft_q15+0x24>
    40b4:	2301      	movs	r3, #1
    40b6:	6862      	ldr	r2, [r4, #4]
    40b8:	4628      	mov	r0, r5
    40ba:	f000 f9a7 	bl	440c <arm_radix4_butterfly_inverse_q15>
    40be:	e7bd      	b.n	403c <arm_cfft_q15+0x24>
    40c0:	2910      	cmp	r1, #16
    40c2:	d1bb      	bne.n	403c <arm_cfft_q15+0x24>
    40c4:	e7c6      	b.n	4054 <arm_cfft_q15+0x3c>
    40c6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    40ca:	d0dc      	beq.n	4086 <arm_cfft_q15+0x6e>
    40cc:	e7b6      	b.n	403c <arm_cfft_q15+0x24>
    40ce:	2910      	cmp	r1, #16
    40d0:	d1b4      	bne.n	403c <arm_cfft_q15+0x24>
    40d2:	e7ef      	b.n	40b4 <arm_cfft_q15+0x9c>

000040d4 <arm_bitreversal_32>:
    40d4:	1c4b      	adds	r3, r1, #1
    40d6:	2b01      	cmp	r3, #1
    40d8:	bf98      	it	ls
    40da:	4770      	bxls	lr
    40dc:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
    40e0:	1c91      	adds	r1, r2, #2
    40e2:	089b      	lsrs	r3, r3, #2

000040e4 <arm_bitreversal_32_0>:
    40e4:	f8b1 8004 	ldrh.w	r8, [r1, #4]
    40e8:	f8b1 9002 	ldrh.w	r9, [r1, #2]
    40ec:	880a      	ldrh	r2, [r1, #0]
    40ee:	f831 cc02 	ldrh.w	ip, [r1, #-2]
    40f2:	4480      	add	r8, r0
    40f4:	4481      	add	r9, r0
    40f6:	4402      	add	r2, r0
    40f8:	4484      	add	ip, r0
    40fa:	f8d9 7000 	ldr.w	r7, [r9]
    40fe:	f8d8 6000 	ldr.w	r6, [r8]
    4102:	6815      	ldr	r5, [r2, #0]
    4104:	f8dc 4000 	ldr.w	r4, [ip]
    4108:	f8c9 6000 	str.w	r6, [r9]
    410c:	f8c8 7000 	str.w	r7, [r8]
    4110:	f8cc 5000 	str.w	r5, [ip]
    4114:	6014      	str	r4, [r2, #0]
    4116:	f8d9 7004 	ldr.w	r7, [r9, #4]
    411a:	f8d8 6004 	ldr.w	r6, [r8, #4]
    411e:	6855      	ldr	r5, [r2, #4]
    4120:	f8dc 4004 	ldr.w	r4, [ip, #4]
    4124:	f8c9 6004 	str.w	r6, [r9, #4]
    4128:	f8c8 7004 	str.w	r7, [r8, #4]
    412c:	f8cc 5004 	str.w	r5, [ip, #4]
    4130:	6054      	str	r4, [r2, #4]
    4132:	3108      	adds	r1, #8
    4134:	3b01      	subs	r3, #1
    4136:	d1d5      	bne.n	40e4 <arm_bitreversal_32_0>
    4138:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
    413c:	4770      	bx	lr

0000413e <arm_bitreversal_16>:
    413e:	1c4b      	adds	r3, r1, #1
    4140:	2b01      	cmp	r3, #1
    4142:	bf98      	it	ls
    4144:	4770      	bxls	lr
    4146:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
    414a:	1c91      	adds	r1, r2, #2
    414c:	089b      	lsrs	r3, r3, #2

0000414e <arm_bitreversal_16_0>:
    414e:	f8b1 8004 	ldrh.w	r8, [r1, #4]
    4152:	f8b1 9002 	ldrh.w	r9, [r1, #2]
    4156:	880a      	ldrh	r2, [r1, #0]
    4158:	f831 cc02 	ldrh.w	ip, [r1, #-2]
    415c:	eb00 0858 	add.w	r8, r0, r8, lsr #1
    4160:	eb00 0959 	add.w	r9, r0, r9, lsr #1
    4164:	eb00 0252 	add.w	r2, r0, r2, lsr #1
    4168:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
    416c:	f8d9 7000 	ldr.w	r7, [r9]
    4170:	f8d8 6000 	ldr.w	r6, [r8]
    4174:	6815      	ldr	r5, [r2, #0]
    4176:	f8dc 4000 	ldr.w	r4, [ip]
    417a:	f8c9 6000 	str.w	r6, [r9]
    417e:	f8c8 7000 	str.w	r7, [r8]
    4182:	f8cc 5000 	str.w	r5, [ip]
    4186:	6014      	str	r4, [r2, #0]
    4188:	3108      	adds	r1, #8
    418a:	3b01      	subs	r3, #1
    418c:	d1df      	bne.n	414e <arm_bitreversal_16_0>
    418e:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
    4192:	4770      	bx	lr

00004194 <arm_radix4_butterfly_q15>:
    4194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4198:	469b      	mov	fp, r3
    419a:	b091      	sub	sp, #68	; 0x44
    419c:	088b      	lsrs	r3, r1, #2
    419e:	4606      	mov	r6, r0
    41a0:	900e      	str	r0, [sp, #56]	; 0x38
    41a2:	2500      	movs	r5, #0
    41a4:	4618      	mov	r0, r3
    41a6:	9103      	str	r1, [sp, #12]
    41a8:	930f      	str	r3, [sp, #60]	; 0x3c
    41aa:	4637      	mov	r7, r6
    41ac:	0081      	lsls	r1, r0, #2
    41ae:	4682      	mov	sl, r0
    41b0:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
    41b4:	4696      	mov	lr, r2
    41b6:	1870      	adds	r0, r6, r1
    41b8:	9207      	str	r2, [sp, #28]
    41ba:	009b      	lsls	r3, r3, #2
    41bc:	462c      	mov	r4, r5
    41be:	1846      	adds	r6, r0, r1
    41c0:	462a      	mov	r2, r5
    41c2:	9304      	str	r3, [sp, #16]
    41c4:	4431      	add	r1, r6
    41c6:	9601      	str	r6, [sp, #4]
    41c8:	f8cd b008 	str.w	fp, [sp, #8]
    41cc:	683b      	ldr	r3, [r7, #0]
    41ce:	fa93 fc22 	shadd16	ip, r3, r2
    41d2:	fa9c fc22 	shadd16	ip, ip, r2
    41d6:	9b01      	ldr	r3, [sp, #4]
    41d8:	681b      	ldr	r3, [r3, #0]
    41da:	fa93 f322 	shadd16	r3, r3, r2
    41de:	fa93 f322 	shadd16	r3, r3, r2
    41e2:	fa9c f813 	qadd16	r8, ip, r3
    41e6:	fadc fc13 	qsub16	ip, ip, r3
    41ea:	6803      	ldr	r3, [r0, #0]
    41ec:	fa93 f322 	shadd16	r3, r3, r2
    41f0:	fa93 f922 	shadd16	r9, r3, r2
    41f4:	680b      	ldr	r3, [r1, #0]
    41f6:	fa93 f322 	shadd16	r3, r3, r2
    41fa:	fa93 f322 	shadd16	r3, r3, r2
    41fe:	fa99 f313 	qadd16	r3, r9, r3
    4202:	fa98 f923 	shadd16	r9, r8, r3
    4206:	f847 9b04 	str.w	r9, [r7], #4
    420a:	fad8 f313 	qsub16	r3, r8, r3
    420e:	f85e 9034 	ldr.w	r9, [lr, r4, lsl #3]
    4212:	fb29 fb03 	smuad	fp, r9, r3
    4216:	fb49 f913 	smusdx	r9, r9, r3
    421a:	6803      	ldr	r3, [r0, #0]
    421c:	fa93 f322 	shadd16	r3, r3, r2
    4220:	fa93 f822 	shadd16	r8, r3, r2
    4224:	4b78      	ldr	r3, [pc, #480]	; (4408 <arm_radix4_butterfly_q15+0x274>)
    4226:	ea09 0303 	and.w	r3, r9, r3
    422a:	ea43 431b 	orr.w	r3, r3, fp, lsr #16
    422e:	f840 3b04 	str.w	r3, [r0], #4
    4232:	680b      	ldr	r3, [r1, #0]
    4234:	fa93 f322 	shadd16	r3, r3, r2
    4238:	fa93 f322 	shadd16	r3, r3, r2
    423c:	fad8 f313 	qsub16	r3, r8, r3
    4240:	faac f913 	qasx	r9, ip, r3
    4244:	faec fc13 	qsax	ip, ip, r3
    4248:	f85e 3024 	ldr.w	r3, [lr, r4, lsl #2]
    424c:	fb23 f80c 	smuad	r8, r3, ip
    4250:	fb43 fc1c 	smusdx	ip, r3, ip
    4254:	4b6c      	ldr	r3, [pc, #432]	; (4408 <arm_radix4_butterfly_q15+0x274>)
    4256:	9e01      	ldr	r6, [sp, #4]
    4258:	ea0c 0303 	and.w	r3, ip, r3
    425c:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
    4260:	f846 3b04 	str.w	r3, [r6], #4
    4264:	9601      	str	r6, [sp, #4]
    4266:	462e      	mov	r6, r5
    4268:	f85e 3005 	ldr.w	r3, [lr, r5]
    426c:	fb23 fc09 	smuad	ip, r3, r9
    4270:	fb43 f919 	smusdx	r9, r3, r9
    4274:	4b64      	ldr	r3, [pc, #400]	; (4408 <arm_radix4_butterfly_q15+0x274>)
    4276:	f1ba 0a01 	subs.w	sl, sl, #1
    427a:	9d02      	ldr	r5, [sp, #8]
    427c:	ea09 0303 	and.w	r3, r9, r3
    4280:	442c      	add	r4, r5
    4282:	9d04      	ldr	r5, [sp, #16]
    4284:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
    4288:	442e      	add	r6, r5
    428a:	f841 3b04 	str.w	r3, [r1], #4
    428e:	4635      	mov	r5, r6
    4290:	d19c      	bne.n	41cc <arm_radix4_butterfly_q15+0x38>
    4292:	f8dd b008 	ldr.w	fp, [sp, #8]
    4296:	ea4f 038b 	mov.w	r3, fp, lsl #2
    429a:	9309      	str	r3, [sp, #36]	; 0x24
    429c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    429e:	2b04      	cmp	r3, #4
    42a0:	f240 8086 	bls.w	43b0 <arm_radix4_butterfly_q15+0x21c>
    42a4:	f8cd a010 	str.w	sl, [sp, #16]
    42a8:	930c      	str	r3, [sp, #48]	; 0x30
    42aa:	9302      	str	r3, [sp, #8]
    42ac:	9a02      	ldr	r2, [sp, #8]
    42ae:	2100      	movs	r1, #0
    42b0:	0893      	lsrs	r3, r2, #2
    42b2:	9105      	str	r1, [sp, #20]
    42b4:	0097      	lsls	r7, r2, #2
    42b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    42b8:	930d      	str	r3, [sp, #52]	; 0x34
    42ba:	9206      	str	r2, [sp, #24]
    42bc:	1e5a      	subs	r2, r3, #1
    42be:	009b      	lsls	r3, r3, #2
    42c0:	9108      	str	r1, [sp, #32]
    42c2:	920a      	str	r2, [sp, #40]	; 0x28
    42c4:	930b      	str	r3, [sp, #44]	; 0x2c
    42c6:	9907      	ldr	r1, [sp, #28]
    42c8:	9a08      	ldr	r2, [sp, #32]
    42ca:	460d      	mov	r5, r1
    42cc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    42ce:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    42d2:	4611      	mov	r1, r2
    42d4:	f855 c022 	ldr.w	ip, [r5, r2, lsl #2]
    42d8:	9a07      	ldr	r2, [sp, #28]
    42da:	9e06      	ldr	r6, [sp, #24]
    42dc:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
    42e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    42e2:	1930      	adds	r0, r6, r4
    42e4:	f852 8031 	ldr.w	r8, [r2, r1, lsl #3]
    42e8:	18cb      	adds	r3, r1, r3
    42ea:	9a05      	ldr	r2, [sp, #20]
    42ec:	1825      	adds	r5, r4, r0
    42ee:	9308      	str	r3, [sp, #32]
    42f0:	9b03      	ldr	r3, [sp, #12]
    42f2:	442c      	add	r4, r5
    42f4:	4293      	cmp	r3, r2
    42f6:	d946      	bls.n	4386 <arm_radix4_butterfly_q15+0x1f2>
    42f8:	9b02      	ldr	r3, [sp, #8]
    42fa:	9501      	str	r5, [sp, #4]
    42fc:	eb03 0e02 	add.w	lr, r3, r2
    4300:	9a01      	ldr	r2, [sp, #4]
    4302:	6833      	ldr	r3, [r6, #0]
    4304:	6812      	ldr	r2, [r2, #0]
    4306:	fa93 fa12 	qadd16	sl, r3, r2
    430a:	fad3 f312 	qsub16	r3, r3, r2
    430e:	6801      	ldr	r1, [r0, #0]
    4310:	6822      	ldr	r2, [r4, #0]
    4312:	fa91 f112 	qadd16	r1, r1, r2
    4316:	fa9a f221 	shadd16	r2, sl, r1
    431a:	9d04      	ldr	r5, [sp, #16]
    431c:	fa92 f225 	shadd16	r2, r2, r5
    4320:	6032      	str	r2, [r6, #0]
    4322:	443e      	add	r6, r7
    4324:	fada f121 	shsub16	r1, sl, r1
    4328:	fb28 fb01 	smuad	fp, r8, r1
    432c:	fb48 f211 	smusdx	r2, r8, r1
    4330:	4935      	ldr	r1, [pc, #212]	; (4408 <arm_radix4_butterfly_q15+0x274>)
    4332:	f8d0 a000 	ldr.w	sl, [r0]
    4336:	4011      	ands	r1, r2
    4338:	ea41 411b 	orr.w	r1, r1, fp, lsr #16
    433c:	6001      	str	r1, [r0, #0]
    433e:	4438      	add	r0, r7
    4340:	6822      	ldr	r2, [r4, #0]
    4342:	fada f212 	qsub16	r2, sl, r2
    4346:	faa3 f122 	shasx	r1, r3, r2
    434a:	fae3 f322 	shsax	r3, r3, r2
    434e:	fb2c fb03 	smuad	fp, ip, r3
    4352:	fb4c f313 	smusdx	r3, ip, r3
    4356:	4a2c      	ldr	r2, [pc, #176]	; (4408 <arm_radix4_butterfly_q15+0x274>)
    4358:	401a      	ands	r2, r3
    435a:	9b01      	ldr	r3, [sp, #4]
    435c:	ea42 421b 	orr.w	r2, r2, fp, lsr #16
    4360:	601a      	str	r2, [r3, #0]
    4362:	443b      	add	r3, r7
    4364:	9301      	str	r3, [sp, #4]
    4366:	fb29 f201 	smuad	r2, r9, r1
    436a:	fb49 f111 	smusdx	r1, r9, r1
    436e:	4b26      	ldr	r3, [pc, #152]	; (4408 <arm_radix4_butterfly_q15+0x274>)
    4370:	46f2      	mov	sl, lr
    4372:	9d02      	ldr	r5, [sp, #8]
    4374:	400b      	ands	r3, r1
    4376:	44ae      	add	lr, r5
    4378:	ea43 4312 	orr.w	r3, r3, r2, lsr #16
    437c:	6023      	str	r3, [r4, #0]
    437e:	443c      	add	r4, r7
    4380:	9b03      	ldr	r3, [sp, #12]
    4382:	4553      	cmp	r3, sl
    4384:	d8bc      	bhi.n	4300 <arm_radix4_butterfly_q15+0x16c>
    4386:	9a06      	ldr	r2, [sp, #24]
    4388:	9b05      	ldr	r3, [sp, #20]
    438a:	3204      	adds	r2, #4
    438c:	3301      	adds	r3, #1
    438e:	9206      	str	r2, [sp, #24]
    4390:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4392:	9305      	str	r3, [sp, #20]
    4394:	4293      	cmp	r3, r2
    4396:	d996      	bls.n	42c6 <arm_radix4_butterfly_q15+0x132>
    4398:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    439a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    439c:	089b      	lsrs	r3, r3, #2
    439e:	9202      	str	r2, [sp, #8]
    43a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    43a2:	2b04      	cmp	r3, #4
    43a4:	930c      	str	r3, [sp, #48]	; 0x30
    43a6:	ea4f 0282 	mov.w	r2, r2, lsl #2
    43aa:	9209      	str	r2, [sp, #36]	; 0x24
    43ac:	f63f af7e 	bhi.w	42ac <arm_radix4_butterfly_q15+0x118>
    43b0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    43b2:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    43b4:	3410      	adds	r4, #16
    43b6:	f854 3c10 	ldr.w	r3, [r4, #-16]
    43ba:	f854 7c08 	ldr.w	r7, [r4, #-8]
    43be:	fa93 f117 	qadd16	r1, r3, r7
    43c2:	f854 2c0c 	ldr.w	r2, [r4, #-12]
    43c6:	f854 0c04 	ldr.w	r0, [r4, #-4]
    43ca:	fa92 f510 	qadd16	r5, r2, r0
    43ce:	fa91 f525 	shadd16	r5, r1, r5
    43d2:	f844 5c10 	str.w	r5, [r4, #-16]
    43d6:	fa92 f510 	qadd16	r5, r2, r0
    43da:	fad1 f125 	shsub16	r1, r1, r5
    43de:	f844 1c0c 	str.w	r1, [r4, #-12]
    43e2:	fad3 f317 	qsub16	r3, r3, r7
    43e6:	fad2 f210 	qsub16	r2, r2, r0
    43ea:	fae3 f122 	shsax	r1, r3, r2
    43ee:	f844 1c08 	str.w	r1, [r4, #-8]
    43f2:	faa3 f322 	shasx	r3, r3, r2
    43f6:	3e01      	subs	r6, #1
    43f8:	f844 3c04 	str.w	r3, [r4, #-4]
    43fc:	f104 0410 	add.w	r4, r4, #16
    4400:	d1d9      	bne.n	43b6 <arm_radix4_butterfly_q15+0x222>
    4402:	b011      	add	sp, #68	; 0x44
    4404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4408:	ffff0000 	.word	0xffff0000

0000440c <arm_radix4_butterfly_inverse_q15>:
    440c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4410:	469b      	mov	fp, r3
    4412:	b091      	sub	sp, #68	; 0x44
    4414:	088b      	lsrs	r3, r1, #2
    4416:	4606      	mov	r6, r0
    4418:	900e      	str	r0, [sp, #56]	; 0x38
    441a:	2500      	movs	r5, #0
    441c:	4618      	mov	r0, r3
    441e:	9103      	str	r1, [sp, #12]
    4420:	930f      	str	r3, [sp, #60]	; 0x3c
    4422:	4637      	mov	r7, r6
    4424:	0081      	lsls	r1, r0, #2
    4426:	4682      	mov	sl, r0
    4428:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
    442c:	4696      	mov	lr, r2
    442e:	1870      	adds	r0, r6, r1
    4430:	9207      	str	r2, [sp, #28]
    4432:	009b      	lsls	r3, r3, #2
    4434:	462c      	mov	r4, r5
    4436:	1846      	adds	r6, r0, r1
    4438:	462a      	mov	r2, r5
    443a:	9304      	str	r3, [sp, #16]
    443c:	4431      	add	r1, r6
    443e:	9601      	str	r6, [sp, #4]
    4440:	f8cd b008 	str.w	fp, [sp, #8]
    4444:	683b      	ldr	r3, [r7, #0]
    4446:	fa93 fc22 	shadd16	ip, r3, r2
    444a:	fa9c fc22 	shadd16	ip, ip, r2
    444e:	9b01      	ldr	r3, [sp, #4]
    4450:	681b      	ldr	r3, [r3, #0]
    4452:	fa93 f322 	shadd16	r3, r3, r2
    4456:	fa93 f322 	shadd16	r3, r3, r2
    445a:	fa9c f813 	qadd16	r8, ip, r3
    445e:	fadc fc13 	qsub16	ip, ip, r3
    4462:	6803      	ldr	r3, [r0, #0]
    4464:	fa93 f322 	shadd16	r3, r3, r2
    4468:	fa93 f922 	shadd16	r9, r3, r2
    446c:	680b      	ldr	r3, [r1, #0]
    446e:	fa93 f322 	shadd16	r3, r3, r2
    4472:	fa93 f322 	shadd16	r3, r3, r2
    4476:	fa99 f313 	qadd16	r3, r9, r3
    447a:	fa98 f923 	shadd16	r9, r8, r3
    447e:	f847 9b04 	str.w	r9, [r7], #4
    4482:	fad8 f313 	qsub16	r3, r8, r3
    4486:	f85e 9034 	ldr.w	r9, [lr, r4, lsl #3]
    448a:	fb49 fb03 	smusd	fp, r9, r3
    448e:	fb29 f913 	smuadx	r9, r9, r3
    4492:	6803      	ldr	r3, [r0, #0]
    4494:	fa93 f322 	shadd16	r3, r3, r2
    4498:	fa93 f822 	shadd16	r8, r3, r2
    449c:	4b78      	ldr	r3, [pc, #480]	; (4680 <arm_radix4_butterfly_inverse_q15+0x274>)
    449e:	ea09 0303 	and.w	r3, r9, r3
    44a2:	ea43 431b 	orr.w	r3, r3, fp, lsr #16
    44a6:	f840 3b04 	str.w	r3, [r0], #4
    44aa:	680b      	ldr	r3, [r1, #0]
    44ac:	fa93 f322 	shadd16	r3, r3, r2
    44b0:	fa93 f322 	shadd16	r3, r3, r2
    44b4:	fad8 f313 	qsub16	r3, r8, r3
    44b8:	faec f913 	qsax	r9, ip, r3
    44bc:	faac fc13 	qasx	ip, ip, r3
    44c0:	f85e 3024 	ldr.w	r3, [lr, r4, lsl #2]
    44c4:	fb43 f80c 	smusd	r8, r3, ip
    44c8:	fb23 fc1c 	smuadx	ip, r3, ip
    44cc:	4b6c      	ldr	r3, [pc, #432]	; (4680 <arm_radix4_butterfly_inverse_q15+0x274>)
    44ce:	9e01      	ldr	r6, [sp, #4]
    44d0:	ea0c 0303 	and.w	r3, ip, r3
    44d4:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
    44d8:	f846 3b04 	str.w	r3, [r6], #4
    44dc:	9601      	str	r6, [sp, #4]
    44de:	462e      	mov	r6, r5
    44e0:	f85e 3005 	ldr.w	r3, [lr, r5]
    44e4:	fb43 fc09 	smusd	ip, r3, r9
    44e8:	fb23 f919 	smuadx	r9, r3, r9
    44ec:	4b64      	ldr	r3, [pc, #400]	; (4680 <arm_radix4_butterfly_inverse_q15+0x274>)
    44ee:	f1ba 0a01 	subs.w	sl, sl, #1
    44f2:	9d02      	ldr	r5, [sp, #8]
    44f4:	ea09 0303 	and.w	r3, r9, r3
    44f8:	442c      	add	r4, r5
    44fa:	9d04      	ldr	r5, [sp, #16]
    44fc:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
    4500:	442e      	add	r6, r5
    4502:	f841 3b04 	str.w	r3, [r1], #4
    4506:	4635      	mov	r5, r6
    4508:	d19c      	bne.n	4444 <arm_radix4_butterfly_inverse_q15+0x38>
    450a:	f8dd b008 	ldr.w	fp, [sp, #8]
    450e:	ea4f 038b 	mov.w	r3, fp, lsl #2
    4512:	9309      	str	r3, [sp, #36]	; 0x24
    4514:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4516:	2b04      	cmp	r3, #4
    4518:	f240 8086 	bls.w	4628 <arm_radix4_butterfly_inverse_q15+0x21c>
    451c:	f8cd a010 	str.w	sl, [sp, #16]
    4520:	930c      	str	r3, [sp, #48]	; 0x30
    4522:	9302      	str	r3, [sp, #8]
    4524:	9a02      	ldr	r2, [sp, #8]
    4526:	2100      	movs	r1, #0
    4528:	0893      	lsrs	r3, r2, #2
    452a:	9105      	str	r1, [sp, #20]
    452c:	0097      	lsls	r7, r2, #2
    452e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    4530:	930d      	str	r3, [sp, #52]	; 0x34
    4532:	9206      	str	r2, [sp, #24]
    4534:	1e5a      	subs	r2, r3, #1
    4536:	009b      	lsls	r3, r3, #2
    4538:	9108      	str	r1, [sp, #32]
    453a:	920a      	str	r2, [sp, #40]	; 0x28
    453c:	930b      	str	r3, [sp, #44]	; 0x2c
    453e:	9907      	ldr	r1, [sp, #28]
    4540:	9a08      	ldr	r2, [sp, #32]
    4542:	460d      	mov	r5, r1
    4544:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    4546:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    454a:	4611      	mov	r1, r2
    454c:	f855 c022 	ldr.w	ip, [r5, r2, lsl #2]
    4550:	9a07      	ldr	r2, [sp, #28]
    4552:	9e06      	ldr	r6, [sp, #24]
    4554:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
    4558:	9b09      	ldr	r3, [sp, #36]	; 0x24
    455a:	1930      	adds	r0, r6, r4
    455c:	f852 8031 	ldr.w	r8, [r2, r1, lsl #3]
    4560:	18cb      	adds	r3, r1, r3
    4562:	9a05      	ldr	r2, [sp, #20]
    4564:	1825      	adds	r5, r4, r0
    4566:	9308      	str	r3, [sp, #32]
    4568:	9b03      	ldr	r3, [sp, #12]
    456a:	442c      	add	r4, r5
    456c:	4293      	cmp	r3, r2
    456e:	d946      	bls.n	45fe <arm_radix4_butterfly_inverse_q15+0x1f2>
    4570:	9b02      	ldr	r3, [sp, #8]
    4572:	9501      	str	r5, [sp, #4]
    4574:	eb03 0e02 	add.w	lr, r3, r2
    4578:	9a01      	ldr	r2, [sp, #4]
    457a:	6833      	ldr	r3, [r6, #0]
    457c:	6812      	ldr	r2, [r2, #0]
    457e:	fa93 fa12 	qadd16	sl, r3, r2
    4582:	fad3 f312 	qsub16	r3, r3, r2
    4586:	6801      	ldr	r1, [r0, #0]
    4588:	6822      	ldr	r2, [r4, #0]
    458a:	fa91 f112 	qadd16	r1, r1, r2
    458e:	fa9a f221 	shadd16	r2, sl, r1
    4592:	9d04      	ldr	r5, [sp, #16]
    4594:	fa92 f225 	shadd16	r2, r2, r5
    4598:	6032      	str	r2, [r6, #0]
    459a:	443e      	add	r6, r7
    459c:	fada f121 	shsub16	r1, sl, r1
    45a0:	fb48 fb01 	smusd	fp, r8, r1
    45a4:	fb28 f211 	smuadx	r2, r8, r1
    45a8:	4935      	ldr	r1, [pc, #212]	; (4680 <arm_radix4_butterfly_inverse_q15+0x274>)
    45aa:	f8d0 a000 	ldr.w	sl, [r0]
    45ae:	4011      	ands	r1, r2
    45b0:	ea41 411b 	orr.w	r1, r1, fp, lsr #16
    45b4:	6001      	str	r1, [r0, #0]
    45b6:	4438      	add	r0, r7
    45b8:	6822      	ldr	r2, [r4, #0]
    45ba:	fada f212 	qsub16	r2, sl, r2
    45be:	fae3 f122 	shsax	r1, r3, r2
    45c2:	faa3 f322 	shasx	r3, r3, r2
    45c6:	fb4c fb03 	smusd	fp, ip, r3
    45ca:	fb2c f313 	smuadx	r3, ip, r3
    45ce:	4a2c      	ldr	r2, [pc, #176]	; (4680 <arm_radix4_butterfly_inverse_q15+0x274>)
    45d0:	401a      	ands	r2, r3
    45d2:	9b01      	ldr	r3, [sp, #4]
    45d4:	ea42 421b 	orr.w	r2, r2, fp, lsr #16
    45d8:	601a      	str	r2, [r3, #0]
    45da:	443b      	add	r3, r7
    45dc:	9301      	str	r3, [sp, #4]
    45de:	fb49 f201 	smusd	r2, r9, r1
    45e2:	fb29 f111 	smuadx	r1, r9, r1
    45e6:	4b26      	ldr	r3, [pc, #152]	; (4680 <arm_radix4_butterfly_inverse_q15+0x274>)
    45e8:	46f2      	mov	sl, lr
    45ea:	9d02      	ldr	r5, [sp, #8]
    45ec:	400b      	ands	r3, r1
    45ee:	44ae      	add	lr, r5
    45f0:	ea43 4312 	orr.w	r3, r3, r2, lsr #16
    45f4:	6023      	str	r3, [r4, #0]
    45f6:	443c      	add	r4, r7
    45f8:	9b03      	ldr	r3, [sp, #12]
    45fa:	4553      	cmp	r3, sl
    45fc:	d8bc      	bhi.n	4578 <arm_radix4_butterfly_inverse_q15+0x16c>
    45fe:	9a06      	ldr	r2, [sp, #24]
    4600:	9b05      	ldr	r3, [sp, #20]
    4602:	3204      	adds	r2, #4
    4604:	3301      	adds	r3, #1
    4606:	9206      	str	r2, [sp, #24]
    4608:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    460a:	9305      	str	r3, [sp, #20]
    460c:	4293      	cmp	r3, r2
    460e:	d996      	bls.n	453e <arm_radix4_butterfly_inverse_q15+0x132>
    4610:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4612:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    4614:	089b      	lsrs	r3, r3, #2
    4616:	9202      	str	r2, [sp, #8]
    4618:	9a09      	ldr	r2, [sp, #36]	; 0x24
    461a:	2b04      	cmp	r3, #4
    461c:	930c      	str	r3, [sp, #48]	; 0x30
    461e:	ea4f 0282 	mov.w	r2, r2, lsl #2
    4622:	9209      	str	r2, [sp, #36]	; 0x24
    4624:	f63f af7e 	bhi.w	4524 <arm_radix4_butterfly_inverse_q15+0x118>
    4628:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    462a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    462c:	3410      	adds	r4, #16
    462e:	f854 3c10 	ldr.w	r3, [r4, #-16]
    4632:	f854 7c08 	ldr.w	r7, [r4, #-8]
    4636:	fa93 f117 	qadd16	r1, r3, r7
    463a:	f854 2c0c 	ldr.w	r2, [r4, #-12]
    463e:	f854 0c04 	ldr.w	r0, [r4, #-4]
    4642:	fa92 f510 	qadd16	r5, r2, r0
    4646:	fa91 f525 	shadd16	r5, r1, r5
    464a:	f844 5c10 	str.w	r5, [r4, #-16]
    464e:	fa92 f510 	qadd16	r5, r2, r0
    4652:	fad1 f125 	shsub16	r1, r1, r5
    4656:	f844 1c0c 	str.w	r1, [r4, #-12]
    465a:	fad3 f317 	qsub16	r3, r3, r7
    465e:	fad2 f210 	qsub16	r2, r2, r0
    4662:	faa3 f122 	shasx	r1, r3, r2
    4666:	f844 1c08 	str.w	r1, [r4, #-8]
    466a:	fae3 f322 	shsax	r3, r3, r2
    466e:	3e01      	subs	r6, #1
    4670:	f844 3c04 	str.w	r3, [r4, #-4]
    4674:	f104 0410 	add.w	r4, r4, #16
    4678:	d1d9      	bne.n	462e <arm_radix4_butterfly_inverse_q15+0x222>
    467a:	b011      	add	sp, #68	; 0x44
    467c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4680:	ffff0000 	.word	0xffff0000

00004684 <__libc_init_array>:
    4684:	b570      	push	{r4, r5, r6, lr}
    4686:	4e0f      	ldr	r6, [pc, #60]	; (46c4 <__libc_init_array+0x40>)
    4688:	4d0f      	ldr	r5, [pc, #60]	; (46c8 <__libc_init_array+0x44>)
    468a:	1b76      	subs	r6, r6, r5
    468c:	10b6      	asrs	r6, r6, #2
    468e:	bf18      	it	ne
    4690:	2400      	movne	r4, #0
    4692:	d005      	beq.n	46a0 <__libc_init_array+0x1c>
    4694:	3401      	adds	r4, #1
    4696:	f855 3b04 	ldr.w	r3, [r5], #4
    469a:	4798      	blx	r3
    469c:	42a6      	cmp	r6, r4
    469e:	d1f9      	bne.n	4694 <__libc_init_array+0x10>
    46a0:	4e0a      	ldr	r6, [pc, #40]	; (46cc <__libc_init_array+0x48>)
    46a2:	4d0b      	ldr	r5, [pc, #44]	; (46d0 <__libc_init_array+0x4c>)
    46a4:	1b76      	subs	r6, r6, r5
    46a6:	f000 f863 	bl	4770 <___init_veneer>
    46aa:	10b6      	asrs	r6, r6, #2
    46ac:	bf18      	it	ne
    46ae:	2400      	movne	r4, #0
    46b0:	d006      	beq.n	46c0 <__libc_init_array+0x3c>
    46b2:	3401      	adds	r4, #1
    46b4:	f855 3b04 	ldr.w	r3, [r5], #4
    46b8:	4798      	blx	r3
    46ba:	42a6      	cmp	r6, r4
    46bc:	d1f9      	bne.n	46b2 <__libc_init_array+0x2e>
    46be:	bd70      	pop	{r4, r5, r6, pc}
    46c0:	bd70      	pop	{r4, r5, r6, pc}
    46c2:	bf00      	nop
    46c4:	60001780 	.word	0x60001780
    46c8:	60001780 	.word	0x60001780
    46cc:	60001790 	.word	0x60001790
    46d0:	60001780 	.word	0x60001780

000046d4 <memset>:
    46d4:	b470      	push	{r4, r5, r6}
    46d6:	0784      	lsls	r4, r0, #30
    46d8:	d046      	beq.n	4768 <memset+0x94>
    46da:	1e54      	subs	r4, r2, #1
    46dc:	2a00      	cmp	r2, #0
    46de:	d041      	beq.n	4764 <memset+0x90>
    46e0:	b2cd      	uxtb	r5, r1
    46e2:	4603      	mov	r3, r0
    46e4:	e002      	b.n	46ec <memset+0x18>
    46e6:	1e62      	subs	r2, r4, #1
    46e8:	b3e4      	cbz	r4, 4764 <memset+0x90>
    46ea:	4614      	mov	r4, r2
    46ec:	f803 5b01 	strb.w	r5, [r3], #1
    46f0:	079a      	lsls	r2, r3, #30
    46f2:	d1f8      	bne.n	46e6 <memset+0x12>
    46f4:	2c03      	cmp	r4, #3
    46f6:	d92e      	bls.n	4756 <memset+0x82>
    46f8:	b2cd      	uxtb	r5, r1
    46fa:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    46fe:	2c0f      	cmp	r4, #15
    4700:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    4704:	d919      	bls.n	473a <memset+0x66>
    4706:	f103 0210 	add.w	r2, r3, #16
    470a:	4626      	mov	r6, r4
    470c:	3e10      	subs	r6, #16
    470e:	2e0f      	cmp	r6, #15
    4710:	f842 5c10 	str.w	r5, [r2, #-16]
    4714:	f842 5c0c 	str.w	r5, [r2, #-12]
    4718:	f842 5c08 	str.w	r5, [r2, #-8]
    471c:	f842 5c04 	str.w	r5, [r2, #-4]
    4720:	f102 0210 	add.w	r2, r2, #16
    4724:	d8f2      	bhi.n	470c <memset+0x38>
    4726:	f1a4 0210 	sub.w	r2, r4, #16
    472a:	f022 020f 	bic.w	r2, r2, #15
    472e:	f004 040f 	and.w	r4, r4, #15
    4732:	3210      	adds	r2, #16
    4734:	2c03      	cmp	r4, #3
    4736:	4413      	add	r3, r2
    4738:	d90d      	bls.n	4756 <memset+0x82>
    473a:	461e      	mov	r6, r3
    473c:	4622      	mov	r2, r4
    473e:	3a04      	subs	r2, #4
    4740:	2a03      	cmp	r2, #3
    4742:	f846 5b04 	str.w	r5, [r6], #4
    4746:	d8fa      	bhi.n	473e <memset+0x6a>
    4748:	1f22      	subs	r2, r4, #4
    474a:	f022 0203 	bic.w	r2, r2, #3
    474e:	3204      	adds	r2, #4
    4750:	4413      	add	r3, r2
    4752:	f004 0403 	and.w	r4, r4, #3
    4756:	b12c      	cbz	r4, 4764 <memset+0x90>
    4758:	b2c9      	uxtb	r1, r1
    475a:	441c      	add	r4, r3
    475c:	f803 1b01 	strb.w	r1, [r3], #1
    4760:	42a3      	cmp	r3, r4
    4762:	d1fb      	bne.n	475c <memset+0x88>
    4764:	bc70      	pop	{r4, r5, r6}
    4766:	4770      	bx	lr
    4768:	4614      	mov	r4, r2
    476a:	4603      	mov	r3, r0
    476c:	e7c2      	b.n	46f4 <memset+0x20>
    476e:	bf00      	nop

00004770 <___init_veneer>:
    4770:	f85f f000 	ldr.w	pc, [pc]	; 4774 <___init_veneer+0x4>
    4774:	60001729 	.word	0x60001729
	...

Disassembly of section .fini:

00004780 <_fini>:
    4780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4782:	bf00      	nop
