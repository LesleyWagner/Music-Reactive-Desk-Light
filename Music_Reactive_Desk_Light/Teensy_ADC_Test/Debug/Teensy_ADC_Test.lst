
C:\Users\lesle\AppData\Local\Temp\VMBuilds\Teensy_ADC_Test\teensy40\Debug/Teensy_ADC_Test.ino.elf:     file format elf32-littlearm


Disassembly of section .text.progmem:

60000000 <FlexSPI_NOR_Config>:
60000000:	46 43 46 42 00 00 01 56 00 00 00 00 01 01 02 00     FCFB...V........
	...
60000044:	01 04 03 00 00 00 00 00 00 00 00 00 00 00 20 00     .............. .
	...
60000080:	eb 04 18 0a 06 32 04 26 00 00 00 00 00 00 00 00     .....2.&........
60000090:	05 04 04 24 00 00 00 00 00 00 00 00 00 00 00 00     ...$............
	...
600000b0:	06 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
600000d0:	20 04 18 08 00 00 00 00 00 00 00 00 00 00 00 00      ...............
	...
60000100:	d8 04 18 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
60000110:	02 04 18 08 04 20 00 00 00 00 00 00 00 00 00 00     ..... ..........
	...
60000130:	60 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     `...............
	...
600001c0:	00 01 00 00 00 10 00 00 01 00 00 00 00 00 00 00     ................
600001d0:	00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
60000200:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000210:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000220:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000230:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000240:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000250:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000260:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000270:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000280:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000290:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000300:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000310:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000320:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000330:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000340:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000350:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000360:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000370:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000380:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000390:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000400:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000410:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000420:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000430:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000440:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000450:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000460:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000470:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000480:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000490:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000500:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000510:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000520:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000530:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000540:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000550:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000560:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000570:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000580:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000590:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000600:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000610:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000620:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000630:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000640:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000650:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000660:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000670:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000680:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000690:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000700:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000710:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000720:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000730:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000740:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000750:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000760:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000770:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000780:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000790:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000800:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000810:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000820:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000830:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000840:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000850:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000860:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000870:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000880:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000890:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000900:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000910:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000920:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000930:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000940:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000950:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000960:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000970:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000980:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000990:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000aa0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ab0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ac0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ad0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ae0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000af0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ba0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000be0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bf0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ca0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ce0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cf0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000da0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000db0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000dc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000dd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000de0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000df0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ea0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000eb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ec0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ed0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ee0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ef0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fa0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fe0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ff0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................

60001000 <ImageVectorTable>:
60001000:	d1 00 20 40 2c 10 00 60 00 00 00 00 00 00 00 00     .. @,..`........
60001010:	20 10 00 60 00 10 00 60 00 00 00 00 00 00 00 00      ..`...`........

60001020 <BootData>:
60001020:	00 00 00 60 e8 89 00 00 00 00 00 00                 ...`........

6000102c <vector_table>:
6000102c:	00 00 01 20 35 10 00 60                             ... 5..`

60001034 <ResetHandler>:
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001034:	4b76      	ldr	r3, [pc, #472]	; (60001210 <ResetHandler+0x1dc>)
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001036:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103a:	4a76      	ldr	r2, [pc, #472]	; (60001214 <ResetHandler+0x1e0>)
	IOMUXC_GPR_GPR16 = 0x00200007;
6000103c:	4876      	ldr	r0, [pc, #472]	; (60001218 <ResetHandler+0x1e4>)
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103e:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001040:	6418      	str	r0, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001042:	4a76      	ldr	r2, [pc, #472]	; (6000121c <ResetHandler+0x1e8>)
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001044:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001046:	4695      	mov	sp, r2
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001048:	4a75      	ldr	r2, [pc, #468]	; (60001220 <ResetHandler+0x1ec>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
6000104a:	f503 3330 	add.w	r3, r3, #180224	; 0x2c000
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
6000104e:	4975      	ldr	r1, [pc, #468]	; (60001224 <ResetHandler+0x1f0>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001050:	2008      	movs	r0, #8
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001052:	428a      	cmp	r2, r1
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001054:	f8c3 0154 	str.w	r0, [r3, #340]	; 0x154
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001058:	d00f      	beq.n	6000107a <ResetHandler+0x46>
	while (dest < dest_end) {
6000105a:	4b73      	ldr	r3, [pc, #460]	; (60001228 <ResetHandler+0x1f4>)
6000105c:	429a      	cmp	r2, r3
6000105e:	d20c      	bcs.n	6000107a <ResetHandler+0x46>
60001060:	43d4      	mvns	r4, r2
60001062:	4608      	mov	r0, r1
60001064:	4423      	add	r3, r4
60001066:	f023 0303 	bic.w	r3, r3, #3
6000106a:	3304      	adds	r3, #4
6000106c:	440b      	add	r3, r1
		*dest++ = *src++;
6000106e:	f850 1b04 	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001072:	4298      	cmp	r0, r3
		*dest++ = *src++;
60001074:	f842 1b04 	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001078:	d1f9      	bne.n	6000106e <ResetHandler+0x3a>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
6000107a:	4a6c      	ldr	r2, [pc, #432]	; (6000122c <ResetHandler+0x1f8>)
6000107c:	496c      	ldr	r1, [pc, #432]	; (60001230 <ResetHandler+0x1fc>)
6000107e:	428a      	cmp	r2, r1
60001080:	d00f      	beq.n	600010a2 <ResetHandler+0x6e>
	while (dest < dest_end) {
60001082:	4b6c      	ldr	r3, [pc, #432]	; (60001234 <ResetHandler+0x200>)
60001084:	429a      	cmp	r2, r3
60001086:	d20c      	bcs.n	600010a2 <ResetHandler+0x6e>
60001088:	43d4      	mvns	r4, r2
6000108a:	4608      	mov	r0, r1
6000108c:	4423      	add	r3, r4
6000108e:	f023 0303 	bic.w	r3, r3, #3
60001092:	3304      	adds	r3, #4
60001094:	440b      	add	r3, r1
		*dest++ = *src++;
60001096:	f850 1b04 	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
6000109a:	4298      	cmp	r0, r3
		*dest++ = *src++;
6000109c:	f842 1b04 	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
600010a0:	d1f9      	bne.n	60001096 <ResetHandler+0x62>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010a2:	4a65      	ldr	r2, [pc, #404]	; (60001238 <ResetHandler+0x204>)
600010a4:	4b65      	ldr	r3, [pc, #404]	; (6000123c <ResetHandler+0x208>)
600010a6:	429a      	cmp	r2, r3
600010a8:	d20b      	bcs.n	600010c2 <ResetHandler+0x8e>
600010aa:	43d0      	mvns	r0, r2
600010ac:	4611      	mov	r1, r2
		*dest++ = 0;
600010ae:	2400      	movs	r4, #0
600010b0:	4403      	add	r3, r0
600010b2:	f023 0303 	bic.w	r3, r3, #3
600010b6:	3304      	adds	r3, #4
600010b8:	4413      	add	r3, r2
600010ba:	f841 4b04 	str.w	r4, [r1], #4
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010be:	428b      	cmp	r3, r1
600010c0:	d1fb      	bne.n	600010ba <ResetHandler+0x86>
	memory_copy(&_stext, &_stextload, &_etext);
	memory_copy(&_sdata, &_sdataload, &_edata);
	memory_clear(&_sbss, &_ebss);

	// enable FPU
	SCB_CPACR = 0x00F00000;
600010c2:	4a5f      	ldr	r2, [pc, #380]	; (60001240 <ResetHandler+0x20c>)
600010c4:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
600010c8:	4b5e      	ldr	r3, [pc, #376]	; (60001244 <ResetHandler+0x210>)
600010ca:	6011      	str	r1, [r2, #0]
600010cc:	f503 7130 	add.w	r1, r3, #704	; 0x2c0
600010d0:	4a5d      	ldr	r2, [pc, #372]	; (60001248 <ResetHandler+0x214>)

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
600010d2:	f843 2f04 	str.w	r2, [r3, #4]!
600010d6:	4299      	cmp	r1, r3
600010d8:	d1fb      	bne.n	600010d2 <ResetHandler+0x9e>
600010da:	4b5c      	ldr	r3, [pc, #368]	; (6000124c <ResetHandler+0x218>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600010dc:	2180      	movs	r1, #128	; 0x80
600010de:	4a5c      	ldr	r2, [pc, #368]	; (60001250 <ResetHandler+0x21c>)
600010e0:	f803 1b01 	strb.w	r1, [r3], #1
600010e4:	4293      	cmp	r3, r2
600010e6:	d1fb      	bne.n	600010e0 <ResetHandler+0xac>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600010e8:	4c5a      	ldr	r4, [pc, #360]	; (60001254 <ResetHandler+0x220>)
600010ea:	f04f 3780 	mov.w	r7, #2155905152	; 0x80808080
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600010ee:	4e5a      	ldr	r6, [pc, #360]	; (60001258 <ResetHandler+0x224>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010f0:	f04f 32ff 	mov.w	r2, #4294967295
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010f4:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 60001298 <ResetHandler+0x264>
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
600010f8:	2500      	movs	r5, #0

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600010fa:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 6000129c <ResetHandler+0x268>
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600010fe:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 600012a0 <ResetHandler+0x26c>
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
60001102:	4b56      	ldr	r3, [pc, #344]	; (6000125c <ResetHandler+0x228>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001104:	4942      	ldr	r1, [pc, #264]	; (60001210 <ResetHandler+0x1dc>)
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
60001106:	f8c3 a000 	str.w	sl, [r3]
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
6000110a:	f8c4 7104 	str.w	r7, [r4, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000110e:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001112:	f8c4 70f4 	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001116:	f8c4 80f0 	str.w	r8, [r4, #240]	; 0xf0
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
6000111a:	69f3      	ldr	r3, [r6, #28]
6000111c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
60001120:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001124:	61f3      	str	r3, [r6, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
60001126:	6a73      	ldr	r3, [r6, #36]	; 0x24
60001128:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
6000112c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001130:	6273      	str	r3, [r6, #36]	; 0x24

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001132:	668a      	str	r2, [r1, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
60001134:	66ca      	str	r2, [r1, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001136:	670a      	str	r2, [r1, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001138:	674a      	str	r2, [r1, #116]	; 0x74
	// must enable PRINT_DEBUG_STUFF in debug/print.h
	printf_debug_init();
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
6000113a:	f000 f8b3 	bl	600012a4 <configure_cache>
extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000113e:	4a48      	ldr	r2, [pc, #288]	; (60001260 <ResetHandler+0x22c>)
60001140:	2063      	movs	r0, #99	; 0x63
	SYST_CVR = 0;
60001142:	4b48      	ldr	r3, [pc, #288]	; (60001264 <ResetHandler+0x230>)
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
60001144:	4948      	ldr	r1, [pc, #288]	; (60001268 <ResetHandler+0x234>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001146:	6010      	str	r0, [r2, #0]
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001148:	2203      	movs	r2, #3
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
6000114a:	601d      	str	r5, [r3, #0]
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
6000114c:	f8ca 1038 	str.w	r1, [sl, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001150:	f843 2c08 	str.w	r2, [r3, #-8]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001154:	4945      	ldr	r1, [pc, #276]	; (6000126c <ResetHandler+0x238>)
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001156:	4a46      	ldr	r2, [pc, #280]	; (60001270 <ResetHandler+0x23c>)

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
60001158:	4846      	ldr	r0, [pc, #280]	; (60001274 <ResetHandler+0x240>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000115a:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000115e:	680b      	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001160:	4a45      	ldr	r2, [pc, #276]	; (60001278 <ResetHandler+0x244>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001162:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
60001166:	f8ca 003c 	str.w	r0, [sl, #60]	; 0x3c
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000116a:	4844      	ldr	r0, [pc, #272]	; (6000127c <ResetHandler+0x248>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000116c:	600b      	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000116e:	6813      	ldr	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001170:	4943      	ldr	r1, [pc, #268]	; (60001280 <ResetHandler+0x24c>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001172:	f043 0301 	orr.w	r3, r3, #1
60001176:	6013      	str	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001178:	6803      	ldr	r3, [r0, #0]
6000117a:	600b      	str	r3, [r1, #0]
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
	configure_systick();
	usb_pll_start();	
6000117c:	f000 f90e 	bl	6000139c <usb_pll_start>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001180:	f8c4 7104 	str.w	r7, [r4, #260]	; 0x104
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001184:	483f      	ldr	r0, [pc, #252]	; (60001284 <ResetHandler+0x250>)

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001186:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000118a:	f8c4 70f4 	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000118e:	f8c4 80f0 	str.w	r8, [r4, #240]	; 0xf0
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001192:	f000 fae1 	bl	60001758 <__set_arm_clock_veneer>
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?
60001196:	bf00      	nop
60001198:	bf00      	nop
6000119a:	bf00      	nop
6000119c:	bf00      	nop

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000119e:	6ef1      	ldr	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
600011a0:	4a39      	ldr	r2, [pc, #228]	; (60001288 <ResetHandler+0x254>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
600011a2:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
	PIT_TCTRL1 = 0;
	PIT_TCTRL2 = 0;
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011a6:	4b39      	ldr	r3, [pc, #228]	; (6000128c <ResetHandler+0x258>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
600011a8:	66f1      	str	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
600011aa:	6015      	str	r5, [r2, #0]
	PIT_TCTRL0 = 0;
600011ac:	f8c2 5108 	str.w	r5, [r2, #264]	; 0x108
	PIT_TCTRL1 = 0;
600011b0:	f8c2 5118 	str.w	r5, [r2, #280]	; 0x118
	PIT_TCTRL2 = 0;
600011b4:	f8c2 5128 	str.w	r5, [r2, #296]	; 0x128
	PIT_TCTRL3 = 0;
600011b8:	f8c2 5138 	str.w	r5, [r2, #312]	; 0x138

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
600011be:	07d2      	lsls	r2, r2, #31
600011c0:	d408      	bmi.n	600011d4 <ResetHandler+0x1a0>
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011c2:	f642 6215 	movw	r2, #11797	; 0x2e15
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
600011c6:	4932      	ldr	r1, [pc, #200]	; (60001290 <ResetHandler+0x25c>)
600011c8:	6559      	str	r1, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011ca:	651a      	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
600011cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
600011ce:	f042 0201 	orr.w	r2, r2, #1
600011d2:	639a      	str	r2, [r3, #56]	; 0x38
	}
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600011d4:	4a2d      	ldr	r2, [pc, #180]	; (6000128c <ResetHandler+0x258>)
600011d6:	4c2f      	ldr	r4, [pc, #188]	; (60001294 <ResetHandler+0x260>)
600011d8:	6893      	ldr	r3, [r2, #8]
600011da:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
600011de:	6093      	str	r3, [r2, #8]

#ifdef ARDUINO_TEENSY41
	configure_external_ram();
#endif
	startup_early_hook();
600011e0:	f000 fab6 	bl	60001750 <__startup_early_hook_veneer>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
600011e4:	6823      	ldr	r3, [r4, #0]
	while (millis() < 20) ; // wait at least 20ms before starting USB
600011e6:	2b13      	cmp	r3, #19
600011e8:	d9fc      	bls.n	600011e4 <ResetHandler+0x1b0>
	usb_init();
600011ea:	f000 f997 	bl	6000151c <usb_init>
	analog_init();
600011ee:	f000 fa0b 	bl	60001608 <analog_init>
	pwm_init();
600011f2:	f000 fabd 	bl	60001770 <__pwm_init_veneer>
	tempmon_init();
600011f6:	f000 f903 	bl	60001400 <tempmon_init>

	startup_late_hook();
600011fa:	f000 faa1 	bl	60001740 <__startup_late_hook_veneer>
600011fe:	6823      	ldr	r3, [r4, #0]
	while (millis() < 300) ; // wait at least 300ms before calling user code
60001200:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
60001204:	d3fb      	bcc.n	600011fe <ResetHandler+0x1ca>
	//printf("before C++ constructors\n");
	__libc_init_array();
60001206:	f000 fa9f 	bl	60001748 <____libc_init_array_veneer>
	//printf("after C++ constructors\n");
	//printf("before setup\n");
	main();
6000120a:	f000 faad 	bl	60001768 <__main_veneer>
6000120e:	e7fe      	b.n	6000120e <ResetHandler+0x1da>
60001210:	400ac000 	.word	0x400ac000
60001214:	aaaaaaab 	.word	0xaaaaaaab
60001218:	00200007 	.word	0x00200007
6000121c:	20078000 	.word	0x20078000
60001220:	00000000 	.word	0x00000000
60001224:	60001790 	.word	0x60001790
60001228:	00006468 	.word	0x00006468
6000122c:	20000000 	.word	0x20000000
60001230:	60007bfc 	.word	0x60007bfc
60001234:	20000df0 	.word	0x20000df0
60001238:	20000df0 	.word	0x20000df0
6000123c:	200032c0 	.word	0x200032c0
60001240:	e000ed88 	.word	0xe000ed88
60001244:	200013fc 	.word	0x200013fc
60001248:	0000105d 	.word	0x0000105d
6000124c:	e000e400 	.word	0xe000e400
60001250:	e000e4a0 	.word	0xe000e4a0
60001254:	400d8000 	.word	0x400d8000
60001258:	400fc000 	.word	0x400fc000
6000125c:	e000ed08 	.word	0xe000ed08
60001260:	e000e014 	.word	0xe000e014
60001264:	e000e018 	.word	0xe000e018
60001268:	00002239 	.word	0x00002239
6000126c:	e000edfc 	.word	0xe000edfc
60001270:	20200000 	.word	0x20200000
60001274:	0000223d 	.word	0x0000223d
60001278:	e0001000 	.word	0xe0001000
6000127c:	e0001004 	.word	0xe0001004
60001280:	20001050 	.word	0x20001050
60001284:	23c34600 	.word	0x23c34600
60001288:	40084000 	.word	0x40084000
6000128c:	400d4000 	.word	0x400d4000
60001290:	56c00000 	.word	0x56c00000
60001294:	20001058 	.word	0x20001058
60001298:	20001400 	.word	0x20001400
6000129c:	2018101b 	.word	0x2018101b
600012a0:	13110d0c 	.word	0x13110d0c

600012a4 <configure_cache>:
#define SIZE_2G		(SCB_MPU_RASR_SIZE(30) | SCB_MPU_RASR_ENABLE)
#define SIZE_4G		(SCB_MPU_RASR_SIZE(31) | SCB_MPU_RASR_ENABLE)
#define REGION(n)	(SCB_MPU_RBAR_REGION(n) | SCB_MPU_RBAR_VALID)

FLASHMEM void configure_cache(void)
{
600012a4:	b5f0      	push	{r4, r5, r6, r7, lr}
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600012a6:	4a28      	ldr	r2, [pc, #160]	; (60001348 <configure_cache+0xa4>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600012a8:	2000      	movs	r0, #0

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600012aa:	4b28      	ldr	r3, [pc, #160]	; (6000134c <configure_cache+0xa8>)
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600012ac:	f04f 0c10 	mov.w	ip, #16
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600012b0:	4c27      	ldr	r4, [pc, #156]	; (60001350 <configure_cache+0xac>)

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600012b2:	2711      	movs	r7, #17

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600012b4:	f8df e0d8 	ldr.w	lr, [pc, #216]	; 60001390 <configure_cache+0xec>
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600012b8:	2612      	movs	r6, #18
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600012ba:	6020      	str	r0, [r4, #0]
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600012bc:	2501      	movs	r5, #1
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600012be:	f8c2 c000 	str.w	ip, [r2]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600012c2:	f8c3 e000 	str.w	lr, [r3]
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600012c6:	6017      	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600012c8:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 60001394 <configure_cache+0xf0>

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600012cc:	4f21      	ldr	r7, [pc, #132]	; (60001354 <configure_cache+0xb0>)
	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600012ce:	f8c3 e000 	str.w	lr, [r3]

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600012d2:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600012d4:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600012d6:	4e20      	ldr	r6, [pc, #128]	; (60001358 <configure_cache+0xb4>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600012d8:	4f20      	ldr	r7, [pc, #128]	; (6000135c <configure_cache+0xb8>)
	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600012da:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600012dc:	4920      	ldr	r1, [pc, #128]	; (60001360 <configure_cache+0xbc>)
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600012de:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600012e0:	4e20      	ldr	r6, [pc, #128]	; (60001364 <configure_cache+0xc0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600012e2:	f041 0115 	orr.w	r1, r1, #21

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600012e6:	4f20      	ldr	r7, [pc, #128]	; (60001368 <configure_cache+0xc4>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600012e8:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600012ea:	601f      	str	r7, [r3, #0]
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600012ec:	f507 3740 	add.w	r7, r7, #196608	; 0x30000

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600012f0:	4e1e      	ldr	r6, [pc, #120]	; (6000136c <configure_cache+0xc8>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600012f2:	6011      	str	r1, [r2, #0]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600012f4:	3702      	adds	r7, #2

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600012f6:	601e      	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600012f8:	f8df e09c 	ldr.w	lr, [pc, #156]	; 60001398 <configure_cache+0xf4>
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600012fc:	4e1c      	ldr	r6, [pc, #112]	; (60001370 <configure_cache+0xcc>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600012fe:	491d      	ldr	r1, [pc, #116]	; (60001374 <configure_cache+0xd0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001300:	f8c2 e000 	str.w	lr, [r2]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001304:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001306:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001308:	4f1b      	ldr	r7, [pc, #108]	; (60001378 <configure_cache+0xd4>)

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
6000130a:	6019      	str	r1, [r3, #0]

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
6000130c:	4e1b      	ldr	r6, [pc, #108]	; (6000137c <configure_cache+0xd8>)

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000130e:	491c      	ldr	r1, [pc, #112]	; (60001380 <configure_cache+0xdc>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001310:	6017      	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001312:	601e      	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;
60001314:	4f1b      	ldr	r7, [pc, #108]	; (60001384 <configure_cache+0xe0>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001316:	6011      	str	r1, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001318:	4e1b      	ldr	r6, [pc, #108]	; (60001388 <configure_cache+0xe4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
6000131a:	491c      	ldr	r1, [pc, #112]	; (6000138c <configure_cache+0xe8>)

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;
6000131c:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000131e:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001320:	6019      	str	r1, [r3, #0]

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001322:	6025      	str	r5, [r4, #0]

	// cache enable, ARM DDI0403E, pg 628
	asm("dsb");
60001324:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001328:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
6000132c:	f8c3 01b0 	str.w	r0, [r3, #432]	; 0x1b0

	asm("dsb");
60001330:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001334:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001338:	f852 3c88 	ldr.w	r3, [r2, #-136]
6000133c:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
60001340:	f842 3c88 	str.w	r3, [r2, #-136]
60001344:	bdf0      	pop	{r4, r5, r6, r7, pc}
60001346:	bf00      	nop
60001348:	e000ed9c 	.word	0xe000ed9c
6000134c:	e000eda0 	.word	0xe000eda0
60001350:	e000ed94 	.word	0xe000ed94
60001354:	00100009 	.word	0x00100009
60001358:	00200013 	.word	0x00200013
6000135c:	07020021 	.word	0x07020021
60001360:	200032c0 	.word	0x200032c0
60001364:	20000014 	.word	0x20000014
60001368:	13080025 	.word	0x13080025
6000136c:	10000009 	.word	0x10000009
60001370:	40000017 	.word	0x40000017
60001374:	13100033 	.word	0x13100033
60001378:	60000018 	.word	0x60000018
6000137c:	070b002f 	.word	0x070b002f
60001380:	70000019 	.word	0x70000019
60001384:	170b0037 	.word	0x170b0037
60001388:	7000001a 	.word	0x7000001a
6000138c:	130b002f 	.word	0x130b002f
60001390:	1000003f 	.word	0x1000003f
60001394:	03080025 	.word	0x03080025
60001398:	20200016 	.word	0x20200016

6000139c <usb_pll_start>:

#endif // ARDUINO_TEENSY41


FLASHMEM void usb_pll_start()
{
6000139c:	b4f0      	push	{r4, r5, r6, r7}
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000139e:	4a17      	ldr	r2, [pc, #92]	; (600013fc <usb_pll_start+0x60>)
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
600013a0:	2740      	movs	r7, #64	; 0x40
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
600013a2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
600013a6:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
600013aa:	f44f 5500 	mov.w	r5, #8192	; 0x2000
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
600013ae:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
600013b2:	f243 0042 	movw	r0, #12354	; 0x3042


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
600013b6:	6913      	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
600013b8:	f013 0f02 	tst.w	r3, #2
600013bc:	d006      	beq.n	600013cc <usb_pll_start+0x30>
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
600013be:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
600013c0:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
600013c2:	6190      	str	r0, [r2, #24]


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
600013c4:	6913      	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
600013c6:	f013 0f02 	tst.w	r3, #2
600013ca:	d1f8      	bne.n	600013be <usb_pll_start+0x22>
				CCM_ANALOG_PLL_USB1_DIV_SELECT |		// use 480 MHz
				CCM_ANALOG_PLL_USB1_ENABLE |			// disable
				CCM_ANALOG_PLL_USB1_EN_USB_CLKS;		// disable usb
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
600013cc:	f413 5f00 	tst.w	r3, #8192	; 0x2000
600013d0:	d101      	bne.n	600013d6 <usb_pll_start+0x3a>
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
600013d2:	6155      	str	r5, [r2, #20]
			continue;
600013d4:	e7ef      	b.n	600013b6 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
600013d6:	f413 5f80 	tst.w	r3, #4096	; 0x1000
600013da:	d101      	bne.n	600013e0 <usb_pll_start+0x44>
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
600013dc:	6156      	str	r6, [r2, #20]
			continue;
600013de:	e7ea      	b.n	600013b6 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
600013e0:	2b00      	cmp	r3, #0
600013e2:	dae8      	bge.n	600013b6 <usb_pll_start+0x1a>
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
600013e4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
600013e8:	d001      	beq.n	600013ee <usb_pll_start+0x52>
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
600013ea:	6191      	str	r1, [r2, #24]
			continue;
600013ec:	e7e3      	b.n	600013b6 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
600013ee:	065b      	lsls	r3, r3, #25
600013f0:	d401      	bmi.n	600013f6 <usb_pll_start+0x5a>
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
600013f2:	6157      	str	r7, [r2, #20]
			continue;
600013f4:	e7df      	b.n	600013b6 <usb_pll_start+0x1a>
		}
		return; // everything is as it should be  :-)
	}
}
600013f6:	bcf0      	pop	{r4, r5, r6, r7}
600013f8:	4770      	bx	lr
600013fa:	bf00      	nop
600013fc:	400d8000 	.word	0x400d8000

60001400 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001400:	4a3b      	ldr	r2, [pc, #236]	; (600014f0 <tempmon_init+0xf0>)
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001402:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001406:	493b      	ldr	r1, [pc, #236]	; (600014f4 <tempmon_init+0xf4>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001408:	2000      	movs	r0, #0
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
6000140a:	6813      	ldr	r3, [r2, #0]
  asm volatile ("dsb":::"memory");
  while (1) asm ("wfi");
}

FLASHMEM void tempmon_init(void)
{
6000140c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
6000140e:	f023 0301 	bic.w	r3, r3, #1

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001412:	2403      	movs	r4, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001414:	f8df e100 	ldr.w	lr, [pc, #256]	; 60001518 <tempmon_init+0x118>
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001418:	6013      	str	r3, [r2, #0]

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
6000141a:	f8c2 4090 	str.w	r4, [r2, #144]	; 0x90
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
6000141e:	f8d1 30e0 	ldr.w	r3, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
60001422:	4f35      	ldr	r7, [pc, #212]	; (600014f8 <tempmon_init+0xf8>)
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001424:	b2dd      	uxtb	r5, r3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001426:	f3c3 240b 	ubfx	r4, r3, #8, #12
6000142a:	4e34      	ldr	r6, [pc, #208]	; (600014fc <tempmon_init+0xfc>)
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
6000142c:	ebc4 5313 	rsb	r3, r4, r3, lsr #20
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001430:	ee07 5a90 	vmov	s15, r5
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001434:	f1a5 0155 	sub.w	r1, r5, #85	; 0x55
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001438:	f8ce 5000 	str.w	r5, [lr]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
6000143c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001440:	eb03 0583 	add.w	r5, r3, r3, lsl #2
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001444:	ee07 4a90 	vmov	s15, r4
60001448:	fb03 f101 	mul.w	r1, r3, r1
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
6000144c:	603b      	str	r3, [r7, #0]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000144e:	eb03 1383 	add.w	r3, r3, r3, lsl #6
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001452:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001456:	ee07 1a90 	vmov	s15, r1
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000145a:	1b49      	subs	r1, r1, r5
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
6000145c:	ee77 6a66 	vsub.f32	s13, s14, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001460:	eeb8 7a67 	vcvt.f32.u32	s14, s15
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001464:	4d26      	ldr	r5, [pc, #152]	; (60001500 <tempmon_init+0x100>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001466:	ee07 1a90 	vmov	s15, r1
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000146a:	440b      	add	r3, r1
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
6000146c:	edc5 6a00 	vstr	s13, [r5]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001470:	eef8 7a67 	vcvt.f32.u32	s15, s15
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001474:	6034      	str	r4, [r6, #0]
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001476:	eec7 5a26 	vdiv.f32	s11, s14, s13
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
6000147a:	4e22      	ldr	r6, [pc, #136]	; (60001504 <tempmon_init+0x104>)
6000147c:	6815      	ldr	r5, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000147e:	4922      	ldr	r1, [pc, #136]	; (60001508 <tempmon_init+0x108>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001480:	4c22      	ldr	r4, [pc, #136]	; (6000150c <tempmon_init+0x10c>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001482:	ee87 6aa6 	vdiv.f32	s12, s15, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001486:	ee07 3a90 	vmov	s15, r3
6000148a:	4b21      	ldr	r3, [pc, #132]	; (60001510 <tempmon_init+0x110>)
6000148c:	f8c6 3140 	str.w	r3, [r6, #320]	; 0x140
60001490:	eef8 7a67 	vcvt.f32.u32	s15, s15
60001494:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001498:	ee75 5a85 	vadd.f32	s11, s11, s10
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000149c:	ee76 6a05 	vadd.f32	s13, s12, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600014a0:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600014a4:	eefc 6ae6 	vcvt.u32.f32	s13, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600014a8:	ee15 3a90 	vmov	r3, s11
600014ac:	ea45 5303 	orr.w	r3, r5, r3, lsl #20
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600014b0:	ee16 5a90 	vmov	r5, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600014b4:	ee77 7a05 	vadd.f32	s15, s14, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600014b8:	6013      	str	r3, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600014ba:	ea01 4105 	and.w	r1, r1, r5, lsl #16
600014be:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600014c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600014c6:	430b      	orrs	r3, r1
600014c8:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600014cc:	ee17 3a90 	vmov	r3, s15
600014d0:	f8d2 1110 	ldr.w	r1, [r2, #272]	; 0x110
600014d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
600014d8:	430b      	orrs	r3, r1
600014da:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
600014de:	6813      	ldr	r3, [r2, #0]
600014e0:	f043 0302 	orr.w	r3, r3, #2
600014e4:	6013      	str	r3, [r2, #0]

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600014e6:	7020      	strb	r0, [r4, #0]
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
600014e8:	4b0a      	ldr	r3, [pc, #40]	; (60001514 <tempmon_init+0x114>)
600014ea:	2201      	movs	r2, #1
600014ec:	601a      	str	r2, [r3, #0]
600014ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
600014f0:	400d8180 	.word	0x400d8180
600014f4:	401f4400 	.word	0x401f4400
600014f8:	20001064 	.word	0x20001064
600014fc:	20001068 	.word	0x20001068
60001500:	20001060 	.word	0x20001060
60001504:	20001400 	.word	0x20001400
60001508:	0fff0000 	.word	0x0fff0000
6000150c:	e000e440 	.word	0xe000e440
60001510:	00001139 	.word	0x00001139
60001514:	e000e108 	.word	0xe000e108
60001518:	2000105c 	.word	0x2000105c

6000151c <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
6000151c:	4b30      	ldr	r3, [pc, #192]	; (600015e0 <usb_init+0xc4>)
6000151e:	f640 7261 	movw	r2, #3937	; 0xf61

static void run_callbacks(endpoint_t *ep);


FLASHMEM void usb_init(void)
{
60001522:	b570      	push	{r4, r5, r6, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001524:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001528:	f240 4504 	movw	r5, #1028	; 0x404
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
6000152c:	f000 f918 	bl	60001760 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001530:	492c      	ldr	r1, [pc, #176]	; (600015e4 <usb_init+0xc8>)
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001532:	482d      	ldr	r0, [pc, #180]	; (600015e8 <usb_init+0xcc>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001534:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001538:	4c2c      	ldr	r4, [pc, #176]	; (600015ec <usb_init+0xd0>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000153a:	f042 0203 	orr.w	r2, r2, #3
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
6000153e:	4b2c      	ldr	r3, [pc, #176]	; (600015f0 <usb_init+0xd4>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001540:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001544:	f8c0 5160 	str.w	r5, [r0, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001548:	6822      	ldr	r2, [r4, #0]
6000154a:	4013      	ands	r3, r2
6000154c:	b91b      	cbnz	r3, 60001556 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
6000154e:	f8d0 31a8 	ldr.w	r3, [r0, #424]	; 0x1a8
60001552:	079a      	lsls	r2, r3, #30
60001554:	d01a      	beq.n	6000158c <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001556:	4b24      	ldr	r3, [pc, #144]	; (600015e8 <usb_init+0xcc>)
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001558:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
6000155c:	4a23      	ldr	r2, [pc, #140]	; (600015ec <usb_init+0xd0>)
6000155e:	6351      	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001560:	461a      	mov	r2, r3
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001562:	f8d3 1140 	ldr.w	r1, [r3, #320]	; 0x140
60001566:	f041 0102 	orr.w	r1, r1, #2
6000156a:	f8c3 1140 	str.w	r1, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
6000156e:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001572:	079b      	lsls	r3, r3, #30
60001574:	d4fb      	bmi.n	6000156e <usb_init+0x52>
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001576:	f44f 3000 	mov.w	r0, #131072	; 0x20000
6000157a:	491e      	ldr	r1, [pc, #120]	; (600015f4 <usb_init+0xd8>)
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
6000157c:	4b1b      	ldr	r3, [pc, #108]	; (600015ec <usb_init+0xd0>)
6000157e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001582:	6008      	str	r0, [r1, #0]
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001584:	2019      	movs	r0, #25
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001586:	639a      	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001588:	f000 f8d6 	bl	60001738 <__delay_veneer>
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000158c:	4d1a      	ldr	r5, [pc, #104]	; (600015f8 <usb_init+0xdc>)
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
6000158e:	2200      	movs	r2, #0
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001590:	4b16      	ldr	r3, [pc, #88]	; (600015ec <usb_init+0xd0>)
60001592:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001596:	4c14      	ldr	r4, [pc, #80]	; (600015e8 <usb_init+0xcc>)
60001598:	260a      	movs	r6, #10
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
6000159a:	6399      	str	r1, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000159c:	4628      	mov	r0, r5
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
6000159e:	601a      	str	r2, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600015a0:	4611      	mov	r1, r2
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600015a2:	f8c4 61a8 	str.w	r6, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600015a6:	f44f 7220 	mov.w	r2, #640	; 0x280
600015aa:	f000 f8e5 	bl	60001778 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600015ae:	f44f 0681 	mov.w	r6, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
600015b2:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600015b6:	f240 1343 	movw	r3, #323	; 0x143
600015ba:	4a10      	ldr	r2, [pc, #64]	; (600015fc <usb_init+0xe0>)
600015bc:	4910      	ldr	r1, [pc, #64]	; (60001600 <usb_init+0xe4>)
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600015be:	602e      	str	r6, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
600015c0:	6428      	str	r0, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
600015c2:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
600015c6:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600015ca:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
600015ce:	4a0d      	ldr	r2, [pc, #52]	; (60001604 <usb_init+0xe8>)
600015d0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
600015d4:	2301      	movs	r3, #1
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
600015d6:	6011      	str	r1, [r2, #0]
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
600015d8:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
600015dc:	bd70      	pop	{r4, r5, r6, pc}
600015de:	bf00      	nop
600015e0:	400d8000 	.word	0x400d8000
600015e4:	400fc000 	.word	0x400fc000
600015e8:	402e0000 	.word	0x402e0000
600015ec:	400d9000 	.word	0x400d9000
600015f0:	001e1c00 	.word	0x001e1c00
600015f4:	e000e28c 	.word	0xe000e28c
600015f8:	20003000 	.word	0x20003000
600015fc:	20001400 	.word	0x20001400
60001600:	000012a5 	.word	0x000012a5
60001604:	e000e10c 	.word	0xe000e10c

60001608 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001608:	4b11      	ldr	r3, [pc, #68]	; (60001650 <analog_init+0x48>)
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
6000160a:	4912      	ldr	r1, [pc, #72]	; (60001654 <analog_init+0x4c>)
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000160c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
6000160e:	460a      	mov	r2, r1
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001610:	f440 3040 	orr.w	r0, r0, #196608	; 0x30000
}

#define MAX_ADC_CLOCK 20000000

FLASHMEM void analog_init(void)
{
60001614:	b430      	push	{r4, r5}
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001616:	66d8      	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001618:	f240 6537 	movw	r5, #1591	; 0x637
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
6000161c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
6000161e:	24a0      	movs	r4, #160	; 0xa0
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001620:	f440 7040 	orr.w	r0, r0, #768	; 0x300
60001624:	66d8      	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001626:	644d      	str	r5, [r1, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001628:	648c      	str	r4, [r1, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
6000162a:	6c93      	ldr	r3, [r2, #72]	; 0x48
6000162c:	061b      	lsls	r3, r3, #24
6000162e:	d4fc      	bmi.n	6000162a <analog_init+0x22>
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001630:	4b09      	ldr	r3, [pc, #36]	; (60001658 <analog_init+0x50>)
60001632:	f240 6037 	movw	r0, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001636:	21a0      	movs	r1, #160	; 0xa0
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
60001638:	461a      	mov	r2, r3
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
6000163a:	6458      	str	r0, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
6000163c:	6499      	str	r1, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
6000163e:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001640:	f013 0380 	ands.w	r3, r3, #128	; 0x80
60001644:	d1fb      	bne.n	6000163e <analog_init+0x36>
	calibrating = 0;
60001646:	4a05      	ldr	r2, [pc, #20]	; (6000165c <analog_init+0x54>)
60001648:	7013      	strb	r3, [r2, #0]
}
6000164a:	bc30      	pop	{r4, r5}
6000164c:	4770      	bx	lr
6000164e:	bf00      	nop
60001650:	400fc000 	.word	0x400fc000
60001654:	400c4000 	.word	0x400c4000
60001658:	400c8000 	.word	0x400c8000
6000165c:	20001292 	.word	0x20001292

60001660 <usb_string_product_name_default>:
60001660:	00550316 00420053 00530020 00720065     ..U.S.B. .S.e.r.
60001670:	00610069 0000006c                       i.a.l...

60001678 <usb_string_manufacturer_name_default>:
60001678:	00540318 00650065 0073006e 00640079     ..T.e.e.n.s.y.d.
60001688:	00690075 006f006e                       u.i.n.o.

60001690 <string0>:
60001690:	04090304                                ....

60001694 <usb_config_descriptor_12>:
60001694:	00430209 c0000102 00040932 02020100     ..C.....2.......
600016a4:	24050001 05011000 01010124 06022404     ...$....$....$..
600016b4:	00062405 82050701 10001003 00010409     .$..............
600016c4:	00000a02 03050700 00004002 02840507     .........@......
600016d4:	00000040                                @...

600016d8 <usb_config_descriptor_480>:
600016d8:	00430209 c0000102 00040932 02020100     ..C.....2.......
600016e8:	24050001 05011000 01010124 06022404     ...$....$....$..
600016f8:	00062405 82050701 05001003 00010409     .$..............
60001708:	00000a02 03050700 00020002 02840507     ................
60001718:	00000200                                ....

6000171c <qualifier_descriptor>:
6000171c:	0200060a 40000002 ff010001                       .......@..

60001726 <_serialEvent_default>:
60001726:	b5f8ff01                                         ..

60001728 <_init>:
60001728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
6000172a:	bf00      	nop
6000172c:	bcf8      	pop	{r3, r4, r5, r6, r7}
6000172e:	bc08      	pop	{r3}
60001730:	469e      	mov	lr, r3
60001732:	4770      	bx	lr
60001734:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

60001738 <__delay_veneer>:
60001738:	f85f f000 	ldr.w	pc, [pc]	; 6000173c <__delay_veneer+0x4>
6000173c:	00000cd9 	.word	0x00000cd9

60001740 <__startup_late_hook_veneer>:
60001740:	f85f f000 	ldr.w	pc, [pc]	; 60001744 <__startup_late_hook_veneer+0x4>
60001744:	00001079 	.word	0x00001079

60001748 <____libc_init_array_veneer>:
60001748:	f85f f000 	ldr.w	pc, [pc]	; 6000174c <____libc_init_array_veneer+0x4>
6000174c:	000025e9 	.word	0x000025e9

60001750 <__startup_early_hook_veneer>:
60001750:	f85f f000 	ldr.w	pc, [pc]	; 60001754 <__startup_early_hook_veneer+0x4>
60001754:	00001075 	.word	0x00001075

60001758 <__set_arm_clock_veneer>:
60001758:	f85f f000 	ldr.w	pc, [pc]	; 6000175c <__set_arm_clock_veneer+0x4>
6000175c:	00000a15 	.word	0x00000a15

60001760 <__usb_init_serialnumber_veneer>:
60001760:	f85f f000 	ldr.w	pc, [pc]	; 60001764 <__usb_init_serialnumber_veneer+0x4>
60001764:	00001a5d 	.word	0x00001a5d

60001768 <__main_veneer>:
60001768:	f85f f000 	ldr.w	pc, [pc]	; 6000176c <__main_veneer+0x4>
6000176c:	0000225d 	.word	0x0000225d

60001770 <__pwm_init_veneer>:
60001770:	f85f f000 	ldr.w	pc, [pc]	; 60001774 <__pwm_init_veneer+0x4>
60001774:	00000da5 	.word	0x00000da5

60001778 <__memset_veneer>:
60001778:	f85f f000 	ldr.w	pc, [pc]	; 6000177c <__memset_veneer+0x4>
6000177c:	00002c9d 	.word	0x00002c9d

60001780 <__init_array_start>:
60001780:	00000045 	.word	0x00000045
60001784:	000001bd 	.word	0x000001bd
60001788:	00000a01 	.word	0x00000a01

6000178c <__init_array_end>:
6000178c:	ffffffff 	.word	0xffffffff

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <__do_global_dtors_aux>:
    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);

    return tmeas;
      20:	4c05b510 	.word	0x4c05b510
      24:	7823      	ldrb	r3, [r4, #0]
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);
      26:	b933      	cbnz	r3, 36 <_teensy_model_identifier+0x12>

    return tmeas;
      28:	4b04      	ldr	r3, [pc, #16]	; (3c <_teensy_model_identifier+0x18>)
      2a:	b113      	cbz	r3, 32 <_teensy_model_identifier+0xe>
      2c:	4804      	ldr	r0, [pc, #16]	; (40 <_teensy_model_identifier+0x1c>)
      2e:	f3af      	.short	0xf3af
      30:	8000      	strh	r0, [r0, #0]
      32:	2301      	.short	0x2301
      34:	7023      	strb	r3, [r4, #0]
      36:	bd10      	.short	0xbd10
      38:	0df0      	lsrs	r0, r6, #23
      3a:	2000      	.short	0x2000
      3c:	0000      	movs	r0, r0
      3e:	0000      	.short	0x0000
}
      40:	6464      	str	r4, [r4, #68]	; 0x44
	...

00000044 <frame_dummy>:
      44:	b5104b08 	.word	0xb5104b08
      48:	b11b      	cbz	r3, 52 <frame_dummy+0xe>
      4a:	4908      	.short	0x4908
      4c:	4808      	ldr	r0, [pc, #32]	; (70 <frame_dummy+0x2c>)
      4e:	f3af      	.short	0xf3af
      50:	8000      	strh	r0, [r0, #0]
      52:	4808      	.short	0x4808
      54:	6803      	ldr	r3, [r0, #0]
      56:	b903      	.short	0xb903
      58:	bd10      	pop	{r4, pc}
      5a:	4b07      	.short	0x4b07
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      5c:	2b00      	cmp	r3, #0
      5e:	d0fb      	beq.n	58 <frame_dummy+0x14>
      60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      64:	4718      	bx	r3
      66:	bf00      	nop
      mode |= ADC_CFG_AVGS(2);
      mode1 |= ADC_CFG_AVGS(2);

    } else if (num >= 8) {
      mode |= ADC_CFG_AVGS(1);
      mode1 |= ADC_CFG_AVGS(1);
      68:	0000      	movs	r0, r0
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      6a:	0000      	movs	r0, r0
  ADC2_CFG = mode1;
  
  if(num >= 4){
      6c:	0df4      	lsrs	r4, r6, #23
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
  ADC2_CFG = mode1;
      6e:	2000      	.short	0x2000
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      70:	6464      	str	r4, [r4, #68]	; 0x44
  ADC2_CFG = mode1;
      72:	0000      	movs	r0, r0
  
  if(num >= 4){
      74:	0df0      	lsrs	r0, r6, #23
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
  }
}
      76:	2000      	movs	r0, #0
      78:	0000      	movs	r0, r0
	...

0000007c <readAdc()>:
	*   \return the last converted value.
	*   If single-ended and 16 bits it's necessary to typecast it to an unsigned type (like uint16_t),
	*   otherwise values larger than 3.3/2 V are interpreted as negative!
	*/
	int analogReadContinuous() __attribute__((always_inline)) {
		return (int16_t)(int32_t)adc_regs.R0;
      7c:	4b08      	ldr	r3, [pc, #32]	; (a0 <readAdc()+0x24>)
/*
* ADC interrupt callback function. Executes when an ADC conversion has completed.
* Read the ADC sample and store it in an array.
*/
void readAdc(void) {
	samples[sampleCounter] = ADC0.analogReadContinuous();
      7e:	4909      	ldr	r1, [pc, #36]	; (a4 <readAdc()+0x28>)
      80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      82:	680a      	ldr	r2, [r1, #0]
      84:	48086a5b 	.word	0x48086a5b
      88:	b21b      	sxth	r3, r3

/*
* ADC interrupt callback function. Executes when an ADC conversion has completed.
* Read the ADC sample and store it in an array.
*/
void readAdc(void) {
      8a:	b410      	.short	0xb410
	samples[sampleCounter] = ADC0.analogReadContinuous();
	sampleCounter++;
      8c:	1c54      	adds	r4, r2, #1
/*
* ADC interrupt callback function. Executes when an ADC conversion has completed.
* Read the ADC sample and store it in an array.
*/
void readAdc(void) {
	samples[sampleCounter] = ADC0.analogReadContinuous();
      8e:	f840      	.short	0xf840
      90:	3022      	adds	r0, #34	; 0x22
	sampleCounter++;
      92:	600c      	.short	0x600c
	asm("DSB");
      94:	f3bf 8f4f 	dsb	sy
}
      98:	f85d 4b04 	ldr.w	r4, [sp], #4
      9c:	bf004770 	.word	0xbf004770
      a0:	0e0c      	lsrs	r4, r1, #24
      a2:	2000      	movs	r0, #0
      a4:	1004      	asrs	r4, r0, #32
      a6:	2000      	.short	0x2000
      a8:	0e74      	lsrs	r4, r6, #25
      aa:	2000      	movs	r0, #0

000000ac <setup>:
My_ADC ADC0(0);
int samples[NSamples];
int sampleCounter = 0;

// the setup function runs once when you press reset or power the board
void setup() {
      ac:	f640b508 	.word	0xf640b508
      b0:	31b8      	adds	r1, #184	; 0xb8
      b2:	482a      	ldr	r0, [pc, #168]	; (15c <setup+0xb0>)
      b4:	f000 fbe8 	bl	888 <VisualMicroDebug::init(unsigned long)>
      b8:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
      bc:	4827      	ldr	r0, [pc, #156]	; (15c <setup+0xb0>)
      be:	f000 fbdf 	bl	880 <VisualMicroDebug::begin(unsigned long)>
      c2:	2101      	.short	0x2101
      c4:	4825      	ldr	r0, [pc, #148]	; (15c <setup+0xb0>)
      c6:	f000      	.short	0xf000
      c8:	fbbd 2800 			; <UNDEFINED> instruction: 0xfbbd2800
      cc:	2100d139 	.word	0x2100d139
      d0:	4822      	ldr	r0, [pc, #136]	; (15c <setup+0xb0>)
      d2:	2201      	.short	0x2201
      d4:	f000 fc76 	bl	9c4 <VisualMicroDebug::start(bool, bool)>
      d8:	2101      	movs	r1, #1
      da:	4820      	ldr	r0, [pc, #128]	; (15c <setup+0xb0>)
      dc:	f000 fbb2 	bl	844 <VisualMicroDebug::outPacketStart(bool)>
      e0:	2106b130 	.word	0x2106b130
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
      e4:	481e      	ldr	r0, [pc, #120]	; (160 <setup+0xb4>)
      e6:	f002 f803 	bl	20f0 <usb_serial_write>
      ea:	481c      	ldr	r0, [pc, #112]	; (15c <setup+0xb0>)
      ec:	f000 fbc6 	bl	87c <VisualMicroDebug::outPacketEnd()>
	ADC0.setReference(ADC_REFERENCE::REF_3V3);
      f0:	2100      	movs	r1, #0
      f2:	481c      	ldr	r0, [pc, #112]	; (164 <setup+0xb8>)
      f4:	f000 f8e2 	bl	2bc <My_ADC::setReference(ADC_settings::ADC_REFERENCE)>
	ADC0.setResolution(10); // resolution of 10 bits
      f8:	210a      	movs	r1, #10
      fa:	481a      	ldr	r0, [pc, #104]	; (164 <setup+0xb8>)
      fc:	f000 f902 	bl	304 <My_ADC::setResolution(unsigned char)>
	ADC0.setConversionSpeed(ADC_CONVERSION_SPEED::ADACK_20); // ADC asynchronous clock 20 MHz
     100:	2104      	movs	r1, #4
     102:	4818      	ldr	r0, [pc, #96]	; (164 <setup+0xb8>)
     104:	f942f000 	.word	0xf942f000
	ADC0.setSamplingSpeed(ADC_SAMPLING_SPEED::MED_SPEED); // 5 ADCK cycles
     108:	2103      	movs	r1, #3
     10a:	4816      	ldr	r0, [pc, #88]	; (164 <setup+0xb8>)
     10c:	fa62f000 	.word	0xfa62f000
	ADC0.setAveraging(32); // take the average of 4 readings
     110:	2120      	movs	r1, #32
     112:	4814      	ldr	r0, [pc, #80]	; (164 <setup+0xb8>)
     114:	faccf000 	.word	0xfaccf000
	ADC0.recalibrate();
     118:	4812      	ldr	r0, [pc, #72]	; (164 <setup+0xb8>)
     11a:	f000      	.short	0xf000
     11c:	f8bb 2240 	ldrh.w	r2, [fp, #576]	; 0x240

	// set offset	
	ADC0.enableInterrupts(readAdc, ADC_IR_Priority);
     120:	48104911 	.word	0x48104911
     124:	f000 fb1a 	bl	75c <My_ADC::enableInterrupts(void (*)(), unsigned char)>
	ADC0.startContinuous(A1);
     128:	480e210f 	.word	0x480e210f
     12c:	f000 fb42 	bl	7b4 <My_ADC::startContinuous(unsigned char)>
     130:	480e2105 	.word	0x480e2105
     134:	f001 ffdc 	bl	20f0 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     138:	480d      	ldr	r0, [pc, #52]	; (170 <setup+0xc4>)
	//if (!ADC0.startContinuous(A1)) { // start continuous conversion
	//	// error, can't start continuous conversion.
	//	Serial.println("error");
	//}
	Serial.println("hello");
}
     13a:	e8bd      	.short	0xe8bd
     13c:	4008      	ands	r0, r1
     13e:	f002      	.short	0xf002
     140:	b895      			; <UNDEFINED> instruction: 0xb895
     142:	2110      	.short	0x2110
     144:	480b      	ldr	r0, [pc, #44]	; (174 <setup+0xc8>)
     146:	f001      	.short	0xf001
     148:	ffd3 210a 	vaddw.u16	q9, <illegal reg q1.5>, d10
My_ADC ADC0(0);
int samples[NSamples];
int sampleCounter = 0;

// the setup function runs once when you press reset or power the board
void setup() {
     14c:	f0004803 	.word	0xf0004803
     150:	fb6d 4802 	smmls	r8, sp, r2, r4
     154:	f000 fb92 	bl	87c <VisualMicroDebug::outPacketEnd()>
     158:	bf00e7b9 	.word	0xbf00e7b9
     15c:	1008      	asrs	r0, r1, #32
     15e:	2000      	.short	0x2000
     160:	0014      	movs	r4, r2
     162:	2000      	.short	0x2000
     164:	0e0c      	lsrs	r4, r1, #24
     166:	2000      	.short	0x2000
     168:	007d      	lsls	r5, r7, #1
     16a:	0000      	.short	0x0000
     16c:	001c      	movs	r4, r3
     16e:	2000      	movs	r0, #0
     170:	20000430 	.word	0x20000430
     174:	0000      	movs	r0, r0
     176:	2000      	.short	0x2000

00000178 <loop>:
	//}
	Serial.println("hello");
}

// the loop function runs over and over again until power down or reset
void loop() {
     178:	b570      	push	{r4, r5, r6, lr}
	if (sampleCounter == NSamples-1) {
     17a:	4e0b      	ldr	r6, [pc, #44]	; (1a8 <loop+0x30>)
     17c:	2b636833 	.word	0x2b636833
     180:	d000      	beq.n	184 <loop+0xc>
     182:	bd70      	.short	0xbd70
		ADC0.stopContinuous();
     184:	4809      	ldr	r0, [pc, #36]	; (1ac <loop+0x34>)
     186:	f000      	.short	0xf000
     188:	fb45 2300 	smlsd	r3, r5, r0, r2
		sampleCounter = 0;
     18c:	461c4d08 	.word	0x461c4d08
     190:	6033      	str	r3, [r6, #0]

		for (int i = 0; i < NSamples; i++) {
			Serial.printf("Sample %d = %d\n", i, samples[i]);
     192:	4622      	.short	0x4622
void loop() {
	if (sampleCounter == NSamples-1) {
		ADC0.stopContinuous();
		sampleCounter = 0;

		for (int i = 0; i < NSamples; i++) {
     194:	3401      	adds	r4, #1
			Serial.printf("Sample %d = %d\n", i, samples[i]);
     196:	f855      	.short	0xf855
     198:	3f04      	subs	r7, #4
     19a:	4906      	ldr	r1, [pc, #24]	; (1b4 <loop+0x3c>)
     19c:	f0024806 	.word	0xf0024806
     1a0:	f87d 2c64 	ldr??.w	r2, [sp, #-100]
void loop() {
	if (sampleCounter == NSamples-1) {
		ADC0.stopContinuous();
		sampleCounter = 0;

		for (int i = 0; i < NSamples; i++) {
     1a4:	bd70d1f5 	.word	0xbd70d1f5
     1a8:	1004      	asrs	r4, r0, #32
     1aa:	2000      	.short	0x2000
     1ac:	0e0c      	lsrs	r4, r1, #24
     1ae:	2000      	.short	0x2000
     1b0:	0e70      	lsrs	r0, r6, #25
     1b2:	2000      	movs	r0, #0
     1b4:	0024      	movs	r4, r4
     1b6:	2000      	movs	r0, #0
     1b8:	20000430 	.word	0x20000430

000001bc <_GLOBAL__sub_I_ADC0>:
#define ADC_IR_Priority 64
#define NSamples 100 // 8192

void readAdc(void);

My_ADC ADC0(0);
     1bc:	2100      	movs	r1, #0
     1be:	4801      	.short	0x4801
     1c0:	f000 b802 	b.w	1c8 <My_ADC::My_ADC(unsigned char)>
     1c4:	20000e0c 	.word	0x20000e0c

000001c8 <My_ADC::My_ADC(unsigned char)>:

	// setup adc_etc - BUGBUG have not used the preset values yet.
	if (IMXRT_ADC_ETC.CTRL & ADC_ETC_CTRL_SOFTRST) { // SOFTRST
		// Soft reset
		atomic::clearBitFlag(IMXRT_ADC_ETC.CTRL, ADC_ETC_CTRL_SOFTRST);
		delay(5); // give some time to be sure it is init
     1c8:	b5f0      	push	{r4, r5, r6, r7, lr}
     1ca:	4604      	.short	0x4604
     1cc:	7501      	strb	r1, [r0, #20]
     1ce:	2900      	.short	0x2900
     1d0:	d03d      	beq.n	24e <My_ADC::My_ADC(unsigned char)+0x86>
     1d2:	2600      	movs	r6, #0
     1d4:	f1002344 	.word	0xf1002344
#ifdef ADC_USE_PDB
	,
	PDB0_CHnC1(ADC_num ? PDB0_CH1C1 : PDB0_CH0C1)
#endif
	,
	XBAR_IN(ADC_num ? XBARA1_IN_QTIMER4_TIMER3 : XBARA1_IN_QTIMER4_TIMER0), XBAR_OUT(ADC_num ? XBARA1_OUT_ADC_ETC_TRIG10 : XBARA1_OUT_ADC_ETC_TRIG00), QTIMER4_INDEX(ADC_num ? 3 : 0), ADC_ETC_TRIGGER_INDEX(ADC_num ? 4 : 0), IRQ_ADC(ADC_num ? IRQ_NUMBER_t::IRQ_ADC2 : IRQ_NUMBER_t::IRQ_ADC1) {
     1d8:	054c      	lsls	r4, r1, #21
     1da:	2727      	.short	0x2727
     1dc:	206b      	movs	r0, #107	; 0x6b
     1de:	2103      	.short	0x2103
     1e0:	2204      	movs	r2, #4
     1e2:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
     1e6:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
     1ea:	f104      	.short	0xf104
     1ec:	0630      	lsls	r0, r6, #24
     1ee:	4b23      	.short	0x4b23
     1f0:	6225      	str	r5, [r4, #32]
     1f2:	f884 7025 	strb.w	r7, [r4, #37]	; 0x25
     1f6:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
     1fa:	f884      	.short	0xf884
     1fc:	1027      	asrs	r7, r4, #32
     1fe:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
     202:	f8df e080 	ldr.w	lr, [pc, #128]	; 284 <My_ADC::My_ADC(unsigned char)+0xbc>

/* Initialize stuff: Set initial ADC settings via corresponding functions.
* 
*/
void My_ADC::analog_init() {
	calibrating = 0;
     206:	f04f      	.short	0xf04f
     208:	0c00      	lsrs	r0, r0, #16
#ifdef ADC_USE_PDB
	,
	PDB0_CHnC1(ADC_num ? PDB0_CH1C1 : PDB0_CH0C1)
#endif
	,
	XBAR_IN(ADC_num ? XBARA1_IN_QTIMER4_TIMER3 : XBARA1_IN_QTIMER4_TIMER0), XBAR_OUT(ADC_num ? XBARA1_OUT_ADC_ETC_TRIG10 : XBARA1_OUT_ADC_ETC_TRIG00), QTIMER4_INDEX(ADC_num ? 3 : 0), ADC_ETC_TRIGGER_INDEX(ADC_num ? 4 : 0), IRQ_ADC(ADC_num ? IRQ_NUMBER_t::IRQ_ADC2 : IRQ_NUMBER_t::IRQ_ADC1) {
     20a:	62e3      	.short	0x62e3
     20c:	f8de 0000 	ldr.w	r0, [lr]
     210:	f8de4677 	.word	0xf8de4677
     214:	1004      	asrs	r4, r0, #32
     216:	f8de 2008 	ldr.w	r2, [lr, #8]
     21a:	f8de 300c 	ldr.w	r3, [lr, #12]
     21e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
     220:	f8de 0010 	ldr.w	r0, [lr, #16]
     224:	1014f8de 	.word	0x1014f8de
     228:	f8de 2018 	ldr.w	r2, [lr, #24]
     22c:	c607      	stmia	r6!, {r0, r1, r2}
     22e:	f857 0f1c 	ldr.w	r0, [r7, #28]!
     232:	6879      	ldr	r1, [r7, #4]
     234:	68ba      	ldr	r2, [r7, #8]
     236:	68fb      	ldr	r3, [r7, #12]
     238:	c50f      	stmia	r5!, {r0, r1, r2, r3}
     23a:	6938      	ldr	r0, [r7, #16]
     23c:	6979      	ldr	r1, [r7, #20]
     23e:	69ba      	ldr	r2, [r7, #24]
     240:	c507      	stmia	r5!, {r0, r1, r2}

/* Initialize stuff: Set initial ADC settings via corresponding functions.
* 
*/
void My_ADC::analog_init() {
	calibrating = 0;
     242:	f884 c015 	strb.w	ip, [r4, #21]
#endif
	,
	XBAR_IN(ADC_num ? XBARA1_IN_QTIMER4_TIMER3 : XBARA1_IN_QTIMER4_TIMER0), XBAR_OUT(ADC_num ? XBARA1_OUT_ADC_ETC_TRIG10 : XBARA1_OUT_ADC_ETC_TRIG00), QTIMER4_INDEX(ADC_num ? 3 : 0), ADC_ETC_TRIGGER_INDEX(ADC_num ? 4 : 0), IRQ_ADC(ADC_num ? IRQ_NUMBER_t::IRQ_ADC2 : IRQ_NUMBER_t::IRQ_ADC1) {
	// call our init
	analog_init();
}
     246:	4620      	mov	r0, r4
/* Initialize stuff: Set initial ADC settings via corresponding functions.
* 
*/
void My_ADC::analog_init() {
	calibrating = 0;
	fail_flag = ADC_ERROR::CLEAR; // clear all errors
     248:	f8a4 c012 	strh.w	ip, [r4, #18]
#endif
	,
	XBAR_IN(ADC_num ? XBARA1_IN_QTIMER4_TIMER3 : XBARA1_IN_QTIMER4_TIMER0), XBAR_OUT(ADC_num ? XBARA1_OUT_ADC_ETC_TRIG10 : XBARA1_OUT_ADC_ETC_TRIG00), QTIMER4_INDEX(ADC_num ? 3 : 0), ADC_ETC_TRIGGER_INDEX(ADC_num ? 4 : 0), IRQ_ADC(ADC_num ? IRQ_NUMBER_t::IRQ_ADC2 : IRQ_NUMBER_t::IRQ_ADC1) {
	// call our init
	analog_init();
}
     24c:	bdf0      	pop	{r4, r5, r6, r7, pc}
#ifdef ADC_USE_PDB
	,
	PDB0_CHnC1(ADC_num ? PDB0_CH1C1 : PDB0_CH0C1)
#endif
	,
	XBAR_IN(ADC_num ? XBARA1_IN_QTIMER4_TIMER3 : XBARA1_IN_QTIMER4_TIMER0), XBAR_OUT(ADC_num ? XBARA1_OUT_ADC_ETC_TRIG10 : XBARA1_OUT_ADC_ETC_TRIG00), QTIMER4_INDEX(ADC_num ? 3 : 0), ADC_ETC_TRIGGER_INDEX(ADC_num ? 4 : 0), IRQ_ADC(ADC_num ? IRQ_NUMBER_t::IRQ_ADC2 : IRQ_NUMBER_t::IRQ_ADC1) {
     24e:	f100 0630 	add.w	r6, r0, #48	; 0x30
     252:	2724      	movs	r7, #36	; 0x24
     254:	2067      	movs	r0, #103	; 0x67
     256:	2243      	movs	r2, #67	; 0x43
     258:	4b09      	ldr	r3, [pc, #36]	; (280 <My_ADC::My_ADC(unsigned char)+0xb8>)
     25a:	f104 054c 	add.w	r5, r4, #76	; 0x4c
     25e:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
     262:	f884 1027 	strb.w	r1, [r4, #39]	; 0x27
     266:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
     26a:	6226      	str	r6, [r4, #32]
     26c:	f884 7025 	strb.w	r7, [r4, #37]	; 0x25
     270:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
     274:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
     278:	e7c3      	b.n	202 <My_ADC::My_ADC(unsigned char)+0x3a>
     27a:	bf00      	nop
     27c:	400c8000 	.word	0x400c8000
     280:	400c4000 	.word	0x400c4000
     284:	20000034 	.word	0x20000034

00000288 <My_ADC::wait_for_cal()>:
*
*/
void My_ADC::wait_for_cal(void) {

	// wait for calibration to finish
	while (atomic::getBitFlag(adc_regs.GC, ADC_GC_CAL)) { // Bit ADC_GC_CAL in register GC cleared when calib. finishes.
     288:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
     28a:	2200      	movs	r2, #0
    }

    template <typename T>
    __attribute__((always_inline)) inline volatile bool getBitFlag(volatile T &reg, T flag)
    {
        return (volatile bool)((reg)&flag) >> (31 - __builtin_clzl(flag));
     28c:	6c99      	ldr	r1, [r3, #72]	; 0x48
     28e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	}
	if (atomic::getBitFlag(adc_regs.GS, ADC_GS_CALF)) { // calibration failed
		fail_flag |= ADC_ERROR::CALIB; // the user should know and recalibrate manually
	}

	calibrating = 0;
     290:	7542      	strb	r2, [r0, #21]
     292:	4770      	bx	lr

00000294 <My_ADC::recalibrate()>:
}

// starts calibration
void My_ADC::calibrate() {

	__disable_irq();
     294:	b672      	cpsid	i

	calibrating = 1;
     296:	2201      	movs	r2, #1
	atomic::clearBitFlag(adc_regs.GS, ADC_GS_CALF);
     298:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
// starts calibration
void My_ADC::calibrate() {

	__disable_irq();

	calibrating = 1;
     29a:	7542      	strb	r2, [r0, #21]
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
     29c:	b672      	cpsid	i
        reg &= ~flag;
     29e:	6cca      	ldr	r2, [r1, #76]	; 0x4c
     2a0:	f022 0202 	bic.w	r2, r2, #2
     2a4:	64ca      	str	r2, [r1, #76]	; 0x4c
        __enable_irq();
     2a6:	b662      	cpsie	i
	atomic::clearBitFlag(adc_regs.GS, ADC_GS_CALF);
	atomic::setBitFlag(adc_regs.GC, ADC_GC_CAL);
     2a8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c

#elif defined(__IMXRT1062__) // Teensy 4
    template <typename T>
    __attribute__((always_inline)) inline void setBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
     2aa:	b672      	cpsid	i
        reg |= flag;
     2ac:	6c93      	ldr	r3, [r2, #72]	; 0x48
     2ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     2b2:	6493      	str	r3, [r2, #72]	; 0x48
        __enable_irq();
     2b4:	b662      	cpsie	i

	__enable_irq();
     2b6:	b662      	cpsie	i
/** Usually it's not necessary to call this function directly, but do it if the "environment" changed
*   significantly since the program was started.
*/
void My_ADC::recalibrate() {
	calibrate();
	wait_for_cal();
     2b8:	f7ff bfe6 	b.w	288 <My_ADC::wait_for_cal()>

000002bc <My_ADC::setReference(ADC_settings::ADC_REFERENCE)>:
*  Use ADC_REF_3V3, ADC_REF_1V2 (not for Teensy LC) or ADC_REF_EXT
*/
void My_ADC::setReference(ADC_REFERENCE type) {
	ADC_REF_SOURCE ref_type = static_cast<ADC_REF_SOURCE>(type); // cast to source type, that is, either internal or default

	if (analog_reference_internal == ref_type) { // don't need to change anything
     2bc:	7f43      	ldrb	r3, [r0, #29]
     2be:	428b      	cmp	r3, r1
     2c0:	d014      	beq.n	2ec <My_ADC::setReference(ADC_settings::ADC_REFERENCE)+0x30>
		return;
	}

	if (ref_type == ADC_REF_SOURCE::REF_ALT) { // 1.2V ref for Teensy 3.x, 3.3 VDD for Teensy LC
     2c2:	2901      	cmp	r1, #1
     2c4:	d01c      	beq.n	300 <My_ADC::setReference(ADC_settings::ADC_REFERENCE)+0x44>
		VREF::start(); // enable VREF if Teensy 3.x
#endif

		analog_reference_internal = ADC_REF_SOURCE::REF_ALT;
	}
	else if (ref_type == ADC_REF_SOURCE::REF_DEFAULT) {   // ext ref for all Teensys, vcc also for Teensy 3.x
     2c6:	b191      	cbz	r1, 2ee <My_ADC::setReference(ADC_settings::ADC_REFERENCE)+0x32>
}

// starts calibration
void My_ADC::calibrate() {

	__disable_irq();
     2c8:	b672      	cpsid	i

	calibrating = 1;
     2ca:	2301      	movs	r3, #1
	atomic::clearBitFlag(adc_regs.GS, ADC_GS_CALF);
     2cc:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
// starts calibration
void My_ADC::calibrate() {

	__disable_irq();

	calibrating = 1;
     2ce:	7543      	strb	r3, [r0, #21]
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
     2d0:	b672      	cpsid	i
        reg &= ~flag;
     2d2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
     2d4:	f023 0302 	bic.w	r3, r3, #2
     2d8:	64d3      	str	r3, [r2, #76]	; 0x4c
        __enable_irq();
     2da:	b662      	cpsie	i
	atomic::clearBitFlag(adc_regs.GS, ADC_GS_CALF);
	atomic::setBitFlag(adc_regs.GC, ADC_GC_CAL);
     2dc:	6ac2      	ldr	r2, [r0, #44]	; 0x2c

#elif defined(__IMXRT1062__) // Teensy 4
    template <typename T>
    __attribute__((always_inline)) inline void setBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
     2de:	b672      	cpsid	i
        reg |= flag;
     2e0:	6c93      	ldr	r3, [r2, #72]	; 0x48
     2e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     2e6:	6493      	str	r3, [r2, #72]	; 0x48
        __enable_irq();
     2e8:	b662      	cpsie	i

	__enable_irq();
     2ea:	b662      	cpsie	i
     2ec:	4770      	bx	lr

#ifdef ADC_USE_INTERNAL_VREF
		VREF::stop(); // disable 1.2V reference source when using the external ref (p. 102, 3.7.1.7)
#endif

		analog_reference_internal = ADC_REF_SOURCE::REF_DEFAULT;
     2ee:	7741      	strb	r1, [r0, #29]
		atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_REFSEL(3));
     2f0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
     2f2:	b672      	cpsid	i
        reg &= ~flag;
     2f4:	6c53      	ldr	r3, [r2, #68]	; 0x44
     2f6:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
     2fa:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
     2fc:	b662      	cpsie	i
     2fe:	e7e3      	b.n	2c8 <My_ADC::setReference(ADC_settings::ADC_REFERENCE)+0xc>
// internal reference requested
#ifdef ADC_USE_INTERNAL_VREF
		VREF::start(); // enable VREF if Teensy 3.x
#endif

		analog_reference_internal = ADC_REF_SOURCE::REF_ALT;
     300:	7741      	strb	r1, [r0, #29]
     302:	e7e1      	b.n	2c8 <My_ADC::setReference(ADC_settings::ADC_REFERENCE)+0xc>

00000304 <My_ADC::setResolution(unsigned char)>:
*  If you want something in between (11 bits single-ended for example) select the inmediate higher
*  and shift the result one to the right.
*
*  It doesn't recalibrate
*/
void My_ADC::setResolution(uint8_t bits) {
     304:	b538      	push	{r3, r4, r5, lr}

	if (analog_res_bits == bits) {
     306:	7dc3      	ldrb	r3, [r0, #23]
     308:	428b      	cmp	r3, r1
     30a:	d00a      	beq.n	322 <My_ADC::setResolution(unsigned char)+0x1e>
		return;
	}

	if (calibrating)
     30c:	7d43      	ldrb	r3, [r0, #21]
     30e:	4604      	mov	r4, r0
     310:	460d      	mov	r5, r1
     312:	b93b      	cbnz	r3, 324 <My_ADC::setResolution(unsigned char)+0x20>
		wait_for_cal();

	// conversion resolution
	// single-ended 8 bits is the same as differential 9 bits, etc.
	if (bits == 8) {
     314:	2d08      	cmp	r5, #8
     316:	d009      	beq.n	32c <My_ADC::setResolution(unsigned char)+0x28>
		atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_MODE(3));
		analog_max_val = 255; // diff mode 9 bits has 1 bit for sign, so max value is the same as single 8 bits
	}
	else if (bits == 10) {
     318:	2d0a      	cmp	r5, #10
     31a:	d012      	beq.n	342 <My_ADC::setResolution(unsigned char)+0x3e>
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_MODE(3), ADC_CFG_MODE(1));
		analog_max_val = 1023;
	}
	else if (bits == 12) {
     31c:	2d0c      	cmp	r5, #12
     31e:	d022      	beq.n	366 <My_ADC::setResolution(unsigned char)+0x62>
	}
	else {
		// error
	}

	analog_res_bits = bits;
     320:	75e5      	strb	r5, [r4, #23]
     322:	bd38      	pop	{r3, r4, r5, pc}
	if (analog_res_bits == bits) {
		return;
	}

	if (calibrating)
		wait_for_cal();
     324:	f7ff ffb0 	bl	288 <My_ADC::wait_for_cal()>

	// conversion resolution
	// single-ended 8 bits is the same as differential 9 bits, etc.
	if (bits == 8) {
     328:	2d08      	cmp	r5, #8
     32a:	d1f5      	bne.n	318 <My_ADC::setResolution(unsigned char)+0x14>
		atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_MODE(3));
     32c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
     32e:	b672      	cpsid	i
        reg &= ~flag;
     330:	6c53      	ldr	r3, [r2, #68]	; 0x44
     332:	f023 030c 	bic.w	r3, r3, #12
     336:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
     338:	b662      	cpsie	i
		analog_max_val = 255; // diff mode 9 bits has 1 bit for sign, so max value is the same as single 8 bits
     33a:	23ff      	movs	r3, #255	; 0xff
	}
	else {
		// error
	}

	analog_res_bits = bits;
     33c:	75e5      	strb	r5, [r4, #23]

	// conversion resolution
	// single-ended 8 bits is the same as differential 9 bits, etc.
	if (bits == 8) {
		atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_MODE(3));
		analog_max_val = 255; // diff mode 9 bits has 1 bit for sign, so max value is the same as single 8 bits
     33e:	61a3      	str	r3, [r4, #24]
     340:	e7ef      	b.n	322 <My_ADC::setResolution(unsigned char)+0x1e>
	}
	else if (bits == 10) {
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_MODE(3), ADC_CFG_MODE(1));
     342:	6ae3      	ldr	r3, [r4, #44]	; 0x2c

#elif defined(__IMXRT1062__) // Teensy 4
    template <typename T>
    __attribute__((always_inline)) inline void setBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
     344:	b672      	cpsid	i
        reg |= flag;
     346:	6c5a      	ldr	r2, [r3, #68]	; 0x44
     348:	f042 0204 	orr.w	r2, r2, #4
     34c:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
     34e:	b662      	cpsie	i
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
     350:	b672      	cpsid	i
        reg &= ~flag;
     352:	6c5a      	ldr	r2, [r3, #68]	; 0x44
     354:	f022 0208 	bic.w	r2, r2, #8
     358:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
     35a:	b662      	cpsie	i
		analog_max_val = 1023;
     35c:	f240 33ff 	movw	r3, #1023	; 0x3ff
	}
	else {
		// error
	}

	analog_res_bits = bits;
     360:	75e5      	strb	r5, [r4, #23]
		atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_MODE(3));
		analog_max_val = 255; // diff mode 9 bits has 1 bit for sign, so max value is the same as single 8 bits
	}
	else if (bits == 10) {
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_MODE(3), ADC_CFG_MODE(1));
		analog_max_val = 1023;
     362:	61a3      	str	r3, [r4, #24]
     364:	e7dd      	b.n	322 <My_ADC::setResolution(unsigned char)+0x1e>
	}
	else if (bits == 12) {
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_MODE(3), ADC_CFG_MODE(2));
     366:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
     368:	b672      	cpsid	i
        reg &= ~flag;
     36a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
     36c:	f022 0204 	bic.w	r2, r2, #4
     370:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
     372:	b662      	cpsie	i

#elif defined(__IMXRT1062__) // Teensy 4
    template <typename T>
    __attribute__((always_inline)) inline void setBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
     374:	b672      	cpsid	i
        reg |= flag;
     376:	6c5a      	ldr	r2, [r3, #68]	; 0x44
     378:	f042 0208 	orr.w	r2, r2, #8
     37c:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
     37e:	b662      	cpsie	i
		analog_max_val = 4095;
     380:	f640 73ff 	movw	r3, #4095	; 0xfff
	}
	else {
		// error
	}

	analog_res_bits = bits;
     384:	75e5      	strb	r5, [r4, #23]
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_MODE(3), ADC_CFG_MODE(1));
		analog_max_val = 1023;
	}
	else if (bits == 12) {
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_MODE(3), ADC_CFG_MODE(2));
		analog_max_val = 4095;
     386:	61a3      	str	r3, [r4, #24]
     388:	e7cb      	b.n	322 <My_ADC::setResolution(unsigned char)+0x1e>
     38a:	bf00      	nop

0000038c <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)>:
* HIGH_SPEED adds +6 ADCK.
* VERY_HIGH_SPEED is the highest possible sampling speed (0 ADCK added).
*/
void My_ADC::setConversionSpeed(ADC_CONVERSION_SPEED speed) {

	if (speed == conversion_speed) { // no change
     38c:	7f83      	ldrb	r3, [r0, #30]
     38e:	428b      	cmp	r3, r1
* LOW_SPEED adds +16 ADCK.
* MED_SPEED adds +10 ADCK.
* HIGH_SPEED adds +6 ADCK.
* VERY_HIGH_SPEED is the highest possible sampling speed (0 ADCK added).
*/
void My_ADC::setConversionSpeed(ADC_CONVERSION_SPEED speed) {
     390:	b470      	push	{r4, r5, r6}

	if (speed == conversion_speed) { // no change
     392:	d00d      	beq.n	3b0 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x24>
	//if (calibrating) wait_for_cal();

	bool is_adack = false;
	uint32_t ADC_CFG1_speed = 0; // store the clock and divisor (set to 0 to avoid warnings)

	switch (speed) {
     394:	2904      	cmp	r1, #4
     396:	d806      	bhi.n	3a6 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x1a>
     398:	e8df f011 	tbh	[pc, r1, lsl #1]
     39c:	007a002b 	.word	0x007a002b
     3a0:	00c500a0 	.word	0x00c500a0
     3a4:	000c      	.short	0x000c
        return static_cast<ADC_ERROR>(static_cast<uint16_t>(lhs) & static_cast<uint16_t>(rhs));
    }
    //! |= operator for ADC_ERRORs, it changes the left hand side ADC_ERROR. @internal
    inline ADC_ERROR operator|=(volatile ADC_ERROR &lhs, ADC_ERROR rhs)
    {
        return lhs = static_cast<ADC_ERROR>(static_cast<uint16_t>(lhs) | static_cast<uint16_t>(rhs));
     3a6:	8a43      	ldrh	r3, [r0, #18]
     3a8:	b29b      	uxth	r3, r3
     3aa:	f043 0301 	orr.w	r3, r3, #1
     3ae:	8243      	strh	r3, [r0, #18]
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADICLK(3), ADC_CFG1_speed & ADC_CFG_ADICLK(3)); // bus or bus/2
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADIV(3), ADC_CFG1_speed & ADC_CFG_ADIV(3));     // divisor for the clock source
	}

	conversion_speed = speed;
}
     3b0:	bc70      	pop	{r4, r5, r6}
     3b2:	4770      	bx	lr
	case ADC_CONVERSION_SPEED::ADACK_10:
		atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADHSC);
		is_adack = true;
		break;
	case ADC_CONVERSION_SPEED::ADACK_20:
		atomic::setBitFlag(adc_regs.CFG, ADC_CFG_ADHSC);
     3b4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c

#elif defined(__IMXRT1062__) // Teensy 4
    template <typename T>
    __attribute__((always_inline)) inline void setBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
     3b6:	b672      	cpsid	i
        reg |= flag;
     3b8:	6c53      	ldr	r3, [r2, #68]	; 0x44
     3ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     3be:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
     3c0:	b662      	cpsie	i
		return;
	}

	if (is_adack) {
		// async clock source, independent of the bus clock
		atomic::setBitFlag(adc_regs.CFG, ADC_CFG_ADICLK(3)); // select ADACK as clock source
     3c2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c

#elif defined(__IMXRT1062__) // Teensy 4
    template <typename T>
    __attribute__((always_inline)) inline void setBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
     3c4:	b672      	cpsid	i
        reg |= flag;
     3c6:	6c53      	ldr	r3, [r2, #68]	; 0x44
     3c8:	f043 0303 	orr.w	r3, r3, #3
     3cc:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
     3ce:	b662      	cpsie	i
		atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADIV(3)); // select no dividers
     3d0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
     3d2:	b672      	cpsid	i
        reg &= ~flag;
     3d4:	6c53      	ldr	r3, [r2, #68]	; 0x44
     3d6:	f023 0360 	bic.w	r3, r3, #96	; 0x60
     3da:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
     3dc:	b662      	cpsie	i
		atomic::setBitFlag(adc_regs.GC, ADC_GC_ADACKEN);
     3de:	6ac2      	ldr	r2, [r0, #44]	; 0x2c

#elif defined(__IMXRT1062__) // Teensy 4
    template <typename T>
    __attribute__((always_inline)) inline void setBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
     3e0:	b672      	cpsid	i
        reg |= flag;
     3e2:	6c93      	ldr	r3, [r2, #72]	; 0x48
     3e4:	f043 0301 	orr.w	r3, r3, #1
     3e8:	6493      	str	r3, [r2, #72]	; 0x48
        __enable_irq();
     3ea:	b662      	cpsie	i
		atomic::clearBitFlag(adc_regs.GC, ADC_GC_ADACKEN);                                          // disable async
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADICLK(3), ADC_CFG1_speed & ADC_CFG_ADICLK(3)); // bus or bus/2
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADIV(3), ADC_CFG1_speed & ADC_CFG_ADIV(3));     // divisor for the clock source
	}

	conversion_speed = speed;
     3ec:	7781      	strb	r1, [r0, #30]
}
     3ee:	bc70      	pop	{r4, r5, r6}
     3f0:	4770      	bx	lr
	uint32_t ADC_CFG1_speed = 0; // store the clock and divisor (set to 0 to avoid warnings)

	switch (speed) {
		// normal bus clock
	case ADC_CONVERSION_SPEED::LOW_SPEED:
		atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADHSC);
     3f2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
     3f4:	b672      	cpsid	i
        reg &= ~flag;
     3f6:	6c53      	ldr	r3, [r2, #68]	; 0x44
     3f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
     3fc:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
     3fe:	b662      	cpsie	i
		atomic::setBitFlag(adc_regs.CFG, ADC_CFG_ADLPC);
     400:	6ac2      	ldr	r2, [r0, #44]	; 0x2c

#elif defined(__IMXRT1062__) // Teensy 4
    template <typename T>
    __attribute__((always_inline)) inline void setBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
     402:	b672      	cpsid	i
        reg |= flag;
     404:	6c53      	ldr	r3, [r2, #68]	; 0x44
     406:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     40a:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
     40c:	b662      	cpsie	i
		// ADC_CFG1_speed = ADC_CFG1_LOW_SPEED;
		ADC_CFG1_speed = get_CFG_LOW_SPEED(ADC_F_BUS);
     40e:	4b69      	ldr	r3, [pc, #420]	; (5b4 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x228>)
    }

    //! ADC_CFG1_LOW_SPEED is the lowest freq for 16 bits @internal
    constexpr uint32_t get_CFG_LOW_SPEED(uint32_t f_adc_clock)
    {
        if (f_adc_clock / 16 >= ADC_MIN_FREQ_16BITS)
     410:	4a69      	ldr	r2, [pc, #420]	; (5b8 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x22c>)
     412:	681b      	ldr	r3, [r3, #0]
     414:	4293      	cmp	r3, r2
     416:	f200 80b0 	bhi.w	57a <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x1ee>
        {
            return (ADC_LIB_CFG1_ADIV(3) + ADC_LIB_CFG1_ADICLK(1));
        }
        else if (f_adc_clock / 8 >= ADC_MIN_FREQ_16BITS)
     41a:	f1a2 72f4 	sub.w	r2, r2, #31981568	; 0x1e80000
     41e:	f5a2 4290 	sub.w	r2, r2, #18432	; 0x4800
     422:	4293      	cmp	r3, r2
     424:	d87b      	bhi.n	51e <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x192>
        {
            return (ADC_LIB_CFG1_ADIV(3) + ADC_LIB_CFG1_ADICLK(0));
        }
        else if (f_adc_clock / 4 >= ADC_MIN_FREQ_16BITS)
     426:	4a65      	ldr	r2, [pc, #404]	; (5bc <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x230>)
     428:	4293      	cmp	r3, r2
     42a:	f200 80bd 	bhi.w	5a8 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x21c>
        {
            return (ADC_LIB_CFG1_ADIV(2) + ADC_LIB_CFG1_ADICLK(0));
        }
        else if (f_adc_clock / 2 >= ADC_MIN_FREQ_16BITS)
     42e:	4a64      	ldr	r2, [pc, #400]	; (5c0 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x234>)
     430:	4293      	cmp	r3, r2
     432:	f240 809e 	bls.w	572 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x1e6>
    }

    //! ADC_CFG1_HI_SPEED_16_BITS is the highest freq for 16 bits @internal
    constexpr uint32_t get_CFG_HI_SPEED_16_BITS(uint32_t f_adc_clock)
    {
        if (f_adc_clock <= ADC_MAX_FREQ_16BITS)
     436:	2300      	movs	r3, #0
     438:	2601      	movs	r6, #1
     43a:	461d      	mov	r5, r3
		atomic::setBitFlag(adc_regs.GC, ADC_GC_ADACKEN);
	}
	else {
		// normal bus clock used - disable the internal asynchronous clock
		// total speed can be: bus, bus/2, bus/4, bus/8 or bus/16.
		atomic::clearBitFlag(adc_regs.GC, ADC_GC_ADACKEN);                                          // disable async
     43c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
     43e:	b672      	cpsid	i
        reg &= ~flag;
     440:	6ca2      	ldr	r2, [r4, #72]	; 0x48
     442:	f022 0201 	bic.w	r2, r2, #1
     446:	64a2      	str	r2, [r4, #72]	; 0x48
        __enable_irq();
     448:	b662      	cpsie	i
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADICLK(3), ADC_CFG1_speed & ADC_CFG_ADICLK(3)); // bus or bus/2
     44a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
            }
        }
        else
        { // 2 bits
            // lsb first
            if ((state >> __builtin_ctzl(flag)) & 0x1)
     44c:	2b00      	cmp	r3, #0
     44e:	f000 8082 	beq.w	556 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x1ca>

#elif defined(__IMXRT1062__) // Teensy 4
    template <typename T>
    __attribute__((always_inline)) inline void setBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
     452:	b672      	cpsid	i
        reg |= flag;
     454:	6c53      	ldr	r3, [r2, #68]	; 0x44
     456:	f043 0301 	orr.w	r3, r3, #1
     45a:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
     45c:	b662      	cpsie	i
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
     45e:	b672      	cpsid	i
        reg &= ~flag;
     460:	6c53      	ldr	r3, [r2, #68]	; 0x44
     462:	f023 0302 	bic.w	r3, r3, #2
     466:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
     468:	b662      	cpsie	i
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADIV(3), ADC_CFG1_speed & ADC_CFG_ADIV(3));     // divisor for the clock source
     46a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
            }
        }
        else
        { // 2 bits
            // lsb first
            if ((state >> __builtin_ctzl(flag)) & 0x1)
     46c:	2e00      	cmp	r6, #0
     46e:	d062      	beq.n	536 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x1aa>

#elif defined(__IMXRT1062__) // Teensy 4
    template <typename T>
    __attribute__((always_inline)) inline void setBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
     470:	b672      	cpsid	i
        reg |= flag;
     472:	6c5a      	ldr	r2, [r3, #68]	; 0x44
     474:	f042 0220 	orr.w	r2, r2, #32
     478:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
     47a:	b662      	cpsie	i
            else
            { // lsb is 0
                clearBitFlag(reg, (uint32_t)(1 << __builtin_ctzl(flag)));
            }
            // msb
            if ((state >> (31 - __builtin_clzl(flag))) & 0x1)
     47c:	2d00      	cmp	r5, #0
     47e:	d062      	beq.n	546 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x1ba>

#elif defined(__IMXRT1062__) // Teensy 4
    template <typename T>
    __attribute__((always_inline)) inline void setBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
     480:	b672      	cpsid	i
        reg |= flag;
     482:	6c5a      	ldr	r2, [r3, #68]	; 0x44
     484:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     488:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
     48a:	b662      	cpsie	i
	}

	conversion_speed = speed;
     48c:	7781      	strb	r1, [r0, #30]
     48e:	e7ae      	b.n	3ee <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x62>
		atomic::setBitFlag(adc_regs.CFG, ADC_CFG_ADLPC);
		// ADC_CFG1_speed = ADC_CFG1_LOW_SPEED;
		ADC_CFG1_speed = get_CFG_LOW_SPEED(ADC_F_BUS);
		break;
	case ADC_CONVERSION_SPEED::MED_SPEED:
		atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADHSC);
     490:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
     492:	b672      	cpsid	i
        reg &= ~flag;
     494:	6c53      	ldr	r3, [r2, #68]	; 0x44
     496:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
     49a:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
     49c:	b662      	cpsie	i
		atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADLPC);
     49e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
     4a0:	b672      	cpsid	i
        reg &= ~flag;
     4a2:	6c53      	ldr	r3, [r2, #68]	; 0x44
     4a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
     4a8:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
     4aa:	b662      	cpsie	i
		ADC_CFG1_speed = get_CFG_MEDIUM_SPEED(ADC_F_BUS);
     4ac:	4b41      	ldr	r3, [pc, #260]	; (5b4 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x228>)
    }

    //! ADC_CFG1_LOW_SPEED is the lowest freq for 16 bits @internal
    constexpr uint32_t get_CFG_LOW_SPEED(uint32_t f_adc_clock)
    {
        if (f_adc_clock / 16 >= ADC_MIN_FREQ_16BITS)
     4ae:	4a42      	ldr	r2, [pc, #264]	; (5b8 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x22c>)
     4b0:	681b      	ldr	r3, [r3, #0]
     4b2:	4293      	cmp	r3, r2
     4b4:	d865      	bhi.n	582 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x1f6>
        {
            return (ADC_LIB_CFG1_ADIV(3) + ADC_LIB_CFG1_ADICLK(1));
        }
        else if (f_adc_clock / 8 >= ADC_MIN_FREQ_16BITS)
     4b6:	f1a2 72f4 	sub.w	r2, r2, #31981568	; 0x1e80000
     4ba:	f5a2 4290 	sub.w	r2, r2, #18432	; 0x4800
     4be:	4293      	cmp	r3, r2
     4c0:	d950      	bls.n	564 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x1d8>
    }

    //! ADC_CFG1_HI_SPEED_16_BITS is the highest freq for 16 bits @internal
    constexpr uint32_t get_CFG_HI_SPEED_16_BITS(uint32_t f_adc_clock)
    {
        if (f_adc_clock <= ADC_MAX_FREQ_16BITS)
     4c2:	4a40      	ldr	r2, [pc, #256]	; (5c4 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x238>)
     4c4:	4293      	cmp	r3, r2
     4c6:	d9b6      	bls.n	436 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xaa>
        {
            return (ADC_LIB_CFG1_ADIV(0) + ADC_LIB_CFG1_ADICLK(0));
        }
        else if (f_adc_clock / 2 <= ADC_MAX_FREQ_16BITS)
        {
            return (ADC_LIB_CFG1_ADIV(1) + ADC_LIB_CFG1_ADICLK(0));
     4c8:	2320      	movs	r3, #32
     4ca:	3320      	adds	r3, #32
     4cc:	f003 0560 	and.w	r5, r3, #96	; 0x60
     4d0:	f003 0301 	and.w	r3, r3, #1
     4d4:	f3c5 1640 	ubfx	r6, r5, #5, #1
     4d8:	09ad      	lsrs	r5, r5, #6
     4da:	e7af      	b.n	43c <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xb0>
		break;
	case ADC_CONVERSION_SPEED::HIGH_SPEED:
		atomic::setBitFlag(adc_regs.CFG, ADC_CFG_ADHSC);
     4dc:	6ac2      	ldr	r2, [r0, #44]	; 0x2c

#elif defined(__IMXRT1062__) // Teensy 4
    template <typename T>
    __attribute__((always_inline)) inline void setBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
     4de:	b672      	cpsid	i
        reg |= flag;
     4e0:	6c53      	ldr	r3, [r2, #68]	; 0x44
     4e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     4e6:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
     4e8:	b662      	cpsie	i
		atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADLPC);
     4ea:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
     4ec:	b672      	cpsid	i
        reg &= ~flag;
     4ee:	6c53      	ldr	r3, [r2, #68]	; 0x44
     4f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
     4f4:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
     4f6:	b662      	cpsie	i
		ADC_CFG1_speed = get_CFG_HIGH_SPEED(ADC_F_BUS);
     4f8:	4b2e      	ldr	r3, [pc, #184]	; (5b4 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x228>)
    }

    //! ADC_CFG1_HI_SPEED is the highest freq for under 16 bits @internal
    constexpr uint32_t get_CFG_HIGH_SPEED(uint32_t f_adc_clock)
    {
        if (f_adc_clock <= ADC_MAX_FREQ)
     4fa:	4a32      	ldr	r2, [pc, #200]	; (5c4 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x238>)
     4fc:	681b      	ldr	r3, [r3, #0]
     4fe:	4293      	cmp	r3, r2
     500:	d937      	bls.n	572 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x1e6>
        {
            return (ADC_LIB_CFG1_ADIV(0) + ADC_LIB_CFG1_ADICLK(0));
        }
        else if (f_adc_clock / 2 <= ADC_MAX_FREQ)
     502:	4a31      	ldr	r2, [pc, #196]	; (5c8 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x23c>)
     504:	4293      	cmp	r3, r2
     506:	d996      	bls.n	436 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xaa>
        {
            return (ADC_LIB_CFG1_ADIV(1) + ADC_LIB_CFG1_ADICLK(0));
        }
        else if (f_adc_clock / 4 <= ADC_MAX_FREQ)
     508:	4a30      	ldr	r2, [pc, #192]	; (5cc <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x240>)
     50a:	4293      	cmp	r3, r2
     50c:	d94c      	bls.n	5a8 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x21c>
        {
            return (ADC_LIB_CFG1_ADIV(2) + ADC_LIB_CFG1_ADICLK(0));
        }
        else if (f_adc_clock / 8 <= ADC_MAX_FREQ)
     50e:	f102 6218 	add.w	r2, r2, #159383552	; 0x9800000
     512:	f502 2216 	add.w	r2, r2, #614400	; 0x96000
     516:	f602 0204 	addw	r2, r2, #2052	; 0x804
     51a:	4293      	cmp	r3, r2
     51c:	d82d      	bhi.n	57a <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x1ee>
        }
        else if (f_adc_clock / 8 >= ADC_MIN_FREQ_16BITS)
        {
            return (ADC_LIB_CFG1_ADIV(3) + ADC_LIB_CFG1_ADICLK(0));
        }
        else if (f_adc_clock / 4 >= ADC_MIN_FREQ_16BITS)
     51e:	2501      	movs	r5, #1
     520:	2300      	movs	r3, #0
     522:	462e      	mov	r6, r5
     524:	e78a      	b.n	43c <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xb0>
		break;
		// adack - async clock source, independent of the bus clock
// fADK = 10 or 20 MHz
	case ADC_CONVERSION_SPEED::ADACK_10:
		atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADHSC);
     526:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
     528:	b672      	cpsid	i
        reg &= ~flag;
     52a:	6c53      	ldr	r3, [r2, #68]	; 0x44
     52c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
     530:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
     532:	b662      	cpsie	i
		is_adack = true;
		break;
     534:	e745      	b.n	3c2 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x36>
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
     536:	b672      	cpsid	i
        reg &= ~flag;
     538:	6c5a      	ldr	r2, [r3, #68]	; 0x44
     53a:	f022 0220 	bic.w	r2, r2, #32
     53e:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
     540:	b662      	cpsie	i
            else
            { // lsb is 0
                clearBitFlag(reg, (uint32_t)(1 << __builtin_ctzl(flag)));
            }
            // msb
            if ((state >> (31 - __builtin_clzl(flag))) & 0x1)
     542:	2d00      	cmp	r5, #0
     544:	d19c      	bne.n	480 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xf4>
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
     546:	b672      	cpsid	i
        reg &= ~flag;
     548:	6c5a      	ldr	r2, [r3, #68]	; 0x44
     54a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
     54e:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
     550:	b662      	cpsie	i
		atomic::clearBitFlag(adc_regs.GC, ADC_GC_ADACKEN);                                          // disable async
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADICLK(3), ADC_CFG1_speed & ADC_CFG_ADICLK(3)); // bus or bus/2
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADIV(3), ADC_CFG1_speed & ADC_CFG_ADIV(3));     // divisor for the clock source
	}

	conversion_speed = speed;
     552:	7781      	strb	r1, [r0, #30]
     554:	e74b      	b.n	3ee <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x62>
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
     556:	b672      	cpsid	i
        reg &= ~flag;
     558:	6c53      	ldr	r3, [r2, #68]	; 0x44
     55a:	f023 0301 	bic.w	r3, r3, #1
     55e:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
     560:	b662      	cpsie	i
     562:	e77c      	b.n	45e <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xd2>
     564:	f5a2 0274 	sub.w	r2, r2, #15990784	; 0xf40000
     568:	f5a2 5210 	sub.w	r2, r2, #9216	; 0x2400
     56c:	4293      	cmp	r3, r2
     56e:	f63f af62 	bhi.w	436 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xaa>
     572:	2300      	movs	r3, #0
     574:	461d      	mov	r5, r3
     576:	461e      	mov	r6, r3
     578:	e760      	b.n	43c <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xb0>
     57a:	2301      	movs	r3, #1
     57c:	461d      	mov	r5, r3
     57e:	461e      	mov	r6, r3
     580:	e75c      	b.n	43c <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xb0>
    {
        if (f_adc_clock <= ADC_MAX_FREQ_16BITS)
        {
            return (ADC_LIB_CFG1_ADIV(0) + ADC_LIB_CFG1_ADICLK(0));
        }
        else if (f_adc_clock / 2 <= ADC_MAX_FREQ_16BITS)
     582:	4a11      	ldr	r2, [pc, #68]	; (5c8 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x23c>)
     584:	4293      	cmp	r3, r2
     586:	d90f      	bls.n	5a8 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x21c>
        {
            return (ADC_LIB_CFG1_ADIV(1) + ADC_LIB_CFG1_ADICLK(0));
        }
        else if (f_adc_clock / 4 <= ADC_MAX_FREQ_16BITS)
     588:	4a10      	ldr	r2, [pc, #64]	; (5cc <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x240>)
     58a:	4293      	cmp	r3, r2
     58c:	d910      	bls.n	5b0 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x224>
        {
            return (ADC_LIB_CFG1_ADIV(2) + ADC_LIB_CFG1_ADICLK(0));
        }
        else if (f_adc_clock / 8 <= ADC_MAX_FREQ_16BITS)
     58e:	4a10      	ldr	r2, [pc, #64]	; (5d0 <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x244>)
        {
            return (ADC_LIB_CFG1_ADIV(3) + ADC_LIB_CFG1_ADICLK(0));
        }
        else
        {
            return (ADC_LIB_CFG1_ADIV(3) + ADC_LIB_CFG1_ADICLK(1));
     590:	4293      	cmp	r3, r2
     592:	bf94      	ite	ls
     594:	2360      	movls	r3, #96	; 0x60
     596:	2361      	movhi	r3, #97	; 0x61
     598:	f003 0560 	and.w	r5, r3, #96	; 0x60
     59c:	f003 0301 	and.w	r3, r3, #1
     5a0:	f3c5 1640 	ubfx	r6, r5, #5, #1
     5a4:	09ad      	lsrs	r5, r5, #6
     5a6:	e749      	b.n	43c <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xb0>
    {
        if (f_adc_clock <= ADC_MAX_FREQ_16BITS)
        {
            return (ADC_LIB_CFG1_ADIV(0) + ADC_LIB_CFG1_ADICLK(0));
        }
        else if (f_adc_clock / 2 <= ADC_MAX_FREQ_16BITS)
     5a8:	2300      	movs	r3, #0
     5aa:	2501      	movs	r5, #1
     5ac:	461e      	mov	r6, r3
     5ae:	e745      	b.n	43c <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xb0>
        {
            return (ADC_LIB_CFG1_ADIV(1) + ADC_LIB_CFG1_ADICLK(0));
        }
        else if (f_adc_clock / 4 <= ADC_MAX_FREQ_16BITS)
        {
            return (ADC_LIB_CFG1_ADIV(2) + ADC_LIB_CFG1_ADICLK(0));
     5b0:	2340      	movs	r3, #64	; 0x40
     5b2:	e78a      	b.n	4ca <My_ADC::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x13e>
     5b4:	200003f8 	.word	0x200003f8
     5b8:	03d08fff 	.word	0x03d08fff
     5bc:	00f423ff 	.word	0x00f423ff
     5c0:	007a11ff 	.word	0x007a11ff
     5c4:	02625a00 	.word	0x02625a00
     5c8:	04c4b401 	.word	0x04c4b401
     5cc:	09896803 	.word	0x09896803
     5d0:	1312d007 	.word	0x1312d007

000005d4 <My_ADC::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)>:
* MED_HIGH_SPEED takes 9 ADCK.
* HIGH_SPEED takes 7 ADCK.
* HIGH_VERY_HIGH_SPEED takes 5 ADCK
* VERY_HIGH_SPEED is the highest possible sampling speed (3 ADCK)
*/
void My_ADC::setSamplingSpeed(ADC_SAMPLING_SPEED speed) {
     5d4:	b538      	push	{r3, r4, r5, lr}
	if (calibrating)
     5d6:	7d43      	ldrb	r3, [r0, #21]
* MED_HIGH_SPEED takes 9 ADCK.
* HIGH_SPEED takes 7 ADCK.
* HIGH_VERY_HIGH_SPEED takes 5 ADCK
* VERY_HIGH_SPEED is the highest possible sampling speed (3 ADCK)
*/
void My_ADC::setSamplingSpeed(ADC_SAMPLING_SPEED speed) {
     5d8:	4604      	mov	r4, r0
     5da:	460d      	mov	r5, r1
	if (calibrating)
     5dc:	b9eb      	cbnz	r3, 61a <My_ADC::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0x46>
		wait_for_cal();

	switch (speed) {
     5de:	2d07      	cmp	r5, #7
     5e0:	d819      	bhi.n	616 <My_ADC::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0x42>
     5e2:	e8df f005 	tbb	[pc, r5]
     5e6:	331d      	.short	0x331d
     5e8:	59534d40 	.word	0x59534d40
     5ec:	045f      	.short	0x045f
	case ADC_SAMPLING_SPEED::HIGH_VERY_HIGH_SPEED:
		atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADLSMP); // long sampling time disabled
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADSTS(3), ADC_CFG_ADSTS(1));
		break;
	case ADC_SAMPLING_SPEED::VERY_HIGH_SPEED:
		atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADLSMP); // long sampling time disabled
     5ee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
     5f0:	b672      	cpsid	i
        reg &= ~flag;
     5f2:	6c53      	ldr	r3, [r2, #68]	; 0x44
     5f4:	f023 0310 	bic.w	r3, r3, #16
     5f8:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
     5fa:	b662      	cpsie	i
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADSTS(3), ADC_CFG_ADSTS(0));
     5fc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
     5fe:	b672      	cpsid	i
        reg &= ~flag;
     600:	6c5a      	ldr	r2, [r3, #68]	; 0x44
     602:	f422 7280 	bic.w	r2, r2, #256	; 0x100
     606:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
     608:	b662      	cpsie	i
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
     60a:	b672      	cpsid	i
        reg &= ~flag;
     60c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
     60e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
     612:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
     614:	b662      	cpsie	i
		break;
	}
	sampling_speed = speed;
     616:	77e5      	strb	r5, [r4, #31]
     618:	bd38      	pop	{r3, r4, r5, pc}
* HIGH_VERY_HIGH_SPEED takes 5 ADCK
* VERY_HIGH_SPEED is the highest possible sampling speed (3 ADCK)
*/
void My_ADC::setSamplingSpeed(ADC_SAMPLING_SPEED speed) {
	if (calibrating)
		wait_for_cal();
     61a:	f7ff fe35 	bl	288 <My_ADC::wait_for_cal()>
     61e:	e7de      	b.n	5de <My_ADC::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0xa>

	switch (speed) {
	case ADC_SAMPLING_SPEED::VERY_LOW_SPEED:
		atomic::setBitFlag(adc_regs.CFG, ADC_CFG_ADLSMP); // long sampling time enable
     620:	6ae2      	ldr	r2, [r4, #44]	; 0x2c

#elif defined(__IMXRT1062__) // Teensy 4
    template <typename T>
    __attribute__((always_inline)) inline void setBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
     622:	b672      	cpsid	i
        reg |= flag;
     624:	6c53      	ldr	r3, [r2, #68]	; 0x44
     626:	f043 0310 	orr.w	r3, r3, #16

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
        reg &= ~flag;
     62a:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
     62c:	b662      	cpsie	i
		atomic::setBitFlag(adc_regs.CFG, ADC_CFG_ADLSMP); // long sampling time enable
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADSTS(3), ADC_CFG_ADSTS(0));
		break;
	case ADC_SAMPLING_SPEED::MED_HIGH_SPEED:
		atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADLSMP); // long sampling time disabled
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADSTS(3), ADC_CFG_ADSTS(3));
     62e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c

#elif defined(__IMXRT1062__) // Teensy 4
    template <typename T>
    __attribute__((always_inline)) inline void setBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
     630:	b672      	cpsid	i
        reg |= flag;
     632:	6c5a      	ldr	r2, [r3, #68]	; 0x44
     634:	f442 7280 	orr.w	r2, r2, #256	; 0x100

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
        reg &= ~flag;
     638:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
     63a:	b662      	cpsie	i

#elif defined(__IMXRT1062__) // Teensy 4
    template <typename T>
    __attribute__((always_inline)) inline void setBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
     63c:	b672      	cpsid	i
        reg |= flag;
     63e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
     640:	f442 7200 	orr.w	r2, r2, #512	; 0x200
     644:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
     646:	b662      	cpsie	i
	case ADC_SAMPLING_SPEED::VERY_HIGH_SPEED:
		atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADLSMP); // long sampling time disabled
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADSTS(3), ADC_CFG_ADSTS(0));
		break;
	}
	sampling_speed = speed;
     648:	77e5      	strb	r5, [r4, #31]
     64a:	bd38      	pop	{r3, r4, r5, pc}
	case ADC_SAMPLING_SPEED::VERY_LOW_SPEED:
		atomic::setBitFlag(adc_regs.CFG, ADC_CFG_ADLSMP); // long sampling time enable
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADSTS(3), ADC_CFG_ADSTS(3));
		break;
	case ADC_SAMPLING_SPEED::LOW_SPEED:
		atomic::setBitFlag(adc_regs.CFG, ADC_CFG_ADLSMP); // long sampling time enable
     64c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c

#elif defined(__IMXRT1062__) // Teensy 4
    template <typename T>
    __attribute__((always_inline)) inline void setBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
     64e:	b672      	cpsid	i
        reg |= flag;
     650:	6c53      	ldr	r3, [r2, #68]	; 0x44
     652:	f043 0310 	orr.w	r3, r3, #16
     656:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
     658:	b662      	cpsie	i
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADSTS(3), ADC_CFG_ADSTS(2));
     65a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
     65c:	b672      	cpsid	i
        reg &= ~flag;
     65e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
     660:	f422 7280 	bic.w	r2, r2, #256	; 0x100
     664:	e7e8      	b.n	638 <My_ADC::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0x64>
		break;
	case ADC_SAMPLING_SPEED::LOW_MED_SPEED:
		atomic::setBitFlag(adc_regs.CFG, ADC_CFG_ADLSMP); // long sampling time enable
     666:	6ae2      	ldr	r2, [r4, #44]	; 0x2c

#elif defined(__IMXRT1062__) // Teensy 4
    template <typename T>
    __attribute__((always_inline)) inline void setBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
     668:	b672      	cpsid	i
        reg |= flag;
     66a:	6c53      	ldr	r3, [r2, #68]	; 0x44
     66c:	f043 0310 	orr.w	r3, r3, #16

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
        reg &= ~flag;
     670:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
     672:	b662      	cpsie	i
		atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADLSMP); // long sampling time disabled
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADSTS(3), ADC_CFG_ADSTS(2));
		break;
	case ADC_SAMPLING_SPEED::HIGH_VERY_HIGH_SPEED:
		atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADLSMP); // long sampling time disabled
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADSTS(3), ADC_CFG_ADSTS(1));
     674:	6ae3      	ldr	r3, [r4, #44]	; 0x2c

#elif defined(__IMXRT1062__) // Teensy 4
    template <typename T>
    __attribute__((always_inline)) inline void setBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
     676:	b672      	cpsid	i
        reg |= flag;
     678:	6c5a      	ldr	r2, [r3, #68]	; 0x44
     67a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
     67e:	e7c2      	b.n	606 <My_ADC::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0x32>
	case ADC_SAMPLING_SPEED::LOW_MED_SPEED:
		atomic::setBitFlag(adc_regs.CFG, ADC_CFG_ADLSMP); // long sampling time enable
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADSTS(3), ADC_CFG_ADSTS(1));
		break;
	case ADC_SAMPLING_SPEED::MED_SPEED:
		atomic::setBitFlag(adc_regs.CFG, ADC_CFG_ADLSMP); // long sampling time enable
     680:	6ae2      	ldr	r2, [r4, #44]	; 0x2c

#elif defined(__IMXRT1062__) // Teensy 4
    template <typename T>
    __attribute__((always_inline)) inline void setBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
     682:	b672      	cpsid	i
        reg |= flag;
     684:	6c53      	ldr	r3, [r2, #68]	; 0x44
     686:	f043 0310 	orr.w	r3, r3, #16
     68a:	e7b5      	b.n	5f8 <My_ADC::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0x24>
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADSTS(3), ADC_CFG_ADSTS(0));
		break;
	case ADC_SAMPLING_SPEED::MED_HIGH_SPEED:
		atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADLSMP); // long sampling time disabled
     68c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
     68e:	b672      	cpsid	i
        reg &= ~flag;
     690:	6c53      	ldr	r3, [r2, #68]	; 0x44
     692:	f023 0310 	bic.w	r3, r3, #16
     696:	e7c8      	b.n	62a <My_ADC::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0x56>
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADSTS(3), ADC_CFG_ADSTS(3));
		break;
	case ADC_SAMPLING_SPEED::HIGH_SPEED:
		atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADLSMP); // long sampling time disabled
     698:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
     69a:	b672      	cpsid	i
        reg &= ~flag;
     69c:	6c53      	ldr	r3, [r2, #68]	; 0x44
     69e:	f023 0310 	bic.w	r3, r3, #16
     6a2:	e7d8      	b.n	656 <My_ADC::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0x82>
		atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADSTS(3), ADC_CFG_ADSTS(2));
		break;
	case ADC_SAMPLING_SPEED::HIGH_VERY_HIGH_SPEED:
		atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADLSMP); // long sampling time disabled
     6a4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
     6a6:	b672      	cpsid	i
        reg &= ~flag;
     6a8:	6c53      	ldr	r3, [r2, #68]	; 0x44
     6aa:	f023 0310 	bic.w	r3, r3, #16
     6ae:	e7df      	b.n	670 <My_ADC::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0x9c>

000006b0 <My_ADC::setAveraging(unsigned char)>:
}

/* Set the number of averages: 0, 4, 8, 16 or 32.
*
*/
void My_ADC::setAveraging(uint8_t num) {
     6b0:	b538      	push	{r3, r4, r5, lr}

	if (calibrating)
     6b2:	7d43      	ldrb	r3, [r0, #21]
}

/* Set the number of averages: 0, 4, 8, 16 or 32.
*
*/
void My_ADC::setAveraging(uint8_t num) {
     6b4:	4604      	mov	r4, r0
     6b6:	460d      	mov	r5, r1

	if (calibrating)
     6b8:	bb13      	cbnz	r3, 700 <My_ADC::setAveraging(unsigned char)+0x50>
		wait_for_cal();

	if (num <= 1) {
     6ba:	2d01      	cmp	r5, #1
		num = 0;
		// ADC_SC3_avge = 0;
		atomic::clearBitFlag(adc_regs.GC, ADC_GC_AVGE);
     6bc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
void My_ADC::setAveraging(uint8_t num) {

	if (calibrating)
		wait_for_cal();

	if (num <= 1) {
     6be:	d924      	bls.n	70a <My_ADC::setAveraging(unsigned char)+0x5a>

#elif defined(__IMXRT1062__) // Teensy 4
    template <typename T>
    __attribute__((always_inline)) inline void setBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
     6c0:	b672      	cpsid	i
        reg |= flag;
     6c2:	6c93      	ldr	r3, [r2, #72]	; 0x48
     6c4:	f043 0320 	orr.w	r3, r3, #32
     6c8:	6493      	str	r3, [r2, #72]	; 0x48
        __enable_irq();
     6ca:	b662      	cpsie	i
	}
	else {
		// ADC_SC3_avge = 1;
		atomic::setBitFlag(adc_regs.GC, ADC_GC_AVGE);

		if (num <= 4) {
     6cc:	2d04      	cmp	r5, #4
     6ce:	d90d      	bls.n	6ec <My_ADC::setAveraging(unsigned char)+0x3c>
			num = 4;
			// ADC_SC3_avgs0 = 0;
			// ADC_SC3_avgs1 = 0;
			atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_AVGS(3));
		}
		else if (num <= 8) {
     6d0:	2d08      	cmp	r5, #8
     6d2:	d933      	bls.n	73c <My_ADC::setAveraging(unsigned char)+0x8c>
			num = 8;
			// ADC_SC3_avgs0 = 1;
			// ADC_SC3_avgs1 = 0;
			atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_AVGS(3), ADC_CFG_AVGS(1));
		}
		else if (num <= 16) {
     6d4:	2d10      	cmp	r5, #16
     6d6:	d921      	bls.n	71c <My_ADC::setAveraging(unsigned char)+0x6c>
		}
		else {
			num = 32;
			// ADC_SC3_avgs0 = 1;
			// ADC_SC3_avgs1 = 1;
			atomic::setBitFlag(adc_regs.CFG, ADC_CFG_AVGS(3));
     6d8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c

#elif defined(__IMXRT1062__) // Teensy 4
    template <typename T>
    __attribute__((always_inline)) inline void setBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
     6da:	b672      	cpsid	i
        reg |= flag;
     6dc:	6c53      	ldr	r3, [r2, #68]	; 0x44
     6de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
     6e2:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
     6e4:	b662      	cpsie	i
			// ADC_SC3_avgs0 = 0;
			// ADC_SC3_avgs1 = 1;
			atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_AVGS(3), ADC_CFG_AVGS(2));
		}
		else {
			num = 32;
     6e6:	2320      	movs	r3, #32
			// ADC_SC3_avgs0 = 1;
			// ADC_SC3_avgs1 = 1;
			atomic::setBitFlag(adc_regs.CFG, ADC_CFG_AVGS(3));
		}
	}
	analog_num_average = num;
     6e8:	7723      	strb	r3, [r4, #28]
     6ea:	bd38      	pop	{r3, r4, r5, pc}

		if (num <= 4) {
			num = 4;
			// ADC_SC3_avgs0 = 0;
			// ADC_SC3_avgs1 = 0;
			atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_AVGS(3));
     6ec:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
     6ee:	b672      	cpsid	i
        reg &= ~flag;
     6f0:	6c53      	ldr	r3, [r2, #68]	; 0x44
     6f2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
     6f6:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
     6f8:	b662      	cpsie	i
	else {
		// ADC_SC3_avge = 1;
		atomic::setBitFlag(adc_regs.GC, ADC_GC_AVGE);

		if (num <= 4) {
			num = 4;
     6fa:	2304      	movs	r3, #4
			// ADC_SC3_avgs0 = 1;
			// ADC_SC3_avgs1 = 1;
			atomic::setBitFlag(adc_regs.CFG, ADC_CFG_AVGS(3));
		}
	}
	analog_num_average = num;
     6fc:	7723      	strb	r3, [r4, #28]
     6fe:	bd38      	pop	{r3, r4, r5, pc}
*
*/
void My_ADC::setAveraging(uint8_t num) {

	if (calibrating)
		wait_for_cal();
     700:	f7ff fdc2 	bl	288 <My_ADC::wait_for_cal()>

	if (num <= 1) {
     704:	2d01      	cmp	r5, #1
		num = 0;
		// ADC_SC3_avge = 0;
		atomic::clearBitFlag(adc_regs.GC, ADC_GC_AVGE);
     706:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
void My_ADC::setAveraging(uint8_t num) {

	if (calibrating)
		wait_for_cal();

	if (num <= 1) {
     708:	d8da      	bhi.n	6c0 <My_ADC::setAveraging(unsigned char)+0x10>
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
     70a:	b672      	cpsid	i
        reg &= ~flag;
     70c:	6c93      	ldr	r3, [r2, #72]	; 0x48
     70e:	f023 0320 	bic.w	r3, r3, #32
     712:	6493      	str	r3, [r2, #72]	; 0x48
        __enable_irq();
     714:	b662      	cpsie	i
		num = 0;
     716:	2300      	movs	r3, #0
			// ADC_SC3_avgs0 = 1;
			// ADC_SC3_avgs1 = 1;
			atomic::setBitFlag(adc_regs.CFG, ADC_CFG_AVGS(3));
		}
	}
	analog_num_average = num;
     718:	7723      	strb	r3, [r4, #28]
     71a:	bd38      	pop	{r3, r4, r5, pc}
		}
		else if (num <= 16) {
			num = 16;
			// ADC_SC3_avgs0 = 0;
			// ADC_SC3_avgs1 = 1;
			atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_AVGS(3), ADC_CFG_AVGS(2));
     71c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
     71e:	b672      	cpsid	i
        reg &= ~flag;
     720:	6c5a      	ldr	r2, [r3, #68]	; 0x44
     722:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
     726:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
     728:	b662      	cpsie	i

#elif defined(__IMXRT1062__) // Teensy 4
    template <typename T>
    __attribute__((always_inline)) inline void setBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
     72a:	b672      	cpsid	i
        reg |= flag;
     72c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
     72e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
     732:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
     734:	b662      	cpsie	i
			// ADC_SC3_avgs0 = 1;
			// ADC_SC3_avgs1 = 0;
			atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_AVGS(3), ADC_CFG_AVGS(1));
		}
		else if (num <= 16) {
			num = 16;
     736:	2310      	movs	r3, #16
			// ADC_SC3_avgs0 = 1;
			// ADC_SC3_avgs1 = 1;
			atomic::setBitFlag(adc_regs.CFG, ADC_CFG_AVGS(3));
		}
	}
	analog_num_average = num;
     738:	7723      	strb	r3, [r4, #28]
     73a:	bd38      	pop	{r3, r4, r5, pc}
		}
		else if (num <= 8) {
			num = 8;
			// ADC_SC3_avgs0 = 1;
			// ADC_SC3_avgs1 = 0;
			atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_AVGS(3), ADC_CFG_AVGS(1));
     73c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c

#elif defined(__IMXRT1062__) // Teensy 4
    template <typename T>
    __attribute__((always_inline)) inline void setBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
     73e:	b672      	cpsid	i
        reg |= flag;
     740:	6c5a      	ldr	r2, [r3, #68]	; 0x44
     742:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
     746:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
     748:	b662      	cpsie	i
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
     74a:	b672      	cpsid	i
        reg &= ~flag;
     74c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
     74e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
     752:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
     754:	b662      	cpsie	i
			// ADC_SC3_avgs0 = 0;
			// ADC_SC3_avgs1 = 0;
			atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_AVGS(3));
		}
		else if (num <= 8) {
			num = 8;
     756:	2308      	movs	r3, #8
			// ADC_SC3_avgs0 = 1;
			// ADC_SC3_avgs1 = 1;
			atomic::setBitFlag(adc_regs.CFG, ADC_CFG_AVGS(3));
		}
	}
	analog_num_average = num;
     758:	7723      	strb	r3, [r4, #28]
     75a:	bd38      	pop	{r3, r4, r5, pc}

0000075c <My_ADC::enableInterrupts(void (*)(), unsigned char)>:
}

/* Enable interrupts: An ADC Interrupt will be raised when the conversion is completed
*  (including hardware averages and if the comparison (if any) is true).
*/
void My_ADC::enableInterrupts(void (*isr)(void), uint8_t priority) {
     75c:	b570      	push	{r4, r5, r6, lr}
	if (calibrating)
     75e:	7d43      	ldrb	r3, [r0, #21]
}

/* Enable interrupts: An ADC Interrupt will be raised when the conversion is completed
*  (including hardware averages and if the comparison (if any) is true).
*/
void My_ADC::enableInterrupts(void (*isr)(void), uint8_t priority) {
     760:	4604      	mov	r4, r0
     762:	460d      	mov	r5, r1
     764:	4616      	mov	r6, r2
	if (calibrating)
     766:	b10b      	cbz	r3, 76c <My_ADC::enableInterrupts(void (*)(), unsigned char)+0x10>
		wait_for_cal();
     768:	f7ff fd8e 	bl	288 <My_ADC::wait_for_cal()>

	atomic::setBitFlag(adc_regs.HC0, ADC_HC_AIEN);
     76c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c

#elif defined(__IMXRT1062__) // Teensy 4
    template <typename T>
    __attribute__((always_inline)) inline void setBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
     76e:	b672      	cpsid	i
        reg |= flag;
     770:	6803      	ldr	r3, [r0, #0]
     772:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     776:	6003      	str	r3, [r0, #0]
        __enable_irq();
     778:	b662      	cpsie	i
#define DMA_NUM_CHANNELS        32

#ifdef __cplusplus
extern "C" void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
     77a:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
	interrupts_enabled = true;
     77e:	2001      	movs	r0, #1
     780:	4a09      	ldr	r2, [pc, #36]	; (7a8 <My_ADC::enableInterrupts(void (*)(), unsigned char)+0x4c>)
     782:	3310      	adds	r3, #16
     784:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
     788:	f842 5023 	str.w	r5, [r2, r3, lsl #2]

	attachInterruptVector(IRQ_ADC, isr);
	NVIC_SET_PRIORITY(IRQ_ADC, priority);
     78c:	4b07      	ldr	r3, [pc, #28]	; (7ac <My_ADC::enableInterrupts(void (*)(), unsigned char)+0x50>)
     78e:	f894 5029 	ldrb.w	r5, [r4, #41]	; 0x29
	NVIC_ENABLE_IRQ(IRQ_ADC);
     792:	4907      	ldr	r1, [pc, #28]	; (7b0 <My_ADC::enableInterrupts(void (*)(), unsigned char)+0x54>)

	atomic::setBitFlag(adc_regs.HC0, ADC_HC_AIEN);
	interrupts_enabled = true;

	attachInterruptVector(IRQ_ADC, isr);
	NVIC_SET_PRIORITY(IRQ_ADC, priority);
     794:	54ee      	strb	r6, [r5, r3]
	NVIC_ENABLE_IRQ(IRQ_ADC);
     796:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
     79a:	f003 021f 	and.w	r2, r3, #31
     79e:	115b      	asrs	r3, r3, #5
     7a0:	4090      	lsls	r0, r2
     7a2:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
     7a6:	bd70      	pop	{r4, r5, r6, pc}
     7a8:	20001400 	.word	0x20001400
     7ac:	e000e400 	.word	0xe000e400
     7b0:	e000e100 	.word	0xe000e100

000007b4 <My_ADC::startContinuous(unsigned char)>:
//////////////// INFORMATION ABOUT VALID PINS //////////////////

// check whether the pin is a valid analog pin
bool My_ADC::checkPin(uint8_t pin) {

	if (pin > ADC_MAX_PIN) {
     7b4:	291b      	cmp	r1, #27

/* Starts continuous conversion on the pin
 * It returns as soon as the ADC is set, use analogReadContinuous() to read the values
 * Set the resolution, number of averages and voltage reference using the appropriate functions BEFORE calling this function
*/
bool My_ADC::startContinuous(uint8_t pin) {
     7b6:	b538      	push	{r3, r4, r5, lr}
     7b8:	4604      	mov	r4, r0
//////////////// INFORMATION ABOUT VALID PINS //////////////////

// check whether the pin is a valid analog pin
bool My_ADC::checkPin(uint8_t pin) {

	if (pin > ADC_MAX_PIN) {
     7ba:	d820      	bhi.n	7fe <My_ADC::startContinuous(unsigned char)+0x4a>
		return false; // all others are invalid
	}

	// translate pin number to SC1A number, that also contains MUX a or b info.
	const uint8_t sc1a_pin = channel2sc1a[pin];
     7bc:	6a03      	ldr	r3, [r0, #32]

	// check for valid pin
	if ((sc1a_pin & ADC_SC1A_CHANNELS) == ADC_SC1A_PIN_INVALID) {
     7be:	5c5b      	ldrb	r3, [r3, r1]
     7c0:	f003 031f 	and.w	r3, r3, #31
     7c4:	2b1f      	cmp	r3, #31
     7c6:	d01a      	beq.n	7fe <My_ADC::startContinuous(unsigned char)+0x4a>
		fail_flag |= ADC_ERROR::WRONG_PIN;
		return false;
	}

	// check for calibration before setting channels,
	if (calibrating)
     7c8:	7d43      	ldrb	r3, [r0, #21]
     7ca:	460d      	mov	r5, r1
     7cc:	b9f3      	cbnz	r3, 80c <My_ADC::startContinuous(unsigned char)+0x58>
		wait_for_cal();

	// increase the counter of measurements
	num_measurements++;
     7ce:	7c63      	ldrb	r3, [r4, #17]
	void disablePGA();
#endif

	//! Set continuous conversion mode
	void continuousMode() __attribute__((always_inline)) {
		atomic::setBitFlag(adc_regs.GC, ADC_GC_ADCO);
     7d0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
     7d2:	3301      	adds	r3, #1
     7d4:	7463      	strb	r3, [r4, #17]

#elif defined(__IMXRT1062__) // Teensy 4
    template <typename T>
    __attribute__((always_inline)) inline void setBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
     7d6:	b672      	cpsid	i
        reg |= flag;
     7d8:	6c93      	ldr	r3, [r2, #72]	; 0x48
     7da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     7de:	6493      	str	r3, [r2, #72]	; 0x48
        __enable_irq();
     7e0:	b662      	cpsie	i
// Doesn't do any of the checks on the pin
// It doesn't change the continuous conversion bit
void My_ADC::startReadFast(uint8_t pin) {

	// translate pin number to SC1A number, that also contains MUX a or b info.
	const uint8_t sc1a_pin = channel2sc1a[pin];
     7e2:	6a23      	ldr	r3, [r4, #32]
     7e4:	5d5b      	ldrb	r3, [r3, r5]

	// select pin for single-ended mode and start conversion, enable interrupts if requested
	__disable_irq();
     7e6:	b672      	cpsid	i
	adc_regs.HC0 = (sc1a_pin & ADC_SC1A_CHANNELS) + interrupts_enabled * ADC_HC_AIEN;
     7e8:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
     7ec:	f003 031f 	and.w	r3, r3, #31
     7f0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
     7f2:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
     7f6:	6013      	str	r3, [r2, #0]

	__enable_irq();
     7f8:	b662      	cpsie	i
	// set continuous conversion flag
	continuousMode();

	startReadFast(pin);

	return true;
     7fa:	2001      	movs	r0, #1
     7fc:	bd38      	pop	{r3, r4, r5, pc}
        return static_cast<ADC_ERROR>(static_cast<uint16_t>(lhs) & static_cast<uint16_t>(rhs));
    }
    //! |= operator for ADC_ERRORs, it changes the left hand side ADC_ERROR. @internal
    inline ADC_ERROR operator|=(volatile ADC_ERROR &lhs, ADC_ERROR rhs)
    {
        return lhs = static_cast<ADC_ERROR>(static_cast<uint16_t>(lhs) | static_cast<uint16_t>(rhs));
     7fe:	8a63      	ldrh	r3, [r4, #18]
bool My_ADC::startContinuous(uint8_t pin) {

	// check whether the pin is correct
	if (!checkPin(pin)) {
		fail_flag |= ADC_ERROR::WRONG_PIN;
		return false;
     800:	2000      	movs	r0, #0
     802:	b29b      	uxth	r3, r3
     804:	f043 0304 	orr.w	r3, r3, #4
     808:	8263      	strh	r3, [r4, #18]
     80a:	bd38      	pop	{r3, r4, r5, pc}
	}

	// check for calibration before setting channels,
	if (calibrating)
		wait_for_cal();
     80c:	f7ff fd3c 	bl	288 <My_ADC::wait_for_cal()>
     810:	e7dd      	b.n	7ce <My_ADC::startContinuous(unsigned char)+0x1a>
     812:	bf00      	nop

00000814 <My_ADC::stopContinuous()>:
*/
void My_ADC::stopContinuous() {

	// set channel select to all 1's (31) to stop it.
#ifdef ADC_TEENSY_4
	adc_regs.HC0 = ADC_SC1A_PIN_INVALID + interrupts_enabled * ADC_HC_AIEN;
     814:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
     818:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
     81a:	01db      	lsls	r3, r3, #7
     81c:	331f      	adds	r3, #31
     81e:	6013      	str	r3, [r2, #0]
#else
	adc_regs.SC1A = ADC_SC1A_PIN_INVALID + atomic::getBitFlag(adc_regs.SC1A, ADC_SC1_AIEN) * ADC_SC1_AIEN;
#endif

	// decrease the counter of measurements (unless it's 0)
	if (num_measurements > 0) {
     820:	7c43      	ldrb	r3, [r0, #17]
     822:	b10b      	cbz	r3, 828 <My_ADC::stopContinuous()+0x14>
		num_measurements--;
     824:	3b01      	subs	r3, #1
     826:	7443      	strb	r3, [r0, #17]
     828:	4770      	bx	lr
     82a:	bf00      	nop

0000082c <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>:
     82c:	4804      	ldr	r0, [pc, #16]	; (840 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x14>)
     82e:	6802      	ldr	r2, [r0, #0]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
     830:	4411      	add	r1, r2
     832:	e001      	b.n	838 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0xc>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
     834:	4299      	cmp	r1, r3
     836:	d302      	bcc.n	83e <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x12>
     838:	6803      	ldr	r3, [r0, #0]
     83a:	429a      	cmp	r2, r3
     83c:	d9fa      	bls.n	834 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x8>
     83e:	4770      	bx	lr
     840:	20001058 	.word	0x20001058

00000844 <VisualMicroDebug::outPacketStart(bool)>:
	return outPacketStart(false);
}


bool VisualMicroDebug::outPacketStart(bool noWait)
{
     844:	b410      	push	{r4}
     846:	4a0c      	ldr	r2, [pc, #48]	; (878 <VisualMicroDebug::outPacketStart(bool)+0x34>)
     848:	4604      	mov	r4, r0
	yield();
#endif


#if defined(VM_DEBUG_BANDWIDTH_THROTTLE_MS) //&& (VM_DBT != VM_DBT_NET_UDP)
	if (!noWait)
     84a:	b971      	cbnz	r1, 86a <VisualMicroDebug::outPacketStart(bool)+0x26>
	{

		unsigned long ms_wait;
		ms_wait = (DBG_Millis() - lastPacketMS);
     84c:	6841      	ldr	r1, [r0, #4]
     84e:	6813      	ldr	r3, [r2, #0]
     850:	1a59      	subs	r1, r3, r1
		if (ms_wait < VM_DEBUG_BANDWIDTH_THROTTLE_MS)
     852:	2931      	cmp	r1, #49	; 0x31
     854:	d809      	bhi.n	86a <VisualMicroDebug::outPacketStart(bool)+0x26>
     856:	6810      	ldr	r0, [r2, #0]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
     858:	f100 0332 	add.w	r3, r0, #50	; 0x32
     85c:	1a59      	subs	r1, r3, r1
     85e:	e001      	b.n	864 <VisualMicroDebug::outPacketStart(bool)+0x20>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
     860:	4299      	cmp	r1, r3
     862:	d302      	bcc.n	86a <VisualMicroDebug::outPacketStart(bool)+0x26>
     864:	6813      	ldr	r3, [r2, #0]
     866:	4298      	cmp	r0, r3
     868:	d9fa      	bls.n	860 <VisualMicroDebug::outPacketStart(bool)+0x1c>
     86a:	6813      	ldr	r3, [r2, #0]
	transport->beginPacket();
#endif
#endif

	return true;
}
     86c:	2001      	movs	r0, #1
			//DBG_YieldAndWait(3)
		//}
	}
	//XXX: this should really be after packet end!
	//1501 for cosa - lastPacketMS=millis();
	lastPacketMS = DBG_Millis();
     86e:	6063      	str	r3, [r4, #4]
	transport->beginPacket();
#endif
#endif

	return true;
}
     870:	f85d 4b04 	ldr.w	r4, [sp], #4
     874:	4770      	bx	lr
     876:	bf00      	nop
     878:	20001058 	.word	0x20001058

0000087c <VisualMicroDebug::outPacketEnd()>:
     87c:	4770      	bx	lr
     87e:	bf00      	nop

00000880 <VisualMicroDebug::begin(unsigned long)>:
{

	//todo: detect usb type ports that need a delay
	//don't wait for the port unless we add a timeout and disable debug. because we might be discntected
	//todo: see if esp can handle this delay wuith wifi also connecting!
	delay(1000);
     880:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     884:	f000 ba28 	b.w	cd8 <delay>

00000888 <VisualMicroDebug::init(unsigned long)>:
	vmdebug.init();
	vmdebug.stats();
#endif


	baudRate = 0L; //gets a value later if required, only used by cosa for a re-begin!
     888:	2300      	movs	r3, #0
     88a:	6443      	str	r3, [r0, #68]	; 0x44

	lastPacketMS = 0L;
     88c:	6043      	str	r3, [r0, #4]

	//note: a delay at start causes esp8266 wifi to fail to connect!!
	//		the delay can also be switched off via board/platform.txt property=
	if (delayMs > 0)
     88e:	b141      	cbz	r1, 8a2 <VisualMicroDebug::init(unsigned long)+0x1a>
     890:	4804      	ldr	r0, [pc, #16]	; (8a4 <VisualMicroDebug::init(unsigned long)+0x1c>)
     892:	6802      	ldr	r2, [r0, #0]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
     894:	4411      	add	r1, r2
     896:	e001      	b.n	89c <VisualMicroDebug::init(unsigned long)+0x14>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
     898:	4299      	cmp	r1, r3
     89a:	d302      	bcc.n	8a2 <VisualMicroDebug::init(unsigned long)+0x1a>
     89c:	6803      	ldr	r3, [r0, #0]
     89e:	429a      	cmp	r2, r3
     8a0:	d9fa      	bls.n	898 <VisualMicroDebug::init(unsigned long)+0x10>
     8a2:	4770      	bx	lr
     8a4:	20001058 	.word	0x20001058

000008a8 <VisualMicroDebug::sendContinuedACK(unsigned char)>:
}
#endif


void VisualMicroDebug::sendContinuedACK(uint8_t breakPointId)
{
     8a8:	b538      	push	{r3, r4, r5, lr}
     8aa:	4c0f      	ldr	r4, [pc, #60]	; (8e8 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x40>)
     8ac:	460d      	mov	r5, r1
     8ae:	2106      	movs	r1, #6
     8b0:	6823      	ldr	r3, [r4, #0]
			//DBG_YieldAndWait(3)
		//}
	}
	//XXX: this should really be after packet end!
	//1501 for cosa - lastPacketMS=millis();
	lastPacketMS = DBG_Millis();
     8b2:	6043      	str	r3, [r0, #4]
     8b4:	480d      	ldr	r0, [pc, #52]	; (8ec <VisualMicroDebug::sendContinuedACK(unsigned char)+0x44>)
     8b6:	f001 fc1b 	bl	20f0 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     8ba:	220a      	movs	r2, #10
     8bc:	2300      	movs	r3, #0
     8be:	4629      	mov	r1, r5
     8c0:	480b      	ldr	r0, [pc, #44]	; (8f0 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x48>)
     8c2:	f001 fcfb 	bl	22bc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     8c6:	2106      	movs	r1, #6
     8c8:	480a      	ldr	r0, [pc, #40]	; (8f4 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x4c>)
     8ca:	f001 fc11 	bl	20f0 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     8ce:	4808      	ldr	r0, [pc, #32]	; (8f0 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x48>)
     8d0:	f001 fccc 	bl	226c <Print::println()>
     8d4:	6822      	ldr	r2, [r4, #0]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
     8d6:	f102 0132 	add.w	r1, r2, #50	; 0x32
     8da:	e001      	b.n	8e0 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x38>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
     8dc:	4299      	cmp	r1, r3
     8de:	d302      	bcc.n	8e6 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x3e>
     8e0:	6823      	ldr	r3, [r4, #0]
     8e2:	429a      	cmp	r2, r3
     8e4:	d9fa      	bls.n	8dc <VisualMicroDebug::sendContinuedACK(unsigned char)+0x34>
     8e6:	bd38      	pop	{r3, r4, r5, pc}
     8e8:	20001058 	.word	0x20001058
     8ec:	20000084 	.word	0x20000084
     8f0:	20000430 	.word	0x20000430
     8f4:	2000008c 	.word	0x2000008c

000008f8 <VisualMicroDebug::breakWait(unsigned char)>:
#if defined(VM_DBT) //&& ( VM_DBT == VM_DBT_HARDWARESERIAL || VM_DBT == VM_DBT_FASTSERIAL)
//TODO: implement sturcture serial com!
//we never get called if break was not set during compliation
//return _vm_cmd so that we can setVariable if required (caller needs to know result)
uint8_t VisualMicroDebug::breakWait(uint8_t breakPointId)
{
     8f8:	b538      	push	{r3, r4, r5, lr}
	//console write not working yet
#if defined(VM_DBT) && (VM_DBT == VM_DBT_NET_CONSOLE)
	return 'c';
#endif

	if (!alwaysBreak)
     8fa:	7e03      	ldrb	r3, [r0, #24]
     8fc:	b90b      	cbnz	r3, 902 <VisualMicroDebug::breakWait(unsigned char)+0xa>
		case 'h':
			//Serial.println("Remote debug session started");
#if defined(VM_DBT) && (VM_DBT == VM_DBT_NET_UDP)
			alwaysBreak = true;
#endif
			return 'c';
     8fe:	2063      	movs	r0, #99	; 0x63
	//sendContinuedACK(breakPointId);
	//return 'c'; //if we get here we are continuing!

	//	return '?'; //software serial rubbish detected?
	return 'e';
}
     900:	bd38      	pop	{r3, r4, r5, pc}
     902:	460d      	mov	r5, r1
     904:	4604      	mov	r4, r0
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
     906:	f001 fb8d 	bl	2024 <usb_serial_available>
#endif

	uint8_t b;

	//break/pause until we get a command
	if (available() == 0)
     90a:	f010 0fff 	tst.w	r0, #255	; 0xff
     90e:	d101      	bne.n	914 <VisualMicroDebug::breakWait(unsigned char)+0x1c>
		if (!UDPConnectionStarted) {
			return 'c';
		}
#endif

		return 'e';
     910:	2065      	movs	r0, #101	; 0x65
     912:	bd38      	pop	{r3, r4, r5, pc}
     914:	f001 fb86 	bl	2024 <usb_serial_available>
	//doh!  better if we have any key to continue so users data doesn't get lost so much. 
	//NOTE. pause/breakpoints are best used with dedicated port!
	//while(true)
	//{

	while (available() > 0)
     918:	f010 0fff 	tst.w	r0, #255	; 0xff
     91c:	d0f8      	beq.n	910 <VisualMicroDebug::breakWait(unsigned char)+0x18>
        virtual int read() { return usb_serial_getchar(); }
     91e:	f001 fbc1 	bl	20a4 <usb_serial_getchar>
		//		while(VM_DEBUGGER_SOFT_TRANSPORT.available()>0)
		//		{
		//			b = VM_DEBUGGER_SOFT_TRANSPORT.read();
		//#endif
		//debug break commands
		switch (b)
     922:	b2c0      	uxtb	r0, r0
     924:	f1a0 0358 	sub.w	r3, r0, #88	; 0x58
     928:	2b1e      	cmp	r3, #30
     92a:	d8f3      	bhi.n	914 <VisualMicroDebug::breakWait(unsigned char)+0x1c>
     92c:	a201      	add	r2, pc, #4	; (adr r2, 934 <VisualMicroDebug::breakWait(unsigned char)+0x3c>)
     92e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     932:	bf00      	nop
     934:	000009bd 	.word	0x000009bd
     938:	00000915 	.word	0x00000915
     93c:	00000915 	.word	0x00000915
     940:	00000915 	.word	0x00000915
     944:	00000915 	.word	0x00000915
     948:	00000915 	.word	0x00000915
     94c:	00000915 	.word	0x00000915
     950:	00000915 	.word	0x00000915
     954:	00000915 	.word	0x00000915
     958:	00000915 	.word	0x00000915
     95c:	00000915 	.word	0x00000915
     960:	000009b1 	.word	0x000009b1
     964:	00000915 	.word	0x00000915
     968:	00000915 	.word	0x00000915
     96c:	00000915 	.word	0x00000915
     970:	00000915 	.word	0x00000915
     974:	000008ff 	.word	0x000008ff
     978:	00000915 	.word	0x00000915
     97c:	00000915 	.word	0x00000915
     980:	00000915 	.word	0x00000915
     984:	00000915 	.word	0x00000915
     988:	00000915 	.word	0x00000915
     98c:	00000915 	.word	0x00000915
     990:	00000915 	.word	0x00000915
     994:	00000915 	.word	0x00000915
     998:	000008ff 	.word	0x000008ff
     99c:	00000915 	.word	0x00000915
     9a0:	00000915 	.word	0x00000915
     9a4:	00000915 	.word	0x00000915
     9a8:	00000915 	.word	0x00000915
     9ac:	00000901 	.word	0x00000901
		{

		case 'c':
			sendContinuedACK(breakPointId);
     9b0:	4620      	mov	r0, r4
     9b2:	4629      	mov	r1, r5
     9b4:	f7ff ff78 	bl	8a8 <VisualMicroDebug::sendContinuedACK(unsigned char)>
			return 'c'; //if we get here we are continuing!
     9b8:	2063      	movs	r0, #99	; 0x63
     9ba:	bd38      	pop	{r3, r4, r5, pc}
					  //	sendContinuedACK(breakPointId);
					  //	return;

					  //switch off break until re-start. for dev/testing
		case 'X':
			alwaysBreak = false;
     9bc:	2300      	movs	r3, #0
			return 'c';
     9be:	2063      	movs	r0, #99	; 0x63
					  //	sendContinuedACK(breakPointId);
					  //	return;

					  //switch off break until re-start. for dev/testing
		case 'X':
			alwaysBreak = false;
     9c0:	7623      	strb	r3, [r4, #24]
     9c2:	bd38      	pop	{r3, r4, r5, pc}

000009c4 <VisualMicroDebug::start(bool, bool)>:
}
#endif


void VisualMicroDebug::start(bool waitForKeyToStart, bool _alwaysBreak)
{
     9c4:	b570      	push	{r4, r5, r6, lr}
     9c6:	4605      	mov	r5, r0
     9c8:	4616      	mov	r6, r2
#if defined (VM_DEBUG_BREAKPAUSE)
	if (waitForKeyToStart)
     9ca:	b1a9      	cbz	r1, 9f8 <VisualMicroDebug::start(bool, bool)+0x34>
	{
		alwaysBreak = true;
     9cc:	2301      	movs	r3, #1
     9ce:	4c0b      	ldr	r4, [pc, #44]	; (9fc <VisualMicroDebug::start(bool, bool)+0x38>)
     9d0:	7603      	strb	r3, [r0, #24]

		//server should know we are waiting sendMessage("Press any key to continue");
		while (breakWait(0) != 'c') {
     9d2:	2100      	movs	r1, #0
     9d4:	4628      	mov	r0, r5
     9d6:	f7ff ff8f 	bl	8f8 <VisualMicroDebug::breakWait(unsigned char)>
     9da:	2863      	cmp	r0, #99	; 0x63
     9dc:	d00c      	beq.n	9f8 <VisualMicroDebug::start(bool, bool)+0x34>
     9de:	6822      	ldr	r2, [r4, #0]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
     9e0:	1c51      	adds	r1, r2, #1
     9e2:	6823      	ldr	r3, [r4, #0]

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
     9e4:	429a      	cmp	r2, r3
     9e6:	d8f4      	bhi.n	9d2 <VisualMicroDebug::start(bool, bool)+0xe>
     9e8:	4299      	cmp	r1, r3
     9ea:	d2fa      	bcs.n	9e2 <VisualMicroDebug::start(bool, bool)+0x1e>
	if (waitForKeyToStart)
	{
		alwaysBreak = true;

		//server should know we are waiting sendMessage("Press any key to continue");
		while (breakWait(0) != 'c') {
     9ec:	2100      	movs	r1, #0
     9ee:	4628      	mov	r0, r5
     9f0:	f7ff ff82 	bl	8f8 <VisualMicroDebug::breakWait(unsigned char)>
     9f4:	2863      	cmp	r0, #99	; 0x63
     9f6:	d1f2      	bne.n	9de <VisualMicroDebug::start(bool, bool)+0x1a>
			DBG_YieldAndWait(1);
		}
		//breakWait(0);
	}
	alwaysBreak = _alwaysBreak;
     9f8:	762e      	strb	r6, [r5, #24]
     9fa:	bd70      	pop	{r4, r5, r6, pc}
     9fc:	20001058 	.word	0x20001058

00000a00 <_GLOBAL__sub_I__ZN16VisualMicroDebug16DBG_YieldAndWaitEm>:
	//wait if we have to
	//try to prevent new users from overloading bandwidth and filling windows buffer
	//can be overriden via preferences
	//defaults to 50ms; needs to allow time for windows to recover if it pauses, so we need to be slower than the extensions and debugger can process + a bit

	BreakStartMillis = 0L;
     a00:	4b03      	ldr	r3, [pc, #12]	; (a10 <_GLOBAL__sub_I__ZN16VisualMicroDebug16DBG_YieldAndWaitEm+0x10>)
     a02:	2200      	movs	r2, #0
     a04:	609a      	str	r2, [r3, #8]
	BreakPrevMillis = 0L;
     a06:	60da      	str	r2, [r3, #12]
	InBreakMsgRepeatMS = 0L;
     a08:	611a      	str	r2, [r3, #16]
	InBreakMsgSent = 0L;
     a0a:	615a      	str	r2, [r3, #20]
     a0c:	4770      	bx	lr
     a0e:	bf00      	nop
     a10:	20001008 	.word	0x20001008

00000a14 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
     a14:	4a96      	ldr	r2, [pc, #600]	; (c70 <set_arm_clock+0x25c>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
     a16:	4b97      	ldr	r3, [pc, #604]	; (c74 <set_arm_clock+0x260>)
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
     a18:	4290      	cmp	r0, r2
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
     a1a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;
     a1e:	4c96      	ldr	r4, [pc, #600]	; (c78 <set_arm_clock+0x264>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
     a20:	f8d3 e014 	ldr.w	lr, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
     a24:	6999      	ldr	r1, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
     a26:	68e6      	ldr	r6, [r4, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
     a28:	d91c      	bls.n	a64 <set_arm_clock+0x50>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
     a2a:	4b94      	ldr	r3, [pc, #592]	; (c7c <set_arm_clock+0x268>)
     a2c:	4298      	cmp	r0, r3
     a2e:	f240 8115 	bls.w	c5c <set_arm_clock+0x248>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
     a32:	4b93      	ldr	r3, [pc, #588]	; (c80 <set_arm_clock+0x26c>)
     a34:	f240 6527 	movw	r5, #1575	; 0x627
     a38:	4f92      	ldr	r7, [pc, #584]	; (c84 <set_arm_clock+0x270>)
     a3a:	4403      	add	r3, r0
     a3c:	4c92      	ldr	r4, [pc, #584]	; (c88 <set_arm_clock+0x274>)
     a3e:	0a1a      	lsrs	r2, r3, #8
     a40:	fba7 3202 	umull	r3, r2, r7, r2
     a44:	09d3      	lsrs	r3, r2, #7
     a46:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     a4a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
     a4e:	f202 43e2 	addw	r3, r2, #1250	; 0x4e2
     a52:	42ab      	cmp	r3, r5
     a54:	bf28      	it	cs
     a56:	462b      	movcs	r3, r5
     a58:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
     a5c:	fba4 3503 	umull	r3, r5, r4, r3
     a60:	08ed      	lsrs	r5, r5, #3
     a62:	e004      	b.n	a6e <set_arm_clock+0x5a>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24000000) {
     a64:	4d89      	ldr	r5, [pc, #548]	; (c8c <set_arm_clock+0x278>)
     a66:	42a8      	cmp	r0, r5
     a68:	bf94      	ite	ls
     a6a:	2506      	movls	r5, #6
     a6c:	250e      	movhi	r5, #14
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
     a6e:	4a81      	ldr	r2, [pc, #516]	; (c74 <set_arm_clock+0x260>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
     a70:	f006 071f 	and.w	r7, r6, #31
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
     a74:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
     a78:	42af      	cmp	r7, r5
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
     a7a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
     a7e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
     a82:	d20a      	bcs.n	a9a <set_arm_clock+0x86>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
     a84:	4b7c      	ldr	r3, [pc, #496]	; (c78 <set_arm_clock+0x264>)

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
     a86:	f026 061f 	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
     a8a:	461a      	mov	r2, r3
	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
     a8c:	432e      	orrs	r6, r5
		DCDC_REG3 = dcdc;
     a8e:	60de      	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
     a90:	6813      	ldr	r3, [r2, #0]
     a92:	2b00      	cmp	r3, #0
     a94:	dafc      	bge.n	a90 <set_arm_clock+0x7c>
     a96:	f006 071f 	and.w	r7, r6, #31
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
     a9a:	f01e 7300 	ands.w	r3, lr, #33554432	; 0x2000000
     a9e:	d131      	bne.n	b04 <set_arm_clock+0xf0>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
     aa0:	4c7b      	ldr	r4, [pc, #492]	; (c90 <set_arm_clock+0x27c>)
     aa2:	4a7c      	ldr	r2, [pc, #496]	; (c94 <set_arm_clock+0x280>)
     aa4:	f8d4 c010 	ldr.w	ip, [r4, #16]
     aa8:	4614      	mov	r4, r2
     aaa:	ea0c 0202 	and.w	r2, ip, r2
     aae:	42a2      	cmp	r2, r4
     ab0:	bf0a      	itet	eq
     ab2:	f04f 53c0 	moveq.w	r3, #402653184	; 0x18000000
     ab6:	f44f 5280 	movne.w	r2, #4096	; 0x1000
     aba:	2200      	moveq	r2, #0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
     abc:	ea8e 0403 	eor.w	r4, lr, r3
     ac0:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
     ac4:	d008      	beq.n	ad8 <set_arm_clock+0xc4>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
     ac6:	f02e 5e60 	bic.w	lr, lr, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
     aca:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
			CCM_CBCDR = cbcdr;
     ace:	4c69      	ldr	r4, [pc, #420]	; (c74 <set_arm_clock+0x260>)
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
     ad0:	ea43 0e0e 	orr.w	lr, r3, lr
			CCM_CBCDR = cbcdr;
     ad4:	f8c4 e014 	str.w	lr, [r4, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
     ad8:	ea81 0302 	eor.w	r3, r1, r2
     adc:	f413 5f40 	tst.w	r3, #12288	; 0x3000
     ae0:	d008      	beq.n	af4 <set_arm_clock+0xe0>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
     ae2:	4b64      	ldr	r3, [pc, #400]	; (c74 <set_arm_clock+0x260>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
     ae4:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
     ae8:	4311      	orrs	r1, r2
			CCM_CBCMR = cbcmr;
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
     aea:	461a      	mov	r2, r3
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
     aec:	6199      	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
     aee:	6c93      	ldr	r3, [r2, #72]	; 0x48
     af0:	071c      	lsls	r4, r3, #28
     af2:	d4fc      	bmi.n	aee <set_arm_clock+0xda>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
     af4:	f04e 7e00 	orr.w	lr, lr, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
     af8:	4a5e      	ldr	r2, [pc, #376]	; (c74 <set_arm_clock+0x260>)
     afa:	f8c2 e014 	str.w	lr, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
     afe:	6c93      	ldr	r3, [r2, #72]	; 0x48
     b00:	0699      	lsls	r1, r3, #26
     b02:	d4fc      	bmi.n	afe <set_arm_clock+0xea>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
     b04:	2101      	movs	r1, #1
	while (frequency * div_arm * div_ahb < 648000000) {
     b06:	4c64      	ldr	r4, [pc, #400]	; (c98 <set_arm_clock+0x284>)
	}

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
     b08:	460a      	mov	r2, r1
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
     b0a:	fb01 f302 	mul.w	r3, r1, r2
     b0e:	fb00 f303 	mul.w	r3, r0, r3
     b12:	42a3      	cmp	r3, r4
     b14:	d809      	bhi.n	b2a <set_arm_clock+0x116>
		if (div_arm < 8) {
     b16:	2a07      	cmp	r2, #7
     b18:	f200 8095 	bhi.w	c46 <set_arm_clock+0x232>
			div_arm = div_arm + 1;
     b1c:	3201      	adds	r2, #1
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
     b1e:	fb01 f302 	mul.w	r3, r1, r2
     b22:	fb00 f303 	mul.w	r3, r0, r3
     b26:	42a3      	cmp	r3, r4
     b28:	d9f5      	bls.n	b16 <set_arm_clock+0x102>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
     b2a:	485c      	ldr	r0, [pc, #368]	; (c9c <set_arm_clock+0x288>)
     b2c:	4c5c      	ldr	r4, [pc, #368]	; (ca0 <set_arm_clock+0x28c>)
     b2e:	4418      	add	r0, r3
     b30:	fba4 0300 	umull	r0, r3, r4, r0
     b34:	0d1b      	lsrs	r3, r3, #20
	if (mult > 108) mult = 108;
     b36:	2b6c      	cmp	r3, #108	; 0x6c
     b38:	f200 808b 	bhi.w	c52 <set_arm_clock+0x23e>
	if (mult < 54) mult = 54;
     b3c:	2b35      	cmp	r3, #53	; 0x35
     b3e:	f200 808f 	bhi.w	c60 <set_arm_clock+0x24c>
     b42:	f8df 8188 	ldr.w	r8, [pc, #392]	; ccc <set_arm_clock+0x2b8>
     b46:	2336      	movs	r3, #54	; 0x36
     b48:	4856      	ldr	r0, [pc, #344]	; (ca4 <set_arm_clock+0x290>)

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
     b4a:	f8df c144 	ldr.w	ip, [pc, #324]	; c90 <set_arm_clock+0x27c>
     b4e:	4c56      	ldr	r4, [pc, #344]	; (ca8 <set_arm_clock+0x294>)
     b50:	f8dc 9000 	ldr.w	r9, [ip]
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
     b54:	fbb0 f0f2 	udiv	r0, r0, r2

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
     b58:	ea09 0404 	and.w	r4, r9, r4
     b5c:	4544      	cmp	r4, r8
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
     b5e:	fbb0 f0f1 	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
     b62:	d00b      	beq.n	b7c <set_arm_clock+0x168>
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
     b64:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
     b68:	f44f 5880 	mov.w	r8, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
     b6c:	4664      	mov	r4, ip
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
     b6e:	f8cc 8000 	str.w	r8, [ip]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
     b72:	f8cc 3000 	str.w	r3, [ip]
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
     b76:	6823      	ldr	r3, [r4, #0]
     b78:	2b00      	cmp	r3, #0
     b7a:	dafc      	bge.n	b76 <set_arm_clock+0x162>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
     b7c:	f8df c0f4 	ldr.w	ip, [pc, #244]	; c74 <set_arm_clock+0x260>
     b80:	3a01      	subs	r2, #1
     b82:	f8dc 3010 	ldr.w	r3, [ip, #16]
     b86:	f003 0307 	and.w	r3, r3, #7
     b8a:	4293      	cmp	r3, r2
     b8c:	d007      	beq.n	b9e <set_arm_clock+0x18a>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
     b8e:	f002 0207 	and.w	r2, r2, #7
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
     b92:	4664      	mov	r4, ip
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
     b94:	f8cc 2010 	str.w	r2, [ip, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
     b98:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     b9a:	03db      	lsls	r3, r3, #15
     b9c:	d4fc      	bmi.n	b98 <set_arm_clock+0x184>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
     b9e:	3901      	subs	r1, #1
     ba0:	0289      	lsls	r1, r1, #10
     ba2:	ea8e 0301 	eor.w	r3, lr, r1
     ba6:	f413 5fe0 	tst.w	r3, #7168	; 0x1c00
     baa:	d00c      	beq.n	bc6 <set_arm_clock+0x1b2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
		CCM_CBCDR = cbcdr;
     bac:	4b31      	ldr	r3, [pc, #196]	; (c74 <set_arm_clock+0x260>)
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
     bae:	f42e 5ee0 	bic.w	lr, lr, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
     bb2:	f401 51e0 	and.w	r1, r1, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
     bb6:	461a      	mov	r2, r3
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
     bb8:	ea41 0e0e 	orr.w	lr, r1, lr
		CCM_CBCDR = cbcdr;
     bbc:	f8c3 e014 	str.w	lr, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
     bc0:	6c93      	ldr	r3, [r2, #72]	; 0x48
     bc2:	0799      	lsls	r1, r3, #30
     bc4:	d4fc      	bmi.n	bc0 <set_arm_clock+0x1ac>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
     bc6:	4b39      	ldr	r3, [pc, #228]	; (cac <set_arm_clock+0x298>)
     bc8:	4939      	ldr	r1, [pc, #228]	; (cb0 <set_arm_clock+0x29c>)
     bca:	4403      	add	r3, r0
     bcc:	09db      	lsrs	r3, r3, #7
     bce:	fba1 3103 	umull	r3, r1, r1, r3
     bd2:	0b09      	lsrs	r1, r1, #12
     bd4:	2904      	cmp	r1, #4
     bd6:	bf28      	it	cs
     bd8:	2104      	movcs	r1, #4
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
     bda:	1e4b      	subs	r3, r1, #1
     bdc:	021b      	lsls	r3, r3, #8
     bde:	ea8e 0203 	eor.w	r2, lr, r3
     be2:	f412 7f40 	tst.w	r2, #768	; 0x300
     be6:	d007      	beq.n	bf8 <set_arm_clock+0x1e4>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
     be8:	f42e 7e40 	bic.w	lr, lr, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
     bec:	f403 7340 	and.w	r3, r3, #768	; 0x300
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
     bf0:	4a20      	ldr	r2, [pc, #128]	; (c74 <set_arm_clock+0x260>)

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
     bf2:	ea43 030e 	orr.w	r3, r3, lr
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
     bf6:	6153      	str	r3, [r2, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
     bf8:	4b1e      	ldr	r3, [pc, #120]	; (c74 <set_arm_clock+0x260>)
     bfa:	695c      	ldr	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
     bfc:	461a      	mov	r2, r3
		CCM_CBCDR = cbcdr;
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
     bfe:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
     c02:	615c      	str	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
     c04:	6c93      	ldr	r3, [r2, #72]	; 0x48
     c06:	069b      	lsls	r3, r3, #26
     c08:	d4fc      	bmi.n	c04 <set_arm_clock+0x1f0>

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
     c0a:	4b2a      	ldr	r3, [pc, #168]	; (cb4 <set_arm_clock+0x2a0>)
     c0c:	f04f 32ff 	mov.w	r2, #4294967295
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
     c10:	4c29      	ldr	r4, [pc, #164]	; (cb8 <set_arm_clock+0x2a4>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
     c12:	42bd      	cmp	r5, r7
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
     c14:	fba3 e300 	umull	lr, r3, r3, r0
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
     c18:	6020      	str	r0, [r4, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
     c1a:	ea4f 4393 	mov.w	r3, r3, lsr #18
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
     c1e:	4c27      	ldr	r4, [pc, #156]	; (cbc <set_arm_clock+0x2a8>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
     c20:	fbb2 f3f3 	udiv	r3, r2, r3
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
     c24:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
     c28:	4a25      	ldr	r2, [pc, #148]	; (cc0 <set_arm_clock+0x2ac>)
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
     c2a:	6021      	str	r1, [r4, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
     c2c:	6013      	str	r3, [r2, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
     c2e:	d208      	bcs.n	c42 <set_arm_clock+0x22e>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
     c30:	4b11      	ldr	r3, [pc, #68]	; (c78 <set_arm_clock+0x264>)
	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
     c32:	f026 061f 	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
     c36:	461a      	mov	r2, r3

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
     c38:	432e      	orrs	r6, r5
		DCDC_REG3 = dcdc;
     c3a:	60de      	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
     c3c:	6813      	ldr	r3, [r2, #0]
     c3e:	2b00      	cmp	r3, #0
     c40:	dafc      	bge.n	c3c <set_arm_clock+0x228>
	}

	return frequency;
}
     c42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
     c46:	2904      	cmp	r1, #4
     c48:	f63f af6f 	bhi.w	b2a <set_arm_clock+0x116>
				div_ahb = div_ahb + 1;
     c4c:	3101      	adds	r1, #1
				div_arm = 1;
     c4e:	2201      	movs	r2, #1
     c50:	e75b      	b.n	b0a <set_arm_clock+0xf6>
     c52:	f8df 807c 	ldr.w	r8, [pc, #124]	; cd0 <set_arm_clock+0x2bc>
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
     c56:	236c      	movs	r3, #108	; 0x6c
     c58:	481a      	ldr	r0, [pc, #104]	; (cc4 <set_arm_clock+0x2b0>)
     c5a:	e776      	b.n	b4a <set_arm_clock+0x136>
     c5c:	2512      	movs	r5, #18
     c5e:	e706      	b.n	a6e <set_arm_clock+0x5a>
     c60:	4819      	ldr	r0, [pc, #100]	; (cc8 <set_arm_clock+0x2b4>)
     c62:	f8df 8070 	ldr.w	r8, [pc, #112]	; cd4 <set_arm_clock+0x2c0>
     c66:	fb00 f003 	mul.w	r0, r0, r3
     c6a:	ea43 0808 	orr.w	r8, r3, r8
     c6e:	e76c      	b.n	b4a <set_arm_clock+0x136>
     c70:	1f78a400 	.word	0x1f78a400
     c74:	400fc000 	.word	0x400fc000
     c78:	40080000 	.word	0x40080000
     c7c:	23c34600 	.word	0x23c34600
     c80:	dc3cba00 	.word	0xdc3cba00
     c84:	004cb223 	.word	0x004cb223
     c88:	51eb851f 	.word	0x51eb851f
     c8c:	016e3600 	.word	0x016e3600
     c90:	400d8000 	.word	0x400d8000
     c94:	80003040 	.word	0x80003040
     c98:	269fb1ff 	.word	0x269fb1ff
     c9c:	005b8d80 	.word	0x005b8d80
     ca0:	165e9f81 	.word	0x165e9f81
     ca4:	269fb200 	.word	0x269fb200
     ca8:	8001307f 	.word	0x8001307f
     cac:	08f0d17f 	.word	0x08f0d17f
     cb0:	00e5109f 	.word	0x00e5109f
     cb4:	431bde83 	.word	0x431bde83
     cb8:	200003fc 	.word	0x200003fc
     cbc:	200003f8 	.word	0x200003f8
     cc0:	20001054 	.word	0x20001054
     cc4:	4d3f6400 	.word	0x4d3f6400
     cc8:	00b71b00 	.word	0x00b71b00
     ccc:	80002036 	.word	0x80002036
     cd0:	8000206c 	.word	0x8000206c
     cd4:	80002000 	.word	0x80002000

00000cd8 <delay>:

void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
     cd8:	2800      	cmp	r0, #0
     cda:	d057      	beq.n	d8c <delay+0xb4>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     cdc:	2201      	movs	r2, #1
{

}*/

void delay(uint32_t msec)
{
     cde:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     ce2:	b085      	sub	sp, #20
     ce4:	4683      	mov	fp, r0
     ce6:	4c2a      	ldr	r4, [pc, #168]	; (d90 <delay+0xb8>)
     ce8:	4d2a      	ldr	r5, [pc, #168]	; (d94 <delay+0xbc>)
     cea:	4e2b      	ldr	r6, [pc, #172]	; (d98 <delay+0xc0>)
     cec:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     cf0:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
     cf4:	6828      	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
     cf6:	6833      	ldr	r3, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     cf8:	e844 2100 	strex	r1, r2, [r4]
	} while ( __STREXW(1, &systick_safe_read));
     cfc:	2900      	cmp	r1, #0
     cfe:	d1f7      	bne.n	cf0 <delay+0x18>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
     d00:	4f26      	ldr	r7, [pc, #152]	; (d9c <delay+0xc4>)
     d02:	e9cd 8902 	strd	r8, r9, [sp, #8]
     d06:	683a      	ldr	r2, [r7, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
     d08:	1ad3      	subs	r3, r2, r3
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     d0a:	4a25      	ldr	r2, [pc, #148]	; (da0 <delay+0xc8>)
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
     d0c:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
     d10:	9701      	str	r7, [sp, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     d12:	6812      	ldr	r2, [r2, #0]
     d14:	2701      	movs	r7, #1
     d16:	fba3 2302 	umull	r2, r3, r3, r2
	if (frac > 1000) frac = 1000;
     d1a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     d1e:	4698      	mov	r8, r3
	if (frac > 1000) frac = 1000;
     d20:	2300      	movs	r3, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     d22:	428b      	cmp	r3, r1
     d24:	bf08      	it	eq
     d26:	4542      	cmpeq	r2, r8
     d28:	bf2c      	ite	cs
     d2a:	46c2      	movcs	sl, r8
     d2c:	46f2      	movcc	sl, lr
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
     d2e:	fb0e aa00 	mla	sl, lr, r0, sl
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     d32:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
     d36:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
     d38:	6831      	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     d3a:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
     d3e:	2b00      	cmp	r3, #0
     d40:	d1f7      	bne.n	d32 <delay+0x5a>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
     d42:	9801      	ldr	r0, [sp, #4]
     d44:	6800      	ldr	r0, [r0, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
     d46:	1a41      	subs	r1, r0, r1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     d48:	4815      	ldr	r0, [pc, #84]	; (da0 <delay+0xc8>)
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
     d4a:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     d4e:	6800      	ldr	r0, [r0, #0]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
     d50:	fb0e f202 	mul.w	r2, lr, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     d54:	fba1 0100 	umull	r0, r1, r1, r0
	if (frac > 1000) frac = 1000;
     d58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
     d5c:	ebca 0202 	rsb	r2, sl, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     d60:	4688      	mov	r8, r1
	if (frac > 1000) frac = 1000;
     d62:	2100      	movs	r1, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     d64:	4299      	cmp	r1, r3
     d66:	bf08      	it	eq
     d68:	4540      	cmpeq	r0, r8
     d6a:	bf2c      	ite	cs
     d6c:	4643      	movcs	r3, r8
     d6e:	4673      	movcc	r3, lr
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
     d70:	441a      	add	r2, r3
     d72:	4572      	cmp	r2, lr
     d74:	d307      	bcc.n	d86 <delay+0xae>
			if (--msec == 0) return;
     d76:	f1bb 0b01 	subs.w	fp, fp, #1
			start += 1000;
     d7a:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
     d7e:	d1d8      	bne.n	d32 <delay+0x5a>
			start += 1000;
		}
		yield();
	}
	// TODO...
}
     d80:	b005      	add	sp, #20
     d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
			start += 1000;
		}
		yield();
     d86:	f001 faed 	bl	2364 <yield>
	}
     d8a:	e7d2      	b.n	d32 <delay+0x5a>
     d8c:	4770      	bx	lr
     d8e:	bf00      	nop
     d90:	200012e8 	.word	0x200012e8
     d94:	20001058 	.word	0x20001058
     d98:	20001050 	.word	0x20001050
     d9c:	e0001004 	.word	0xe0001004
     da0:	20001054 	.word	0x20001054

00000da4 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
     da4:	48a4      	ldr	r0, [pc, #656]	; (1038 <pwm_init+0x294>)
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
     da6:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
     daa:	4ba4      	ldr	r3, [pc, #656]	; (103c <pwm_init+0x298>)
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
     dac:	6f82      	ldr	r2, [r0, #120]	; 0x78
     dae:	f442 027f 	orr.w	r2, r2, #16711680	; 0xff0000
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

void pwm_init(void)
{
     db2:	b5f0      	push	{r4, r5, r6, r7, lr}
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
     db4:	6782      	str	r2, [r0, #120]	; 0x78
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
     db6:	2500      	movs	r5, #0
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
     db8:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
     dbc:	f44f 4670 	mov.w	r6, #61440	; 0xf000
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
     dc0:	4c9f      	ldr	r4, [pc, #636]	; (1040 <pwm_init+0x29c>)
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
     dc2:	f44f 4e60 	mov.w	lr, #57344	; 0xe000

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
     dc6:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
     dc8:	f44f 6780 	mov.w	r7, #1024	; 0x400
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
     dcc:	4314      	orrs	r4, r2
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
     dce:	462a      	mov	r2, r5
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
     dd0:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
     dd4:	f8a3 618c 	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
     dd8:	f248 26b8 	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
     ddc:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
     de0:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
     de4:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
     de8:	b280      	uxth	r0, r0
     dea:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
     dee:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
     df2:	eb01 0041 	add.w	r0, r1, r1, lsl #1
     df6:	4b91      	ldr	r3, [pc, #580]	; (103c <pwm_init+0x298>)
	for (i=0; i < 4; i++) {
     df8:	3101      	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
     dfa:	2500      	movs	r5, #0
     dfc:	0140      	lsls	r0, r0, #5
     dfe:	461c      	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
     e00:	2904      	cmp	r1, #4
     e02:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
     e04:	f8a3 e004 	strh.w	lr, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
     e08:	80df      	strh	r7, [r3, #6]
		p->SM[i].OCTRL = 0;
     e0a:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
     e0c:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
     e0e:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
     e10:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
     e12:	81de      	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
     e14:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
     e16:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
     e18:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
     e1a:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
     e1c:	d1e9      	bne.n	df2 <pwm_init+0x4e>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
     e1e:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
     e22:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
     e26:	4b87      	ldr	r3, [pc, #540]	; (1044 <pwm_init+0x2a0>)
     e28:	f44f 4670 	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
     e2c:	b280      	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
     e2e:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
     e30:	f44f 4760 	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
     e34:	462a      	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
     e36:	ea40 000c 	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
     e3a:	f44f 6e80 	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
     e3e:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
     e42:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
     e46:	b280      	uxth	r0, r0
     e48:	f440 6070 	orr.w	r0, r0, #3840	; 0xf00
     e4c:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
     e50:	f8a3 618c 	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
     e54:	f248 26b8 	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
     e58:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
     e5c:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
     e60:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
     e64:	b280      	uxth	r0, r0
     e66:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
     e6a:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
     e6e:	eb01 0041 	add.w	r0, r1, r1, lsl #1
     e72:	4b74      	ldr	r3, [pc, #464]	; (1044 <pwm_init+0x2a0>)
	for (i=0; i < 4; i++) {
     e74:	3101      	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
     e76:	2500      	movs	r5, #0
     e78:	0140      	lsls	r0, r0, #5
     e7a:	461c      	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
     e7c:	2904      	cmp	r1, #4
     e7e:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
     e80:	809f      	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
     e82:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
     e86:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
     e88:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
     e8a:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
     e8c:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
     e8e:	81de      	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
     e90:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
     e92:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
     e94:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
     e96:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
     e98:	d1e9      	bne.n	e6e <pwm_init+0xca>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
     e9a:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
     e9e:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
     ea2:	4b69      	ldr	r3, [pc, #420]	; (1048 <pwm_init+0x2a4>)
     ea4:	f44f 4670 	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
     ea8:	b280      	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
     eaa:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
     eac:	f44f 4760 	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
     eb0:	462a      	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
     eb2:	ea40 000c 	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
     eb6:	f44f 6e80 	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
     eba:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
     ebe:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
     ec2:	b280      	uxth	r0, r0
     ec4:	f440 6070 	orr.w	r0, r0, #3840	; 0xf00
     ec8:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
     ecc:	f8a3 618c 	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
     ed0:	f248 26b8 	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
     ed4:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
     ed8:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
     edc:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
     ee0:	b280      	uxth	r0, r0
     ee2:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
     ee6:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
     eea:	eb01 0041 	add.w	r0, r1, r1, lsl #1
     eee:	4b56      	ldr	r3, [pc, #344]	; (1048 <pwm_init+0x2a4>)
	for (i=0; i < 4; i++) {
     ef0:	3101      	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
     ef2:	2500      	movs	r5, #0
     ef4:	0140      	lsls	r0, r0, #5
     ef6:	461c      	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
     ef8:	2904      	cmp	r1, #4
     efa:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
     efc:	809f      	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
     efe:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
     f02:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
     f04:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
     f06:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
     f08:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
     f0a:	81de      	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
     f0c:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
     f0e:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
     f10:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
     f12:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
     f14:	d1e9      	bne.n	eea <pwm_init+0x146>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
     f16:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
     f1a:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
     f1e:	4b4b      	ldr	r3, [pc, #300]	; (104c <pwm_init+0x2a8>)
     f20:	f44f 4770 	mov.w	r7, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
     f24:	b280      	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
     f26:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
     f28:	f44f 4660 	mov.w	r6, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
     f2c:	462a      	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
     f2e:	ea40 000c 	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
     f32:	f44f 6e80 	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
     f36:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
     f3a:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
     f3e:	b280      	uxth	r0, r0
     f40:	f440 6070 	orr.w	r0, r0, #3840	; 0xf00
     f44:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
     f48:	f8a3 718c 	strh.w	r7, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
     f4c:	f248 27b8 	movw	r7, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
     f50:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
     f54:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
     f58:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
     f5c:	b280      	uxth	r0, r0
     f5e:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
     f62:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
     f66:	eb01 0041 	add.w	r0, r1, r1, lsl #1
     f6a:	4b38      	ldr	r3, [pc, #224]	; (104c <pwm_init+0x2a8>)
	for (i=0; i < 4; i++) {
     f6c:	3101      	adds	r1, #1
     f6e:	0140      	lsls	r0, r0, #5
     f70:	461c      	mov	r4, r3
     f72:	2904      	cmp	r1, #4
     f74:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
     f76:	809e      	strh	r6, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
     f78:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
     f7c:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
     f7e:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
     f80:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
     f82:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
     f84:	81df      	strh	r7, [r3, #14]
		p->SM[i].VAL2 = 0;
     f86:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
     f88:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
     f8a:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
     f8c:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
     f8e:	d1ea      	bne.n	f66 <pwm_init+0x1c2>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
     f90:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
     f94:	270f      	movs	r7, #15

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
     f96:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
     f98:	f241 0601 	movw	r6, #4097	; 0x1001
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
     f9c:	b29b      	uxth	r3, r3
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
     f9e:	f645 5ec0 	movw	lr, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
     fa2:	4611      	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
     fa4:	f243 0526 	movw	r5, #12326	; 0x3026
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
     fa8:	433b      	orrs	r3, r7
     faa:	f8a4 3188 	strh.w	r3, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
     fae:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
     fb2:	b29b      	uxth	r3, r3
     fb4:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
     fb8:	f8a4 3188 	strh.w	r3, [r4, #392]	; 0x188
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
     fbc:	0150      	lsls	r0, r2, #5
     fbe:	4b24      	ldr	r3, [pc, #144]	; (1050 <pwm_init+0x2ac>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
     fc0:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
     fc2:	4403      	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
     fc4:	2a04      	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
     fc6:	8199      	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
     fc8:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
     fca:	81df      	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
     fcc:	829e      	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
     fce:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
     fd2:	8019      	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
     fd4:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
     fd6:	819d      	strh	r5, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
     fd8:	d1f0      	bne.n	fbc <pwm_init+0x218>
     fda:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
     fdc:	270f      	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
     fde:	f241 0601 	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
     fe2:	f645 55c0 	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
     fe6:	4611      	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
     fe8:	f243 0426 	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
     fec:	0150      	lsls	r0, r2, #5
     fee:	4b19      	ldr	r3, [pc, #100]	; (1054 <pwm_init+0x2b0>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
     ff0:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
     ff2:	4403      	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
     ff4:	2a04      	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
     ff6:	8199      	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
     ff8:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
     ffa:	81df      	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
     ffc:	829e      	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
     ffe:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    1000:	8019      	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    1002:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    1004:	819c      	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    1006:	d1f1      	bne.n	fec <pwm_init+0x248>
    1008:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    100a:	270f      	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    100c:	f241 0601 	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    1010:	f645 55c0 	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    1014:	4611      	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    1016:	f243 0426 	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    101a:	0150      	lsls	r0, r2, #5
    101c:	4b0e      	ldr	r3, [pc, #56]	; (1058 <pwm_init+0x2b4>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    101e:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    1020:	4403      	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    1022:	2a04      	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    1024:	8199      	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    1026:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    1028:	81df      	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    102a:	829e      	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    102c:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    102e:	8019      	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    1030:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    1032:	819c      	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    1034:	d1f1      	bne.n	101a <pwm_init+0x276>
	flexpwm_init(&IMXRT_FLEXPWM3);
	flexpwm_init(&IMXRT_FLEXPWM4);
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    1036:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1038:	400fc000 	.word	0x400fc000
    103c:	403dc000 	.word	0x403dc000
    1040:	fc030000 	.word	0xfc030000
    1044:	403e0000 	.word	0x403e0000
    1048:	403e4000 	.word	0x403e4000
    104c:	403e8000 	.word	0x403e8000
    1050:	401dc000 	.word	0x401dc000
    1054:	401e0000 	.word	0x401e0000
    1058:	401e4000 	.word	0x401e4000

0000105c <unused_interrupt_vector>:
//  R0
// Code from :: https://community.nxp.com/thread/389002
__attribute__((naked))
void unused_interrupt_vector(void)
{
  __asm( ".syntax unified\n"
    105c:	2004      	movs	r0, #4
    105e:	4671      	mov	r1, lr
    1060:	4208      	tst	r0, r1
    1062:	d003      	beq.n	106c <_MSP>
    1064:	f3ef 8009 	mrs	r0, PSP
    1068:	f000 b808 	b.w	107c <HardFault_HandlerC>

0000106c <_MSP>:
    106c:	f3ef 8008 	mrs	r0, MSP
    1070:	f000 b804 	b.w	107c <HardFault_HandlerC>

00001074 <startup_default_early_hook>:
         "B HardFault_HandlerC \n"
         "_MSP: \n"
         "MRS R0, MSP \n"
         "B HardFault_HandlerC \n"
         ".syntax divided\n") ;
}
    1074:	4770      	bx	lr
    1076:	bf00      	nop

00001078 <startup_default_late_hook>:
uint8_t external_psram_size = 0;

extern int main (void);
void startup_default_early_hook(void) {}
void startup_early_hook(void)		__attribute__ ((weak, alias("startup_default_early_hook")));
void startup_default_late_hook(void) {}
    1078:	4770      	bx	lr
    107a:	bf00      	nop

0000107c <HardFault_HandlerC>:
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    107c:	4b1b      	ldr	r3, [pc, #108]	; (10ec <HardFault_HandlerC+0x70>)
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    107e:	2105      	movs	r1, #5
    1080:	4a1b      	ldr	r2, [pc, #108]	; (10f0 <HardFault_HandlerC+0x74>)
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    1082:	2038      	movs	r0, #56	; 0x38
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    1084:	b530      	push	{r4, r5, lr}
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    1086:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
  GPIO2_DR_SET = (1 << 3);
    108a:	2108      	movs	r1, #8
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    108c:	f8c2 0338 	str.w	r0, [r2, #824]	; 0x338
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    1090:	b083      	sub	sp, #12
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    1092:	685a      	ldr	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    1094:	4c17      	ldr	r4, [pc, #92]	; (10f4 <HardFault_HandlerC+0x78>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    1096:	430a      	orrs	r2, r1
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    1098:	4817      	ldr	r0, [pc, #92]	; (10f8 <HardFault_HandlerC+0x7c>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    109a:	605a      	str	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
    109c:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    10a0:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88

  if ( F_CPU_ACTUAL >= 600000000 )
    10a4:	6823      	ldr	r3, [r4, #0]
    10a6:	4283      	cmp	r3, r0
    10a8:	d902      	bls.n	10b0 <HardFault_HandlerC+0x34>
    set_arm_clock(300000000);
    10aa:	4814      	ldr	r0, [pc, #80]	; (10fc <HardFault_HandlerC+0x80>)
    10ac:	f7ff fcb2 	bl	a14 <set_arm_clock>

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    10b0:	4d0e      	ldr	r5, [pc, #56]	; (10ec <HardFault_HandlerC+0x70>)
    10b2:	2408      	movs	r4, #8
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    10b4:	2000      	movs	r0, #0
    10b6:	4a12      	ldr	r2, [pc, #72]	; (1100 <HardFault_HandlerC+0x84>)
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    10b8:	4912      	ldr	r1, [pc, #72]	; (1104 <HardFault_HandlerC+0x88>)
  if ( F_CPU_ACTUAL >= 600000000 )
    set_arm_clock(300000000);

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    10ba:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    10be:	9001      	str	r0, [sp, #4]
    10c0:	9b01      	ldr	r3, [sp, #4]
    10c2:	4293      	cmp	r3, r2
    10c4:	d805      	bhi.n	10d2 <HardFault_HandlerC+0x56>
    10c6:	9b01      	ldr	r3, [sp, #4]
    10c8:	3301      	adds	r3, #1
    10ca:	9301      	str	r3, [sp, #4]
    10cc:	9b01      	ldr	r3, [sp, #4]
    10ce:	4293      	cmp	r3, r2
    10d0:	d9f9      	bls.n	10c6 <HardFault_HandlerC+0x4a>
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    10d2:	f8c5 4088 	str.w	r4, [r5, #136]	; 0x88
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    10d6:	9001      	str	r0, [sp, #4]
    10d8:	9b01      	ldr	r3, [sp, #4]
    10da:	428b      	cmp	r3, r1
    10dc:	d8ed      	bhi.n	10ba <HardFault_HandlerC+0x3e>
    10de:	9b01      	ldr	r3, [sp, #4]
    10e0:	3301      	adds	r3, #1
    10e2:	9301      	str	r3, [sp, #4]
    10e4:	9b01      	ldr	r3, [sp, #4]
    10e6:	428b      	cmp	r3, r1
    10e8:	d9f9      	bls.n	10de <HardFault_HandlerC+0x62>
    10ea:	e7e6      	b.n	10ba <HardFault_HandlerC+0x3e>
    10ec:	401bc000 	.word	0x401bc000
    10f0:	401f8000 	.word	0x401f8000
    10f4:	200003fc 	.word	0x200003fc
    10f8:	23c345ff 	.word	0x23c345ff
    10fc:	11e1a300 	.word	0x11e1a300
    1100:	000f423f 	.word	0x000f423f
    1104:	0089543f 	.word	0x0089543f

00001108 <_sbrk>:

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
        char *prev = __brkval;
    1108:	4a09      	ldr	r2, [pc, #36]	; (1130 <_sbrk+0x28>)
extern unsigned long _heap_end;

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
    110a:	b508      	push	{r3, lr}
        char *prev = __brkval;
    110c:	6813      	ldr	r3, [r2, #0]
        if (incr != 0) {
    110e:	b120      	cbz	r0, 111a <_sbrk+0x12>
                if (prev + incr > (char *)&_heap_end) {
    1110:	4418      	add	r0, r3
    1112:	4908      	ldr	r1, [pc, #32]	; (1134 <_sbrk+0x2c>)
    1114:	4288      	cmp	r0, r1
    1116:	d802      	bhi.n	111e <_sbrk+0x16>
                        errno = ENOMEM;
                        return (void *)-1;
                }
                __brkval = prev + incr;
    1118:	6010      	str	r0, [r2, #0]
        }
        return prev;
}
    111a:	4618      	mov	r0, r3
    111c:	bd08      	pop	{r3, pc}
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    111e:	f001 fa5d 	bl	25dc <__errno>
    1122:	220c      	movs	r2, #12
                        return (void *)-1;
    1124:	f04f 33ff 	mov.w	r3, #4294967295
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    1128:	6002      	str	r2, [r0, #0]
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    112a:	4618      	mov	r0, r3
    112c:	bd08      	pop	{r3, pc}
    112e:	bf00      	nop
    1130:	20000400 	.word	0x20000400
    1134:	20280000 	.word	0x20280000

00001138 <Panic_Temp_isr>:

static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
    1138:	b672      	cpsid	i
  IOMUXC_GPR_GPR16 = 0x00000007;
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
    113a:	4a06      	ldr	r2, [pc, #24]	; (1154 <Panic_Temp_isr+0x1c>)
static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
  IOMUXC_GPR_GPR16 = 0x00000007;
    113c:	2107      	movs	r1, #7
    113e:	4b06      	ldr	r3, [pc, #24]	; (1158 <Panic_Temp_isr+0x20>)
    1140:	6419      	str	r1, [r3, #64]	; 0x40
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
    1142:	6b93      	ldr	r3, [r2, #56]	; 0x38
    1144:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1148:	6393      	str	r3, [r2, #56]	; 0x38
  asm volatile ("dsb":::"memory");
    114a:	f3bf 8f4f 	dsb	sy
  while (1) asm ("wfi");
    114e:	bf30      	wfi
    1150:	e7fd      	b.n	114e <Panic_Temp_isr+0x16>
    1152:	bf00      	nop
    1154:	400d4000 	.word	0x400d4000
    1158:	400ac000 	.word	0x400ac000

0000115c <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    115c:	6b83      	ldr	r3, [r0, #56]	; 0x38
	}
}
#endif

static void schedule_transfer(endpoint_t *endpoint, uint32_t epmask, transfer_t *transfer)
{
    115e:	b4f0      	push	{r4, r5, r6, r7}
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    1160:	b11b      	cbz	r3, 116a <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    1162:	6853      	ldr	r3, [r2, #4]
    1164:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    1168:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    116a:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    116c:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    116e:	b1dc      	cbz	r4, 11a8 <schedule_transfer+0x4c>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    1170:	4b14      	ldr	r3, [pc, #80]	; (11c4 <schedule_transfer+0x68>)
	__disable_irq();
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
    1172:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    1174:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    1178:	420c      	tst	r4, r1
    117a:	d11f      	bne.n	11bc <schedule_transfer+0x60>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    117c:	4d12      	ldr	r5, [pc, #72]	; (11c8 <schedule_transfer+0x6c>)
    117e:	682f      	ldr	r7, [r5, #0]
    1180:	e004      	b.n	118c <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    1182:	682c      	ldr	r4, [r5, #0]
    1184:	1be4      	subs	r4, r4, r7
    1186:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
    118a:	d20b      	bcs.n	11a4 <schedule_transfer+0x48>
		if (USB1_ENDPTPRIME & epmask) goto end;
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    118c:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    1190:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    1194:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    1198:	f8d3 61b8 	ldr.w	r6, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    119c:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    11a0:	0464      	lsls	r4, r4, #17
    11a2:	d5ee      	bpl.n	1182 <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    11a4:	4231      	tst	r1, r6
    11a6:	d109      	bne.n	11bc <schedule_transfer+0x60>
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
    11a8:	2300      	movs	r3, #0
	USB1_ENDPTPRIME |= epmask;
    11aa:	4c06      	ldr	r4, [pc, #24]	; (11c4 <schedule_transfer+0x68>)
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
    11ac:	6082      	str	r2, [r0, #8]
	endpoint->status = 0;
    11ae:	60c3      	str	r3, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
    11b0:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    11b4:	4319      	orrs	r1, r3
    11b6:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    11ba:	6302      	str	r2, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
    11bc:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    11be:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    11c0:	bcf0      	pop	{r4, r5, r6, r7}
    11c2:	4770      	bx	lr
    11c4:	402e0000 	.word	0x402e0000
    11c8:	e0001004 	.word	0xe0001004

000011cc <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    11cc:	b570      	push	{r4, r5, r6, lr}
    11ce:	4606      	mov	r6, r0
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    11d0:	6b00      	ldr	r0, [r0, #48]	; 0x30
	if (first == NULL) return;
    11d2:	b190      	cbz	r0, 11fa <run_callbacks+0x2e>
    11d4:	4602      	mov	r2, r0
    11d6:	2400      	movs	r4, #0
    11d8:	e003      	b.n	11e2 <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    11da:	6812      	ldr	r2, [r2, #0]
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
    11dc:	3401      	adds	r4, #1
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
    11de:	2a01      	cmp	r2, #1
    11e0:	d00c      	beq.n	11fc <run_callbacks+0x30>

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
	transfer_t *t = first;
	while (1) {
		if (t->status & (1<<7)) {
    11e2:	6853      	ldr	r3, [r2, #4]
    11e4:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    11e8:	d0f7      	beq.n	11da <run_callbacks+0xe>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
    11ea:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    11ec:	b12c      	cbz	r4, 11fa <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
    11ee:	6bb3      	ldr	r3, [r6, #56]	; 0x38
			break;
		}
	}
	// do all the callbacks
	while (count) {
		transfer_t *next = (transfer_t *)first->next;
    11f0:	6805      	ldr	r5, [r0, #0]
		ep->callback_function(first);
    11f2:	4798      	blx	r3
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    11f4:	3c01      	subs	r4, #1
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
		first = next;
    11f6:	4628      	mov	r0, r5
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    11f8:	d1f9      	bne.n	11ee <run_callbacks+0x22>
    11fa:	bd70      	pop	{r4, r5, r6, pc}
		count++;
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
			// reached end of list, all need callbacks, new list is empty
			//printf(" end of list\n");
			ep->first_transfer = NULL;
    11fc:	6333      	str	r3, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
    11fe:	6373      	str	r3, [r6, #52]	; 0x34
			break;
    1200:	e7f4      	b.n	11ec <run_callbacks+0x20>
    1202:	bf00      	nop

00001204 <endpoint0_transmit.constprop.1>:
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
}

static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    1204:	b5f0      	push	{r4, r5, r6, r7, lr}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
    1206:	b9e1      	cbnz	r1, 1242 <endpoint0_transmit.constprop.1+0x3e>
    1208:	4c21      	ldr	r4, [pc, #132]	; (1290 <endpoint0_transmit.constprop.1+0x8c>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    120a:	4922      	ldr	r1, [pc, #136]	; (1294 <endpoint0_transmit.constprop.1+0x90>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    120c:	2000      	movs	r0, #0
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    120e:	4b22      	ldr	r3, [pc, #136]	; (1298 <endpoint0_transmit.constprop.1+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1210:	2201      	movs	r2, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1212:	f04f 1501 	mov.w	r5, #65537	; 0x10001
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1216:	2680      	movs	r6, #128	; 0x80
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1218:	600a      	str	r2, [r1, #0]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
    121a:	461a      	mov	r2, r3
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    121c:	60a1      	str	r1, [r4, #8]
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    121e:	604e      	str	r6, [r1, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
    1220:	60e0      	str	r0, [r4, #12]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1222:	f8c3 51bc 	str.w	r5, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    1226:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    122a:	4d1c      	ldr	r5, [pc, #112]	; (129c <endpoint0_transmit.constprop.1+0x98>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    122c:	f044 0401 	orr.w	r4, r4, #1
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1230:	6088      	str	r0, [r1, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    1232:	f8c3 41b0 	str.w	r4, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    1236:	6028      	str	r0, [r5, #0]
	while (USB1_ENDPTPRIME) ;
    1238:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    123c:	2b00      	cmp	r3, #0
    123e:	d1fb      	bne.n	1238 <endpoint0_transmit.constprop.1+0x34>
}
    1240:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    1242:	0409      	lsls	r1, r1, #16
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    1244:	4b16      	ldr	r3, [pc, #88]	; (12a0 <endpoint0_transmit.constprop.1+0x9c>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    1246:	4d14      	ldr	r5, [pc, #80]	; (1298 <endpoint0_transmit.constprop.1+0x94>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    1248:	2601      	movs	r6, #1
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    124a:	4c11      	ldr	r4, [pc, #68]	; (1290 <endpoint0_transmit.constprop.1+0x8c>)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    124c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    1250:	2200      	movs	r2, #0
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    1252:	601e      	str	r6, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    1254:	6059      	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    1256:	f500 5c80 	add.w	ip, r0, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    125a:	64e2      	str	r2, [r4, #76]	; 0x4c
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    125c:	f500 5e00 	add.w	lr, r0, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    1260:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    1262:	f500 5740 	add.w	r7, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    1266:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    126a:	f500 4680 	add.w	r6, r0, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
    126e:	462a      	mov	r2, r5
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    1270:	6098      	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    1272:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    1276:	f8c3 c00c 	str.w	ip, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    127a:	f8c3 e010 	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    127e:	615f      	str	r7, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    1280:	619e      	str	r6, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    1282:	f8c5 11b0 	str.w	r1, [r5, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    1286:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    128a:	2b00      	cmp	r3, #0
    128c:	d1fb      	bne.n	1286 <endpoint0_transmit.constprop.1+0x82>
    128e:	e7bc      	b.n	120a <endpoint0_transmit.constprop.1+0x6>
    1290:	20003000 	.word	0x20003000
    1294:	20002020 	.word	0x20002020
    1298:	402e0000 	.word	0x402e0000
    129c:	20001080 	.word	0x20001080
    12a0:	20002000 	.word	0x20002000

000012a4 <isr>:
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}


static void isr(void)
{
    12a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    12a8:	4cac      	ldr	r4, [pc, #688]	; (155c <isr+0x2b8>)
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}


static void isr(void)
{
    12aa:	b083      	sub	sp, #12
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    12ac:	f8d4 8144 	ldr.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    12b0:	f018 0f01 	tst.w	r8, #1
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
	USB1_USBSTS = status;
    12b4:	f8c4 8144 	str.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    12b8:	d05e      	beq.n	1378 <isr+0xd4>
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    12ba:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    12be:	2b00      	cmp	r3, #0
    12c0:	d055      	beq.n	136e <isr+0xca>
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    12c2:	f04f 1b01 	mov.w	fp, #65537	; 0x10001
    12c6:	f8df 92bc 	ldr.w	r9, [pc, #700]	; 1584 <isr+0x2e0>
    12ca:	4ea5      	ldr	r6, [pc, #660]	; (1560 <isr+0x2bc>)
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    12cc:	4625      	mov	r5, r4
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    12ce:	46da      	mov	sl, fp
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
    12d0:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
    12d4:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    12d6:	6af2      	ldr	r2, [r6, #44]	; 0x2c
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    12d8:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    12dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    12e0:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    12e4:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    12e8:	049f      	lsls	r7, r3, #18
    12ea:	d5f5      	bpl.n	12d8 <isr+0x34>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    12ec:	f8d5 3140 	ldr.w	r3, [r5, #320]	; 0x140
    12f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    12f4:	f8c5 3140 	str.w	r3, [r5, #320]	; 0x140
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    12f8:	f8c5 a1b4 	str.w	sl, [r5, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    12fc:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    1300:	f013 1301 	ands.w	r3, r3, #65537	; 0x10001
    1304:	d1fa      	bne.n	12fc <isr+0x58>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    1306:	b281      	uxth	r1, r0
    1308:	f240 6781 	movw	r7, #1665	; 0x681
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
    130c:	f8c9 3000 	str.w	r3, [r9]
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    1310:	42b9      	cmp	r1, r7
    1312:	f200 80b4 	bhi.w	147e <isr+0x1da>
    1316:	f5b1 6fd0 	cmp.w	r1, #1664	; 0x680
    131a:	f080 81e9 	bcs.w	16f0 <isr+0x44c>
    131e:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
    1322:	f000 816b 	beq.w	15fc <isr+0x358>
    1326:	f200 80f0 	bhi.w	150a <isr+0x266>
    132a:	2980      	cmp	r1, #128	; 0x80
    132c:	f000 8159 	beq.w	15e2 <isr+0x33e>
    1330:	2982      	cmp	r1, #130	; 0x82
    1332:	f040 80e2 	bne.w	14fa <isr+0x256>
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
    1336:	b292      	uxth	r2, r2
    1338:	f002 017f 	and.w	r1, r2, #127	; 0x7f
		if (endpoint > 7) break;
    133c:	2907      	cmp	r1, #7
    133e:	f200 80dc 	bhi.w	14fa <isr+0x256>
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    1342:	0089      	lsls	r1, r1, #2
    1344:	4887      	ldr	r0, [pc, #540]	; (1564 <isr+0x2c0>)
		reply_buffer[0] = 0;
    1346:	4f88      	ldr	r7, [pc, #544]	; (1568 <isr+0x2c4>)
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    1348:	4408      	add	r0, r1
    134a:	6801      	ldr	r1, [r0, #0]
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    134c:	0610      	lsls	r0, r2, #24
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
    134e:	703b      	strb	r3, [r7, #0]
		reply_buffer[1] = 0;
    1350:	707b      	strb	r3, [r7, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    1352:	f140 820c 	bpl.w	176e <isr+0x4ca>
    1356:	03ca      	lsls	r2, r1, #15
    1358:	d501      	bpl.n	135e <isr+0xba>
			reply_buffer[0] = 1;
    135a:	2301      	movs	r3, #1
    135c:	703b      	strb	r3, [r7, #0]
		}
		endpoint0_transmit(reply_buffer, 2, 0);
    135e:	2102      	movs	r1, #2
    1360:	4881      	ldr	r0, [pc, #516]	; (1568 <isr+0x2c4>)
    1362:	f7ff ff4f 	bl	1204 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1366:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    136a:	2b00      	cmp	r3, #0
    136c:	d1b0      	bne.n	12d0 <isr+0x2c>
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    136e:	4a7b      	ldr	r2, [pc, #492]	; (155c <isr+0x2b8>)
    1370:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    1374:	2b00      	cmp	r3, #0
    1376:	d150      	bne.n	141a <isr+0x176>
			}
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
    1378:	f018 0f40 	tst.w	r8, #64	; 0x40
    137c:	d018      	beq.n	13b0 <isr+0x10c>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    137e:	4b77      	ldr	r3, [pc, #476]	; (155c <isr+0x2b8>)
    1380:	f8d3 11ac 	ldr.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    1384:	461a      	mov	r2, r3
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    1386:	f8c3 11ac 	str.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    138a:	f8d3 11bc 	ldr.w	r1, [r3, #444]	; 0x1bc
    138e:	f8c3 11bc 	str.w	r1, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    1392:	f8d2 41b0 	ldr.w	r4, [r2, #432]	; 0x1b0
    1396:	4b71      	ldr	r3, [pc, #452]	; (155c <isr+0x2b8>)
    1398:	2c00      	cmp	r4, #0
    139a:	d1fa      	bne.n	1392 <isr+0xee>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    139c:	f04f 32ff 	mov.w	r2, #4294967295
    13a0:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    13a4:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
			// we took too long to respond :(
			// TODO; is this ever really a problem?
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
    13a8:	f000 fd1e 	bl	1de8 <usb_serial_reset>
		#endif
		endpointN_notify_mask = 0;
    13ac:	4b6f      	ldr	r3, [pc, #444]	; (156c <isr+0x2c8>)
    13ae:	601c      	str	r4, [r3, #0]
			// shut off USB - easier to see results in protocol analyzer
			//USB1_USBCMD &= ~USB_USBCMD_RS;
			//printf("shut off USB\n");
		//}
	}
	if (status & USB_USBSTS_TI0) {
    13b0:	f018 7f80 	tst.w	r8, #16777216	; 0x1000000
    13b4:	d003      	beq.n	13be <isr+0x11a>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    13b6:	4b6e      	ldr	r3, [pc, #440]	; (1570 <isr+0x2cc>)
    13b8:	681b      	ldr	r3, [r3, #0]
    13ba:	b103      	cbz	r3, 13be <isr+0x11a>
    13bc:	4798      	blx	r3
	}
	if (status & USB_USBSTS_TI1) {
    13be:	f018 7f00 	tst.w	r8, #33554432	; 0x2000000
    13c2:	d003      	beq.n	13cc <isr+0x128>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    13c4:	4b6b      	ldr	r3, [pc, #428]	; (1574 <isr+0x2d0>)
    13c6:	681b      	ldr	r3, [r3, #0]
    13c8:	b103      	cbz	r3, 13cc <isr+0x128>
    13ca:	4798      	blx	r3
	}
	if (status & USB_USBSTS_PCI) {
    13cc:	f018 0f04 	tst.w	r8, #4
    13d0:	d008      	beq.n	13e4 <isr+0x140>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    13d2:	4b62      	ldr	r3, [pc, #392]	; (155c <isr+0x2b8>)
    13d4:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    13d8:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    13dc:	d04c      	beq.n	1478 <isr+0x1d4>
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
    13de:	4b66      	ldr	r3, [pc, #408]	; (1578 <isr+0x2d4>)
    13e0:	2201      	movs	r2, #1
    13e2:	701a      	strb	r2, [r3, #0]
		//printf("suspend\n");
	}
	if (status & USB_USBSTS_UEI) {
		//printf("error\n");
	}
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    13e4:	4b5d      	ldr	r3, [pc, #372]	; (155c <isr+0x2b8>)
    13e6:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    13ea:	0612      	lsls	r2, r2, #24
    13ec:	d512      	bpl.n	1414 <isr+0x170>
    13ee:	f018 0f80 	tst.w	r8, #128	; 0x80
    13f2:	d00f      	beq.n	1414 <isr+0x170>
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
    13f4:	4961      	ldr	r1, [pc, #388]	; (157c <isr+0x2d8>)
    13f6:	780a      	ldrb	r2, [r1, #0]
    13f8:	b162      	cbz	r2, 1414 <isr+0x170>
			if (--usb_reboot_timer == 0) {
    13fa:	3a01      	subs	r2, #1
    13fc:	b2d2      	uxtb	r2, r2
    13fe:	700a      	strb	r2, [r1, #0]
    1400:	b942      	cbnz	r2, 1414 <isr+0x170>
	__enable_irq();
}

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
    1402:	495f      	ldr	r1, [pc, #380]	; (1580 <isr+0x2dc>)
    1404:	780a      	ldrb	r2, [r1, #0]
    1406:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    140a:	700a      	strb	r2, [r1, #0]
	if (sof_usage == 0) {
    140c:	2a00      	cmp	r2, #0
    140e:	f000 8232 	beq.w	1876 <isr+0x5d2>
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
			if (--usb_reboot_timer == 0) {
				usb_stop_sof_interrupts(NUM_INTERFACE);
				asm("bkpt #251"); // run bootloader
    1412:	befb      	bkpt	0x00fb
		#endif
		#ifdef FLIGHTSIM_INTERFACE
		usb_flightsim_flush_output();
		#endif
	}
}
    1414:	b003      	add	sp, #12
    1416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    141a:	495a      	ldr	r1, [pc, #360]	; (1584 <isr+0x2e0>)
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
    141c:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    1420:	6808      	ldr	r0, [r1, #0]
    1422:	4203      	tst	r3, r0
    1424:	f040 81e6 	bne.w	17f4 <isr+0x550>
				endpoint0_notify_mask = 0;
				endpoint0_complete();
			}
			completestatus &= endpointN_notify_mask;
    1428:	4a50      	ldr	r2, [pc, #320]	; (156c <isr+0x2c8>)
    142a:	6815      	ldr	r5, [r2, #0]
#if 1
			if (completestatus) {
    142c:	401d      	ands	r5, r3
    142e:	d0a3      	beq.n	1378 <isr+0xd4>

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
    1430:	0c2f      	lsrs	r7, r5, #16
    1432:	d00f      	beq.n	1454 <isr+0x1b0>
    1434:	4e4a      	ldr	r6, [pc, #296]	; (1560 <isr+0x2bc>)
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
    1436:	f04f 0901 	mov.w	r9, #1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
    143a:	fa97 f4a7 	rbit	r4, r7
    143e:	fab4 f484 	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    1442:	eb06 10c4 	add.w	r0, r6, r4, lsl #7
					tx &= ~(1<<p);
    1446:	fa09 f404 	lsl.w	r4, r9, r4

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    144a:	3040      	adds	r0, #64	; 0x40
    144c:	f7ff febe 	bl	11cc <run_callbacks>
#if 1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
    1450:	43a7      	bics	r7, r4
    1452:	d1f2      	bne.n	143a <isr+0x196>
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
    1454:	b2ad      	uxth	r5, r5
				while(rx) {
    1456:	2d00      	cmp	r5, #0
    1458:	d08e      	beq.n	1378 <isr+0xd4>
    145a:	4e41      	ldr	r6, [pc, #260]	; (1560 <isr+0x2bc>)
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
					rx &= ~(1<<p);
    145c:	2701      	movs	r7, #1
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
    145e:	fa95 f4a5 	rbit	r4, r5
    1462:	fab4 f484 	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2);
    1466:	eb06 10c4 	add.w	r0, r6, r4, lsl #7
					rx &= ~(1<<p);
    146a:	fa07 f404 	lsl.w	r4, r7, r4

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
    146e:	f7ff fead 	bl	11cc <run_callbacks>
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
    1472:	43a5      	bics	r5, r4
    1474:	d1f3      	bne.n	145e <isr+0x1ba>
    1476:	e77f      	b.n	1378 <isr+0xd4>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
		} else {
			//printf("port at 12 Mbit\n");
			usb_high_speed = 0;
    1478:	4a3f      	ldr	r2, [pc, #252]	; (1578 <isr+0x2d4>)
    147a:	7013      	strb	r3, [r2, #0]
    147c:	e7b2      	b.n	13e4 <isr+0x140>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    147e:	f242 0721 	movw	r7, #8225	; 0x2021
    1482:	42b9      	cmp	r1, r7
    1484:	d035      	beq.n	14f2 <isr+0x24e>
    1486:	f200 8089 	bhi.w	159c <isr+0x2f8>
    148a:	f5b1 6f08 	cmp.w	r1, #2176	; 0x880
    148e:	f000 8121 	beq.w	16d4 <isr+0x430>
    1492:	f5b1 6f10 	cmp.w	r1, #2304	; 0x900
    1496:	d130      	bne.n	14fa <isr+0x256>
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    1498:	f3c0 4007 	ubfx	r0, r0, #16, #8
    149c:	4a3a      	ldr	r2, [pc, #232]	; (1588 <isr+0x2e4>)
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    149e:	493b      	ldr	r1, [pc, #236]	; (158c <isr+0x2e8>)
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    14a0:	7010      	strb	r0, [r2, #0]
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    14a2:	4f3b      	ldr	r7, [pc, #236]	; (1590 <isr+0x2ec>)
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    14a4:	4a3b      	ldr	r2, [pc, #236]	; (1594 <isr+0x2f0>)
    14a6:	9301      	str	r3, [sp, #4]
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    14a8:	f8c5 71c8 	str.w	r7, [r5, #456]	; 0x1c8
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    14ac:	f8c5 11cc 	str.w	r1, [r5, #460]	; 0x1cc
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    14b0:	f8c5 21d0 	str.w	r2, [r5, #464]	; 0x1d0
		#endif
		#if defined(ENDPOINT7_CONFIG)
		USB1_ENDPTCTRL7 = ENDPOINT7_CONFIG;
		#endif
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_configure();
    14b4:	f000 fc9a 	bl	1dec <usb_serial_configure>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    14b8:	4a37      	ldr	r2, [pc, #220]	; (1598 <isr+0x2f4>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    14ba:	9b01      	ldr	r3, [sp, #4]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    14bc:	2180      	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    14be:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    14c0:	64b2      	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    14c2:	6051      	str	r1, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    14c4:	6010      	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    14c6:	64f3      	str	r3, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    14c8:	f8c5 b1bc 	str.w	fp, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    14cc:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    14d0:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    14d2:	f441 3280 	orr.w	r2, r1, #65536	; 0x10000
    14d6:	f8c5 21b0 	str.w	r2, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    14da:	4a2a      	ldr	r2, [pc, #168]	; (1584 <isr+0x2e0>)
    14dc:	6013      	str	r3, [r2, #0]
	while (USB1_ENDPTPRIME) ;
    14de:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    14e2:	2b00      	cmp	r3, #0
    14e4:	d1fb      	bne.n	14de <isr+0x23a>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    14e6:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    14ea:	2b00      	cmp	r3, #0
    14ec:	f47f aef0 	bne.w	12d0 <isr+0x2c>
    14f0:	e73d      	b.n	136e <isr+0xca>
		// fall through to next case, to always send ZLP ACK
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
    14f2:	0c11      	lsrs	r1, r2, #16
    14f4:	2907      	cmp	r1, #7
    14f6:	f000 813e 	beq.w	1776 <isr+0x4d2>
			return;
		}
		break;
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    14fa:	f8c4 b1c0 	str.w	fp, [r4, #448]	; 0x1c0
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    14fe:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1502:	2b00      	cmp	r3, #0
    1504:	f47f aee4 	bne.w	12d0 <isr+0x2c>
    1508:	e731      	b.n	136e <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    150a:	f240 3702 	movw	r7, #770	; 0x302
    150e:	42b9      	cmp	r1, r7
    1510:	f000 80b0 	beq.w	1674 <isr+0x3d0>
    1514:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
    1518:	d1ef      	bne.n	14fa <isr+0x256>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    151a:	4a1f      	ldr	r2, [pc, #124]	; (1598 <isr+0x2f4>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    151c:	2180      	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    151e:	2701      	movs	r7, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    1520:	64f3      	str	r3, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1522:	64b2      	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1524:	6017      	str	r7, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1526:	6051      	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1528:	f8c5 b1bc 	str.w	fp, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    152c:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1530:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    1532:	f441 3380 	orr.w	r3, r1, #65536	; 0x10000
    1536:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    153a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    153e:	2b00      	cmp	r3, #0
    1540:	d1fb      	bne.n	153a <isr+0x296>

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    1542:	0c03      	lsrs	r3, r0, #16
    1544:	065b      	lsls	r3, r3, #25
    1546:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    154a:	f8c5 3154 	str.w	r3, [r5, #340]	; 0x154
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    154e:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1552:	2b00      	cmp	r3, #0
    1554:	f47f aebc 	bne.w	12d0 <isr+0x2c>
    1558:	e709      	b.n	136e <isr+0xca>
    155a:	bf00      	nop
    155c:	402e0000 	.word	0x402e0000
    1560:	20003000 	.word	0x20003000
    1564:	402e01c0 	.word	0x402e01c0
    1568:	20001090 	.word	0x20001090
    156c:	20001070 	.word	0x20001070
    1570:	2000106c 	.word	0x2000106c
    1574:	20001078 	.word	0x20001078
    1578:	2000107c 	.word	0x2000107c
    157c:	20001084 	.word	0x20001084
    1580:	20001074 	.word	0x20001074
    1584:	20001080 	.word	0x20001080
    1588:	200010a0 	.word	0x200010a0
    158c:	000200c8 	.word	0x000200c8
    1590:	00cc0002 	.word	0x00cc0002
    1594:	00c80002 	.word	0x00c80002
    1598:	20002020 	.word	0x20002020
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    159c:	f242 2321 	movw	r3, #8737	; 0x2221
    15a0:	4299      	cmp	r1, r3
    15a2:	d05b      	beq.n	165c <isr+0x3b8>
    15a4:	f242 3321 	movw	r3, #8993	; 0x2321
    15a8:	4299      	cmp	r1, r3
    15aa:	d1a6      	bne.n	14fa <isr+0x256>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    15ac:	4bb5      	ldr	r3, [pc, #724]	; (1884 <isr+0x5e0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    15ae:	2280      	movs	r2, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    15b0:	2100      	movs	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    15b2:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    15b4:	64b3      	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    15b6:	6018      	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    15b8:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    15ba:	64f1      	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    15bc:	f8c4 b1bc 	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    15c0:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    15c4:	6099      	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    15c6:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
    15ca:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    15ce:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    15d2:	2b00      	cmp	r3, #0
    15d4:	d1fb      	bne.n	15ce <isr+0x32a>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    15d6:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    15da:	2b00      	cmp	r3, #0
    15dc:	f47f ae78 	bne.w	12d0 <isr+0x2c>
    15e0:	e6c5      	b.n	136e <isr+0xca>
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    15e2:	4aa9      	ldr	r2, [pc, #676]	; (1888 <isr+0x5e4>)
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
    15e4:	2102      	movs	r1, #2
    15e6:	4610      	mov	r0, r2
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    15e8:	7013      	strb	r3, [r2, #0]
		reply_buffer[1] = 0;
    15ea:	7053      	strb	r3, [r2, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    15ec:	f7ff fe0a 	bl	1204 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    15f0:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    15f4:	2b00      	cmp	r3, #0
    15f6:	f47f ae6b 	bne.w	12d0 <isr+0x2c>
    15fa:	e6b8      	b.n	136e <isr+0xca>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    15fc:	b292      	uxth	r2, r2
    15fe:	f002 037f 	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    1602:	2b07      	cmp	r3, #7
    1604:	f63f af79 	bhi.w	14fa <isr+0x256>
		dir = setup.wIndex & 0x80;
		if (dir) {
    1608:	f012 0f80 	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    160c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1610:	4a9e      	ldr	r2, [pc, #632]	; (188c <isr+0x5e8>)
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1612:	f04f 0100 	mov.w	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1616:	f04f 0001 	mov.w	r0, #1
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    161a:	441a      	add	r2, r3
    161c:	6813      	ldr	r3, [r2, #0]
    161e:	bf14      	ite	ne
    1620:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    1624:	f023 0301 	biceq.w	r3, r3, #1
    1628:	6013      	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    162a:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    162c:	4b95      	ldr	r3, [pc, #596]	; (1884 <isr+0x5e0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    162e:	64f1      	str	r1, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1630:	64b3      	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1632:	6018      	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1634:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1636:	f8c4 b1bc 	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    163a:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    163e:	6099      	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    1640:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
    1644:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    1648:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    164c:	2b00      	cmp	r3, #0
    164e:	d1fb      	bne.n	1648 <isr+0x3a4>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1650:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1654:	2b00      	cmp	r3, #0
    1656:	f47f ae3b 	bne.w	12d0 <isr+0x2c>
    165a:	e688      	b.n	136e <isr+0xca>
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    165c:	b292      	uxth	r2, r2
    165e:	2a00      	cmp	r2, #0
    1660:	d1a4      	bne.n	15ac <isr+0x308>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    1662:	4b8b      	ldr	r3, [pc, #556]	; (1890 <isr+0x5ec>)
			usb_cdc_line_rtsdtr = setup.wValue;
    1664:	f3c0 4007 	ubfx	r0, r0, #16, #8
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    1668:	4a8a      	ldr	r2, [pc, #552]	; (1894 <isr+0x5f0>)
    166a:	6819      	ldr	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    166c:	4b8a      	ldr	r3, [pc, #552]	; (1898 <isr+0x5f4>)
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    166e:	6011      	str	r1, [r2, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    1670:	7018      	strb	r0, [r3, #0]
    1672:	e79b      	b.n	15ac <isr+0x308>
			reply_buffer[0] = 1;
		}
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    1674:	b292      	uxth	r2, r2
    1676:	f002 037f 	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    167a:	2b07      	cmp	r3, #7
    167c:	f63f af3d 	bhi.w	14fa <isr+0x256>
		dir = setup.wIndex & 0x80;
		if (dir) {
    1680:	f012 0f80 	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    1684:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1688:	4a80      	ldr	r2, [pc, #512]	; (188c <isr+0x5e8>)
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    168a:	f04f 0100 	mov.w	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    168e:	f04f 0001 	mov.w	r0, #1
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    1692:	441a      	add	r2, r3
    1694:	6813      	ldr	r3, [r2, #0]
    1696:	bf14      	ite	ne
    1698:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    169c:	f043 0301 	orreq.w	r3, r3, #1
    16a0:	6013      	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    16a2:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    16a4:	4b77      	ldr	r3, [pc, #476]	; (1884 <isr+0x5e0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    16a6:	64f1      	str	r1, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    16a8:	64b3      	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    16aa:	6018      	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    16ac:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    16ae:	f8c4 b1bc 	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    16b2:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    16b6:	6099      	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    16b8:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
    16bc:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    16c0:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    16c4:	2b00      	cmp	r3, #0
    16c6:	d1fb      	bne.n	16c0 <isr+0x41c>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    16c8:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    16cc:	2b00      	cmp	r3, #0
    16ce:	f47f adff 	bne.w	12d0 <isr+0x2c>
    16d2:	e64c      	b.n	136e <isr+0xca>
		usb_audio_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    16d4:	4a71      	ldr	r2, [pc, #452]	; (189c <isr+0x5f8>)
		endpoint0_transmit(reply_buffer, 1, 0);
    16d6:	2101      	movs	r1, #1
		usb_audio_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    16d8:	4b6b      	ldr	r3, [pc, #428]	; (1888 <isr+0x5e4>)
    16da:	7812      	ldrb	r2, [r2, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    16dc:	4618      	mov	r0, r3
		usb_audio_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    16de:	701a      	strb	r2, [r3, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    16e0:	f7ff fd90 	bl	1204 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    16e4:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    16e8:	2b00      	cmp	r3, #0
    16ea:	f47f adf1 	bne.w	12d0 <isr+0x2c>
    16ee:	e63e      	b.n	136e <isr+0xca>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    16f0:	4b6b      	ldr	r3, [pc, #428]	; (18a0 <isr+0x5fc>)
    16f2:	6859      	ldr	r1, [r3, #4]
    16f4:	2900      	cmp	r1, #0
    16f6:	f43f af00 	beq.w	14fa <isr+0x256>
    16fa:	0c00      	lsrs	r0, r0, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    16fc:	fa1f fe82 	uxth.w	lr, r2
    1700:	e004      	b.n	170c <isr+0x468>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    1702:	330c      	adds	r3, #12
    1704:	6859      	ldr	r1, [r3, #4]
    1706:	2900      	cmp	r1, #0
    1708:	f43f aef7 	beq.w	14fa <isr+0x256>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    170c:	881f      	ldrh	r7, [r3, #0]
    170e:	4287      	cmp	r7, r0
    1710:	d1f7      	bne.n	1702 <isr+0x45e>
    1712:	885f      	ldrh	r7, [r3, #2]
    1714:	4577      	cmp	r7, lr
    1716:	d1f4      	bne.n	1702 <isr+0x45e>
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
    1718:	0a07      	lsrs	r7, r0, #8
    171a:	2f03      	cmp	r7, #3
    171c:	f000 80e9 	beq.w	18f2 <isr+0x64e>
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
    1720:	891b      	ldrh	r3, [r3, #8]
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    1722:	0c12      	lsrs	r2, r2, #16
    1724:	4293      	cmp	r3, r2
    1726:	bf28      	it	cs
    1728:	4613      	movcs	r3, r2

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
    172a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    172e:	f000 80d1 	beq.w	18d4 <isr+0x630>
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
    1732:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
    1736:	f000 808b 	beq.w	1850 <isr+0x5ac>
    173a:	4f5a      	ldr	r7, [pc, #360]	; (18a4 <isr+0x600>)
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
					usb_descriptor_buffer[1] = 7;
				} else {
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    173c:	461a      	mov	r2, r3
    173e:	9301      	str	r3, [sp, #4]
    1740:	4638      	mov	r0, r7
    1742:	f000 fe87 	bl	2454 <memcpy>
    1746:	9b01      	ldr	r3, [sp, #4]
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    1748:	f027 021f 	bic.w	r2, r7, #31
	uint32_t end_addr = (uint32_t)addr + size;
    174c:	441f      	add	r7, r3
	asm volatile("": : :"memory");
	asm("dsb");
    174e:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    1752:	4955      	ldr	r1, [pc, #340]	; (18a8 <isr+0x604>)
    1754:	600a      	str	r2, [r1, #0]
		location += 32;
    1756:	3220      	adds	r2, #32
	} while (location < end_addr);
    1758:	4297      	cmp	r7, r2
    175a:	d8fa      	bhi.n	1752 <isr+0x4ae>
	asm("dsb");
    175c:	f3bf 8f4f 	dsb	sy
	asm("isb");
    1760:	f3bf 8f6f 	isb	sy
				}
				// prep transmit
				arm_dcache_flush_delete(usb_descriptor_buffer, datalen);
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    1764:	484f      	ldr	r0, [pc, #316]	; (18a4 <isr+0x600>)
    1766:	4619      	mov	r1, r3
    1768:	f7ff fd4c 	bl	1204 <endpoint0_transmit.constprop.1>
    176c:	e5fb      	b.n	1366 <isr+0xc2>
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    176e:	07cb      	lsls	r3, r1, #31
    1770:	f57f adf5 	bpl.w	135e <isr+0xba>
    1774:	e5f1      	b.n	135a <isr+0xb6>
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    1776:	4f4d      	ldr	r7, [pc, #308]	; (18ac <isr+0x608>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    1778:	f04f 0e01 	mov.w	lr, #1
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
    177c:	60f3      	str	r3, [r6, #12]
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    177e:	494c      	ldr	r1, [pc, #304]	; (18b0 <isr+0x60c>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    1780:	4b4c      	ldr	r3, [pc, #304]	; (18b4 <isr+0x610>)
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    1782:	6038      	str	r0, [r7, #0]
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    1784:	f8c3 e000 	str.w	lr, [r3]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    1788:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    178a:	60b3      	str	r3, [r6, #8]
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
    178c:	494a      	ldr	r1, [pc, #296]	; (18b8 <isr+0x614>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    178e:	f8d5 01b0 	ldr.w	r0, [r5, #432]	; 0x1b0
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    1792:	607a      	str	r2, [r7, #4]
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    1794:	f501 5780 	add.w	r7, r1, #4096	; 0x1000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    1798:	ea40 020e 	orr.w	r2, r0, lr
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    179c:	6099      	str	r1, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    179e:	f501 5e00 	add.w	lr, r1, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    17a2:	f501 5040 	add.w	r0, r1, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    17a6:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    17aa:	f8c5 21b0 	str.w	r2, [r5, #432]	; 0x1b0
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    17ae:	60df      	str	r7, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    17b0:	f8c3 e010 	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    17b4:	6158      	str	r0, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    17b6:	6199      	str	r1, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
    17b8:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    17bc:	2b00      	cmp	r3, #0
    17be:	d1fb      	bne.n	17b8 <isr+0x514>
	}
	endpoint0_transfer_ack.next = 1;
    17c0:	4a30      	ldr	r2, [pc, #192]	; (1884 <isr+0x5e0>)
    17c2:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    17c4:	f248 0180 	movw	r1, #32896	; 0x8080
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    17c8:	64f3      	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    17ca:	6010      	str	r0, [r2, #0]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    17cc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    17d0:	64b2      	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    17d2:	6051      	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    17d4:	f8c5 b1bc 	str.w	fp, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    17d8:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    17dc:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    17de:	ea41 0300 	orr.w	r3, r1, r0
    17e2:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    17e6:	f8c9 0000 	str.w	r0, [r9]
	while (USB1_ENDPTPRIME) ;
    17ea:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    17ee:	2b00      	cmp	r3, #0
    17f0:	d1fb      	bne.n	17ea <isr+0x546>
    17f2:	e5b8      	b.n	1366 <isr+0xc2>

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    17f4:	482d      	ldr	r0, [pc, #180]	; (18ac <isr+0x608>)
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    17f6:	f242 0421 	movw	r4, #8225	; 0x2021
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    17fa:	2600      	movs	r6, #0

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    17fc:	8805      	ldrh	r5, [r0, #0]
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    17fe:	600e      	str	r6, [r1, #0]

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    1800:	42a5      	cmp	r5, r4

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    1802:	6840      	ldr	r0, [r0, #4]
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    1804:	f47f ae10 	bne.w	1428 <isr+0x184>
    1808:	b281      	uxth	r1, r0
    180a:	2900      	cmp	r1, #0
    180c:	f47f ae0c 	bne.w	1428 <isr+0x184>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    1810:	4929      	ldr	r1, [pc, #164]	; (18b8 <isr+0x614>)
    1812:	4c2a      	ldr	r4, [pc, #168]	; (18bc <isr+0x618>)
    1814:	c903      	ldmia	r1, {r0, r1}
    1816:	0c0d      	lsrs	r5, r1, #16
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    1818:	2886      	cmp	r0, #134	; 0x86
	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    181a:	6020      	str	r0, [r4, #0]
    181c:	80a1      	strh	r1, [r4, #4]
    181e:	71a5      	strb	r5, [r4, #6]
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    1820:	f47f ae02 	bne.w	1428 <isr+0x184>
}


void usb_start_sof_interrupts(int interface)
{
	__disable_irq();
    1824:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    1826:	4826      	ldr	r0, [pc, #152]	; (18c0 <isr+0x61c>)
    1828:	7801      	ldrb	r1, [r0, #0]
    182a:	f041 0104 	orr.w	r1, r1, #4
    182e:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    1830:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    1834:	0608      	lsls	r0, r1, #24
    1836:	d406      	bmi.n	1846 <isr+0x5a2>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    1838:	f041 0180 	orr.w	r1, r1, #128	; 0x80
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    183c:	2080      	movs	r0, #128	; 0x80
    183e:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    1842:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	}
	__enable_irq();
    1846:	b662      	cpsie	i
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
			usb_start_sof_interrupts(NUM_INTERFACE);
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    1848:	4a1e      	ldr	r2, [pc, #120]	; (18c4 <isr+0x620>)
    184a:	2150      	movs	r1, #80	; 0x50
    184c:	7011      	strb	r1, [r2, #0]
    184e:	e5eb      	b.n	1428 <isr+0x184>
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    1850:	481d      	ldr	r0, [pc, #116]	; (18c8 <isr+0x624>)
					memcpy(usb_descriptor_buffer, src, datalen);
    1852:	461a      	mov	r2, r3
    1854:	4f13      	ldr	r7, [pc, #76]	; (18a4 <isr+0x600>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    1856:	f890 e000 	ldrb.w	lr, [r0]
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
    185a:	491c      	ldr	r1, [pc, #112]	; (18cc <isr+0x628>)
    185c:	481c      	ldr	r0, [pc, #112]	; (18d0 <isr+0x62c>)
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
    185e:	9301      	str	r3, [sp, #4]
    1860:	f1be 0f00 	cmp.w	lr, #0
    1864:	bf08      	it	eq
    1866:	4601      	moveq	r1, r0
    1868:	4638      	mov	r0, r7
    186a:	f000 fdf3 	bl	2454 <memcpy>
					usb_descriptor_buffer[1] = 7;
    186e:	2207      	movs	r2, #7
    1870:	9b01      	ldr	r3, [sp, #4]
    1872:	707a      	strb	r2, [r7, #1]
    1874:	e768      	b.n	1748 <isr+0x4a4>

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
	if (sof_usage == 0) {
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    1876:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    187a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    187e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    1882:	e5c6      	b.n	1412 <isr+0x16e>
    1884:	20002020 	.word	0x20002020
    1888:	20001090 	.word	0x20001090
    188c:	402e01c0 	.word	0x402e01c0
    1890:	20001058 	.word	0x20001058
    1894:	20003288 	.word	0x20003288
    1898:	200011e8 	.word	0x200011e8
    189c:	200010a0 	.word	0x200010a0
    18a0:	200000dc 	.word	0x200000dc
    18a4:	20200000 	.word	0x20200000
    18a8:	e000ef70 	.word	0xe000ef70
    18ac:	20001088 	.word	0x20001088
    18b0:	00070080 	.word	0x00070080
    18b4:	20002000 	.word	0x20002000
    18b8:	20001098 	.word	0x20001098
    18bc:	20003280 	.word	0x20003280
    18c0:	20001074 	.word	0x20001074
    18c4:	20001084 	.word	0x20001084
    18c8:	2000107c 	.word	0x2000107c
    18cc:	60001694 	.word	0x60001694
    18d0:	600016d8 	.word	0x600016d8

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
    18d4:	480a      	ldr	r0, [pc, #40]	; (1900 <isr+0x65c>)
					memcpy(usb_descriptor_buffer, src, datalen);
    18d6:	461a      	mov	r2, r3
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    18d8:	490a      	ldr	r1, [pc, #40]	; (1904 <isr+0x660>)
					if (usb_high_speed) src = usb_config_descriptor_480;
    18da:	7807      	ldrb	r7, [r0, #0]
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    18dc:	480a      	ldr	r0, [pc, #40]	; (1908 <isr+0x664>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
    18de:	9301      	str	r3, [sp, #4]
    18e0:	2f00      	cmp	r7, #0
    18e2:	bf08      	it	eq
    18e4:	4601      	moveq	r1, r0
    18e6:	4809      	ldr	r0, [pc, #36]	; (190c <isr+0x668>)
    18e8:	f000 fdb4 	bl	2454 <memcpy>
    18ec:	4f07      	ldr	r7, [pc, #28]	; (190c <isr+0x668>)
    18ee:	9b01      	ldr	r3, [sp, #4]
    18f0:	e72a      	b.n	1748 <isr+0x4a4>
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    18f2:	0c12      	lsrs	r2, r2, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
    18f4:	780b      	ldrb	r3, [r1, #0]
    18f6:	4293      	cmp	r3, r2
    18f8:	bf28      	it	cs
    18fa:	4613      	movcs	r3, r2
    18fc:	e719      	b.n	1732 <isr+0x48e>
    18fe:	bf00      	nop
    1900:	2000107c 	.word	0x2000107c
    1904:	600016d8 	.word	0x600016d8
    1908:	60001694 	.word	0x60001694
    190c:	20200000 	.word	0x20200000

00001910 <usb_config_rx>:
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1910:	2a00      	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    1912:	f1a0 0202 	sub.w	r2, r0, #2
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    1916:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    191a:	bf14      	ite	ne
    191c:	2700      	movne	r7, #0
    191e:	f04f 5700 	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    1922:	2a02      	cmp	r2, #2
    1924:	d901      	bls.n	192a <usb_config_rx+0x1a>
    1926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    192a:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
    192e:	f8df 9040 	ldr.w	r9, [pc, #64]	; 1970 <usb_config_rx+0x60>
    1932:	460d      	mov	r5, r1
    1934:	4604      	mov	r4, r0
    1936:	eb0a 0609 	add.w	r6, sl, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    193a:	2100      	movs	r1, #0
    193c:	2240      	movs	r2, #64	; 0x40
    193e:	4698      	mov	r8, r3
    1940:	4630      	mov	r0, r6
    1942:	f001 f9ab 	bl	2c9c <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    1946:	2001      	movs	r0, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    1948:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
    194c:	f84a 1009 	str.w	r1, [sl, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    1950:	f8c6 8038 	str.w	r8, [r6, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    1954:	60b0      	str	r0, [r6, #8]
void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
    1956:	f1b8 0f00 	cmp.w	r8, #0
    195a:	d0e4      	beq.n	1926 <usb_config_rx+0x16>
    195c:	4b03      	ldr	r3, [pc, #12]	; (196c <usb_config_rx+0x5c>)
    195e:	40a0      	lsls	r0, r4
    1960:	681c      	ldr	r4, [r3, #0]
    1962:	4320      	orrs	r0, r4
    1964:	6018      	str	r0, [r3, #0]
    1966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    196a:	bf00      	nop
    196c:	20001070 	.word	0x20001070
    1970:	20003000 	.word	0x20003000

00001974 <usb_config_tx>:
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1974:	2a00      	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    1976:	f1a0 0202 	sub.w	r2, r0, #2
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    197a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    197e:	bf14      	ite	ne
    1980:	2700      	movne	r7, #0
    1982:	f04f 5700 	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    1986:	2a02      	cmp	r2, #2
    1988:	d901      	bls.n	198e <usb_config_tx+0x1a>
    198a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    198e:	2240      	movs	r2, #64	; 0x40

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    1990:	01c5      	lsls	r5, r0, #7
    1992:	f8df 9044 	ldr.w	r9, [pc, #68]	; 19d8 <usb_config_tx+0x64>
    1996:	4688      	mov	r8, r1
    1998:	4415      	add	r5, r2
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    199a:	2100      	movs	r1, #0
    199c:	4604      	mov	r4, r0
    199e:	461e      	mov	r6, r3

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    19a0:	eb05 0a09 	add.w	sl, r5, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    19a4:	4650      	mov	r0, sl
    19a6:	f001 f979 	bl	2c9c <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    19aa:	2201      	movs	r2, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    19ac:	ea47 4108 	orr.w	r1, r7, r8, lsl #16
    19b0:	f845 1009 	str.w	r1, [r5, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    19b4:	f8ca 6038 	str.w	r6, [sl, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    19b8:	f8ca 2008 	str.w	r2, [sl, #8]
void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    19bc:	2e00      	cmp	r6, #0
    19be:	d0e4      	beq.n	198a <usb_config_tx+0x16>
    19c0:	f104 0010 	add.w	r0, r4, #16
    19c4:	4b03      	ldr	r3, [pc, #12]	; (19d4 <usb_config_tx+0x60>)
    19c6:	4082      	lsls	r2, r0
    19c8:	6818      	ldr	r0, [r3, #0]
    19ca:	4302      	orrs	r2, r0
    19cc:	601a      	str	r2, [r3, #0]
    19ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    19d2:	bf00      	nop
    19d4:	20001070 	.word	0x20001070
    19d8:	20003000 	.word	0x20003000

000019dc <usb_prepare_transfer>:


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    19dc:	0412      	lsls	r2, r2, #16
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
    19de:	6081      	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
	transfer->pointer3 = addr + 12288;
	transfer->pointer4 = addr + 16384;
	transfer->callback_param = param;
    19e0:	61c3      	str	r3, [r0, #28]


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    19e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
}



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
    19e6:	b4f0      	push	{r4, r5, r6, r7}
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    19e8:	6042      	str	r2, [r0, #4]



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    19ea:	2701      	movs	r7, #1
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    19ec:	f501 5680 	add.w	r6, r1, #4096	; 0x1000
	transfer->pointer2 = addr + 8192;
    19f0:	f501 5500 	add.w	r5, r1, #8192	; 0x2000
	transfer->pointer3 = addr + 12288;
    19f4:	f501 5440 	add.w	r4, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    19f8:	f501 4280 	add.w	r2, r1, #16384	; 0x4000



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    19fc:	6007      	str	r7, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    19fe:	60c6      	str	r6, [r0, #12]
	transfer->pointer2 = addr + 8192;
    1a00:	6105      	str	r5, [r0, #16]
	transfer->pointer3 = addr + 12288;
    1a02:	6144      	str	r4, [r0, #20]
	transfer->pointer4 = addr + 16384;
    1a04:	6182      	str	r2, [r0, #24]
	transfer->callback_param = param;
}
    1a06:	bcf0      	pop	{r4, r5, r6, r7}
    1a08:	4770      	bx	lr
    1a0a:	bf00      	nop

00001a0c <usb_transmit>:
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    1a0c:	1e83      	subs	r3, r0, #2
    1a0e:	2b02      	cmp	r3, #2
    1a10:	d900      	bls.n	1a14 <usb_transmit+0x8>
    1a12:	4770      	bx	lr
		count--;
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    1a14:	b430      	push	{r4, r5}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    1a16:	4b06      	ldr	r3, [pc, #24]	; (1a30 <usb_transmit+0x24>)
    1a18:	f100 0410 	add.w	r4, r0, #16
    1a1c:	2501      	movs	r5, #1
    1a1e:	460a      	mov	r2, r1
    1a20:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    1a24:	fa05 f104 	lsl.w	r1, r5, r4
}
    1a28:	bc30      	pop	{r4, r5}
void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    1a2a:	f7ff bb97 	b.w	115c <schedule_transfer>
    1a2e:	bf00      	nop
    1a30:	20003040 	.word	0x20003040

00001a34 <usb_receive>:
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    1a34:	1e83      	subs	r3, r0, #2
    1a36:	2b02      	cmp	r3, #2
    1a38:	d900      	bls.n	1a3c <usb_receive+0x8>
    1a3a:	4770      	bx	lr
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
    1a3c:	b410      	push	{r4}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    1a3e:	4b05      	ldr	r3, [pc, #20]	; (1a54 <usb_receive+0x20>)
    1a40:	2401      	movs	r4, #1
    1a42:	460a      	mov	r2, r1
    1a44:	fa04 f100 	lsl.w	r1, r4, r0
    1a48:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
}
    1a4c:	f85d 4b04 	ldr.w	r4, [sp], #4
void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    1a50:	f7ff bb84 	b.w	115c <schedule_transfer>
    1a54:	20003000 	.word	0x20003000

00001a58 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    1a58:	6840      	ldr	r0, [r0, #4]
#endif
}
    1a5a:	4770      	bx	lr

00001a5c <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    1a5c:	4a12      	ldr	r2, [pc, #72]	; (1aa8 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    1a5e:	4b13      	ldr	r3, [pc, #76]	; (1aac <usb_init_serialnumber+0x50>)
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    1a60:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    1a64:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    1a68:	4298      	cmp	r0, r3
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    1a6a:	b510      	push	{r4, lr}
    1a6c:	b084      	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    1a6e:	d802      	bhi.n	1a76 <usb_init_serialnumber+0x1a>
    1a70:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    1a74:	0040      	lsls	r0, r0, #1
    1a76:	4c0e      	ldr	r4, [pc, #56]	; (1ab0 <usb_init_serialnumber+0x54>)
	ultoa(num, buf, 10);
    1a78:	a901      	add	r1, sp, #4
    1a7a:	220a      	movs	r2, #10
    1a7c:	f000 fd84 	bl	2588 <ultoa>
    1a80:	a901      	add	r1, sp, #4
	for (i=0; i<10; i++) {
    1a82:	2300      	movs	r3, #0
    1a84:	4620      	mov	r0, r4
		char c = buf[i];
    1a86:	f811 2b01 	ldrb.w	r2, [r1], #1
    1a8a:	3301      	adds	r3, #1
		if (!c) break;
    1a8c:	b13a      	cbz	r2, 1a9e <usb_init_serialnumber+0x42>

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    1a8e:	2b0a      	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    1a90:	f820 2f02 	strh.w	r2, [r0, #2]!

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    1a94:	d1f7      	bne.n	1a86 <usb_init_serialnumber+0x2a>
    1a96:	2316      	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    1a98:	7023      	strb	r3, [r4, #0]
}
    1a9a:	b004      	add	sp, #16
    1a9c:	bd10      	pop	{r4, pc}
    1a9e:	005b      	lsls	r3, r3, #1
    1aa0:	b2db      	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    1aa2:	7023      	strb	r3, [r4, #0]
}
    1aa4:	b004      	add	sp, #16
    1aa6:	bd10      	pop	{r4, pc}
    1aa8:	401f4400 	.word	0x401f4400
    1aac:	0098967f 	.word	0x0098967f
    1ab0:	20000418 	.word	0x20000418

00001ab4 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    1ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    1ab6:	4914      	ldr	r1, [pc, #80]	; (1b08 <rx_queue_transfer+0x54>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    1ab8:	f44f 3700 	mov.w	r7, #131072	; 0x20000
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    1abc:	4d13      	ldr	r5, [pc, #76]	; (1b0c <rx_queue_transfer+0x58>)
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    1abe:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    1ac0:	eb01 2440 	add.w	r4, r1, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    1ac4:	4e12      	ldr	r6, [pc, #72]	; (1b10 <rx_queue_transfer+0x5c>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    1ac6:	4a13      	ldr	r2, [pc, #76]	; (1b14 <rx_queue_transfer+0x60>)
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    1ac8:	eb05 1540 	add.w	r5, r5, r0, lsl #5
    1acc:	4621      	mov	r1, r4
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    1ace:	6017      	str	r7, [r2, #0]
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    1ad0:	4628      	mov	r0, r5
    1ad2:	8832      	ldrh	r2, [r6, #0]
    1ad4:	f7ff ff82 	bl	19dc <usb_prepare_transfer>
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    1ad8:	8831      	ldrh	r1, [r6, #0]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    1ada:	f024 031f 	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    1ade:	4421      	add	r1, r4
	asm volatile("": : :"memory");
	asm("dsb");
    1ae0:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    1ae4:	4a0c      	ldr	r2, [pc, #48]	; (1b18 <rx_queue_transfer+0x64>)
    1ae6:	6013      	str	r3, [r2, #0]
		location += 32;
    1ae8:	3320      	adds	r3, #32
	} while (location < end_addr);
    1aea:	4299      	cmp	r1, r3
    1aec:	d8fb      	bhi.n	1ae6 <rx_queue_transfer+0x32>
	asm("dsb");
    1aee:	f3bf 8f4f 	dsb	sy
	asm("isb");
    1af2:	f3bf 8f6f 	isb	sy
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    1af6:	2003      	movs	r0, #3
    1af8:	4629      	mov	r1, r5
    1afa:	f7ff ff9b 	bl	1a34 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    1afe:	4b07      	ldr	r3, [pc, #28]	; (1b1c <rx_queue_transfer+0x68>)
    1b00:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1b04:	601a      	str	r2, [r3, #0]
    1b06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1b08:	20200060 	.word	0x20200060
    1b0c:	200010c0 	.word	0x200010c0
    1b10:	200011ce 	.word	0x200011ce
    1b14:	e000e18c 	.word	0xe000e18c
    1b18:	e000ef5c 	.word	0xe000ef5c
    1b1c:	e000e10c 	.word	0xe000e10c

00001b20 <rx_event>:
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    1b20:	4a24      	ldr	r2, [pc, #144]	; (1bb4 <rx_event+0x94>)
    1b22:	6843      	ldr	r3, [r0, #4]
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
    1b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    1b28:	f3c3 430e 	ubfx	r3, r3, #16, #15
    1b2c:	8814      	ldrh	r4, [r2, #0]
	int i = t->callback_param;
    1b2e:	69c5      	ldr	r5, [r0, #28]
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    1b30:	1ae4      	subs	r4, r4, r3
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    1b32:	2c00      	cmp	r4, #0
    1b34:	dd38      	ble.n	1ba8 <rx_event+0x88>
		// received a packet with data
		uint32_t head = rx_head;
    1b36:	4920      	ldr	r1, [pc, #128]	; (1bb8 <rx_event+0x98>)
		if (head != rx_tail) {
    1b38:	4a20      	ldr	r2, [pc, #128]	; (1bbc <rx_event+0x9c>)
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    1b3a:	780b      	ldrb	r3, [r1, #0]
		if (head != rx_tail) {
    1b3c:	7812      	ldrb	r2, [r2, #0]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    1b3e:	b2db      	uxtb	r3, r3
		if (head != rx_tail) {
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    1b40:	481f      	ldr	r0, [pc, #124]	; (1bc0 <rx_event+0xa0>)
			uint32_t count = rx_count[ii];
    1b42:	4e20      	ldr	r6, [pc, #128]	; (1bc4 <rx_event+0xa4>)
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
		if (head != rx_tail) {
    1b44:	4293      	cmp	r3, r2
    1b46:	d007      	beq.n	1b58 <rx_event+0x38>
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    1b48:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    1b4c:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    1b50:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    1b54:	4294      	cmp	r4, r2
    1b56:	d912      	bls.n	1b7e <rx_event+0x5e>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    1b58:	3301      	adds	r3, #1
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
    1b5a:	2200      	movs	r2, #0
    1b5c:	4f1a      	ldr	r7, [pc, #104]	; (1bc8 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    1b5e:	2b08      	cmp	r3, #8
				// TODO: trigger serialEvent
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
    1b60:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		rx_index[i] = 0;
    1b64:	f827 2015 	strh.w	r2, [r7, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
		rx_head = head;
		rx_available += len;
    1b68:	4e18      	ldr	r6, [pc, #96]	; (1bcc <rx_event+0xac>)
    1b6a:	bf94      	ite	ls
    1b6c:	b2da      	uxtbls	r2, r3
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    1b6e:	4613      	movhi	r3, r2
		rx_list[head] = i;
		rx_head = head;
    1b70:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    1b72:	6832      	ldr	r2, [r6, #0]
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
    1b74:	54c5      	strb	r5, [r0, r3]
		rx_head = head;
		rx_available += len;
    1b76:	4414      	add	r4, r2
    1b78:	6034      	str	r4, [r6, #0]
    1b7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    1b7e:	4b14      	ldr	r3, [pc, #80]	; (1bd0 <rx_event+0xb0>)
    1b80:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    1b84:	4622      	mov	r2, r4
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    1b86:	4427      	add	r7, r4
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    1b88:	eb03 2145 	add.w	r1, r3, r5, lsl #9
    1b8c:	4418      	add	r0, r3
    1b8e:	f000 fc61 	bl	2454 <memcpy>
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
    1b92:	4a0e      	ldr	r2, [pc, #56]	; (1bcc <rx_event+0xac>)
				rx_queue_transfer(i);
    1b94:	4628      	mov	r0, r5
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    1b96:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    1b9a:	6813      	ldr	r3, [r2, #0]
    1b9c:	441c      	add	r4, r3
    1b9e:	6014      	str	r4, [r2, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    1ba0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
				rx_queue_transfer(i);
    1ba4:	f7ff bf86 	b.w	1ab4 <rx_queue_transfer>
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    1ba8:	4628      	mov	r0, r5
	}
}
    1baa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    1bae:	f7ff bf81 	b.w	1ab4 <rx_queue_transfer>
    1bb2:	bf00      	nop
    1bb4:	200011ce 	.word	0x200011ce
    1bb8:	200011e4 	.word	0x200011e4
    1bbc:	200011c0 	.word	0x200011c0
    1bc0:	200011c4 	.word	0x200011c4
    1bc4:	200011d0 	.word	0x200011d0
    1bc8:	200010a4 	.word	0x200010a4
    1bcc:	200011e0 	.word	0x200011e0
    1bd0:	20200060 	.word	0x20200060

00001bd4 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    1bd4:	4b1e      	ldr	r3, [pc, #120]	; (1c50 <usb_serial_flush_callback+0x7c>)
    1bd6:	781a      	ldrb	r2, [r3, #0]
    1bd8:	b95a      	cbnz	r2, 1bf2 <usb_serial_flush_callback+0x1e>
    1bda:	f002 03ff 	and.w	r3, r2, #255	; 0xff
	if (!usb_configuration) return;
    1bde:	4a1d      	ldr	r2, [pc, #116]	; (1c54 <usb_serial_flush_callback+0x80>)
    1be0:	7812      	ldrb	r2, [r2, #0]
    1be2:	b132      	cbz	r2, 1bf2 <usb_serial_flush_callback+0x1e>
	tx_available = 0;
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
    1be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
    1be8:	4d1b      	ldr	r5, [pc, #108]	; (1c58 <usb_serial_flush_callback+0x84>)
    1bea:	882a      	ldrh	r2, [r5, #0]
    1bec:	b912      	cbnz	r2, 1bf4 <usb_serial_flush_callback+0x20>
    1bee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1bf2:	4770      	bx	lr
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    1bf4:	4e19      	ldr	r6, [pc, #100]	; (1c5c <usb_serial_flush_callback+0x88>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    1bf6:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    1bfa:	4f19      	ldr	r7, [pc, #100]	; (1c60 <usb_serial_flush_callback+0x8c>)
    1bfc:	7831      	ldrb	r1, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    1bfe:	4642      	mov	r2, r8
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    1c00:	4c18      	ldr	r4, [pc, #96]	; (1c64 <usb_serial_flush_callback+0x90>)
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    1c02:	eb07 1741 	add.w	r7, r7, r1, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    1c06:	eb04 24c1 	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    1c0a:	4638      	mov	r0, r7
    1c0c:	4621      	mov	r1, r4
    1c0e:	f7ff fee5 	bl	19dc <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    1c12:	eb08 0204 	add.w	r2, r8, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    1c16:	f024 011f 	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    1c1a:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    1c1e:	4b12      	ldr	r3, [pc, #72]	; (1c68 <usb_serial_flush_callback+0x94>)
    1c20:	6019      	str	r1, [r3, #0]
		location += 32;
    1c22:	3120      	adds	r1, #32
	} while (location < end_addr);
    1c24:	428a      	cmp	r2, r1
    1c26:	d8fb      	bhi.n	1c20 <usb_serial_flush_callback+0x4c>
	asm("dsb");
    1c28:	f3bf 8f4f 	dsb	sy
	asm("isb");
    1c2c:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    1c30:	2004      	movs	r0, #4
    1c32:	4639      	mov	r1, r7
    1c34:	f7ff feea 	bl	1a0c <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    1c38:	7833      	ldrb	r3, [r6, #0]
    1c3a:	4a08      	ldr	r2, [pc, #32]	; (1c5c <usb_serial_flush_callback+0x88>)
    1c3c:	3301      	adds	r3, #1
    1c3e:	b2db      	uxtb	r3, r3
    1c40:	2b03      	cmp	r3, #3
    1c42:	bf88      	it	hi
    1c44:	2300      	movhi	r3, #0
    1c46:	7013      	strb	r3, [r2, #0]
	tx_available = 0;
    1c48:	2300      	movs	r3, #0
    1c4a:	802b      	strh	r3, [r5, #0]
    1c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1c50:	200010b6 	.word	0x200010b6
    1c54:	200010a0 	.word	0x200010a0
    1c58:	200011e6 	.word	0x200011e6
    1c5c:	200010b7 	.word	0x200010b7
    1c60:	20001200 	.word	0x20001200
    1c64:	20201060 	.word	0x20201060
    1c68:	e000ef70 	.word	0xe000ef70

00001c6c <usb_serial_write.part.1>:
{
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
    1c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1c70:	b085      	sub	sp, #20
    1c72:	9002      	str	r0, [sp, #8]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    1c74:	9101      	str	r1, [sp, #4]
    1c76:	2900      	cmp	r1, #0
    1c78:	f000 80a2 	beq.w	1dc0 <usb_serial_write.part.1+0x154>
    1c7c:	2300      	movs	r3, #0
    1c7e:	f8df 815c 	ldr.w	r8, [pc, #348]	; 1ddc <usb_serial_write.part.1+0x170>
    1c82:	f8df 914c 	ldr.w	r9, [pc, #332]	; 1dd0 <usb_serial_write.part.1+0x164>
    1c86:	9300      	str	r3, [sp, #0]
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
    1c88:	4e4e      	ldr	r6, [pc, #312]	; (1dc4 <usb_serial_write.part.1+0x158>)
    1c8a:	f8b8 3000 	ldrh.w	r3, [r8]
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    1c8e:	f8df a150 	ldr.w	sl, [pc, #336]	; 1de0 <usb_serial_write.part.1+0x174>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
	do {
		SCB_CACHE_DCCIMVAC = location;
    1c92:	f8df b150 	ldr.w	fp, [pc, #336]	; 1de4 <usb_serial_write.part.1+0x178>
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
    1c96:	4a4c      	ldr	r2, [pc, #304]	; (1dc8 <usb_serial_write.part.1+0x15c>)
    1c98:	7814      	ldrb	r4, [r2, #0]
    1c9a:	4a4c      	ldr	r2, [pc, #304]	; (1dcc <usb_serial_write.part.1+0x160>)
    1c9c:	eb02 1744 	add.w	r7, r2, r4, lsl #5
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    1ca0:	2b00      	cmp	r3, #0
    1ca2:	d16e      	bne.n	1d82 <usb_serial_write.part.1+0x116>
    1ca4:	461d      	mov	r5, r3
    1ca6:	461c      	mov	r4, r3
    1ca8:	e014      	b.n	1cd4 <usb_serial_write.part.1+0x68>
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    1caa:	f899 3000 	ldrb.w	r3, [r9]
				}
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
    1cae:	b904      	cbnz	r4, 1cb2 <usb_serial_write.part.1+0x46>
				wait_begin_at = systick_millis_count;
    1cb0:	6835      	ldr	r5, [r6, #0]
    1cb2:	2401      	movs	r4, #1
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    1cb4:	2b00      	cmp	r3, #0
    1cb6:	d15e      	bne.n	1d76 <usb_serial_write.part.1+0x10a>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    1cb8:	6833      	ldr	r3, [r6, #0]
    1cba:	1b5b      	subs	r3, r3, r5
    1cbc:	2b78      	cmp	r3, #120	; 0x78
    1cbe:	d879      	bhi.n	1db4 <usb_serial_write.part.1+0x148>
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    1cc0:	f89a 3000 	ldrb.w	r3, [sl]
    1cc4:	2b00      	cmp	r3, #0
    1cc6:	d056      	beq.n	1d76 <usb_serial_write.part.1+0x10a>
			yield();
    1cc8:	f000 fb4c 	bl	2364 <yield>
	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    1ccc:	f8b8 3000 	ldrh.w	r3, [r8]
    1cd0:	2b00      	cmp	r3, #0
    1cd2:	d154      	bne.n	1d7e <usb_serial_write.part.1+0x112>
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
    1cd4:	4638      	mov	r0, r7
    1cd6:	f7ff febf 	bl	1a58 <usb_transfer_status>
			if (!(status & 0x80)) {
    1cda:	f010 0080 	ands.w	r0, r0, #128	; 0x80
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    1cde:	4a3c      	ldr	r2, [pc, #240]	; (1dd0 <usb_serial_write.part.1+0x164>)
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
			if (!(status & 0x80)) {
    1ce0:	d1e3      	bne.n	1caa <usb_serial_write.part.1+0x3e>
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    1ce2:	f44f 6300 	mov.w	r3, #2048	; 0x800
    1ce6:	4a38      	ldr	r2, [pc, #224]	; (1dc8 <usb_serial_write.part.1+0x15c>)
				transmit_previous_timeout = 0;
    1ce8:	f889 0000 	strb.w	r0, [r9]
    1cec:	7814      	ldrb	r4, [r2, #0]
    1cee:	461a      	mov	r2, r3
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    1cf0:	f8a8 3000 	strh.w	r3, [r8]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    1cf4:	02e4      	lsls	r4, r4, #11
		if (size >= tx_available) {
    1cf6:	9d01      	ldr	r5, [sp, #4]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    1cf8:	4936      	ldr	r1, [pc, #216]	; (1dd4 <usb_serial_write.part.1+0x168>)
    1cfa:	4420      	add	r0, r4
		if (size >= tx_available) {
    1cfc:	4295      	cmp	r5, r2
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    1cfe:	4408      	add	r0, r1
		if (size >= tx_available) {
    1d00:	d343      	bcc.n	1d8a <usb_serial_write.part.1+0x11e>
			memcpy(txdata, data, tx_available);
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    1d02:	440c      	add	r4, r1
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
    1d04:	9902      	ldr	r1, [sp, #8]
    1d06:	f000 fba5 	bl	2454 <memcpy>
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    1d0a:	2300      	movs	r3, #0
    1d0c:	4621      	mov	r1, r4
    1d0e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    1d12:	4638      	mov	r0, r7
    1d14:	f7ff fe62 	bl	19dc <usb_prepare_transfer>
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    1d18:	f024 031f 	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    1d1c:	f504 6400 	add.w	r4, r4, #2048	; 0x800
	asm volatile("": : :"memory");
	asm("dsb");
    1d20:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    1d24:	f8cb 3000 	str.w	r3, [fp]
		location += 32;
    1d28:	3320      	adds	r3, #32
	} while (location < end_addr);
    1d2a:	429c      	cmp	r4, r3
    1d2c:	d8fa      	bhi.n	1d24 <usb_serial_write.part.1+0xb8>
	asm("dsb");
    1d2e:	f3bf 8f4f 	dsb	sy
	asm("isb");
    1d32:	f3bf 8f6f 	isb	sy
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    1d36:	2004      	movs	r0, #4
    1d38:	4639      	mov	r1, r7
    1d3a:	f7ff fe67 	bl	1a0c <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    1d3e:	4b22      	ldr	r3, [pc, #136]	; (1dc8 <usb_serial_write.part.1+0x15c>)
    1d40:	4a21      	ldr	r2, [pc, #132]	; (1dc8 <usb_serial_write.part.1+0x15c>)
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
    1d42:	2100      	movs	r1, #0
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    1d44:	781b      	ldrb	r3, [r3, #0]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    1d46:	4824      	ldr	r0, [pc, #144]	; (1dd8 <usb_serial_write.part.1+0x16c>)
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    1d48:	3301      	adds	r3, #1
    1d4a:	b2db      	uxtb	r3, r3
    1d4c:	2b03      	cmp	r3, #3
    1d4e:	bf88      	it	hi
    1d50:	2300      	movhi	r3, #0
    1d52:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    1d54:	f8b8 2000 	ldrh.w	r2, [r8]
			sent += tx_available;
    1d58:	9b00      	ldr	r3, [sp, #0]
			data += tx_available;
			tx_available = 0;
    1d5a:	f8a8 1000 	strh.w	r1, [r8]
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
			sent += tx_available;
    1d5e:	4413      	add	r3, r2
    1d60:	9300      	str	r3, [sp, #0]
			data += tx_available;
    1d62:	9b02      	ldr	r3, [sp, #8]
    1d64:	4413      	add	r3, r2
    1d66:	9302      	str	r3, [sp, #8]
    1d68:	460b      	mov	r3, r1
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    1d6a:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    1d6e:	9901      	ldr	r1, [sp, #4]
    1d70:	1a8a      	subs	r2, r1, r2
    1d72:	9201      	str	r2, [sp, #4]
    1d74:	d18f      	bne.n	1c96 <usb_serial_write.part.1+0x2a>
    1d76:	9800      	ldr	r0, [sp, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    1d78:	b005      	add	sp, #20
    1d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1d7e:	4a12      	ldr	r2, [pc, #72]	; (1dc8 <usb_serial_write.part.1+0x15c>)
    1d80:	7814      	ldrb	r4, [r2, #0]
    1d82:	461a      	mov	r2, r3
    1d84:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    1d88:	e7b4      	b.n	1cf4 <usb_serial_write.part.1+0x88>
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
    1d8a:	9c01      	ldr	r4, [sp, #4]
    1d8c:	9902      	ldr	r1, [sp, #8]
    1d8e:	4622      	mov	r2, r4
    1d90:	9303      	str	r3, [sp, #12]
    1d92:	f000 fb5f 	bl	2454 <memcpy>
			tx_available -= size;
    1d96:	9b03      	ldr	r3, [sp, #12]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    1d98:	4a0f      	ldr	r2, [pc, #60]	; (1dd8 <usb_serial_write.part.1+0x16c>)
    1d9a:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
    1d9e:	1b1b      	subs	r3, r3, r4
    1da0:	f8a8 3000 	strh.w	r3, [r8]
    1da4:	9b00      	ldr	r3, [sp, #0]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    1da6:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    1daa:	4618      	mov	r0, r3
    1dac:	4420      	add	r0, r4
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    1dae:	b005      	add	sp, #20
    1db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    1db4:	2301      	movs	r3, #1
				return sent;
    1db6:	9800      	ldr	r0, [sp, #0]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    1db8:	7013      	strb	r3, [r2, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    1dba:	b005      	add	sp, #20
    1dbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    1dc0:	9801      	ldr	r0, [sp, #4]
    1dc2:	e7d9      	b.n	1d78 <usb_serial_write.part.1+0x10c>
    1dc4:	20001058 	.word	0x20001058
    1dc8:	200010b7 	.word	0x200010b7
    1dcc:	20001200 	.word	0x20001200
    1dd0:	200011e5 	.word	0x200011e5
    1dd4:	20201060 	.word	0x20201060
    1dd8:	402e0000 	.word	0x402e0000
    1ddc:	200011e6 	.word	0x200011e6
    1de0:	200010a0 	.word	0x200010a0
    1de4:	e000ef70 	.word	0xe000ef70

00001de8 <usb_serial_reset>:
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);


void usb_serial_reset(void)
{
    1de8:	4770      	bx	lr
    1dea:	bf00      	nop

00001dec <usb_serial_configure>:
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    1dec:	4b31      	ldr	r3, [pc, #196]	; (1eb4 <usb_serial_configure+0xc8>)
	printf("usb_serial_reset\n");
	// deallocate all transfer descriptors
}

void usb_serial_configure(void)
{
    1dee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    1df2:	781b      	ldrb	r3, [r3, #0]
		tx_packet_size = CDC_TX_SIZE_480;
    1df4:	4f30      	ldr	r7, [pc, #192]	; (1eb8 <usb_serial_configure+0xcc>)
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    1df6:	2b00      	cmp	r3, #0
    1df8:	d054      	beq.n	1ea4 <usb_serial_configure+0xb8>
		tx_packet_size = CDC_TX_SIZE_480;
    1dfa:	f44f 7300 	mov.w	r3, #512	; 0x200
		rx_packet_size = CDC_RX_SIZE_480;
    1dfe:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 1eec <usb_serial_configure+0x100>
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
    1e02:	803b      	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    1e04:	f8a8 3000 	strh.w	r3, [r8]
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    1e08:	2100      	movs	r1, #0
    1e0a:	2280      	movs	r2, #128	; 0x80
    1e0c:	482b      	ldr	r0, [pc, #172]	; (1ebc <usb_serial_configure+0xd0>)
	tx_head = 0;
    1e0e:	460d      	mov	r5, r1
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    1e10:	4e2b      	ldr	r6, [pc, #172]	; (1ec0 <usb_serial_configure+0xd4>)
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    1e12:	f000 ff43 	bl	2c9c <memset>
	tx_head = 0;
    1e16:	4c2b      	ldr	r4, [pc, #172]	; (1ec4 <usb_serial_configure+0xd8>)
	tx_available = 0;
    1e18:	4b2b      	ldr	r3, [pc, #172]	; (1ec8 <usb_serial_configure+0xdc>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    1e1a:	4629      	mov	r1, r5
    1e1c:	f44f 7280 	mov.w	r2, #256	; 0x100
    1e20:	482a      	ldr	r0, [pc, #168]	; (1ecc <usb_serial_configure+0xe0>)
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    1e22:	7025      	strb	r5, [r4, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    1e24:	462c      	mov	r4, r5
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    1e26:	801d      	strh	r5, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    1e28:	f000 ff38 	bl	2c9c <memset>
	memset(rx_count, 0, sizeof(rx_count));
    1e2c:	6035      	str	r5, [r6, #0]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    1e2e:	462b      	mov	r3, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    1e30:	6075      	str	r5, [r6, #4]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    1e32:	462a      	mov	r2, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    1e34:	60b5      	str	r5, [r6, #8]
    1e36:	60f5      	str	r5, [r6, #12]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    1e38:	4925      	ldr	r1, [pc, #148]	; (1ed0 <usb_serial_configure+0xe4>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    1e3a:	4e26      	ldr	r6, [pc, #152]	; (1ed4 <usb_serial_configure+0xe8>)
	rx_head = 0;
	rx_tail = 0;
    1e3c:	4826      	ldr	r0, [pc, #152]	; (1ed8 <usb_serial_configure+0xec>)
	rx_available = 0;
    1e3e:	f8df e0b0 	ldr.w	lr, [pc, #176]	; 1ef0 <usb_serial_configure+0x104>
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    1e42:	700d      	strb	r5, [r1, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    1e44:	2110      	movs	r1, #16
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
    1e46:	7005      	strb	r5, [r0, #0]
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    1e48:	2002      	movs	r0, #2
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    1e4a:	6035      	str	r5, [r6, #0]
    1e4c:	6075      	str	r5, [r6, #4]
    1e4e:	60b5      	str	r5, [r6, #8]
    1e50:	60f5      	str	r5, [r6, #12]
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
    1e52:	f8ce 5000 	str.w	r5, [lr]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    1e56:	f7ff fd8d 	bl	1974 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    1e5a:	f8b8 1000 	ldrh.w	r1, [r8]
    1e5e:	462a      	mov	r2, r5
    1e60:	4b1e      	ldr	r3, [pc, #120]	; (1edc <usb_serial_configure+0xf0>)
    1e62:	2003      	movs	r0, #3
    1e64:	f7ff fd54 	bl	1910 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    1e68:	462b      	mov	r3, r5
    1e6a:	8839      	ldrh	r1, [r7, #0]
    1e6c:	2201      	movs	r2, #1
    1e6e:	2004      	movs	r0, #4
    1e70:	f7ff fd80 	bl	1974 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    1e74:	4620      	mov	r0, r4
    1e76:	3401      	adds	r4, #1
    1e78:	f7ff fe1c 	bl	1ab4 <rx_queue_transfer>
    1e7c:	2c08      	cmp	r4, #8
    1e7e:	d1f9      	bne.n	1e74 <usb_serial_configure+0x88>
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
	USB1_GPTIMER0CTRL = 0;
    1e80:	4b17      	ldr	r3, [pc, #92]	; (1ee0 <usb_serial_configure+0xf4>)
	USB1_GPTIMER0LD = microseconds - 1;
    1e82:	224a      	movs	r2, #74	; 0x4a
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    1e84:	4817      	ldr	r0, [pc, #92]	; (1ee4 <usb_serial_configure+0xf8>)
	USB1_GPTIMER0CTRL = 0;
    1e86:	2100      	movs	r1, #0
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    1e88:	4c17      	ldr	r4, [pc, #92]	; (1ee8 <usb_serial_configure+0xfc>)
    1e8a:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    1e8c:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    1e90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    1e94:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    1e98:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    1e9c:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    1ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    1ea4:	2340      	movs	r3, #64	; 0x40
		rx_packet_size = CDC_RX_SIZE_12;
    1ea6:	f8df 8044 	ldr.w	r8, [pc, #68]	; 1eec <usb_serial_configure+0x100>
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    1eaa:	803b      	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_12;
    1eac:	f8a8 3000 	strh.w	r3, [r8]
    1eb0:	e7aa      	b.n	1e08 <usb_serial_configure+0x1c>
    1eb2:	bf00      	nop
    1eb4:	2000107c 	.word	0x2000107c
    1eb8:	200010b4 	.word	0x200010b4
    1ebc:	20001200 	.word	0x20001200
    1ec0:	200011d0 	.word	0x200011d0
    1ec4:	200010b7 	.word	0x200010b7
    1ec8:	200011e6 	.word	0x200011e6
    1ecc:	200010c0 	.word	0x200010c0
    1ed0:	200011e4 	.word	0x200011e4
    1ed4:	200010a4 	.word	0x200010a4
    1ed8:	200011c0 	.word	0x200011c0
    1edc:	00001b21 	.word	0x00001b21
    1ee0:	402e0000 	.word	0x402e0000
    1ee4:	2000106c 	.word	0x2000106c
    1ee8:	00001bd5 	.word	0x00001bd5
    1eec:	200011ce 	.word	0x200011ce
    1ef0:	200011e0 	.word	0x200011e0

00001ef4 <usb_serial_read>:
int usb_serial_read(void *buffer, uint32_t size)
{
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    1ef4:	4b31      	ldr	r3, [pc, #196]	; (1fbc <usb_serial_read+0xc8>)
    1ef6:	f44f 3200 	mov.w	r2, #131072	; 0x20000

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    1efa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    1efe:	601a      	str	r2, [r3, #0]

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    1f00:	b083      	sub	sp, #12
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    1f02:	4b2f      	ldr	r3, [pc, #188]	; (1fc0 <usb_serial_read+0xcc>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    1f04:	4689      	mov	r9, r1
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    1f06:	781c      	ldrb	r4, [r3, #0]
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    1f08:	2900      	cmp	r1, #0
    1f0a:	d053      	beq.n	1fb4 <usb_serial_read+0xc0>
    1f0c:	4b2d      	ldr	r3, [pc, #180]	; (1fc4 <usb_serial_read+0xd0>)
    1f0e:	b2e4      	uxtb	r4, r4
    1f10:	781b      	ldrb	r3, [r3, #0]
    1f12:	429c      	cmp	r4, r3
    1f14:	d050      	beq.n	1fb8 <usb_serial_read+0xc4>
    1f16:	4682      	mov	sl, r0
    1f18:	2700      	movs	r7, #0
    1f1a:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 1fdc <usb_serial_read+0xe8>
		if (++tail > RX_NUM) tail = 0;
    1f1e:	3401      	adds	r4, #1
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    1f20:	4b29      	ldr	r3, [pc, #164]	; (1fc8 <usb_serial_read+0xd4>)
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
    1f22:	ebc7 0809 	rsb	r8, r7, r9
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    1f26:	4650      	mov	r0, sl
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    1f28:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    1f2a:	9301      	str	r3, [sp, #4]
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
    1f2c:	4b27      	ldr	r3, [pc, #156]	; (1fcc <usb_serial_read+0xd8>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    1f2e:	bf28      	it	cs
    1f30:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    1f32:	5d1d      	ldrb	r5, [r3, r4]
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    1f34:	4b24      	ldr	r3, [pc, #144]	; (1fc8 <usb_serial_read+0xd4>)
    1f36:	f833 e015 	ldrh.w	lr, [r3, r5, lsl #1]
    1f3a:	4b25      	ldr	r3, [pc, #148]	; (1fd0 <usb_serial_read+0xdc>)
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    1f3c:	eb0e 2145 	add.w	r1, lr, r5, lsl #9
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    1f40:	f833 6015 	ldrh.w	r6, [r3, r5, lsl #1]
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    1f44:	4b23      	ldr	r3, [pc, #140]	; (1fd4 <usb_serial_read+0xe0>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    1f46:	ebce 0606 	rsb	r6, lr, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    1f4a:	4419      	add	r1, r3
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    1f4c:	45b0      	cmp	r8, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    1f4e:	4632      	mov	r2, r6
			p += avail;
			rx_available -= avail;
			count += avail;
    1f50:	4437      	add	r7, r6
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    1f52:	d219      	bcs.n	1f88 <usb_serial_read+0x94>
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    1f54:	eb0e 2145 	add.w	r1, lr, r5, lsl #9
    1f58:	4642      	mov	r2, r8
    1f5a:	4419      	add	r1, r3
    1f5c:	f000 fa7a 	bl	2454 <memcpy>
			rx_available -= len;
			rx_index[i] += len;
    1f60:	9b01      	ldr	r3, [sp, #4]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    1f62:	f8db 1000 	ldr.w	r1, [fp]
    1f66:	4648      	mov	r0, r9
			rx_index[i] += len;
    1f68:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    1f6c:	ebc8 0101 	rsb	r1, r8, r1
			rx_index[i] += len;
    1f70:	4490      	add	r8, r2
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    1f72:	f8cb 1000 	str.w	r1, [fp]
			rx_index[i] += len;
    1f76:	f823 8015 	strh.w	r8, [r3, r5, lsl #1]
			count += avail;
			rx_tail = tail;
			rx_queue_transfer(i);
		}
	}
	NVIC_ENABLE_IRQ(IRQ_USB1);
    1f7a:	4b17      	ldr	r3, [pc, #92]	; (1fd8 <usb_serial_read+0xe4>)
    1f7c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1f80:	601a      	str	r2, [r3, #0]
	return count;
}
    1f82:	b003      	add	sp, #12
    1f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    1f88:	f000 fa64 	bl	2454 <memcpy>
			p += avail;
			rx_available -= avail;
    1f8c:	f8db 2000 	ldr.w	r2, [fp]
			count += avail;
			rx_tail = tail;
    1f90:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
    1f92:	4628      	mov	r0, r5
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
			rx_available -= avail;
    1f94:	1b92      	subs	r2, r2, r6
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
    1f96:	44b2      	add	sl, r6
			rx_available -= avail;
    1f98:	f8cb 2000 	str.w	r2, [fp]
			count += avail;
			rx_tail = tail;
    1f9c:	4a08      	ldr	r2, [pc, #32]	; (1fc0 <usb_serial_read+0xcc>)
    1f9e:	7013      	strb	r3, [r2, #0]
			rx_queue_transfer(i);
    1fa0:	f7ff fd88 	bl	1ab4 <rx_queue_transfer>

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    1fa4:	45b9      	cmp	r9, r7
    1fa6:	d903      	bls.n	1fb0 <usb_serial_read+0xbc>
    1fa8:	4b06      	ldr	r3, [pc, #24]	; (1fc4 <usb_serial_read+0xd0>)
    1faa:	781b      	ldrb	r3, [r3, #0]
    1fac:	429c      	cmp	r4, r3
    1fae:	d1b6      	bne.n	1f1e <usb_serial_read+0x2a>
    1fb0:	4638      	mov	r0, r7
    1fb2:	e7e2      	b.n	1f7a <usb_serial_read+0x86>
    1fb4:	4608      	mov	r0, r1
    1fb6:	e7e0      	b.n	1f7a <usb_serial_read+0x86>
    1fb8:	2000      	movs	r0, #0
    1fba:	e7de      	b.n	1f7a <usb_serial_read+0x86>
    1fbc:	e000e18c 	.word	0xe000e18c
    1fc0:	200011c0 	.word	0x200011c0
    1fc4:	200011e4 	.word	0x200011e4
    1fc8:	200010a4 	.word	0x200010a4
    1fcc:	200011c4 	.word	0x200011c4
    1fd0:	200011d0 	.word	0x200011d0
    1fd4:	20200060 	.word	0x20200060
    1fd8:	e000e10c 	.word	0xe000e10c
    1fdc:	200011e0 	.word	0x200011e0

00001fe0 <usb_serial_peekchar>:
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    1fe0:	4b0b      	ldr	r3, [pc, #44]	; (2010 <usb_serial_peekchar+0x30>)
	if (tail == rx_head) return -1;
    1fe2:	4a0c      	ldr	r2, [pc, #48]	; (2014 <usb_serial_peekchar+0x34>)
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    1fe4:	781b      	ldrb	r3, [r3, #0]
	if (tail == rx_head) return -1;
    1fe6:	7812      	ldrb	r2, [r2, #0]
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    1fe8:	b2db      	uxtb	r3, r3
	if (tail == rx_head) return -1;
    1fea:	4293      	cmp	r3, r2
    1fec:	d00d      	beq.n	200a <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    1fee:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    1ff0:	4809      	ldr	r0, [pc, #36]	; (2018 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    1ff2:	4a0a      	ldr	r2, [pc, #40]	; (201c <usb_serial_peekchar+0x3c>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    1ff4:	2b09      	cmp	r3, #9
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    1ff6:	490a      	ldr	r1, [pc, #40]	; (2020 <usb_serial_peekchar+0x40>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    1ff8:	bf28      	it	cs
    1ffa:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    1ffc:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    1ffe:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
    2002:	eb02 2343 	add.w	r3, r2, r3, lsl #9
    2006:	5c58      	ldrb	r0, [r3, r1]
    2008:	4770      	bx	lr

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
    200a:	f04f 30ff 	mov.w	r0, #4294967295
	if (++tail > RX_NUM) tail = 0;
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
}
    200e:	4770      	bx	lr
    2010:	200011c0 	.word	0x200011c0
    2014:	200011e4 	.word	0x200011e4
    2018:	200011c4 	.word	0x200011c4
    201c:	20200060 	.word	0x20200060
    2020:	200010a4 	.word	0x200010a4

00002024 <usb_serial_available>:

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	return rx_available;
    2024:	4b01      	ldr	r3, [pc, #4]	; (202c <usb_serial_available+0x8>)
    2026:	6818      	ldr	r0, [r3, #0]
}
    2028:	4770      	bx	lr
    202a:	bf00      	nop
    202c:	200011e0 	.word	0x200011e0

00002030 <usb_serial_flush_input>:

// discard any buffered input
void usb_serial_flush_input(void)
{
    2030:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    2034:	4e15      	ldr	r6, [pc, #84]	; (208c <usb_serial_flush_input+0x5c>)
	while (tail != rx_head) {
    2036:	4d16      	ldr	r5, [pc, #88]	; (2090 <usb_serial_flush_input+0x60>)
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    2038:	7834      	ldrb	r4, [r6, #0]
	while (tail != rx_head) {
    203a:	782b      	ldrb	r3, [r5, #0]
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    203c:	b2e4      	uxtb	r4, r4
	while (tail != rx_head) {
    203e:	429c      	cmp	r4, r3
    2040:	d021      	beq.n	2086 <usb_serial_flush_input+0x56>
    2042:	f8df 9054 	ldr.w	r9, [pc, #84]	; 2098 <usb_serial_flush_input+0x68>
    2046:	f8df b054 	ldr.w	fp, [pc, #84]	; 209c <usb_serial_flush_input+0x6c>
    204a:	f8df 8054 	ldr.w	r8, [pc, #84]	; 20a0 <usb_serial_flush_input+0x70>
    204e:	4f11      	ldr	r7, [pc, #68]	; (2094 <usb_serial_flush_input+0x64>)
		if (++tail > RX_NUM) tail = 0;
    2050:	3401      	adds	r4, #1
    2052:	2c08      	cmp	r4, #8
    2054:	fa5f fa84 	uxtb.w	sl, r4
    2058:	d901      	bls.n	205e <usb_serial_flush_input+0x2e>
    205a:	2400      	movs	r4, #0
    205c:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
    205e:	f819 1004 	ldrb.w	r1, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    2062:	f8db 2000 	ldr.w	r2, [fp]
    2066:	f838 3011 	ldrh.w	r3, [r8, r1, lsl #1]
		rx_queue_transfer(i);
    206a:	4608      	mov	r0, r1
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		rx_available -= rx_count[i] - rx_index[i];
    206c:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
    2070:	1a5b      	subs	r3, r3, r1
    2072:	1ad3      	subs	r3, r2, r3
    2074:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
    2078:	f7ff fd1c 	bl	1ab4 <rx_queue_transfer>
		rx_tail = tail;
    207c:	f886 a000 	strb.w	sl, [r6]

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
    2080:	782b      	ldrb	r3, [r5, #0]
    2082:	429c      	cmp	r4, r3
    2084:	d1e4      	bne.n	2050 <usb_serial_flush_input+0x20>
    2086:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    208a:	bf00      	nop
    208c:	200011c0 	.word	0x200011c0
    2090:	200011e4 	.word	0x200011e4
    2094:	200010a4 	.word	0x200010a4
    2098:	200011c4 	.word	0x200011c4
    209c:	200011e0 	.word	0x200011e0
    20a0:	200011d0 	.word	0x200011d0

000020a4 <usb_serial_getchar>:
}


// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    20a4:	b500      	push	{lr}
    20a6:	b083      	sub	sp, #12
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
    20a8:	2101      	movs	r1, #1
    20aa:	f10d 0007 	add.w	r0, sp, #7
    20ae:	f7ff ff21 	bl	1ef4 <usb_serial_read>
    20b2:	b120      	cbz	r0, 20be <usb_serial_getchar+0x1a>
    20b4:	f89d 0007 	ldrb.w	r0, [sp, #7]
	return -1;
}
    20b8:	b003      	add	sp, #12
    20ba:	f85d fb04 	ldr.w	pc, [sp], #4
// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
	return -1;
    20be:	f04f 30ff 	mov.w	r0, #4294967295
    20c2:	e7f9      	b.n	20b8 <usb_serial_getchar+0x14>

000020c4 <usb_serial_putchar>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    20c4:	4b09      	ldr	r3, [pc, #36]	; (20ec <usb_serial_putchar+0x28>)
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    20c6:	b500      	push	{lr}
    20c8:	b083      	sub	sp, #12
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    20ca:	781b      	ldrb	r3, [r3, #0]
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    20cc:	f88d 0007 	strb.w	r0, [sp, #7]
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    20d0:	b923      	cbnz	r3, 20dc <usb_serial_putchar+0x18>
    20d2:	f003 00ff 	and.w	r0, r3, #255	; 0xff

// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
	return usb_serial_write(&c, 1);
}
    20d6:	b003      	add	sp, #12
    20d8:	f85d fb04 	ldr.w	pc, [sp], #4
    20dc:	2101      	movs	r1, #1
    20de:	f10d 0007 	add.w	r0, sp, #7
    20e2:	f7ff fdc3 	bl	1c6c <usb_serial_write.part.1>
    20e6:	b003      	add	sp, #12
    20e8:	f85d fb04 	ldr.w	pc, [sp], #4
    20ec:	200010a0 	.word	0x200010a0

000020f0 <usb_serial_write>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    20f0:	4b04      	ldr	r3, [pc, #16]	; (2104 <usb_serial_write+0x14>)
    20f2:	781b      	ldrb	r3, [r3, #0]
    20f4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    20f8:	b10b      	cbz	r3, 20fe <usb_serial_write+0xe>
    20fa:	f7ff bdb7 	b.w	1c6c <usb_serial_write.part.1>
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    20fe:	4610      	mov	r0, r2
    2100:	4770      	bx	lr
    2102:	bf00      	nop
    2104:	200010a0 	.word	0x200010a0

00002108 <usb_serial_write_buffer_free>:

int usb_serial_write_buffer_free(void)
{
    2108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    210c:	2400      	movs	r4, #0
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
    210e:	f8df 8040 	ldr.w	r8, [pc, #64]	; 2150 <usb_serial_write_buffer_free+0x48>
    2112:	2301      	movs	r3, #1
    2114:	4d0c      	ldr	r5, [pc, #48]	; (2148 <usb_serial_write_buffer_free+0x40>)
	return sent;
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
    2116:	4627      	mov	r7, r4
    2118:	4e0c      	ldr	r6, [pc, #48]	; (214c <usb_serial_write_buffer_free+0x44>)
	tx_noautoflush = 1;
    211a:	f888 3000 	strb.w	r3, [r8]
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    211e:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    2120:	4628      	mov	r0, r5
    2122:	3520      	adds	r5, #32
int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    2124:	42a3      	cmp	r3, r4

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    2126:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
    212a:	d005      	beq.n	2138 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    212c:	f7ff fc94 	bl	1a58 <usb_transfer_status>
    2130:	0603      	lsls	r3, r0, #24
    2132:	bf58      	it	pl
    2134:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    2138:	2c04      	cmp	r4, #4
    213a:	d1f0      	bne.n	211e <usb_serial_write_buffer_free+0x16>
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    213c:	2300      	movs	r3, #0
	return sum;
}
    213e:	4638      	mov	r0, r7
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    2140:	f888 3000 	strb.w	r3, [r8]
	return sum;
}
    2144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2148:	20001200 	.word	0x20001200
    214c:	200010b7 	.word	0x200010b7
    2150:	200010b6 	.word	0x200010b6

00002154 <usb_serial_flush_output>:

void usb_serial_flush_output(void)
{
    2154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	if (!usb_configuration) return;
    2158:	4b1f      	ldr	r3, [pc, #124]	; (21d8 <usb_serial_flush_output+0x84>)
    215a:	781b      	ldrb	r3, [r3, #0]
    215c:	b113      	cbz	r3, 2164 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    215e:	4d1f      	ldr	r5, [pc, #124]	; (21dc <usb_serial_flush_output+0x88>)
    2160:	882a      	ldrh	r2, [r5, #0]
    2162:	b90a      	cbnz	r2, 2168 <usb_serial_flush_output+0x14>
    2164:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    2168:	f8df 8084 	ldr.w	r8, [pc, #132]	; 21f0 <usb_serial_flush_output+0x9c>
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    216c:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    2170:	4e1b      	ldr	r6, [pc, #108]	; (21e0 <usb_serial_flush_output+0x8c>)
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    2172:	f04f 0e01 	mov.w	lr, #1
	transfer_t *xfer = tx_transfer + tx_head;
    2176:	f898 1000 	ldrb.w	r1, [r8]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    217a:	464a      	mov	r2, r9

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    217c:	4c19      	ldr	r4, [pc, #100]	; (21e4 <usb_serial_flush_output+0x90>)
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    217e:	2300      	movs	r3, #0
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    2180:	eb06 1641 	add.w	r6, r6, r1, lsl #5
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    2184:	4f18      	ldr	r7, [pc, #96]	; (21e8 <usb_serial_flush_output+0x94>)
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    2186:	eb04 24c1 	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    218a:	4630      	mov	r0, r6
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    218c:	f887 e000 	strb.w	lr, [r7]
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    2190:	4621      	mov	r1, r4
    2192:	f7ff fc23 	bl	19dc <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    2196:	eb09 0204 	add.w	r2, r9, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    219a:	f024 011f 	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    219e:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    21a2:	4b12      	ldr	r3, [pc, #72]	; (21ec <usb_serial_flush_output+0x98>)
    21a4:	6019      	str	r1, [r3, #0]
		location += 32;
    21a6:	3120      	adds	r1, #32
	} while (location < end_addr);
    21a8:	428a      	cmp	r2, r1
    21aa:	d8fb      	bhi.n	21a4 <usb_serial_flush_output+0x50>
	asm("dsb");
    21ac:	f3bf 8f4f 	dsb	sy
	asm("isb");
    21b0:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    21b4:	2004      	movs	r0, #4
    21b6:	4631      	mov	r1, r6
    21b8:	f7ff fc28 	bl	1a0c <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    21bc:	f898 3000 	ldrb.w	r3, [r8]
    21c0:	4a0b      	ldr	r2, [pc, #44]	; (21f0 <usb_serial_flush_output+0x9c>)
    21c2:	3301      	adds	r3, #1
    21c4:	b2db      	uxtb	r3, r3
    21c6:	2b03      	cmp	r3, #3
    21c8:	bf88      	it	hi
    21ca:	2300      	movhi	r3, #0
    21cc:	7013      	strb	r3, [r2, #0]
	tx_available = 0;
    21ce:	2300      	movs	r3, #0
    21d0:	802b      	strh	r3, [r5, #0]
	tx_noautoflush = 0;
    21d2:	703b      	strb	r3, [r7, #0]
    21d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    21d8:	200010a0 	.word	0x200010a0
    21dc:	200011e6 	.word	0x200011e6
    21e0:	20001200 	.word	0x20001200
    21e4:	20201060 	.word	0x20201060
    21e8:	200010b6 	.word	0x200010b6
    21ec:	e000ef70 	.word	0xe000ef70
    21f0:	200010b7 	.word	0x200010b7

000021f4 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    21f4:	b570      	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    21f6:	f3ef 8110 	mrs	r1, PRIMASK
		__disable_irq();
    21fa:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    21fc:	4c0c      	ldr	r4, [pc, #48]	; (2230 <EventResponder::runFromInterrupt()+0x3c>)
    21fe:	6823      	ldr	r3, [r4, #0]
		if (first) {
    2200:	b18b      	cbz	r3, 2226 <EventResponder::runFromInterrupt()+0x32>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    2202:	4e0c      	ldr	r6, [pc, #48]	; (2234 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    2204:	2500      	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    2206:	695a      	ldr	r2, [r3, #20]
    2208:	6022      	str	r2, [r4, #0]
			if (firstInterrupt) {
    220a:	b17a      	cbz	r2, 222c <EventResponder::runFromInterrupt()+0x38>
				firstInterrupt->_prev = nullptr;
    220c:	6195      	str	r5, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    220e:	b901      	cbnz	r1, 2212 <EventResponder::runFromInterrupt()+0x1e>
    2210:	b662      	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    2212:	775d      	strb	r5, [r3, #29]
			(*(first->_function))(*first);
    2214:	4618      	mov	r0, r3
    2216:	689b      	ldr	r3, [r3, #8]
    2218:	4798      	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    221a:	f3ef 8110 	mrs	r1, PRIMASK
		__disable_irq();
    221e:	b672      	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    2220:	6823      	ldr	r3, [r4, #0]
		if (first) {
    2222:	2b00      	cmp	r3, #0
    2224:	d1ef      	bne.n	2206 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    2226:	b901      	cbnz	r1, 222a <EventResponder::runFromInterrupt()+0x36>
    2228:	b662      	cpsie	i
    222a:	bd70      	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    222c:	6032      	str	r2, [r6, #0]
    222e:	e7ee      	b.n	220e <EventResponder::runFromInterrupt()+0x1a>
    2230:	20001280 	.word	0x20001280
    2234:	20001284 	.word	0x20001284

00002238 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

extern "C" void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    2238:	f7ff bfdc 	b.w	21f4 <EventResponder::runFromInterrupt()>

0000223c <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    223c:	4a04      	ldr	r2, [pc, #16]	; (2250 <systick_isr+0x14>)
    223e:	4b05      	ldr	r3, [pc, #20]	; (2254 <systick_isr+0x18>)
    2240:	6811      	ldr	r1, [r2, #0]
	systick_millis_count++;
    2242:	4a05      	ldr	r2, [pc, #20]	; (2258 <systick_isr+0x1c>)
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    2244:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    2246:	6813      	ldr	r3, [r2, #0]
    2248:	3301      	adds	r3, #1
    224a:	6013      	str	r3, [r2, #0]
    224c:	4770      	bx	lr
    224e:	bf00      	nop
    2250:	e0001004 	.word	0xe0001004
    2254:	20001050 	.word	0x20001050
    2258:	20001058 	.word	0x20001058

0000225c <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    225c:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    225e:	f7fd ff25 	bl	ac <setup>
	while (1) {
		loop();
    2262:	f7fd ff89 	bl	178 <loop>
		yield();
    2266:	f000 f87d 	bl	2364 <yield>
    226a:	e7fa      	b.n	2262 <main+0x6>

0000226c <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    226c:	b510      	push	{r4, lr}
	uint8_t buf[2]={'\r', '\n'};
    226e:	4c06      	ldr	r4, [pc, #24]	; (2288 <Print::println()+0x1c>)
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    2270:	b082      	sub	sp, #8
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    2272:	6803      	ldr	r3, [r0, #0]
    2274:	2202      	movs	r2, #2
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    2276:	8824      	ldrh	r4, [r4, #0]
	return write(buf, 2);
    2278:	a901      	add	r1, sp, #4
    227a:	685b      	ldr	r3, [r3, #4]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    227c:	f8ad 4004 	strh.w	r4, [sp, #4]
	return write(buf, 2);
    2280:	4798      	blx	r3
}
    2282:	b002      	add	sp, #8
    2284:	bd10      	pop	{r4, pc}
    2286:	bf00      	nop
    2288:	20000148 	.word	0x20000148

0000228c <_write>:

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
	((class Print *)file)->write((uint8_t *)ptr, len);
    228c:	6803      	ldr	r3, [r0, #0]
}

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    228e:	b510      	push	{r4, lr}
    2290:	4614      	mov	r4, r2
	((class Print *)file)->write((uint8_t *)ptr, len);
    2292:	685b      	ldr	r3, [r3, #4]
    2294:	4798      	blx	r3
	return len;
}
    2296:	4620      	mov	r0, r4
    2298:	bd10      	pop	{r4, pc}
    229a:	bf00      	nop

0000229c <Print::printf(char const*, ...)>:
}

int Print::printf(const char *format, ...)
{
    229c:	b40e      	push	{r1, r2, r3}
    229e:	b500      	push	{lr}
    22a0:	b082      	sub	sp, #8
    22a2:	ab03      	add	r3, sp, #12
    22a4:	f853 1b04 	ldr.w	r1, [r3], #4
	va_list ap;
	va_start(ap, format);
#ifdef __STRICT_ANSI__
	return 0;  // TODO: make this work with -std=c++0x
#else
	return vdprintf((int)this, format, ap);
    22a8:	461a      	mov	r2, r3
}

int Print::printf(const char *format, ...)
{
	va_list ap;
	va_start(ap, format);
    22aa:	9301      	str	r3, [sp, #4]
#ifdef __STRICT_ANSI__
	return 0;  // TODO: make this work with -std=c++0x
#else
	return vdprintf((int)this, format, ap);
    22ac:	f000 fffc 	bl	32a8 <vdprintf>
#endif
}
    22b0:	b002      	add	sp, #8
    22b2:	f85d eb04 	ldr.w	lr, [sp], #4
    22b6:	b003      	add	sp, #12
    22b8:	4770      	bx	lr
    22ba:	bf00      	nop

000022bc <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	return vdprintf((int)this, (const char *)format, ap);
#endif
}

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    22bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    22be:	4606      	mov	r6, r0
    22c0:	b08b      	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    22c2:	2a00      	cmp	r2, #0
    22c4:	d033      	beq.n	232e <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    22c6:	2a01      	cmp	r2, #1
    22c8:	bf08      	it	eq
    22ca:	220a      	moveq	r2, #10
	}


	if (n == 0) {
    22cc:	b351      	cbz	r1, 2324 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    22ce:	2521      	movs	r5, #33	; 0x21
    22d0:	e000      	b.n	22d4 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    22d2:	b2fd      	uxtb	r5, r7
    22d4:	1e6f      	subs	r7, r5, #1
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    22d6:	fbb1 f4f2 	udiv	r4, r1, r2
    22da:	fb02 1114 	mls	r1, r2, r4, r1
    22de:	b2c8      	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    22e0:	2909      	cmp	r1, #9
    22e2:	f100 0137 	add.w	r1, r0, #55	; 0x37
    22e6:	f100 0030 	add.w	r0, r0, #48	; 0x30
    22ea:	bf88      	it	hi
    22ec:	b2c8      	uxtbhi	r0, r1
			n /= base;
			if (n == 0) break;
    22ee:	4621      	mov	r1, r4
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    22f0:	ac0a      	add	r4, sp, #40	; 0x28
    22f2:	bf98      	it	ls
    22f4:	b2c0      	uxtbls	r0, r0
    22f6:	442c      	add	r4, r5
    22f8:	f804 0c24 	strb.w	r0, [r4, #-36]
			n /= base;
			if (n == 0) break;
    22fc:	2900      	cmp	r1, #0
    22fe:	d1e8      	bne.n	22d2 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    2300:	b133      	cbz	r3, 2310 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    2302:	3d01      	subs	r5, #1
		buf[i] = '-';
    2304:	ab0a      	add	r3, sp, #40	; 0x28
    2306:	222d      	movs	r2, #45	; 0x2d
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
		i--;
    2308:	b2ed      	uxtb	r5, r5
		buf[i] = '-';
    230a:	442b      	add	r3, r5
    230c:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    2310:	6833      	ldr	r3, [r6, #0]
    2312:	a901      	add	r1, sp, #4
    2314:	f1c5 0222 	rsb	r2, r5, #34	; 0x22
    2318:	4630      	mov	r0, r6
    231a:	4429      	add	r1, r5
    231c:	685b      	ldr	r3, [r3, #4]
    231e:	4798      	blx	r3
}
    2320:	b00b      	add	sp, #44	; 0x2c
    2322:	bdf0      	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    2324:	2230      	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    2326:	2521      	movs	r5, #33	; 0x21
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    2328:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
    232c:	e7e8      	b.n	2300 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    232e:	6803      	ldr	r3, [r0, #0]
    2330:	b2c9      	uxtb	r1, r1
    2332:	681b      	ldr	r3, [r3, #0]
    2334:	4798      	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    2336:	b00b      	add	sp, #44	; 0x2c
    2338:	bdf0      	pop	{r4, r5, r6, r7, pc}
    233a:	bf00      	nop

0000233c <usb_serial_class::clear()>:
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    233c:	f7ff be78 	b.w	2030 <usb_serial_flush_input>

00002340 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    2340:	f7ff be4e 	b.w	1fe0 <usb_serial_peekchar>

00002344 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    2344:	f7ff beae 	b.w	20a4 <usb_serial_getchar>

00002348 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    2348:	f7ff be6c 	b.w	2024 <usb_serial_available>

0000234c <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    234c:	f7ff bf02 	b.w	2154 <usb_serial_flush_output>

00002350 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    2350:	f7ff beda 	b.w	2108 <usb_serial_write_buffer_free>

00002354 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    2354:	4608      	mov	r0, r1
    2356:	4611      	mov	r1, r2
    2358:	f7ff beca 	b.w	20f0 <usb_serial_write>

0000235c <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    235c:	4608      	mov	r0, r1
    235e:	f7ff beb1 	b.w	20c4 <usb_serial_putchar>
    2362:	bf00      	nop

00002364 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    2364:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    2368:	4e32      	ldr	r6, [pc, #200]	; (2434 <yield+0xd0>)
    236a:	7833      	ldrb	r3, [r6, #0]
    236c:	b193      	cbz	r3, 2394 <yield+0x30>
	if (running) return; // TODO: does this need to be atomic?
    236e:	4f32      	ldr	r7, [pc, #200]	; (2438 <yield+0xd4>)
    2370:	783a      	ldrb	r2, [r7, #0]
    2372:	b97a      	cbnz	r2, 2394 <yield+0x30>
	running = 1;
    2374:	2201      	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    2376:	07d9      	lsls	r1, r3, #31
void yield(void)
{
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    2378:	703a      	strb	r2, [r7, #0]


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    237a:	d437      	bmi.n	23ec <yield+0x88>
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();
    237c:	079a      	lsls	r2, r3, #30
    237e:	d419      	bmi.n	23b4 <yield+0x50>

	running = 0;
    2380:	2200      	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    2382:	075b      	lsls	r3, r3, #29
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();

	running = 0;
    2384:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    2386:	d505      	bpl.n	2394 <yield+0x30>
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    2388:	4b2c      	ldr	r3, [pc, #176]	; (243c <yield+0xd8>)
    238a:	681a      	ldr	r2, [r3, #0]
    238c:	b112      	cbz	r2, 2394 <yield+0x30>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    238e:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    2392:	b10a      	cbz	r2, 2398 <yield+0x34>
    2394:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    2398:	f3ef 8010 	mrs	r0, PRIMASK
		__disable_irq();
    239c:	b672      	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    239e:	681a      	ldr	r2, [r3, #0]
		if (first == nullptr) {
    23a0:	b11a      	cbz	r2, 23aa <yield+0x46>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    23a2:	4c27      	ldr	r4, [pc, #156]	; (2440 <yield+0xdc>)
    23a4:	7821      	ldrb	r1, [r4, #0]
    23a6:	2900      	cmp	r1, #0
    23a8:	d02f      	beq.n	240a <yield+0xa6>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    23aa:	2800      	cmp	r0, #0
    23ac:	d1f2      	bne.n	2394 <yield+0x30>
    23ae:	b662      	cpsie	i
    23b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    23b4:	f8df 8094 	ldr.w	r8, [pc, #148]	; 244c <yield+0xe8>
    23b8:	f898 2000 	ldrb.w	r2, [r8]
    23bc:	2a00      	cmp	r2, #0
    23be:	d0df      	beq.n	2380 <yield+0x1c>
    23c0:	2400      	movs	r4, #0
    23c2:	f8df 908c 	ldr.w	r9, [pc, #140]	; 2450 <yield+0xec>
    23c6:	e005      	b.n	23d4 <yield+0x70>
    23c8:	3401      	adds	r4, #1
    23ca:	f898 3000 	ldrb.w	r3, [r8]
    23ce:	b2e4      	uxtb	r4, r4
    23d0:	42a3      	cmp	r3, r4
    23d2:	d913      	bls.n	23fc <yield+0x98>
			s_serials_with_serial_events[i]->doYieldCode();
    23d4:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
	static HardwareSerial 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    23d8:	682b      	ldr	r3, [r5, #0]
    23da:	4628      	mov	r0, r5
    23dc:	691b      	ldr	r3, [r3, #16]
    23de:	4798      	blx	r3
    23e0:	2800      	cmp	r0, #0
    23e2:	d0f1      	beq.n	23c8 <yield+0x64>
    23e4:	696b      	ldr	r3, [r5, #20]
    23e6:	689b      	ldr	r3, [r3, #8]
    23e8:	4798      	blx	r3
    23ea:	e7ed      	b.n	23c8 <yield+0x64>
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    23ec:	f7ff fe1a 	bl	2024 <usb_serial_available>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    23f0:	b9d0      	cbnz	r0, 2428 <yield+0xc4>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    23f2:	4b14      	ldr	r3, [pc, #80]	; (2444 <yield+0xe0>)
    23f4:	781b      	ldrb	r3, [r3, #0]
    23f6:	b91b      	cbnz	r3, 2400 <yield+0x9c>
    23f8:	7833      	ldrb	r3, [r6, #0]
    23fa:	e7bf      	b.n	237c <yield+0x18>
    23fc:	7833      	ldrb	r3, [r6, #0]
    23fe:	e7bf      	b.n	2380 <yield+0x1c>
    2400:	7833      	ldrb	r3, [r6, #0]
    2402:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    2406:	7033      	strb	r3, [r6, #0]
    2408:	e7b8      	b.n	237c <yield+0x18>
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    240a:	2601      	movs	r6, #1
		firstYield = first->_next;
    240c:	6955      	ldr	r5, [r2, #20]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    240e:	7026      	strb	r6, [r4, #0]
		firstYield = first->_next;
    2410:	601d      	str	r5, [r3, #0]
		if (firstYield) {
    2412:	b165      	cbz	r5, 242e <yield+0xca>
			firstYield->_prev = nullptr;
    2414:	61a9      	str	r1, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    2416:	b900      	cbnz	r0, 241a <yield+0xb6>
    2418:	b662      	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    241a:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    241c:	6893      	ldr	r3, [r2, #8]
    241e:	4610      	mov	r0, r2
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    2420:	7755      	strb	r5, [r2, #29]
		(*(first->_function))(*first);
    2422:	4798      	blx	r3
		runningFromYield = false;
    2424:	7025      	strb	r5, [r4, #0]
    2426:	e7b5      	b.n	2394 <yield+0x30>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    2428:	f000 f8d6 	bl	25d8 <serialEvent()>
    242c:	e7e1      	b.n	23f2 <yield+0x8e>
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    242e:	4b06      	ldr	r3, [pc, #24]	; (2448 <yield+0xe4>)
    2430:	601d      	str	r5, [r3, #0]
    2432:	e7f0      	b.n	2416 <yield+0xb2>
    2434:	20000440 	.word	0x20000440
    2438:	20001291 	.word	0x20001291
    243c:	2000128c 	.word	0x2000128c
    2440:	20001290 	.word	0x20001290
    2444:	60001726 	.word	0x60001726
    2448:	20001288 	.word	0x20001288
    244c:	200012b0 	.word	0x200012b0
    2450:	20001294 	.word	0x20001294

00002454 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    2454:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    2456:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    245a:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    245e:	d16d      	bne.n	253c <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    2460:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    2462:	d341      	bcc.n	24e8 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    2464:	f851 3b04 	ldr.w	r3, [r1], #4
    2468:	f840 3b04 	str.w	r3, [r0], #4
    246c:	f851 3b04 	ldr.w	r3, [r1], #4
    2470:	f840 3b04 	str.w	r3, [r0], #4
    2474:	f851 3b04 	ldr.w	r3, [r1], #4
    2478:	f840 3b04 	str.w	r3, [r0], #4
    247c:	f851 3b04 	ldr.w	r3, [r1], #4
    2480:	f840 3b04 	str.w	r3, [r0], #4
    2484:	f851 3b04 	ldr.w	r3, [r1], #4
    2488:	f840 3b04 	str.w	r3, [r0], #4
    248c:	f851 3b04 	ldr.w	r3, [r1], #4
    2490:	f840 3b04 	str.w	r3, [r0], #4
    2494:	f851 3b04 	ldr.w	r3, [r1], #4
    2498:	f840 3b04 	str.w	r3, [r0], #4
    249c:	f851 3b04 	ldr.w	r3, [r1], #4
    24a0:	f840 3b04 	str.w	r3, [r0], #4
    24a4:	f851 3b04 	ldr.w	r3, [r1], #4
    24a8:	f840 3b04 	str.w	r3, [r0], #4
    24ac:	f851 3b04 	ldr.w	r3, [r1], #4
    24b0:	f840 3b04 	str.w	r3, [r0], #4
    24b4:	f851 3b04 	ldr.w	r3, [r1], #4
    24b8:	f840 3b04 	str.w	r3, [r0], #4
    24bc:	f851 3b04 	ldr.w	r3, [r1], #4
    24c0:	f840 3b04 	str.w	r3, [r0], #4
    24c4:	f851 3b04 	ldr.w	r3, [r1], #4
    24c8:	f840 3b04 	str.w	r3, [r0], #4
    24cc:	f851 3b04 	ldr.w	r3, [r1], #4
    24d0:	f840 3b04 	str.w	r3, [r0], #4
    24d4:	f851 3b04 	ldr.w	r3, [r1], #4
    24d8:	f840 3b04 	str.w	r3, [r0], #4
    24dc:	f851 3b04 	ldr.w	r3, [r1], #4
    24e0:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    24e4:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    24e6:	d2bd      	bcs.n	2464 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    24e8:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    24ea:	d311      	bcc.n	2510 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    24ec:	f851 3b04 	ldr.w	r3, [r1], #4
    24f0:	f840 3b04 	str.w	r3, [r0], #4
    24f4:	f851 3b04 	ldr.w	r3, [r1], #4
    24f8:	f840 3b04 	str.w	r3, [r0], #4
    24fc:	f851 3b04 	ldr.w	r3, [r1], #4
    2500:	f840 3b04 	str.w	r3, [r0], #4
    2504:	f851 3b04 	ldr.w	r3, [r1], #4
    2508:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    250c:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    250e:	d2ed      	bcs.n	24ec <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    2510:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    2512:	d305      	bcc.n	2520 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    2514:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    2518:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    251c:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    251e:	d2f9      	bcs.n	2514 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    2520:	3204      	adds	r2, #4
	beq	.Ldone
    2522:	d008      	beq.n	2536 <memcpy+0xe2>

	lsls	r2, r2, #31
    2524:	07d2      	lsls	r2, r2, #31
	itt ne
    2526:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    2528:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    252c:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    2530:	d301      	bcc.n	2536 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    2532:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    2534:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    2536:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    2538:	4770      	bx	lr
    253a:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    253c:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    253e:	d313      	bcc.n	2568 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    2540:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    2542:	d08d      	beq.n	2460 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    2544:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    2548:	d08a      	beq.n	2460 <memcpy+0xc>

	rsb	r3, #4
    254a:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    254e:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    2550:	07db      	lsls	r3, r3, #31
	itt ne
    2552:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    2554:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    2558:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    255c:	d380      	bcc.n	2460 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    255e:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    2562:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    2566:	e77b      	b.n	2460 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    2568:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    256a:	d3d9      	bcc.n	2520 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    256c:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    256e:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    2572:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    2576:	d2f9      	bcs.n	256c <memcpy+0x118>

	ldrb	r3, [r1]
    2578:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    257a:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    257c:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    257e:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    2580:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    2582:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    2584:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    2586:	4770      	bx	lr

00002588 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    2588:	b4f0      	push	{r4, r5, r6, r7}
    258a:	1e4e      	subs	r6, r1, #1
	unsigned digit;
	int i=0, j;
    258c:	2500      	movs	r5, #0
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    258e:	4637      	mov	r7, r6
    2590:	e000      	b.n	2594 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    2592:	3501      	adds	r5, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    2594:	fbb0 f3f2 	udiv	r3, r0, r2
    2598:	fb02 0013 	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    259c:	f100 0437 	add.w	r4, r0, #55	; 0x37
    25a0:	2809      	cmp	r0, #9
    25a2:	f100 0030 	add.w	r0, r0, #48	; 0x30
    25a6:	b2e4      	uxtb	r4, r4
    25a8:	bf98      	it	ls
    25aa:	b2c4      	uxtbls	r4, r0
		val /= radix;
		if (val == 0) break;
    25ac:	4618      	mov	r0, r3
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    25ae:	f807 4f01 	strb.w	r4, [r7, #1]!
		val /= radix;
		if (val == 0) break;
    25b2:	2b00      	cmp	r3, #0
    25b4:	d1ed      	bne.n	2592 <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    25b6:	194a      	adds	r2, r1, r5
    25b8:	7053      	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    25ba:	b14d      	cbz	r5, 25d0 <ultoa+0x48>
    25bc:	3301      	adds	r3, #1
		t = buf[j];
    25be:	f816 4f01 	ldrb.w	r4, [r6, #1]!
		buf[j] = buf[i];
    25c2:	7817      	ldrb	r7, [r2, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    25c4:	1ae8      	subs	r0, r5, r3
		t = buf[j];
		buf[j] = buf[i];
    25c6:	7037      	strb	r7, [r6, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    25c8:	4283      	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    25ca:	f802 4901 	strb.w	r4, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    25ce:	dbf5      	blt.n	25bc <ultoa+0x34>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    25d0:	4608      	mov	r0, r1
    25d2:	bcf0      	pop	{r4, r5, r6, r7}
    25d4:	4770      	bx	lr
    25d6:	bf00      	nop

000025d8 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
    25d8:	4770      	bx	lr
    25da:	bf00      	nop

000025dc <__errno>:
    25dc:	4b01      	ldr	r3, [pc, #4]	; (25e4 <__errno+0x8>)
    25de:	6818      	ldr	r0, [r3, #0]
    25e0:	4770      	bx	lr
    25e2:	bf00      	nop
    25e4:	20000870 	.word	0x20000870

000025e8 <__libc_init_array>:
    25e8:	b570      	push	{r4, r5, r6, lr}
    25ea:	4e0f      	ldr	r6, [pc, #60]	; (2628 <__libc_init_array+0x40>)
    25ec:	4d0f      	ldr	r5, [pc, #60]	; (262c <__libc_init_array+0x44>)
    25ee:	1b76      	subs	r6, r6, r5
    25f0:	10b6      	asrs	r6, r6, #2
    25f2:	bf18      	it	ne
    25f4:	2400      	movne	r4, #0
    25f6:	d005      	beq.n	2604 <__libc_init_array+0x1c>
    25f8:	3401      	adds	r4, #1
    25fa:	f855 3b04 	ldr.w	r3, [r5], #4
    25fe:	4798      	blx	r3
    2600:	42a6      	cmp	r6, r4
    2602:	d1f9      	bne.n	25f8 <__libc_init_array+0x10>
    2604:	4e0a      	ldr	r6, [pc, #40]	; (2630 <__libc_init_array+0x48>)
    2606:	4d0b      	ldr	r5, [pc, #44]	; (2634 <__libc_init_array+0x4c>)
    2608:	1b76      	subs	r6, r6, r5
    260a:	f003 ff21 	bl	6450 <___init_veneer>
    260e:	10b6      	asrs	r6, r6, #2
    2610:	bf18      	it	ne
    2612:	2400      	movne	r4, #0
    2614:	d006      	beq.n	2624 <__libc_init_array+0x3c>
    2616:	3401      	adds	r4, #1
    2618:	f855 3b04 	ldr.w	r3, [r5], #4
    261c:	4798      	blx	r3
    261e:	42a6      	cmp	r6, r4
    2620:	d1f9      	bne.n	2616 <__libc_init_array+0x2e>
    2622:	bd70      	pop	{r4, r5, r6, pc}
    2624:	bd70      	pop	{r4, r5, r6, pc}
    2626:	bf00      	nop
    2628:	60001780 	.word	0x60001780
    262c:	60001780 	.word	0x60001780
    2630:	6000178c 	.word	0x6000178c
    2634:	60001780 	.word	0x60001780

00002638 <_malloc_r>:
    2638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    263c:	f101 050b 	add.w	r5, r1, #11
    2640:	2d16      	cmp	r5, #22
    2642:	b083      	sub	sp, #12
    2644:	4606      	mov	r6, r0
    2646:	f240 809f 	bls.w	2788 <_malloc_r+0x150>
    264a:	f035 0507 	bics.w	r5, r5, #7
    264e:	f100 80bf 	bmi.w	27d0 <_malloc_r+0x198>
    2652:	42a9      	cmp	r1, r5
    2654:	f200 80bc 	bhi.w	27d0 <_malloc_r+0x198>
    2658:	f000 fb6e 	bl	2d38 <__malloc_lock>
    265c:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
    2660:	f0c0 829c 	bcc.w	2b9c <_malloc_r+0x564>
    2664:	0a6b      	lsrs	r3, r5, #9
    2666:	f000 80ba 	beq.w	27de <_malloc_r+0x1a6>
    266a:	2b04      	cmp	r3, #4
    266c:	f200 8183 	bhi.w	2976 <_malloc_r+0x33e>
    2670:	09a8      	lsrs	r0, r5, #6
    2672:	f100 0e39 	add.w	lr, r0, #57	; 0x39
    2676:	ea4f 034e 	mov.w	r3, lr, lsl #1
    267a:	3038      	adds	r0, #56	; 0x38
    267c:	4fc4      	ldr	r7, [pc, #784]	; (2990 <_malloc_r+0x358>)
    267e:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    2682:	f1a3 0108 	sub.w	r1, r3, #8
    2686:	685c      	ldr	r4, [r3, #4]
    2688:	42a1      	cmp	r1, r4
    268a:	d107      	bne.n	269c <_malloc_r+0x64>
    268c:	e0ac      	b.n	27e8 <_malloc_r+0x1b0>
    268e:	2a00      	cmp	r2, #0
    2690:	f280 80ac 	bge.w	27ec <_malloc_r+0x1b4>
    2694:	68e4      	ldr	r4, [r4, #12]
    2696:	42a1      	cmp	r1, r4
    2698:	f000 80a6 	beq.w	27e8 <_malloc_r+0x1b0>
    269c:	6863      	ldr	r3, [r4, #4]
    269e:	f023 0303 	bic.w	r3, r3, #3
    26a2:	1b5a      	subs	r2, r3, r5
    26a4:	2a0f      	cmp	r2, #15
    26a6:	ddf2      	ble.n	268e <_malloc_r+0x56>
    26a8:	49b9      	ldr	r1, [pc, #740]	; (2990 <_malloc_r+0x358>)
    26aa:	693c      	ldr	r4, [r7, #16]
    26ac:	f101 0e08 	add.w	lr, r1, #8
    26b0:	4574      	cmp	r4, lr
    26b2:	f000 81b3 	beq.w	2a1c <_malloc_r+0x3e4>
    26b6:	6863      	ldr	r3, [r4, #4]
    26b8:	f023 0303 	bic.w	r3, r3, #3
    26bc:	1b5a      	subs	r2, r3, r5
    26be:	2a0f      	cmp	r2, #15
    26c0:	f300 8199 	bgt.w	29f6 <_malloc_r+0x3be>
    26c4:	2a00      	cmp	r2, #0
    26c6:	f8c1 e014 	str.w	lr, [r1, #20]
    26ca:	f8c1 e010 	str.w	lr, [r1, #16]
    26ce:	f280 809e 	bge.w	280e <_malloc_r+0x1d6>
    26d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    26d6:	f080 8167 	bcs.w	29a8 <_malloc_r+0x370>
    26da:	08db      	lsrs	r3, r3, #3
    26dc:	f103 0c01 	add.w	ip, r3, #1
    26e0:	2201      	movs	r2, #1
    26e2:	109b      	asrs	r3, r3, #2
    26e4:	fa02 f303 	lsl.w	r3, r2, r3
    26e8:	684a      	ldr	r2, [r1, #4]
    26ea:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
    26ee:	f8c4 8008 	str.w	r8, [r4, #8]
    26f2:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
    26f6:	431a      	orrs	r2, r3
    26f8:	f1a9 0308 	sub.w	r3, r9, #8
    26fc:	60e3      	str	r3, [r4, #12]
    26fe:	604a      	str	r2, [r1, #4]
    2700:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
    2704:	f8c8 400c 	str.w	r4, [r8, #12]
    2708:	1083      	asrs	r3, r0, #2
    270a:	2401      	movs	r4, #1
    270c:	409c      	lsls	r4, r3
    270e:	4294      	cmp	r4, r2
    2710:	f200 808a 	bhi.w	2828 <_malloc_r+0x1f0>
    2714:	4214      	tst	r4, r2
    2716:	d106      	bne.n	2726 <_malloc_r+0xee>
    2718:	f020 0003 	bic.w	r0, r0, #3
    271c:	0064      	lsls	r4, r4, #1
    271e:	4214      	tst	r4, r2
    2720:	f100 0004 	add.w	r0, r0, #4
    2724:	d0fa      	beq.n	271c <_malloc_r+0xe4>
    2726:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    272a:	46cc      	mov	ip, r9
    272c:	4680      	mov	r8, r0
    272e:	f8dc 100c 	ldr.w	r1, [ip, #12]
    2732:	458c      	cmp	ip, r1
    2734:	d107      	bne.n	2746 <_malloc_r+0x10e>
    2736:	e173      	b.n	2a20 <_malloc_r+0x3e8>
    2738:	2a00      	cmp	r2, #0
    273a:	f280 8181 	bge.w	2a40 <_malloc_r+0x408>
    273e:	68c9      	ldr	r1, [r1, #12]
    2740:	458c      	cmp	ip, r1
    2742:	f000 816d 	beq.w	2a20 <_malloc_r+0x3e8>
    2746:	684b      	ldr	r3, [r1, #4]
    2748:	f023 0303 	bic.w	r3, r3, #3
    274c:	1b5a      	subs	r2, r3, r5
    274e:	2a0f      	cmp	r2, #15
    2750:	ddf2      	ble.n	2738 <_malloc_r+0x100>
    2752:	460c      	mov	r4, r1
    2754:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    2758:	f854 8f08 	ldr.w	r8, [r4, #8]!
    275c:	194b      	adds	r3, r1, r5
    275e:	f045 0501 	orr.w	r5, r5, #1
    2762:	604d      	str	r5, [r1, #4]
    2764:	f042 0101 	orr.w	r1, r2, #1
    2768:	f8c8 c00c 	str.w	ip, [r8, #12]
    276c:	4630      	mov	r0, r6
    276e:	f8cc 8008 	str.w	r8, [ip, #8]
    2772:	617b      	str	r3, [r7, #20]
    2774:	613b      	str	r3, [r7, #16]
    2776:	f8c3 e00c 	str.w	lr, [r3, #12]
    277a:	f8c3 e008 	str.w	lr, [r3, #8]
    277e:	6059      	str	r1, [r3, #4]
    2780:	509a      	str	r2, [r3, r2]
    2782:	f000 fadb 	bl	2d3c <__malloc_unlock>
    2786:	e01f      	b.n	27c8 <_malloc_r+0x190>
    2788:	2910      	cmp	r1, #16
    278a:	d821      	bhi.n	27d0 <_malloc_r+0x198>
    278c:	f000 fad4 	bl	2d38 <__malloc_lock>
    2790:	2510      	movs	r5, #16
    2792:	2306      	movs	r3, #6
    2794:	2002      	movs	r0, #2
    2796:	4f7e      	ldr	r7, [pc, #504]	; (2990 <_malloc_r+0x358>)
    2798:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    279c:	f1a3 0208 	sub.w	r2, r3, #8
    27a0:	685c      	ldr	r4, [r3, #4]
    27a2:	4294      	cmp	r4, r2
    27a4:	f000 8145 	beq.w	2a32 <_malloc_r+0x3fa>
    27a8:	6863      	ldr	r3, [r4, #4]
    27aa:	68e1      	ldr	r1, [r4, #12]
    27ac:	68a5      	ldr	r5, [r4, #8]
    27ae:	f023 0303 	bic.w	r3, r3, #3
    27b2:	4423      	add	r3, r4
    27b4:	4630      	mov	r0, r6
    27b6:	685a      	ldr	r2, [r3, #4]
    27b8:	60e9      	str	r1, [r5, #12]
    27ba:	f042 0201 	orr.w	r2, r2, #1
    27be:	608d      	str	r5, [r1, #8]
    27c0:	605a      	str	r2, [r3, #4]
    27c2:	f000 fabb 	bl	2d3c <__malloc_unlock>
    27c6:	3408      	adds	r4, #8
    27c8:	4620      	mov	r0, r4
    27ca:	b003      	add	sp, #12
    27cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    27d0:	2400      	movs	r4, #0
    27d2:	230c      	movs	r3, #12
    27d4:	4620      	mov	r0, r4
    27d6:	6033      	str	r3, [r6, #0]
    27d8:	b003      	add	sp, #12
    27da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    27de:	2380      	movs	r3, #128	; 0x80
    27e0:	f04f 0e40 	mov.w	lr, #64	; 0x40
    27e4:	203f      	movs	r0, #63	; 0x3f
    27e6:	e749      	b.n	267c <_malloc_r+0x44>
    27e8:	4670      	mov	r0, lr
    27ea:	e75d      	b.n	26a8 <_malloc_r+0x70>
    27ec:	4423      	add	r3, r4
    27ee:	68e1      	ldr	r1, [r4, #12]
    27f0:	685a      	ldr	r2, [r3, #4]
    27f2:	68a5      	ldr	r5, [r4, #8]
    27f4:	f042 0201 	orr.w	r2, r2, #1
    27f8:	60e9      	str	r1, [r5, #12]
    27fa:	4630      	mov	r0, r6
    27fc:	608d      	str	r5, [r1, #8]
    27fe:	605a      	str	r2, [r3, #4]
    2800:	f000 fa9c 	bl	2d3c <__malloc_unlock>
    2804:	3408      	adds	r4, #8
    2806:	4620      	mov	r0, r4
    2808:	b003      	add	sp, #12
    280a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    280e:	4423      	add	r3, r4
    2810:	4630      	mov	r0, r6
    2812:	685a      	ldr	r2, [r3, #4]
    2814:	f042 0201 	orr.w	r2, r2, #1
    2818:	605a      	str	r2, [r3, #4]
    281a:	f000 fa8f 	bl	2d3c <__malloc_unlock>
    281e:	3408      	adds	r4, #8
    2820:	4620      	mov	r0, r4
    2822:	b003      	add	sp, #12
    2824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2828:	68bc      	ldr	r4, [r7, #8]
    282a:	6863      	ldr	r3, [r4, #4]
    282c:	f023 0803 	bic.w	r8, r3, #3
    2830:	45a8      	cmp	r8, r5
    2832:	d304      	bcc.n	283e <_malloc_r+0x206>
    2834:	ebc5 0308 	rsb	r3, r5, r8
    2838:	2b0f      	cmp	r3, #15
    283a:	f300 808c 	bgt.w	2956 <_malloc_r+0x31e>
    283e:	4b55      	ldr	r3, [pc, #340]	; (2994 <_malloc_r+0x35c>)
    2840:	f8df 9160 	ldr.w	r9, [pc, #352]	; 29a4 <_malloc_r+0x36c>
    2844:	681a      	ldr	r2, [r3, #0]
    2846:	f8d9 3000 	ldr.w	r3, [r9]
    284a:	3301      	adds	r3, #1
    284c:	442a      	add	r2, r5
    284e:	eb04 0a08 	add.w	sl, r4, r8
    2852:	f000 8160 	beq.w	2b16 <_malloc_r+0x4de>
    2856:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    285a:	320f      	adds	r2, #15
    285c:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
    2860:	f022 020f 	bic.w	r2, r2, #15
    2864:	4611      	mov	r1, r2
    2866:	4630      	mov	r0, r6
    2868:	9201      	str	r2, [sp, #4]
    286a:	f000 fc59 	bl	3120 <_sbrk_r>
    286e:	f1b0 3fff 	cmp.w	r0, #4294967295
    2872:	4683      	mov	fp, r0
    2874:	9a01      	ldr	r2, [sp, #4]
    2876:	f000 8158 	beq.w	2b2a <_malloc_r+0x4f2>
    287a:	4582      	cmp	sl, r0
    287c:	f200 80fc 	bhi.w	2a78 <_malloc_r+0x440>
    2880:	4b45      	ldr	r3, [pc, #276]	; (2998 <_malloc_r+0x360>)
    2882:	6819      	ldr	r1, [r3, #0]
    2884:	45da      	cmp	sl, fp
    2886:	4411      	add	r1, r2
    2888:	6019      	str	r1, [r3, #0]
    288a:	f000 8153 	beq.w	2b34 <_malloc_r+0x4fc>
    288e:	f8d9 0000 	ldr.w	r0, [r9]
    2892:	f8df e110 	ldr.w	lr, [pc, #272]	; 29a4 <_malloc_r+0x36c>
    2896:	3001      	adds	r0, #1
    2898:	bf1b      	ittet	ne
    289a:	ebca 0a0b 	rsbne	sl, sl, fp
    289e:	4451      	addne	r1, sl
    28a0:	f8ce b000 	streq.w	fp, [lr]
    28a4:	6019      	strne	r1, [r3, #0]
    28a6:	f01b 0107 	ands.w	r1, fp, #7
    28aa:	f000 8117 	beq.w	2adc <_malloc_r+0x4a4>
    28ae:	f1c1 0008 	rsb	r0, r1, #8
    28b2:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
    28b6:	4483      	add	fp, r0
    28b8:	3108      	adds	r1, #8
    28ba:	445a      	add	r2, fp
    28bc:	f3c2 020b 	ubfx	r2, r2, #0, #12
    28c0:	ebc2 0901 	rsb	r9, r2, r1
    28c4:	4649      	mov	r1, r9
    28c6:	4630      	mov	r0, r6
    28c8:	9301      	str	r3, [sp, #4]
    28ca:	f000 fc29 	bl	3120 <_sbrk_r>
    28ce:	1c43      	adds	r3, r0, #1
    28d0:	9b01      	ldr	r3, [sp, #4]
    28d2:	f000 813f 	beq.w	2b54 <_malloc_r+0x51c>
    28d6:	ebcb 0200 	rsb	r2, fp, r0
    28da:	444a      	add	r2, r9
    28dc:	f042 0201 	orr.w	r2, r2, #1
    28e0:	6819      	ldr	r1, [r3, #0]
    28e2:	f8c7 b008 	str.w	fp, [r7, #8]
    28e6:	4449      	add	r1, r9
    28e8:	42bc      	cmp	r4, r7
    28ea:	f8cb 2004 	str.w	r2, [fp, #4]
    28ee:	6019      	str	r1, [r3, #0]
    28f0:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 2998 <_malloc_r+0x360>
    28f4:	d016      	beq.n	2924 <_malloc_r+0x2ec>
    28f6:	f1b8 0f0f 	cmp.w	r8, #15
    28fa:	f240 80fd 	bls.w	2af8 <_malloc_r+0x4c0>
    28fe:	6862      	ldr	r2, [r4, #4]
    2900:	f1a8 030c 	sub.w	r3, r8, #12
    2904:	f023 0307 	bic.w	r3, r3, #7
    2908:	18e0      	adds	r0, r4, r3
    290a:	f002 0201 	and.w	r2, r2, #1
    290e:	f04f 0e05 	mov.w	lr, #5
    2912:	431a      	orrs	r2, r3
    2914:	2b0f      	cmp	r3, #15
    2916:	6062      	str	r2, [r4, #4]
    2918:	f8c0 e004 	str.w	lr, [r0, #4]
    291c:	f8c0 e008 	str.w	lr, [r0, #8]
    2920:	f200 811c 	bhi.w	2b5c <_malloc_r+0x524>
    2924:	4b1d      	ldr	r3, [pc, #116]	; (299c <_malloc_r+0x364>)
    2926:	68bc      	ldr	r4, [r7, #8]
    2928:	681a      	ldr	r2, [r3, #0]
    292a:	4291      	cmp	r1, r2
    292c:	bf88      	it	hi
    292e:	6019      	strhi	r1, [r3, #0]
    2930:	4b1b      	ldr	r3, [pc, #108]	; (29a0 <_malloc_r+0x368>)
    2932:	681a      	ldr	r2, [r3, #0]
    2934:	4291      	cmp	r1, r2
    2936:	6862      	ldr	r2, [r4, #4]
    2938:	bf88      	it	hi
    293a:	6019      	strhi	r1, [r3, #0]
    293c:	f022 0203 	bic.w	r2, r2, #3
    2940:	4295      	cmp	r5, r2
    2942:	eba2 0305 	sub.w	r3, r2, r5
    2946:	d801      	bhi.n	294c <_malloc_r+0x314>
    2948:	2b0f      	cmp	r3, #15
    294a:	dc04      	bgt.n	2956 <_malloc_r+0x31e>
    294c:	4630      	mov	r0, r6
    294e:	f000 f9f5 	bl	2d3c <__malloc_unlock>
    2952:	2400      	movs	r4, #0
    2954:	e738      	b.n	27c8 <_malloc_r+0x190>
    2956:	1962      	adds	r2, r4, r5
    2958:	f043 0301 	orr.w	r3, r3, #1
    295c:	f045 0501 	orr.w	r5, r5, #1
    2960:	6065      	str	r5, [r4, #4]
    2962:	4630      	mov	r0, r6
    2964:	60ba      	str	r2, [r7, #8]
    2966:	6053      	str	r3, [r2, #4]
    2968:	f000 f9e8 	bl	2d3c <__malloc_unlock>
    296c:	3408      	adds	r4, #8
    296e:	4620      	mov	r0, r4
    2970:	b003      	add	sp, #12
    2972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2976:	2b14      	cmp	r3, #20
    2978:	d971      	bls.n	2a5e <_malloc_r+0x426>
    297a:	2b54      	cmp	r3, #84	; 0x54
    297c:	f200 80a4 	bhi.w	2ac8 <_malloc_r+0x490>
    2980:	0b28      	lsrs	r0, r5, #12
    2982:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
    2986:	ea4f 034e 	mov.w	r3, lr, lsl #1
    298a:	306e      	adds	r0, #110	; 0x6e
    298c:	e676      	b.n	267c <_malloc_r+0x44>
    298e:	bf00      	nop
    2990:	200009e0 	.word	0x200009e0
    2994:	200012bc 	.word	0x200012bc
    2998:	200012c0 	.word	0x200012c0
    299c:	200012b8 	.word	0x200012b8
    29a0:	200012b4 	.word	0x200012b4
    29a4:	20000dec 	.word	0x20000dec
    29a8:	0a5a      	lsrs	r2, r3, #9
    29aa:	2a04      	cmp	r2, #4
    29ac:	d95e      	bls.n	2a6c <_malloc_r+0x434>
    29ae:	2a14      	cmp	r2, #20
    29b0:	f200 80b3 	bhi.w	2b1a <_malloc_r+0x4e2>
    29b4:	f102 015c 	add.w	r1, r2, #92	; 0x5c
    29b8:	0049      	lsls	r1, r1, #1
    29ba:	325b      	adds	r2, #91	; 0x5b
    29bc:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
    29c0:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
    29c4:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 2ba4 <_malloc_r+0x56c>
    29c8:	f1ac 0c08 	sub.w	ip, ip, #8
    29cc:	458c      	cmp	ip, r1
    29ce:	f000 8088 	beq.w	2ae2 <_malloc_r+0x4aa>
    29d2:	684a      	ldr	r2, [r1, #4]
    29d4:	f022 0203 	bic.w	r2, r2, #3
    29d8:	4293      	cmp	r3, r2
    29da:	d202      	bcs.n	29e2 <_malloc_r+0x3aa>
    29dc:	6889      	ldr	r1, [r1, #8]
    29de:	458c      	cmp	ip, r1
    29e0:	d1f7      	bne.n	29d2 <_malloc_r+0x39a>
    29e2:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    29e6:	687a      	ldr	r2, [r7, #4]
    29e8:	f8c4 c00c 	str.w	ip, [r4, #12]
    29ec:	60a1      	str	r1, [r4, #8]
    29ee:	f8cc 4008 	str.w	r4, [ip, #8]
    29f2:	60cc      	str	r4, [r1, #12]
    29f4:	e688      	b.n	2708 <_malloc_r+0xd0>
    29f6:	1963      	adds	r3, r4, r5
    29f8:	f042 0701 	orr.w	r7, r2, #1
    29fc:	f045 0501 	orr.w	r5, r5, #1
    2a00:	6065      	str	r5, [r4, #4]
    2a02:	4630      	mov	r0, r6
    2a04:	614b      	str	r3, [r1, #20]
    2a06:	610b      	str	r3, [r1, #16]
    2a08:	f8c3 e00c 	str.w	lr, [r3, #12]
    2a0c:	f8c3 e008 	str.w	lr, [r3, #8]
    2a10:	605f      	str	r7, [r3, #4]
    2a12:	509a      	str	r2, [r3, r2]
    2a14:	3408      	adds	r4, #8
    2a16:	f000 f991 	bl	2d3c <__malloc_unlock>
    2a1a:	e6d5      	b.n	27c8 <_malloc_r+0x190>
    2a1c:	684a      	ldr	r2, [r1, #4]
    2a1e:	e673      	b.n	2708 <_malloc_r+0xd0>
    2a20:	f108 0801 	add.w	r8, r8, #1
    2a24:	f018 0f03 	tst.w	r8, #3
    2a28:	f10c 0c08 	add.w	ip, ip, #8
    2a2c:	f47f ae7f 	bne.w	272e <_malloc_r+0xf6>
    2a30:	e030      	b.n	2a94 <_malloc_r+0x45c>
    2a32:	68dc      	ldr	r4, [r3, #12]
    2a34:	42a3      	cmp	r3, r4
    2a36:	bf08      	it	eq
    2a38:	3002      	addeq	r0, #2
    2a3a:	f43f ae35 	beq.w	26a8 <_malloc_r+0x70>
    2a3e:	e6b3      	b.n	27a8 <_malloc_r+0x170>
    2a40:	440b      	add	r3, r1
    2a42:	460c      	mov	r4, r1
    2a44:	685a      	ldr	r2, [r3, #4]
    2a46:	68c9      	ldr	r1, [r1, #12]
    2a48:	f854 5f08 	ldr.w	r5, [r4, #8]!
    2a4c:	f042 0201 	orr.w	r2, r2, #1
    2a50:	605a      	str	r2, [r3, #4]
    2a52:	4630      	mov	r0, r6
    2a54:	60e9      	str	r1, [r5, #12]
    2a56:	608d      	str	r5, [r1, #8]
    2a58:	f000 f970 	bl	2d3c <__malloc_unlock>
    2a5c:	e6b4      	b.n	27c8 <_malloc_r+0x190>
    2a5e:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
    2a62:	f103 005b 	add.w	r0, r3, #91	; 0x5b
    2a66:	ea4f 034e 	mov.w	r3, lr, lsl #1
    2a6a:	e607      	b.n	267c <_malloc_r+0x44>
    2a6c:	099a      	lsrs	r2, r3, #6
    2a6e:	f102 0139 	add.w	r1, r2, #57	; 0x39
    2a72:	0049      	lsls	r1, r1, #1
    2a74:	3238      	adds	r2, #56	; 0x38
    2a76:	e7a1      	b.n	29bc <_malloc_r+0x384>
    2a78:	42bc      	cmp	r4, r7
    2a7a:	4b4a      	ldr	r3, [pc, #296]	; (2ba4 <_malloc_r+0x56c>)
    2a7c:	f43f af00 	beq.w	2880 <_malloc_r+0x248>
    2a80:	689c      	ldr	r4, [r3, #8]
    2a82:	6862      	ldr	r2, [r4, #4]
    2a84:	f022 0203 	bic.w	r2, r2, #3
    2a88:	e75a      	b.n	2940 <_malloc_r+0x308>
    2a8a:	f859 3908 	ldr.w	r3, [r9], #-8
    2a8e:	4599      	cmp	r9, r3
    2a90:	f040 8082 	bne.w	2b98 <_malloc_r+0x560>
    2a94:	f010 0f03 	tst.w	r0, #3
    2a98:	f100 30ff 	add.w	r0, r0, #4294967295
    2a9c:	d1f5      	bne.n	2a8a <_malloc_r+0x452>
    2a9e:	687b      	ldr	r3, [r7, #4]
    2aa0:	ea23 0304 	bic.w	r3, r3, r4
    2aa4:	607b      	str	r3, [r7, #4]
    2aa6:	0064      	lsls	r4, r4, #1
    2aa8:	429c      	cmp	r4, r3
    2aaa:	f63f aebd 	bhi.w	2828 <_malloc_r+0x1f0>
    2aae:	2c00      	cmp	r4, #0
    2ab0:	f43f aeba 	beq.w	2828 <_malloc_r+0x1f0>
    2ab4:	421c      	tst	r4, r3
    2ab6:	4640      	mov	r0, r8
    2ab8:	f47f ae35 	bne.w	2726 <_malloc_r+0xee>
    2abc:	0064      	lsls	r4, r4, #1
    2abe:	421c      	tst	r4, r3
    2ac0:	f100 0004 	add.w	r0, r0, #4
    2ac4:	d0fa      	beq.n	2abc <_malloc_r+0x484>
    2ac6:	e62e      	b.n	2726 <_malloc_r+0xee>
    2ac8:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    2acc:	d818      	bhi.n	2b00 <_malloc_r+0x4c8>
    2ace:	0be8      	lsrs	r0, r5, #15
    2ad0:	f100 0e78 	add.w	lr, r0, #120	; 0x78
    2ad4:	ea4f 034e 	mov.w	r3, lr, lsl #1
    2ad8:	3077      	adds	r0, #119	; 0x77
    2ada:	e5cf      	b.n	267c <_malloc_r+0x44>
    2adc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    2ae0:	e6eb      	b.n	28ba <_malloc_r+0x282>
    2ae2:	2101      	movs	r1, #1
    2ae4:	f8d8 3004 	ldr.w	r3, [r8, #4]
    2ae8:	1092      	asrs	r2, r2, #2
    2aea:	fa01 f202 	lsl.w	r2, r1, r2
    2aee:	431a      	orrs	r2, r3
    2af0:	f8c8 2004 	str.w	r2, [r8, #4]
    2af4:	4661      	mov	r1, ip
    2af6:	e777      	b.n	29e8 <_malloc_r+0x3b0>
    2af8:	2301      	movs	r3, #1
    2afa:	f8cb 3004 	str.w	r3, [fp, #4]
    2afe:	e725      	b.n	294c <_malloc_r+0x314>
    2b00:	f240 5254 	movw	r2, #1364	; 0x554
    2b04:	4293      	cmp	r3, r2
    2b06:	d820      	bhi.n	2b4a <_malloc_r+0x512>
    2b08:	0ca8      	lsrs	r0, r5, #18
    2b0a:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
    2b0e:	ea4f 034e 	mov.w	r3, lr, lsl #1
    2b12:	307c      	adds	r0, #124	; 0x7c
    2b14:	e5b2      	b.n	267c <_malloc_r+0x44>
    2b16:	3210      	adds	r2, #16
    2b18:	e6a4      	b.n	2864 <_malloc_r+0x22c>
    2b1a:	2a54      	cmp	r2, #84	; 0x54
    2b1c:	d826      	bhi.n	2b6c <_malloc_r+0x534>
    2b1e:	0b1a      	lsrs	r2, r3, #12
    2b20:	f102 016f 	add.w	r1, r2, #111	; 0x6f
    2b24:	0049      	lsls	r1, r1, #1
    2b26:	326e      	adds	r2, #110	; 0x6e
    2b28:	e748      	b.n	29bc <_malloc_r+0x384>
    2b2a:	68bc      	ldr	r4, [r7, #8]
    2b2c:	6862      	ldr	r2, [r4, #4]
    2b2e:	f022 0203 	bic.w	r2, r2, #3
    2b32:	e705      	b.n	2940 <_malloc_r+0x308>
    2b34:	f3ca 000b 	ubfx	r0, sl, #0, #12
    2b38:	2800      	cmp	r0, #0
    2b3a:	f47f aea8 	bne.w	288e <_malloc_r+0x256>
    2b3e:	4442      	add	r2, r8
    2b40:	68bb      	ldr	r3, [r7, #8]
    2b42:	f042 0201 	orr.w	r2, r2, #1
    2b46:	605a      	str	r2, [r3, #4]
    2b48:	e6ec      	b.n	2924 <_malloc_r+0x2ec>
    2b4a:	23fe      	movs	r3, #254	; 0xfe
    2b4c:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
    2b50:	207e      	movs	r0, #126	; 0x7e
    2b52:	e593      	b.n	267c <_malloc_r+0x44>
    2b54:	2201      	movs	r2, #1
    2b56:	f04f 0900 	mov.w	r9, #0
    2b5a:	e6c1      	b.n	28e0 <_malloc_r+0x2a8>
    2b5c:	f104 0108 	add.w	r1, r4, #8
    2b60:	4630      	mov	r0, r6
    2b62:	f000 fc1f 	bl	33a4 <_free_r>
    2b66:	f8d9 1000 	ldr.w	r1, [r9]
    2b6a:	e6db      	b.n	2924 <_malloc_r+0x2ec>
    2b6c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    2b70:	d805      	bhi.n	2b7e <_malloc_r+0x546>
    2b72:	0bda      	lsrs	r2, r3, #15
    2b74:	f102 0178 	add.w	r1, r2, #120	; 0x78
    2b78:	0049      	lsls	r1, r1, #1
    2b7a:	3277      	adds	r2, #119	; 0x77
    2b7c:	e71e      	b.n	29bc <_malloc_r+0x384>
    2b7e:	f240 5154 	movw	r1, #1364	; 0x554
    2b82:	428a      	cmp	r2, r1
    2b84:	d805      	bhi.n	2b92 <_malloc_r+0x55a>
    2b86:	0c9a      	lsrs	r2, r3, #18
    2b88:	f102 017d 	add.w	r1, r2, #125	; 0x7d
    2b8c:	0049      	lsls	r1, r1, #1
    2b8e:	327c      	adds	r2, #124	; 0x7c
    2b90:	e714      	b.n	29bc <_malloc_r+0x384>
    2b92:	21fe      	movs	r1, #254	; 0xfe
    2b94:	227e      	movs	r2, #126	; 0x7e
    2b96:	e711      	b.n	29bc <_malloc_r+0x384>
    2b98:	687b      	ldr	r3, [r7, #4]
    2b9a:	e784      	b.n	2aa6 <_malloc_r+0x46e>
    2b9c:	08e8      	lsrs	r0, r5, #3
    2b9e:	1c43      	adds	r3, r0, #1
    2ba0:	005b      	lsls	r3, r3, #1
    2ba2:	e5f8      	b.n	2796 <_malloc_r+0x15e>
    2ba4:	200009e0 	.word	0x200009e0

00002ba8 <__ascii_mbtowc>:
    2ba8:	b082      	sub	sp, #8
    2baa:	b149      	cbz	r1, 2bc0 <__ascii_mbtowc+0x18>
    2bac:	b15a      	cbz	r2, 2bc6 <__ascii_mbtowc+0x1e>
    2bae:	b16b      	cbz	r3, 2bcc <__ascii_mbtowc+0x24>
    2bb0:	7813      	ldrb	r3, [r2, #0]
    2bb2:	600b      	str	r3, [r1, #0]
    2bb4:	7812      	ldrb	r2, [r2, #0]
    2bb6:	1c10      	adds	r0, r2, #0
    2bb8:	bf18      	it	ne
    2bba:	2001      	movne	r0, #1
    2bbc:	b002      	add	sp, #8
    2bbe:	4770      	bx	lr
    2bc0:	a901      	add	r1, sp, #4
    2bc2:	2a00      	cmp	r2, #0
    2bc4:	d1f3      	bne.n	2bae <__ascii_mbtowc+0x6>
    2bc6:	4610      	mov	r0, r2
    2bc8:	b002      	add	sp, #8
    2bca:	4770      	bx	lr
    2bcc:	f06f 0001 	mvn.w	r0, #1
    2bd0:	e7f4      	b.n	2bbc <__ascii_mbtowc+0x14>
    2bd2:	bf00      	nop

00002bd4 <memmove>:
    2bd4:	4288      	cmp	r0, r1
    2bd6:	b5f0      	push	{r4, r5, r6, r7, lr}
    2bd8:	d90d      	bls.n	2bf6 <memmove+0x22>
    2bda:	188b      	adds	r3, r1, r2
    2bdc:	4298      	cmp	r0, r3
    2bde:	d20a      	bcs.n	2bf6 <memmove+0x22>
    2be0:	1881      	adds	r1, r0, r2
    2be2:	2a00      	cmp	r2, #0
    2be4:	d051      	beq.n	2c8a <memmove+0xb6>
    2be6:	1a9a      	subs	r2, r3, r2
    2be8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    2bec:	f801 4d01 	strb.w	r4, [r1, #-1]!
    2bf0:	4293      	cmp	r3, r2
    2bf2:	d1f9      	bne.n	2be8 <memmove+0x14>
    2bf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2bf6:	2a0f      	cmp	r2, #15
    2bf8:	d948      	bls.n	2c8c <memmove+0xb8>
    2bfa:	ea41 0300 	orr.w	r3, r1, r0
    2bfe:	079b      	lsls	r3, r3, #30
    2c00:	d146      	bne.n	2c90 <memmove+0xbc>
    2c02:	f100 0410 	add.w	r4, r0, #16
    2c06:	f101 0310 	add.w	r3, r1, #16
    2c0a:	4615      	mov	r5, r2
    2c0c:	f853 6c10 	ldr.w	r6, [r3, #-16]
    2c10:	f844 6c10 	str.w	r6, [r4, #-16]
    2c14:	f853 6c0c 	ldr.w	r6, [r3, #-12]
    2c18:	f844 6c0c 	str.w	r6, [r4, #-12]
    2c1c:	f853 6c08 	ldr.w	r6, [r3, #-8]
    2c20:	f844 6c08 	str.w	r6, [r4, #-8]
    2c24:	3d10      	subs	r5, #16
    2c26:	f853 6c04 	ldr.w	r6, [r3, #-4]
    2c2a:	f844 6c04 	str.w	r6, [r4, #-4]
    2c2e:	2d0f      	cmp	r5, #15
    2c30:	f103 0310 	add.w	r3, r3, #16
    2c34:	f104 0410 	add.w	r4, r4, #16
    2c38:	d8e8      	bhi.n	2c0c <memmove+0x38>
    2c3a:	f1a2 0310 	sub.w	r3, r2, #16
    2c3e:	f023 030f 	bic.w	r3, r3, #15
    2c42:	f002 0e0f 	and.w	lr, r2, #15
    2c46:	3310      	adds	r3, #16
    2c48:	f1be 0f03 	cmp.w	lr, #3
    2c4c:	4419      	add	r1, r3
    2c4e:	4403      	add	r3, r0
    2c50:	d921      	bls.n	2c96 <memmove+0xc2>
    2c52:	1f1e      	subs	r6, r3, #4
    2c54:	460d      	mov	r5, r1
    2c56:	4674      	mov	r4, lr
    2c58:	3c04      	subs	r4, #4
    2c5a:	f855 7b04 	ldr.w	r7, [r5], #4
    2c5e:	f846 7f04 	str.w	r7, [r6, #4]!
    2c62:	2c03      	cmp	r4, #3
    2c64:	d8f8      	bhi.n	2c58 <memmove+0x84>
    2c66:	f1ae 0404 	sub.w	r4, lr, #4
    2c6a:	f024 0403 	bic.w	r4, r4, #3
    2c6e:	3404      	adds	r4, #4
    2c70:	4423      	add	r3, r4
    2c72:	4421      	add	r1, r4
    2c74:	f002 0203 	and.w	r2, r2, #3
    2c78:	b162      	cbz	r2, 2c94 <memmove+0xc0>
    2c7a:	3b01      	subs	r3, #1
    2c7c:	440a      	add	r2, r1
    2c7e:	f811 4b01 	ldrb.w	r4, [r1], #1
    2c82:	f803 4f01 	strb.w	r4, [r3, #1]!
    2c86:	428a      	cmp	r2, r1
    2c88:	d1f9      	bne.n	2c7e <memmove+0xaa>
    2c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c8c:	4603      	mov	r3, r0
    2c8e:	e7f3      	b.n	2c78 <memmove+0xa4>
    2c90:	4603      	mov	r3, r0
    2c92:	e7f2      	b.n	2c7a <memmove+0xa6>
    2c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c96:	4672      	mov	r2, lr
    2c98:	e7ee      	b.n	2c78 <memmove+0xa4>
    2c9a:	bf00      	nop

00002c9c <memset>:
    2c9c:	b470      	push	{r4, r5, r6}
    2c9e:	0784      	lsls	r4, r0, #30
    2ca0:	d046      	beq.n	2d30 <memset+0x94>
    2ca2:	1e54      	subs	r4, r2, #1
    2ca4:	2a00      	cmp	r2, #0
    2ca6:	d041      	beq.n	2d2c <memset+0x90>
    2ca8:	b2cd      	uxtb	r5, r1
    2caa:	4603      	mov	r3, r0
    2cac:	e002      	b.n	2cb4 <memset+0x18>
    2cae:	1e62      	subs	r2, r4, #1
    2cb0:	b3e4      	cbz	r4, 2d2c <memset+0x90>
    2cb2:	4614      	mov	r4, r2
    2cb4:	f803 5b01 	strb.w	r5, [r3], #1
    2cb8:	079a      	lsls	r2, r3, #30
    2cba:	d1f8      	bne.n	2cae <memset+0x12>
    2cbc:	2c03      	cmp	r4, #3
    2cbe:	d92e      	bls.n	2d1e <memset+0x82>
    2cc0:	b2cd      	uxtb	r5, r1
    2cc2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    2cc6:	2c0f      	cmp	r4, #15
    2cc8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    2ccc:	d919      	bls.n	2d02 <memset+0x66>
    2cce:	f103 0210 	add.w	r2, r3, #16
    2cd2:	4626      	mov	r6, r4
    2cd4:	3e10      	subs	r6, #16
    2cd6:	2e0f      	cmp	r6, #15
    2cd8:	f842 5c10 	str.w	r5, [r2, #-16]
    2cdc:	f842 5c0c 	str.w	r5, [r2, #-12]
    2ce0:	f842 5c08 	str.w	r5, [r2, #-8]
    2ce4:	f842 5c04 	str.w	r5, [r2, #-4]
    2ce8:	f102 0210 	add.w	r2, r2, #16
    2cec:	d8f2      	bhi.n	2cd4 <memset+0x38>
    2cee:	f1a4 0210 	sub.w	r2, r4, #16
    2cf2:	f022 020f 	bic.w	r2, r2, #15
    2cf6:	f004 040f 	and.w	r4, r4, #15
    2cfa:	3210      	adds	r2, #16
    2cfc:	2c03      	cmp	r4, #3
    2cfe:	4413      	add	r3, r2
    2d00:	d90d      	bls.n	2d1e <memset+0x82>
    2d02:	461e      	mov	r6, r3
    2d04:	4622      	mov	r2, r4
    2d06:	3a04      	subs	r2, #4
    2d08:	2a03      	cmp	r2, #3
    2d0a:	f846 5b04 	str.w	r5, [r6], #4
    2d0e:	d8fa      	bhi.n	2d06 <memset+0x6a>
    2d10:	1f22      	subs	r2, r4, #4
    2d12:	f022 0203 	bic.w	r2, r2, #3
    2d16:	3204      	adds	r2, #4
    2d18:	4413      	add	r3, r2
    2d1a:	f004 0403 	and.w	r4, r4, #3
    2d1e:	b12c      	cbz	r4, 2d2c <memset+0x90>
    2d20:	b2c9      	uxtb	r1, r1
    2d22:	441c      	add	r4, r3
    2d24:	f803 1b01 	strb.w	r1, [r3], #1
    2d28:	42a3      	cmp	r3, r4
    2d2a:	d1fb      	bne.n	2d24 <memset+0x88>
    2d2c:	bc70      	pop	{r4, r5, r6}
    2d2e:	4770      	bx	lr
    2d30:	4614      	mov	r4, r2
    2d32:	4603      	mov	r3, r0
    2d34:	e7c2      	b.n	2cbc <memset+0x20>
    2d36:	bf00      	nop

00002d38 <__malloc_lock>:
    2d38:	4770      	bx	lr
    2d3a:	bf00      	nop

00002d3c <__malloc_unlock>:
    2d3c:	4770      	bx	lr
    2d3e:	bf00      	nop

00002d40 <_realloc_r>:
    2d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2d44:	4617      	mov	r7, r2
    2d46:	b083      	sub	sp, #12
    2d48:	2900      	cmp	r1, #0
    2d4a:	f000 80c1 	beq.w	2ed0 <_realloc_r+0x190>
    2d4e:	460e      	mov	r6, r1
    2d50:	4681      	mov	r9, r0
    2d52:	f107 050b 	add.w	r5, r7, #11
    2d56:	f7ff ffef 	bl	2d38 <__malloc_lock>
    2d5a:	f856 ec04 	ldr.w	lr, [r6, #-4]
    2d5e:	2d16      	cmp	r5, #22
    2d60:	f02e 0403 	bic.w	r4, lr, #3
    2d64:	f1a6 0808 	sub.w	r8, r6, #8
    2d68:	d840      	bhi.n	2dec <_realloc_r+0xac>
    2d6a:	2210      	movs	r2, #16
    2d6c:	4615      	mov	r5, r2
    2d6e:	42af      	cmp	r7, r5
    2d70:	d841      	bhi.n	2df6 <_realloc_r+0xb6>
    2d72:	4294      	cmp	r4, r2
    2d74:	da75      	bge.n	2e62 <_realloc_r+0x122>
    2d76:	4bc9      	ldr	r3, [pc, #804]	; (309c <_realloc_r+0x35c>)
    2d78:	6899      	ldr	r1, [r3, #8]
    2d7a:	eb08 0004 	add.w	r0, r8, r4
    2d7e:	4288      	cmp	r0, r1
    2d80:	6841      	ldr	r1, [r0, #4]
    2d82:	f000 80d9 	beq.w	2f38 <_realloc_r+0x1f8>
    2d86:	f021 0301 	bic.w	r3, r1, #1
    2d8a:	4403      	add	r3, r0
    2d8c:	685b      	ldr	r3, [r3, #4]
    2d8e:	07db      	lsls	r3, r3, #31
    2d90:	d57d      	bpl.n	2e8e <_realloc_r+0x14e>
    2d92:	f01e 0f01 	tst.w	lr, #1
    2d96:	d035      	beq.n	2e04 <_realloc_r+0xc4>
    2d98:	4639      	mov	r1, r7
    2d9a:	4648      	mov	r0, r9
    2d9c:	f7ff fc4c 	bl	2638 <_malloc_r>
    2da0:	4607      	mov	r7, r0
    2da2:	b1e0      	cbz	r0, 2dde <_realloc_r+0x9e>
    2da4:	f856 3c04 	ldr.w	r3, [r6, #-4]
    2da8:	f023 0301 	bic.w	r3, r3, #1
    2dac:	4443      	add	r3, r8
    2dae:	f1a0 0208 	sub.w	r2, r0, #8
    2db2:	429a      	cmp	r2, r3
    2db4:	f000 8144 	beq.w	3040 <_realloc_r+0x300>
    2db8:	1f22      	subs	r2, r4, #4
    2dba:	2a24      	cmp	r2, #36	; 0x24
    2dbc:	f200 8131 	bhi.w	3022 <_realloc_r+0x2e2>
    2dc0:	2a13      	cmp	r2, #19
    2dc2:	f200 8104 	bhi.w	2fce <_realloc_r+0x28e>
    2dc6:	4603      	mov	r3, r0
    2dc8:	4632      	mov	r2, r6
    2dca:	6811      	ldr	r1, [r2, #0]
    2dcc:	6019      	str	r1, [r3, #0]
    2dce:	6851      	ldr	r1, [r2, #4]
    2dd0:	6059      	str	r1, [r3, #4]
    2dd2:	6892      	ldr	r2, [r2, #8]
    2dd4:	609a      	str	r2, [r3, #8]
    2dd6:	4631      	mov	r1, r6
    2dd8:	4648      	mov	r0, r9
    2dda:	f000 fae3 	bl	33a4 <_free_r>
    2dde:	4648      	mov	r0, r9
    2de0:	f7ff ffac 	bl	2d3c <__malloc_unlock>
    2de4:	4638      	mov	r0, r7
    2de6:	b003      	add	sp, #12
    2de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2dec:	f025 0507 	bic.w	r5, r5, #7
    2df0:	2d00      	cmp	r5, #0
    2df2:	462a      	mov	r2, r5
    2df4:	dabb      	bge.n	2d6e <_realloc_r+0x2e>
    2df6:	230c      	movs	r3, #12
    2df8:	2000      	movs	r0, #0
    2dfa:	f8c9 3000 	str.w	r3, [r9]
    2dfe:	b003      	add	sp, #12
    2e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2e04:	f856 3c08 	ldr.w	r3, [r6, #-8]
    2e08:	ebc3 0a08 	rsb	sl, r3, r8
    2e0c:	f8da 3004 	ldr.w	r3, [sl, #4]
    2e10:	f023 0c03 	bic.w	ip, r3, #3
    2e14:	eb04 030c 	add.w	r3, r4, ip
    2e18:	4293      	cmp	r3, r2
    2e1a:	dbbd      	blt.n	2d98 <_realloc_r+0x58>
    2e1c:	4657      	mov	r7, sl
    2e1e:	f8da 100c 	ldr.w	r1, [sl, #12]
    2e22:	f857 0f08 	ldr.w	r0, [r7, #8]!
    2e26:	1f22      	subs	r2, r4, #4
    2e28:	2a24      	cmp	r2, #36	; 0x24
    2e2a:	60c1      	str	r1, [r0, #12]
    2e2c:	6088      	str	r0, [r1, #8]
    2e2e:	f200 8117 	bhi.w	3060 <_realloc_r+0x320>
    2e32:	2a13      	cmp	r2, #19
    2e34:	f240 8112 	bls.w	305c <_realloc_r+0x31c>
    2e38:	6831      	ldr	r1, [r6, #0]
    2e3a:	f8ca 1008 	str.w	r1, [sl, #8]
    2e3e:	6871      	ldr	r1, [r6, #4]
    2e40:	f8ca 100c 	str.w	r1, [sl, #12]
    2e44:	2a1b      	cmp	r2, #27
    2e46:	f200 812b 	bhi.w	30a0 <_realloc_r+0x360>
    2e4a:	3608      	adds	r6, #8
    2e4c:	f10a 0210 	add.w	r2, sl, #16
    2e50:	6831      	ldr	r1, [r6, #0]
    2e52:	6011      	str	r1, [r2, #0]
    2e54:	6871      	ldr	r1, [r6, #4]
    2e56:	6051      	str	r1, [r2, #4]
    2e58:	68b1      	ldr	r1, [r6, #8]
    2e5a:	6091      	str	r1, [r2, #8]
    2e5c:	463e      	mov	r6, r7
    2e5e:	461c      	mov	r4, r3
    2e60:	46d0      	mov	r8, sl
    2e62:	1b63      	subs	r3, r4, r5
    2e64:	2b0f      	cmp	r3, #15
    2e66:	d81d      	bhi.n	2ea4 <_realloc_r+0x164>
    2e68:	f8d8 3004 	ldr.w	r3, [r8, #4]
    2e6c:	f003 0301 	and.w	r3, r3, #1
    2e70:	4323      	orrs	r3, r4
    2e72:	4444      	add	r4, r8
    2e74:	f8c8 3004 	str.w	r3, [r8, #4]
    2e78:	6863      	ldr	r3, [r4, #4]
    2e7a:	f043 0301 	orr.w	r3, r3, #1
    2e7e:	6063      	str	r3, [r4, #4]
    2e80:	4648      	mov	r0, r9
    2e82:	f7ff ff5b 	bl	2d3c <__malloc_unlock>
    2e86:	4630      	mov	r0, r6
    2e88:	b003      	add	sp, #12
    2e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2e8e:	f021 0103 	bic.w	r1, r1, #3
    2e92:	4421      	add	r1, r4
    2e94:	4291      	cmp	r1, r2
    2e96:	db21      	blt.n	2edc <_realloc_r+0x19c>
    2e98:	68c3      	ldr	r3, [r0, #12]
    2e9a:	6882      	ldr	r2, [r0, #8]
    2e9c:	460c      	mov	r4, r1
    2e9e:	60d3      	str	r3, [r2, #12]
    2ea0:	609a      	str	r2, [r3, #8]
    2ea2:	e7de      	b.n	2e62 <_realloc_r+0x122>
    2ea4:	f8d8 2004 	ldr.w	r2, [r8, #4]
    2ea8:	eb08 0105 	add.w	r1, r8, r5
    2eac:	f002 0201 	and.w	r2, r2, #1
    2eb0:	4315      	orrs	r5, r2
    2eb2:	f043 0201 	orr.w	r2, r3, #1
    2eb6:	440b      	add	r3, r1
    2eb8:	f8c8 5004 	str.w	r5, [r8, #4]
    2ebc:	604a      	str	r2, [r1, #4]
    2ebe:	685a      	ldr	r2, [r3, #4]
    2ec0:	f042 0201 	orr.w	r2, r2, #1
    2ec4:	3108      	adds	r1, #8
    2ec6:	605a      	str	r2, [r3, #4]
    2ec8:	4648      	mov	r0, r9
    2eca:	f000 fa6b 	bl	33a4 <_free_r>
    2ece:	e7d7      	b.n	2e80 <_realloc_r+0x140>
    2ed0:	4611      	mov	r1, r2
    2ed2:	b003      	add	sp, #12
    2ed4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2ed8:	f7ff bbae 	b.w	2638 <_malloc_r>
    2edc:	f01e 0f01 	tst.w	lr, #1
    2ee0:	f47f af5a 	bne.w	2d98 <_realloc_r+0x58>
    2ee4:	f856 3c08 	ldr.w	r3, [r6, #-8]
    2ee8:	ebc3 0a08 	rsb	sl, r3, r8
    2eec:	f8da 3004 	ldr.w	r3, [sl, #4]
    2ef0:	f023 0c03 	bic.w	ip, r3, #3
    2ef4:	eb01 0e0c 	add.w	lr, r1, ip
    2ef8:	4596      	cmp	lr, r2
    2efa:	db8b      	blt.n	2e14 <_realloc_r+0xd4>
    2efc:	68c3      	ldr	r3, [r0, #12]
    2efe:	6882      	ldr	r2, [r0, #8]
    2f00:	4657      	mov	r7, sl
    2f02:	60d3      	str	r3, [r2, #12]
    2f04:	609a      	str	r2, [r3, #8]
    2f06:	f857 1f08 	ldr.w	r1, [r7, #8]!
    2f0a:	f8da 300c 	ldr.w	r3, [sl, #12]
    2f0e:	60cb      	str	r3, [r1, #12]
    2f10:	1f22      	subs	r2, r4, #4
    2f12:	2a24      	cmp	r2, #36	; 0x24
    2f14:	6099      	str	r1, [r3, #8]
    2f16:	f200 8099 	bhi.w	304c <_realloc_r+0x30c>
    2f1a:	2a13      	cmp	r2, #19
    2f1c:	d962      	bls.n	2fe4 <_realloc_r+0x2a4>
    2f1e:	6833      	ldr	r3, [r6, #0]
    2f20:	f8ca 3008 	str.w	r3, [sl, #8]
    2f24:	6873      	ldr	r3, [r6, #4]
    2f26:	f8ca 300c 	str.w	r3, [sl, #12]
    2f2a:	2a1b      	cmp	r2, #27
    2f2c:	f200 80a0 	bhi.w	3070 <_realloc_r+0x330>
    2f30:	3608      	adds	r6, #8
    2f32:	f10a 0310 	add.w	r3, sl, #16
    2f36:	e056      	b.n	2fe6 <_realloc_r+0x2a6>
    2f38:	f021 0b03 	bic.w	fp, r1, #3
    2f3c:	44a3      	add	fp, r4
    2f3e:	f105 0010 	add.w	r0, r5, #16
    2f42:	4583      	cmp	fp, r0
    2f44:	da59      	bge.n	2ffa <_realloc_r+0x2ba>
    2f46:	f01e 0f01 	tst.w	lr, #1
    2f4a:	f47f af25 	bne.w	2d98 <_realloc_r+0x58>
    2f4e:	f856 1c08 	ldr.w	r1, [r6, #-8]
    2f52:	ebc1 0a08 	rsb	sl, r1, r8
    2f56:	f8da 1004 	ldr.w	r1, [sl, #4]
    2f5a:	f021 0c03 	bic.w	ip, r1, #3
    2f5e:	44e3      	add	fp, ip
    2f60:	4558      	cmp	r0, fp
    2f62:	f73f af57 	bgt.w	2e14 <_realloc_r+0xd4>
    2f66:	4657      	mov	r7, sl
    2f68:	f8da 100c 	ldr.w	r1, [sl, #12]
    2f6c:	f857 0f08 	ldr.w	r0, [r7, #8]!
    2f70:	1f22      	subs	r2, r4, #4
    2f72:	2a24      	cmp	r2, #36	; 0x24
    2f74:	60c1      	str	r1, [r0, #12]
    2f76:	6088      	str	r0, [r1, #8]
    2f78:	f200 80b4 	bhi.w	30e4 <_realloc_r+0x3a4>
    2f7c:	2a13      	cmp	r2, #19
    2f7e:	f240 80a5 	bls.w	30cc <_realloc_r+0x38c>
    2f82:	6831      	ldr	r1, [r6, #0]
    2f84:	f8ca 1008 	str.w	r1, [sl, #8]
    2f88:	6871      	ldr	r1, [r6, #4]
    2f8a:	f8ca 100c 	str.w	r1, [sl, #12]
    2f8e:	2a1b      	cmp	r2, #27
    2f90:	f200 80af 	bhi.w	30f2 <_realloc_r+0x3b2>
    2f94:	3608      	adds	r6, #8
    2f96:	f10a 0210 	add.w	r2, sl, #16
    2f9a:	6831      	ldr	r1, [r6, #0]
    2f9c:	6011      	str	r1, [r2, #0]
    2f9e:	6871      	ldr	r1, [r6, #4]
    2fa0:	6051      	str	r1, [r2, #4]
    2fa2:	68b1      	ldr	r1, [r6, #8]
    2fa4:	6091      	str	r1, [r2, #8]
    2fa6:	eb0a 0105 	add.w	r1, sl, r5
    2faa:	ebc5 020b 	rsb	r2, r5, fp
    2fae:	f042 0201 	orr.w	r2, r2, #1
    2fb2:	6099      	str	r1, [r3, #8]
    2fb4:	604a      	str	r2, [r1, #4]
    2fb6:	f8da 3004 	ldr.w	r3, [sl, #4]
    2fba:	f003 0301 	and.w	r3, r3, #1
    2fbe:	431d      	orrs	r5, r3
    2fc0:	4648      	mov	r0, r9
    2fc2:	f8ca 5004 	str.w	r5, [sl, #4]
    2fc6:	f7ff feb9 	bl	2d3c <__malloc_unlock>
    2fca:	4638      	mov	r0, r7
    2fcc:	e75c      	b.n	2e88 <_realloc_r+0x148>
    2fce:	6833      	ldr	r3, [r6, #0]
    2fd0:	6003      	str	r3, [r0, #0]
    2fd2:	6873      	ldr	r3, [r6, #4]
    2fd4:	6043      	str	r3, [r0, #4]
    2fd6:	2a1b      	cmp	r2, #27
    2fd8:	d827      	bhi.n	302a <_realloc_r+0x2ea>
    2fda:	f100 0308 	add.w	r3, r0, #8
    2fde:	f106 0208 	add.w	r2, r6, #8
    2fe2:	e6f2      	b.n	2dca <_realloc_r+0x8a>
    2fe4:	463b      	mov	r3, r7
    2fe6:	6832      	ldr	r2, [r6, #0]
    2fe8:	601a      	str	r2, [r3, #0]
    2fea:	6872      	ldr	r2, [r6, #4]
    2fec:	605a      	str	r2, [r3, #4]
    2fee:	68b2      	ldr	r2, [r6, #8]
    2ff0:	609a      	str	r2, [r3, #8]
    2ff2:	463e      	mov	r6, r7
    2ff4:	4674      	mov	r4, lr
    2ff6:	46d0      	mov	r8, sl
    2ff8:	e733      	b.n	2e62 <_realloc_r+0x122>
    2ffa:	eb08 0105 	add.w	r1, r8, r5
    2ffe:	ebc5 0b0b 	rsb	fp, r5, fp
    3002:	f04b 0201 	orr.w	r2, fp, #1
    3006:	6099      	str	r1, [r3, #8]
    3008:	604a      	str	r2, [r1, #4]
    300a:	f856 3c04 	ldr.w	r3, [r6, #-4]
    300e:	f003 0301 	and.w	r3, r3, #1
    3012:	431d      	orrs	r5, r3
    3014:	4648      	mov	r0, r9
    3016:	f846 5c04 	str.w	r5, [r6, #-4]
    301a:	f7ff fe8f 	bl	2d3c <__malloc_unlock>
    301e:	4630      	mov	r0, r6
    3020:	e732      	b.n	2e88 <_realloc_r+0x148>
    3022:	4631      	mov	r1, r6
    3024:	f7ff fdd6 	bl	2bd4 <memmove>
    3028:	e6d5      	b.n	2dd6 <_realloc_r+0x96>
    302a:	68b3      	ldr	r3, [r6, #8]
    302c:	6083      	str	r3, [r0, #8]
    302e:	68f3      	ldr	r3, [r6, #12]
    3030:	60c3      	str	r3, [r0, #12]
    3032:	2a24      	cmp	r2, #36	; 0x24
    3034:	d028      	beq.n	3088 <_realloc_r+0x348>
    3036:	f100 0310 	add.w	r3, r0, #16
    303a:	f106 0210 	add.w	r2, r6, #16
    303e:	e6c4      	b.n	2dca <_realloc_r+0x8a>
    3040:	f850 3c04 	ldr.w	r3, [r0, #-4]
    3044:	f023 0303 	bic.w	r3, r3, #3
    3048:	441c      	add	r4, r3
    304a:	e70a      	b.n	2e62 <_realloc_r+0x122>
    304c:	4631      	mov	r1, r6
    304e:	4638      	mov	r0, r7
    3050:	4674      	mov	r4, lr
    3052:	46d0      	mov	r8, sl
    3054:	f7ff fdbe 	bl	2bd4 <memmove>
    3058:	463e      	mov	r6, r7
    305a:	e702      	b.n	2e62 <_realloc_r+0x122>
    305c:	463a      	mov	r2, r7
    305e:	e6f7      	b.n	2e50 <_realloc_r+0x110>
    3060:	4631      	mov	r1, r6
    3062:	4638      	mov	r0, r7
    3064:	461c      	mov	r4, r3
    3066:	46d0      	mov	r8, sl
    3068:	f7ff fdb4 	bl	2bd4 <memmove>
    306c:	463e      	mov	r6, r7
    306e:	e6f8      	b.n	2e62 <_realloc_r+0x122>
    3070:	68b3      	ldr	r3, [r6, #8]
    3072:	f8ca 3010 	str.w	r3, [sl, #16]
    3076:	68f3      	ldr	r3, [r6, #12]
    3078:	f8ca 3014 	str.w	r3, [sl, #20]
    307c:	2a24      	cmp	r2, #36	; 0x24
    307e:	d01b      	beq.n	30b8 <_realloc_r+0x378>
    3080:	3610      	adds	r6, #16
    3082:	f10a 0318 	add.w	r3, sl, #24
    3086:	e7ae      	b.n	2fe6 <_realloc_r+0x2a6>
    3088:	6933      	ldr	r3, [r6, #16]
    308a:	6103      	str	r3, [r0, #16]
    308c:	6973      	ldr	r3, [r6, #20]
    308e:	6143      	str	r3, [r0, #20]
    3090:	f106 0218 	add.w	r2, r6, #24
    3094:	f100 0318 	add.w	r3, r0, #24
    3098:	e697      	b.n	2dca <_realloc_r+0x8a>
    309a:	bf00      	nop
    309c:	200009e0 	.word	0x200009e0
    30a0:	68b1      	ldr	r1, [r6, #8]
    30a2:	f8ca 1010 	str.w	r1, [sl, #16]
    30a6:	68f1      	ldr	r1, [r6, #12]
    30a8:	f8ca 1014 	str.w	r1, [sl, #20]
    30ac:	2a24      	cmp	r2, #36	; 0x24
    30ae:	d00f      	beq.n	30d0 <_realloc_r+0x390>
    30b0:	3610      	adds	r6, #16
    30b2:	f10a 0218 	add.w	r2, sl, #24
    30b6:	e6cb      	b.n	2e50 <_realloc_r+0x110>
    30b8:	6933      	ldr	r3, [r6, #16]
    30ba:	f8ca 3018 	str.w	r3, [sl, #24]
    30be:	6973      	ldr	r3, [r6, #20]
    30c0:	f8ca 301c 	str.w	r3, [sl, #28]
    30c4:	3618      	adds	r6, #24
    30c6:	f10a 0320 	add.w	r3, sl, #32
    30ca:	e78c      	b.n	2fe6 <_realloc_r+0x2a6>
    30cc:	463a      	mov	r2, r7
    30ce:	e764      	b.n	2f9a <_realloc_r+0x25a>
    30d0:	6932      	ldr	r2, [r6, #16]
    30d2:	f8ca 2018 	str.w	r2, [sl, #24]
    30d6:	6972      	ldr	r2, [r6, #20]
    30d8:	f8ca 201c 	str.w	r2, [sl, #28]
    30dc:	3618      	adds	r6, #24
    30de:	f10a 0220 	add.w	r2, sl, #32
    30e2:	e6b5      	b.n	2e50 <_realloc_r+0x110>
    30e4:	4631      	mov	r1, r6
    30e6:	4638      	mov	r0, r7
    30e8:	9301      	str	r3, [sp, #4]
    30ea:	f7ff fd73 	bl	2bd4 <memmove>
    30ee:	9b01      	ldr	r3, [sp, #4]
    30f0:	e759      	b.n	2fa6 <_realloc_r+0x266>
    30f2:	68b1      	ldr	r1, [r6, #8]
    30f4:	f8ca 1010 	str.w	r1, [sl, #16]
    30f8:	68f1      	ldr	r1, [r6, #12]
    30fa:	f8ca 1014 	str.w	r1, [sl, #20]
    30fe:	2a24      	cmp	r2, #36	; 0x24
    3100:	d003      	beq.n	310a <_realloc_r+0x3ca>
    3102:	3610      	adds	r6, #16
    3104:	f10a 0218 	add.w	r2, sl, #24
    3108:	e747      	b.n	2f9a <_realloc_r+0x25a>
    310a:	6932      	ldr	r2, [r6, #16]
    310c:	f8ca 2018 	str.w	r2, [sl, #24]
    3110:	6972      	ldr	r2, [r6, #20]
    3112:	f8ca 201c 	str.w	r2, [sl, #28]
    3116:	3618      	adds	r6, #24
    3118:	f10a 0220 	add.w	r2, sl, #32
    311c:	e73d      	b.n	2f9a <_realloc_r+0x25a>
    311e:	bf00      	nop

00003120 <_sbrk_r>:
    3120:	b538      	push	{r3, r4, r5, lr}
    3122:	4c07      	ldr	r4, [pc, #28]	; (3140 <_sbrk_r+0x20>)
    3124:	2300      	movs	r3, #0
    3126:	4605      	mov	r5, r0
    3128:	4608      	mov	r0, r1
    312a:	6023      	str	r3, [r4, #0]
    312c:	f7fd ffec 	bl	1108 <_sbrk>
    3130:	1c43      	adds	r3, r0, #1
    3132:	d000      	beq.n	3136 <_sbrk_r+0x16>
    3134:	bd38      	pop	{r3, r4, r5, pc}
    3136:	6823      	ldr	r3, [r4, #0]
    3138:	2b00      	cmp	r3, #0
    313a:	d0fb      	beq.n	3134 <_sbrk_r+0x14>
    313c:	602b      	str	r3, [r5, #0]
    313e:	bd38      	pop	{r3, r4, r5, pc}
    3140:	2000328c 	.word	0x2000328c
	...

00003180 <strlen>:
    3180:	f890 f000 	pld	[r0]
    3184:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    3188:	f020 0107 	bic.w	r1, r0, #7
    318c:	f06f 0c00 	mvn.w	ip, #0
    3190:	f010 0407 	ands.w	r4, r0, #7
    3194:	f891 f020 	pld	[r1, #32]
    3198:	f040 8049 	bne.w	322e <strlen+0xae>
    319c:	f04f 0400 	mov.w	r4, #0
    31a0:	f06f 0007 	mvn.w	r0, #7
    31a4:	e9d1 2300 	ldrd	r2, r3, [r1]
    31a8:	f891 f040 	pld	[r1, #64]	; 0x40
    31ac:	f100 0008 	add.w	r0, r0, #8
    31b0:	fa82 f24c 	uadd8	r2, r2, ip
    31b4:	faa4 f28c 	sel	r2, r4, ip
    31b8:	fa83 f34c 	uadd8	r3, r3, ip
    31bc:	faa2 f38c 	sel	r3, r2, ip
    31c0:	bb4b      	cbnz	r3, 3216 <strlen+0x96>
    31c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    31c6:	fa82 f24c 	uadd8	r2, r2, ip
    31ca:	f100 0008 	add.w	r0, r0, #8
    31ce:	faa4 f28c 	sel	r2, r4, ip
    31d2:	fa83 f34c 	uadd8	r3, r3, ip
    31d6:	faa2 f38c 	sel	r3, r2, ip
    31da:	b9e3      	cbnz	r3, 3216 <strlen+0x96>
    31dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    31e0:	fa82 f24c 	uadd8	r2, r2, ip
    31e4:	f100 0008 	add.w	r0, r0, #8
    31e8:	faa4 f28c 	sel	r2, r4, ip
    31ec:	fa83 f34c 	uadd8	r3, r3, ip
    31f0:	faa2 f38c 	sel	r3, r2, ip
    31f4:	b97b      	cbnz	r3, 3216 <strlen+0x96>
    31f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    31fa:	f101 0120 	add.w	r1, r1, #32
    31fe:	fa82 f24c 	uadd8	r2, r2, ip
    3202:	f100 0008 	add.w	r0, r0, #8
    3206:	faa4 f28c 	sel	r2, r4, ip
    320a:	fa83 f34c 	uadd8	r3, r3, ip
    320e:	faa2 f38c 	sel	r3, r2, ip
    3212:	2b00      	cmp	r3, #0
    3214:	d0c6      	beq.n	31a4 <strlen+0x24>
    3216:	2a00      	cmp	r2, #0
    3218:	bf04      	itt	eq
    321a:	3004      	addeq	r0, #4
    321c:	461a      	moveq	r2, r3
    321e:	ba12      	rev	r2, r2
    3220:	fab2 f282 	clz	r2, r2
    3224:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    3228:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    322c:	4770      	bx	lr
    322e:	e9d1 2300 	ldrd	r2, r3, [r1]
    3232:	f004 0503 	and.w	r5, r4, #3
    3236:	f1c4 0000 	rsb	r0, r4, #0
    323a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    323e:	f014 0f04 	tst.w	r4, #4
    3242:	f891 f040 	pld	[r1, #64]	; 0x40
    3246:	fa0c f505 	lsl.w	r5, ip, r5
    324a:	ea62 0205 	orn	r2, r2, r5
    324e:	bf1c      	itt	ne
    3250:	ea63 0305 	ornne	r3, r3, r5
    3254:	4662      	movne	r2, ip
    3256:	f04f 0400 	mov.w	r4, #0
    325a:	e7a9      	b.n	31b0 <strlen+0x30>

0000325c <_vdprintf_r>:
    325c:	b5f0      	push	{r4, r5, r6, r7, lr}
    325e:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
    3262:	ad04      	add	r5, sp, #16
    3264:	9300      	str	r3, [sp, #0]
    3266:	460f      	mov	r7, r1
    3268:	4613      	mov	r3, r2
    326a:	f44f 7400 	mov.w	r4, #512	; 0x200
    326e:	aa03      	add	r2, sp, #12
    3270:	4629      	mov	r1, r5
    3272:	9403      	str	r4, [sp, #12]
    3274:	4606      	mov	r6, r0
    3276:	f000 fced 	bl	3c54 <_vasnprintf_r>
    327a:	b188      	cbz	r0, 32a0 <_vdprintf_r+0x44>
    327c:	4604      	mov	r4, r0
    327e:	4602      	mov	r2, r0
    3280:	4639      	mov	r1, r7
    3282:	9b03      	ldr	r3, [sp, #12]
    3284:	4630      	mov	r0, r6
    3286:	f000 f829 	bl	32dc <_write_r>
    328a:	42ac      	cmp	r4, r5
    328c:	9003      	str	r0, [sp, #12]
    328e:	d004      	beq.n	329a <_vdprintf_r+0x3e>
    3290:	4630      	mov	r0, r6
    3292:	4621      	mov	r1, r4
    3294:	f000 f886 	bl	33a4 <_free_r>
    3298:	9803      	ldr	r0, [sp, #12]
    329a:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
    329e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    32a0:	f04f 30ff 	mov.w	r0, #4294967295
    32a4:	e7f9      	b.n	329a <_vdprintf_r+0x3e>
    32a6:	bf00      	nop

000032a8 <vdprintf>:
    32a8:	b410      	push	{r4}
    32aa:	4c04      	ldr	r4, [pc, #16]	; (32bc <vdprintf+0x14>)
    32ac:	4613      	mov	r3, r2
    32ae:	460a      	mov	r2, r1
    32b0:	4601      	mov	r1, r0
    32b2:	6820      	ldr	r0, [r4, #0]
    32b4:	f85d 4b04 	ldr.w	r4, [sp], #4
    32b8:	f7ff bfd0 	b.w	325c <_vdprintf_r>
    32bc:	20000870 	.word	0x20000870

000032c0 <__ascii_wctomb>:
    32c0:	b121      	cbz	r1, 32cc <__ascii_wctomb+0xc>
    32c2:	2aff      	cmp	r2, #255	; 0xff
    32c4:	d804      	bhi.n	32d0 <__ascii_wctomb+0x10>
    32c6:	700a      	strb	r2, [r1, #0]
    32c8:	2001      	movs	r0, #1
    32ca:	4770      	bx	lr
    32cc:	4608      	mov	r0, r1
    32ce:	4770      	bx	lr
    32d0:	238a      	movs	r3, #138	; 0x8a
    32d2:	6003      	str	r3, [r0, #0]
    32d4:	f04f 30ff 	mov.w	r0, #4294967295
    32d8:	4770      	bx	lr
    32da:	bf00      	nop

000032dc <_write_r>:
    32dc:	b570      	push	{r4, r5, r6, lr}
    32de:	460d      	mov	r5, r1
    32e0:	4c08      	ldr	r4, [pc, #32]	; (3304 <_write_r+0x28>)
    32e2:	4611      	mov	r1, r2
    32e4:	4606      	mov	r6, r0
    32e6:	461a      	mov	r2, r3
    32e8:	4628      	mov	r0, r5
    32ea:	2300      	movs	r3, #0
    32ec:	6023      	str	r3, [r4, #0]
    32ee:	f7fe ffcd 	bl	228c <_write>
    32f2:	1c43      	adds	r3, r0, #1
    32f4:	d000      	beq.n	32f8 <_write_r+0x1c>
    32f6:	bd70      	pop	{r4, r5, r6, pc}
    32f8:	6823      	ldr	r3, [r4, #0]
    32fa:	2b00      	cmp	r3, #0
    32fc:	d0fb      	beq.n	32f6 <_write_r+0x1a>
    32fe:	6033      	str	r3, [r6, #0]
    3300:	bd70      	pop	{r4, r5, r6, pc}
    3302:	bf00      	nop
    3304:	2000328c 	.word	0x2000328c

00003308 <_malloc_trim_r>:
    3308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    330a:	4f23      	ldr	r7, [pc, #140]	; (3398 <_malloc_trim_r+0x90>)
    330c:	460c      	mov	r4, r1
    330e:	4606      	mov	r6, r0
    3310:	f7ff fd12 	bl	2d38 <__malloc_lock>
    3314:	68bb      	ldr	r3, [r7, #8]
    3316:	685d      	ldr	r5, [r3, #4]
    3318:	f025 0503 	bic.w	r5, r5, #3
    331c:	1b29      	subs	r1, r5, r4
    331e:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
    3322:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
    3326:	f021 010f 	bic.w	r1, r1, #15
    332a:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
    332e:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    3332:	db07      	blt.n	3344 <_malloc_trim_r+0x3c>
    3334:	2100      	movs	r1, #0
    3336:	4630      	mov	r0, r6
    3338:	f7ff fef2 	bl	3120 <_sbrk_r>
    333c:	68bb      	ldr	r3, [r7, #8]
    333e:	442b      	add	r3, r5
    3340:	4298      	cmp	r0, r3
    3342:	d004      	beq.n	334e <_malloc_trim_r+0x46>
    3344:	4630      	mov	r0, r6
    3346:	f7ff fcf9 	bl	2d3c <__malloc_unlock>
    334a:	2000      	movs	r0, #0
    334c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    334e:	4261      	negs	r1, r4
    3350:	4630      	mov	r0, r6
    3352:	f7ff fee5 	bl	3120 <_sbrk_r>
    3356:	3001      	adds	r0, #1
    3358:	d00d      	beq.n	3376 <_malloc_trim_r+0x6e>
    335a:	4b10      	ldr	r3, [pc, #64]	; (339c <_malloc_trim_r+0x94>)
    335c:	68ba      	ldr	r2, [r7, #8]
    335e:	6819      	ldr	r1, [r3, #0]
    3360:	1b2d      	subs	r5, r5, r4
    3362:	f045 0501 	orr.w	r5, r5, #1
    3366:	4630      	mov	r0, r6
    3368:	1b09      	subs	r1, r1, r4
    336a:	6055      	str	r5, [r2, #4]
    336c:	6019      	str	r1, [r3, #0]
    336e:	f7ff fce5 	bl	2d3c <__malloc_unlock>
    3372:	2001      	movs	r0, #1
    3374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3376:	2100      	movs	r1, #0
    3378:	4630      	mov	r0, r6
    337a:	f7ff fed1 	bl	3120 <_sbrk_r>
    337e:	68ba      	ldr	r2, [r7, #8]
    3380:	1a83      	subs	r3, r0, r2
    3382:	2b0f      	cmp	r3, #15
    3384:	ddde      	ble.n	3344 <_malloc_trim_r+0x3c>
    3386:	4c06      	ldr	r4, [pc, #24]	; (33a0 <_malloc_trim_r+0x98>)
    3388:	4904      	ldr	r1, [pc, #16]	; (339c <_malloc_trim_r+0x94>)
    338a:	6824      	ldr	r4, [r4, #0]
    338c:	f043 0301 	orr.w	r3, r3, #1
    3390:	1b00      	subs	r0, r0, r4
    3392:	6053      	str	r3, [r2, #4]
    3394:	6008      	str	r0, [r1, #0]
    3396:	e7d5      	b.n	3344 <_malloc_trim_r+0x3c>
    3398:	200009e0 	.word	0x200009e0
    339c:	200012c0 	.word	0x200012c0
    33a0:	20000dec 	.word	0x20000dec

000033a4 <_free_r>:
    33a4:	2900      	cmp	r1, #0
    33a6:	d045      	beq.n	3434 <_free_r+0x90>
    33a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    33ac:	460d      	mov	r5, r1
    33ae:	4680      	mov	r8, r0
    33b0:	f7ff fcc2 	bl	2d38 <__malloc_lock>
    33b4:	f855 7c04 	ldr.w	r7, [r5, #-4]
    33b8:	496a      	ldr	r1, [pc, #424]	; (3564 <_free_r+0x1c0>)
    33ba:	f027 0301 	bic.w	r3, r7, #1
    33be:	f1a5 0408 	sub.w	r4, r5, #8
    33c2:	18e2      	adds	r2, r4, r3
    33c4:	688e      	ldr	r6, [r1, #8]
    33c6:	6850      	ldr	r0, [r2, #4]
    33c8:	42b2      	cmp	r2, r6
    33ca:	f020 0003 	bic.w	r0, r0, #3
    33ce:	d062      	beq.n	3496 <_free_r+0xf2>
    33d0:	07fe      	lsls	r6, r7, #31
    33d2:	6050      	str	r0, [r2, #4]
    33d4:	d40b      	bmi.n	33ee <_free_r+0x4a>
    33d6:	f855 7c08 	ldr.w	r7, [r5, #-8]
    33da:	1be4      	subs	r4, r4, r7
    33dc:	f101 0e08 	add.w	lr, r1, #8
    33e0:	68a5      	ldr	r5, [r4, #8]
    33e2:	4575      	cmp	r5, lr
    33e4:	443b      	add	r3, r7
    33e6:	d06f      	beq.n	34c8 <_free_r+0x124>
    33e8:	68e7      	ldr	r7, [r4, #12]
    33ea:	60ef      	str	r7, [r5, #12]
    33ec:	60bd      	str	r5, [r7, #8]
    33ee:	1815      	adds	r5, r2, r0
    33f0:	686d      	ldr	r5, [r5, #4]
    33f2:	07ed      	lsls	r5, r5, #31
    33f4:	d542      	bpl.n	347c <_free_r+0xd8>
    33f6:	f043 0201 	orr.w	r2, r3, #1
    33fa:	6062      	str	r2, [r4, #4]
    33fc:	50e3      	str	r3, [r4, r3]
    33fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    3402:	d218      	bcs.n	3436 <_free_r+0x92>
    3404:	08db      	lsrs	r3, r3, #3
    3406:	1c5a      	adds	r2, r3, #1
    3408:	684d      	ldr	r5, [r1, #4]
    340a:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
    340e:	60a7      	str	r7, [r4, #8]
    3410:	2001      	movs	r0, #1
    3412:	109b      	asrs	r3, r3, #2
    3414:	fa00 f303 	lsl.w	r3, r0, r3
    3418:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
    341c:	431d      	orrs	r5, r3
    341e:	3808      	subs	r0, #8
    3420:	60e0      	str	r0, [r4, #12]
    3422:	604d      	str	r5, [r1, #4]
    3424:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
    3428:	60fc      	str	r4, [r7, #12]
    342a:	4640      	mov	r0, r8
    342c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3430:	f7ff bc84 	b.w	2d3c <__malloc_unlock>
    3434:	4770      	bx	lr
    3436:	0a5a      	lsrs	r2, r3, #9
    3438:	2a04      	cmp	r2, #4
    343a:	d853      	bhi.n	34e4 <_free_r+0x140>
    343c:	099a      	lsrs	r2, r3, #6
    343e:	f102 0739 	add.w	r7, r2, #57	; 0x39
    3442:	007f      	lsls	r7, r7, #1
    3444:	f102 0538 	add.w	r5, r2, #56	; 0x38
    3448:	eb01 0087 	add.w	r0, r1, r7, lsl #2
    344c:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
    3450:	4944      	ldr	r1, [pc, #272]	; (3564 <_free_r+0x1c0>)
    3452:	3808      	subs	r0, #8
    3454:	4290      	cmp	r0, r2
    3456:	d04d      	beq.n	34f4 <_free_r+0x150>
    3458:	6851      	ldr	r1, [r2, #4]
    345a:	f021 0103 	bic.w	r1, r1, #3
    345e:	428b      	cmp	r3, r1
    3460:	d202      	bcs.n	3468 <_free_r+0xc4>
    3462:	6892      	ldr	r2, [r2, #8]
    3464:	4290      	cmp	r0, r2
    3466:	d1f7      	bne.n	3458 <_free_r+0xb4>
    3468:	68d0      	ldr	r0, [r2, #12]
    346a:	60e0      	str	r0, [r4, #12]
    346c:	60a2      	str	r2, [r4, #8]
    346e:	6084      	str	r4, [r0, #8]
    3470:	60d4      	str	r4, [r2, #12]
    3472:	4640      	mov	r0, r8
    3474:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3478:	f7ff bc60 	b.w	2d3c <__malloc_unlock>
    347c:	6895      	ldr	r5, [r2, #8]
    347e:	4f3a      	ldr	r7, [pc, #232]	; (3568 <_free_r+0x1c4>)
    3480:	42bd      	cmp	r5, r7
    3482:	4403      	add	r3, r0
    3484:	d03f      	beq.n	3506 <_free_r+0x162>
    3486:	68d0      	ldr	r0, [r2, #12]
    3488:	60e8      	str	r0, [r5, #12]
    348a:	f043 0201 	orr.w	r2, r3, #1
    348e:	6085      	str	r5, [r0, #8]
    3490:	6062      	str	r2, [r4, #4]
    3492:	50e3      	str	r3, [r4, r3]
    3494:	e7b3      	b.n	33fe <_free_r+0x5a>
    3496:	07ff      	lsls	r7, r7, #31
    3498:	4403      	add	r3, r0
    349a:	d407      	bmi.n	34ac <_free_r+0x108>
    349c:	f855 2c08 	ldr.w	r2, [r5, #-8]
    34a0:	1aa4      	subs	r4, r4, r2
    34a2:	4413      	add	r3, r2
    34a4:	68a0      	ldr	r0, [r4, #8]
    34a6:	68e2      	ldr	r2, [r4, #12]
    34a8:	60c2      	str	r2, [r0, #12]
    34aa:	6090      	str	r0, [r2, #8]
    34ac:	4a2f      	ldr	r2, [pc, #188]	; (356c <_free_r+0x1c8>)
    34ae:	6812      	ldr	r2, [r2, #0]
    34b0:	f043 0001 	orr.w	r0, r3, #1
    34b4:	4293      	cmp	r3, r2
    34b6:	6060      	str	r0, [r4, #4]
    34b8:	608c      	str	r4, [r1, #8]
    34ba:	d3b6      	bcc.n	342a <_free_r+0x86>
    34bc:	4b2c      	ldr	r3, [pc, #176]	; (3570 <_free_r+0x1cc>)
    34be:	4640      	mov	r0, r8
    34c0:	6819      	ldr	r1, [r3, #0]
    34c2:	f7ff ff21 	bl	3308 <_malloc_trim_r>
    34c6:	e7b0      	b.n	342a <_free_r+0x86>
    34c8:	1811      	adds	r1, r2, r0
    34ca:	6849      	ldr	r1, [r1, #4]
    34cc:	07c9      	lsls	r1, r1, #31
    34ce:	d444      	bmi.n	355a <_free_r+0x1b6>
    34d0:	6891      	ldr	r1, [r2, #8]
    34d2:	68d2      	ldr	r2, [r2, #12]
    34d4:	60ca      	str	r2, [r1, #12]
    34d6:	4403      	add	r3, r0
    34d8:	f043 0001 	orr.w	r0, r3, #1
    34dc:	6091      	str	r1, [r2, #8]
    34de:	6060      	str	r0, [r4, #4]
    34e0:	50e3      	str	r3, [r4, r3]
    34e2:	e7a2      	b.n	342a <_free_r+0x86>
    34e4:	2a14      	cmp	r2, #20
    34e6:	d817      	bhi.n	3518 <_free_r+0x174>
    34e8:	f102 075c 	add.w	r7, r2, #92	; 0x5c
    34ec:	007f      	lsls	r7, r7, #1
    34ee:	f102 055b 	add.w	r5, r2, #91	; 0x5b
    34f2:	e7a9      	b.n	3448 <_free_r+0xa4>
    34f4:	10aa      	asrs	r2, r5, #2
    34f6:	684b      	ldr	r3, [r1, #4]
    34f8:	2501      	movs	r5, #1
    34fa:	fa05 f202 	lsl.w	r2, r5, r2
    34fe:	4313      	orrs	r3, r2
    3500:	604b      	str	r3, [r1, #4]
    3502:	4602      	mov	r2, r0
    3504:	e7b1      	b.n	346a <_free_r+0xc6>
    3506:	f043 0201 	orr.w	r2, r3, #1
    350a:	614c      	str	r4, [r1, #20]
    350c:	610c      	str	r4, [r1, #16]
    350e:	60e5      	str	r5, [r4, #12]
    3510:	60a5      	str	r5, [r4, #8]
    3512:	6062      	str	r2, [r4, #4]
    3514:	50e3      	str	r3, [r4, r3]
    3516:	e788      	b.n	342a <_free_r+0x86>
    3518:	2a54      	cmp	r2, #84	; 0x54
    351a:	d806      	bhi.n	352a <_free_r+0x186>
    351c:	0b1a      	lsrs	r2, r3, #12
    351e:	f102 076f 	add.w	r7, r2, #111	; 0x6f
    3522:	007f      	lsls	r7, r7, #1
    3524:	f102 056e 	add.w	r5, r2, #110	; 0x6e
    3528:	e78e      	b.n	3448 <_free_r+0xa4>
    352a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    352e:	d806      	bhi.n	353e <_free_r+0x19a>
    3530:	0bda      	lsrs	r2, r3, #15
    3532:	f102 0778 	add.w	r7, r2, #120	; 0x78
    3536:	007f      	lsls	r7, r7, #1
    3538:	f102 0577 	add.w	r5, r2, #119	; 0x77
    353c:	e784      	b.n	3448 <_free_r+0xa4>
    353e:	f240 5054 	movw	r0, #1364	; 0x554
    3542:	4282      	cmp	r2, r0
    3544:	d806      	bhi.n	3554 <_free_r+0x1b0>
    3546:	0c9a      	lsrs	r2, r3, #18
    3548:	f102 077d 	add.w	r7, r2, #125	; 0x7d
    354c:	007f      	lsls	r7, r7, #1
    354e:	f102 057c 	add.w	r5, r2, #124	; 0x7c
    3552:	e779      	b.n	3448 <_free_r+0xa4>
    3554:	27fe      	movs	r7, #254	; 0xfe
    3556:	257e      	movs	r5, #126	; 0x7e
    3558:	e776      	b.n	3448 <_free_r+0xa4>
    355a:	f043 0201 	orr.w	r2, r3, #1
    355e:	6062      	str	r2, [r4, #4]
    3560:	50e3      	str	r3, [r4, r3]
    3562:	e762      	b.n	342a <_free_r+0x86>
    3564:	200009e0 	.word	0x200009e0
    3568:	200009e8 	.word	0x200009e8
    356c:	20000de8 	.word	0x20000de8
    3570:	200012bc 	.word	0x200012bc

00003574 <_localeconv_r>:
    3574:	4a04      	ldr	r2, [pc, #16]	; (3588 <_localeconv_r+0x14>)
    3576:	4b05      	ldr	r3, [pc, #20]	; (358c <_localeconv_r+0x18>)
    3578:	6812      	ldr	r2, [r2, #0]
    357a:	6b50      	ldr	r0, [r2, #52]	; 0x34
    357c:	2800      	cmp	r0, #0
    357e:	bf08      	it	eq
    3580:	4618      	moveq	r0, r3
    3582:	30f0      	adds	r0, #240	; 0xf0
    3584:	4770      	bx	lr
    3586:	bf00      	nop
    3588:	20000870 	.word	0x20000870
    358c:	20000874 	.word	0x20000874

00003590 <memchr>:
    3590:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    3594:	2a10      	cmp	r2, #16
    3596:	db2b      	blt.n	35f0 <memchr+0x60>
    3598:	f010 0f07 	tst.w	r0, #7
    359c:	d008      	beq.n	35b0 <memchr+0x20>
    359e:	f810 3b01 	ldrb.w	r3, [r0], #1
    35a2:	3a01      	subs	r2, #1
    35a4:	428b      	cmp	r3, r1
    35a6:	d02d      	beq.n	3604 <memchr+0x74>
    35a8:	f010 0f07 	tst.w	r0, #7
    35ac:	b342      	cbz	r2, 3600 <memchr+0x70>
    35ae:	d1f6      	bne.n	359e <memchr+0xe>
    35b0:	b4f0      	push	{r4, r5, r6, r7}
    35b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    35b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    35ba:	f022 0407 	bic.w	r4, r2, #7
    35be:	f07f 0700 	mvns.w	r7, #0
    35c2:	2300      	movs	r3, #0
    35c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    35c8:	3c08      	subs	r4, #8
    35ca:	ea85 0501 	eor.w	r5, r5, r1
    35ce:	ea86 0601 	eor.w	r6, r6, r1
    35d2:	fa85 f547 	uadd8	r5, r5, r7
    35d6:	faa3 f587 	sel	r5, r3, r7
    35da:	fa86 f647 	uadd8	r6, r6, r7
    35de:	faa5 f687 	sel	r6, r5, r7
    35e2:	b98e      	cbnz	r6, 3608 <memchr+0x78>
    35e4:	d1ee      	bne.n	35c4 <memchr+0x34>
    35e6:	bcf0      	pop	{r4, r5, r6, r7}
    35e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    35ec:	f002 0207 	and.w	r2, r2, #7
    35f0:	b132      	cbz	r2, 3600 <memchr+0x70>
    35f2:	f810 3b01 	ldrb.w	r3, [r0], #1
    35f6:	3a01      	subs	r2, #1
    35f8:	ea83 0301 	eor.w	r3, r3, r1
    35fc:	b113      	cbz	r3, 3604 <memchr+0x74>
    35fe:	d1f8      	bne.n	35f2 <memchr+0x62>
    3600:	2000      	movs	r0, #0
    3602:	4770      	bx	lr
    3604:	3801      	subs	r0, #1
    3606:	4770      	bx	lr
    3608:	2d00      	cmp	r5, #0
    360a:	bf06      	itte	eq
    360c:	4635      	moveq	r5, r6
    360e:	3803      	subeq	r0, #3
    3610:	3807      	subne	r0, #7
    3612:	f015 0f01 	tst.w	r5, #1
    3616:	d107      	bne.n	3628 <memchr+0x98>
    3618:	3001      	adds	r0, #1
    361a:	f415 7f80 	tst.w	r5, #256	; 0x100
    361e:	bf02      	ittt	eq
    3620:	3001      	addeq	r0, #1
    3622:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    3626:	3001      	addeq	r0, #1
    3628:	bcf0      	pop	{r4, r5, r6, r7}
    362a:	3801      	subs	r0, #1
    362c:	4770      	bx	lr
    362e:	bf00      	nop

00003630 <_Balloc>:
    3630:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    3632:	b570      	push	{r4, r5, r6, lr}
    3634:	4605      	mov	r5, r0
    3636:	460c      	mov	r4, r1
    3638:	b14b      	cbz	r3, 364e <_Balloc+0x1e>
    363a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    363e:	b180      	cbz	r0, 3662 <_Balloc+0x32>
    3640:	6802      	ldr	r2, [r0, #0]
    3642:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    3646:	2300      	movs	r3, #0
    3648:	6103      	str	r3, [r0, #16]
    364a:	60c3      	str	r3, [r0, #12]
    364c:	bd70      	pop	{r4, r5, r6, pc}
    364e:	2221      	movs	r2, #33	; 0x21
    3650:	2104      	movs	r1, #4
    3652:	f000 fb2f 	bl	3cb4 <_calloc_r>
    3656:	64e8      	str	r0, [r5, #76]	; 0x4c
    3658:	4603      	mov	r3, r0
    365a:	2800      	cmp	r0, #0
    365c:	d1ed      	bne.n	363a <_Balloc+0xa>
    365e:	2000      	movs	r0, #0
    3660:	bd70      	pop	{r4, r5, r6, pc}
    3662:	2101      	movs	r1, #1
    3664:	fa01 f604 	lsl.w	r6, r1, r4
    3668:	1d72      	adds	r2, r6, #5
    366a:	4628      	mov	r0, r5
    366c:	0092      	lsls	r2, r2, #2
    366e:	f000 fb21 	bl	3cb4 <_calloc_r>
    3672:	2800      	cmp	r0, #0
    3674:	d0f3      	beq.n	365e <_Balloc+0x2e>
    3676:	6044      	str	r4, [r0, #4]
    3678:	6086      	str	r6, [r0, #8]
    367a:	e7e4      	b.n	3646 <_Balloc+0x16>

0000367c <_Bfree>:
    367c:	b131      	cbz	r1, 368c <_Bfree+0x10>
    367e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    3680:	684a      	ldr	r2, [r1, #4]
    3682:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    3686:	6008      	str	r0, [r1, #0]
    3688:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    368c:	4770      	bx	lr
    368e:	bf00      	nop

00003690 <__multadd>:
    3690:	b5f0      	push	{r4, r5, r6, r7, lr}
    3692:	690c      	ldr	r4, [r1, #16]
    3694:	b083      	sub	sp, #12
    3696:	460d      	mov	r5, r1
    3698:	4606      	mov	r6, r0
    369a:	f101 0e14 	add.w	lr, r1, #20
    369e:	2700      	movs	r7, #0
    36a0:	f8de 0000 	ldr.w	r0, [lr]
    36a4:	b281      	uxth	r1, r0
    36a6:	fb02 3101 	mla	r1, r2, r1, r3
    36aa:	0c0b      	lsrs	r3, r1, #16
    36ac:	0c00      	lsrs	r0, r0, #16
    36ae:	fb02 3300 	mla	r3, r2, r0, r3
    36b2:	b289      	uxth	r1, r1
    36b4:	3701      	adds	r7, #1
    36b6:	eb01 4103 	add.w	r1, r1, r3, lsl #16
    36ba:	42bc      	cmp	r4, r7
    36bc:	f84e 1b04 	str.w	r1, [lr], #4
    36c0:	ea4f 4313 	mov.w	r3, r3, lsr #16
    36c4:	dcec      	bgt.n	36a0 <__multadd+0x10>
    36c6:	b13b      	cbz	r3, 36d8 <__multadd+0x48>
    36c8:	68aa      	ldr	r2, [r5, #8]
    36ca:	4294      	cmp	r4, r2
    36cc:	da07      	bge.n	36de <__multadd+0x4e>
    36ce:	eb05 0284 	add.w	r2, r5, r4, lsl #2
    36d2:	3401      	adds	r4, #1
    36d4:	6153      	str	r3, [r2, #20]
    36d6:	612c      	str	r4, [r5, #16]
    36d8:	4628      	mov	r0, r5
    36da:	b003      	add	sp, #12
    36dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    36de:	6869      	ldr	r1, [r5, #4]
    36e0:	9301      	str	r3, [sp, #4]
    36e2:	3101      	adds	r1, #1
    36e4:	4630      	mov	r0, r6
    36e6:	f7ff ffa3 	bl	3630 <_Balloc>
    36ea:	692a      	ldr	r2, [r5, #16]
    36ec:	3202      	adds	r2, #2
    36ee:	f105 010c 	add.w	r1, r5, #12
    36f2:	4607      	mov	r7, r0
    36f4:	0092      	lsls	r2, r2, #2
    36f6:	300c      	adds	r0, #12
    36f8:	f7fe feac 	bl	2454 <memcpy>
    36fc:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
    36fe:	6869      	ldr	r1, [r5, #4]
    3700:	9b01      	ldr	r3, [sp, #4]
    3702:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
    3706:	6028      	str	r0, [r5, #0]
    3708:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
    370c:	463d      	mov	r5, r7
    370e:	e7de      	b.n	36ce <__multadd+0x3e>

00003710 <__hi0bits>:
    3710:	0c03      	lsrs	r3, r0, #16
    3712:	041b      	lsls	r3, r3, #16
    3714:	b9b3      	cbnz	r3, 3744 <__hi0bits+0x34>
    3716:	0400      	lsls	r0, r0, #16
    3718:	2310      	movs	r3, #16
    371a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
    371e:	bf04      	itt	eq
    3720:	0200      	lsleq	r0, r0, #8
    3722:	3308      	addeq	r3, #8
    3724:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
    3728:	bf04      	itt	eq
    372a:	0100      	lsleq	r0, r0, #4
    372c:	3304      	addeq	r3, #4
    372e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
    3732:	bf04      	itt	eq
    3734:	0080      	lsleq	r0, r0, #2
    3736:	3302      	addeq	r3, #2
    3738:	2800      	cmp	r0, #0
    373a:	db07      	blt.n	374c <__hi0bits+0x3c>
    373c:	0042      	lsls	r2, r0, #1
    373e:	d403      	bmi.n	3748 <__hi0bits+0x38>
    3740:	2020      	movs	r0, #32
    3742:	4770      	bx	lr
    3744:	2300      	movs	r3, #0
    3746:	e7e8      	b.n	371a <__hi0bits+0xa>
    3748:	1c58      	adds	r0, r3, #1
    374a:	4770      	bx	lr
    374c:	4618      	mov	r0, r3
    374e:	4770      	bx	lr

00003750 <__lo0bits>:
    3750:	6803      	ldr	r3, [r0, #0]
    3752:	f013 0207 	ands.w	r2, r3, #7
    3756:	d007      	beq.n	3768 <__lo0bits+0x18>
    3758:	07d9      	lsls	r1, r3, #31
    375a:	d420      	bmi.n	379e <__lo0bits+0x4e>
    375c:	079a      	lsls	r2, r3, #30
    375e:	d420      	bmi.n	37a2 <__lo0bits+0x52>
    3760:	089b      	lsrs	r3, r3, #2
    3762:	6003      	str	r3, [r0, #0]
    3764:	2002      	movs	r0, #2
    3766:	4770      	bx	lr
    3768:	b299      	uxth	r1, r3
    376a:	b909      	cbnz	r1, 3770 <__lo0bits+0x20>
    376c:	0c1b      	lsrs	r3, r3, #16
    376e:	2210      	movs	r2, #16
    3770:	f013 0fff 	tst.w	r3, #255	; 0xff
    3774:	bf04      	itt	eq
    3776:	0a1b      	lsreq	r3, r3, #8
    3778:	3208      	addeq	r2, #8
    377a:	0719      	lsls	r1, r3, #28
    377c:	bf04      	itt	eq
    377e:	091b      	lsreq	r3, r3, #4
    3780:	3204      	addeq	r2, #4
    3782:	0799      	lsls	r1, r3, #30
    3784:	bf04      	itt	eq
    3786:	089b      	lsreq	r3, r3, #2
    3788:	3202      	addeq	r2, #2
    378a:	07d9      	lsls	r1, r3, #31
    378c:	d404      	bmi.n	3798 <__lo0bits+0x48>
    378e:	085b      	lsrs	r3, r3, #1
    3790:	d101      	bne.n	3796 <__lo0bits+0x46>
    3792:	2020      	movs	r0, #32
    3794:	4770      	bx	lr
    3796:	3201      	adds	r2, #1
    3798:	6003      	str	r3, [r0, #0]
    379a:	4610      	mov	r0, r2
    379c:	4770      	bx	lr
    379e:	2000      	movs	r0, #0
    37a0:	4770      	bx	lr
    37a2:	085b      	lsrs	r3, r3, #1
    37a4:	6003      	str	r3, [r0, #0]
    37a6:	2001      	movs	r0, #1
    37a8:	4770      	bx	lr
    37aa:	bf00      	nop

000037ac <__i2b>:
    37ac:	b510      	push	{r4, lr}
    37ae:	460c      	mov	r4, r1
    37b0:	2101      	movs	r1, #1
    37b2:	f7ff ff3d 	bl	3630 <_Balloc>
    37b6:	2201      	movs	r2, #1
    37b8:	6144      	str	r4, [r0, #20]
    37ba:	6102      	str	r2, [r0, #16]
    37bc:	bd10      	pop	{r4, pc}
    37be:	bf00      	nop

000037c0 <__multiply>:
    37c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    37c4:	690d      	ldr	r5, [r1, #16]
    37c6:	6917      	ldr	r7, [r2, #16]
    37c8:	42bd      	cmp	r5, r7
    37ca:	b083      	sub	sp, #12
    37cc:	460c      	mov	r4, r1
    37ce:	4616      	mov	r6, r2
    37d0:	da04      	bge.n	37dc <__multiply+0x1c>
    37d2:	462a      	mov	r2, r5
    37d4:	4634      	mov	r4, r6
    37d6:	463d      	mov	r5, r7
    37d8:	460e      	mov	r6, r1
    37da:	4617      	mov	r7, r2
    37dc:	68a3      	ldr	r3, [r4, #8]
    37de:	6861      	ldr	r1, [r4, #4]
    37e0:	eb05 0807 	add.w	r8, r5, r7
    37e4:	4598      	cmp	r8, r3
    37e6:	bfc8      	it	gt
    37e8:	3101      	addgt	r1, #1
    37ea:	f7ff ff21 	bl	3630 <_Balloc>
    37ee:	f100 0c14 	add.w	ip, r0, #20
    37f2:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
    37f6:	45cc      	cmp	ip, r9
    37f8:	9000      	str	r0, [sp, #0]
    37fa:	d205      	bcs.n	3808 <__multiply+0x48>
    37fc:	4663      	mov	r3, ip
    37fe:	2100      	movs	r1, #0
    3800:	f843 1b04 	str.w	r1, [r3], #4
    3804:	4599      	cmp	r9, r3
    3806:	d8fb      	bhi.n	3800 <__multiply+0x40>
    3808:	f106 0214 	add.w	r2, r6, #20
    380c:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
    3810:	f104 0314 	add.w	r3, r4, #20
    3814:	4552      	cmp	r2, sl
    3816:	eb03 0e85 	add.w	lr, r3, r5, lsl #2
    381a:	d254      	bcs.n	38c6 <__multiply+0x106>
    381c:	f8cd 9004 	str.w	r9, [sp, #4]
    3820:	4699      	mov	r9, r3
    3822:	f852 3b04 	ldr.w	r3, [r2], #4
    3826:	fa1f fb83 	uxth.w	fp, r3
    382a:	f1bb 0f00 	cmp.w	fp, #0
    382e:	d020      	beq.n	3872 <__multiply+0xb2>
    3830:	2000      	movs	r0, #0
    3832:	464f      	mov	r7, r9
    3834:	4666      	mov	r6, ip
    3836:	4605      	mov	r5, r0
    3838:	e000      	b.n	383c <__multiply+0x7c>
    383a:	461e      	mov	r6, r3
    383c:	f857 4b04 	ldr.w	r4, [r7], #4
    3840:	6830      	ldr	r0, [r6, #0]
    3842:	b2a1      	uxth	r1, r4
    3844:	b283      	uxth	r3, r0
    3846:	fb0b 3101 	mla	r1, fp, r1, r3
    384a:	0c24      	lsrs	r4, r4, #16
    384c:	0c00      	lsrs	r0, r0, #16
    384e:	194b      	adds	r3, r1, r5
    3850:	fb0b 0004 	mla	r0, fp, r4, r0
    3854:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    3858:	b299      	uxth	r1, r3
    385a:	4633      	mov	r3, r6
    385c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    3860:	45be      	cmp	lr, r7
    3862:	ea4f 4510 	mov.w	r5, r0, lsr #16
    3866:	f843 1b04 	str.w	r1, [r3], #4
    386a:	d8e6      	bhi.n	383a <__multiply+0x7a>
    386c:	6075      	str	r5, [r6, #4]
    386e:	f852 3c04 	ldr.w	r3, [r2, #-4]
    3872:	ea5f 4b13 	movs.w	fp, r3, lsr #16
    3876:	d020      	beq.n	38ba <__multiply+0xfa>
    3878:	f8dc 3000 	ldr.w	r3, [ip]
    387c:	4667      	mov	r7, ip
    387e:	4618      	mov	r0, r3
    3880:	464d      	mov	r5, r9
    3882:	2100      	movs	r1, #0
    3884:	e000      	b.n	3888 <__multiply+0xc8>
    3886:	4637      	mov	r7, r6
    3888:	882c      	ldrh	r4, [r5, #0]
    388a:	0c00      	lsrs	r0, r0, #16
    388c:	fb0b 0004 	mla	r0, fp, r4, r0
    3890:	4401      	add	r1, r0
    3892:	b29c      	uxth	r4, r3
    3894:	463e      	mov	r6, r7
    3896:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
    389a:	f846 3b04 	str.w	r3, [r6], #4
    389e:	6878      	ldr	r0, [r7, #4]
    38a0:	f855 4b04 	ldr.w	r4, [r5], #4
    38a4:	b283      	uxth	r3, r0
    38a6:	0c24      	lsrs	r4, r4, #16
    38a8:	fb0b 3404 	mla	r4, fp, r4, r3
    38ac:	eb04 4311 	add.w	r3, r4, r1, lsr #16
    38b0:	45ae      	cmp	lr, r5
    38b2:	ea4f 4113 	mov.w	r1, r3, lsr #16
    38b6:	d8e6      	bhi.n	3886 <__multiply+0xc6>
    38b8:	607b      	str	r3, [r7, #4]
    38ba:	4592      	cmp	sl, r2
    38bc:	f10c 0c04 	add.w	ip, ip, #4
    38c0:	d8af      	bhi.n	3822 <__multiply+0x62>
    38c2:	f8dd 9004 	ldr.w	r9, [sp, #4]
    38c6:	f1b8 0f00 	cmp.w	r8, #0
    38ca:	dd0b      	ble.n	38e4 <__multiply+0x124>
    38cc:	f859 3c04 	ldr.w	r3, [r9, #-4]
    38d0:	f1a9 0904 	sub.w	r9, r9, #4
    38d4:	b11b      	cbz	r3, 38de <__multiply+0x11e>
    38d6:	e005      	b.n	38e4 <__multiply+0x124>
    38d8:	f859 3d04 	ldr.w	r3, [r9, #-4]!
    38dc:	b913      	cbnz	r3, 38e4 <__multiply+0x124>
    38de:	f1b8 0801 	subs.w	r8, r8, #1
    38e2:	d1f9      	bne.n	38d8 <__multiply+0x118>
    38e4:	9800      	ldr	r0, [sp, #0]
    38e6:	f8c0 8010 	str.w	r8, [r0, #16]
    38ea:	b003      	add	sp, #12
    38ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000038f0 <__pow5mult>:
    38f0:	f012 0303 	ands.w	r3, r2, #3
    38f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    38f8:	4614      	mov	r4, r2
    38fa:	4607      	mov	r7, r0
    38fc:	d12e      	bne.n	395c <__pow5mult+0x6c>
    38fe:	460e      	mov	r6, r1
    3900:	10a4      	asrs	r4, r4, #2
    3902:	d01c      	beq.n	393e <__pow5mult+0x4e>
    3904:	6cbd      	ldr	r5, [r7, #72]	; 0x48
    3906:	b395      	cbz	r5, 396e <__pow5mult+0x7e>
    3908:	07e3      	lsls	r3, r4, #31
    390a:	f04f 0800 	mov.w	r8, #0
    390e:	d406      	bmi.n	391e <__pow5mult+0x2e>
    3910:	1064      	asrs	r4, r4, #1
    3912:	d014      	beq.n	393e <__pow5mult+0x4e>
    3914:	6828      	ldr	r0, [r5, #0]
    3916:	b1a8      	cbz	r0, 3944 <__pow5mult+0x54>
    3918:	4605      	mov	r5, r0
    391a:	07e3      	lsls	r3, r4, #31
    391c:	d5f8      	bpl.n	3910 <__pow5mult+0x20>
    391e:	462a      	mov	r2, r5
    3920:	4631      	mov	r1, r6
    3922:	4638      	mov	r0, r7
    3924:	f7ff ff4c 	bl	37c0 <__multiply>
    3928:	b1b6      	cbz	r6, 3958 <__pow5mult+0x68>
    392a:	6872      	ldr	r2, [r6, #4]
    392c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    392e:	1064      	asrs	r4, r4, #1
    3930:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    3934:	6031      	str	r1, [r6, #0]
    3936:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
    393a:	4606      	mov	r6, r0
    393c:	d1ea      	bne.n	3914 <__pow5mult+0x24>
    393e:	4630      	mov	r0, r6
    3940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3944:	462a      	mov	r2, r5
    3946:	4629      	mov	r1, r5
    3948:	4638      	mov	r0, r7
    394a:	f7ff ff39 	bl	37c0 <__multiply>
    394e:	6028      	str	r0, [r5, #0]
    3950:	f8c0 8000 	str.w	r8, [r0]
    3954:	4605      	mov	r5, r0
    3956:	e7e0      	b.n	391a <__pow5mult+0x2a>
    3958:	4606      	mov	r6, r0
    395a:	e7d9      	b.n	3910 <__pow5mult+0x20>
    395c:	1e5a      	subs	r2, r3, #1
    395e:	4d0b      	ldr	r5, [pc, #44]	; (398c <__pow5mult+0x9c>)
    3960:	2300      	movs	r3, #0
    3962:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
    3966:	f7ff fe93 	bl	3690 <__multadd>
    396a:	4606      	mov	r6, r0
    396c:	e7c8      	b.n	3900 <__pow5mult+0x10>
    396e:	2101      	movs	r1, #1
    3970:	4638      	mov	r0, r7
    3972:	f7ff fe5d 	bl	3630 <_Balloc>
    3976:	f240 2171 	movw	r1, #625	; 0x271
    397a:	2201      	movs	r2, #1
    397c:	2300      	movs	r3, #0
    397e:	6141      	str	r1, [r0, #20]
    3980:	6102      	str	r2, [r0, #16]
    3982:	4605      	mov	r5, r0
    3984:	64b8      	str	r0, [r7, #72]	; 0x48
    3986:	6003      	str	r3, [r0, #0]
    3988:	e7be      	b.n	3908 <__pow5mult+0x18>
    398a:	bf00      	nop
    398c:	20000378 	.word	0x20000378

00003990 <__lshift>:
    3990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3994:	4691      	mov	r9, r2
    3996:	690a      	ldr	r2, [r1, #16]
    3998:	688b      	ldr	r3, [r1, #8]
    399a:	ea4f 1469 	mov.w	r4, r9, asr #5
    399e:	eb04 0802 	add.w	r8, r4, r2
    39a2:	f108 0501 	add.w	r5, r8, #1
    39a6:	429d      	cmp	r5, r3
    39a8:	460e      	mov	r6, r1
    39aa:	4682      	mov	sl, r0
    39ac:	6849      	ldr	r1, [r1, #4]
    39ae:	dd04      	ble.n	39ba <__lshift+0x2a>
    39b0:	005b      	lsls	r3, r3, #1
    39b2:	429d      	cmp	r5, r3
    39b4:	f101 0101 	add.w	r1, r1, #1
    39b8:	dcfa      	bgt.n	39b0 <__lshift+0x20>
    39ba:	4650      	mov	r0, sl
    39bc:	f7ff fe38 	bl	3630 <_Balloc>
    39c0:	2c00      	cmp	r4, #0
    39c2:	f100 0214 	add.w	r2, r0, #20
    39c6:	dd38      	ble.n	3a3a <__lshift+0xaa>
    39c8:	eb02 0384 	add.w	r3, r2, r4, lsl #2
    39cc:	2100      	movs	r1, #0
    39ce:	f842 1b04 	str.w	r1, [r2], #4
    39d2:	4293      	cmp	r3, r2
    39d4:	d1fb      	bne.n	39ce <__lshift+0x3e>
    39d6:	6934      	ldr	r4, [r6, #16]
    39d8:	f106 0114 	add.w	r1, r6, #20
    39dc:	f019 091f 	ands.w	r9, r9, #31
    39e0:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
    39e4:	d021      	beq.n	3a2a <__lshift+0x9a>
    39e6:	f1c9 0220 	rsb	r2, r9, #32
    39ea:	2400      	movs	r4, #0
    39ec:	680f      	ldr	r7, [r1, #0]
    39ee:	fa07 fc09 	lsl.w	ip, r7, r9
    39f2:	ea4c 0404 	orr.w	r4, ip, r4
    39f6:	469c      	mov	ip, r3
    39f8:	f843 4b04 	str.w	r4, [r3], #4
    39fc:	f851 4b04 	ldr.w	r4, [r1], #4
    3a00:	458e      	cmp	lr, r1
    3a02:	fa24 f402 	lsr.w	r4, r4, r2
    3a06:	d8f1      	bhi.n	39ec <__lshift+0x5c>
    3a08:	f8cc 4004 	str.w	r4, [ip, #4]
    3a0c:	b10c      	cbz	r4, 3a12 <__lshift+0x82>
    3a0e:	f108 0502 	add.w	r5, r8, #2
    3a12:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
    3a16:	6872      	ldr	r2, [r6, #4]
    3a18:	3d01      	subs	r5, #1
    3a1a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    3a1e:	6105      	str	r5, [r0, #16]
    3a20:	6031      	str	r1, [r6, #0]
    3a22:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
    3a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3a2a:	3b04      	subs	r3, #4
    3a2c:	f851 2b04 	ldr.w	r2, [r1], #4
    3a30:	f843 2f04 	str.w	r2, [r3, #4]!
    3a34:	458e      	cmp	lr, r1
    3a36:	d8f9      	bhi.n	3a2c <__lshift+0x9c>
    3a38:	e7eb      	b.n	3a12 <__lshift+0x82>
    3a3a:	4613      	mov	r3, r2
    3a3c:	e7cb      	b.n	39d6 <__lshift+0x46>
    3a3e:	bf00      	nop

00003a40 <__mcmp>:
    3a40:	6902      	ldr	r2, [r0, #16]
    3a42:	690b      	ldr	r3, [r1, #16]
    3a44:	1ad2      	subs	r2, r2, r3
    3a46:	d113      	bne.n	3a70 <__mcmp+0x30>
    3a48:	009b      	lsls	r3, r3, #2
    3a4a:	3014      	adds	r0, #20
    3a4c:	3114      	adds	r1, #20
    3a4e:	4419      	add	r1, r3
    3a50:	b410      	push	{r4}
    3a52:	4403      	add	r3, r0
    3a54:	e001      	b.n	3a5a <__mcmp+0x1a>
    3a56:	4298      	cmp	r0, r3
    3a58:	d20c      	bcs.n	3a74 <__mcmp+0x34>
    3a5a:	f853 4d04 	ldr.w	r4, [r3, #-4]!
    3a5e:	f851 2d04 	ldr.w	r2, [r1, #-4]!
    3a62:	4294      	cmp	r4, r2
    3a64:	d0f7      	beq.n	3a56 <__mcmp+0x16>
    3a66:	d309      	bcc.n	3a7c <__mcmp+0x3c>
    3a68:	2001      	movs	r0, #1
    3a6a:	f85d 4b04 	ldr.w	r4, [sp], #4
    3a6e:	4770      	bx	lr
    3a70:	4610      	mov	r0, r2
    3a72:	4770      	bx	lr
    3a74:	2000      	movs	r0, #0
    3a76:	f85d 4b04 	ldr.w	r4, [sp], #4
    3a7a:	4770      	bx	lr
    3a7c:	f04f 30ff 	mov.w	r0, #4294967295
    3a80:	e7f3      	b.n	3a6a <__mcmp+0x2a>
    3a82:	bf00      	nop

00003a84 <__mdiff>:
    3a84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3a88:	690b      	ldr	r3, [r1, #16]
    3a8a:	460f      	mov	r7, r1
    3a8c:	6911      	ldr	r1, [r2, #16]
    3a8e:	1a5b      	subs	r3, r3, r1
    3a90:	2b00      	cmp	r3, #0
    3a92:	4690      	mov	r8, r2
    3a94:	d117      	bne.n	3ac6 <__mdiff+0x42>
    3a96:	0089      	lsls	r1, r1, #2
    3a98:	f107 0214 	add.w	r2, r7, #20
    3a9c:	f108 0514 	add.w	r5, r8, #20
    3aa0:	1853      	adds	r3, r2, r1
    3aa2:	4429      	add	r1, r5
    3aa4:	e001      	b.n	3aaa <__mdiff+0x26>
    3aa6:	429a      	cmp	r2, r3
    3aa8:	d25e      	bcs.n	3b68 <__mdiff+0xe4>
    3aaa:	f853 6d04 	ldr.w	r6, [r3, #-4]!
    3aae:	f851 4d04 	ldr.w	r4, [r1, #-4]!
    3ab2:	42a6      	cmp	r6, r4
    3ab4:	d0f7      	beq.n	3aa6 <__mdiff+0x22>
    3ab6:	d260      	bcs.n	3b7a <__mdiff+0xf6>
    3ab8:	463b      	mov	r3, r7
    3aba:	4614      	mov	r4, r2
    3abc:	4647      	mov	r7, r8
    3abe:	f04f 0901 	mov.w	r9, #1
    3ac2:	4698      	mov	r8, r3
    3ac4:	e006      	b.n	3ad4 <__mdiff+0x50>
    3ac6:	db5d      	blt.n	3b84 <__mdiff+0x100>
    3ac8:	f107 0514 	add.w	r5, r7, #20
    3acc:	f102 0414 	add.w	r4, r2, #20
    3ad0:	f04f 0900 	mov.w	r9, #0
    3ad4:	6879      	ldr	r1, [r7, #4]
    3ad6:	f7ff fdab 	bl	3630 <_Balloc>
    3ada:	f8d8 3010 	ldr.w	r3, [r8, #16]
    3ade:	693e      	ldr	r6, [r7, #16]
    3ae0:	f8c0 900c 	str.w	r9, [r0, #12]
    3ae4:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
    3ae8:	46a6      	mov	lr, r4
    3aea:	eb05 0786 	add.w	r7, r5, r6, lsl #2
    3aee:	f100 0414 	add.w	r4, r0, #20
    3af2:	2300      	movs	r3, #0
    3af4:	f85e 1b04 	ldr.w	r1, [lr], #4
    3af8:	f855 8b04 	ldr.w	r8, [r5], #4
    3afc:	b28a      	uxth	r2, r1
    3afe:	fa13 f388 	uxtah	r3, r3, r8
    3b02:	0c09      	lsrs	r1, r1, #16
    3b04:	1a9a      	subs	r2, r3, r2
    3b06:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
    3b0a:	eb03 4322 	add.w	r3, r3, r2, asr #16
    3b0e:	b292      	uxth	r2, r2
    3b10:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
    3b14:	45f4      	cmp	ip, lr
    3b16:	f844 2b04 	str.w	r2, [r4], #4
    3b1a:	ea4f 4323 	mov.w	r3, r3, asr #16
    3b1e:	d8e9      	bhi.n	3af4 <__mdiff+0x70>
    3b20:	42af      	cmp	r7, r5
    3b22:	d917      	bls.n	3b54 <__mdiff+0xd0>
    3b24:	46a4      	mov	ip, r4
    3b26:	4629      	mov	r1, r5
    3b28:	f851 eb04 	ldr.w	lr, [r1], #4
    3b2c:	fa13 f28e 	uxtah	r2, r3, lr
    3b30:	1413      	asrs	r3, r2, #16
    3b32:	eb03 431e 	add.w	r3, r3, lr, lsr #16
    3b36:	b292      	uxth	r2, r2
    3b38:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
    3b3c:	428f      	cmp	r7, r1
    3b3e:	f84c 2b04 	str.w	r2, [ip], #4
    3b42:	ea4f 4323 	mov.w	r3, r3, asr #16
    3b46:	d8ef      	bhi.n	3b28 <__mdiff+0xa4>
    3b48:	43ed      	mvns	r5, r5
    3b4a:	443d      	add	r5, r7
    3b4c:	f025 0503 	bic.w	r5, r5, #3
    3b50:	3504      	adds	r5, #4
    3b52:	442c      	add	r4, r5
    3b54:	3c04      	subs	r4, #4
    3b56:	b922      	cbnz	r2, 3b62 <__mdiff+0xde>
    3b58:	f854 3d04 	ldr.w	r3, [r4, #-4]!
    3b5c:	3e01      	subs	r6, #1
    3b5e:	2b00      	cmp	r3, #0
    3b60:	d0fa      	beq.n	3b58 <__mdiff+0xd4>
    3b62:	6106      	str	r6, [r0, #16]
    3b64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3b68:	2100      	movs	r1, #0
    3b6a:	f7ff fd61 	bl	3630 <_Balloc>
    3b6e:	2201      	movs	r2, #1
    3b70:	2300      	movs	r3, #0
    3b72:	6102      	str	r2, [r0, #16]
    3b74:	6143      	str	r3, [r0, #20]
    3b76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3b7a:	462c      	mov	r4, r5
    3b7c:	f04f 0900 	mov.w	r9, #0
    3b80:	4615      	mov	r5, r2
    3b82:	e7a7      	b.n	3ad4 <__mdiff+0x50>
    3b84:	463b      	mov	r3, r7
    3b86:	f107 0414 	add.w	r4, r7, #20
    3b8a:	f108 0514 	add.w	r5, r8, #20
    3b8e:	4647      	mov	r7, r8
    3b90:	f04f 0901 	mov.w	r9, #1
    3b94:	4698      	mov	r8, r3
    3b96:	e79d      	b.n	3ad4 <__mdiff+0x50>

00003b98 <__d2b>:
    3b98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3b9c:	ec57 6b10 	vmov	r6, r7, d0
    3ba0:	b083      	sub	sp, #12
    3ba2:	4688      	mov	r8, r1
    3ba4:	2101      	movs	r1, #1
    3ba6:	463c      	mov	r4, r7
    3ba8:	f3c7 550a 	ubfx	r5, r7, #20, #11
    3bac:	4617      	mov	r7, r2
    3bae:	f7ff fd3f 	bl	3630 <_Balloc>
    3bb2:	f3c4 0413 	ubfx	r4, r4, #0, #20
    3bb6:	4681      	mov	r9, r0
    3bb8:	b10d      	cbz	r5, 3bbe <__d2b+0x26>
    3bba:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
    3bbe:	9401      	str	r4, [sp, #4]
    3bc0:	b31e      	cbz	r6, 3c0a <__d2b+0x72>
    3bc2:	a802      	add	r0, sp, #8
    3bc4:	f840 6d08 	str.w	r6, [r0, #-8]!
    3bc8:	f7ff fdc2 	bl	3750 <__lo0bits>
    3bcc:	2800      	cmp	r0, #0
    3bce:	d134      	bne.n	3c3a <__d2b+0xa2>
    3bd0:	e89d 000c 	ldmia.w	sp, {r2, r3}
    3bd4:	f8c9 2014 	str.w	r2, [r9, #20]
    3bd8:	2b00      	cmp	r3, #0
    3bda:	bf0c      	ite	eq
    3bdc:	2101      	moveq	r1, #1
    3bde:	2102      	movne	r1, #2
    3be0:	f8c9 3018 	str.w	r3, [r9, #24]
    3be4:	f8c9 1010 	str.w	r1, [r9, #16]
    3be8:	b9dd      	cbnz	r5, 3c22 <__d2b+0x8a>
    3bea:	eb09 0381 	add.w	r3, r9, r1, lsl #2
    3bee:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
    3bf2:	f8c8 0000 	str.w	r0, [r8]
    3bf6:	6918      	ldr	r0, [r3, #16]
    3bf8:	f7ff fd8a 	bl	3710 <__hi0bits>
    3bfc:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
    3c00:	6038      	str	r0, [r7, #0]
    3c02:	4648      	mov	r0, r9
    3c04:	b003      	add	sp, #12
    3c06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3c0a:	a801      	add	r0, sp, #4
    3c0c:	f7ff fda0 	bl	3750 <__lo0bits>
    3c10:	9b01      	ldr	r3, [sp, #4]
    3c12:	f8c9 3014 	str.w	r3, [r9, #20]
    3c16:	2101      	movs	r1, #1
    3c18:	3020      	adds	r0, #32
    3c1a:	f8c9 1010 	str.w	r1, [r9, #16]
    3c1e:	2d00      	cmp	r5, #0
    3c20:	d0e3      	beq.n	3bea <__d2b+0x52>
    3c22:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
    3c26:	4405      	add	r5, r0
    3c28:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
    3c2c:	f8c8 5000 	str.w	r5, [r8]
    3c30:	6038      	str	r0, [r7, #0]
    3c32:	4648      	mov	r0, r9
    3c34:	b003      	add	sp, #12
    3c36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3c3a:	e89d 000c 	ldmia.w	sp, {r2, r3}
    3c3e:	f1c0 0120 	rsb	r1, r0, #32
    3c42:	fa03 f101 	lsl.w	r1, r3, r1
    3c46:	430a      	orrs	r2, r1
    3c48:	40c3      	lsrs	r3, r0
    3c4a:	9301      	str	r3, [sp, #4]
    3c4c:	f8c9 2014 	str.w	r2, [r9, #20]
    3c50:	e7c2      	b.n	3bd8 <__d2b+0x40>
    3c52:	bf00      	nop

00003c54 <_vasnprintf_r>:
    3c54:	b570      	push	{r4, r5, r6, lr}
    3c56:	4615      	mov	r5, r2
    3c58:	b09a      	sub	sp, #104	; 0x68
    3c5a:	6814      	ldr	r4, [r2, #0]
    3c5c:	b109      	cbz	r1, 3c62 <_vasnprintf_r+0xe>
    3c5e:	2c00      	cmp	r4, #0
    3c60:	d11a      	bne.n	3c98 <_vasnprintf_r+0x44>
    3c62:	2400      	movs	r4, #0
    3c64:	f44f 7222 	mov.w	r2, #648	; 0x288
    3c68:	f8ad 200c 	strh.w	r2, [sp, #12]
    3c6c:	9400      	str	r4, [sp, #0]
    3c6e:	9404      	str	r4, [sp, #16]
    3c70:	461a      	mov	r2, r3
    3c72:	f64f 76ff 	movw	r6, #65535	; 0xffff
    3c76:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    3c78:	9402      	str	r4, [sp, #8]
    3c7a:	4669      	mov	r1, sp
    3c7c:	9405      	str	r4, [sp, #20]
    3c7e:	f8ad 600e 	strh.w	r6, [sp, #14]
    3c82:	f000 ff21 	bl	4ac8 <_svfprintf_r>
    3c86:	2800      	cmp	r0, #0
    3c88:	db11      	blt.n	3cae <_vasnprintf_r+0x5a>
    3c8a:	9b00      	ldr	r3, [sp, #0]
    3c8c:	6028      	str	r0, [r5, #0]
    3c8e:	2200      	movs	r2, #0
    3c90:	701a      	strb	r2, [r3, #0]
    3c92:	9804      	ldr	r0, [sp, #16]
    3c94:	b01a      	add	sp, #104	; 0x68
    3c96:	bd70      	pop	{r4, r5, r6, pc}
    3c98:	f44f 62c1 	mov.w	r2, #1544	; 0x608
    3c9c:	9100      	str	r1, [sp, #0]
    3c9e:	9104      	str	r1, [sp, #16]
    3ca0:	f8ad 200c 	strh.w	r2, [sp, #12]
    3ca4:	dae4      	bge.n	3c70 <_vasnprintf_r+0x1c>
    3ca6:	238b      	movs	r3, #139	; 0x8b
    3ca8:	6003      	str	r3, [r0, #0]
    3caa:	2000      	movs	r0, #0
    3cac:	e7f2      	b.n	3c94 <_vasnprintf_r+0x40>
    3cae:	2000      	movs	r0, #0
    3cb0:	e7f0      	b.n	3c94 <_vasnprintf_r+0x40>
    3cb2:	bf00      	nop

00003cb4 <_calloc_r>:
    3cb4:	b510      	push	{r4, lr}
    3cb6:	fb02 f101 	mul.w	r1, r2, r1
    3cba:	f7fe fcbd 	bl	2638 <_malloc_r>
    3cbe:	4604      	mov	r4, r0
    3cc0:	b1d8      	cbz	r0, 3cfa <_calloc_r+0x46>
    3cc2:	f850 2c04 	ldr.w	r2, [r0, #-4]
    3cc6:	f022 0203 	bic.w	r2, r2, #3
    3cca:	3a04      	subs	r2, #4
    3ccc:	2a24      	cmp	r2, #36	; 0x24
    3cce:	d818      	bhi.n	3d02 <_calloc_r+0x4e>
    3cd0:	2a13      	cmp	r2, #19
    3cd2:	d914      	bls.n	3cfe <_calloc_r+0x4a>
    3cd4:	2300      	movs	r3, #0
    3cd6:	2a1b      	cmp	r2, #27
    3cd8:	6003      	str	r3, [r0, #0]
    3cda:	6043      	str	r3, [r0, #4]
    3cdc:	d916      	bls.n	3d0c <_calloc_r+0x58>
    3cde:	2a24      	cmp	r2, #36	; 0x24
    3ce0:	6083      	str	r3, [r0, #8]
    3ce2:	60c3      	str	r3, [r0, #12]
    3ce4:	bf11      	iteee	ne
    3ce6:	f100 0210 	addne.w	r2, r0, #16
    3cea:	6103      	streq	r3, [r0, #16]
    3cec:	6143      	streq	r3, [r0, #20]
    3cee:	f100 0218 	addeq.w	r2, r0, #24
    3cf2:	2300      	movs	r3, #0
    3cf4:	6013      	str	r3, [r2, #0]
    3cf6:	6053      	str	r3, [r2, #4]
    3cf8:	6093      	str	r3, [r2, #8]
    3cfa:	4620      	mov	r0, r4
    3cfc:	bd10      	pop	{r4, pc}
    3cfe:	4602      	mov	r2, r0
    3d00:	e7f7      	b.n	3cf2 <_calloc_r+0x3e>
    3d02:	2100      	movs	r1, #0
    3d04:	f7fe ffca 	bl	2c9c <memset>
    3d08:	4620      	mov	r0, r4
    3d0a:	bd10      	pop	{r4, pc}
    3d0c:	f100 0208 	add.w	r2, r0, #8
    3d10:	e7ef      	b.n	3cf2 <_calloc_r+0x3e>
    3d12:	bf00      	nop

00003d14 <quorem>:
    3d14:	6902      	ldr	r2, [r0, #16]
    3d16:	690b      	ldr	r3, [r1, #16]
    3d18:	4293      	cmp	r3, r2
    3d1a:	f300 808d 	bgt.w	3e38 <quorem+0x124>
    3d1e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3d22:	f103 38ff 	add.w	r8, r3, #4294967295
    3d26:	f101 0714 	add.w	r7, r1, #20
    3d2a:	f100 0b14 	add.w	fp, r0, #20
    3d2e:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
    3d32:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
    3d36:	ea4f 0488 	mov.w	r4, r8, lsl #2
    3d3a:	b083      	sub	sp, #12
    3d3c:	3201      	adds	r2, #1
    3d3e:	fbb3 f9f2 	udiv	r9, r3, r2
    3d42:	eb0b 0304 	add.w	r3, fp, r4
    3d46:	9400      	str	r4, [sp, #0]
    3d48:	eb07 0a04 	add.w	sl, r7, r4
    3d4c:	9301      	str	r3, [sp, #4]
    3d4e:	f1b9 0f00 	cmp.w	r9, #0
    3d52:	d039      	beq.n	3dc8 <quorem+0xb4>
    3d54:	2500      	movs	r5, #0
    3d56:	46bc      	mov	ip, r7
    3d58:	46de      	mov	lr, fp
    3d5a:	462b      	mov	r3, r5
    3d5c:	f85c 6b04 	ldr.w	r6, [ip], #4
    3d60:	f8de 2000 	ldr.w	r2, [lr]
    3d64:	b2b4      	uxth	r4, r6
    3d66:	fb09 5504 	mla	r5, r9, r4, r5
    3d6a:	0c36      	lsrs	r6, r6, #16
    3d6c:	0c2c      	lsrs	r4, r5, #16
    3d6e:	fb09 4406 	mla	r4, r9, r6, r4
    3d72:	b2ad      	uxth	r5, r5
    3d74:	1b5b      	subs	r3, r3, r5
    3d76:	b2a6      	uxth	r6, r4
    3d78:	fa13 f382 	uxtah	r3, r3, r2
    3d7c:	ebc6 4612 	rsb	r6, r6, r2, lsr #16
    3d80:	eb06 4623 	add.w	r6, r6, r3, asr #16
    3d84:	b29b      	uxth	r3, r3
    3d86:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    3d8a:	45e2      	cmp	sl, ip
    3d8c:	f84e 3b04 	str.w	r3, [lr], #4
    3d90:	ea4f 4514 	mov.w	r5, r4, lsr #16
    3d94:	ea4f 4326 	mov.w	r3, r6, asr #16
    3d98:	d2e0      	bcs.n	3d5c <quorem+0x48>
    3d9a:	9b00      	ldr	r3, [sp, #0]
    3d9c:	f85b 3003 	ldr.w	r3, [fp, r3]
    3da0:	b993      	cbnz	r3, 3dc8 <quorem+0xb4>
    3da2:	9c01      	ldr	r4, [sp, #4]
    3da4:	1f23      	subs	r3, r4, #4
    3da6:	459b      	cmp	fp, r3
    3da8:	d20c      	bcs.n	3dc4 <quorem+0xb0>
    3daa:	f854 3c04 	ldr.w	r3, [r4, #-4]
    3dae:	b94b      	cbnz	r3, 3dc4 <quorem+0xb0>
    3db0:	f1a4 0308 	sub.w	r3, r4, #8
    3db4:	e002      	b.n	3dbc <quorem+0xa8>
    3db6:	681a      	ldr	r2, [r3, #0]
    3db8:	3b04      	subs	r3, #4
    3dba:	b91a      	cbnz	r2, 3dc4 <quorem+0xb0>
    3dbc:	459b      	cmp	fp, r3
    3dbe:	f108 38ff 	add.w	r8, r8, #4294967295
    3dc2:	d3f8      	bcc.n	3db6 <quorem+0xa2>
    3dc4:	f8c0 8010 	str.w	r8, [r0, #16]
    3dc8:	4604      	mov	r4, r0
    3dca:	f7ff fe39 	bl	3a40 <__mcmp>
    3dce:	2800      	cmp	r0, #0
    3dd0:	db2e      	blt.n	3e30 <quorem+0x11c>
    3dd2:	f109 0901 	add.w	r9, r9, #1
    3dd6:	465d      	mov	r5, fp
    3dd8:	2300      	movs	r3, #0
    3dda:	f857 1b04 	ldr.w	r1, [r7], #4
    3dde:	6828      	ldr	r0, [r5, #0]
    3de0:	b28a      	uxth	r2, r1
    3de2:	1a9a      	subs	r2, r3, r2
    3de4:	0c09      	lsrs	r1, r1, #16
    3de6:	fa12 f280 	uxtah	r2, r2, r0
    3dea:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
    3dee:	eb03 4322 	add.w	r3, r3, r2, asr #16
    3df2:	b291      	uxth	r1, r2
    3df4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    3df8:	45ba      	cmp	sl, r7
    3dfa:	f845 1b04 	str.w	r1, [r5], #4
    3dfe:	ea4f 4323 	mov.w	r3, r3, asr #16
    3e02:	d2ea      	bcs.n	3dda <quorem+0xc6>
    3e04:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
    3e08:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
    3e0c:	b982      	cbnz	r2, 3e30 <quorem+0x11c>
    3e0e:	1f1a      	subs	r2, r3, #4
    3e10:	4593      	cmp	fp, r2
    3e12:	d20b      	bcs.n	3e2c <quorem+0x118>
    3e14:	f853 2c04 	ldr.w	r2, [r3, #-4]
    3e18:	b942      	cbnz	r2, 3e2c <quorem+0x118>
    3e1a:	3b08      	subs	r3, #8
    3e1c:	e002      	b.n	3e24 <quorem+0x110>
    3e1e:	681a      	ldr	r2, [r3, #0]
    3e20:	3b04      	subs	r3, #4
    3e22:	b91a      	cbnz	r2, 3e2c <quorem+0x118>
    3e24:	459b      	cmp	fp, r3
    3e26:	f108 38ff 	add.w	r8, r8, #4294967295
    3e2a:	d3f8      	bcc.n	3e1e <quorem+0x10a>
    3e2c:	f8c4 8010 	str.w	r8, [r4, #16]
    3e30:	4648      	mov	r0, r9
    3e32:	b003      	add	sp, #12
    3e34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3e38:	2000      	movs	r0, #0
    3e3a:	4770      	bx	lr
    3e3c:	0000      	movs	r0, r0
	...

00003e40 <_dtoa_r>:
    3e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3e44:	ec57 6b10 	vmov	r6, r7, d0
    3e48:	b093      	sub	sp, #76	; 0x4c
    3e4a:	6c05      	ldr	r5, [r0, #64]	; 0x40
    3e4c:	9101      	str	r1, [sp, #4]
    3e4e:	4604      	mov	r4, r0
    3e50:	4690      	mov	r8, r2
    3e52:	9304      	str	r3, [sp, #16]
    3e54:	ee10 aa10 	vmov	sl, s0
    3e58:	46bb      	mov	fp, r7
    3e5a:	b14d      	cbz	r5, 3e70 <_dtoa_r+0x30>
    3e5c:	6c42      	ldr	r2, [r0, #68]	; 0x44
    3e5e:	606a      	str	r2, [r5, #4]
    3e60:	2301      	movs	r3, #1
    3e62:	4093      	lsls	r3, r2
    3e64:	60ab      	str	r3, [r5, #8]
    3e66:	4629      	mov	r1, r5
    3e68:	f7ff fc08 	bl	367c <_Bfree>
    3e6c:	2300      	movs	r3, #0
    3e6e:	6423      	str	r3, [r4, #64]	; 0x40
    3e70:	f1bb 0f00 	cmp.w	fp, #0
    3e74:	465e      	mov	r6, fp
    3e76:	db34      	blt.n	3ee2 <_dtoa_r+0xa2>
    3e78:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    3e7a:	2300      	movs	r3, #0
    3e7c:	6013      	str	r3, [r2, #0]
    3e7e:	4bc4      	ldr	r3, [pc, #784]	; (4190 <_dtoa_r+0x350>)
    3e80:	461a      	mov	r2, r3
    3e82:	4033      	ands	r3, r6
    3e84:	4293      	cmp	r3, r2
    3e86:	d015      	beq.n	3eb4 <_dtoa_r+0x74>
    3e88:	ec4b ab17 	vmov	d7, sl, fp
    3e8c:	eeb5 7b40 	vcmp.f64	d7, #0.0
    3e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3e94:	e9cd ab02 	strd	sl, fp, [sp, #8]
    3e98:	d12a      	bne.n	3ef0 <_dtoa_r+0xb0>
    3e9a:	9a04      	ldr	r2, [sp, #16]
    3e9c:	2301      	movs	r3, #1
    3e9e:	6013      	str	r3, [r2, #0]
    3ea0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    3ea2:	2b00      	cmp	r3, #0
    3ea4:	f000 80b7 	beq.w	4016 <_dtoa_r+0x1d6>
    3ea8:	48ba      	ldr	r0, [pc, #744]	; (4194 <_dtoa_r+0x354>)
    3eaa:	6018      	str	r0, [r3, #0]
    3eac:	3801      	subs	r0, #1
    3eae:	b013      	add	sp, #76	; 0x4c
    3eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3eb4:	9a04      	ldr	r2, [sp, #16]
    3eb6:	f242 730f 	movw	r3, #9999	; 0x270f
    3eba:	6013      	str	r3, [r2, #0]
    3ebc:	f1ba 0f00 	cmp.w	sl, #0
    3ec0:	f000 8092 	beq.w	3fe8 <_dtoa_r+0x1a8>
    3ec4:	48b4      	ldr	r0, [pc, #720]	; (4198 <_dtoa_r+0x358>)
    3ec6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    3ec8:	2b00      	cmp	r3, #0
    3eca:	d0f0      	beq.n	3eae <_dtoa_r+0x6e>
    3ecc:	78c3      	ldrb	r3, [r0, #3]
    3ece:	2b00      	cmp	r3, #0
    3ed0:	f000 80a3 	beq.w	401a <_dtoa_r+0x1da>
    3ed4:	f100 0308 	add.w	r3, r0, #8
    3ed8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    3eda:	6013      	str	r3, [r2, #0]
    3edc:	b013      	add	sp, #76	; 0x4c
    3ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3ee2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    3ee4:	2301      	movs	r3, #1
    3ee6:	f02b 4600 	bic.w	r6, fp, #2147483648	; 0x80000000
    3eea:	6013      	str	r3, [r2, #0]
    3eec:	46b3      	mov	fp, r6
    3eee:	e7c6      	b.n	3e7e <_dtoa_r+0x3e>
    3ef0:	a911      	add	r1, sp, #68	; 0x44
    3ef2:	aa10      	add	r2, sp, #64	; 0x40
    3ef4:	ed9d 0b02 	vldr	d0, [sp, #8]
    3ef8:	4620      	mov	r0, r4
    3efa:	f7ff fe4d 	bl	3b98 <__d2b>
    3efe:	0d31      	lsrs	r1, r6, #20
    3f00:	9007      	str	r0, [sp, #28]
    3f02:	d17a      	bne.n	3ffa <_dtoa_r+0x1ba>
    3f04:	9810      	ldr	r0, [sp, #64]	; 0x40
    3f06:	9911      	ldr	r1, [sp, #68]	; 0x44
    3f08:	4401      	add	r1, r0
    3f0a:	f201 4332 	addw	r3, r1, #1074	; 0x432
    3f0e:	2b20      	cmp	r3, #32
    3f10:	f340 8241 	ble.w	4396 <_dtoa_r+0x556>
    3f14:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
    3f18:	f201 4212 	addw	r2, r1, #1042	; 0x412
    3f1c:	409e      	lsls	r6, r3
    3f1e:	fa2a f302 	lsr.w	r3, sl, r2
    3f22:	4333      	orrs	r3, r6
    3f24:	ee07 3a90 	vmov	s15, r3
    3f28:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    3f2c:	2501      	movs	r5, #1
    3f2e:	ec53 2b17 	vmov	r2, r3, d7
    3f32:	3901      	subs	r1, #1
    3f34:	f1a3 73f8 	sub.w	r3, r3, #32505856	; 0x1f00000
    3f38:	950a      	str	r5, [sp, #40]	; 0x28
    3f3a:	ec43 2b17 	vmov	d7, r2, r3
    3f3e:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
    3f42:	ed9f 4b8d 	vldr	d4, [pc, #564]	; 4178 <_dtoa_r+0x338>
    3f46:	ee37 6b46 	vsub.f64	d6, d7, d6
    3f4a:	ed9f 7b8d 	vldr	d7, [pc, #564]	; 4180 <_dtoa_r+0x340>
    3f4e:	ed9f 5b8e 	vldr	d5, [pc, #568]	; 4188 <_dtoa_r+0x348>
    3f52:	eea6 7b04 	vfma.f64	d7, d6, d4
    3f56:	ee06 1a90 	vmov	s13, r1
    3f5a:	eeb8 6be6 	vcvt.f64.s32	d6, s13
    3f5e:	eea6 7b05 	vfma.f64	d7, d6, d5
    3f62:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    3f66:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    3f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3f6e:	edcd 6a02 	vstr	s13, [sp, #8]
    3f72:	f100 811c 	bmi.w	41ae <_dtoa_r+0x36e>
    3f76:	9d02      	ldr	r5, [sp, #8]
    3f78:	2d16      	cmp	r5, #22
    3f7a:	f200 8115 	bhi.w	41a8 <_dtoa_r+0x368>
    3f7e:	4b87      	ldr	r3, [pc, #540]	; (419c <_dtoa_r+0x35c>)
    3f80:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
    3f84:	ed93 7b00 	vldr	d7, [r3]
    3f88:	ec4b ab16 	vmov	d6, sl, fp
    3f8c:	eeb4 7bc6 	vcmpe.f64	d7, d6
    3f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3f94:	f340 8206 	ble.w	43a4 <_dtoa_r+0x564>
    3f98:	1e6b      	subs	r3, r5, #1
    3f9a:	9302      	str	r3, [sp, #8]
    3f9c:	2300      	movs	r3, #0
    3f9e:	930c      	str	r3, [sp, #48]	; 0x30
    3fa0:	1a41      	subs	r1, r0, r1
    3fa2:	f1b1 0901 	subs.w	r9, r1, #1
    3fa6:	f100 8117 	bmi.w	41d8 <_dtoa_r+0x398>
    3faa:	2300      	movs	r3, #0
    3fac:	9306      	str	r3, [sp, #24]
    3fae:	9b02      	ldr	r3, [sp, #8]
    3fb0:	2b00      	cmp	r3, #0
    3fb2:	f2c0 8108 	blt.w	41c6 <_dtoa_r+0x386>
    3fb6:	4499      	add	r9, r3
    3fb8:	930b      	str	r3, [sp, #44]	; 0x2c
    3fba:	2300      	movs	r3, #0
    3fbc:	9305      	str	r3, [sp, #20]
    3fbe:	9b01      	ldr	r3, [sp, #4]
    3fc0:	2b09      	cmp	r3, #9
    3fc2:	d82c      	bhi.n	401e <_dtoa_r+0x1de>
    3fc4:	2b05      	cmp	r3, #5
    3fc6:	f340 855f 	ble.w	4a88 <_dtoa_r+0xc48>
    3fca:	3b04      	subs	r3, #4
    3fcc:	9301      	str	r3, [sp, #4]
    3fce:	2300      	movs	r3, #0
    3fd0:	930e      	str	r3, [sp, #56]	; 0x38
    3fd2:	9b01      	ldr	r3, [sp, #4]
    3fd4:	3b02      	subs	r3, #2
    3fd6:	2b03      	cmp	r3, #3
    3fd8:	f200 855f 	bhi.w	4a9a <_dtoa_r+0xc5a>
    3fdc:	e8df f013 	tbh	[pc, r3, lsl #1]
    3fe0:	01e502a9 	.word	0x01e502a9
    3fe4:	03c802b5 	.word	0x03c802b5
    3fe8:	4b6b      	ldr	r3, [pc, #428]	; (4198 <_dtoa_r+0x358>)
    3fea:	4a6d      	ldr	r2, [pc, #436]	; (41a0 <_dtoa_r+0x360>)
    3fec:	f3c6 0013 	ubfx	r0, r6, #0, #20
    3ff0:	2800      	cmp	r0, #0
    3ff2:	bf14      	ite	ne
    3ff4:	4618      	movne	r0, r3
    3ff6:	4610      	moveq	r0, r2
    3ff8:	e765      	b.n	3ec6 <_dtoa_r+0x86>
    3ffa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    3ffe:	f3c3 0013 	ubfx	r0, r3, #0, #20
    4002:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
    4006:	2500      	movs	r5, #0
    4008:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
    400c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    4010:	9810      	ldr	r0, [sp, #64]	; 0x40
    4012:	950a      	str	r5, [sp, #40]	; 0x28
    4014:	e791      	b.n	3f3a <_dtoa_r+0xfa>
    4016:	4863      	ldr	r0, [pc, #396]	; (41a4 <_dtoa_r+0x364>)
    4018:	e749      	b.n	3eae <_dtoa_r+0x6e>
    401a:	1cc3      	adds	r3, r0, #3
    401c:	e75c      	b.n	3ed8 <_dtoa_r+0x98>
    401e:	2100      	movs	r1, #0
    4020:	6461      	str	r1, [r4, #68]	; 0x44
    4022:	4620      	mov	r0, r4
    4024:	4688      	mov	r8, r1
    4026:	9101      	str	r1, [sp, #4]
    4028:	f7ff fb02 	bl	3630 <_Balloc>
    402c:	f04f 37ff 	mov.w	r7, #4294967295
    4030:	2301      	movs	r3, #1
    4032:	9008      	str	r0, [sp, #32]
    4034:	6420      	str	r0, [r4, #64]	; 0x40
    4036:	970d      	str	r7, [sp, #52]	; 0x34
    4038:	9309      	str	r3, [sp, #36]	; 0x24
    403a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    403c:	2b00      	cmp	r3, #0
    403e:	db7a      	blt.n	4136 <_dtoa_r+0x2f6>
    4040:	9a02      	ldr	r2, [sp, #8]
    4042:	2a0e      	cmp	r2, #14
    4044:	dc77      	bgt.n	4136 <_dtoa_r+0x2f6>
    4046:	4b55      	ldr	r3, [pc, #340]	; (419c <_dtoa_r+0x35c>)
    4048:	f1b8 0f00 	cmp.w	r8, #0
    404c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    4050:	ed93 4b00 	vldr	d4, [r3]
    4054:	f2c0 8284 	blt.w	4560 <_dtoa_r+0x720>
    4058:	eeb1 2b44 	vneg.f64	d2, d4
    405c:	ec4b ab17 	vmov	d7, sl, fp
    4060:	ee87 6b04 	vdiv.f64	d6, d7, d4
    4064:	eebd 6bc6 	vcvt.s32.f64	s12, d6
    4068:	9a08      	ldr	r2, [sp, #32]
    406a:	ee16 3a10 	vmov	r3, s12
    406e:	2f01      	cmp	r7, #1
    4070:	f103 0330 	add.w	r3, r3, #48	; 0x30
    4074:	eeb8 5bc6 	vcvt.f64.s32	d5, s12
    4078:	f102 0b01 	add.w	fp, r2, #1
    407c:	7013      	strb	r3, [r2, #0]
    407e:	eea2 7b05 	vfma.f64	d7, d2, d5
    4082:	d022      	beq.n	40ca <_dtoa_r+0x28a>
    4084:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
    4088:	ee27 7b03 	vmul.f64	d7, d7, d3
    408c:	eeb5 7b40 	vcmp.f64	d7, #0.0
    4090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4094:	d03a      	beq.n	410c <_dtoa_r+0x2cc>
    4096:	9a08      	ldr	r2, [sp, #32]
    4098:	e006      	b.n	40a8 <_dtoa_r+0x268>
    409a:	ee27 7b03 	vmul.f64	d7, d7, d3
    409e:	eeb5 7b40 	vcmp.f64	d7, #0.0
    40a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    40a6:	d031      	beq.n	410c <_dtoa_r+0x2cc>
    40a8:	ee87 6b04 	vdiv.f64	d6, d7, d4
    40ac:	eebd 6bc6 	vcvt.s32.f64	s12, d6
    40b0:	ee16 3a10 	vmov	r3, s12
    40b4:	3330      	adds	r3, #48	; 0x30
    40b6:	f80b 3b01 	strb.w	r3, [fp], #1
    40ba:	ebc2 030b 	rsb	r3, r2, fp
    40be:	42bb      	cmp	r3, r7
    40c0:	eeb8 5bc6 	vcvt.f64.s32	d5, s12
    40c4:	eea2 7b05 	vfma.f64	d7, d2, d5
    40c8:	d1e7      	bne.n	409a <_dtoa_r+0x25a>
    40ca:	ee37 7b07 	vadd.f64	d7, d7, d7
    40ce:	eeb4 4bc7 	vcmpe.f64	d4, d7
    40d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    40d6:	d408      	bmi.n	40ea <_dtoa_r+0x2aa>
    40d8:	eeb4 4b47 	vcmp.f64	d4, d7
    40dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    40e0:	d114      	bne.n	410c <_dtoa_r+0x2cc>
    40e2:	ee16 3a10 	vmov	r3, s12
    40e6:	07db      	lsls	r3, r3, #31
    40e8:	d510      	bpl.n	410c <_dtoa_r+0x2cc>
    40ea:	f81b 0c01 	ldrb.w	r0, [fp, #-1]
    40ee:	9a08      	ldr	r2, [sp, #32]
    40f0:	f10b 33ff 	add.w	r3, fp, #4294967295
    40f4:	e004      	b.n	4100 <_dtoa_r+0x2c0>
    40f6:	429a      	cmp	r2, r3
    40f8:	f000 83e5 	beq.w	48c6 <_dtoa_r+0xa86>
    40fc:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
    4100:	2839      	cmp	r0, #57	; 0x39
    4102:	f103 0b01 	add.w	fp, r3, #1
    4106:	d0f6      	beq.n	40f6 <_dtoa_r+0x2b6>
    4108:	3001      	adds	r0, #1
    410a:	7018      	strb	r0, [r3, #0]
    410c:	9907      	ldr	r1, [sp, #28]
    410e:	4620      	mov	r0, r4
    4110:	f7ff fab4 	bl	367c <_Bfree>
    4114:	2200      	movs	r2, #0
    4116:	9b02      	ldr	r3, [sp, #8]
    4118:	f88b 2000 	strb.w	r2, [fp]
    411c:	9a04      	ldr	r2, [sp, #16]
    411e:	3301      	adds	r3, #1
    4120:	6013      	str	r3, [r2, #0]
    4122:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    4124:	2b00      	cmp	r3, #0
    4126:	f000 8366 	beq.w	47f6 <_dtoa_r+0x9b6>
    412a:	9808      	ldr	r0, [sp, #32]
    412c:	f8c3 b000 	str.w	fp, [r3]
    4130:	b013      	add	sp, #76	; 0x4c
    4132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4136:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4138:	2a00      	cmp	r2, #0
    413a:	d053      	beq.n	41e4 <_dtoa_r+0x3a4>
    413c:	9a01      	ldr	r2, [sp, #4]
    413e:	2a01      	cmp	r2, #1
    4140:	f340 822e 	ble.w	45a0 <_dtoa_r+0x760>
    4144:	9905      	ldr	r1, [sp, #20]
    4146:	1e7a      	subs	r2, r7, #1
    4148:	4291      	cmp	r1, r2
    414a:	f2c0 8357 	blt.w	47fc <_dtoa_r+0x9bc>
    414e:	1a8b      	subs	r3, r1, r2
    4150:	930e      	str	r3, [sp, #56]	; 0x38
    4152:	2f00      	cmp	r7, #0
    4154:	9b06      	ldr	r3, [sp, #24]
    4156:	f2c0 8424 	blt.w	49a2 <_dtoa_r+0xb62>
    415a:	930a      	str	r3, [sp, #40]	; 0x28
    415c:	463b      	mov	r3, r7
    415e:	9a06      	ldr	r2, [sp, #24]
    4160:	2101      	movs	r1, #1
    4162:	441a      	add	r2, r3
    4164:	4620      	mov	r0, r4
    4166:	9206      	str	r2, [sp, #24]
    4168:	4499      	add	r9, r3
    416a:	f7ff fb1f 	bl	37ac <__i2b>
    416e:	4606      	mov	r6, r0
    4170:	e03d      	b.n	41ee <_dtoa_r+0x3ae>
    4172:	bf00      	nop
    4174:	f3af 8000 	nop.w
    4178:	636f4361 	.word	0x636f4361
    417c:	3fd287a7 	.word	0x3fd287a7
    4180:	8b60c8b3 	.word	0x8b60c8b3
    4184:	3fc68a28 	.word	0x3fc68a28
    4188:	509f79fb 	.word	0x509f79fb
    418c:	3fd34413 	.word	0x3fd34413
    4190:	7ff00000 	.word	0x7ff00000
    4194:	20000395 	.word	0x20000395
    4198:	20000390 	.word	0x20000390
    419c:	20000288 	.word	0x20000288
    41a0:	20000384 	.word	0x20000384
    41a4:	20000394 	.word	0x20000394
    41a8:	2301      	movs	r3, #1
    41aa:	930c      	str	r3, [sp, #48]	; 0x30
    41ac:	e6f8      	b.n	3fa0 <_dtoa_r+0x160>
    41ae:	eeb8 6be6 	vcvt.f64.s32	d6, s13
    41b2:	eeb4 7b46 	vcmp.f64	d7, d6
    41b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    41ba:	f43f aedc 	beq.w	3f76 <_dtoa_r+0x136>
    41be:	9b02      	ldr	r3, [sp, #8]
    41c0:	3b01      	subs	r3, #1
    41c2:	9302      	str	r3, [sp, #8]
    41c4:	e6d7      	b.n	3f76 <_dtoa_r+0x136>
    41c6:	9a06      	ldr	r2, [sp, #24]
    41c8:	9b02      	ldr	r3, [sp, #8]
    41ca:	1ad2      	subs	r2, r2, r3
    41cc:	425b      	negs	r3, r3
    41ce:	9305      	str	r3, [sp, #20]
    41d0:	2300      	movs	r3, #0
    41d2:	9206      	str	r2, [sp, #24]
    41d4:	930b      	str	r3, [sp, #44]	; 0x2c
    41d6:	e6f2      	b.n	3fbe <_dtoa_r+0x17e>
    41d8:	f1c9 0300 	rsb	r3, r9, #0
    41dc:	9306      	str	r3, [sp, #24]
    41de:	f04f 0900 	mov.w	r9, #0
    41e2:	e6e4      	b.n	3fae <_dtoa_r+0x16e>
    41e4:	9b05      	ldr	r3, [sp, #20]
    41e6:	930e      	str	r3, [sp, #56]	; 0x38
    41e8:	9e09      	ldr	r6, [sp, #36]	; 0x24
    41ea:	9b06      	ldr	r3, [sp, #24]
    41ec:	930a      	str	r3, [sp, #40]	; 0x28
    41ee:	990a      	ldr	r1, [sp, #40]	; 0x28
    41f0:	460b      	mov	r3, r1
    41f2:	b161      	cbz	r1, 420e <_dtoa_r+0x3ce>
    41f4:	f1b9 0f00 	cmp.w	r9, #0
    41f8:	dd09      	ble.n	420e <_dtoa_r+0x3ce>
    41fa:	4549      	cmp	r1, r9
    41fc:	9a06      	ldr	r2, [sp, #24]
    41fe:	bfa8      	it	ge
    4200:	464b      	movge	r3, r9
    4202:	1ad2      	subs	r2, r2, r3
    4204:	9206      	str	r2, [sp, #24]
    4206:	1aca      	subs	r2, r1, r3
    4208:	920a      	str	r2, [sp, #40]	; 0x28
    420a:	ebc3 0909 	rsb	r9, r3, r9
    420e:	9b05      	ldr	r3, [sp, #20]
    4210:	2b00      	cmp	r3, #0
    4212:	f340 8280 	ble.w	4716 <_dtoa_r+0x8d6>
    4216:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4218:	2a00      	cmp	r2, #0
    421a:	f000 819a 	beq.w	4552 <_dtoa_r+0x712>
    421e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    4220:	2a00      	cmp	r2, #0
    4222:	f000 8196 	beq.w	4552 <_dtoa_r+0x712>
    4226:	4631      	mov	r1, r6
    4228:	4620      	mov	r0, r4
    422a:	f7ff fb61 	bl	38f0 <__pow5mult>
    422e:	9a07      	ldr	r2, [sp, #28]
    4230:	4601      	mov	r1, r0
    4232:	4606      	mov	r6, r0
    4234:	4620      	mov	r0, r4
    4236:	f7ff fac3 	bl	37c0 <__multiply>
    423a:	9907      	ldr	r1, [sp, #28]
    423c:	4605      	mov	r5, r0
    423e:	4620      	mov	r0, r4
    4240:	f7ff fa1c 	bl	367c <_Bfree>
    4244:	9b05      	ldr	r3, [sp, #20]
    4246:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    4248:	1a9b      	subs	r3, r3, r2
    424a:	9305      	str	r3, [sp, #20]
    424c:	f040 8180 	bne.w	4550 <_dtoa_r+0x710>
    4250:	2101      	movs	r1, #1
    4252:	4620      	mov	r0, r4
    4254:	f7ff faaa 	bl	37ac <__i2b>
    4258:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    425a:	9005      	str	r0, [sp, #20]
    425c:	2b00      	cmp	r3, #0
    425e:	f000 81ac 	beq.w	45ba <_dtoa_r+0x77a>
    4262:	4601      	mov	r1, r0
    4264:	461a      	mov	r2, r3
    4266:	4620      	mov	r0, r4
    4268:	f7ff fb42 	bl	38f0 <__pow5mult>
    426c:	9b01      	ldr	r3, [sp, #4]
    426e:	9005      	str	r0, [sp, #20]
    4270:	2b01      	cmp	r3, #1
    4272:	f340 8280 	ble.w	4776 <_dtoa_r+0x936>
    4276:	2300      	movs	r3, #0
    4278:	9307      	str	r3, [sp, #28]
    427a:	9a05      	ldr	r2, [sp, #20]
    427c:	6913      	ldr	r3, [r2, #16]
    427e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4282:	6918      	ldr	r0, [r3, #16]
    4284:	f7ff fa44 	bl	3710 <__hi0bits>
    4288:	f1c0 0020 	rsb	r0, r0, #32
    428c:	4448      	add	r0, r9
    428e:	f010 001f 	ands.w	r0, r0, #31
    4292:	f000 8190 	beq.w	45b6 <_dtoa_r+0x776>
    4296:	f1c0 0320 	rsb	r3, r0, #32
    429a:	2b04      	cmp	r3, #4
    429c:	f340 83f8 	ble.w	4a90 <_dtoa_r+0xc50>
    42a0:	f1c0 001c 	rsb	r0, r0, #28
    42a4:	9b06      	ldr	r3, [sp, #24]
    42a6:	4403      	add	r3, r0
    42a8:	9306      	str	r3, [sp, #24]
    42aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    42ac:	4403      	add	r3, r0
    42ae:	930a      	str	r3, [sp, #40]	; 0x28
    42b0:	4481      	add	r9, r0
    42b2:	9b06      	ldr	r3, [sp, #24]
    42b4:	2b00      	cmp	r3, #0
    42b6:	dd05      	ble.n	42c4 <_dtoa_r+0x484>
    42b8:	4629      	mov	r1, r5
    42ba:	461a      	mov	r2, r3
    42bc:	4620      	mov	r0, r4
    42be:	f7ff fb67 	bl	3990 <__lshift>
    42c2:	4605      	mov	r5, r0
    42c4:	f1b9 0f00 	cmp.w	r9, #0
    42c8:	dd05      	ble.n	42d6 <_dtoa_r+0x496>
    42ca:	464a      	mov	r2, r9
    42cc:	9905      	ldr	r1, [sp, #20]
    42ce:	4620      	mov	r0, r4
    42d0:	f7ff fb5e 	bl	3990 <__lshift>
    42d4:	9005      	str	r0, [sp, #20]
    42d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    42d8:	2b00      	cmp	r3, #0
    42da:	f040 8201 	bne.w	46e0 <_dtoa_r+0x8a0>
    42de:	2f00      	cmp	r7, #0
    42e0:	f340 8220 	ble.w	4724 <_dtoa_r+0x8e4>
    42e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    42e6:	2b00      	cmp	r3, #0
    42e8:	f040 817b 	bne.w	45e2 <_dtoa_r+0x7a2>
    42ec:	f8dd b020 	ldr.w	fp, [sp, #32]
    42f0:	f8dd a014 	ldr.w	sl, [sp, #20]
    42f4:	46d8      	mov	r8, fp
    42f6:	e002      	b.n	42fe <_dtoa_r+0x4be>
    42f8:	f7ff f9ca 	bl	3690 <__multadd>
    42fc:	4605      	mov	r5, r0
    42fe:	4651      	mov	r1, sl
    4300:	4628      	mov	r0, r5
    4302:	f7ff fd07 	bl	3d14 <quorem>
    4306:	f100 0930 	add.w	r9, r0, #48	; 0x30
    430a:	f808 9b01 	strb.w	r9, [r8], #1
    430e:	ebcb 0308 	rsb	r3, fp, r8
    4312:	42bb      	cmp	r3, r7
    4314:	f04f 020a 	mov.w	r2, #10
    4318:	f04f 0300 	mov.w	r3, #0
    431c:	4629      	mov	r1, r5
    431e:	4620      	mov	r0, r4
    4320:	dbea      	blt.n	42f8 <_dtoa_r+0x4b8>
    4322:	9b08      	ldr	r3, [sp, #32]
    4324:	2f01      	cmp	r7, #1
    4326:	bfac      	ite	ge
    4328:	19db      	addge	r3, r3, r7
    432a:	3301      	addlt	r3, #1
    432c:	469b      	mov	fp, r3
    432e:	f04f 0a00 	mov.w	sl, #0
    4332:	4629      	mov	r1, r5
    4334:	2201      	movs	r2, #1
    4336:	4620      	mov	r0, r4
    4338:	f7ff fb2a 	bl	3990 <__lshift>
    433c:	9905      	ldr	r1, [sp, #20]
    433e:	9007      	str	r0, [sp, #28]
    4340:	f7ff fb7e 	bl	3a40 <__mcmp>
    4344:	2800      	cmp	r0, #0
    4346:	f340 828c 	ble.w	4862 <_dtoa_r+0xa22>
    434a:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
    434e:	9908      	ldr	r1, [sp, #32]
    4350:	f10b 33ff 	add.w	r3, fp, #4294967295
    4354:	e004      	b.n	4360 <_dtoa_r+0x520>
    4356:	428b      	cmp	r3, r1
    4358:	f000 8203 	beq.w	4762 <_dtoa_r+0x922>
    435c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    4360:	2a39      	cmp	r2, #57	; 0x39
    4362:	f103 0b01 	add.w	fp, r3, #1
    4366:	d0f6      	beq.n	4356 <_dtoa_r+0x516>
    4368:	3201      	adds	r2, #1
    436a:	701a      	strb	r2, [r3, #0]
    436c:	9905      	ldr	r1, [sp, #20]
    436e:	4620      	mov	r0, r4
    4370:	f7ff f984 	bl	367c <_Bfree>
    4374:	2e00      	cmp	r6, #0
    4376:	f43f aec9 	beq.w	410c <_dtoa_r+0x2cc>
    437a:	f1ba 0f00 	cmp.w	sl, #0
    437e:	d005      	beq.n	438c <_dtoa_r+0x54c>
    4380:	45b2      	cmp	sl, r6
    4382:	d003      	beq.n	438c <_dtoa_r+0x54c>
    4384:	4651      	mov	r1, sl
    4386:	4620      	mov	r0, r4
    4388:	f7ff f978 	bl	367c <_Bfree>
    438c:	4631      	mov	r1, r6
    438e:	4620      	mov	r0, r4
    4390:	f7ff f974 	bl	367c <_Bfree>
    4394:	e6ba      	b.n	410c <_dtoa_r+0x2cc>
    4396:	f1c3 0320 	rsb	r3, r3, #32
    439a:	fa0a f303 	lsl.w	r3, sl, r3
    439e:	ee07 3a90 	vmov	s15, r3
    43a2:	e5c1      	b.n	3f28 <_dtoa_r+0xe8>
    43a4:	2300      	movs	r3, #0
    43a6:	930c      	str	r3, [sp, #48]	; 0x30
    43a8:	e5fa      	b.n	3fa0 <_dtoa_r+0x160>
    43aa:	2300      	movs	r3, #0
    43ac:	9309      	str	r3, [sp, #36]	; 0x24
    43ae:	9b02      	ldr	r3, [sp, #8]
    43b0:	4443      	add	r3, r8
    43b2:	1c5f      	adds	r7, r3, #1
    43b4:	2f00      	cmp	r7, #0
    43b6:	930d      	str	r3, [sp, #52]	; 0x34
    43b8:	f340 822d 	ble.w	4816 <_dtoa_r+0x9d6>
    43bc:	463e      	mov	r6, r7
    43be:	463d      	mov	r5, r7
    43c0:	2100      	movs	r1, #0
    43c2:	2e17      	cmp	r6, #23
    43c4:	6461      	str	r1, [r4, #68]	; 0x44
    43c6:	d90a      	bls.n	43de <_dtoa_r+0x59e>
    43c8:	2201      	movs	r2, #1
    43ca:	2304      	movs	r3, #4
    43cc:	005b      	lsls	r3, r3, #1
    43ce:	f103 0014 	add.w	r0, r3, #20
    43d2:	42b0      	cmp	r0, r6
    43d4:	4611      	mov	r1, r2
    43d6:	f102 0201 	add.w	r2, r2, #1
    43da:	d9f7      	bls.n	43cc <_dtoa_r+0x58c>
    43dc:	6461      	str	r1, [r4, #68]	; 0x44
    43de:	4620      	mov	r0, r4
    43e0:	f7ff f926 	bl	3630 <_Balloc>
    43e4:	2d0e      	cmp	r5, #14
    43e6:	9008      	str	r0, [sp, #32]
    43e8:	6420      	str	r0, [r4, #64]	; 0x40
    43ea:	f63f ae26 	bhi.w	403a <_dtoa_r+0x1fa>
    43ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    43f0:	2b00      	cmp	r3, #0
    43f2:	f43f ae22 	beq.w	403a <_dtoa_r+0x1fa>
    43f6:	9902      	ldr	r1, [sp, #8]
    43f8:	2900      	cmp	r1, #0
    43fa:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
    43fe:	f340 8241 	ble.w	4884 <_dtoa_r+0xa44>
    4402:	4bc6      	ldr	r3, [pc, #792]	; (471c <_dtoa_r+0x8dc>)
    4404:	f001 020f 	and.w	r2, r1, #15
    4408:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    440c:	110b      	asrs	r3, r1, #4
    440e:	06de      	lsls	r6, r3, #27
    4410:	ed92 6b00 	vldr	d6, [r2]
    4414:	f140 81fb 	bpl.w	480e <_dtoa_r+0x9ce>
    4418:	4ac1      	ldr	r2, [pc, #772]	; (4720 <_dtoa_r+0x8e0>)
    441a:	ed92 7b08 	vldr	d7, [r2, #32]
    441e:	ec4b ab14 	vmov	d4, sl, fp
    4422:	f003 030f 	and.w	r3, r3, #15
    4426:	2103      	movs	r1, #3
    4428:	ee84 5b07 	vdiv.f64	d5, d4, d7
    442c:	b15b      	cbz	r3, 4446 <_dtoa_r+0x606>
    442e:	4abc      	ldr	r2, [pc, #752]	; (4720 <_dtoa_r+0x8e0>)
    4430:	07dd      	lsls	r5, r3, #31
    4432:	d504      	bpl.n	443e <_dtoa_r+0x5fe>
    4434:	ed92 7b00 	vldr	d7, [r2]
    4438:	3101      	adds	r1, #1
    443a:	ee26 6b07 	vmul.f64	d6, d6, d7
    443e:	105b      	asrs	r3, r3, #1
    4440:	f102 0208 	add.w	r2, r2, #8
    4444:	d1f4      	bne.n	4430 <_dtoa_r+0x5f0>
    4446:	ee85 4b06 	vdiv.f64	d4, d5, d6
    444a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    444c:	b13b      	cbz	r3, 445e <_dtoa_r+0x61e>
    444e:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    4452:	eeb4 4bc7 	vcmpe.f64	d4, d7
    4456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    445a:	f100 82b7 	bmi.w	49cc <_dtoa_r+0xb8c>
    445e:	ee07 1a90 	vmov	s15, r1
    4462:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    4466:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    446a:	eea6 7b04 	vfma.f64	d7, d6, d4
    446e:	ec53 2b17 	vmov	r2, r3, d7
    4472:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
    4476:	2f00      	cmp	r7, #0
    4478:	f000 81a6 	beq.w	47c8 <_dtoa_r+0x988>
    447c:	9e02      	ldr	r6, [sp, #8]
    447e:	4639      	mov	r1, r7
    4480:	9809      	ldr	r0, [sp, #36]	; 0x24
    4482:	2800      	cmp	r0, #0
    4484:	f000 824d 	beq.w	4922 <_dtoa_r+0xae2>
    4488:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
    448c:	48a3      	ldr	r0, [pc, #652]	; (471c <_dtoa_r+0x8dc>)
    448e:	9d08      	ldr	r5, [sp, #32]
    4490:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    4494:	ed10 6b02 	vldr	d6, [r0, #-8]
    4498:	eebd 7bc4 	vcvt.s32.f64	s14, d4
    449c:	ee83 5b06 	vdiv.f64	d5, d3, d6
    44a0:	ee17 0a10 	vmov	r0, s14
    44a4:	ec43 2b16 	vmov	d6, r2, r3
    44a8:	3030      	adds	r0, #48	; 0x30
    44aa:	b2c0      	uxtb	r0, r0
    44ac:	ee35 5b46 	vsub.f64	d5, d5, d6
    44b0:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
    44b4:	ee34 7b47 	vsub.f64	d7, d4, d7
    44b8:	eeb4 5bc7 	vcmpe.f64	d5, d7
    44bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    44c0:	7028      	strb	r0, [r5, #0]
    44c2:	f105 0b01 	add.w	fp, r5, #1
    44c6:	dc32      	bgt.n	452e <_dtoa_r+0x6ee>
    44c8:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
    44cc:	ee33 6b47 	vsub.f64	d6, d3, d7
    44d0:	eeb4 5bc6 	vcmpe.f64	d5, d6
    44d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    44d8:	f300 82ae 	bgt.w	4a38 <_dtoa_r+0xbf8>
    44dc:	2901      	cmp	r1, #1
    44de:	f340 81cd 	ble.w	487c <_dtoa_r+0xa3c>
    44e2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    44e6:	9b08      	ldr	r3, [sp, #32]
    44e8:	4419      	add	r1, r3
    44ea:	e00a      	b.n	4502 <_dtoa_r+0x6c2>
    44ec:	ee33 6b47 	vsub.f64	d6, d3, d7
    44f0:	eeb4 6bc5 	vcmpe.f64	d6, d5
    44f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    44f8:	f100 829e 	bmi.w	4a38 <_dtoa_r+0xbf8>
    44fc:	458b      	cmp	fp, r1
    44fe:	f000 81bd 	beq.w	487c <_dtoa_r+0xa3c>
    4502:	ee27 7b04 	vmul.f64	d7, d7, d4
    4506:	ee25 5b04 	vmul.f64	d5, d5, d4
    450a:	eebd 6bc7 	vcvt.s32.f64	s12, d7
    450e:	ee16 3a10 	vmov	r3, s12
    4512:	f103 0030 	add.w	r0, r3, #48	; 0x30
    4516:	b2c0      	uxtb	r0, r0
    4518:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
    451c:	ee37 7b46 	vsub.f64	d7, d7, d6
    4520:	eeb4 7bc5 	vcmpe.f64	d7, d5
    4524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4528:	f80b 0b01 	strb.w	r0, [fp], #1
    452c:	d5de      	bpl.n	44ec <_dtoa_r+0x6ac>
    452e:	9602      	str	r6, [sp, #8]
    4530:	e5ec      	b.n	410c <_dtoa_r+0x2cc>
    4532:	2300      	movs	r3, #0
    4534:	9309      	str	r3, [sp, #36]	; 0x24
    4536:	f1b8 0f00 	cmp.w	r8, #0
    453a:	f340 8170 	ble.w	481e <_dtoa_r+0x9de>
    453e:	4646      	mov	r6, r8
    4540:	4645      	mov	r5, r8
    4542:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
    4546:	4647      	mov	r7, r8
    4548:	e73a      	b.n	43c0 <_dtoa_r+0x580>
    454a:	2301      	movs	r3, #1
    454c:	9309      	str	r3, [sp, #36]	; 0x24
    454e:	e7f2      	b.n	4536 <_dtoa_r+0x6f6>
    4550:	9507      	str	r5, [sp, #28]
    4552:	9a05      	ldr	r2, [sp, #20]
    4554:	9907      	ldr	r1, [sp, #28]
    4556:	4620      	mov	r0, r4
    4558:	f7ff f9ca 	bl	38f0 <__pow5mult>
    455c:	4605      	mov	r5, r0
    455e:	e677      	b.n	4250 <_dtoa_r+0x410>
    4560:	2f00      	cmp	r7, #0
    4562:	f73f ad79 	bgt.w	4058 <_dtoa_r+0x218>
    4566:	f040 8142 	bne.w	47ee <_dtoa_r+0x9ae>
    456a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
    456e:	ee24 4b07 	vmul.f64	d4, d4, d7
    4572:	ec4b ab17 	vmov	d7, sl, fp
    4576:	eeb4 4bc7 	vcmpe.f64	d4, d7
    457a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    457e:	463e      	mov	r6, r7
    4580:	9705      	str	r7, [sp, #20]
    4582:	f2c0 80e5 	blt.w	4750 <_dtoa_r+0x910>
    4586:	ea6f 0308 	mvn.w	r3, r8
    458a:	f8dd b020 	ldr.w	fp, [sp, #32]
    458e:	9302      	str	r3, [sp, #8]
    4590:	9905      	ldr	r1, [sp, #20]
    4592:	4620      	mov	r0, r4
    4594:	f7ff f872 	bl	367c <_Bfree>
    4598:	2e00      	cmp	r6, #0
    459a:	f43f adb7 	beq.w	410c <_dtoa_r+0x2cc>
    459e:	e6f5      	b.n	438c <_dtoa_r+0x54c>
    45a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    45a2:	2a00      	cmp	r2, #0
    45a4:	f000 8202 	beq.w	49ac <_dtoa_r+0xb6c>
    45a8:	9a05      	ldr	r2, [sp, #20]
    45aa:	920e      	str	r2, [sp, #56]	; 0x38
    45ac:	9a06      	ldr	r2, [sp, #24]
    45ae:	920a      	str	r2, [sp, #40]	; 0x28
    45b0:	f203 4333 	addw	r3, r3, #1075	; 0x433
    45b4:	e5d3      	b.n	415e <_dtoa_r+0x31e>
    45b6:	201c      	movs	r0, #28
    45b8:	e674      	b.n	42a4 <_dtoa_r+0x464>
    45ba:	9b01      	ldr	r3, [sp, #4]
    45bc:	2b01      	cmp	r3, #1
    45be:	f340 8240 	ble.w	4a42 <_dtoa_r+0xc02>
    45c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    45c4:	9307      	str	r3, [sp, #28]
    45c6:	2001      	movs	r0, #1
    45c8:	e660      	b.n	428c <_dtoa_r+0x44c>
    45ca:	4631      	mov	r1, r6
    45cc:	2300      	movs	r3, #0
    45ce:	220a      	movs	r2, #10
    45d0:	4620      	mov	r0, r4
    45d2:	f7ff f85d 	bl	3690 <__multadd>
    45d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    45d8:	2b00      	cmp	r3, #0
    45da:	4606      	mov	r6, r0
    45dc:	f340 824d 	ble.w	4a7a <_dtoa_r+0xc3a>
    45e0:	461f      	mov	r7, r3
    45e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    45e4:	2b00      	cmp	r3, #0
    45e6:	dd05      	ble.n	45f4 <_dtoa_r+0x7b4>
    45e8:	4631      	mov	r1, r6
    45ea:	461a      	mov	r2, r3
    45ec:	4620      	mov	r0, r4
    45ee:	f7ff f9cf 	bl	3990 <__lshift>
    45f2:	4606      	mov	r6, r0
    45f4:	9b07      	ldr	r3, [sp, #28]
    45f6:	2b00      	cmp	r3, #0
    45f8:	f040 816e 	bne.w	48d8 <_dtoa_r+0xa98>
    45fc:	46b0      	mov	r8, r6
    45fe:	9b08      	ldr	r3, [sp, #32]
    4600:	3f01      	subs	r7, #1
    4602:	19da      	adds	r2, r3, r7
    4604:	9209      	str	r2, [sp, #36]	; 0x24
    4606:	f00a 0201 	and.w	r2, sl, #1
    460a:	920a      	str	r2, [sp, #40]	; 0x28
    460c:	461f      	mov	r7, r3
    460e:	f8dd b014 	ldr.w	fp, [sp, #20]
    4612:	4628      	mov	r0, r5
    4614:	4659      	mov	r1, fp
    4616:	f7ff fb7d 	bl	3d14 <quorem>
    461a:	4631      	mov	r1, r6
    461c:	4682      	mov	sl, r0
    461e:	4628      	mov	r0, r5
    4620:	f7ff fa0e 	bl	3a40 <__mcmp>
    4624:	4642      	mov	r2, r8
    4626:	4659      	mov	r1, fp
    4628:	4681      	mov	r9, r0
    462a:	4620      	mov	r0, r4
    462c:	f7ff fa2a 	bl	3a84 <__mdiff>
    4630:	68c3      	ldr	r3, [r0, #12]
    4632:	4683      	mov	fp, r0
    4634:	f10a 0230 	add.w	r2, sl, #48	; 0x30
    4638:	2b00      	cmp	r3, #0
    463a:	d149      	bne.n	46d0 <_dtoa_r+0x890>
    463c:	4601      	mov	r1, r0
    463e:	4628      	mov	r0, r5
    4640:	9207      	str	r2, [sp, #28]
    4642:	f7ff f9fd 	bl	3a40 <__mcmp>
    4646:	4659      	mov	r1, fp
    4648:	9006      	str	r0, [sp, #24]
    464a:	4620      	mov	r0, r4
    464c:	f7ff f816 	bl	367c <_Bfree>
    4650:	9b06      	ldr	r3, [sp, #24]
    4652:	9a07      	ldr	r2, [sp, #28]
    4654:	b92b      	cbnz	r3, 4662 <_dtoa_r+0x822>
    4656:	9901      	ldr	r1, [sp, #4]
    4658:	b919      	cbnz	r1, 4662 <_dtoa_r+0x822>
    465a:	990a      	ldr	r1, [sp, #40]	; 0x28
    465c:	2900      	cmp	r1, #0
    465e:	f000 81f5 	beq.w	4a4c <_dtoa_r+0xc0c>
    4662:	f1b9 0f00 	cmp.w	r9, #0
    4666:	f2c0 80df 	blt.w	4828 <_dtoa_r+0x9e8>
    466a:	d105      	bne.n	4678 <_dtoa_r+0x838>
    466c:	9901      	ldr	r1, [sp, #4]
    466e:	b919      	cbnz	r1, 4678 <_dtoa_r+0x838>
    4670:	990a      	ldr	r1, [sp, #40]	; 0x28
    4672:	2900      	cmp	r1, #0
    4674:	f000 80d8 	beq.w	4828 <_dtoa_r+0x9e8>
    4678:	2b00      	cmp	r3, #0
    467a:	f300 8141 	bgt.w	4900 <_dtoa_r+0xac0>
    467e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4680:	703a      	strb	r2, [r7, #0]
    4682:	f107 0901 	add.w	r9, r7, #1
    4686:	429f      	cmp	r7, r3
    4688:	46cb      	mov	fp, r9
    468a:	f000 8146 	beq.w	491a <_dtoa_r+0xada>
    468e:	4629      	mov	r1, r5
    4690:	2300      	movs	r3, #0
    4692:	220a      	movs	r2, #10
    4694:	4620      	mov	r0, r4
    4696:	f7fe fffb 	bl	3690 <__multadd>
    469a:	4546      	cmp	r6, r8
    469c:	4605      	mov	r5, r0
    469e:	4631      	mov	r1, r6
    46a0:	f04f 0300 	mov.w	r3, #0
    46a4:	f04f 020a 	mov.w	r2, #10
    46a8:	4620      	mov	r0, r4
    46aa:	d00b      	beq.n	46c4 <_dtoa_r+0x884>
    46ac:	f7fe fff0 	bl	3690 <__multadd>
    46b0:	4641      	mov	r1, r8
    46b2:	4606      	mov	r6, r0
    46b4:	2300      	movs	r3, #0
    46b6:	220a      	movs	r2, #10
    46b8:	4620      	mov	r0, r4
    46ba:	f7fe ffe9 	bl	3690 <__multadd>
    46be:	464f      	mov	r7, r9
    46c0:	4680      	mov	r8, r0
    46c2:	e7a4      	b.n	460e <_dtoa_r+0x7ce>
    46c4:	f7fe ffe4 	bl	3690 <__multadd>
    46c8:	464f      	mov	r7, r9
    46ca:	4606      	mov	r6, r0
    46cc:	4680      	mov	r8, r0
    46ce:	e79e      	b.n	460e <_dtoa_r+0x7ce>
    46d0:	4601      	mov	r1, r0
    46d2:	4620      	mov	r0, r4
    46d4:	9206      	str	r2, [sp, #24]
    46d6:	f7fe ffd1 	bl	367c <_Bfree>
    46da:	2301      	movs	r3, #1
    46dc:	9a06      	ldr	r2, [sp, #24]
    46de:	e7c0      	b.n	4662 <_dtoa_r+0x822>
    46e0:	9905      	ldr	r1, [sp, #20]
    46e2:	4628      	mov	r0, r5
    46e4:	f7ff f9ac 	bl	3a40 <__mcmp>
    46e8:	2800      	cmp	r0, #0
    46ea:	f6bf adf8 	bge.w	42de <_dtoa_r+0x49e>
    46ee:	4629      	mov	r1, r5
    46f0:	9d02      	ldr	r5, [sp, #8]
    46f2:	2300      	movs	r3, #0
    46f4:	3d01      	subs	r5, #1
    46f6:	220a      	movs	r2, #10
    46f8:	4620      	mov	r0, r4
    46fa:	9502      	str	r5, [sp, #8]
    46fc:	f7fe ffc8 	bl	3690 <__multadd>
    4700:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4702:	4605      	mov	r5, r0
    4704:	2b00      	cmp	r3, #0
    4706:	f47f af60 	bne.w	45ca <_dtoa_r+0x78a>
    470a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    470c:	2b00      	cmp	r3, #0
    470e:	f340 81ad 	ble.w	4a6c <_dtoa_r+0xc2c>
    4712:	461f      	mov	r7, r3
    4714:	e5ea      	b.n	42ec <_dtoa_r+0x4ac>
    4716:	9d07      	ldr	r5, [sp, #28]
    4718:	e59a      	b.n	4250 <_dtoa_r+0x410>
    471a:	bf00      	nop
    471c:	20000288 	.word	0x20000288
    4720:	20000350 	.word	0x20000350
    4724:	9b01      	ldr	r3, [sp, #4]
    4726:	2b02      	cmp	r3, #2
    4728:	f77f addc 	ble.w	42e4 <_dtoa_r+0x4a4>
    472c:	2f00      	cmp	r7, #0
    472e:	f040 8169 	bne.w	4a04 <_dtoa_r+0xbc4>
    4732:	463b      	mov	r3, r7
    4734:	9905      	ldr	r1, [sp, #20]
    4736:	2205      	movs	r2, #5
    4738:	4620      	mov	r0, r4
    473a:	f7fe ffa9 	bl	3690 <__multadd>
    473e:	4601      	mov	r1, r0
    4740:	9005      	str	r0, [sp, #20]
    4742:	4628      	mov	r0, r5
    4744:	f7ff f97c 	bl	3a40 <__mcmp>
    4748:	2800      	cmp	r0, #0
    474a:	9507      	str	r5, [sp, #28]
    474c:	f77f af1b 	ble.w	4586 <_dtoa_r+0x746>
    4750:	9a02      	ldr	r2, [sp, #8]
    4752:	9908      	ldr	r1, [sp, #32]
    4754:	2331      	movs	r3, #49	; 0x31
    4756:	3201      	adds	r2, #1
    4758:	9202      	str	r2, [sp, #8]
    475a:	700b      	strb	r3, [r1, #0]
    475c:	f101 0b01 	add.w	fp, r1, #1
    4760:	e716      	b.n	4590 <_dtoa_r+0x750>
    4762:	9a02      	ldr	r2, [sp, #8]
    4764:	3201      	adds	r2, #1
    4766:	9202      	str	r2, [sp, #8]
    4768:	9a08      	ldr	r2, [sp, #32]
    476a:	2331      	movs	r3, #49	; 0x31
    476c:	7013      	strb	r3, [r2, #0]
    476e:	e5fd      	b.n	436c <_dtoa_r+0x52c>
    4770:	2301      	movs	r3, #1
    4772:	9309      	str	r3, [sp, #36]	; 0x24
    4774:	e61b      	b.n	43ae <_dtoa_r+0x56e>
    4776:	f1ba 0f00 	cmp.w	sl, #0
    477a:	f47f ad7c 	bne.w	4276 <_dtoa_r+0x436>
    477e:	f3cb 0313 	ubfx	r3, fp, #0, #20
    4782:	2b00      	cmp	r3, #0
    4784:	f040 811b 	bne.w	49be <_dtoa_r+0xb7e>
    4788:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
    478c:	0d1b      	lsrs	r3, r3, #20
    478e:	051b      	lsls	r3, r3, #20
    4790:	2b00      	cmp	r3, #0
    4792:	f000 8154 	beq.w	4a3e <_dtoa_r+0xbfe>
    4796:	9b06      	ldr	r3, [sp, #24]
    4798:	3301      	adds	r3, #1
    479a:	9306      	str	r3, [sp, #24]
    479c:	2301      	movs	r3, #1
    479e:	f109 0901 	add.w	r9, r9, #1
    47a2:	9307      	str	r3, [sp, #28]
    47a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    47a6:	2001      	movs	r0, #1
    47a8:	2b00      	cmp	r3, #0
    47aa:	f43f ad6f 	beq.w	428c <_dtoa_r+0x44c>
    47ae:	e564      	b.n	427a <_dtoa_r+0x43a>
    47b0:	ee07 1a90 	vmov	s15, r1
    47b4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    47b8:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    47bc:	eea4 7b06 	vfma.f64	d7, d4, d6
    47c0:	ec53 2b17 	vmov	r2, r3, d7
    47c4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
    47c8:	ec43 2b16 	vmov	d6, r2, r3
    47cc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
    47d0:	ee34 7b47 	vsub.f64	d7, d4, d7
    47d4:	eeb4 7bc6 	vcmpe.f64	d7, d6
    47d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    47dc:	f300 80dd 	bgt.w	499a <_dtoa_r+0xb5a>
    47e0:	eeb1 6b46 	vneg.f64	d6, d6
    47e4:	eeb4 7bc6 	vcmpe.f64	d7, d6
    47e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    47ec:	d546      	bpl.n	487c <_dtoa_r+0xa3c>
    47ee:	2300      	movs	r3, #0
    47f0:	9305      	str	r3, [sp, #20]
    47f2:	461e      	mov	r6, r3
    47f4:	e6c7      	b.n	4586 <_dtoa_r+0x746>
    47f6:	9808      	ldr	r0, [sp, #32]
    47f8:	f7ff bb59 	b.w	3eae <_dtoa_r+0x6e>
    47fc:	9b05      	ldr	r3, [sp, #20]
    47fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
    4800:	9205      	str	r2, [sp, #20]
    4802:	1ad3      	subs	r3, r2, r3
    4804:	4419      	add	r1, r3
    4806:	2300      	movs	r3, #0
    4808:	910b      	str	r1, [sp, #44]	; 0x2c
    480a:	930e      	str	r3, [sp, #56]	; 0x38
    480c:	e4a1      	b.n	4152 <_dtoa_r+0x312>
    480e:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
    4812:	2102      	movs	r1, #2
    4814:	e60a      	b.n	442c <_dtoa_r+0x5ec>
    4816:	463d      	mov	r5, r7
    4818:	2100      	movs	r1, #0
    481a:	6461      	str	r1, [r4, #68]	; 0x44
    481c:	e5df      	b.n	43de <_dtoa_r+0x59e>
    481e:	2501      	movs	r5, #1
    4820:	950d      	str	r5, [sp, #52]	; 0x34
    4822:	462f      	mov	r7, r5
    4824:	46a8      	mov	r8, r5
    4826:	e7f7      	b.n	4818 <_dtoa_r+0x9d8>
    4828:	2b00      	cmp	r3, #0
    482a:	4691      	mov	r9, r2
    482c:	dd11      	ble.n	4852 <_dtoa_r+0xa12>
    482e:	4629      	mov	r1, r5
    4830:	2201      	movs	r2, #1
    4832:	4620      	mov	r0, r4
    4834:	f7ff f8ac 	bl	3990 <__lshift>
    4838:	9905      	ldr	r1, [sp, #20]
    483a:	4605      	mov	r5, r0
    483c:	f7ff f900 	bl	3a40 <__mcmp>
    4840:	2800      	cmp	r0, #0
    4842:	f340 810c 	ble.w	4a5e <_dtoa_r+0xc1e>
    4846:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    484a:	f000 80dd 	beq.w	4a08 <_dtoa_r+0xbc8>
    484e:	f10a 0931 	add.w	r9, sl, #49	; 0x31
    4852:	46b2      	mov	sl, r6
    4854:	f887 9000 	strb.w	r9, [r7]
    4858:	f107 0b01 	add.w	fp, r7, #1
    485c:	4646      	mov	r6, r8
    485e:	9507      	str	r5, [sp, #28]
    4860:	e584      	b.n	436c <_dtoa_r+0x52c>
    4862:	d104      	bne.n	486e <_dtoa_r+0xa2e>
    4864:	f019 0f01 	tst.w	r9, #1
    4868:	d001      	beq.n	486e <_dtoa_r+0xa2e>
    486a:	e56e      	b.n	434a <_dtoa_r+0x50a>
    486c:	4693      	mov	fp, r2
    486e:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
    4872:	2b30      	cmp	r3, #48	; 0x30
    4874:	f10b 32ff 	add.w	r2, fp, #4294967295
    4878:	d0f8      	beq.n	486c <_dtoa_r+0xa2c>
    487a:	e577      	b.n	436c <_dtoa_r+0x52c>
    487c:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
    4880:	f7ff bbdb 	b.w	403a <_dtoa_r+0x1fa>
    4884:	9b02      	ldr	r3, [sp, #8]
    4886:	425b      	negs	r3, r3
    4888:	2b00      	cmp	r3, #0
    488a:	f000 809b 	beq.w	49c4 <_dtoa_r+0xb84>
    488e:	4a8b      	ldr	r2, [pc, #556]	; (4abc <_dtoa_r+0xc7c>)
    4890:	f003 010f 	and.w	r1, r3, #15
    4894:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    4898:	ed92 7b00 	vldr	d7, [r2]
    489c:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
    48a0:	111b      	asrs	r3, r3, #4
    48a2:	ee26 4b07 	vmul.f64	d4, d6, d7
    48a6:	f000 80e6 	beq.w	4a76 <_dtoa_r+0xc36>
    48aa:	4a85      	ldr	r2, [pc, #532]	; (4ac0 <_dtoa_r+0xc80>)
    48ac:	2102      	movs	r1, #2
    48ae:	07d8      	lsls	r0, r3, #31
    48b0:	d504      	bpl.n	48bc <_dtoa_r+0xa7c>
    48b2:	ed92 7b00 	vldr	d7, [r2]
    48b6:	3101      	adds	r1, #1
    48b8:	ee24 4b07 	vmul.f64	d4, d4, d7
    48bc:	105b      	asrs	r3, r3, #1
    48be:	f102 0208 	add.w	r2, r2, #8
    48c2:	d1f4      	bne.n	48ae <_dtoa_r+0xa6e>
    48c4:	e5c1      	b.n	444a <_dtoa_r+0x60a>
    48c6:	9908      	ldr	r1, [sp, #32]
    48c8:	2230      	movs	r2, #48	; 0x30
    48ca:	700a      	strb	r2, [r1, #0]
    48cc:	9a02      	ldr	r2, [sp, #8]
    48ce:	f81b 0c01 	ldrb.w	r0, [fp, #-1]
    48d2:	3201      	adds	r2, #1
    48d4:	9202      	str	r2, [sp, #8]
    48d6:	e417      	b.n	4108 <_dtoa_r+0x2c8>
    48d8:	6871      	ldr	r1, [r6, #4]
    48da:	4620      	mov	r0, r4
    48dc:	f7fe fea8 	bl	3630 <_Balloc>
    48e0:	6933      	ldr	r3, [r6, #16]
    48e2:	1c9a      	adds	r2, r3, #2
    48e4:	4680      	mov	r8, r0
    48e6:	0092      	lsls	r2, r2, #2
    48e8:	f106 010c 	add.w	r1, r6, #12
    48ec:	300c      	adds	r0, #12
    48ee:	f7fd fdb1 	bl	2454 <memcpy>
    48f2:	4641      	mov	r1, r8
    48f4:	2201      	movs	r2, #1
    48f6:	4620      	mov	r0, r4
    48f8:	f7ff f84a 	bl	3990 <__lshift>
    48fc:	4680      	mov	r8, r0
    48fe:	e67e      	b.n	45fe <_dtoa_r+0x7be>
    4900:	2a39      	cmp	r2, #57	; 0x39
    4902:	f000 8081 	beq.w	4a08 <_dtoa_r+0xbc8>
    4906:	f102 0901 	add.w	r9, r2, #1
    490a:	46b2      	mov	sl, r6
    490c:	f887 9000 	strb.w	r9, [r7]
    4910:	f107 0b01 	add.w	fp, r7, #1
    4914:	4646      	mov	r6, r8
    4916:	9507      	str	r5, [sp, #28]
    4918:	e528      	b.n	436c <_dtoa_r+0x52c>
    491a:	46b2      	mov	sl, r6
    491c:	4691      	mov	r9, r2
    491e:	4646      	mov	r6, r8
    4920:	e507      	b.n	4332 <_dtoa_r+0x4f2>
    4922:	4866      	ldr	r0, [pc, #408]	; (4abc <_dtoa_r+0xc7c>)
    4924:	eebd 6bc4 	vcvt.s32.f64	s12, d4
    4928:	1e4d      	subs	r5, r1, #1
    492a:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
    492e:	ec43 2b17 	vmov	d7, r2, r3
    4932:	ed90 3b00 	vldr	d3, [r0]
    4936:	ee16 3a10 	vmov	r3, s12
    493a:	ee23 3b07 	vmul.f64	d3, d3, d7
    493e:	9808      	ldr	r0, [sp, #32]
    4940:	3330      	adds	r3, #48	; 0x30
    4942:	2901      	cmp	r1, #1
    4944:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
    4948:	7003      	strb	r3, [r0, #0]
    494a:	f100 0b01 	add.w	fp, r0, #1
    494e:	ee34 7b46 	vsub.f64	d7, d4, d6
    4952:	d014      	beq.n	497e <_dtoa_r+0xb3e>
    4954:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
    4958:	9b08      	ldr	r3, [sp, #32]
    495a:	4419      	add	r1, r3
    495c:	465b      	mov	r3, fp
    495e:	ee27 7b05 	vmul.f64	d7, d7, d5
    4962:	eebd 6bc7 	vcvt.s32.f64	s12, d7
    4966:	ee16 2a10 	vmov	r2, s12
    496a:	3230      	adds	r2, #48	; 0x30
    496c:	f803 2b01 	strb.w	r2, [r3], #1
    4970:	4299      	cmp	r1, r3
    4972:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
    4976:	ee37 7b46 	vsub.f64	d7, d7, d6
    497a:	d1f0      	bne.n	495e <_dtoa_r+0xb1e>
    497c:	44ab      	add	fp, r5
    497e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    4982:	ee33 5b06 	vadd.f64	d5, d3, d6
    4986:	eeb4 5bc7 	vcmpe.f64	d5, d7
    498a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    498e:	d543      	bpl.n	4a18 <_dtoa_r+0xbd8>
    4990:	9602      	str	r6, [sp, #8]
    4992:	f81b 0c01 	ldrb.w	r0, [fp, #-1]
    4996:	f7ff bbaa 	b.w	40ee <_dtoa_r+0x2ae>
    499a:	2300      	movs	r3, #0
    499c:	9305      	str	r3, [sp, #20]
    499e:	461e      	mov	r6, r3
    49a0:	e6d6      	b.n	4750 <_dtoa_r+0x910>
    49a2:	1bdb      	subs	r3, r3, r7
    49a4:	930a      	str	r3, [sp, #40]	; 0x28
    49a6:	2300      	movs	r3, #0
    49a8:	f7ff bbd9 	b.w	415e <_dtoa_r+0x31e>
    49ac:	9a05      	ldr	r2, [sp, #20]
    49ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
    49b0:	920e      	str	r2, [sp, #56]	; 0x38
    49b2:	9a06      	ldr	r2, [sp, #24]
    49b4:	920a      	str	r2, [sp, #40]	; 0x28
    49b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    49ba:	f7ff bbd0 	b.w	415e <_dtoa_r+0x31e>
    49be:	2300      	movs	r3, #0
    49c0:	9307      	str	r3, [sp, #28]
    49c2:	e6ef      	b.n	47a4 <_dtoa_r+0x964>
    49c4:	ed9d 4b0e 	vldr	d4, [sp, #56]	; 0x38
    49c8:	2102      	movs	r1, #2
    49ca:	e53e      	b.n	444a <_dtoa_r+0x60a>
    49cc:	2f00      	cmp	r7, #0
    49ce:	f43f aeef 	beq.w	47b0 <_dtoa_r+0x970>
    49d2:	980d      	ldr	r0, [sp, #52]	; 0x34
    49d4:	2800      	cmp	r0, #0
    49d6:	f77f af51 	ble.w	487c <_dtoa_r+0xa3c>
    49da:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
    49de:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    49e2:	3101      	adds	r1, #1
    49e4:	ee06 1a90 	vmov	s13, r1
    49e8:	ee24 4b05 	vmul.f64	d4, d4, d5
    49ec:	9b02      	ldr	r3, [sp, #8]
    49ee:	eeb8 6be6 	vcvt.f64.s32	d6, s13
    49f2:	1e5e      	subs	r6, r3, #1
    49f4:	eea4 7b06 	vfma.f64	d7, d4, d6
    49f8:	ec53 2b17 	vmov	r2, r3, d7
    49fc:	4601      	mov	r1, r0
    49fe:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
    4a02:	e53d      	b.n	4480 <_dtoa_r+0x640>
    4a04:	9507      	str	r5, [sp, #28]
    4a06:	e5be      	b.n	4586 <_dtoa_r+0x746>
    4a08:	2239      	movs	r2, #57	; 0x39
    4a0a:	46b2      	mov	sl, r6
    4a0c:	9507      	str	r5, [sp, #28]
    4a0e:	4646      	mov	r6, r8
    4a10:	703a      	strb	r2, [r7, #0]
    4a12:	f107 0b01 	add.w	fp, r7, #1
    4a16:	e49a      	b.n	434e <_dtoa_r+0x50e>
    4a18:	ee36 6b43 	vsub.f64	d6, d6, d3
    4a1c:	eeb4 6bc7 	vcmpe.f64	d6, d7
    4a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4a24:	dc01      	bgt.n	4a2a <_dtoa_r+0xbea>
    4a26:	e729      	b.n	487c <_dtoa_r+0xa3c>
    4a28:	4693      	mov	fp, r2
    4a2a:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
    4a2e:	2b30      	cmp	r3, #48	; 0x30
    4a30:	f10b 32ff 	add.w	r2, fp, #4294967295
    4a34:	d0f8      	beq.n	4a28 <_dtoa_r+0xbe8>
    4a36:	e57a      	b.n	452e <_dtoa_r+0x6ee>
    4a38:	9602      	str	r6, [sp, #8]
    4a3a:	f7ff bb58 	b.w	40ee <_dtoa_r+0x2ae>
    4a3e:	9307      	str	r3, [sp, #28]
    4a40:	e6b0      	b.n	47a4 <_dtoa_r+0x964>
    4a42:	f1ba 0f00 	cmp.w	sl, #0
    4a46:	f47f adbc 	bne.w	45c2 <_dtoa_r+0x782>
    4a4a:	e698      	b.n	477e <_dtoa_r+0x93e>
    4a4c:	2a39      	cmp	r2, #57	; 0x39
    4a4e:	46cb      	mov	fp, r9
    4a50:	4691      	mov	r9, r2
    4a52:	d0d9      	beq.n	4a08 <_dtoa_r+0xbc8>
    4a54:	f1bb 0f00 	cmp.w	fp, #0
    4a58:	f73f aef9 	bgt.w	484e <_dtoa_r+0xa0e>
    4a5c:	e6f9      	b.n	4852 <_dtoa_r+0xa12>
    4a5e:	f47f aef8 	bne.w	4852 <_dtoa_r+0xa12>
    4a62:	f019 0f01 	tst.w	r9, #1
    4a66:	f43f aef4 	beq.w	4852 <_dtoa_r+0xa12>
    4a6a:	e6ec      	b.n	4846 <_dtoa_r+0xa06>
    4a6c:	9b01      	ldr	r3, [sp, #4]
    4a6e:	2b02      	cmp	r3, #2
    4a70:	dc08      	bgt.n	4a84 <_dtoa_r+0xc44>
    4a72:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    4a74:	e43a      	b.n	42ec <_dtoa_r+0x4ac>
    4a76:	2102      	movs	r1, #2
    4a78:	e4e7      	b.n	444a <_dtoa_r+0x60a>
    4a7a:	9b01      	ldr	r3, [sp, #4]
    4a7c:	2b02      	cmp	r3, #2
    4a7e:	dc01      	bgt.n	4a84 <_dtoa_r+0xc44>
    4a80:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    4a82:	e5ae      	b.n	45e2 <_dtoa_r+0x7a2>
    4a84:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    4a86:	e651      	b.n	472c <_dtoa_r+0x8ec>
    4a88:	2301      	movs	r3, #1
    4a8a:	930e      	str	r3, [sp, #56]	; 0x38
    4a8c:	f7ff baa1 	b.w	3fd2 <_dtoa_r+0x192>
    4a90:	f43f ac0f 	beq.w	42b2 <_dtoa_r+0x472>
    4a94:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
    4a98:	e404      	b.n	42a4 <_dtoa_r+0x464>
    4a9a:	2500      	movs	r5, #0
    4a9c:	6465      	str	r5, [r4, #68]	; 0x44
    4a9e:	4629      	mov	r1, r5
    4aa0:	4620      	mov	r0, r4
    4aa2:	f7fe fdc5 	bl	3630 <_Balloc>
    4aa6:	f04f 37ff 	mov.w	r7, #4294967295
    4aaa:	2301      	movs	r3, #1
    4aac:	9008      	str	r0, [sp, #32]
    4aae:	46a8      	mov	r8, r5
    4ab0:	6420      	str	r0, [r4, #64]	; 0x40
    4ab2:	970d      	str	r7, [sp, #52]	; 0x34
    4ab4:	9309      	str	r3, [sp, #36]	; 0x24
    4ab6:	f7ff bac0 	b.w	403a <_dtoa_r+0x1fa>
    4aba:	bf00      	nop
    4abc:	20000288 	.word	0x20000288
    4ac0:	20000350 	.word	0x20000350
    4ac4:	00000000 	.word	0x00000000

00004ac8 <_svfprintf_r>:
    4ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4acc:	ed2d 8b06 	vpush	{d8-d10}
    4ad0:	b0b9      	sub	sp, #228	; 0xe4
    4ad2:	460c      	mov	r4, r1
    4ad4:	9103      	str	r1, [sp, #12]
    4ad6:	4692      	mov	sl, r2
    4ad8:	9309      	str	r3, [sp, #36]	; 0x24
    4ada:	9005      	str	r0, [sp, #20]
    4adc:	f7fe fd4a 	bl	3574 <_localeconv_r>
    4ae0:	6803      	ldr	r3, [r0, #0]
    4ae2:	9310      	str	r3, [sp, #64]	; 0x40
    4ae4:	4618      	mov	r0, r3
    4ae6:	f7fe fb4b 	bl	3180 <strlen>
    4aea:	89a3      	ldrh	r3, [r4, #12]
    4aec:	900f      	str	r0, [sp, #60]	; 0x3c
    4aee:	0619      	lsls	r1, r3, #24
    4af0:	d503      	bpl.n	4afa <_svfprintf_r+0x32>
    4af2:	6923      	ldr	r3, [r4, #16]
    4af4:	2b00      	cmp	r3, #0
    4af6:	f001 807d 	beq.w	5bf4 <_svfprintf_r+0x112c>
    4afa:	2300      	movs	r3, #0
    4afc:	ed9f 8ba4 	vldr	d8, [pc, #656]	; 4d90 <_svfprintf_r+0x2c8>
    4b00:	ed9f 9ba5 	vldr	d9, [pc, #660]	; 4d98 <_svfprintf_r+0x2d0>
    4b04:	930d      	str	r3, [sp, #52]	; 0x34
    4b06:	931d      	str	r3, [sp, #116]	; 0x74
    4b08:	931c      	str	r3, [sp, #112]	; 0x70
    4b0a:	9311      	str	r3, [sp, #68]	; 0x44
    4b0c:	9306      	str	r3, [sp, #24]
    4b0e:	ab28      	add	r3, sp, #160	; 0xa0
    4b10:	931b      	str	r3, [sp, #108]	; 0x6c
    4b12:	4699      	mov	r9, r3
    4b14:	f89a 3000 	ldrb.w	r3, [sl]
    4b18:	4654      	mov	r4, sl
    4b1a:	b1eb      	cbz	r3, 4b58 <_svfprintf_r+0x90>
    4b1c:	2b25      	cmp	r3, #37	; 0x25
    4b1e:	d102      	bne.n	4b26 <_svfprintf_r+0x5e>
    4b20:	e01a      	b.n	4b58 <_svfprintf_r+0x90>
    4b22:	2b25      	cmp	r3, #37	; 0x25
    4b24:	d003      	beq.n	4b2e <_svfprintf_r+0x66>
    4b26:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    4b2a:	2b00      	cmp	r3, #0
    4b2c:	d1f9      	bne.n	4b22 <_svfprintf_r+0x5a>
    4b2e:	ebca 0504 	rsb	r5, sl, r4
    4b32:	b18d      	cbz	r5, 4b58 <_svfprintf_r+0x90>
    4b34:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    4b36:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    4b38:	f8c9 a000 	str.w	sl, [r9]
    4b3c:	3301      	adds	r3, #1
    4b3e:	442a      	add	r2, r5
    4b40:	2b07      	cmp	r3, #7
    4b42:	f8c9 5004 	str.w	r5, [r9, #4]
    4b46:	921d      	str	r2, [sp, #116]	; 0x74
    4b48:	931c      	str	r3, [sp, #112]	; 0x70
    4b4a:	f300 80a3 	bgt.w	4c94 <_svfprintf_r+0x1cc>
    4b4e:	f109 0908 	add.w	r9, r9, #8
    4b52:	9b06      	ldr	r3, [sp, #24]
    4b54:	442b      	add	r3, r5
    4b56:	9306      	str	r3, [sp, #24]
    4b58:	7823      	ldrb	r3, [r4, #0]
    4b5a:	2b00      	cmp	r3, #0
    4b5c:	f000 80a3 	beq.w	4ca6 <_svfprintf_r+0x1de>
    4b60:	2300      	movs	r3, #0
    4b62:	461a      	mov	r2, r3
    4b64:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
    4b68:	4619      	mov	r1, r3
    4b6a:	9307      	str	r3, [sp, #28]
    4b6c:	469b      	mov	fp, r3
    4b6e:	f04f 38ff 	mov.w	r8, #4294967295
    4b72:	7863      	ldrb	r3, [r4, #1]
    4b74:	f104 0a01 	add.w	sl, r4, #1
    4b78:	4645      	mov	r5, r8
    4b7a:	f10a 0a01 	add.w	sl, sl, #1
    4b7e:	f1a3 0020 	sub.w	r0, r3, #32
    4b82:	2858      	cmp	r0, #88	; 0x58
    4b84:	f200 83f8 	bhi.w	5378 <_svfprintf_r+0x8b0>
    4b88:	e8df f010 	tbh	[pc, r0, lsl #1]
    4b8c:	03f60363 	.word	0x03f60363
    4b90:	036b03f6 	.word	0x036b03f6
    4b94:	03f603f6 	.word	0x03f603f6
    4b98:	03f603f6 	.word	0x03f603f6
    4b9c:	03f603f6 	.word	0x03f603f6
    4ba0:	037e0370 	.word	0x037e0370
    4ba4:	005d03f6 	.word	0x005d03f6
    4ba8:	03f600df 	.word	0x03f600df
    4bac:	010c00fb 	.word	0x010c00fb
    4bb0:	010c010c 	.word	0x010c010c
    4bb4:	010c010c 	.word	0x010c010c
    4bb8:	010c010c 	.word	0x010c010c
    4bbc:	010c010c 	.word	0x010c010c
    4bc0:	03f603f6 	.word	0x03f603f6
    4bc4:	03f603f6 	.word	0x03f603f6
    4bc8:	03f603f6 	.word	0x03f603f6
    4bcc:	03f603f6 	.word	0x03f603f6
    4bd0:	03f603f6 	.word	0x03f603f6
    4bd4:	015e011c 	.word	0x015e011c
    4bd8:	015e03f6 	.word	0x015e03f6
    4bdc:	03f603f6 	.word	0x03f603f6
    4be0:	03f603f6 	.word	0x03f603f6
    4be4:	03f602a1 	.word	0x03f602a1
    4be8:	02a603f6 	.word	0x02a603f6
    4bec:	03f603f6 	.word	0x03f603f6
    4bf0:	03f603f6 	.word	0x03f603f6
    4bf4:	02d803f6 	.word	0x02d803f6
    4bf8:	03f603f6 	.word	0x03f603f6
    4bfc:	03f60305 	.word	0x03f60305
    4c00:	03f603f6 	.word	0x03f603f6
    4c04:	03f603f6 	.word	0x03f603f6
    4c08:	03f603f6 	.word	0x03f603f6
    4c0c:	03f603f6 	.word	0x03f603f6
    4c10:	034303f6 	.word	0x034303f6
    4c14:	015e0356 	.word	0x015e0356
    4c18:	015e015e 	.word	0x015e015e
    4c1c:	0356035e 	.word	0x0356035e
    4c20:	03f603f6 	.word	0x03f603f6
    4c24:	03f603a4 	.word	0x03f603a4
    4c28:	00a203b1 	.word	0x00a203b1
    4c2c:	03c30062 	.word	0x03c30062
    4c30:	03c803f6 	.word	0x03c803f6
    4c34:	038303f6 	.word	0x038303f6
    4c38:	03f603f6 	.word	0x03f603f6
    4c3c:	038b      	.short	0x038b
    4c3e:	9807      	ldr	r0, [sp, #28]
    4c40:	9309      	str	r3, [sp, #36]	; 0x24
    4c42:	4240      	negs	r0, r0
    4c44:	9007      	str	r0, [sp, #28]
    4c46:	f04b 0b04 	orr.w	fp, fp, #4
    4c4a:	f89a 3000 	ldrb.w	r3, [sl]
    4c4e:	e794      	b.n	4b7a <_svfprintf_r+0xb2>
    4c50:	46a8      	mov	r8, r5
    4c52:	9809      	ldr	r0, [sp, #36]	; 0x24
    4c54:	2100      	movs	r1, #0
    4c56:	2330      	movs	r3, #48	; 0x30
    4c58:	2278      	movs	r2, #120	; 0x78
    4c5a:	4588      	cmp	r8, r1
    4c5c:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
    4c60:	6804      	ldr	r4, [r0, #0]
    4c62:	f88d 2051 	strb.w	r2, [sp, #81]	; 0x51
    4c66:	f100 0704 	add.w	r7, r0, #4
    4c6a:	f04f 0500 	mov.w	r5, #0
    4c6e:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    4c72:	f04b 0302 	orr.w	r3, fp, #2
    4c76:	f2c0 839c 	blt.w	53b2 <_svfprintf_r+0x8ea>
    4c7a:	f02b 0380 	bic.w	r3, fp, #128	; 0x80
    4c7e:	f043 0b02 	orr.w	fp, r3, #2
    4c82:	ea54 0305 	orrs.w	r3, r4, r5
    4c86:	9709      	str	r7, [sp, #36]	; 0x24
    4c88:	f000 8369 	beq.w	535e <_svfprintf_r+0x896>
    4c8c:	460f      	mov	r7, r1
    4c8e:	920c      	str	r2, [sp, #48]	; 0x30
    4c90:	4843      	ldr	r0, [pc, #268]	; (4da0 <_svfprintf_r+0x2d8>)
    4c92:	e2ae      	b.n	51f2 <_svfprintf_r+0x72a>
    4c94:	aa1b      	add	r2, sp, #108	; 0x6c
    4c96:	9903      	ldr	r1, [sp, #12]
    4c98:	9805      	ldr	r0, [sp, #20]
    4c9a:	f001 f9cd 	bl	6038 <__ssprint_r>
    4c9e:	b948      	cbnz	r0, 4cb4 <_svfprintf_r+0x1ec>
    4ca0:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    4ca4:	e755      	b.n	4b52 <_svfprintf_r+0x8a>
    4ca6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    4ca8:	b123      	cbz	r3, 4cb4 <_svfprintf_r+0x1ec>
    4caa:	9805      	ldr	r0, [sp, #20]
    4cac:	9903      	ldr	r1, [sp, #12]
    4cae:	aa1b      	add	r2, sp, #108	; 0x6c
    4cb0:	f001 f9c2 	bl	6038 <__ssprint_r>
    4cb4:	9b03      	ldr	r3, [sp, #12]
    4cb6:	899b      	ldrh	r3, [r3, #12]
    4cb8:	f013 0f40 	tst.w	r3, #64	; 0x40
    4cbc:	9b06      	ldr	r3, [sp, #24]
    4cbe:	bf18      	it	ne
    4cc0:	f04f 33ff 	movne.w	r3, #4294967295
    4cc4:	4618      	mov	r0, r3
    4cc6:	b039      	add	sp, #228	; 0xe4
    4cc8:	ecbd 8b06 	vpop	{d8-d10}
    4ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4cd0:	930c      	str	r3, [sp, #48]	; 0x30
    4cd2:	46a8      	mov	r8, r5
    4cd4:	2a00      	cmp	r2, #0
    4cd6:	f041 819a 	bne.w	600e <_svfprintf_r+0x1546>
    4cda:	f01b 0320 	ands.w	r3, fp, #32
    4cde:	f000 8206 	beq.w	50ee <_svfprintf_r+0x626>
    4ce2:	9f09      	ldr	r7, [sp, #36]	; 0x24
    4ce4:	3707      	adds	r7, #7
    4ce6:	f027 0307 	bic.w	r3, r7, #7
    4cea:	2700      	movs	r7, #0
    4cec:	f103 0208 	add.w	r2, r3, #8
    4cf0:	45b8      	cmp	r8, r7
    4cf2:	9209      	str	r2, [sp, #36]	; 0x24
    4cf4:	e9d3 4500 	ldrd	r4, r5, [r3]
    4cf8:	f88d 704f 	strb.w	r7, [sp, #79]	; 0x4f
    4cfc:	f2c0 865e 	blt.w	59bc <_svfprintf_r+0xef4>
    4d00:	ea54 0305 	orrs.w	r3, r4, r5
    4d04:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    4d08:	f000 834b 	beq.w	53a2 <_svfprintf_r+0x8da>
    4d0c:	ae28      	add	r6, sp, #160	; 0xa0
    4d0e:	08e2      	lsrs	r2, r4, #3
    4d10:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
    4d14:	08e9      	lsrs	r1, r5, #3
    4d16:	f004 0307 	and.w	r3, r4, #7
    4d1a:	460d      	mov	r5, r1
    4d1c:	4614      	mov	r4, r2
    4d1e:	3330      	adds	r3, #48	; 0x30
    4d20:	ea54 0205 	orrs.w	r2, r4, r5
    4d24:	f806 3d01 	strb.w	r3, [r6, #-1]!
    4d28:	d1f1      	bne.n	4d0e <_svfprintf_r+0x246>
    4d2a:	f01b 0f01 	tst.w	fp, #1
    4d2e:	f000 8227 	beq.w	5180 <_svfprintf_r+0x6b8>
    4d32:	2b30      	cmp	r3, #48	; 0x30
    4d34:	f000 8224 	beq.w	5180 <_svfprintf_r+0x6b8>
    4d38:	2230      	movs	r2, #48	; 0x30
    4d3a:	1e73      	subs	r3, r6, #1
    4d3c:	f806 2c01 	strb.w	r2, [r6, #-1]
    4d40:	aa28      	add	r2, sp, #160	; 0xa0
    4d42:	1ad2      	subs	r2, r2, r3
    4d44:	9208      	str	r2, [sp, #32]
    4d46:	461e      	mov	r6, r3
    4d48:	e21d      	b.n	5186 <_svfprintf_r+0x6be>
    4d4a:	f89a 3000 	ldrb.w	r3, [sl]
    4d4e:	2b2a      	cmp	r3, #42	; 0x2a
    4d50:	f10a 0401 	add.w	r4, sl, #1
    4d54:	f001 812f 	beq.w	5fb6 <_svfprintf_r+0x14ee>
    4d58:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    4d5c:	2809      	cmp	r0, #9
    4d5e:	bf98      	it	ls
    4d60:	2500      	movls	r5, #0
    4d62:	f201 80d5 	bhi.w	5f10 <_svfprintf_r+0x1448>
    4d66:	f814 3b01 	ldrb.w	r3, [r4], #1
    4d6a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    4d6e:	eb00 0545 	add.w	r5, r0, r5, lsl #1
    4d72:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    4d76:	2809      	cmp	r0, #9
    4d78:	d9f5      	bls.n	4d66 <_svfprintf_r+0x29e>
    4d7a:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
    4d7e:	46a2      	mov	sl, r4
    4d80:	e6fd      	b.n	4b7e <_svfprintf_r+0xb6>
    4d82:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
    4d86:	f89a 3000 	ldrb.w	r3, [sl]
    4d8a:	e6f6      	b.n	4b7a <_svfprintf_r+0xb2>
    4d8c:	f3af 8000 	nop.w
	...
    4d98:	ffffffff 	.word	0xffffffff
    4d9c:	7fefffff 	.word	0x7fefffff
    4da0:	200003cc 	.word	0x200003cc
    4da4:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    4da8:	2300      	movs	r3, #0
    4daa:	461c      	mov	r4, r3
    4dac:	f81a 3b01 	ldrb.w	r3, [sl], #1
    4db0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    4db4:	eb00 0444 	add.w	r4, r0, r4, lsl #1
    4db8:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    4dbc:	2809      	cmp	r0, #9
    4dbe:	d9f5      	bls.n	4dac <_svfprintf_r+0x2e4>
    4dc0:	9407      	str	r4, [sp, #28]
    4dc2:	e6dc      	b.n	4b7e <_svfprintf_r+0xb6>
    4dc4:	930c      	str	r3, [sp, #48]	; 0x30
    4dc6:	46a8      	mov	r8, r5
    4dc8:	2a00      	cmp	r2, #0
    4dca:	f041 812c 	bne.w	6026 <_svfprintf_r+0x155e>
    4dce:	f04b 0b10 	orr.w	fp, fp, #16
    4dd2:	f01b 0f20 	tst.w	fp, #32
    4dd6:	f000 8503 	beq.w	57e0 <_svfprintf_r+0xd18>
    4dda:	9f09      	ldr	r7, [sp, #36]	; 0x24
    4ddc:	3707      	adds	r7, #7
    4dde:	f027 0707 	bic.w	r7, r7, #7
    4de2:	e9d7 2300 	ldrd	r2, r3, [r7]
    4de6:	f107 0108 	add.w	r1, r7, #8
    4dea:	9109      	str	r1, [sp, #36]	; 0x24
    4dec:	4614      	mov	r4, r2
    4dee:	461d      	mov	r5, r3
    4df0:	2a00      	cmp	r2, #0
    4df2:	f173 0300 	sbcs.w	r3, r3, #0
    4df6:	f2c0 8537 	blt.w	5868 <_svfprintf_r+0xda0>
    4dfa:	f1b8 0f00 	cmp.w	r8, #0
    4dfe:	f89d 704f 	ldrb.w	r7, [sp, #79]	; 0x4f
    4e02:	f2c0 81b5 	blt.w	5170 <_svfprintf_r+0x6a8>
    4e06:	ea54 0305 	orrs.w	r3, r4, r5
    4e0a:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    4e0e:	f000 83f6 	beq.w	55fe <_svfprintf_r+0xb36>
    4e12:	2d00      	cmp	r5, #0
    4e14:	bf08      	it	eq
    4e16:	2c0a      	cmpeq	r4, #10
    4e18:	f0c0 81ae 	bcc.w	5178 <_svfprintf_r+0x6b0>
    4e1c:	ae28      	add	r6, sp, #160	; 0xa0
    4e1e:	4620      	mov	r0, r4
    4e20:	4629      	mov	r1, r5
    4e22:	220a      	movs	r2, #10
    4e24:	2300      	movs	r3, #0
    4e26:	f001 f987 	bl	6138 <__aeabi_uldivmod>
    4e2a:	3230      	adds	r2, #48	; 0x30
    4e2c:	f806 2d01 	strb.w	r2, [r6, #-1]!
    4e30:	4620      	mov	r0, r4
    4e32:	4629      	mov	r1, r5
    4e34:	2300      	movs	r3, #0
    4e36:	220a      	movs	r2, #10
    4e38:	f001 f97e 	bl	6138 <__aeabi_uldivmod>
    4e3c:	4604      	mov	r4, r0
    4e3e:	460d      	mov	r5, r1
    4e40:	ea54 0305 	orrs.w	r3, r4, r5
    4e44:	d1eb      	bne.n	4e1e <_svfprintf_r+0x356>
    4e46:	e19b      	b.n	5180 <_svfprintf_r+0x6b8>
    4e48:	930c      	str	r3, [sp, #48]	; 0x30
    4e4a:	46a8      	mov	r8, r5
    4e4c:	2a00      	cmp	r2, #0
    4e4e:	f041 80e6 	bne.w	601e <_svfprintf_r+0x1556>
    4e52:	9f09      	ldr	r7, [sp, #36]	; 0x24
    4e54:	f01b 0f08 	tst.w	fp, #8
    4e58:	f107 0707 	add.w	r7, r7, #7
    4e5c:	f000 8640 	beq.w	5ae0 <_svfprintf_r+0x1018>
    4e60:	f027 0307 	bic.w	r3, r7, #7
    4e64:	ed93 8b00 	vldr	d8, [r3]
    4e68:	f103 0208 	add.w	r2, r3, #8
    4e6c:	9209      	str	r2, [sp, #36]	; 0x24
    4e6e:	eeb0 7bc8 	vabs.f64	d7, d8
    4e72:	eeb4 7b49 	vcmp.f64	d7, d9
    4e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4e7a:	f340 85bc 	ble.w	59f6 <_svfprintf_r+0xf2e>
    4e7e:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
    4e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4e86:	f100 87ca 	bmi.w	5e1e <_svfprintf_r+0x1356>
    4e8a:	f89d 704f 	ldrb.w	r7, [sp, #79]	; 0x4f
    4e8e:	4ea7      	ldr	r6, [pc, #668]	; (512c <_svfprintf_r+0x664>)
    4e90:	4ba7      	ldr	r3, [pc, #668]	; (5130 <_svfprintf_r+0x668>)
    4e92:	990c      	ldr	r1, [sp, #48]	; 0x30
    4e94:	2203      	movs	r2, #3
    4e96:	f04f 0800 	mov.w	r8, #0
    4e9a:	9204      	str	r2, [sp, #16]
    4e9c:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    4ea0:	2947      	cmp	r1, #71	; 0x47
    4ea2:	bfd8      	it	le
    4ea4:	461e      	movle	r6, r3
    4ea6:	9208      	str	r2, [sp, #32]
    4ea8:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
    4eac:	b117      	cbz	r7, 4eb4 <_svfprintf_r+0x3ec>
    4eae:	9b04      	ldr	r3, [sp, #16]
    4eb0:	3301      	adds	r3, #1
    4eb2:	9304      	str	r3, [sp, #16]
    4eb4:	f01b 0302 	ands.w	r3, fp, #2
    4eb8:	930a      	str	r3, [sp, #40]	; 0x28
    4eba:	d002      	beq.n	4ec2 <_svfprintf_r+0x3fa>
    4ebc:	9b04      	ldr	r3, [sp, #16]
    4ebe:	3302      	adds	r3, #2
    4ec0:	9304      	str	r3, [sp, #16]
    4ec2:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
    4ec6:	930b      	str	r3, [sp, #44]	; 0x2c
    4ec8:	f040 8280 	bne.w	53cc <_svfprintf_r+0x904>
    4ecc:	9b07      	ldr	r3, [sp, #28]
    4ece:	9a04      	ldr	r2, [sp, #16]
    4ed0:	1a9c      	subs	r4, r3, r2
    4ed2:	2c00      	cmp	r4, #0
    4ed4:	f340 827a 	ble.w	53cc <_svfprintf_r+0x904>
    4ed8:	2c10      	cmp	r4, #16
    4eda:	991d      	ldr	r1, [sp, #116]	; 0x74
    4edc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    4ede:	4f95      	ldr	r7, [pc, #596]	; (5134 <_svfprintf_r+0x66c>)
    4ee0:	dd23      	ble.n	4f2a <_svfprintf_r+0x462>
    4ee2:	4648      	mov	r0, r9
    4ee4:	2510      	movs	r5, #16
    4ee6:	46c1      	mov	r9, r8
    4ee8:	46b0      	mov	r8, r6
    4eea:	9e05      	ldr	r6, [sp, #20]
    4eec:	e004      	b.n	4ef8 <_svfprintf_r+0x430>
    4eee:	3c10      	subs	r4, #16
    4ef0:	2c10      	cmp	r4, #16
    4ef2:	f100 0008 	add.w	r0, r0, #8
    4ef6:	dd15      	ble.n	4f24 <_svfprintf_r+0x45c>
    4ef8:	3201      	adds	r2, #1
    4efa:	3110      	adds	r1, #16
    4efc:	2a07      	cmp	r2, #7
    4efe:	911d      	str	r1, [sp, #116]	; 0x74
    4f00:	921c      	str	r2, [sp, #112]	; 0x70
    4f02:	6007      	str	r7, [r0, #0]
    4f04:	6045      	str	r5, [r0, #4]
    4f06:	ddf2      	ble.n	4eee <_svfprintf_r+0x426>
    4f08:	aa1b      	add	r2, sp, #108	; 0x6c
    4f0a:	9903      	ldr	r1, [sp, #12]
    4f0c:	4630      	mov	r0, r6
    4f0e:	f001 f893 	bl	6038 <__ssprint_r>
    4f12:	2800      	cmp	r0, #0
    4f14:	f47f aece 	bne.w	4cb4 <_svfprintf_r+0x1ec>
    4f18:	3c10      	subs	r4, #16
    4f1a:	2c10      	cmp	r4, #16
    4f1c:	991d      	ldr	r1, [sp, #116]	; 0x74
    4f1e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    4f20:	a828      	add	r0, sp, #160	; 0xa0
    4f22:	dce9      	bgt.n	4ef8 <_svfprintf_r+0x430>
    4f24:	4646      	mov	r6, r8
    4f26:	46c8      	mov	r8, r9
    4f28:	4681      	mov	r9, r0
    4f2a:	3201      	adds	r2, #1
    4f2c:	1863      	adds	r3, r4, r1
    4f2e:	2a07      	cmp	r2, #7
    4f30:	931d      	str	r3, [sp, #116]	; 0x74
    4f32:	921c      	str	r2, [sp, #112]	; 0x70
    4f34:	f8c9 7000 	str.w	r7, [r9]
    4f38:	f8c9 4004 	str.w	r4, [r9, #4]
    4f3c:	f300 83e2 	bgt.w	5704 <_svfprintf_r+0xc3c>
    4f40:	f89d 704f 	ldrb.w	r7, [sp, #79]	; 0x4f
    4f44:	f109 0908 	add.w	r9, r9, #8
    4f48:	b177      	cbz	r7, 4f68 <_svfprintf_r+0x4a0>
    4f4a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    4f4c:	3201      	adds	r2, #1
    4f4e:	3301      	adds	r3, #1
    4f50:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
    4f54:	2101      	movs	r1, #1
    4f56:	2a07      	cmp	r2, #7
    4f58:	931d      	str	r3, [sp, #116]	; 0x74
    4f5a:	921c      	str	r2, [sp, #112]	; 0x70
    4f5c:	e889 0003 	stmia.w	r9, {r0, r1}
    4f60:	f300 835f 	bgt.w	5622 <_svfprintf_r+0xb5a>
    4f64:	f109 0908 	add.w	r9, r9, #8
    4f68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4f6a:	b16a      	cbz	r2, 4f88 <_svfprintf_r+0x4c0>
    4f6c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    4f6e:	3201      	adds	r2, #1
    4f70:	3302      	adds	r3, #2
    4f72:	a814      	add	r0, sp, #80	; 0x50
    4f74:	2102      	movs	r1, #2
    4f76:	2a07      	cmp	r2, #7
    4f78:	931d      	str	r3, [sp, #116]	; 0x74
    4f7a:	921c      	str	r2, [sp, #112]	; 0x70
    4f7c:	e889 0003 	stmia.w	r9, {r0, r1}
    4f80:	f300 835b 	bgt.w	563a <_svfprintf_r+0xb72>
    4f84:	f109 0908 	add.w	r9, r9, #8
    4f88:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4f8a:	2a80      	cmp	r2, #128	; 0x80
    4f8c:	f000 827e 	beq.w	548c <_svfprintf_r+0x9c4>
    4f90:	9a08      	ldr	r2, [sp, #32]
    4f92:	ebc2 0408 	rsb	r4, r2, r8
    4f96:	2c00      	cmp	r4, #0
    4f98:	dd34      	ble.n	5004 <_svfprintf_r+0x53c>
    4f9a:	2c10      	cmp	r4, #16
    4f9c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    4f9e:	4f66      	ldr	r7, [pc, #408]	; (5138 <_svfprintf_r+0x670>)
    4fa0:	dd23      	ble.n	4fea <_svfprintf_r+0x522>
    4fa2:	4649      	mov	r1, r9
    4fa4:	f04f 0810 	mov.w	r8, #16
    4fa8:	46b1      	mov	r9, r6
    4faa:	9d05      	ldr	r5, [sp, #20]
    4fac:	9e03      	ldr	r6, [sp, #12]
    4fae:	e004      	b.n	4fba <_svfprintf_r+0x4f2>
    4fb0:	3c10      	subs	r4, #16
    4fb2:	2c10      	cmp	r4, #16
    4fb4:	f101 0108 	add.w	r1, r1, #8
    4fb8:	dd15      	ble.n	4fe6 <_svfprintf_r+0x51e>
    4fba:	3201      	adds	r2, #1
    4fbc:	3310      	adds	r3, #16
    4fbe:	2a07      	cmp	r2, #7
    4fc0:	931d      	str	r3, [sp, #116]	; 0x74
    4fc2:	921c      	str	r2, [sp, #112]	; 0x70
    4fc4:	e881 0180 	stmia.w	r1, {r7, r8}
    4fc8:	ddf2      	ble.n	4fb0 <_svfprintf_r+0x4e8>
    4fca:	aa1b      	add	r2, sp, #108	; 0x6c
    4fcc:	4631      	mov	r1, r6
    4fce:	4628      	mov	r0, r5
    4fd0:	f001 f832 	bl	6038 <__ssprint_r>
    4fd4:	2800      	cmp	r0, #0
    4fd6:	f47f ae6d 	bne.w	4cb4 <_svfprintf_r+0x1ec>
    4fda:	3c10      	subs	r4, #16
    4fdc:	2c10      	cmp	r4, #16
    4fde:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    4fe0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    4fe2:	a928      	add	r1, sp, #160	; 0xa0
    4fe4:	dce9      	bgt.n	4fba <_svfprintf_r+0x4f2>
    4fe6:	464e      	mov	r6, r9
    4fe8:	4689      	mov	r9, r1
    4fea:	3201      	adds	r2, #1
    4fec:	4423      	add	r3, r4
    4fee:	2a07      	cmp	r2, #7
    4ff0:	931d      	str	r3, [sp, #116]	; 0x74
    4ff2:	921c      	str	r2, [sp, #112]	; 0x70
    4ff4:	f8c9 7000 	str.w	r7, [r9]
    4ff8:	f8c9 4004 	str.w	r4, [r9, #4]
    4ffc:	f300 8305 	bgt.w	560a <_svfprintf_r+0xb42>
    5000:	f109 0908 	add.w	r9, r9, #8
    5004:	f41b 7f80 	tst.w	fp, #256	; 0x100
    5008:	f040 81e2 	bne.w	53d0 <_svfprintf_r+0x908>
    500c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    500e:	9808      	ldr	r0, [sp, #32]
    5010:	f8c9 6000 	str.w	r6, [r9]
    5014:	3201      	adds	r2, #1
    5016:	4403      	add	r3, r0
    5018:	2a07      	cmp	r2, #7
    501a:	931d      	str	r3, [sp, #116]	; 0x74
    501c:	f8c9 0004 	str.w	r0, [r9, #4]
    5020:	921c      	str	r2, [sp, #112]	; 0x70
    5022:	f300 82c2 	bgt.w	55aa <_svfprintf_r+0xae2>
    5026:	f109 0908 	add.w	r9, r9, #8
    502a:	f01b 0f04 	tst.w	fp, #4
    502e:	d03e      	beq.n	50ae <_svfprintf_r+0x5e6>
    5030:	9a07      	ldr	r2, [sp, #28]
    5032:	9904      	ldr	r1, [sp, #16]
    5034:	1a54      	subs	r4, r2, r1
    5036:	2c00      	cmp	r4, #0
    5038:	dd39      	ble.n	50ae <_svfprintf_r+0x5e6>
    503a:	2c10      	cmp	r4, #16
    503c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    503e:	4f3d      	ldr	r7, [pc, #244]	; (5134 <_svfprintf_r+0x66c>)
    5040:	dd22      	ble.n	5088 <_svfprintf_r+0x5c0>
    5042:	2510      	movs	r5, #16
    5044:	9e05      	ldr	r6, [sp, #20]
    5046:	f8dd 800c 	ldr.w	r8, [sp, #12]
    504a:	e004      	b.n	5056 <_svfprintf_r+0x58e>
    504c:	3c10      	subs	r4, #16
    504e:	2c10      	cmp	r4, #16
    5050:	f109 0908 	add.w	r9, r9, #8
    5054:	dd18      	ble.n	5088 <_svfprintf_r+0x5c0>
    5056:	3201      	adds	r2, #1
    5058:	3310      	adds	r3, #16
    505a:	2a07      	cmp	r2, #7
    505c:	931d      	str	r3, [sp, #116]	; 0x74
    505e:	921c      	str	r2, [sp, #112]	; 0x70
    5060:	f8c9 7000 	str.w	r7, [r9]
    5064:	f8c9 5004 	str.w	r5, [r9, #4]
    5068:	ddf0      	ble.n	504c <_svfprintf_r+0x584>
    506a:	aa1b      	add	r2, sp, #108	; 0x6c
    506c:	4641      	mov	r1, r8
    506e:	4630      	mov	r0, r6
    5070:	f000 ffe2 	bl	6038 <__ssprint_r>
    5074:	2800      	cmp	r0, #0
    5076:	f47f ae1d 	bne.w	4cb4 <_svfprintf_r+0x1ec>
    507a:	3c10      	subs	r4, #16
    507c:	2c10      	cmp	r4, #16
    507e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    5080:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    5082:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    5086:	dce6      	bgt.n	5056 <_svfprintf_r+0x58e>
    5088:	3201      	adds	r2, #1
    508a:	4423      	add	r3, r4
    508c:	2a07      	cmp	r2, #7
    508e:	931d      	str	r3, [sp, #116]	; 0x74
    5090:	921c      	str	r2, [sp, #112]	; 0x70
    5092:	f8c9 7000 	str.w	r7, [r9]
    5096:	f8c9 4004 	str.w	r4, [r9, #4]
    509a:	dd08      	ble.n	50ae <_svfprintf_r+0x5e6>
    509c:	aa1b      	add	r2, sp, #108	; 0x6c
    509e:	9903      	ldr	r1, [sp, #12]
    50a0:	9805      	ldr	r0, [sp, #20]
    50a2:	f000 ffc9 	bl	6038 <__ssprint_r>
    50a6:	2800      	cmp	r0, #0
    50a8:	f47f ae04 	bne.w	4cb4 <_svfprintf_r+0x1ec>
    50ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    50ae:	9a06      	ldr	r2, [sp, #24]
    50b0:	9907      	ldr	r1, [sp, #28]
    50b2:	9804      	ldr	r0, [sp, #16]
    50b4:	4281      	cmp	r1, r0
    50b6:	bfac      	ite	ge
    50b8:	1852      	addge	r2, r2, r1
    50ba:	1812      	addlt	r2, r2, r0
    50bc:	9206      	str	r2, [sp, #24]
    50be:	2b00      	cmp	r3, #0
    50c0:	f040 827f 	bne.w	55c2 <_svfprintf_r+0xafa>
    50c4:	2300      	movs	r3, #0
    50c6:	931c      	str	r3, [sp, #112]	; 0x70
    50c8:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    50cc:	e522      	b.n	4b14 <_svfprintf_r+0x4c>
    50ce:	f04b 0b08 	orr.w	fp, fp, #8
    50d2:	f89a 3000 	ldrb.w	r3, [sl]
    50d6:	e550      	b.n	4b7a <_svfprintf_r+0xb2>
    50d8:	930c      	str	r3, [sp, #48]	; 0x30
    50da:	46a8      	mov	r8, r5
    50dc:	2a00      	cmp	r2, #0
    50de:	f040 879a 	bne.w	6016 <_svfprintf_r+0x154e>
    50e2:	f04b 0b10 	orr.w	fp, fp, #16
    50e6:	f01b 0320 	ands.w	r3, fp, #32
    50ea:	f47f adfa 	bne.w	4ce2 <_svfprintf_r+0x21a>
    50ee:	f01b 0210 	ands.w	r2, fp, #16
    50f2:	f040 8391 	bne.w	5818 <_svfprintf_r+0xd50>
    50f6:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
    50fa:	f000 838d 	beq.w	5818 <_svfprintf_r+0xd50>
    50fe:	9909      	ldr	r1, [sp, #36]	; 0x24
    5100:	f88d 204f 	strb.w	r2, [sp, #79]	; 0x4f
    5104:	460b      	mov	r3, r1
    5106:	f1b8 0f00 	cmp.w	r8, #0
    510a:	f103 0304 	add.w	r3, r3, #4
    510e:	880c      	ldrh	r4, [r1, #0]
    5110:	f04f 0500 	mov.w	r5, #0
    5114:	f2c0 85ab 	blt.w	5c6e <_svfprintf_r+0x11a6>
    5118:	ea54 0105 	orrs.w	r1, r4, r5
    511c:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    5120:	9309      	str	r3, [sp, #36]	; 0x24
    5122:	f000 813e 	beq.w	53a2 <_svfprintf_r+0x8da>
    5126:	4617      	mov	r7, r2
    5128:	e5f0      	b.n	4d0c <_svfprintf_r+0x244>
    512a:	bf00      	nop
    512c:	200003ac 	.word	0x200003ac
    5130:	200003a8 	.word	0x200003a8
    5134:	200003e8 	.word	0x200003e8
    5138:	20000398 	.word	0x20000398
    513c:	930c      	str	r3, [sp, #48]	; 0x30
    513e:	46a8      	mov	r8, r5
    5140:	2a00      	cmp	r2, #0
    5142:	f040 8759 	bne.w	5ff8 <_svfprintf_r+0x1530>
    5146:	f04b 0b10 	orr.w	fp, fp, #16
    514a:	f01b 0320 	ands.w	r3, fp, #32
    514e:	f000 82e7 	beq.w	5720 <_svfprintf_r+0xc58>
    5152:	9f09      	ldr	r7, [sp, #36]	; 0x24
    5154:	3707      	adds	r7, #7
    5156:	f027 0307 	bic.w	r3, r7, #7
    515a:	2700      	movs	r7, #0
    515c:	f103 0208 	add.w	r2, r3, #8
    5160:	45b8      	cmp	r8, r7
    5162:	9209      	str	r2, [sp, #36]	; 0x24
    5164:	e9d3 4500 	ldrd	r4, r5, [r3]
    5168:	f88d 704f 	strb.w	r7, [sp, #79]	; 0x4f
    516c:	f6bf ae4b 	bge.w	4e06 <_svfprintf_r+0x33e>
    5170:	ea54 0305 	orrs.w	r3, r4, r5
    5174:	f47f ae4d 	bne.w	4e12 <_svfprintf_r+0x34a>
    5178:	ae38      	add	r6, sp, #224	; 0xe0
    517a:	3430      	adds	r4, #48	; 0x30
    517c:	f806 4d41 	strb.w	r4, [r6, #-65]!
    5180:	ab28      	add	r3, sp, #160	; 0xa0
    5182:	1b9b      	subs	r3, r3, r6
    5184:	9308      	str	r3, [sp, #32]
    5186:	9b08      	ldr	r3, [sp, #32]
    5188:	4543      	cmp	r3, r8
    518a:	bfb8      	it	lt
    518c:	4643      	movlt	r3, r8
    518e:	9304      	str	r3, [sp, #16]
    5190:	2300      	movs	r3, #0
    5192:	930e      	str	r3, [sp, #56]	; 0x38
    5194:	e68a      	b.n	4eac <_svfprintf_r+0x3e4>
    5196:	930c      	str	r3, [sp, #48]	; 0x30
    5198:	46a8      	mov	r8, r5
    519a:	2a00      	cmp	r2, #0
    519c:	f040 8728 	bne.w	5ff0 <_svfprintf_r+0x1528>
    51a0:	f01b 0f20 	tst.w	fp, #32
    51a4:	48c2      	ldr	r0, [pc, #776]	; (54b0 <_svfprintf_r+0x9e8>)
    51a6:	f000 8086 	beq.w	52b6 <_svfprintf_r+0x7ee>
    51aa:	9f09      	ldr	r7, [sp, #36]	; 0x24
    51ac:	3707      	adds	r7, #7
    51ae:	f027 0307 	bic.w	r3, r7, #7
    51b2:	e9d3 4500 	ldrd	r4, r5, [r3]
    51b6:	f103 0208 	add.w	r2, r3, #8
    51ba:	9209      	str	r2, [sp, #36]	; 0x24
    51bc:	f01b 0701 	ands.w	r7, fp, #1
    51c0:	f000 8247 	beq.w	5652 <_svfprintf_r+0xb8a>
    51c4:	ea54 0305 	orrs.w	r3, r4, r5
    51c8:	f000 84a3 	beq.w	5b12 <_svfprintf_r+0x104a>
    51cc:	2700      	movs	r7, #0
    51ce:	2330      	movs	r3, #48	; 0x30
    51d0:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    51d4:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
    51d8:	45b8      	cmp	r8, r7
    51da:	f88d 2051 	strb.w	r2, [sp, #81]	; 0x51
    51de:	f88d 704f 	strb.w	r7, [sp, #79]	; 0x4f
    51e2:	f04b 0302 	orr.w	r3, fp, #2
    51e6:	f2c0 8617 	blt.w	5e18 <_svfprintf_r+0x1350>
    51ea:	f02b 0380 	bic.w	r3, fp, #128	; 0x80
    51ee:	f043 0b02 	orr.w	fp, r3, #2
    51f2:	ae28      	add	r6, sp, #160	; 0xa0
    51f4:	0923      	lsrs	r3, r4, #4
    51f6:	f004 010f 	and.w	r1, r4, #15
    51fa:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
    51fe:	092a      	lsrs	r2, r5, #4
    5200:	461c      	mov	r4, r3
    5202:	4615      	mov	r5, r2
    5204:	5c43      	ldrb	r3, [r0, r1]
    5206:	f806 3d01 	strb.w	r3, [r6, #-1]!
    520a:	ea54 0305 	orrs.w	r3, r4, r5
    520e:	d1f1      	bne.n	51f4 <_svfprintf_r+0x72c>
    5210:	e7b6      	b.n	5180 <_svfprintf_r+0x6b8>
    5212:	9909      	ldr	r1, [sp, #36]	; 0x24
    5214:	930c      	str	r3, [sp, #48]	; 0x30
    5216:	680a      	ldr	r2, [r1, #0]
    5218:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
    521c:	2300      	movs	r3, #0
    521e:	460a      	mov	r2, r1
    5220:	461f      	mov	r7, r3
    5222:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
    5226:	3204      	adds	r2, #4
    5228:	2301      	movs	r3, #1
    522a:	9304      	str	r3, [sp, #16]
    522c:	46b8      	mov	r8, r7
    522e:	970e      	str	r7, [sp, #56]	; 0x38
    5230:	9209      	str	r2, [sp, #36]	; 0x24
    5232:	9308      	str	r3, [sp, #32]
    5234:	ae1e      	add	r6, sp, #120	; 0x78
    5236:	e63d      	b.n	4eb4 <_svfprintf_r+0x3ec>
    5238:	930c      	str	r3, [sp, #48]	; 0x30
    523a:	46a8      	mov	r8, r5
    523c:	2a00      	cmp	r2, #0
    523e:	f43f adc8 	beq.w	4dd2 <_svfprintf_r+0x30a>
    5242:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    5246:	e5c4      	b.n	4dd2 <_svfprintf_r+0x30a>
    5248:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
    524c:	f89a 3000 	ldrb.w	r3, [sl]
    5250:	e493      	b.n	4b7a <_svfprintf_r+0xb2>
    5252:	f89a 3000 	ldrb.w	r3, [sl]
    5256:	2900      	cmp	r1, #0
    5258:	f47f ac8f 	bne.w	4b7a <_svfprintf_r+0xb2>
    525c:	2201      	movs	r2, #1
    525e:	2120      	movs	r1, #32
    5260:	e48b      	b.n	4b7a <_svfprintf_r+0xb2>
    5262:	f04b 0b01 	orr.w	fp, fp, #1
    5266:	f89a 3000 	ldrb.w	r3, [sl]
    526a:	e486      	b.n	4b7a <_svfprintf_r+0xb2>
    526c:	9c09      	ldr	r4, [sp, #36]	; 0x24
    526e:	6823      	ldr	r3, [r4, #0]
    5270:	9307      	str	r3, [sp, #28]
    5272:	4618      	mov	r0, r3
    5274:	2800      	cmp	r0, #0
    5276:	4623      	mov	r3, r4
    5278:	f103 0304 	add.w	r3, r3, #4
    527c:	f6ff acdf 	blt.w	4c3e <_svfprintf_r+0x176>
    5280:	9309      	str	r3, [sp, #36]	; 0x24
    5282:	f89a 3000 	ldrb.w	r3, [sl]
    5286:	e478      	b.n	4b7a <_svfprintf_r+0xb2>
    5288:	f89a 3000 	ldrb.w	r3, [sl]
    528c:	2201      	movs	r2, #1
    528e:	212b      	movs	r1, #43	; 0x2b
    5290:	e473      	b.n	4b7a <_svfprintf_r+0xb2>
    5292:	930c      	str	r3, [sp, #48]	; 0x30
    5294:	46a8      	mov	r8, r5
    5296:	2a00      	cmp	r2, #0
    5298:	f43f af57 	beq.w	514a <_svfprintf_r+0x682>
    529c:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    52a0:	e753      	b.n	514a <_svfprintf_r+0x682>
    52a2:	930c      	str	r3, [sp, #48]	; 0x30
    52a4:	46a8      	mov	r8, r5
    52a6:	2a00      	cmp	r2, #0
    52a8:	f040 86aa 	bne.w	6000 <_svfprintf_r+0x1538>
    52ac:	f01b 0f20 	tst.w	fp, #32
    52b0:	4880      	ldr	r0, [pc, #512]	; (54b4 <_svfprintf_r+0x9ec>)
    52b2:	f47f af7a 	bne.w	51aa <_svfprintf_r+0x6e2>
    52b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    52b8:	f01b 0f10 	tst.w	fp, #16
    52bc:	4613      	mov	r3, r2
    52be:	f040 82c1 	bne.w	5844 <_svfprintf_r+0xd7c>
    52c2:	f01b 0f40 	tst.w	fp, #64	; 0x40
    52c6:	f000 82bd 	beq.w	5844 <_svfprintf_r+0xd7c>
    52ca:	3304      	adds	r3, #4
    52cc:	8814      	ldrh	r4, [r2, #0]
    52ce:	9309      	str	r3, [sp, #36]	; 0x24
    52d0:	2500      	movs	r5, #0
    52d2:	e773      	b.n	51bc <_svfprintf_r+0x6f4>
    52d4:	f89a 3000 	ldrb.w	r3, [sl]
    52d8:	2b6c      	cmp	r3, #108	; 0x6c
    52da:	bf03      	ittte	eq
    52dc:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
    52e0:	f04b 0b20 	orreq.w	fp, fp, #32
    52e4:	f10a 0a01 	addeq.w	sl, sl, #1
    52e8:	f04b 0b10 	orrne.w	fp, fp, #16
    52ec:	e445      	b.n	4b7a <_svfprintf_r+0xb2>
    52ee:	2a00      	cmp	r2, #0
    52f0:	f040 866f 	bne.w	5fd2 <_svfprintf_r+0x150a>
    52f4:	f01b 0f20 	tst.w	fp, #32
    52f8:	f000 8366 	beq.w	59c8 <_svfprintf_r+0xf00>
    52fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
    52fe:	9906      	ldr	r1, [sp, #24]
    5300:	6813      	ldr	r3, [r2, #0]
    5302:	17cd      	asrs	r5, r1, #31
    5304:	4608      	mov	r0, r1
    5306:	3204      	adds	r2, #4
    5308:	4629      	mov	r1, r5
    530a:	9209      	str	r2, [sp, #36]	; 0x24
    530c:	e9c3 0100 	strd	r0, r1, [r3]
    5310:	e400      	b.n	4b14 <_svfprintf_r+0x4c>
    5312:	f04b 0b20 	orr.w	fp, fp, #32
    5316:	f89a 3000 	ldrb.w	r3, [sl]
    531a:	e42e      	b.n	4b7a <_svfprintf_r+0xb2>
    531c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    531e:	930c      	str	r3, [sp, #48]	; 0x30
    5320:	6816      	ldr	r6, [r2, #0]
    5322:	2400      	movs	r4, #0
    5324:	f88d 404f 	strb.w	r4, [sp, #79]	; 0x4f
    5328:	1d17      	adds	r7, r2, #4
    532a:	2e00      	cmp	r6, #0
    532c:	f000 8565 	beq.w	5dfa <_svfprintf_r+0x1332>
    5330:	2d00      	cmp	r5, #0
    5332:	f2c0 84a2 	blt.w	5c7a <_svfprintf_r+0x11b2>
    5336:	462a      	mov	r2, r5
    5338:	4621      	mov	r1, r4
    533a:	4630      	mov	r0, r6
    533c:	f7fe f928 	bl	3590 <memchr>
    5340:	2800      	cmp	r0, #0
    5342:	f000 85cc 	beq.w	5ede <_svfprintf_r+0x1416>
    5346:	1b83      	subs	r3, r0, r6
    5348:	9308      	str	r3, [sp, #32]
    534a:	46a0      	mov	r8, r4
    534c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    5350:	9709      	str	r7, [sp, #36]	; 0x24
    5352:	9304      	str	r3, [sp, #16]
    5354:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
    5358:	f89d 704f 	ldrb.w	r7, [sp, #79]	; 0x4f
    535c:	e5a6      	b.n	4eac <_svfprintf_r+0x3e4>
    535e:	4855      	ldr	r0, [pc, #340]	; (54b4 <_svfprintf_r+0x9ec>)
    5360:	920c      	str	r2, [sp, #48]	; 0x30
    5362:	f1b8 0f00 	cmp.w	r8, #0
    5366:	f040 8184 	bne.w	5672 <_svfprintf_r+0xbaa>
    536a:	4647      	mov	r7, r8
    536c:	f04f 0800 	mov.w	r8, #0
    5370:	f8cd 8020 	str.w	r8, [sp, #32]
    5374:	ae28      	add	r6, sp, #160	; 0xa0
    5376:	e706      	b.n	5186 <_svfprintf_r+0x6be>
    5378:	930c      	str	r3, [sp, #48]	; 0x30
    537a:	2a00      	cmp	r2, #0
    537c:	f040 862d 	bne.w	5fda <_svfprintf_r+0x1512>
    5380:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    5382:	2a00      	cmp	r2, #0
    5384:	f43f ac8f 	beq.w	4ca6 <_svfprintf_r+0x1de>
    5388:	2300      	movs	r3, #0
    538a:	2101      	movs	r1, #1
    538c:	461f      	mov	r7, r3
    538e:	9104      	str	r1, [sp, #16]
    5390:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
    5394:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
    5398:	4698      	mov	r8, r3
    539a:	930e      	str	r3, [sp, #56]	; 0x38
    539c:	9108      	str	r1, [sp, #32]
    539e:	ae1e      	add	r6, sp, #120	; 0x78
    53a0:	e588      	b.n	4eb4 <_svfprintf_r+0x3ec>
    53a2:	f1b8 0f00 	cmp.w	r8, #0
    53a6:	f000 858b 	beq.w	5ec0 <_svfprintf_r+0x13f8>
    53aa:	2700      	movs	r7, #0
    53ac:	2400      	movs	r4, #0
    53ae:	2500      	movs	r5, #0
    53b0:	e4ac      	b.n	4d0c <_svfprintf_r+0x244>
    53b2:	4840      	ldr	r0, [pc, #256]	; (54b4 <_svfprintf_r+0x9ec>)
    53b4:	920c      	str	r2, [sp, #48]	; 0x30
    53b6:	469b      	mov	fp, r3
    53b8:	ea54 0305 	orrs.w	r3, r4, r5
    53bc:	9709      	str	r7, [sp, #36]	; 0x24
    53be:	f04f 0700 	mov.w	r7, #0
    53c2:	f47f af16 	bne.w	51f2 <_svfprintf_r+0x72a>
    53c6:	2400      	movs	r4, #0
    53c8:	2500      	movs	r5, #0
    53ca:	e712      	b.n	51f2 <_svfprintf_r+0x72a>
    53cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    53ce:	e5bb      	b.n	4f48 <_svfprintf_r+0x480>
    53d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    53d2:	2a65      	cmp	r2, #101	; 0x65
    53d4:	f340 80a1 	ble.w	551a <_svfprintf_r+0xa52>
    53d8:	eeb5 8b40 	vcmp.f64	d8, #0.0
    53dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    53e0:	f040 8149 	bne.w	5676 <_svfprintf_r+0xbae>
    53e4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    53e6:	4934      	ldr	r1, [pc, #208]	; (54b8 <_svfprintf_r+0x9f0>)
    53e8:	f8c9 1000 	str.w	r1, [r9]
    53ec:	3201      	adds	r2, #1
    53ee:	3301      	adds	r3, #1
    53f0:	2101      	movs	r1, #1
    53f2:	2a07      	cmp	r2, #7
    53f4:	931d      	str	r3, [sp, #116]	; 0x74
    53f6:	921c      	str	r2, [sp, #112]	; 0x70
    53f8:	f8c9 1004 	str.w	r1, [r9, #4]
    53fc:	f300 8392 	bgt.w	5b24 <_svfprintf_r+0x105c>
    5400:	f109 0908 	add.w	r9, r9, #8
    5404:	9a15      	ldr	r2, [sp, #84]	; 0x54
    5406:	990d      	ldr	r1, [sp, #52]	; 0x34
    5408:	428a      	cmp	r2, r1
    540a:	db03      	blt.n	5414 <_svfprintf_r+0x94c>
    540c:	f01b 0f01 	tst.w	fp, #1
    5410:	f43f ae0b 	beq.w	502a <_svfprintf_r+0x562>
    5414:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    5416:	980f      	ldr	r0, [sp, #60]	; 0x3c
    5418:	9910      	ldr	r1, [sp, #64]	; 0x40
    541a:	f8c9 1000 	str.w	r1, [r9]
    541e:	3201      	adds	r2, #1
    5420:	4403      	add	r3, r0
    5422:	2a07      	cmp	r2, #7
    5424:	931d      	str	r3, [sp, #116]	; 0x74
    5426:	f8c9 0004 	str.w	r0, [r9, #4]
    542a:	921c      	str	r2, [sp, #112]	; 0x70
    542c:	f300 83d6 	bgt.w	5bdc <_svfprintf_r+0x1114>
    5430:	f109 0908 	add.w	r9, r9, #8
    5434:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    5436:	1e54      	subs	r4, r2, #1
    5438:	2c00      	cmp	r4, #0
    543a:	f77f adf6 	ble.w	502a <_svfprintf_r+0x562>
    543e:	2c10      	cmp	r4, #16
    5440:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    5442:	4f1e      	ldr	r7, [pc, #120]	; (54bc <_svfprintf_r+0x9f4>)
    5444:	f340 81dc 	ble.w	5800 <_svfprintf_r+0xd38>
    5448:	2510      	movs	r5, #16
    544a:	9e05      	ldr	r6, [sp, #20]
    544c:	f8dd 800c 	ldr.w	r8, [sp, #12]
    5450:	e005      	b.n	545e <_svfprintf_r+0x996>
    5452:	f109 0908 	add.w	r9, r9, #8
    5456:	3c10      	subs	r4, #16
    5458:	2c10      	cmp	r4, #16
    545a:	f340 81d1 	ble.w	5800 <_svfprintf_r+0xd38>
    545e:	3201      	adds	r2, #1
    5460:	3310      	adds	r3, #16
    5462:	2a07      	cmp	r2, #7
    5464:	931d      	str	r3, [sp, #116]	; 0x74
    5466:	921c      	str	r2, [sp, #112]	; 0x70
    5468:	f8c9 7000 	str.w	r7, [r9]
    546c:	f8c9 5004 	str.w	r5, [r9, #4]
    5470:	ddef      	ble.n	5452 <_svfprintf_r+0x98a>
    5472:	aa1b      	add	r2, sp, #108	; 0x6c
    5474:	4641      	mov	r1, r8
    5476:	4630      	mov	r0, r6
    5478:	f000 fdde 	bl	6038 <__ssprint_r>
    547c:	2800      	cmp	r0, #0
    547e:	f47f ac19 	bne.w	4cb4 <_svfprintf_r+0x1ec>
    5482:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    5484:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    5486:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    548a:	e7e4      	b.n	5456 <_svfprintf_r+0x98e>
    548c:	9a07      	ldr	r2, [sp, #28]
    548e:	9904      	ldr	r1, [sp, #16]
    5490:	1a54      	subs	r4, r2, r1
    5492:	2c00      	cmp	r4, #0
    5494:	f77f ad7c 	ble.w	4f90 <_svfprintf_r+0x4c8>
    5498:	2c10      	cmp	r4, #16
    549a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    549c:	4f07      	ldr	r7, [pc, #28]	; (54bc <_svfprintf_r+0x9f4>)
    549e:	dd2e      	ble.n	54fe <_svfprintf_r+0xa36>
    54a0:	4649      	mov	r1, r9
    54a2:	2510      	movs	r5, #16
    54a4:	46c1      	mov	r9, r8
    54a6:	4618      	mov	r0, r3
    54a8:	46b0      	mov	r8, r6
    54aa:	9e05      	ldr	r6, [sp, #20]
    54ac:	e00d      	b.n	54ca <_svfprintf_r+0xa02>
    54ae:	bf00      	nop
    54b0:	200003b8 	.word	0x200003b8
    54b4:	200003cc 	.word	0x200003cc
    54b8:	20000394 	.word	0x20000394
    54bc:	20000398 	.word	0x20000398
    54c0:	3c10      	subs	r4, #16
    54c2:	2c10      	cmp	r4, #16
    54c4:	f101 0108 	add.w	r1, r1, #8
    54c8:	dd15      	ble.n	54f6 <_svfprintf_r+0xa2e>
    54ca:	3201      	adds	r2, #1
    54cc:	3010      	adds	r0, #16
    54ce:	2a07      	cmp	r2, #7
    54d0:	901d      	str	r0, [sp, #116]	; 0x74
    54d2:	921c      	str	r2, [sp, #112]	; 0x70
    54d4:	600f      	str	r7, [r1, #0]
    54d6:	604d      	str	r5, [r1, #4]
    54d8:	ddf2      	ble.n	54c0 <_svfprintf_r+0x9f8>
    54da:	aa1b      	add	r2, sp, #108	; 0x6c
    54dc:	9903      	ldr	r1, [sp, #12]
    54de:	4630      	mov	r0, r6
    54e0:	f000 fdaa 	bl	6038 <__ssprint_r>
    54e4:	2800      	cmp	r0, #0
    54e6:	f47f abe5 	bne.w	4cb4 <_svfprintf_r+0x1ec>
    54ea:	3c10      	subs	r4, #16
    54ec:	2c10      	cmp	r4, #16
    54ee:	981d      	ldr	r0, [sp, #116]	; 0x74
    54f0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    54f2:	a928      	add	r1, sp, #160	; 0xa0
    54f4:	dce9      	bgt.n	54ca <_svfprintf_r+0xa02>
    54f6:	4646      	mov	r6, r8
    54f8:	4603      	mov	r3, r0
    54fa:	46c8      	mov	r8, r9
    54fc:	4689      	mov	r9, r1
    54fe:	3201      	adds	r2, #1
    5500:	4423      	add	r3, r4
    5502:	2a07      	cmp	r2, #7
    5504:	931d      	str	r3, [sp, #116]	; 0x74
    5506:	921c      	str	r2, [sp, #112]	; 0x70
    5508:	f8c9 7000 	str.w	r7, [r9]
    550c:	f8c9 4004 	str.w	r4, [r9, #4]
    5510:	f300 8246 	bgt.w	59a0 <_svfprintf_r+0xed8>
    5514:	f109 0908 	add.w	r9, r9, #8
    5518:	e53a      	b.n	4f90 <_svfprintf_r+0x4c8>
    551a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    551c:	f8c9 6000 	str.w	r6, [r9]
    5520:	2a01      	cmp	r2, #1
    5522:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    5524:	f103 0301 	add.w	r3, r3, #1
    5528:	f102 0201 	add.w	r2, r2, #1
    552c:	f04f 0101 	mov.w	r1, #1
    5530:	931d      	str	r3, [sp, #116]	; 0x74
    5532:	921c      	str	r2, [sp, #112]	; 0x70
    5534:	f8c9 1004 	str.w	r1, [r9, #4]
    5538:	f340 8210 	ble.w	595c <_svfprintf_r+0xe94>
    553c:	2a07      	cmp	r2, #7
    553e:	f300 8215 	bgt.w	596c <_svfprintf_r+0xea4>
    5542:	f109 0908 	add.w	r9, r9, #8
    5546:	980f      	ldr	r0, [sp, #60]	; 0x3c
    5548:	9910      	ldr	r1, [sp, #64]	; 0x40
    554a:	f8c9 1000 	str.w	r1, [r9]
    554e:	3201      	adds	r2, #1
    5550:	4403      	add	r3, r0
    5552:	2a07      	cmp	r2, #7
    5554:	931d      	str	r3, [sp, #116]	; 0x74
    5556:	921c      	str	r2, [sp, #112]	; 0x70
    5558:	f8c9 0004 	str.w	r0, [r9, #4]
    555c:	f300 8213 	bgt.w	5986 <_svfprintf_r+0xebe>
    5560:	f109 0908 	add.w	r9, r9, #8
    5564:	eeb5 8b40 	vcmp.f64	d8, #0.0
    5568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    556c:	990d      	ldr	r1, [sp, #52]	; 0x34
    556e:	f000 80f5 	beq.w	575c <_svfprintf_r+0xc94>
    5572:	3901      	subs	r1, #1
    5574:	3201      	adds	r2, #1
    5576:	3601      	adds	r6, #1
    5578:	440b      	add	r3, r1
    557a:	2a07      	cmp	r2, #7
    557c:	f8c9 6000 	str.w	r6, [r9]
    5580:	921c      	str	r2, [sp, #112]	; 0x70
    5582:	931d      	str	r3, [sp, #116]	; 0x74
    5584:	f8c9 1004 	str.w	r1, [r9, #4]
    5588:	f300 811d 	bgt.w	57c6 <_svfprintf_r+0xcfe>
    558c:	f109 0908 	add.w	r9, r9, #8
    5590:	9811      	ldr	r0, [sp, #68]	; 0x44
    5592:	f8c9 0004 	str.w	r0, [r9, #4]
    5596:	3201      	adds	r2, #1
    5598:	4403      	add	r3, r0
    559a:	a917      	add	r1, sp, #92	; 0x5c
    559c:	2a07      	cmp	r2, #7
    559e:	931d      	str	r3, [sp, #116]	; 0x74
    55a0:	921c      	str	r2, [sp, #112]	; 0x70
    55a2:	f8c9 1000 	str.w	r1, [r9]
    55a6:	f77f ad3e 	ble.w	5026 <_svfprintf_r+0x55e>
    55aa:	aa1b      	add	r2, sp, #108	; 0x6c
    55ac:	9903      	ldr	r1, [sp, #12]
    55ae:	9805      	ldr	r0, [sp, #20]
    55b0:	f000 fd42 	bl	6038 <__ssprint_r>
    55b4:	2800      	cmp	r0, #0
    55b6:	f47f ab7d 	bne.w	4cb4 <_svfprintf_r+0x1ec>
    55ba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    55bc:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    55c0:	e533      	b.n	502a <_svfprintf_r+0x562>
    55c2:	aa1b      	add	r2, sp, #108	; 0x6c
    55c4:	9903      	ldr	r1, [sp, #12]
    55c6:	9805      	ldr	r0, [sp, #20]
    55c8:	f000 fd36 	bl	6038 <__ssprint_r>
    55cc:	2800      	cmp	r0, #0
    55ce:	f43f ad79 	beq.w	50c4 <_svfprintf_r+0x5fc>
    55d2:	f7ff bb6f 	b.w	4cb4 <_svfprintf_r+0x1ec>
    55d6:	9909      	ldr	r1, [sp, #36]	; 0x24
    55d8:	f1b8 0f00 	cmp.w	r8, #0
    55dc:	680c      	ldr	r4, [r1, #0]
    55de:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
    55e2:	f101 0704 	add.w	r7, r1, #4
    55e6:	f04f 0500 	mov.w	r5, #0
    55ea:	f2c0 8371 	blt.w	5cd0 <_svfprintf_r+0x1208>
    55ee:	ea54 0205 	orrs.w	r2, r4, r5
    55f2:	9709      	str	r7, [sp, #36]	; 0x24
    55f4:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    55f8:	461f      	mov	r7, r3
    55fa:	f47f ac0a 	bne.w	4e12 <_svfprintf_r+0x34a>
    55fe:	f1b8 0f00 	cmp.w	r8, #0
    5602:	f43f aeb3 	beq.w	536c <_svfprintf_r+0x8a4>
    5606:	2400      	movs	r4, #0
    5608:	e5b6      	b.n	5178 <_svfprintf_r+0x6b0>
    560a:	aa1b      	add	r2, sp, #108	; 0x6c
    560c:	9903      	ldr	r1, [sp, #12]
    560e:	9805      	ldr	r0, [sp, #20]
    5610:	f000 fd12 	bl	6038 <__ssprint_r>
    5614:	2800      	cmp	r0, #0
    5616:	f47f ab4d 	bne.w	4cb4 <_svfprintf_r+0x1ec>
    561a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    561c:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    5620:	e4f0      	b.n	5004 <_svfprintf_r+0x53c>
    5622:	aa1b      	add	r2, sp, #108	; 0x6c
    5624:	9903      	ldr	r1, [sp, #12]
    5626:	9805      	ldr	r0, [sp, #20]
    5628:	f000 fd06 	bl	6038 <__ssprint_r>
    562c:	2800      	cmp	r0, #0
    562e:	f47f ab41 	bne.w	4cb4 <_svfprintf_r+0x1ec>
    5632:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    5634:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    5638:	e496      	b.n	4f68 <_svfprintf_r+0x4a0>
    563a:	aa1b      	add	r2, sp, #108	; 0x6c
    563c:	9903      	ldr	r1, [sp, #12]
    563e:	9805      	ldr	r0, [sp, #20]
    5640:	f000 fcfa 	bl	6038 <__ssprint_r>
    5644:	2800      	cmp	r0, #0
    5646:	f47f ab35 	bne.w	4cb4 <_svfprintf_r+0x1ec>
    564a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    564c:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    5650:	e49a      	b.n	4f88 <_svfprintf_r+0x4c0>
    5652:	f1b8 0f00 	cmp.w	r8, #0
    5656:	f88d 704f 	strb.w	r7, [sp, #79]	; 0x4f
    565a:	f2c0 826f 	blt.w	5b3c <_svfprintf_r+0x1074>
    565e:	ea54 0305 	orrs.w	r3, r4, r5
    5662:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    5666:	f47f adc4 	bne.w	51f2 <_svfprintf_r+0x72a>
    566a:	f1b8 0f00 	cmp.w	r8, #0
    566e:	f43f ae7c 	beq.w	536a <_svfprintf_r+0x8a2>
    5672:	2700      	movs	r7, #0
    5674:	e6a7      	b.n	53c6 <_svfprintf_r+0x8fe>
    5676:	9c15      	ldr	r4, [sp, #84]	; 0x54
    5678:	2c00      	cmp	r4, #0
    567a:	f340 8261 	ble.w	5b40 <_svfprintf_r+0x1078>
    567e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    5680:	990d      	ldr	r1, [sp, #52]	; 0x34
    5682:	428a      	cmp	r2, r1
    5684:	bfa8      	it	ge
    5686:	460a      	movge	r2, r1
    5688:	2a00      	cmp	r2, #0
    568a:	4614      	mov	r4, r2
    568c:	dd0d      	ble.n	56aa <_svfprintf_r+0xbe2>
    568e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    5690:	f8c9 6000 	str.w	r6, [r9]
    5694:	3201      	adds	r2, #1
    5696:	4423      	add	r3, r4
    5698:	2a07      	cmp	r2, #7
    569a:	931d      	str	r3, [sp, #116]	; 0x74
    569c:	f8c9 4004 	str.w	r4, [r9, #4]
    56a0:	921c      	str	r2, [sp, #112]	; 0x70
    56a2:	f300 8372 	bgt.w	5d8a <_svfprintf_r+0x12c2>
    56a6:	f109 0908 	add.w	r9, r9, #8
    56aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    56ac:	2c00      	cmp	r4, #0
    56ae:	bfa8      	it	ge
    56b0:	1b12      	subge	r2, r2, r4
    56b2:	2a00      	cmp	r2, #0
    56b4:	4614      	mov	r4, r2
    56b6:	f340 80f1 	ble.w	589c <_svfprintf_r+0xdd4>
    56ba:	2c10      	cmp	r4, #16
    56bc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    56be:	4fc1      	ldr	r7, [pc, #772]	; (59c4 <_svfprintf_r+0xefc>)
    56c0:	f340 8219 	ble.w	5af6 <_svfprintf_r+0x102e>
    56c4:	4649      	mov	r1, r9
    56c6:	2510      	movs	r5, #16
    56c8:	46b1      	mov	r9, r6
    56ca:	f8dd 8014 	ldr.w	r8, [sp, #20]
    56ce:	9e03      	ldr	r6, [sp, #12]
    56d0:	e004      	b.n	56dc <_svfprintf_r+0xc14>
    56d2:	3108      	adds	r1, #8
    56d4:	3c10      	subs	r4, #16
    56d6:	2c10      	cmp	r4, #16
    56d8:	f340 820b 	ble.w	5af2 <_svfprintf_r+0x102a>
    56dc:	3201      	adds	r2, #1
    56de:	3310      	adds	r3, #16
    56e0:	2a07      	cmp	r2, #7
    56e2:	931d      	str	r3, [sp, #116]	; 0x74
    56e4:	921c      	str	r2, [sp, #112]	; 0x70
    56e6:	600f      	str	r7, [r1, #0]
    56e8:	604d      	str	r5, [r1, #4]
    56ea:	ddf2      	ble.n	56d2 <_svfprintf_r+0xc0a>
    56ec:	aa1b      	add	r2, sp, #108	; 0x6c
    56ee:	4631      	mov	r1, r6
    56f0:	4640      	mov	r0, r8
    56f2:	f000 fca1 	bl	6038 <__ssprint_r>
    56f6:	2800      	cmp	r0, #0
    56f8:	f47f aadc 	bne.w	4cb4 <_svfprintf_r+0x1ec>
    56fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    56fe:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    5700:	a928      	add	r1, sp, #160	; 0xa0
    5702:	e7e7      	b.n	56d4 <_svfprintf_r+0xc0c>
    5704:	aa1b      	add	r2, sp, #108	; 0x6c
    5706:	9903      	ldr	r1, [sp, #12]
    5708:	9805      	ldr	r0, [sp, #20]
    570a:	f000 fc95 	bl	6038 <__ssprint_r>
    570e:	2800      	cmp	r0, #0
    5710:	f47f aad0 	bne.w	4cb4 <_svfprintf_r+0x1ec>
    5714:	f89d 704f 	ldrb.w	r7, [sp, #79]	; 0x4f
    5718:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    571a:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    571e:	e413      	b.n	4f48 <_svfprintf_r+0x480>
    5720:	f01b 0210 	ands.w	r2, fp, #16
    5724:	f47f af57 	bne.w	55d6 <_svfprintf_r+0xb0e>
    5728:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
    572c:	f43f af53 	beq.w	55d6 <_svfprintf_r+0xb0e>
    5730:	9909      	ldr	r1, [sp, #36]	; 0x24
    5732:	f88d 204f 	strb.w	r2, [sp, #79]	; 0x4f
    5736:	460b      	mov	r3, r1
    5738:	f1b8 0f00 	cmp.w	r8, #0
    573c:	f103 0304 	add.w	r3, r3, #4
    5740:	880c      	ldrh	r4, [r1, #0]
    5742:	f04f 0500 	mov.w	r5, #0
    5746:	f2c0 8294 	blt.w	5c72 <_svfprintf_r+0x11aa>
    574a:	ea54 0105 	orrs.w	r1, r4, r5
    574e:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    5752:	9309      	str	r3, [sp, #36]	; 0x24
    5754:	4617      	mov	r7, r2
    5756:	f47f ab5c 	bne.w	4e12 <_svfprintf_r+0x34a>
    575a:	e750      	b.n	55fe <_svfprintf_r+0xb36>
    575c:	1e4c      	subs	r4, r1, #1
    575e:	2c00      	cmp	r4, #0
    5760:	f77f af16 	ble.w	5590 <_svfprintf_r+0xac8>
    5764:	2c10      	cmp	r4, #16
    5766:	4f97      	ldr	r7, [pc, #604]	; (59c4 <_svfprintf_r+0xefc>)
    5768:	dd22      	ble.n	57b0 <_svfprintf_r+0xce8>
    576a:	2510      	movs	r5, #16
    576c:	9e05      	ldr	r6, [sp, #20]
    576e:	f8dd 800c 	ldr.w	r8, [sp, #12]
    5772:	e004      	b.n	577e <_svfprintf_r+0xcb6>
    5774:	3c10      	subs	r4, #16
    5776:	2c10      	cmp	r4, #16
    5778:	f109 0908 	add.w	r9, r9, #8
    577c:	dd18      	ble.n	57b0 <_svfprintf_r+0xce8>
    577e:	3201      	adds	r2, #1
    5780:	3310      	adds	r3, #16
    5782:	2a07      	cmp	r2, #7
    5784:	931d      	str	r3, [sp, #116]	; 0x74
    5786:	921c      	str	r2, [sp, #112]	; 0x70
    5788:	f8c9 7000 	str.w	r7, [r9]
    578c:	f8c9 5004 	str.w	r5, [r9, #4]
    5790:	ddf0      	ble.n	5774 <_svfprintf_r+0xcac>
    5792:	aa1b      	add	r2, sp, #108	; 0x6c
    5794:	4641      	mov	r1, r8
    5796:	4630      	mov	r0, r6
    5798:	f000 fc4e 	bl	6038 <__ssprint_r>
    579c:	2800      	cmp	r0, #0
    579e:	f47f aa89 	bne.w	4cb4 <_svfprintf_r+0x1ec>
    57a2:	3c10      	subs	r4, #16
    57a4:	2c10      	cmp	r4, #16
    57a6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    57a8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    57aa:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    57ae:	dce6      	bgt.n	577e <_svfprintf_r+0xcb6>
    57b0:	3201      	adds	r2, #1
    57b2:	4423      	add	r3, r4
    57b4:	2a07      	cmp	r2, #7
    57b6:	931d      	str	r3, [sp, #116]	; 0x74
    57b8:	921c      	str	r2, [sp, #112]	; 0x70
    57ba:	f8c9 7000 	str.w	r7, [r9]
    57be:	f8c9 4004 	str.w	r4, [r9, #4]
    57c2:	f77f aee3 	ble.w	558c <_svfprintf_r+0xac4>
    57c6:	aa1b      	add	r2, sp, #108	; 0x6c
    57c8:	9903      	ldr	r1, [sp, #12]
    57ca:	9805      	ldr	r0, [sp, #20]
    57cc:	f000 fc34 	bl	6038 <__ssprint_r>
    57d0:	2800      	cmp	r0, #0
    57d2:	f47f aa6f 	bne.w	4cb4 <_svfprintf_r+0x1ec>
    57d6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    57d8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    57da:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    57de:	e6d7      	b.n	5590 <_svfprintf_r+0xac8>
    57e0:	f01b 0f10 	tst.w	fp, #16
    57e4:	d133      	bne.n	584e <_svfprintf_r+0xd86>
    57e6:	f01b 0f40 	tst.w	fp, #64	; 0x40
    57ea:	d030      	beq.n	584e <_svfprintf_r+0xd86>
    57ec:	9909      	ldr	r1, [sp, #36]	; 0x24
    57ee:	f9b1 4000 	ldrsh.w	r4, [r1]
    57f2:	3104      	adds	r1, #4
    57f4:	17e5      	asrs	r5, r4, #31
    57f6:	4622      	mov	r2, r4
    57f8:	462b      	mov	r3, r5
    57fa:	9109      	str	r1, [sp, #36]	; 0x24
    57fc:	f7ff baf8 	b.w	4df0 <_svfprintf_r+0x328>
    5800:	3201      	adds	r2, #1
    5802:	4423      	add	r3, r4
    5804:	2a07      	cmp	r2, #7
    5806:	931d      	str	r3, [sp, #116]	; 0x74
    5808:	921c      	str	r2, [sp, #112]	; 0x70
    580a:	f8c9 7000 	str.w	r7, [r9]
    580e:	f8c9 4004 	str.w	r4, [r9, #4]
    5812:	f77f ac08 	ble.w	5026 <_svfprintf_r+0x55e>
    5816:	e6c8      	b.n	55aa <_svfprintf_r+0xae2>
    5818:	9909      	ldr	r1, [sp, #36]	; 0x24
    581a:	f1b8 0f00 	cmp.w	r8, #0
    581e:	680c      	ldr	r4, [r1, #0]
    5820:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
    5824:	f101 0704 	add.w	r7, r1, #4
    5828:	f04f 0500 	mov.w	r5, #0
    582c:	f2c0 80c5 	blt.w	59ba <_svfprintf_r+0xef2>
    5830:	ea54 0205 	orrs.w	r2, r4, r5
    5834:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    5838:	9709      	str	r7, [sp, #36]	; 0x24
    583a:	f43f adb2 	beq.w	53a2 <_svfprintf_r+0x8da>
    583e:	461f      	mov	r7, r3
    5840:	f7ff ba64 	b.w	4d0c <_svfprintf_r+0x244>
    5844:	681c      	ldr	r4, [r3, #0]
    5846:	3304      	adds	r3, #4
    5848:	9309      	str	r3, [sp, #36]	; 0x24
    584a:	2500      	movs	r5, #0
    584c:	e4b6      	b.n	51bc <_svfprintf_r+0x6f4>
    584e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5850:	6814      	ldr	r4, [r2, #0]
    5852:	4613      	mov	r3, r2
    5854:	3304      	adds	r3, #4
    5856:	17e5      	asrs	r5, r4, #31
    5858:	4622      	mov	r2, r4
    585a:	9309      	str	r3, [sp, #36]	; 0x24
    585c:	2a00      	cmp	r2, #0
    585e:	462b      	mov	r3, r5
    5860:	f173 0300 	sbcs.w	r3, r3, #0
    5864:	f6bf aac9 	bge.w	4dfa <_svfprintf_r+0x332>
    5868:	4264      	negs	r4, r4
    586a:	f04f 072d 	mov.w	r7, #45	; 0x2d
    586e:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
    5872:	f1b8 0f00 	cmp.w	r8, #0
    5876:	f88d 704f 	strb.w	r7, [sp, #79]	; 0x4f
    587a:	f6ff aaca 	blt.w	4e12 <_svfprintf_r+0x34a>
    587e:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    5882:	f7ff bac6 	b.w	4e12 <_svfprintf_r+0x34a>
    5886:	aa1b      	add	r2, sp, #108	; 0x6c
    5888:	9903      	ldr	r1, [sp, #12]
    588a:	9805      	ldr	r0, [sp, #20]
    588c:	f000 fbd4 	bl	6038 <__ssprint_r>
    5890:	2800      	cmp	r0, #0
    5892:	f47f aa0f 	bne.w	4cb4 <_svfprintf_r+0x1ec>
    5896:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    5898:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    589c:	990e      	ldr	r1, [sp, #56]	; 0x38
    589e:	9a15      	ldr	r2, [sp, #84]	; 0x54
    58a0:	4431      	add	r1, r6
    58a2:	460d      	mov	r5, r1
    58a4:	990d      	ldr	r1, [sp, #52]	; 0x34
    58a6:	428a      	cmp	r2, r1
    58a8:	db47      	blt.n	593a <_svfprintf_r+0xe72>
    58aa:	f01b 0f01 	tst.w	fp, #1
    58ae:	d144      	bne.n	593a <_svfprintf_r+0xe72>
    58b0:	980d      	ldr	r0, [sp, #52]	; 0x34
    58b2:	4406      	add	r6, r0
    58b4:	1b74      	subs	r4, r6, r5
    58b6:	1a82      	subs	r2, r0, r2
    58b8:	4294      	cmp	r4, r2
    58ba:	bfa8      	it	ge
    58bc:	4614      	movge	r4, r2
    58be:	2c00      	cmp	r4, #0
    58c0:	4626      	mov	r6, r4
    58c2:	dd0d      	ble.n	58e0 <_svfprintf_r+0xe18>
    58c4:	991c      	ldr	r1, [sp, #112]	; 0x70
    58c6:	f8c9 5000 	str.w	r5, [r9]
    58ca:	3101      	adds	r1, #1
    58cc:	4423      	add	r3, r4
    58ce:	2907      	cmp	r1, #7
    58d0:	931d      	str	r3, [sp, #116]	; 0x74
    58d2:	f8c9 4004 	str.w	r4, [r9, #4]
    58d6:	911c      	str	r1, [sp, #112]	; 0x70
    58d8:	f300 8280 	bgt.w	5ddc <_svfprintf_r+0x1314>
    58dc:	f109 0908 	add.w	r9, r9, #8
    58e0:	2e00      	cmp	r6, #0
    58e2:	bfac      	ite	ge
    58e4:	1b94      	subge	r4, r2, r6
    58e6:	4614      	movlt	r4, r2
    58e8:	2c00      	cmp	r4, #0
    58ea:	f77f ab9e 	ble.w	502a <_svfprintf_r+0x562>
    58ee:	2c10      	cmp	r4, #16
    58f0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    58f2:	4f34      	ldr	r7, [pc, #208]	; (59c4 <_svfprintf_r+0xefc>)
    58f4:	dd84      	ble.n	5800 <_svfprintf_r+0xd38>
    58f6:	2510      	movs	r5, #16
    58f8:	9e05      	ldr	r6, [sp, #20]
    58fa:	f8dd 800c 	ldr.w	r8, [sp, #12]
    58fe:	e005      	b.n	590c <_svfprintf_r+0xe44>
    5900:	f109 0908 	add.w	r9, r9, #8
    5904:	3c10      	subs	r4, #16
    5906:	2c10      	cmp	r4, #16
    5908:	f77f af7a 	ble.w	5800 <_svfprintf_r+0xd38>
    590c:	3201      	adds	r2, #1
    590e:	3310      	adds	r3, #16
    5910:	2a07      	cmp	r2, #7
    5912:	931d      	str	r3, [sp, #116]	; 0x74
    5914:	921c      	str	r2, [sp, #112]	; 0x70
    5916:	f8c9 7000 	str.w	r7, [r9]
    591a:	f8c9 5004 	str.w	r5, [r9, #4]
    591e:	ddef      	ble.n	5900 <_svfprintf_r+0xe38>
    5920:	aa1b      	add	r2, sp, #108	; 0x6c
    5922:	4641      	mov	r1, r8
    5924:	4630      	mov	r0, r6
    5926:	f000 fb87 	bl	6038 <__ssprint_r>
    592a:	2800      	cmp	r0, #0
    592c:	f47f a9c2 	bne.w	4cb4 <_svfprintf_r+0x1ec>
    5930:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    5932:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    5934:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    5938:	e7e4      	b.n	5904 <_svfprintf_r+0xe3c>
    593a:	991c      	ldr	r1, [sp, #112]	; 0x70
    593c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    593e:	9810      	ldr	r0, [sp, #64]	; 0x40
    5940:	f8c9 0000 	str.w	r0, [r9]
    5944:	3101      	adds	r1, #1
    5946:	4423      	add	r3, r4
    5948:	2907      	cmp	r1, #7
    594a:	931d      	str	r3, [sp, #116]	; 0x74
    594c:	f8c9 4004 	str.w	r4, [r9, #4]
    5950:	911c      	str	r1, [sp, #112]	; 0x70
    5952:	f300 8226 	bgt.w	5da2 <_svfprintf_r+0x12da>
    5956:	f109 0908 	add.w	r9, r9, #8
    595a:	e7a9      	b.n	58b0 <_svfprintf_r+0xde8>
    595c:	f01b 0f01 	tst.w	fp, #1
    5960:	f47f adec 	bne.w	553c <_svfprintf_r+0xa74>
    5964:	2a07      	cmp	r2, #7
    5966:	f77f ae11 	ble.w	558c <_svfprintf_r+0xac4>
    596a:	e72c      	b.n	57c6 <_svfprintf_r+0xcfe>
    596c:	aa1b      	add	r2, sp, #108	; 0x6c
    596e:	9903      	ldr	r1, [sp, #12]
    5970:	9805      	ldr	r0, [sp, #20]
    5972:	f000 fb61 	bl	6038 <__ssprint_r>
    5976:	2800      	cmp	r0, #0
    5978:	f47f a99c 	bne.w	4cb4 <_svfprintf_r+0x1ec>
    597c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    597e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    5980:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    5984:	e5df      	b.n	5546 <_svfprintf_r+0xa7e>
    5986:	aa1b      	add	r2, sp, #108	; 0x6c
    5988:	9903      	ldr	r1, [sp, #12]
    598a:	9805      	ldr	r0, [sp, #20]
    598c:	f000 fb54 	bl	6038 <__ssprint_r>
    5990:	2800      	cmp	r0, #0
    5992:	f47f a98f 	bne.w	4cb4 <_svfprintf_r+0x1ec>
    5996:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    5998:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    599a:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    599e:	e5e1      	b.n	5564 <_svfprintf_r+0xa9c>
    59a0:	aa1b      	add	r2, sp, #108	; 0x6c
    59a2:	9903      	ldr	r1, [sp, #12]
    59a4:	9805      	ldr	r0, [sp, #20]
    59a6:	f000 fb47 	bl	6038 <__ssprint_r>
    59aa:	2800      	cmp	r0, #0
    59ac:	f47f a982 	bne.w	4cb4 <_svfprintf_r+0x1ec>
    59b0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    59b2:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    59b6:	f7ff baeb 	b.w	4f90 <_svfprintf_r+0x4c8>
    59ba:	9709      	str	r7, [sp, #36]	; 0x24
    59bc:	2700      	movs	r7, #0
    59be:	f7ff b9a5 	b.w	4d0c <_svfprintf_r+0x244>
    59c2:	bf00      	nop
    59c4:	20000398 	.word	0x20000398
    59c8:	f01b 0f10 	tst.w	fp, #16
    59cc:	d10b      	bne.n	59e6 <_svfprintf_r+0xf1e>
    59ce:	f01b 0f40 	tst.w	fp, #64	; 0x40
    59d2:	d008      	beq.n	59e6 <_svfprintf_r+0xf1e>
    59d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    59d6:	6813      	ldr	r3, [r2, #0]
    59d8:	3204      	adds	r2, #4
    59da:	9209      	str	r2, [sp, #36]	; 0x24
    59dc:	f8bd 2018 	ldrh.w	r2, [sp, #24]
    59e0:	801a      	strh	r2, [r3, #0]
    59e2:	f7ff b897 	b.w	4b14 <_svfprintf_r+0x4c>
    59e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    59e8:	6813      	ldr	r3, [r2, #0]
    59ea:	3204      	adds	r2, #4
    59ec:	9209      	str	r2, [sp, #36]	; 0x24
    59ee:	9a06      	ldr	r2, [sp, #24]
    59f0:	601a      	str	r2, [r3, #0]
    59f2:	f7ff b88f 	b.w	4b14 <_svfprintf_r+0x4c>
    59f6:	eeb4 8b48 	vcmp.f64	d8, d8
    59fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    59fe:	f180 829e 	bvs.w	5f3e <_svfprintf_r+0x1476>
    5a02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5a04:	f1b8 3fff 	cmp.w	r8, #4294967295
    5a08:	f023 0520 	bic.w	r5, r3, #32
    5a0c:	f000 8225 	beq.w	5e5a <_svfprintf_r+0x1392>
    5a10:	2d47      	cmp	r5, #71	; 0x47
    5a12:	f000 8126 	beq.w	5c62 <_svfprintf_r+0x119a>
    5a16:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
    5a1a:	930a      	str	r3, [sp, #40]	; 0x28
    5a1c:	ee18 3a90 	vmov	r3, s17
    5a20:	2b00      	cmp	r3, #0
    5a22:	f2c0 821d 	blt.w	5e60 <_svfprintf_r+0x1398>
    5a26:	eeb0 ab48 	vmov.f64	d10, d8
    5a2a:	2700      	movs	r7, #0
    5a2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5a2e:	2b66      	cmp	r3, #102	; 0x66
    5a30:	f000 8202 	beq.w	5e38 <_svfprintf_r+0x1370>
    5a34:	2b46      	cmp	r3, #70	; 0x46
    5a36:	f000 80ec 	beq.w	5c12 <_svfprintf_r+0x114a>
    5a3a:	eeb0 0b4a 	vmov.f64	d0, d10
    5a3e:	2d45      	cmp	r5, #69	; 0x45
    5a40:	bf0c      	ite	eq
    5a42:	f108 0401 	addeq.w	r4, r8, #1
    5a46:	4644      	movne	r4, r8
    5a48:	aa19      	add	r2, sp, #100	; 0x64
    5a4a:	ab16      	add	r3, sp, #88	; 0x58
    5a4c:	9201      	str	r2, [sp, #4]
    5a4e:	9300      	str	r3, [sp, #0]
    5a50:	4622      	mov	r2, r4
    5a52:	ab15      	add	r3, sp, #84	; 0x54
    5a54:	2102      	movs	r1, #2
    5a56:	9805      	ldr	r0, [sp, #20]
    5a58:	f7fe f9f2 	bl	3e40 <_dtoa_r>
    5a5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5a5e:	2b67      	cmp	r3, #103	; 0x67
    5a60:	4606      	mov	r6, r0
    5a62:	f040 820e 	bne.w	5e82 <_svfprintf_r+0x13ba>
    5a66:	f01b 0f01 	tst.w	fp, #1
    5a6a:	f000 8266 	beq.w	5f3a <_svfprintf_r+0x1472>
    5a6e:	1931      	adds	r1, r6, r4
    5a70:	eeb5 ab40 	vcmp.f64	d10, #0.0
    5a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5a78:	f000 8185 	beq.w	5d86 <_svfprintf_r+0x12be>
    5a7c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    5a7e:	4299      	cmp	r1, r3
    5a80:	d906      	bls.n	5a90 <_svfprintf_r+0xfc8>
    5a82:	2030      	movs	r0, #48	; 0x30
    5a84:	1c5a      	adds	r2, r3, #1
    5a86:	9219      	str	r2, [sp, #100]	; 0x64
    5a88:	7018      	strb	r0, [r3, #0]
    5a8a:	9b19      	ldr	r3, [sp, #100]	; 0x64
    5a8c:	4299      	cmp	r1, r3
    5a8e:	d8f9      	bhi.n	5a84 <_svfprintf_r+0xfbc>
    5a90:	1b9b      	subs	r3, r3, r6
    5a92:	2d47      	cmp	r5, #71	; 0x47
    5a94:	930d      	str	r3, [sp, #52]	; 0x34
    5a96:	f000 811f 	beq.w	5cd8 <_svfprintf_r+0x1210>
    5a9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5a9c:	2b65      	cmp	r3, #101	; 0x65
    5a9e:	f340 81ff 	ble.w	5ea0 <_svfprintf_r+0x13d8>
    5aa2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5aa4:	2b66      	cmp	r3, #102	; 0x66
    5aa6:	9b15      	ldr	r3, [sp, #84]	; 0x54
    5aa8:	f000 81fc 	beq.w	5ea4 <_svfprintf_r+0x13dc>
    5aac:	930e      	str	r3, [sp, #56]	; 0x38
    5aae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    5ab0:	990d      	ldr	r1, [sp, #52]	; 0x34
    5ab2:	428a      	cmp	r2, r1
    5ab4:	f2c0 81d8 	blt.w	5e68 <_svfprintf_r+0x13a0>
    5ab8:	f01b 0f01 	tst.w	fp, #1
    5abc:	f040 8234 	bne.w	5f28 <_svfprintf_r+0x1460>
    5ac0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    5ac4:	9208      	str	r2, [sp, #32]
    5ac6:	2267      	movs	r2, #103	; 0x67
    5ac8:	920c      	str	r2, [sp, #48]	; 0x30
    5aca:	2f00      	cmp	r7, #0
    5acc:	f040 80f6 	bne.w	5cbc <_svfprintf_r+0x11f4>
    5ad0:	46b8      	mov	r8, r7
    5ad2:	9304      	str	r3, [sp, #16]
    5ad4:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
    5ad8:	f89d 704f 	ldrb.w	r7, [sp, #79]	; 0x4f
    5adc:	f7ff b9e6 	b.w	4eac <_svfprintf_r+0x3e4>
    5ae0:	f027 0707 	bic.w	r7, r7, #7
    5ae4:	f107 0308 	add.w	r3, r7, #8
    5ae8:	ed97 8b00 	vldr	d8, [r7]
    5aec:	9309      	str	r3, [sp, #36]	; 0x24
    5aee:	f7ff b9be 	b.w	4e6e <_svfprintf_r+0x3a6>
    5af2:	464e      	mov	r6, r9
    5af4:	4689      	mov	r9, r1
    5af6:	3201      	adds	r2, #1
    5af8:	4423      	add	r3, r4
    5afa:	2a07      	cmp	r2, #7
    5afc:	931d      	str	r3, [sp, #116]	; 0x74
    5afe:	921c      	str	r2, [sp, #112]	; 0x70
    5b00:	f8c9 7000 	str.w	r7, [r9]
    5b04:	f8c9 4004 	str.w	r4, [r9, #4]
    5b08:	f73f aebd 	bgt.w	5886 <_svfprintf_r+0xdbe>
    5b0c:	f109 0908 	add.w	r9, r9, #8
    5b10:	e6c4      	b.n	589c <_svfprintf_r+0xdd4>
    5b12:	2700      	movs	r7, #0
    5b14:	45b8      	cmp	r8, r7
    5b16:	f88d 704f 	strb.w	r7, [sp, #79]	; 0x4f
    5b1a:	f6ff ac54 	blt.w	53c6 <_svfprintf_r+0x8fe>
    5b1e:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    5b22:	e41e      	b.n	5362 <_svfprintf_r+0x89a>
    5b24:	aa1b      	add	r2, sp, #108	; 0x6c
    5b26:	9903      	ldr	r1, [sp, #12]
    5b28:	9805      	ldr	r0, [sp, #20]
    5b2a:	f000 fa85 	bl	6038 <__ssprint_r>
    5b2e:	2800      	cmp	r0, #0
    5b30:	f47f a8c0 	bne.w	4cb4 <_svfprintf_r+0x1ec>
    5b34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    5b36:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    5b3a:	e463      	b.n	5404 <_svfprintf_r+0x93c>
    5b3c:	9f09      	ldr	r7, [sp, #36]	; 0x24
    5b3e:	e43b      	b.n	53b8 <_svfprintf_r+0x8f0>
    5b40:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    5b42:	49b9      	ldr	r1, [pc, #740]	; (5e28 <_svfprintf_r+0x1360>)
    5b44:	f8c9 1000 	str.w	r1, [r9]
    5b48:	3201      	adds	r2, #1
    5b4a:	3301      	adds	r3, #1
    5b4c:	2101      	movs	r1, #1
    5b4e:	2a07      	cmp	r2, #7
    5b50:	931d      	str	r3, [sp, #116]	; 0x74
    5b52:	921c      	str	r2, [sp, #112]	; 0x70
    5b54:	f8c9 1004 	str.w	r1, [r9, #4]
    5b58:	dc76      	bgt.n	5c48 <_svfprintf_r+0x1180>
    5b5a:	f109 0908 	add.w	r9, r9, #8
    5b5e:	b92c      	cbnz	r4, 5b6c <_svfprintf_r+0x10a4>
    5b60:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    5b62:	b91a      	cbnz	r2, 5b6c <_svfprintf_r+0x10a4>
    5b64:	f01b 0f01 	tst.w	fp, #1
    5b68:	f43f aa5f 	beq.w	502a <_svfprintf_r+0x562>
    5b6c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    5b6e:	980f      	ldr	r0, [sp, #60]	; 0x3c
    5b70:	9910      	ldr	r1, [sp, #64]	; 0x40
    5b72:	f8c9 1000 	str.w	r1, [r9]
    5b76:	3201      	adds	r2, #1
    5b78:	4403      	add	r3, r0
    5b7a:	2a07      	cmp	r2, #7
    5b7c:	931d      	str	r3, [sp, #116]	; 0x74
    5b7e:	f8c9 0004 	str.w	r0, [r9, #4]
    5b82:	921c      	str	r2, [sp, #112]	; 0x70
    5b84:	f300 81b6 	bgt.w	5ef4 <_svfprintf_r+0x142c>
    5b88:	f109 0908 	add.w	r9, r9, #8
    5b8c:	4264      	negs	r4, r4
    5b8e:	2c00      	cmp	r4, #0
    5b90:	f340 8087 	ble.w	5ca2 <_svfprintf_r+0x11da>
    5b94:	2c10      	cmp	r4, #16
    5b96:	4fa5      	ldr	r7, [pc, #660]	; (5e2c <_svfprintf_r+0x1364>)
    5b98:	f340 8112 	ble.w	5dc0 <_svfprintf_r+0x12f8>
    5b9c:	4649      	mov	r1, r9
    5b9e:	2510      	movs	r5, #16
    5ba0:	46b1      	mov	r9, r6
    5ba2:	f8dd 8014 	ldr.w	r8, [sp, #20]
    5ba6:	9e03      	ldr	r6, [sp, #12]
    5ba8:	e004      	b.n	5bb4 <_svfprintf_r+0x10ec>
    5baa:	3108      	adds	r1, #8
    5bac:	3c10      	subs	r4, #16
    5bae:	2c10      	cmp	r4, #16
    5bb0:	f340 8104 	ble.w	5dbc <_svfprintf_r+0x12f4>
    5bb4:	3201      	adds	r2, #1
    5bb6:	3310      	adds	r3, #16
    5bb8:	2a07      	cmp	r2, #7
    5bba:	931d      	str	r3, [sp, #116]	; 0x74
    5bbc:	921c      	str	r2, [sp, #112]	; 0x70
    5bbe:	600f      	str	r7, [r1, #0]
    5bc0:	604d      	str	r5, [r1, #4]
    5bc2:	ddf2      	ble.n	5baa <_svfprintf_r+0x10e2>
    5bc4:	aa1b      	add	r2, sp, #108	; 0x6c
    5bc6:	4631      	mov	r1, r6
    5bc8:	4640      	mov	r0, r8
    5bca:	f000 fa35 	bl	6038 <__ssprint_r>
    5bce:	2800      	cmp	r0, #0
    5bd0:	f47f a870 	bne.w	4cb4 <_svfprintf_r+0x1ec>
    5bd4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    5bd6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    5bd8:	a928      	add	r1, sp, #160	; 0xa0
    5bda:	e7e7      	b.n	5bac <_svfprintf_r+0x10e4>
    5bdc:	aa1b      	add	r2, sp, #108	; 0x6c
    5bde:	9903      	ldr	r1, [sp, #12]
    5be0:	9805      	ldr	r0, [sp, #20]
    5be2:	f000 fa29 	bl	6038 <__ssprint_r>
    5be6:	2800      	cmp	r0, #0
    5be8:	f47f a864 	bne.w	4cb4 <_svfprintf_r+0x1ec>
    5bec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    5bee:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    5bf2:	e41f      	b.n	5434 <_svfprintf_r+0x96c>
    5bf4:	2140      	movs	r1, #64	; 0x40
    5bf6:	9805      	ldr	r0, [sp, #20]
    5bf8:	f7fc fd1e 	bl	2638 <_malloc_r>
    5bfc:	9a03      	ldr	r2, [sp, #12]
    5bfe:	6010      	str	r0, [r2, #0]
    5c00:	6110      	str	r0, [r2, #16]
    5c02:	2800      	cmp	r0, #0
    5c04:	f000 81ed 	beq.w	5fe2 <_svfprintf_r+0x151a>
    5c08:	9a03      	ldr	r2, [sp, #12]
    5c0a:	2340      	movs	r3, #64	; 0x40
    5c0c:	6153      	str	r3, [r2, #20]
    5c0e:	f7fe bf74 	b.w	4afa <_svfprintf_r+0x32>
    5c12:	aa19      	add	r2, sp, #100	; 0x64
    5c14:	ab16      	add	r3, sp, #88	; 0x58
    5c16:	9201      	str	r2, [sp, #4]
    5c18:	9300      	str	r3, [sp, #0]
    5c1a:	4642      	mov	r2, r8
    5c1c:	ab15      	add	r3, sp, #84	; 0x54
    5c1e:	2103      	movs	r1, #3
    5c20:	eeb0 0b4a 	vmov.f64	d0, d10
    5c24:	9805      	ldr	r0, [sp, #20]
    5c26:	f7fe f90b 	bl	3e40 <_dtoa_r>
    5c2a:	4644      	mov	r4, r8
    5c2c:	4606      	mov	r6, r0
    5c2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5c30:	2b46      	cmp	r3, #70	; 0x46
    5c32:	eb06 0104 	add.w	r1, r6, r4
    5c36:	f47f af1b 	bne.w	5a70 <_svfprintf_r+0xfa8>
    5c3a:	7833      	ldrb	r3, [r6, #0]
    5c3c:	2b30      	cmp	r3, #48	; 0x30
    5c3e:	f000 818d 	beq.w	5f5c <_svfprintf_r+0x1494>
    5c42:	9c15      	ldr	r4, [sp, #84]	; 0x54
    5c44:	4421      	add	r1, r4
    5c46:	e713      	b.n	5a70 <_svfprintf_r+0xfa8>
    5c48:	aa1b      	add	r2, sp, #108	; 0x6c
    5c4a:	9903      	ldr	r1, [sp, #12]
    5c4c:	9805      	ldr	r0, [sp, #20]
    5c4e:	f000 f9f3 	bl	6038 <__ssprint_r>
    5c52:	2800      	cmp	r0, #0
    5c54:	f47f a82e 	bne.w	4cb4 <_svfprintf_r+0x1ec>
    5c58:	9c15      	ldr	r4, [sp, #84]	; 0x54
    5c5a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    5c5c:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    5c60:	e77d      	b.n	5b5e <_svfprintf_r+0x1096>
    5c62:	f1b8 0f00 	cmp.w	r8, #0
    5c66:	bf08      	it	eq
    5c68:	f04f 0801 	moveq.w	r8, #1
    5c6c:	e6d3      	b.n	5a16 <_svfprintf_r+0xf4e>
    5c6e:	9309      	str	r3, [sp, #36]	; 0x24
    5c70:	e6a4      	b.n	59bc <_svfprintf_r+0xef4>
    5c72:	9309      	str	r3, [sp, #36]	; 0x24
    5c74:	4617      	mov	r7, r2
    5c76:	f7ff ba7b 	b.w	5170 <_svfprintf_r+0x6a8>
    5c7a:	4630      	mov	r0, r6
    5c7c:	f7fd fa80 	bl	3180 <strlen>
    5c80:	46a0      	mov	r8, r4
    5c82:	4603      	mov	r3, r0
    5c84:	9008      	str	r0, [sp, #32]
    5c86:	f7ff bb61 	b.w	534c <_svfprintf_r+0x884>
    5c8a:	aa1b      	add	r2, sp, #108	; 0x6c
    5c8c:	9903      	ldr	r1, [sp, #12]
    5c8e:	9805      	ldr	r0, [sp, #20]
    5c90:	f000 f9d2 	bl	6038 <__ssprint_r>
    5c94:	2800      	cmp	r0, #0
    5c96:	f47f a80d 	bne.w	4cb4 <_svfprintf_r+0x1ec>
    5c9a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    5c9c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    5c9e:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    5ca2:	980d      	ldr	r0, [sp, #52]	; 0x34
    5ca4:	f8c9 6000 	str.w	r6, [r9]
    5ca8:	3201      	adds	r2, #1
    5caa:	4403      	add	r3, r0
    5cac:	2a07      	cmp	r2, #7
    5cae:	931d      	str	r3, [sp, #116]	; 0x74
    5cb0:	921c      	str	r2, [sp, #112]	; 0x70
    5cb2:	f8c9 0004 	str.w	r0, [r9, #4]
    5cb6:	f77f a9b6 	ble.w	5026 <_svfprintf_r+0x55e>
    5cba:	e476      	b.n	55aa <_svfprintf_r+0xae2>
    5cbc:	272d      	movs	r7, #45	; 0x2d
    5cbe:	9304      	str	r3, [sp, #16]
    5cc0:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
    5cc4:	f88d 704f 	strb.w	r7, [sp, #79]	; 0x4f
    5cc8:	f04f 0800 	mov.w	r8, #0
    5ccc:	f7ff b8ef 	b.w	4eae <_svfprintf_r+0x3e6>
    5cd0:	9709      	str	r7, [sp, #36]	; 0x24
    5cd2:	461f      	mov	r7, r3
    5cd4:	f7ff ba4c 	b.w	5170 <_svfprintf_r+0x6a8>
    5cd8:	9b15      	ldr	r3, [sp, #84]	; 0x54
    5cda:	1cda      	adds	r2, r3, #3
    5cdc:	db02      	blt.n	5ce4 <_svfprintf_r+0x121c>
    5cde:	4598      	cmp	r8, r3
    5ce0:	f6bf aee4 	bge.w	5aac <_svfprintf_r+0xfe4>
    5ce4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    5ce6:	3a02      	subs	r2, #2
    5ce8:	920c      	str	r2, [sp, #48]	; 0x30
    5cea:	3b01      	subs	r3, #1
    5cec:	2b00      	cmp	r3, #0
    5cee:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    5cf2:	9315      	str	r3, [sp, #84]	; 0x54
    5cf4:	bfb8      	it	lt
    5cf6:	425b      	neglt	r3, r3
    5cf8:	f88d 205c 	strb.w	r2, [sp, #92]	; 0x5c
    5cfc:	bfb4      	ite	lt
    5cfe:	222d      	movlt	r2, #45	; 0x2d
    5d00:	222b      	movge	r2, #43	; 0x2b
    5d02:	2b09      	cmp	r3, #9
    5d04:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
    5d08:	f340 8106 	ble.w	5f18 <_svfprintf_r+0x1450>
    5d0c:	f10d 006b 	add.w	r0, sp, #107	; 0x6b
    5d10:	4604      	mov	r4, r0
    5d12:	4a47      	ldr	r2, [pc, #284]	; (5e30 <_svfprintf_r+0x1368>)
    5d14:	fb82 2103 	smull	r2, r1, r2, r3
    5d18:	17da      	asrs	r2, r3, #31
    5d1a:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
    5d1e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    5d22:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
    5d26:	f103 0130 	add.w	r1, r3, #48	; 0x30
    5d2a:	2a09      	cmp	r2, #9
    5d2c:	4613      	mov	r3, r2
    5d2e:	f804 1d01 	strb.w	r1, [r4, #-1]!
    5d32:	dcee      	bgt.n	5d12 <_svfprintf_r+0x124a>
    5d34:	4621      	mov	r1, r4
    5d36:	3330      	adds	r3, #48	; 0x30
    5d38:	b2da      	uxtb	r2, r3
    5d3a:	f801 2d01 	strb.w	r2, [r1, #-1]!
    5d3e:	4288      	cmp	r0, r1
    5d40:	f240 8162 	bls.w	6008 <_svfprintf_r+0x1540>
    5d44:	f10d 015e 	add.w	r1, sp, #94	; 0x5e
    5d48:	4623      	mov	r3, r4
    5d4a:	e001      	b.n	5d50 <_svfprintf_r+0x1288>
    5d4c:	f813 2b01 	ldrb.w	r2, [r3], #1
    5d50:	f801 2b01 	strb.w	r2, [r1], #1
    5d54:	4298      	cmp	r0, r3
    5d56:	d1f9      	bne.n	5d4c <_svfprintf_r+0x1284>
    5d58:	1c43      	adds	r3, r0, #1
    5d5a:	1b1b      	subs	r3, r3, r4
    5d5c:	f10d 025e 	add.w	r2, sp, #94	; 0x5e
    5d60:	4413      	add	r3, r2
    5d62:	aa17      	add	r2, sp, #92	; 0x5c
    5d64:	1a9b      	subs	r3, r3, r2
    5d66:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    5d68:	9311      	str	r3, [sp, #68]	; 0x44
    5d6a:	2a01      	cmp	r2, #1
    5d6c:	4413      	add	r3, r2
    5d6e:	9308      	str	r3, [sp, #32]
    5d70:	f340 80ff 	ble.w	5f72 <_svfprintf_r+0x14aa>
    5d74:	9b08      	ldr	r3, [sp, #32]
    5d76:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    5d78:	4413      	add	r3, r2
    5d7a:	2200      	movs	r2, #0
    5d7c:	9308      	str	r3, [sp, #32]
    5d7e:	920e      	str	r2, [sp, #56]	; 0x38
    5d80:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    5d84:	e6a1      	b.n	5aca <_svfprintf_r+0x1002>
    5d86:	460b      	mov	r3, r1
    5d88:	e682      	b.n	5a90 <_svfprintf_r+0xfc8>
    5d8a:	aa1b      	add	r2, sp, #108	; 0x6c
    5d8c:	9903      	ldr	r1, [sp, #12]
    5d8e:	9805      	ldr	r0, [sp, #20]
    5d90:	f000 f952 	bl	6038 <__ssprint_r>
    5d94:	2800      	cmp	r0, #0
    5d96:	f47e af8d 	bne.w	4cb4 <_svfprintf_r+0x1ec>
    5d9a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    5d9c:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    5da0:	e483      	b.n	56aa <_svfprintf_r+0xbe2>
    5da2:	aa1b      	add	r2, sp, #108	; 0x6c
    5da4:	9903      	ldr	r1, [sp, #12]
    5da6:	9805      	ldr	r0, [sp, #20]
    5da8:	f000 f946 	bl	6038 <__ssprint_r>
    5dac:	2800      	cmp	r0, #0
    5dae:	f47e af81 	bne.w	4cb4 <_svfprintf_r+0x1ec>
    5db2:	9a15      	ldr	r2, [sp, #84]	; 0x54
    5db4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    5db6:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    5dba:	e579      	b.n	58b0 <_svfprintf_r+0xde8>
    5dbc:	464e      	mov	r6, r9
    5dbe:	4689      	mov	r9, r1
    5dc0:	3201      	adds	r2, #1
    5dc2:	4423      	add	r3, r4
    5dc4:	2a07      	cmp	r2, #7
    5dc6:	931d      	str	r3, [sp, #116]	; 0x74
    5dc8:	921c      	str	r2, [sp, #112]	; 0x70
    5dca:	f8c9 7000 	str.w	r7, [r9]
    5dce:	f8c9 4004 	str.w	r4, [r9, #4]
    5dd2:	f73f af5a 	bgt.w	5c8a <_svfprintf_r+0x11c2>
    5dd6:	f109 0908 	add.w	r9, r9, #8
    5dda:	e762      	b.n	5ca2 <_svfprintf_r+0x11da>
    5ddc:	aa1b      	add	r2, sp, #108	; 0x6c
    5dde:	9903      	ldr	r1, [sp, #12]
    5de0:	9805      	ldr	r0, [sp, #20]
    5de2:	f000 f929 	bl	6038 <__ssprint_r>
    5de6:	2800      	cmp	r0, #0
    5de8:	f47e af64 	bne.w	4cb4 <_svfprintf_r+0x1ec>
    5dec:	9a15      	ldr	r2, [sp, #84]	; 0x54
    5dee:	990d      	ldr	r1, [sp, #52]	; 0x34
    5df0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    5df2:	1a8a      	subs	r2, r1, r2
    5df4:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    5df8:	e572      	b.n	58e0 <_svfprintf_r+0xe18>
    5dfa:	2d06      	cmp	r5, #6
    5dfc:	462b      	mov	r3, r5
    5dfe:	bf28      	it	cs
    5e00:	2306      	movcs	r3, #6
    5e02:	9308      	str	r3, [sp, #32]
    5e04:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    5e08:	46b0      	mov	r8, r6
    5e0a:	9709      	str	r7, [sp, #36]	; 0x24
    5e0c:	960e      	str	r6, [sp, #56]	; 0x38
    5e0e:	4637      	mov	r7, r6
    5e10:	9304      	str	r3, [sp, #16]
    5e12:	4e08      	ldr	r6, [pc, #32]	; (5e34 <_svfprintf_r+0x136c>)
    5e14:	f7ff b84a 	b.w	4eac <_svfprintf_r+0x3e4>
    5e18:	469b      	mov	fp, r3
    5e1a:	f7ff b9ea 	b.w	51f2 <_svfprintf_r+0x72a>
    5e1e:	272d      	movs	r7, #45	; 0x2d
    5e20:	f88d 704f 	strb.w	r7, [sp, #79]	; 0x4f
    5e24:	f7ff b833 	b.w	4e8e <_svfprintf_r+0x3c6>
    5e28:	20000394 	.word	0x20000394
    5e2c:	20000398 	.word	0x20000398
    5e30:	66666667 	.word	0x66666667
    5e34:	200003e0 	.word	0x200003e0
    5e38:	aa19      	add	r2, sp, #100	; 0x64
    5e3a:	ab16      	add	r3, sp, #88	; 0x58
    5e3c:	9201      	str	r2, [sp, #4]
    5e3e:	9300      	str	r3, [sp, #0]
    5e40:	2103      	movs	r1, #3
    5e42:	ab15      	add	r3, sp, #84	; 0x54
    5e44:	4642      	mov	r2, r8
    5e46:	eeb0 0b4a 	vmov.f64	d0, d10
    5e4a:	9805      	ldr	r0, [sp, #20]
    5e4c:	f7fd fff8 	bl	3e40 <_dtoa_r>
    5e50:	4644      	mov	r4, r8
    5e52:	4606      	mov	r6, r0
    5e54:	eb00 0108 	add.w	r1, r0, r8
    5e58:	e6ef      	b.n	5c3a <_svfprintf_r+0x1172>
    5e5a:	f04f 0806 	mov.w	r8, #6
    5e5e:	e5da      	b.n	5a16 <_svfprintf_r+0xf4e>
    5e60:	eeb1 ab48 	vneg.f64	d10, d8
    5e64:	272d      	movs	r7, #45	; 0x2d
    5e66:	e5e1      	b.n	5a2c <_svfprintf_r+0xf64>
    5e68:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    5e6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    5e6c:	4413      	add	r3, r2
    5e6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    5e70:	9308      	str	r3, [sp, #32]
    5e72:	2a00      	cmp	r2, #0
    5e74:	f340 8086 	ble.w	5f84 <_svfprintf_r+0x14bc>
    5e78:	2267      	movs	r2, #103	; 0x67
    5e7a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    5e7e:	920c      	str	r2, [sp, #48]	; 0x30
    5e80:	e623      	b.n	5aca <_svfprintf_r+0x1002>
    5e82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5e84:	2b47      	cmp	r3, #71	; 0x47
    5e86:	f47f adf2 	bne.w	5a6e <_svfprintf_r+0xfa6>
    5e8a:	f01b 0f01 	tst.w	fp, #1
    5e8e:	f47f aece 	bne.w	5c2e <_svfprintf_r+0x1166>
    5e92:	9b19      	ldr	r3, [sp, #100]	; 0x64
    5e94:	2d47      	cmp	r5, #71	; 0x47
    5e96:	eba3 0306 	sub.w	r3, r3, r6
    5e9a:	930d      	str	r3, [sp, #52]	; 0x34
    5e9c:	f43f af1c 	beq.w	5cd8 <_svfprintf_r+0x1210>
    5ea0:	9b15      	ldr	r3, [sp, #84]	; 0x54
    5ea2:	e722      	b.n	5cea <_svfprintf_r+0x1222>
    5ea4:	2b00      	cmp	r3, #0
    5ea6:	461a      	mov	r2, r3
    5ea8:	930e      	str	r3, [sp, #56]	; 0x38
    5eaa:	dd73      	ble.n	5f94 <_svfprintf_r+0x14cc>
    5eac:	f1b8 0f00 	cmp.w	r8, #0
    5eb0:	d14b      	bne.n	5f4a <_svfprintf_r+0x1482>
    5eb2:	f01b 0f01 	tst.w	fp, #1
    5eb6:	d148      	bne.n	5f4a <_svfprintf_r+0x1482>
    5eb8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    5ebc:	9208      	str	r2, [sp, #32]
    5ebe:	e604      	b.n	5aca <_svfprintf_r+0x1002>
    5ec0:	f01b 0f01 	tst.w	fp, #1
    5ec4:	4647      	mov	r7, r8
    5ec6:	d005      	beq.n	5ed4 <_svfprintf_r+0x140c>
    5ec8:	ae38      	add	r6, sp, #224	; 0xe0
    5eca:	2330      	movs	r3, #48	; 0x30
    5ecc:	f806 3d41 	strb.w	r3, [r6, #-65]!
    5ed0:	f7ff b956 	b.w	5180 <_svfprintf_r+0x6b8>
    5ed4:	f8cd 8020 	str.w	r8, [sp, #32]
    5ed8:	ae28      	add	r6, sp, #160	; 0xa0
    5eda:	f7ff b954 	b.w	5186 <_svfprintf_r+0x6be>
    5ede:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
    5ee2:	9709      	str	r7, [sp, #36]	; 0x24
    5ee4:	9304      	str	r3, [sp, #16]
    5ee6:	9508      	str	r5, [sp, #32]
    5ee8:	4680      	mov	r8, r0
    5eea:	900e      	str	r0, [sp, #56]	; 0x38
    5eec:	f89d 704f 	ldrb.w	r7, [sp, #79]	; 0x4f
    5ef0:	f7fe bfdc 	b.w	4eac <_svfprintf_r+0x3e4>
    5ef4:	aa1b      	add	r2, sp, #108	; 0x6c
    5ef6:	9903      	ldr	r1, [sp, #12]
    5ef8:	9805      	ldr	r0, [sp, #20]
    5efa:	f000 f89d 	bl	6038 <__ssprint_r>
    5efe:	2800      	cmp	r0, #0
    5f00:	f47e aed8 	bne.w	4cb4 <_svfprintf_r+0x1ec>
    5f04:	9c15      	ldr	r4, [sp, #84]	; 0x54
    5f06:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    5f08:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    5f0a:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    5f0e:	e63d      	b.n	5b8c <_svfprintf_r+0x10c4>
    5f10:	46a2      	mov	sl, r4
    5f12:	2500      	movs	r5, #0
    5f14:	f7fe be33 	b.w	4b7e <_svfprintf_r+0xb6>
    5f18:	3330      	adds	r3, #48	; 0x30
    5f1a:	2230      	movs	r2, #48	; 0x30
    5f1c:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
    5f20:	f88d 205e 	strb.w	r2, [sp, #94]	; 0x5e
    5f24:	ab18      	add	r3, sp, #96	; 0x60
    5f26:	e71c      	b.n	5d62 <_svfprintf_r+0x129a>
    5f28:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    5f2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    5f2c:	4413      	add	r3, r2
    5f2e:	2267      	movs	r2, #103	; 0x67
    5f30:	9308      	str	r3, [sp, #32]
    5f32:	920c      	str	r2, [sp, #48]	; 0x30
    5f34:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    5f38:	e5c7      	b.n	5aca <_svfprintf_r+0x1002>
    5f3a:	9b19      	ldr	r3, [sp, #100]	; 0x64
    5f3c:	e5a8      	b.n	5a90 <_svfprintf_r+0xfc8>
    5f3e:	4e3c      	ldr	r6, [pc, #240]	; (6030 <_svfprintf_r+0x1568>)
    5f40:	4b3c      	ldr	r3, [pc, #240]	; (6034 <_svfprintf_r+0x156c>)
    5f42:	f89d 704f 	ldrb.w	r7, [sp, #79]	; 0x4f
    5f46:	f7fe bfa4 	b.w	4e92 <_svfprintf_r+0x3ca>
    5f4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    5f4c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    5f4e:	189d      	adds	r5, r3, r2
    5f50:	eb05 0308 	add.w	r3, r5, r8
    5f54:	9308      	str	r3, [sp, #32]
    5f56:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    5f5a:	e5b6      	b.n	5aca <_svfprintf_r+0x1002>
    5f5c:	eeb5 ab40 	vcmp.f64	d10, #0.0
    5f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5f64:	f43f ae6d 	beq.w	5c42 <_svfprintf_r+0x117a>
    5f68:	f1c4 0401 	rsb	r4, r4, #1
    5f6c:	9415      	str	r4, [sp, #84]	; 0x54
    5f6e:	4421      	add	r1, r4
    5f70:	e57e      	b.n	5a70 <_svfprintf_r+0xfa8>
    5f72:	f01b 0301 	ands.w	r3, fp, #1
    5f76:	f47f aefd 	bne.w	5d74 <_svfprintf_r+0x12ac>
    5f7a:	930e      	str	r3, [sp, #56]	; 0x38
    5f7c:	9b08      	ldr	r3, [sp, #32]
    5f7e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    5f82:	e5a2      	b.n	5aca <_svfprintf_r+0x1002>
    5f84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    5f86:	9a08      	ldr	r2, [sp, #32]
    5f88:	f1c3 0301 	rsb	r3, r3, #1
    5f8c:	441a      	add	r2, r3
    5f8e:	4613      	mov	r3, r2
    5f90:	9208      	str	r2, [sp, #32]
    5f92:	e771      	b.n	5e78 <_svfprintf_r+0x13b0>
    5f94:	f1b8 0f00 	cmp.w	r8, #0
    5f98:	d102      	bne.n	5fa0 <_svfprintf_r+0x14d8>
    5f9a:	f01b 0f01 	tst.w	fp, #1
    5f9e:	d007      	beq.n	5fb0 <_svfprintf_r+0x14e8>
    5fa0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5fa2:	1c5d      	adds	r5, r3, #1
    5fa4:	eb05 0308 	add.w	r3, r5, r8
    5fa8:	9308      	str	r3, [sp, #32]
    5faa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    5fae:	e58c      	b.n	5aca <_svfprintf_r+0x1002>
    5fb0:	2301      	movs	r3, #1
    5fb2:	9308      	str	r3, [sp, #32]
    5fb4:	e589      	b.n	5aca <_svfprintf_r+0x1002>
    5fb6:	9809      	ldr	r0, [sp, #36]	; 0x24
    5fb8:	f89a 3001 	ldrb.w	r3, [sl, #1]
    5fbc:	6805      	ldr	r5, [r0, #0]
    5fbe:	3004      	adds	r0, #4
    5fc0:	2d00      	cmp	r5, #0
    5fc2:	9009      	str	r0, [sp, #36]	; 0x24
    5fc4:	46a2      	mov	sl, r4
    5fc6:	f6be add8 	bge.w	4b7a <_svfprintf_r+0xb2>
    5fca:	f04f 35ff 	mov.w	r5, #4294967295
    5fce:	f7fe bdd4 	b.w	4b7a <_svfprintf_r+0xb2>
    5fd2:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    5fd6:	f7ff b98d 	b.w	52f4 <_svfprintf_r+0x82c>
    5fda:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    5fde:	f7ff b9cf 	b.w	5380 <_svfprintf_r+0x8b8>
    5fe2:	9a05      	ldr	r2, [sp, #20]
    5fe4:	230c      	movs	r3, #12
    5fe6:	6013      	str	r3, [r2, #0]
    5fe8:	f04f 30ff 	mov.w	r0, #4294967295
    5fec:	f7fe be6b 	b.w	4cc6 <_svfprintf_r+0x1fe>
    5ff0:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    5ff4:	f7ff b8d4 	b.w	51a0 <_svfprintf_r+0x6d8>
    5ff8:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    5ffc:	f7ff b8a3 	b.w	5146 <_svfprintf_r+0x67e>
    6000:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    6004:	f7ff b952 	b.w	52ac <_svfprintf_r+0x7e4>
    6008:	f10d 035e 	add.w	r3, sp, #94	; 0x5e
    600c:	e6a9      	b.n	5d62 <_svfprintf_r+0x129a>
    600e:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    6012:	f7fe be62 	b.w	4cda <_svfprintf_r+0x212>
    6016:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    601a:	f7ff b862 	b.w	50e2 <_svfprintf_r+0x61a>
    601e:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    6022:	f7fe bf16 	b.w	4e52 <_svfprintf_r+0x38a>
    6026:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    602a:	f7fe bed0 	b.w	4dce <_svfprintf_r+0x306>
    602e:	bf00      	nop
    6030:	200003b4 	.word	0x200003b4
    6034:	200003b0 	.word	0x200003b0

00006038 <__ssprint_r>:
    6038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    603c:	6893      	ldr	r3, [r2, #8]
    603e:	b083      	sub	sp, #12
    6040:	4690      	mov	r8, r2
    6042:	2b00      	cmp	r3, #0
    6044:	d072      	beq.n	612c <__ssprint_r+0xf4>
    6046:	4683      	mov	fp, r0
    6048:	f04f 0900 	mov.w	r9, #0
    604c:	6816      	ldr	r6, [r2, #0]
    604e:	6808      	ldr	r0, [r1, #0]
    6050:	688b      	ldr	r3, [r1, #8]
    6052:	460d      	mov	r5, r1
    6054:	464c      	mov	r4, r9
    6056:	2c00      	cmp	r4, #0
    6058:	d045      	beq.n	60e6 <__ssprint_r+0xae>
    605a:	429c      	cmp	r4, r3
    605c:	461f      	mov	r7, r3
    605e:	469a      	mov	sl, r3
    6060:	d346      	bcc.n	60f0 <__ssprint_r+0xb8>
    6062:	89ab      	ldrh	r3, [r5, #12]
    6064:	f413 6f90 	tst.w	r3, #1152	; 0x480
    6068:	d02d      	beq.n	60c6 <__ssprint_r+0x8e>
    606a:	696f      	ldr	r7, [r5, #20]
    606c:	6929      	ldr	r1, [r5, #16]
    606e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
    6072:	ebc1 0a00 	rsb	sl, r1, r0
    6076:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
    607a:	1c60      	adds	r0, r4, #1
    607c:	107f      	asrs	r7, r7, #1
    607e:	4450      	add	r0, sl
    6080:	42b8      	cmp	r0, r7
    6082:	463a      	mov	r2, r7
    6084:	bf84      	itt	hi
    6086:	4607      	movhi	r7, r0
    6088:	463a      	movhi	r2, r7
    608a:	055b      	lsls	r3, r3, #21
    608c:	d533      	bpl.n	60f6 <__ssprint_r+0xbe>
    608e:	4611      	mov	r1, r2
    6090:	4658      	mov	r0, fp
    6092:	f7fc fad1 	bl	2638 <_malloc_r>
    6096:	2800      	cmp	r0, #0
    6098:	d037      	beq.n	610a <__ssprint_r+0xd2>
    609a:	4652      	mov	r2, sl
    609c:	6929      	ldr	r1, [r5, #16]
    609e:	9001      	str	r0, [sp, #4]
    60a0:	f7fc f9d8 	bl	2454 <memcpy>
    60a4:	89aa      	ldrh	r2, [r5, #12]
    60a6:	9b01      	ldr	r3, [sp, #4]
    60a8:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
    60ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    60b0:	81aa      	strh	r2, [r5, #12]
    60b2:	ebca 0207 	rsb	r2, sl, r7
    60b6:	eb03 000a 	add.w	r0, r3, sl
    60ba:	616f      	str	r7, [r5, #20]
    60bc:	612b      	str	r3, [r5, #16]
    60be:	6028      	str	r0, [r5, #0]
    60c0:	60aa      	str	r2, [r5, #8]
    60c2:	4627      	mov	r7, r4
    60c4:	46a2      	mov	sl, r4
    60c6:	4652      	mov	r2, sl
    60c8:	4649      	mov	r1, r9
    60ca:	f7fc fd83 	bl	2bd4 <memmove>
    60ce:	f8d8 2008 	ldr.w	r2, [r8, #8]
    60d2:	68ab      	ldr	r3, [r5, #8]
    60d4:	6828      	ldr	r0, [r5, #0]
    60d6:	1bdb      	subs	r3, r3, r7
    60d8:	4450      	add	r0, sl
    60da:	1b14      	subs	r4, r2, r4
    60dc:	60ab      	str	r3, [r5, #8]
    60de:	6028      	str	r0, [r5, #0]
    60e0:	f8c8 4008 	str.w	r4, [r8, #8]
    60e4:	b314      	cbz	r4, 612c <__ssprint_r+0xf4>
    60e6:	f8d6 9000 	ldr.w	r9, [r6]
    60ea:	6874      	ldr	r4, [r6, #4]
    60ec:	3608      	adds	r6, #8
    60ee:	e7b2      	b.n	6056 <__ssprint_r+0x1e>
    60f0:	4627      	mov	r7, r4
    60f2:	46a2      	mov	sl, r4
    60f4:	e7e7      	b.n	60c6 <__ssprint_r+0x8e>
    60f6:	4658      	mov	r0, fp
    60f8:	f7fc fe22 	bl	2d40 <_realloc_r>
    60fc:	4603      	mov	r3, r0
    60fe:	2800      	cmp	r0, #0
    6100:	d1d7      	bne.n	60b2 <__ssprint_r+0x7a>
    6102:	6929      	ldr	r1, [r5, #16]
    6104:	4658      	mov	r0, fp
    6106:	f7fd f94d 	bl	33a4 <_free_r>
    610a:	230c      	movs	r3, #12
    610c:	f8cb 3000 	str.w	r3, [fp]
    6110:	89ab      	ldrh	r3, [r5, #12]
    6112:	2200      	movs	r2, #0
    6114:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    6118:	f04f 30ff 	mov.w	r0, #4294967295
    611c:	81ab      	strh	r3, [r5, #12]
    611e:	f8c8 2008 	str.w	r2, [r8, #8]
    6122:	f8c8 2004 	str.w	r2, [r8, #4]
    6126:	b003      	add	sp, #12
    6128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    612c:	2000      	movs	r0, #0
    612e:	f8c8 0004 	str.w	r0, [r8, #4]
    6132:	b003      	add	sp, #12
    6134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00006138 <__aeabi_uldivmod>:
    6138:	b953      	cbnz	r3, 6150 <__aeabi_uldivmod+0x18>
    613a:	b94a      	cbnz	r2, 6150 <__aeabi_uldivmod+0x18>
    613c:	2900      	cmp	r1, #0
    613e:	bf08      	it	eq
    6140:	2800      	cmpeq	r0, #0
    6142:	bf1c      	itt	ne
    6144:	f04f 31ff 	movne.w	r1, #4294967295
    6148:	f04f 30ff 	movne.w	r0, #4294967295
    614c:	f000 b97e 	b.w	644c <__aeabi_idiv0>
    6150:	f1ad 0c08 	sub.w	ip, sp, #8
    6154:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    6158:	f000 f806 	bl	6168 <__udivmoddi4>
    615c:	f8dd e004 	ldr.w	lr, [sp, #4]
    6160:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    6164:	b004      	add	sp, #16
    6166:	4770      	bx	lr

00006168 <__udivmoddi4>:
    6168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    616c:	468c      	mov	ip, r1
    616e:	460e      	mov	r6, r1
    6170:	4604      	mov	r4, r0
    6172:	9d08      	ldr	r5, [sp, #32]
    6174:	2b00      	cmp	r3, #0
    6176:	d150      	bne.n	621a <__udivmoddi4+0xb2>
    6178:	428a      	cmp	r2, r1
    617a:	4617      	mov	r7, r2
    617c:	d96c      	bls.n	6258 <__udivmoddi4+0xf0>
    617e:	fab2 fe82 	clz	lr, r2
    6182:	f1be 0f00 	cmp.w	lr, #0
    6186:	d00b      	beq.n	61a0 <__udivmoddi4+0x38>
    6188:	f1ce 0420 	rsb	r4, lr, #32
    618c:	fa20 f404 	lsr.w	r4, r0, r4
    6190:	fa01 f60e 	lsl.w	r6, r1, lr
    6194:	ea44 0c06 	orr.w	ip, r4, r6
    6198:	fa02 f70e 	lsl.w	r7, r2, lr
    619c:	fa00 f40e 	lsl.w	r4, r0, lr
    61a0:	ea4f 4917 	mov.w	r9, r7, lsr #16
    61a4:	0c22      	lsrs	r2, r4, #16
    61a6:	fbbc f0f9 	udiv	r0, ip, r9
    61aa:	fa1f f887 	uxth.w	r8, r7
    61ae:	fb09 c610 	mls	r6, r9, r0, ip
    61b2:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    61b6:	fb00 f308 	mul.w	r3, r0, r8
    61ba:	42b3      	cmp	r3, r6
    61bc:	d909      	bls.n	61d2 <__udivmoddi4+0x6a>
    61be:	19f6      	adds	r6, r6, r7
    61c0:	f100 32ff 	add.w	r2, r0, #4294967295
    61c4:	f080 8122 	bcs.w	640c <__udivmoddi4+0x2a4>
    61c8:	42b3      	cmp	r3, r6
    61ca:	f240 811f 	bls.w	640c <__udivmoddi4+0x2a4>
    61ce:	3802      	subs	r0, #2
    61d0:	443e      	add	r6, r7
    61d2:	1af6      	subs	r6, r6, r3
    61d4:	b2a2      	uxth	r2, r4
    61d6:	fbb6 f3f9 	udiv	r3, r6, r9
    61da:	fb09 6613 	mls	r6, r9, r3, r6
    61de:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
    61e2:	fb03 f808 	mul.w	r8, r3, r8
    61e6:	45a0      	cmp	r8, r4
    61e8:	d909      	bls.n	61fe <__udivmoddi4+0x96>
    61ea:	19e4      	adds	r4, r4, r7
    61ec:	f103 32ff 	add.w	r2, r3, #4294967295
    61f0:	f080 810a 	bcs.w	6408 <__udivmoddi4+0x2a0>
    61f4:	45a0      	cmp	r8, r4
    61f6:	f240 8107 	bls.w	6408 <__udivmoddi4+0x2a0>
    61fa:	3b02      	subs	r3, #2
    61fc:	443c      	add	r4, r7
    61fe:	ebc8 0404 	rsb	r4, r8, r4
    6202:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    6206:	2100      	movs	r1, #0
    6208:	2d00      	cmp	r5, #0
    620a:	d062      	beq.n	62d2 <__udivmoddi4+0x16a>
    620c:	fa24 f40e 	lsr.w	r4, r4, lr
    6210:	2300      	movs	r3, #0
    6212:	602c      	str	r4, [r5, #0]
    6214:	606b      	str	r3, [r5, #4]
    6216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    621a:	428b      	cmp	r3, r1
    621c:	d907      	bls.n	622e <__udivmoddi4+0xc6>
    621e:	2d00      	cmp	r5, #0
    6220:	d055      	beq.n	62ce <__udivmoddi4+0x166>
    6222:	2100      	movs	r1, #0
    6224:	e885 0041 	stmia.w	r5, {r0, r6}
    6228:	4608      	mov	r0, r1
    622a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    622e:	fab3 f183 	clz	r1, r3
    6232:	2900      	cmp	r1, #0
    6234:	f040 8090 	bne.w	6358 <__udivmoddi4+0x1f0>
    6238:	42b3      	cmp	r3, r6
    623a:	d302      	bcc.n	6242 <__udivmoddi4+0xda>
    623c:	4282      	cmp	r2, r0
    623e:	f200 80f8 	bhi.w	6432 <__udivmoddi4+0x2ca>
    6242:	1a84      	subs	r4, r0, r2
    6244:	eb66 0603 	sbc.w	r6, r6, r3
    6248:	2001      	movs	r0, #1
    624a:	46b4      	mov	ip, r6
    624c:	2d00      	cmp	r5, #0
    624e:	d040      	beq.n	62d2 <__udivmoddi4+0x16a>
    6250:	e885 1010 	stmia.w	r5, {r4, ip}
    6254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6258:	b912      	cbnz	r2, 6260 <__udivmoddi4+0xf8>
    625a:	2701      	movs	r7, #1
    625c:	fbb7 f7f2 	udiv	r7, r7, r2
    6260:	fab7 fe87 	clz	lr, r7
    6264:	f1be 0f00 	cmp.w	lr, #0
    6268:	d135      	bne.n	62d6 <__udivmoddi4+0x16e>
    626a:	1bf3      	subs	r3, r6, r7
    626c:	ea4f 4817 	mov.w	r8, r7, lsr #16
    6270:	fa1f fc87 	uxth.w	ip, r7
    6274:	2101      	movs	r1, #1
    6276:	fbb3 f0f8 	udiv	r0, r3, r8
    627a:	0c22      	lsrs	r2, r4, #16
    627c:	fb08 3610 	mls	r6, r8, r0, r3
    6280:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    6284:	fb0c f300 	mul.w	r3, ip, r0
    6288:	42b3      	cmp	r3, r6
    628a:	d907      	bls.n	629c <__udivmoddi4+0x134>
    628c:	19f6      	adds	r6, r6, r7
    628e:	f100 32ff 	add.w	r2, r0, #4294967295
    6292:	d202      	bcs.n	629a <__udivmoddi4+0x132>
    6294:	42b3      	cmp	r3, r6
    6296:	f200 80ce 	bhi.w	6436 <__udivmoddi4+0x2ce>
    629a:	4610      	mov	r0, r2
    629c:	1af6      	subs	r6, r6, r3
    629e:	b2a2      	uxth	r2, r4
    62a0:	fbb6 f3f8 	udiv	r3, r6, r8
    62a4:	fb08 6613 	mls	r6, r8, r3, r6
    62a8:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
    62ac:	fb0c fc03 	mul.w	ip, ip, r3
    62b0:	45a4      	cmp	ip, r4
    62b2:	d907      	bls.n	62c4 <__udivmoddi4+0x15c>
    62b4:	19e4      	adds	r4, r4, r7
    62b6:	f103 32ff 	add.w	r2, r3, #4294967295
    62ba:	d202      	bcs.n	62c2 <__udivmoddi4+0x15a>
    62bc:	45a4      	cmp	ip, r4
    62be:	f200 80b5 	bhi.w	642c <__udivmoddi4+0x2c4>
    62c2:	4613      	mov	r3, r2
    62c4:	ebcc 0404 	rsb	r4, ip, r4
    62c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    62cc:	e79c      	b.n	6208 <__udivmoddi4+0xa0>
    62ce:	4629      	mov	r1, r5
    62d0:	4628      	mov	r0, r5
    62d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    62d6:	f1ce 0120 	rsb	r1, lr, #32
    62da:	fa06 f30e 	lsl.w	r3, r6, lr
    62de:	fa07 f70e 	lsl.w	r7, r7, lr
    62e2:	fa20 f901 	lsr.w	r9, r0, r1
    62e6:	ea4f 4817 	mov.w	r8, r7, lsr #16
    62ea:	40ce      	lsrs	r6, r1
    62ec:	ea49 0903 	orr.w	r9, r9, r3
    62f0:	fbb6 faf8 	udiv	sl, r6, r8
    62f4:	ea4f 4419 	mov.w	r4, r9, lsr #16
    62f8:	fb08 661a 	mls	r6, r8, sl, r6
    62fc:	fa1f fc87 	uxth.w	ip, r7
    6300:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
    6304:	fb0a f20c 	mul.w	r2, sl, ip
    6308:	429a      	cmp	r2, r3
    630a:	fa00 f40e 	lsl.w	r4, r0, lr
    630e:	d90a      	bls.n	6326 <__udivmoddi4+0x1be>
    6310:	19db      	adds	r3, r3, r7
    6312:	f10a 31ff 	add.w	r1, sl, #4294967295
    6316:	f080 8087 	bcs.w	6428 <__udivmoddi4+0x2c0>
    631a:	429a      	cmp	r2, r3
    631c:	f240 8084 	bls.w	6428 <__udivmoddi4+0x2c0>
    6320:	f1aa 0a02 	sub.w	sl, sl, #2
    6324:	443b      	add	r3, r7
    6326:	1a9b      	subs	r3, r3, r2
    6328:	fa1f f989 	uxth.w	r9, r9
    632c:	fbb3 f1f8 	udiv	r1, r3, r8
    6330:	fb08 3311 	mls	r3, r8, r1, r3
    6334:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
    6338:	fb01 f60c 	mul.w	r6, r1, ip
    633c:	429e      	cmp	r6, r3
    633e:	d907      	bls.n	6350 <__udivmoddi4+0x1e8>
    6340:	19db      	adds	r3, r3, r7
    6342:	f101 32ff 	add.w	r2, r1, #4294967295
    6346:	d26b      	bcs.n	6420 <__udivmoddi4+0x2b8>
    6348:	429e      	cmp	r6, r3
    634a:	d969      	bls.n	6420 <__udivmoddi4+0x2b8>
    634c:	3902      	subs	r1, #2
    634e:	443b      	add	r3, r7
    6350:	1b9b      	subs	r3, r3, r6
    6352:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
    6356:	e78e      	b.n	6276 <__udivmoddi4+0x10e>
    6358:	f1c1 0e20 	rsb	lr, r1, #32
    635c:	fa22 f40e 	lsr.w	r4, r2, lr
    6360:	408b      	lsls	r3, r1
    6362:	4323      	orrs	r3, r4
    6364:	fa20 f70e 	lsr.w	r7, r0, lr
    6368:	fa06 f401 	lsl.w	r4, r6, r1
    636c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    6370:	fa26 f60e 	lsr.w	r6, r6, lr
    6374:	433c      	orrs	r4, r7
    6376:	fbb6 f9fc 	udiv	r9, r6, ip
    637a:	0c27      	lsrs	r7, r4, #16
    637c:	fb0c 6619 	mls	r6, ip, r9, r6
    6380:	fa1f f883 	uxth.w	r8, r3
    6384:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
    6388:	fb09 f708 	mul.w	r7, r9, r8
    638c:	42b7      	cmp	r7, r6
    638e:	fa02 f201 	lsl.w	r2, r2, r1
    6392:	fa00 fa01 	lsl.w	sl, r0, r1
    6396:	d908      	bls.n	63aa <__udivmoddi4+0x242>
    6398:	18f6      	adds	r6, r6, r3
    639a:	f109 30ff 	add.w	r0, r9, #4294967295
    639e:	d241      	bcs.n	6424 <__udivmoddi4+0x2bc>
    63a0:	42b7      	cmp	r7, r6
    63a2:	d93f      	bls.n	6424 <__udivmoddi4+0x2bc>
    63a4:	f1a9 0902 	sub.w	r9, r9, #2
    63a8:	441e      	add	r6, r3
    63aa:	1bf6      	subs	r6, r6, r7
    63ac:	b2a0      	uxth	r0, r4
    63ae:	fbb6 f4fc 	udiv	r4, r6, ip
    63b2:	fb0c 6614 	mls	r6, ip, r4, r6
    63b6:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
    63ba:	fb04 f808 	mul.w	r8, r4, r8
    63be:	45b8      	cmp	r8, r7
    63c0:	d907      	bls.n	63d2 <__udivmoddi4+0x26a>
    63c2:	18ff      	adds	r7, r7, r3
    63c4:	f104 30ff 	add.w	r0, r4, #4294967295
    63c8:	d228      	bcs.n	641c <__udivmoddi4+0x2b4>
    63ca:	45b8      	cmp	r8, r7
    63cc:	d926      	bls.n	641c <__udivmoddi4+0x2b4>
    63ce:	3c02      	subs	r4, #2
    63d0:	441f      	add	r7, r3
    63d2:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
    63d6:	ebc8 0707 	rsb	r7, r8, r7
    63da:	fba0 8902 	umull	r8, r9, r0, r2
    63de:	454f      	cmp	r7, r9
    63e0:	4644      	mov	r4, r8
    63e2:	464e      	mov	r6, r9
    63e4:	d314      	bcc.n	6410 <__udivmoddi4+0x2a8>
    63e6:	d029      	beq.n	643c <__udivmoddi4+0x2d4>
    63e8:	b365      	cbz	r5, 6444 <__udivmoddi4+0x2dc>
    63ea:	ebba 0304 	subs.w	r3, sl, r4
    63ee:	eb67 0706 	sbc.w	r7, r7, r6
    63f2:	fa07 fe0e 	lsl.w	lr, r7, lr
    63f6:	40cb      	lsrs	r3, r1
    63f8:	40cf      	lsrs	r7, r1
    63fa:	ea4e 0303 	orr.w	r3, lr, r3
    63fe:	e885 0088 	stmia.w	r5, {r3, r7}
    6402:	2100      	movs	r1, #0
    6404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6408:	4613      	mov	r3, r2
    640a:	e6f8      	b.n	61fe <__udivmoddi4+0x96>
    640c:	4610      	mov	r0, r2
    640e:	e6e0      	b.n	61d2 <__udivmoddi4+0x6a>
    6410:	ebb8 0402 	subs.w	r4, r8, r2
    6414:	eb69 0603 	sbc.w	r6, r9, r3
    6418:	3801      	subs	r0, #1
    641a:	e7e5      	b.n	63e8 <__udivmoddi4+0x280>
    641c:	4604      	mov	r4, r0
    641e:	e7d8      	b.n	63d2 <__udivmoddi4+0x26a>
    6420:	4611      	mov	r1, r2
    6422:	e795      	b.n	6350 <__udivmoddi4+0x1e8>
    6424:	4681      	mov	r9, r0
    6426:	e7c0      	b.n	63aa <__udivmoddi4+0x242>
    6428:	468a      	mov	sl, r1
    642a:	e77c      	b.n	6326 <__udivmoddi4+0x1be>
    642c:	3b02      	subs	r3, #2
    642e:	443c      	add	r4, r7
    6430:	e748      	b.n	62c4 <__udivmoddi4+0x15c>
    6432:	4608      	mov	r0, r1
    6434:	e70a      	b.n	624c <__udivmoddi4+0xe4>
    6436:	3802      	subs	r0, #2
    6438:	443e      	add	r6, r7
    643a:	e72f      	b.n	629c <__udivmoddi4+0x134>
    643c:	45c2      	cmp	sl, r8
    643e:	d3e7      	bcc.n	6410 <__udivmoddi4+0x2a8>
    6440:	463e      	mov	r6, r7
    6442:	e7d1      	b.n	63e8 <__udivmoddi4+0x280>
    6444:	4629      	mov	r1, r5
    6446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    644a:	bf00      	nop

0000644c <__aeabi_idiv0>:
    644c:	4770      	bx	lr
    644e:	bf00      	nop

00006450 <___init_veneer>:
    6450:	f85f f000 	ldr.w	pc, [pc]	; 6454 <___init_veneer+0x4>
    6454:	60001729 	.word	0x60001729
	...

Disassembly of section .fini:

00006460 <_fini>:
    6460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6462:	bf00      	nop
