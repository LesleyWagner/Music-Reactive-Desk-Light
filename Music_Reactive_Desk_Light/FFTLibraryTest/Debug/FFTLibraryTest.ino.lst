
C:\Users\lesle\AppData\Local\Temp\VMBuilds\FFTLibraryTest\teensy40\Debug/FFTLibraryTest.ino.elf:     file format elf32-littlearm


Disassembly of section .text.progmem:

60000000 <FlexSPI_NOR_Config>:
60000000:	46 43 46 42 00 00 01 56 00 00 00 00 01 01 02 00     FCFB...V........
	...
60000044:	01 04 03 00 00 00 00 00 00 00 00 00 00 00 20 00     .............. .
	...
60000080:	eb 04 18 0a 06 32 04 26 00 00 00 00 00 00 00 00     .....2.&........
60000090:	05 04 04 24 00 00 00 00 00 00 00 00 00 00 00 00     ...$............
	...
600000b0:	06 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
600000d0:	20 04 18 08 00 00 00 00 00 00 00 00 00 00 00 00      ...............
	...
60000100:	d8 04 18 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
60000110:	02 04 18 08 04 20 00 00 00 00 00 00 00 00 00 00     ..... ..........
	...
60000130:	60 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     `...............
	...
600001c0:	00 01 00 00 00 10 00 00 01 00 00 00 00 00 00 00     ................
600001d0:	00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
60000200:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000210:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000220:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000230:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000240:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000250:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000260:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000270:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000280:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000290:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000300:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000310:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000320:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000330:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000340:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000350:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000360:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000370:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000380:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000390:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000400:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000410:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000420:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000430:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000440:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000450:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000460:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000470:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000480:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000490:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000500:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000510:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000520:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000530:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000540:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000550:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000560:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000570:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000580:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000590:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000600:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000610:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000620:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000630:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000640:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000650:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000660:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000670:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000680:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000690:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000700:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000710:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000720:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000730:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000740:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000750:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000760:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000770:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000780:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000790:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000800:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000810:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000820:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000830:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000840:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000850:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000860:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000870:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000880:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000890:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000900:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000910:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000920:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000930:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000940:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000950:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000960:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000970:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000980:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000990:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000aa0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ab0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ac0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ad0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ae0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000af0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ba0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000be0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bf0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ca0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ce0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cf0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000da0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000db0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000dc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000dd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000de0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000df0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ea0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000eb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ec0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ed0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ee0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ef0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fa0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fe0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ff0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................

60001000 <ImageVectorTable>:
60001000:	d1 00 20 40 2c 10 00 60 00 00 00 00 00 00 00 00     .. @,..`........
60001010:	20 10 00 60 00 10 00 60 00 00 00 00 00 00 00 00      ..`...`........

60001020 <BootData>:
60001020:	00 00 00 60 60 84 01 00 00 00 00 00                 ...``.......

6000102c <vector_table>:
6000102c:	00 00 01 20 35 10 00 60                             ... 5..`

60001034 <ResetHandler>:
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001034:	4b76      	ldr	r3, [pc, #472]	; (60001210 <ResetHandler+0x1dc>)
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001036:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103a:	4a76      	ldr	r2, [pc, #472]	; (60001214 <ResetHandler+0x1e0>)
	IOMUXC_GPR_GPR16 = 0x00200007;
6000103c:	4876      	ldr	r0, [pc, #472]	; (60001218 <ResetHandler+0x1e4>)
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103e:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001040:	6418      	str	r0, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001042:	4a76      	ldr	r2, [pc, #472]	; (6000121c <ResetHandler+0x1e8>)
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001044:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001046:	4695      	mov	sp, r2
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001048:	4a75      	ldr	r2, [pc, #468]	; (60001220 <ResetHandler+0x1ec>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
6000104a:	f503 3330 	add.w	r3, r3, #180224	; 0x2c000
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
6000104e:	4975      	ldr	r1, [pc, #468]	; (60001224 <ResetHandler+0x1f0>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001050:	2008      	movs	r0, #8
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001052:	428a      	cmp	r2, r1
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001054:	f8c3 0154 	str.w	r0, [r3, #340]	; 0x154
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001058:	d00f      	beq.n	6000107a <ResetHandler+0x46>
	while (dest < dest_end) {
6000105a:	4b73      	ldr	r3, [pc, #460]	; (60001228 <ResetHandler+0x1f4>)
6000105c:	429a      	cmp	r2, r3
6000105e:	d20c      	bcs.n	6000107a <ResetHandler+0x46>
60001060:	43d4      	mvns	r4, r2
60001062:	4608      	mov	r0, r1
60001064:	4423      	add	r3, r4
60001066:	f023 0303 	bic.w	r3, r3, #3
6000106a:	3304      	adds	r3, #4
6000106c:	440b      	add	r3, r1
		*dest++ = *src++;
6000106e:	f850 1b04 	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001072:	4298      	cmp	r0, r3
		*dest++ = *src++;
60001074:	f842 1b04 	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001078:	d1f9      	bne.n	6000106e <ResetHandler+0x3a>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
6000107a:	4a6c      	ldr	r2, [pc, #432]	; (6000122c <ResetHandler+0x1f8>)
6000107c:	496c      	ldr	r1, [pc, #432]	; (60001230 <ResetHandler+0x1fc>)
6000107e:	428a      	cmp	r2, r1
60001080:	d00f      	beq.n	600010a2 <ResetHandler+0x6e>
	while (dest < dest_end) {
60001082:	4b6c      	ldr	r3, [pc, #432]	; (60001234 <ResetHandler+0x200>)
60001084:	429a      	cmp	r2, r3
60001086:	d20c      	bcs.n	600010a2 <ResetHandler+0x6e>
60001088:	43d4      	mvns	r4, r2
6000108a:	4608      	mov	r0, r1
6000108c:	4423      	add	r3, r4
6000108e:	f023 0303 	bic.w	r3, r3, #3
60001092:	3304      	adds	r3, #4
60001094:	440b      	add	r3, r1
		*dest++ = *src++;
60001096:	f850 1b04 	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
6000109a:	4298      	cmp	r0, r3
		*dest++ = *src++;
6000109c:	f842 1b04 	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
600010a0:	d1f9      	bne.n	60001096 <ResetHandler+0x62>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010a2:	4a65      	ldr	r2, [pc, #404]	; (60001238 <ResetHandler+0x204>)
600010a4:	4b65      	ldr	r3, [pc, #404]	; (6000123c <ResetHandler+0x208>)
600010a6:	429a      	cmp	r2, r3
600010a8:	d20b      	bcs.n	600010c2 <ResetHandler+0x8e>
600010aa:	43d0      	mvns	r0, r2
600010ac:	4611      	mov	r1, r2
		*dest++ = 0;
600010ae:	2400      	movs	r4, #0
600010b0:	4403      	add	r3, r0
600010b2:	f023 0303 	bic.w	r3, r3, #3
600010b6:	3304      	adds	r3, #4
600010b8:	4413      	add	r3, r2
600010ba:	f841 4b04 	str.w	r4, [r1], #4
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010be:	428b      	cmp	r3, r1
600010c0:	d1fb      	bne.n	600010ba <ResetHandler+0x86>
	memory_copy(&_stext, &_stextload, &_etext);
	memory_copy(&_sdata, &_sdataload, &_edata);
	memory_clear(&_sbss, &_ebss);

	// enable FPU
	SCB_CPACR = 0x00F00000;
600010c2:	4a5f      	ldr	r2, [pc, #380]	; (60001240 <ResetHandler+0x20c>)
600010c4:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
600010c8:	4b5e      	ldr	r3, [pc, #376]	; (60001244 <ResetHandler+0x210>)
600010ca:	6011      	str	r1, [r2, #0]
600010cc:	f503 7130 	add.w	r1, r3, #704	; 0x2c0
600010d0:	4a5d      	ldr	r2, [pc, #372]	; (60001248 <ResetHandler+0x214>)

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
600010d2:	f843 2f04 	str.w	r2, [r3, #4]!
600010d6:	4299      	cmp	r1, r3
600010d8:	d1fb      	bne.n	600010d2 <ResetHandler+0x9e>
600010da:	4b5c      	ldr	r3, [pc, #368]	; (6000124c <ResetHandler+0x218>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600010dc:	2180      	movs	r1, #128	; 0x80
600010de:	4a5c      	ldr	r2, [pc, #368]	; (60001250 <ResetHandler+0x21c>)
600010e0:	f803 1b01 	strb.w	r1, [r3], #1
600010e4:	4293      	cmp	r3, r2
600010e6:	d1fb      	bne.n	600010e0 <ResetHandler+0xac>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600010e8:	4c5a      	ldr	r4, [pc, #360]	; (60001254 <ResetHandler+0x220>)
600010ea:	f04f 3780 	mov.w	r7, #2155905152	; 0x80808080
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600010ee:	4e5a      	ldr	r6, [pc, #360]	; (60001258 <ResetHandler+0x224>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010f0:	f04f 32ff 	mov.w	r2, #4294967295
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010f4:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 60001298 <ResetHandler+0x264>
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
600010f8:	2500      	movs	r5, #0

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600010fa:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 6000129c <ResetHandler+0x268>
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600010fe:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 600012a0 <ResetHandler+0x26c>
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
60001102:	4b56      	ldr	r3, [pc, #344]	; (6000125c <ResetHandler+0x228>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001104:	4942      	ldr	r1, [pc, #264]	; (60001210 <ResetHandler+0x1dc>)
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
60001106:	f8c3 a000 	str.w	sl, [r3]
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
6000110a:	f8c4 7104 	str.w	r7, [r4, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000110e:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001112:	f8c4 70f4 	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001116:	f8c4 80f0 	str.w	r8, [r4, #240]	; 0xf0
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
6000111a:	69f3      	ldr	r3, [r6, #28]
6000111c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
60001120:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001124:	61f3      	str	r3, [r6, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
60001126:	6a73      	ldr	r3, [r6, #36]	; 0x24
60001128:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
6000112c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001130:	6273      	str	r3, [r6, #36]	; 0x24

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001132:	668a      	str	r2, [r1, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
60001134:	66ca      	str	r2, [r1, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001136:	670a      	str	r2, [r1, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001138:	674a      	str	r2, [r1, #116]	; 0x74
	// must enable PRINT_DEBUG_STUFF in debug/print.h
	printf_debug_init();
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
6000113a:	f000 f8df 	bl	600012fc <configure_cache>
extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000113e:	4a48      	ldr	r2, [pc, #288]	; (60001260 <ResetHandler+0x22c>)
60001140:	2063      	movs	r0, #99	; 0x63
	SYST_CVR = 0;
60001142:	4b48      	ldr	r3, [pc, #288]	; (60001264 <ResetHandler+0x230>)
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
60001144:	4948      	ldr	r1, [pc, #288]	; (60001268 <ResetHandler+0x234>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001146:	6010      	str	r0, [r2, #0]
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001148:	2203      	movs	r2, #3
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
6000114a:	601d      	str	r5, [r3, #0]
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
6000114c:	f8ca 1038 	str.w	r1, [sl, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001150:	f843 2c08 	str.w	r2, [r3, #-8]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001154:	4945      	ldr	r1, [pc, #276]	; (6000126c <ResetHandler+0x238>)
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001156:	4a46      	ldr	r2, [pc, #280]	; (60001270 <ResetHandler+0x23c>)

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
60001158:	4846      	ldr	r0, [pc, #280]	; (60001274 <ResetHandler+0x240>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000115a:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000115e:	680b      	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001160:	4a45      	ldr	r2, [pc, #276]	; (60001278 <ResetHandler+0x244>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001162:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
60001166:	f8ca 003c 	str.w	r0, [sl, #60]	; 0x3c
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000116a:	4844      	ldr	r0, [pc, #272]	; (6000127c <ResetHandler+0x248>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000116c:	600b      	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000116e:	6813      	ldr	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001170:	4943      	ldr	r1, [pc, #268]	; (60001280 <ResetHandler+0x24c>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001172:	f043 0301 	orr.w	r3, r3, #1
60001176:	6013      	str	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001178:	6803      	ldr	r3, [r0, #0]
6000117a:	600b      	str	r3, [r1, #0]
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
	configure_systick();
	usb_pll_start();	
6000117c:	f000 f93a 	bl	600013f4 <usb_pll_start>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001180:	f8c4 7104 	str.w	r7, [r4, #260]	; 0x104
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001184:	483f      	ldr	r0, [pc, #252]	; (60001284 <ResetHandler+0x250>)

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001186:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000118a:	f8c4 70f4 	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000118e:	f8c4 80f0 	str.w	r8, [r4, #240]	; 0xf0
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001192:	f000 fad9 	bl	60001748 <__set_arm_clock_veneer>
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?
60001196:	bf00      	nop
60001198:	bf00      	nop
6000119a:	bf00      	nop
6000119c:	bf00      	nop

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000119e:	6ef1      	ldr	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
600011a0:	4a39      	ldr	r2, [pc, #228]	; (60001288 <ResetHandler+0x254>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
600011a2:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
	PIT_TCTRL1 = 0;
	PIT_TCTRL2 = 0;
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011a6:	4b39      	ldr	r3, [pc, #228]	; (6000128c <ResetHandler+0x258>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
600011a8:	66f1      	str	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
600011aa:	6015      	str	r5, [r2, #0]
	PIT_TCTRL0 = 0;
600011ac:	f8c2 5108 	str.w	r5, [r2, #264]	; 0x108
	PIT_TCTRL1 = 0;
600011b0:	f8c2 5118 	str.w	r5, [r2, #280]	; 0x118
	PIT_TCTRL2 = 0;
600011b4:	f8c2 5128 	str.w	r5, [r2, #296]	; 0x128
	PIT_TCTRL3 = 0;
600011b8:	f8c2 5138 	str.w	r5, [r2, #312]	; 0x138

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
600011be:	07d2      	lsls	r2, r2, #31
600011c0:	d408      	bmi.n	600011d4 <ResetHandler+0x1a0>
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011c2:	f642 6215 	movw	r2, #11797	; 0x2e15
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
600011c6:	4932      	ldr	r1, [pc, #200]	; (60001290 <ResetHandler+0x25c>)
600011c8:	6559      	str	r1, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011ca:	651a      	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
600011cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
600011ce:	f042 0201 	orr.w	r2, r2, #1
600011d2:	639a      	str	r2, [r3, #56]	; 0x38
	}
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600011d4:	4a2d      	ldr	r2, [pc, #180]	; (6000128c <ResetHandler+0x258>)
600011d6:	4c2f      	ldr	r4, [pc, #188]	; (60001294 <ResetHandler+0x260>)
600011d8:	6893      	ldr	r3, [r2, #8]
600011da:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
600011de:	6093      	str	r3, [r2, #8]

#ifdef ARDUINO_TEENSY41
	configure_external_ram();
#endif
	startup_early_hook();
600011e0:	f000 faae 	bl	60001740 <__startup_early_hook_veneer>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
600011e4:	6823      	ldr	r3, [r4, #0]
	while (millis() < 20) ; // wait at least 20ms before starting USB
600011e6:	2b13      	cmp	r3, #19
600011e8:	d9fc      	bls.n	600011e4 <ResetHandler+0x1b0>
	usb_init();
600011ea:	f000 f9c3 	bl	60001574 <usb_init>
	analog_init();
600011ee:	f000 f859 	bl	600012a4 <analog_init>
	pwm_init();
600011f2:	f000 faa1 	bl	60001738 <__pwm_init_veneer>
	tempmon_init();
600011f6:	f000 f92f 	bl	60001458 <tempmon_init>

	startup_late_hook();
600011fa:	f000 fabd 	bl	60001778 <__startup_late_hook_veneer>
600011fe:	6823      	ldr	r3, [r4, #0]
	while (millis() < 300) ; // wait at least 300ms before calling user code
60001200:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
60001204:	d3fb      	bcc.n	600011fe <ResetHandler+0x1ca>
	//printf("before C++ constructors\n");
	__libc_init_array();
60001206:	f000 faa3 	bl	60001750 <____libc_init_array_veneer>
	//printf("after C++ constructors\n");
	//printf("before setup\n");
	main();
6000120a:	f000 faad 	bl	60001768 <__main_veneer>
6000120e:	e7fe      	b.n	6000120e <ResetHandler+0x1da>
60001210:	400ac000 	.word	0x400ac000
60001214:	aaaaaaab 	.word	0xaaaaaaab
60001218:	00200007 	.word	0x00200007
6000121c:	20078000 	.word	0x20078000
60001220:	00000000 	.word	0x00000000
60001224:	60001790 	.word	0x60001790
60001228:	00004330 	.word	0x00004330
6000122c:	20000000 	.word	0x20000000
60001230:	60005ac4 	.word	0x60005ac4
60001234:	200129a0 	.word	0x200129a0
60001238:	200129a0 	.word	0x200129a0
6000123c:	200172c0 	.word	0x200172c0
60001240:	e000ed88 	.word	0xe000ed88
60001244:	20014ffc 	.word	0x20014ffc
60001248:	00001bd9 	.word	0x00001bd9
6000124c:	e000e400 	.word	0xe000e400
60001250:	e000e4a0 	.word	0xe000e4a0
60001254:	400d8000 	.word	0x400d8000
60001258:	400fc000 	.word	0x400fc000
6000125c:	e000ed08 	.word	0xe000ed08
60001260:	e000e014 	.word	0xe000e014
60001264:	e000e018 	.word	0xe000e018
60001268:	00002d85 	.word	0x00002d85
6000126c:	e000edfc 	.word	0xe000edfc
60001270:	20200000 	.word	0x20200000
60001274:	00002d89 	.word	0x00002d89
60001278:	e0001000 	.word	0xe0001000
6000127c:	e0001004 	.word	0xe0001004
60001280:	20014be4 	.word	0x20014be4
60001284:	23c34600 	.word	0x23c34600
60001288:	40084000 	.word	0x40084000
6000128c:	400d4000 	.word	0x400d4000
60001290:	56c00000 	.word	0x56c00000
60001294:	20014bec 	.word	0x20014bec
60001298:	20015000 	.word	0x20015000
6000129c:	2018101b 	.word	0x2018101b
600012a0:	13110d0c 	.word	0x13110d0c

600012a4 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600012a4:	4b11      	ldr	r3, [pc, #68]	; (600012ec <analog_init+0x48>)
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600012a6:	4912      	ldr	r1, [pc, #72]	; (600012f0 <analog_init+0x4c>)
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600012a8:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
600012aa:	460a      	mov	r2, r1
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600012ac:	f440 3040 	orr.w	r0, r0, #196608	; 0x30000
}

#define MAX_ADC_CLOCK 20000000

FLASHMEM void analog_init(void)
{
600012b0:	b430      	push	{r4, r5}
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600012b2:	66d8      	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600012b4:	f240 6537 	movw	r5, #1591	; 0x637
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600012b8:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600012ba:	24a0      	movs	r4, #160	; 0xa0
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600012bc:	f440 7040 	orr.w	r0, r0, #768	; 0x300
600012c0:	66d8      	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600012c2:	644d      	str	r5, [r1, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600012c4:	648c      	str	r4, [r1, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
600012c6:	6c93      	ldr	r3, [r2, #72]	; 0x48
600012c8:	061b      	lsls	r3, r3, #24
600012ca:	d4fc      	bmi.n	600012c6 <analog_init+0x22>
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
600012cc:	4b09      	ldr	r3, [pc, #36]	; (600012f4 <analog_init+0x50>)
600012ce:	f240 6037 	movw	r0, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600012d2:	21a0      	movs	r1, #160	; 0xa0
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
600012d4:	461a      	mov	r2, r3
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
600012d6:	6458      	str	r0, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600012d8:	6499      	str	r1, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
600012da:	6c93      	ldr	r3, [r2, #72]	; 0x48
600012dc:	f013 0380 	ands.w	r3, r3, #128	; 0x80
600012e0:	d1fb      	bne.n	600012da <analog_init+0x36>
	calibrating = 0;
600012e2:	4a05      	ldr	r2, [pc, #20]	; (600012f8 <analog_init+0x54>)
600012e4:	7013      	strb	r3, [r2, #0]
}
600012e6:	bc30      	pop	{r4, r5}
600012e8:	4770      	bx	lr
600012ea:	bf00      	nop
600012ec:	400fc000 	.word	0x400fc000
600012f0:	400c4000 	.word	0x400c4000
600012f4:	400c8000 	.word	0x400c8000
600012f8:	20014be0 	.word	0x20014be0

600012fc <configure_cache>:
#define SIZE_2G		(SCB_MPU_RASR_SIZE(30) | SCB_MPU_RASR_ENABLE)
#define SIZE_4G		(SCB_MPU_RASR_SIZE(31) | SCB_MPU_RASR_ENABLE)
#define REGION(n)	(SCB_MPU_RBAR_REGION(n) | SCB_MPU_RBAR_VALID)

FLASHMEM void configure_cache(void)
{
600012fc:	b5f0      	push	{r4, r5, r6, r7, lr}
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600012fe:	4a28      	ldr	r2, [pc, #160]	; (600013a0 <configure_cache+0xa4>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
60001300:	2000      	movs	r0, #0

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60001302:	4b28      	ldr	r3, [pc, #160]	; (600013a4 <configure_cache+0xa8>)
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001304:	f04f 0c10 	mov.w	ip, #16
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
60001308:	4c27      	ldr	r4, [pc, #156]	; (600013a8 <configure_cache+0xac>)

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
6000130a:	2711      	movs	r7, #17

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000130c:	f8df e0d8 	ldr.w	lr, [pc, #216]	; 600013e8 <configure_cache+0xec>
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001310:	2612      	movs	r6, #18
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
60001312:	6020      	str	r0, [r4, #0]
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001314:	2501      	movs	r5, #1
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001316:	f8c2 c000 	str.w	ip, [r2]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000131a:	f8c3 e000 	str.w	lr, [r3]
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
6000131e:	6017      	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
60001320:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 600013ec <configure_cache+0xf0>

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60001324:	4f21      	ldr	r7, [pc, #132]	; (600013ac <configure_cache+0xb0>)
	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
60001326:	f8c3 e000 	str.w	lr, [r3]

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
6000132a:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
6000132c:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
6000132e:	4e20      	ldr	r6, [pc, #128]	; (600013b0 <configure_cache+0xb4>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001330:	4f20      	ldr	r7, [pc, #128]	; (600013b4 <configure_cache+0xb8>)
	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001332:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001334:	4920      	ldr	r1, [pc, #128]	; (600013b8 <configure_cache+0xbc>)
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001336:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001338:	4e20      	ldr	r6, [pc, #128]	; (600013bc <configure_cache+0xc0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
6000133a:	f041 0115 	orr.w	r1, r1, #21

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
6000133e:	4f20      	ldr	r7, [pc, #128]	; (600013c0 <configure_cache+0xc4>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001340:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001342:	601f      	str	r7, [r3, #0]
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001344:	f507 3740 	add.w	r7, r7, #196608	; 0x30000

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001348:	4e1e      	ldr	r6, [pc, #120]	; (600013c4 <configure_cache+0xc8>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
6000134a:	6011      	str	r1, [r2, #0]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
6000134c:	3702      	adds	r7, #2

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
6000134e:	601e      	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001350:	f8df e09c 	ldr.w	lr, [pc, #156]	; 600013f0 <configure_cache+0xf4>
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001354:	4e1c      	ldr	r6, [pc, #112]	; (600013c8 <configure_cache+0xcc>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001356:	491d      	ldr	r1, [pc, #116]	; (600013cc <configure_cache+0xd0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001358:	f8c2 e000 	str.w	lr, [r2]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
6000135c:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
6000135e:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001360:	4f1b      	ldr	r7, [pc, #108]	; (600013d0 <configure_cache+0xd4>)

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001362:	6019      	str	r1, [r3, #0]

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001364:	4e1b      	ldr	r6, [pc, #108]	; (600013d4 <configure_cache+0xd8>)

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001366:	491c      	ldr	r1, [pc, #112]	; (600013d8 <configure_cache+0xdc>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001368:	6017      	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
6000136a:	601e      	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;
6000136c:	4f1b      	ldr	r7, [pc, #108]	; (600013dc <configure_cache+0xe0>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000136e:	6011      	str	r1, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001370:	4e1b      	ldr	r6, [pc, #108]	; (600013e0 <configure_cache+0xe4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001372:	491c      	ldr	r1, [pc, #112]	; (600013e4 <configure_cache+0xe8>)

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;
60001374:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001376:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001378:	6019      	str	r1, [r3, #0]

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
6000137a:	6025      	str	r5, [r4, #0]

	// cache enable, ARM DDI0403E, pg 628
	asm("dsb");
6000137c:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001380:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
60001384:	f8c3 01b0 	str.w	r0, [r3, #432]	; 0x1b0

	asm("dsb");
60001388:	f3bf 8f4f 	dsb	sy
	asm("isb");
6000138c:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001390:	f852 3c88 	ldr.w	r3, [r2, #-136]
60001394:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
60001398:	f842 3c88 	str.w	r3, [r2, #-136]
6000139c:	bdf0      	pop	{r4, r5, r6, r7, pc}
6000139e:	bf00      	nop
600013a0:	e000ed9c 	.word	0xe000ed9c
600013a4:	e000eda0 	.word	0xe000eda0
600013a8:	e000ed94 	.word	0xe000ed94
600013ac:	00100009 	.word	0x00100009
600013b0:	00200013 	.word	0x00200013
600013b4:	07020021 	.word	0x07020021
600013b8:	200172c0 	.word	0x200172c0
600013bc:	20000014 	.word	0x20000014
600013c0:	13080025 	.word	0x13080025
600013c4:	10000009 	.word	0x10000009
600013c8:	40000017 	.word	0x40000017
600013cc:	13100033 	.word	0x13100033
600013d0:	60000018 	.word	0x60000018
600013d4:	070b002f 	.word	0x070b002f
600013d8:	70000019 	.word	0x70000019
600013dc:	170b0037 	.word	0x170b0037
600013e0:	7000001a 	.word	0x7000001a
600013e4:	130b002f 	.word	0x130b002f
600013e8:	1000003f 	.word	0x1000003f
600013ec:	03080025 	.word	0x03080025
600013f0:	20200016 	.word	0x20200016

600013f4 <usb_pll_start>:

#endif // ARDUINO_TEENSY41


FLASHMEM void usb_pll_start()
{
600013f4:	b4f0      	push	{r4, r5, r6, r7}
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
600013f6:	4a17      	ldr	r2, [pc, #92]	; (60001454 <usb_pll_start+0x60>)
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
600013f8:	2740      	movs	r7, #64	; 0x40
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
600013fa:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
600013fe:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001402:	f44f 5500 	mov.w	r5, #8192	; 0x2000
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001406:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
6000140a:	f243 0042 	movw	r0, #12354	; 0x3042


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000140e:	6913      	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001410:	f013 0f02 	tst.w	r3, #2
60001414:	d006      	beq.n	60001424 <usb_pll_start+0x30>
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001416:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001418:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
6000141a:	6190      	str	r0, [r2, #24]


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000141c:	6913      	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
6000141e:	f013 0f02 	tst.w	r3, #2
60001422:	d1f8      	bne.n	60001416 <usb_pll_start+0x22>
				CCM_ANALOG_PLL_USB1_DIV_SELECT |		// use 480 MHz
				CCM_ANALOG_PLL_USB1_ENABLE |			// disable
				CCM_ANALOG_PLL_USB1_EN_USB_CLKS;		// disable usb
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001424:	f413 5f00 	tst.w	r3, #8192	; 0x2000
60001428:	d101      	bne.n	6000142e <usb_pll_start+0x3a>
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000142a:	6155      	str	r5, [r2, #20]
			continue;
6000142c:	e7ef      	b.n	6000140e <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
6000142e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
60001432:	d101      	bne.n	60001438 <usb_pll_start+0x44>
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001434:	6156      	str	r6, [r2, #20]
			continue;
60001436:	e7ea      	b.n	6000140e <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001438:	2b00      	cmp	r3, #0
6000143a:	dae8      	bge.n	6000140e <usb_pll_start+0x1a>
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
6000143c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
60001440:	d001      	beq.n	60001446 <usb_pll_start+0x52>
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001442:	6191      	str	r1, [r2, #24]
			continue;
60001444:	e7e3      	b.n	6000140e <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001446:	065b      	lsls	r3, r3, #25
60001448:	d401      	bmi.n	6000144e <usb_pll_start+0x5a>
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
6000144a:	6157      	str	r7, [r2, #20]
			continue;
6000144c:	e7df      	b.n	6000140e <usb_pll_start+0x1a>
		}
		return; // everything is as it should be  :-)
	}
}
6000144e:	bcf0      	pop	{r4, r5, r6, r7}
60001450:	4770      	bx	lr
60001452:	bf00      	nop
60001454:	400d8000 	.word	0x400d8000

60001458 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001458:	4a3b      	ldr	r2, [pc, #236]	; (60001548 <tempmon_init+0xf0>)
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
6000145a:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
6000145e:	493b      	ldr	r1, [pc, #236]	; (6000154c <tempmon_init+0xf4>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001460:	2000      	movs	r0, #0
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001462:	6813      	ldr	r3, [r2, #0]
  asm volatile ("dsb":::"memory");
  while (1) asm ("wfi");
}

FLASHMEM void tempmon_init(void)
{
60001464:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001466:	f023 0301 	bic.w	r3, r3, #1

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
6000146a:	2403      	movs	r4, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
6000146c:	f8df e100 	ldr.w	lr, [pc, #256]	; 60001570 <tempmon_init+0x118>
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001470:	6013      	str	r3, [r2, #0]

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001472:	f8c2 4090 	str.w	r4, [r2, #144]	; 0x90
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001476:	f8d1 30e0 	ldr.w	r3, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
6000147a:	4f35      	ldr	r7, [pc, #212]	; (60001550 <tempmon_init+0xf8>)
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
6000147c:	b2dd      	uxtb	r5, r3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
6000147e:	f3c3 240b 	ubfx	r4, r3, #8, #12
60001482:	4e34      	ldr	r6, [pc, #208]	; (60001554 <tempmon_init+0xfc>)
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
60001484:	ebc4 5313 	rsb	r3, r4, r3, lsr #20
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001488:	ee07 5a90 	vmov	s15, r5
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000148c:	f1a5 0155 	sub.w	r1, r5, #85	; 0x55
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001490:	f8ce 5000 	str.w	r5, [lr]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001494:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001498:	eb03 0583 	add.w	r5, r3, r3, lsl #2
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000149c:	ee07 4a90 	vmov	s15, r4
600014a0:	fb03 f101 	mul.w	r1, r3, r1
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
600014a4:	603b      	str	r3, [r7, #0]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600014a6:	eb03 1383 	add.w	r3, r3, r3, lsl #6
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600014aa:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600014ae:	ee07 1a90 	vmov	s15, r1
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600014b2:	1b49      	subs	r1, r1, r5
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600014b4:	ee77 6a66 	vsub.f32	s13, s14, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600014b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600014bc:	4d26      	ldr	r5, [pc, #152]	; (60001558 <tempmon_init+0x100>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600014be:	ee07 1a90 	vmov	s15, r1
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600014c2:	440b      	add	r3, r1
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600014c4:	edc5 6a00 	vstr	s13, [r5]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600014c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
600014cc:	6034      	str	r4, [r6, #0]
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600014ce:	eec7 5a26 	vdiv.f32	s11, s14, s13
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
600014d2:	4e22      	ldr	r6, [pc, #136]	; (6000155c <tempmon_init+0x104>)
600014d4:	6815      	ldr	r5, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600014d6:	4922      	ldr	r1, [pc, #136]	; (60001560 <tempmon_init+0x108>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600014d8:	4c22      	ldr	r4, [pc, #136]	; (60001564 <tempmon_init+0x10c>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600014da:	ee87 6aa6 	vdiv.f32	s12, s15, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600014de:	ee07 3a90 	vmov	s15, r3
600014e2:	4b21      	ldr	r3, [pc, #132]	; (60001568 <tempmon_init+0x110>)
600014e4:	f8c6 3140 	str.w	r3, [r6, #320]	; 0x140
600014e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
600014ec:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600014f0:	ee75 5a85 	vadd.f32	s11, s11, s10
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600014f4:	ee76 6a05 	vadd.f32	s13, s12, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600014f8:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600014fc:	eefc 6ae6 	vcvt.u32.f32	s13, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001500:	ee15 3a90 	vmov	r3, s11
60001504:	ea45 5303 	orr.w	r3, r5, r3, lsl #20
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001508:	ee16 5a90 	vmov	r5, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000150c:	ee77 7a05 	vadd.f32	s15, s14, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001510:	6013      	str	r3, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001512:	ea01 4105 	and.w	r1, r1, r5, lsl #16
60001516:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000151a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000151e:	430b      	orrs	r3, r1
60001520:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001524:	ee17 3a90 	vmov	r3, s15
60001528:	f8d2 1110 	ldr.w	r1, [r2, #272]	; 0x110
6000152c:	f3c3 030b 	ubfx	r3, r3, #0, #12
60001530:	430b      	orrs	r3, r1
60001532:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001536:	6813      	ldr	r3, [r2, #0]
60001538:	f043 0302 	orr.w	r3, r3, #2
6000153c:	6013      	str	r3, [r2, #0]

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
6000153e:	7020      	strb	r0, [r4, #0]
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001540:	4b0a      	ldr	r3, [pc, #40]	; (6000156c <tempmon_init+0x114>)
60001542:	2201      	movs	r2, #1
60001544:	601a      	str	r2, [r3, #0]
60001546:	bdf0      	pop	{r4, r5, r6, r7, pc}
60001548:	400d8180 	.word	0x400d8180
6000154c:	401f4400 	.word	0x401f4400
60001550:	20014bf8 	.word	0x20014bf8
60001554:	20014bfc 	.word	0x20014bfc
60001558:	20014bf4 	.word	0x20014bf4
6000155c:	20015000 	.word	0x20015000
60001560:	0fff0000 	.word	0x0fff0000
60001564:	e000e440 	.word	0xe000e440
60001568:	00001c85 	.word	0x00001c85
6000156c:	e000e108 	.word	0xe000e108
60001570:	20014bf0 	.word	0x20014bf0

60001574 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001574:	4b30      	ldr	r3, [pc, #192]	; (60001638 <usb_init+0xc4>)
60001576:	f640 7261 	movw	r2, #3937	; 0xf61

static void run_callbacks(endpoint_t *ep);


FLASHMEM void usb_init(void)
{
6000157a:	b570      	push	{r4, r5, r6, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
6000157c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001580:	f240 4504 	movw	r5, #1028	; 0x404
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
60001584:	f000 f8e8 	bl	60001758 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001588:	492c      	ldr	r1, [pc, #176]	; (6000163c <usb_init+0xc8>)
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
6000158a:	482d      	ldr	r0, [pc, #180]	; (60001640 <usb_init+0xcc>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000158c:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001590:	4c2c      	ldr	r4, [pc, #176]	; (60001644 <usb_init+0xd0>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001592:	f042 0203 	orr.w	r2, r2, #3
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001596:	4b2c      	ldr	r3, [pc, #176]	; (60001648 <usb_init+0xd4>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001598:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
6000159c:	f8c0 5160 	str.w	r5, [r0, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600015a0:	6822      	ldr	r2, [r4, #0]
600015a2:	4013      	ands	r3, r2
600015a4:	b91b      	cbnz	r3, 600015ae <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
600015a6:	f8d0 31a8 	ldr.w	r3, [r0, #424]	; 0x1a8
600015aa:	079a      	lsls	r2, r3, #30
600015ac:	d01a      	beq.n	600015e4 <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600015ae:	4b24      	ldr	r3, [pc, #144]	; (60001640 <usb_init+0xcc>)
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
600015b0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
600015b4:	4a23      	ldr	r2, [pc, #140]	; (60001644 <usb_init+0xd0>)
600015b6:	6351      	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600015b8:	461a      	mov	r2, r3
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600015ba:	f8d3 1140 	ldr.w	r1, [r3, #320]	; 0x140
600015be:	f041 0102 	orr.w	r1, r1, #2
600015c2:	f8c3 1140 	str.w	r1, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600015c6:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
600015ca:	079b      	lsls	r3, r3, #30
600015cc:	d4fb      	bmi.n	600015c6 <usb_init+0x52>
		NVIC_CLEAR_PENDING(IRQ_USB1);
600015ce:	f44f 3000 	mov.w	r0, #131072	; 0x20000
600015d2:	491e      	ldr	r1, [pc, #120]	; (6000164c <usb_init+0xd8>)
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600015d4:	4b1b      	ldr	r3, [pc, #108]	; (60001644 <usb_init+0xd0>)
600015d6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
600015da:	6008      	str	r0, [r1, #0]
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
600015dc:	2019      	movs	r0, #25
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600015de:	639a      	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
600015e0:	f000 f8be 	bl	60001760 <__delay_veneer>
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600015e4:	4d1a      	ldr	r5, [pc, #104]	; (60001650 <usb_init+0xdc>)
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
600015e6:	2200      	movs	r2, #0
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600015e8:	4b16      	ldr	r3, [pc, #88]	; (60001644 <usb_init+0xd0>)
600015ea:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600015ee:	4c14      	ldr	r4, [pc, #80]	; (60001640 <usb_init+0xcc>)
600015f0:	260a      	movs	r6, #10
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600015f2:	6399      	str	r1, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600015f4:	4628      	mov	r0, r5
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
600015f6:	601a      	str	r2, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600015f8:	4611      	mov	r1, r2
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600015fa:	f8c4 61a8 	str.w	r6, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600015fe:	f44f 7220 	mov.w	r2, #640	; 0x280
60001602:	f000 f8b5 	bl	60001770 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001606:	f44f 0681 	mov.w	r6, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
6000160a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
6000160e:	f240 1343 	movw	r3, #323	; 0x143
60001612:	4a10      	ldr	r2, [pc, #64]	; (60001654 <usb_init+0xe0>)
60001614:	4910      	ldr	r1, [pc, #64]	; (60001658 <usb_init+0xe4>)
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001616:	602e      	str	r6, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
60001618:	6428      	str	r0, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
6000161a:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
6000161e:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001622:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001626:	4a0d      	ldr	r2, [pc, #52]	; (6000165c <usb_init+0xe8>)
60001628:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
6000162c:	2301      	movs	r3, #1
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
6000162e:	6011      	str	r1, [r2, #0]
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001630:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
60001634:	bd70      	pop	{r4, r5, r6, pc}
60001636:	bf00      	nop
60001638:	400d8000 	.word	0x400d8000
6000163c:	400fc000 	.word	0x400fc000
60001640:	402e0000 	.word	0x402e0000
60001644:	400d9000 	.word	0x400d9000
60001648:	001e1c00 	.word	0x001e1c00
6000164c:	e000e28c 	.word	0xe000e28c
60001650:	20017000 	.word	0x20017000
60001654:	20015000 	.word	0x20015000
60001658:	00001df1 	.word	0x00001df1
6000165c:	e000e10c 	.word	0xe000e10c

60001660 <usb_string_product_name_default>:
60001660:	00550316 00420053 00530020 00720065     ..U.S.B. .S.e.r.
60001670:	00610069 0000006c                       i.a.l...

60001678 <usb_string_manufacturer_name_default>:
60001678:	00540318 00650065 0073006e 00640079     ..T.e.e.n.s.y.d.
60001688:	00690075 006f006e                       u.i.n.o.

60001690 <string0>:
60001690:	04090304                                ....

60001694 <usb_config_descriptor_12>:
60001694:	00430209 c0000102 00040932 02020100     ..C.....2.......
600016a4:	24050001 05011000 01010124 06022404     ...$....$....$..
600016b4:	00062405 82050701 10001003 00010409     .$..............
600016c4:	00000a02 03050700 00004002 02840507     .........@......
600016d4:	00000040                                @...

600016d8 <usb_config_descriptor_480>:
600016d8:	00430209 c0000102 00040932 02020100     ..C.....2.......
600016e8:	24050001 05011000 01010124 06022404     ...$....$....$..
600016f8:	00062405 82050701 05001003 00010409     .$..............
60001708:	00000a02 03050700 00020002 02840507     ................
60001718:	00000200                                ....

6000171c <qualifier_descriptor>:
6000171c:	0200060a 40000002 ff010001                       .......@..

60001726 <_serialEvent_default>:
60001726:	b5f8ff01                                         ..

60001728 <_init>:
60001728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
6000172a:	bf00      	nop
6000172c:	bcf8      	pop	{r3, r4, r5, r6, r7}
6000172e:	bc08      	pop	{r3}
60001730:	469e      	mov	lr, r3
60001732:	4770      	bx	lr
60001734:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

60001738 <__pwm_init_veneer>:
60001738:	f85f f000 	ldr.w	pc, [pc]	; 6000173c <__pwm_init_veneer+0x4>
6000173c:	0000310d 	.word	0x0000310d

60001740 <__startup_early_hook_veneer>:
60001740:	f85f f000 	ldr.w	pc, [pc]	; 60001744 <__startup_early_hook_veneer+0x4>
60001744:	00001bf1 	.word	0x00001bf1

60001748 <__set_arm_clock_veneer>:
60001748:	f85f f000 	ldr.w	pc, [pc]	; 6000174c <__set_arm_clock_veneer+0x4>
6000174c:	0000170d 	.word	0x0000170d

60001750 <____libc_init_array_veneer>:
60001750:	f85f f000 	ldr.w	pc, [pc]	; 60001754 <____libc_init_array_veneer+0x4>
60001754:	00004085 	.word	0x00004085

60001758 <__usb_init_serialnumber_veneer>:
60001758:	f85f f000 	ldr.w	pc, [pc]	; 6000175c <__usb_init_serialnumber_veneer+0x4>
6000175c:	000025a9 	.word	0x000025a9

60001760 <__delay_veneer>:
60001760:	f85f f000 	ldr.w	pc, [pc]	; 60001764 <__delay_veneer+0x4>
60001764:	000019d1 	.word	0x000019d1

60001768 <__main_veneer>:
60001768:	f85f f000 	ldr.w	pc, [pc]	; 6000176c <__main_veneer+0x4>
6000176c:	00002da9 	.word	0x00002da9

60001770 <__memset_veneer>:
60001770:	f85f f000 	ldr.w	pc, [pc]	; 60001774 <__memset_veneer+0x4>
60001774:	00004109 	.word	0x00004109

60001778 <__startup_late_hook_veneer>:
60001778:	f85f f000 	ldr.w	pc, [pc]	; 6000177c <__startup_late_hook_veneer+0x4>
6000177c:	00001bf5 	.word	0x00001bf5

60001780 <__init_array_start>:
60001780:	00000045 	.word	0x00000045
60001784:	00001535 	.word	0x00001535
60001788:	000015a5 	.word	0x000015a5

6000178c <__init_array_end>:
6000178c:	ffffffff 	.word	0xffffffff

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <__do_global_dtors_aux>:
    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);

    return tmeas;
      20:	4c05b510 	.word	0x4c05b510
      24:	7823      	ldrb	r3, [r4, #0]
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);
      26:	b933      	cbnz	r3, 36 <_teensy_model_identifier+0x12>

    return tmeas;
      28:	b1134b04 	.word	0xb1134b04
      2c:	4804      	ldr	r0, [pc, #16]	; (40 <_teensy_model_identifier+0x1c>)
      2e:	f3af 8000 	nop.w
      32:	2301      	movs	r3, #1
      34:	7023      	strb	r3, [r4, #0]
      36:	bd10      	pop	{r4, pc}
      38:	200129a0 	.word	0x200129a0
      3c:	0000      	movs	r0, r0
      3e:	0000      	movs	r0, r0
}
      40:	00004334 	.word	0x00004334

00000044 <frame_dummy>:
      44:	4b08      	ldr	r3, [pc, #32]	; (68 <frame_dummy+0x24>)
      46:	b510      	.short	0xb510
      48:	b11b      	cbz	r3, 52 <frame_dummy+0xe>
      4a:	4908      	ldr	r1, [pc, #32]	; (6c <frame_dummy+0x28>)
      4c:	4808      	ldr	r0, [pc, #32]	; (70 <frame_dummy+0x2c>)
      4e:	f3af      	.short	0xf3af
      50:	8000      	strh	r0, [r0, #0]
      52:	4808      	.short	0x4808
      54:	6803      	ldr	r3, [r0, #0]
      56:	b903      	.short	0xb903
      58:	bd10      	pop	{r4, pc}
      5a:	4b07      	ldr	r3, [pc, #28]	; (78 <frame_dummy+0x34>)
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      5c:	d0fb2b00 	.word	0xd0fb2b00
      60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      64:	bf004718 	.word	0xbf004718
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 20000000; nn++) ;
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
	// digitalWrite(13, LOW);
    for (nn = 0; nn < 10000000; nn++) ;
      68:	0000      	movs	r0, r0
      6a:	0000      	movs	r0, r0
      6c:	29a4      	cmp	r1, #164	; 0xa4
      6e:	2001      	movs	r0, #1
      70:	00004334 	.word	0x00004334
      74:	29a0      	cmp	r1, #160	; 0xa0
      76:	2001      	movs	r0, #1
      78:	0000      	movs	r0, r0
	...

0000007c <CLEDController::getMaxRefreshRate() const>:
              }

              return adj;
      #endif
    }
    virtual uint16_t getMaxRefreshRate() const { return 0; }
      7c:	47702000 	.word	0x47702000

00000080 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::size()>:
  uint8_t m_nOutBlocks;
  uint32_t m_offsets[3];
  CMinWait<WAIT_TIME> mWait;
public:

  virtual int size() { return CLEDController::size() * m_nActualLanes; }
      80:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
      84:	6940      	ldr	r0, [r0, #20]
      86:	fb00 f003 	mul.w	r0, r0, r3
      8a:	4770      	bx	lr

0000008c <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::init()>:
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
      8c:	b570      	push	{r4, r5, r6, lr}
      8e:	2300      	movs	r3, #0
      90:	4604      	mov	r4, r0

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
      92:	2521      	movs	r5, #33	; 0x21
      94:	2101      	movs	r1, #1
      96:	6183      	str	r3, [r0, #24]
	if(m_pPowerFunc) {
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
      98:	200e      	movs	r0, #14
      9a:	61e3      	.short	0x61e3

void CFastLED::countFPS(int nFrames) {
  static int br = 0;
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
      9c:	6223      	str	r3, [r4, #32]
      9e:	6263      	str	r3, [r4, #36]	; 0x24
      a0:	3028f884 	.word	0x3028f884
      a4:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
      a8:	62e3      	str	r3, [r4, #44]	; 0x2c
      uint32_t now = millis();
      now -= lastframe;
      if( now == 0 ) {
          now = 1; // prevent division by zero below
      }
      m_nFPS = (br * 1000) / now;
      aa:	f884      	.short	0xf884
      ac:	5029      	str	r1, [r5, r0]
  static int br = 0;
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
      uint32_t now = millis();
      now -= lastframe;
      ae:	f001      	.short	0xf001
      if( now == 0 ) {
          now = 1; // prevent division by zero below
      }
      m_nFPS = (br * 1000) / now;
    br = 0;
      b0:	fd53 f894 	ldc2l	8, cr15, [r3, #-592]	; 0xfffffdb0
      uint32_t now = millis();
      now -= lastframe;
      if( now == 0 ) {
          now = 1; // prevent division by zero below
      }
      m_nFPS = (br * 1000) / now;
      b4:	21122028 	.word	0x21122028
  static int br = 0;
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
      uint32_t now = millis();
      now -= lastframe;
      b8:	1c53      	adds	r3, r2, #1
      ba:	4422      	.short	0x4422
      if( now == 0 ) {
          now = 1; // prevent division by zero below
      bc:	b2db      	uxtb	r3, r3
      }
      m_nFPS = (br * 1000) / now;
    br = 0;
      be:	f884      	.short	0xf884
    lastframe = millis();
      c0:	3028      	adds	r0, #40	; 0x28

  if(br++ >= nFrames) {
      uint32_t now = millis();
      now -= lastframe;
      if( now == 0 ) {
          now = 1; // prevent division by zero below
      c2:	2b01      	cmp	r3, #1
      c4:	6ae27611 	.word	0x6ae27611
      }
      m_nFPS = (br * 1000) / now;
      c8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
		pCur->showLeds(scale);
		pCur->setDither(d);
		pCur = pCur->next();
	}
	countFPS();
}
      cc:	f00062e2 	.word	0xf00062e2
      d0:	80b3      	strh	r3, [r6, #4]
	return *pLed;
}

void CFastLED::show(uint8_t scale) {
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
      d2:	2101      	.short	0x2101
      d4:	200f      	movs	r0, #15
      d6:	f001      	.short	0xf001
      d8:	fd3f f894 	ldc2	8, cr15, [pc, #-592]!	; fffffe8c <_flexram_bank_config+0x555553e1>
      dc:	21132028 	.word	0x21132028
      e0:	1c53      	adds	r3, r2, #1
      e2:	4422      	add	r2, r4
      e4:	f884b2db 	.word	0xf884b2db
      e8:	3028      	adds	r0, #40	; 0x28
      ea:	2b01      	.short	0x2b01
      ec:	7611      	strb	r1, [r2, #24]
      ee:	6ae2      	.short	0x6ae2
      f0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
      f4:	f00062e2 	.word	0xf00062e2
			_BLOCK_PIN(25);
			_BLOCK_PIN(19);
			_BLOCK_PIN(18);
			_BLOCK_PIN(14);
			_BLOCK_PIN(15);
			_BLOCK_PIN(17);
      f8:	809f      	strh	r7, [r3, #4]
template<uint8_t PIN, uint32_t _BIT, uint32_t _MASK, typename _GPIO_DR, typename _GPIO_DR_SET, typename _GPIO_DR_CLEAR, typename _GPIO_DR_TOGGLE> class _ARMPIN {
public:
	typedef volatile uint32_t * port_ptr_t;
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
      fa:	2101      	.short	0x2101
      fc:	2011      	movs	r0, #17
      fe:	f001 fd2b 	bl	1b58 <pinMode>
     102:	f894      	.short	0xf894
     104:	2028      	movs	r0, #40	; 0x28
     106:	2516      	.short	0x2516
     108:	1c53      	adds	r3, r2, #1
     10a:	4422      	add	r2, r4
     10c:	f884b2db 	.word	0xf884b2db
     110:	3028      	adds	r0, #40	; 0x28
			_BLOCK_PIN(16);
     112:	2b01      	.short	0x2b01
			_BLOCK_PIN(25);
			_BLOCK_PIN(19);
			_BLOCK_PIN(18);
			_BLOCK_PIN(14);
			_BLOCK_PIN(15);
			_BLOCK_PIN(17);
     114:	7615      	strb	r5, [r2, #24]
     116:	6ae2      	.short	0x6ae2
     118:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
     11c:	f00062e2 	.word	0xf00062e2
			_BLOCK_PIN(16);
     120:	808b      	strh	r3, [r1, #4]
     122:	2101      	.short	0x2101
     124:	2010      	movs	r0, #16
     126:	f001      	.short	0xf001
     128:	fd17 f894 	ldc2	8, cr15, [r7, #-592]	; 0xfffffdb0
     12c:	2028      	movs	r0, #40	; 0x28
     12e:	2617      	.short	0x2617
     130:	1c53      	adds	r3, r2, #1
     132:	4422      	.short	0x4422
     134:	b2db      	uxtb	r3, r3
     136:	f884      	.short	0xf884
     138:	3028      	adds	r0, #40	; 0x28
			_BLOCK_PIN(22);
     13a:	2b01      	cmp	r3, #1
			_BLOCK_PIN(19);
			_BLOCK_PIN(18);
			_BLOCK_PIN(14);
			_BLOCK_PIN(15);
			_BLOCK_PIN(17);
			_BLOCK_PIN(16);
     13c:	7616      	strb	r6, [r2, #24]
     13e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
     140:	0200f442 	.word	0x0200f442
     144:	62e2      	str	r2, [r4, #44]	; 0x2c
			_BLOCK_PIN(22);
     146:	d077      	beq.n	238 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::init()+0x1ac>
     148:	46282101 	.word	0x46282101
     14c:	f001 fd04 	bl	1b58 <pinMode>
     150:	2028f894 	.word	0x2028f894
     154:	2118      	movs	r1, #24
     156:	1c53      	.short	0x1c53
     158:	4422      	add	r2, r4
     15a:	b2db      	.short	0xb2db
     15c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			_BLOCK_PIN(23);
     160:	76112b01 	.word	0x76112b01
			_BLOCK_PIN(18);
			_BLOCK_PIN(14);
			_BLOCK_PIN(15);
			_BLOCK_PIN(17);
			_BLOCK_PIN(16);
			_BLOCK_PIN(22);
     164:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
     166:	f042      	.short	0xf042
     168:	7280      	strb	r0, [r0, #10]
     16a:	62e2      	.short	0x62e2
			_BLOCK_PIN(23);
     16c:	d064      	beq.n	238 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::init()+0x1ac>
     16e:	2101      	.short	0x2101
     170:	4630      	mov	r0, r6
     172:	f001      	.short	0xf001
     174:	fcf1 f894 	ldc2l	8, cr15, [r1], #592	; 0x250
     178:	21192028 	.word	0x21192028
     17c:	1c53      	adds	r3, r2, #1
     17e:	4422      	.short	0x4422
     180:	b2db      	uxtb	r3, r3
     182:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			_BLOCK_PIN(20);
     186:	2b01      	.short	0x2b01
			_BLOCK_PIN(14);
			_BLOCK_PIN(15);
			_BLOCK_PIN(17);
			_BLOCK_PIN(16);
			_BLOCK_PIN(22);
			_BLOCK_PIN(23);
     188:	7611      	strb	r1, [r2, #24]
     18a:	6ae2      	.short	0x6ae2
     18c:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
     190:	d05162e2 	.word	0xd05162e2
     194:	2101      	movs	r1, #1
     196:	2014      	movs	r0, #20
     198:	f001 fcde 	bl	1b58 <pinMode>
			_BLOCK_PIN(20);
     19c:	2028f894 	.word	0x2028f894
     1a0:	261a      	movs	r6, #26
     1a2:	1c53      	.short	0x1c53
     1a4:	4422      	add	r2, r4
     1a6:	b2db      	.short	0xb2db
     1a8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			_BLOCK_PIN(21);
     1ac:	76162b01 	.word	0x76162b01
			_BLOCK_PIN(15);
			_BLOCK_PIN(17);
			_BLOCK_PIN(16);
			_BLOCK_PIN(22);
			_BLOCK_PIN(23);
			_BLOCK_PIN(20);
     1b0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
     1b2:	f042      	.short	0xf042
     1b4:	6280      	str	r0, [r0, #40]	; 0x28
     1b6:	62e2      	.short	0x62e2
			_BLOCK_PIN(21);
     1b8:	d03e      	beq.n	238 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::init()+0x1ac>
     1ba:	2101      	.short	0x2101
     1bc:	2015      	movs	r0, #21
     1be:	f001 fccb 	bl	1b58 <pinMode>
     1c2:	f894      	.short	0xf894
     1c4:	2028      	movs	r0, #40	; 0x28
     1c6:	251b      	.short	0x251b
     1c8:	1c53      	adds	r3, r2, #1
     1ca:	4422      	.short	0x4422
     1cc:	b2db      	uxtb	r3, r3
     1ce:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			_BLOCK_PIN(26);
     1d2:	2b01      	.short	0x2b01
			_BLOCK_PIN(17);
			_BLOCK_PIN(16);
			_BLOCK_PIN(22);
			_BLOCK_PIN(23);
			_BLOCK_PIN(20);
			_BLOCK_PIN(21);
     1d4:	7615      	strb	r5, [r2, #24]
     1d6:	6ae2      	.short	0x6ae2
     1d8:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
     1dc:	d02b62e2 	.word	0xd02b62e2
     1e0:	2101      	movs	r1, #1
     1e2:	4630      	.short	0x4630
     1e4:	f001 fcb8 	bl	1b58 <pinMode>
			_BLOCK_PIN(26);
     1e8:	2028f894 	.word	0x2028f894
     1ec:	211e      	movs	r1, #30
     1ee:	1c53      	adds	r3, r2, #1
     1f0:	4422      	add	r2, r4
     1f2:	b2db      	uxtb	r3, r3
     1f4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			_BLOCK_PIN(27);
     1f8:	2b01      	cmp	r3, #1
			_BLOCK_PIN(16);
			_BLOCK_PIN(22);
			_BLOCK_PIN(23);
			_BLOCK_PIN(20);
			_BLOCK_PIN(21);
			_BLOCK_PIN(26);
     1fa:	7611      	strb	r1, [r2, #24]
     1fc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
     1fe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
     202:	62e2      	str	r2, [r4, #44]	; 0x2c
			_BLOCK_PIN(27);
     204:	d018      	beq.n	238 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::init()+0x1ac>
     206:	4628      	mov	r0, r5
     208:	2101      	movs	r1, #1
     20a:	f001 fca5 	bl	1b58 <pinMode>
     20e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
     212:	221f      	movs	r2, #31
     214:	1c5e      	adds	r6, r3, #1
     216:	4423      	add	r3, r4
     218:	b2f6      	uxtb	r6, r6
     21a:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
     21e:	761a      	strb	r2, [r3, #24]
     220:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     222:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     226:	62e3      	str	r3, [r4, #44]	; 0x2c
			_BLOCK_PIN(28);
			_BLOCK_PIN(31);
			_BLOCK_PIN(30);
    }

    for(int i = 0; i < m_nActualLanes; i++) {
     228:	b93e      	cbnz	r6, 23a <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::init()+0x1ae>
     22a:	f894 502a 	ldrb.w	r5, [r4, #42]	; 0x2a
      if(m_bitOffsets[i] < m_nLowBit) { m_nLowBit = m_bitOffsets[i]; }
      if(m_bitOffsets[i] > m_nHighBit) { m_nHighBit = m_bitOffsets[i]; }
    }

    m_nOutBlocks = (m_nHighBit + 8)/8;
     22e:	3508      	adds	r5, #8
     230:	10ed      	asrs	r5, r5, #3
     232:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30

  }
     236:	bd70      	pop	{r4, r5, r6, pc}
			_BLOCK_PIN(28);
			_BLOCK_PIN(31);
			_BLOCK_PIN(30);
    }

    for(int i = 0; i < m_nActualLanes; i++) {
     238:	2601      	movs	r6, #1
     23a:	f894 502a 	ldrb.w	r5, [r4, #42]	; 0x2a
     23e:	f104 0117 	add.w	r1, r4, #23
     242:	2200      	movs	r2, #0
      if(m_bitOffsets[i] < m_nLowBit) { m_nLowBit = m_bitOffsets[i]; }
     244:	f811 3f01 	ldrb.w	r3, [r1, #1]!
			_BLOCK_PIN(28);
			_BLOCK_PIN(31);
			_BLOCK_PIN(30);
    }

    for(int i = 0; i < m_nActualLanes; i++) {
     248:	3201      	adds	r2, #1
      if(m_bitOffsets[i] < m_nLowBit) { m_nLowBit = m_bitOffsets[i]; }
     24a:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
     24e:	4298      	cmp	r0, r3
     250:	bf88      	it	hi
     252:	f884 3029 	strbhi.w	r3, [r4, #41]	; 0x29
      if(m_bitOffsets[i] > m_nHighBit) { m_nHighBit = m_bitOffsets[i]; }
     256:	42ab      	cmp	r3, r5
     258:	d902      	bls.n	260 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::init()+0x1d4>
     25a:	461d      	mov	r5, r3
     25c:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
			_BLOCK_PIN(28);
			_BLOCK_PIN(31);
			_BLOCK_PIN(30);
    }

    for(int i = 0; i < m_nActualLanes; i++) {
     260:	42b2      	cmp	r2, r6
     262:	dbef      	blt.n	244 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::init()+0x1b8>
      if(m_bitOffsets[i] < m_nLowBit) { m_nLowBit = m_bitOffsets[i]; }
      if(m_bitOffsets[i] > m_nHighBit) { m_nHighBit = m_bitOffsets[i]; }
    }

    m_nOutBlocks = (m_nHighBit + 8)/8;
     264:	3508      	adds	r5, #8
     266:	10ed      	asrs	r5, r5, #3
     268:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30

  }
     26c:	bd70      	pop	{r4, r5, r6, pc}
     26e:	bf00      	nop

00000270 <setup>:
double rms;
double peak;

arm_rfft_instance_q15 fftInstance;

void setup() {
     270:	b570      	push	{r4, r5, r6, lr}
     272:	f640 31b8 	movw	r1, #3000	; 0xbb8
     276:	4836      	ldr	r0, [pc, #216]	; (350 <setup+0xe0>)
     278:	f001 f8a0 	bl	13bc <VisualMicroDebug::init(unsigned long)>
     27c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
     280:	4833      	ldr	r0, [pc, #204]	; (350 <setup+0xe0>)
     282:	f001 f897 	bl	13b4 <VisualMicroDebug::begin(unsigned long)>
     286:	2101      	movs	r1, #1
     288:	4831      	ldr	r0, [pc, #196]	; (350 <setup+0xe0>)
     28a:	f001 f875 	bl	1378 <VisualMicroDebug::outPacketStart(bool)>
     28e:	2800      	cmp	r0, #0
     290:	d14f      	bne.n	332 <setup+0xc2>
     292:	2100      	movs	r1, #0
     294:	482e      	ldr	r0, [pc, #184]	; (350 <setup+0xe0>)
     296:	2201      	movs	r2, #1
     298:	f001 f92e 	bl	14f8 <VisualMicroDebug::start(bool, bool)>
     29c:	2101      	movs	r1, #1
     29e:	482c      	ldr	r0, [pc, #176]	; (350 <setup+0xe0>)
     2a0:	f001 f86a 	bl	1378 <VisualMicroDebug::outPacketStart(bool)>
     2a4:	b130      	cbz	r0, 2b4 <setup+0x44>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     2a6:	2106      	movs	r1, #6
     2a8:	482a      	ldr	r0, [pc, #168]	; (354 <setup+0xe4>)
     2aa:	f002 fcc7 	bl	2c3c <usb_serial_write>
     2ae:	4828      	ldr	r0, [pc, #160]	; (350 <setup+0xe0>)
     2b0:	f001 f87e 	bl	13b0 <VisualMicroDebug::outPacketEnd()>
    // put your setup code here, to run once:
    // analogReference(EXTERNAL);
    pinMode(A1, INPUT);
     2b4:	2100      	movs	r1, #0
     2b6:	200f      	movs	r0, #15
     2b8:	f001 fc4e 	bl	1b58 <pinMode>
    pinMode(dataPin, OUTPUT);
     2bc:	2101      	movs	r1, #1
     2be:	200e      	movs	r0, #14
     2c0:	f001 fc4a 	bl	1b58 <pinMode>

    analogReadRes(12);          // set ADC resolution to this many bits
     2c4:	200c      	movs	r0, #12
     2c6:	f001 f9ad 	bl	1624 <analogReadRes>
    analogReadAveraging(1);    // average this many readings
     2ca:	2001      	movs	r0, #1
     2cc:	f001 f9dc 	bl	1688 <analogReadAveraging>
	}

#if defined(__FASTLED_HAS_FIBCC) && (__FASTLED_HAS_FIBCC == 1)
  template<uint8_t NUM_LANES, template<uint8_t DATA_PIN, EOrder RGB_ORDER> class CHIPSET, uint8_t DATA_PIN, EOrder RGB_ORDER=RGB>
  static CLEDController &addLeds(struct CRGB *data, int nLeds) {
    static __FIBCC<CHIPSET, DATA_PIN, NUM_LANES, RGB_ORDER> c;
     2d0:	4821      	ldr	r0, [pc, #132]	; (358 <setup+0xe8>)
     2d2:	6803      	ldr	r3, [r0, #0]
     2d4:	f013 0201 	ands.w	r2, r3, #1
     2d8:	d00e      	beq.n	2f8 <setup+0x88>
    return addLeds(&c, data, nLeds);
     2da:	2300      	movs	r3, #0
     2dc:	2275      	movs	r2, #117	; 0x75
     2de:	491f      	ldr	r1, [pc, #124]	; (35c <setup+0xec>)
     2e0:	481f      	ldr	r0, [pc, #124]	; (360 <setup+0xf0>)
     2e2:	f001 f931 	bl	1548 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>
     2e6:	2105      	movs	r1, #5
     2e8:	481e      	ldr	r0, [pc, #120]	; (364 <setup+0xf4>)
     2ea:	f002 fca7 	bl	2c3c <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     2ee:	481e      	ldr	r0, [pc, #120]	; (368 <setup+0xf8>)

    FastLED.addLeds<1, WS2813, dataPin, GRB>(leds, numLeds);
    Serial.begin(115200);
    Serial.println("Hello");
}
     2f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     2f4:	f002 bd60 	b.w	2db8 <Print::println()>

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
     2f8:	4c1c      	ldr	r4, [pc, #112]	; (36c <setup+0xfc>)
    {
    }

    /// allow construction from a LEDColorCorrection enum
    inline CRGB( LEDColorCorrection colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     2fa:	21ff      	movs	r1, #255	; 0xff
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
     2fc:	4b18      	ldr	r3, [pc, #96]	; (360 <setup+0xf0>)
     2fe:	2601      	movs	r6, #1
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
     300:	6825      	ldr	r5, [r4, #0]
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
     302:	605a      	str	r2, [r3, #4]
     304:	615a      	str	r2, [r3, #20]
        m_pNext = NULL;
     306:	609a      	str	r2, [r3, #8]
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
     308:	749e      	strb	r6, [r3, #18]
     30a:	7319      	strb	r1, [r3, #12]
     30c:	7359      	strb	r1, [r3, #13]
     30e:	7399      	strb	r1, [r3, #14]

    }

    /// allow construction from a ColorTemperature enum
    inline CRGB( ColorTemperature colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     310:	73d9      	strb	r1, [r3, #15]
     312:	7419      	strb	r1, [r3, #16]
     314:	7459      	strb	r1, [r3, #17]
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
     316:	b1c5      	cbz	r5, 34a <setup+0xda>
        if(m_pTail != NULL) { m_pTail->m_pNext = this; }
     318:	4a15      	ldr	r2, [pc, #84]	; (370 <setup+0x100>)
     31a:	6811      	ldr	r1, [r2, #0]
     31c:	b101      	cbz	r1, 320 <setup+0xb0>
     31e:	608b      	str	r3, [r1, #8]
/// Class to ensure that a minimum amount of time has kicked since the last time run - and delay if not enough time has passed yet
/// this should make sure that chipsets that have
template<int WAIT> class CMinWait {
	uint16_t mLastMicros;
public:
	CMinWait() { mLastMicros = 0; }
     320:	2500      	movs	r5, #0
    return ARM_DWT_CYCCNT - start;
  }
};

template<template<uint8_t DATA_PIN, EOrder RGB_ORDER> class CHIPSET, uint8_t DATA_PIN, int NUM_LANES, EOrder RGB_ORDER=GRB>
class __FIBCC : public FlexibleInlineBlockClocklessController<NUM_LANES,DATA_PIN,CHIPSET<DATA_PIN,RGB_ORDER>::__T1(),CHIPSET<DATA_PIN,RGB_ORDER>::__T2(),CHIPSET<DATA_PIN,RGB_ORDER>::__T3(),RGB_ORDER,CHIPSET<DATA_PIN,RGB_ORDER>::__XTRA0(),CHIPSET<DATA_PIN,RGB_ORDER>::__FLIP(),CHIPSET<DATA_PIN,RGB_ORDER>::__WAIT_TIME()> {};
     322:	4c14      	ldr	r4, [pc, #80]	; (374 <setup+0x104>)
	}

#if defined(__FASTLED_HAS_FIBCC) && (__FASTLED_HAS_FIBCC == 1)
  template<uint8_t NUM_LANES, template<uint8_t DATA_PIN, EOrder RGB_ORDER> class CHIPSET, uint8_t DATA_PIN, EOrder RGB_ORDER=RGB>
  static CLEDController &addLeds(struct CRGB *data, int nLeds) {
    static __FIBCC<CHIPSET, DATA_PIN, NUM_LANES, RGB_ORDER> c;
     324:	2101      	movs	r1, #1
        m_pTail = this;
     326:	6013      	str	r3, [r2, #0]
     328:	f8a3 5040 	strh.w	r5, [r3, #64]	; 0x40
     32c:	601c      	str	r4, [r3, #0]
     32e:	6001      	str	r1, [r0, #0]
     330:	e7d3      	b.n	2da <setup+0x6a>
     332:	2110      	movs	r1, #16
     334:	4810      	ldr	r0, [pc, #64]	; (378 <setup+0x108>)
     336:	f002 fc81 	bl	2c3c <usb_serial_write>
double rms;
double peak;

arm_rfft_instance_q15 fftInstance;

void setup() {
     33a:	210a      	movs	r1, #10
     33c:	4804      	ldr	r0, [pc, #16]	; (350 <setup+0xe0>)
     33e:	f000 ff8b 	bl	1258 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>
     342:	4803      	ldr	r0, [pc, #12]	; (350 <setup+0xe0>)
     344:	f001 f834 	bl	13b0 <VisualMicroDebug::outPacketEnd()>
     348:	e7a3      	b.n	292 <setup+0x22>

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
     34a:	6023      	str	r3, [r4, #0]
     34c:	e7e4      	b.n	318 <setup+0xa8>
     34e:	bf00      	nop
     350:	20014b80 	.word	0x20014b80
     354:	20000038 	.word	0x20000038
     358:	200129c0 	.word	0x200129c0
     35c:	20012a20 	.word	0x20012a20
     360:	200129c4 	.word	0x200129c4
     364:	20000040 	.word	0x20000040
     368:	200123f4 	.word	0x200123f4
     36c:	20014bd8 	.word	0x20014bd8
     370:	20014bdc 	.word	0x20014bdc
     374:	20000008 	.word	0x20000008
     378:	20000024 	.word	0x20000024

0000037c <loop>:
    FastLED.addLeds<1, WS2813, dataPin, GRB>(leds, numLeds);
    Serial.begin(115200);
    Serial.println("Hello");
}

void loop() {
     37c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     380:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 560 <loop+0x1e4>
     384:	b083      	sub	sp, #12
    // reading 100000 samples takes approximately 574 milliseconds
    long micros1, micros2;
    micros1 = micros();
     386:	f001 fb89 	bl	1a9c <micros>
     38a:	4d68      	ldr	r5, [pc, #416]	; (52c <loop+0x1b0>)
     38c:	4607      	mov	r7, r0
     38e:	f509 6600 	add.w	r6, r9, #2048	; 0x800
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     392:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 564 <loop+0x1e8>
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     396:	4c66      	ldr	r4, [pc, #408]	; (530 <loop+0x1b4>)
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     398:	f8d8 1000 	ldr.w	r1, [r8]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     39c:	682a      	ldr	r2, [r5, #0]
     39e:	fba4 3202 	umull	r3, r2, r4, r2
     3a2:	0c92      	lsrs	r2, r2, #18
     3a4:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
     3a8:	0052      	lsls	r2, r2, #1
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     3aa:	f8d8 3000 	ldr.w	r3, [r8]
     3ae:	1a5b      	subs	r3, r3, r1
     3b0:	429a      	cmp	r2, r3
     3b2:	d8fa      	bhi.n	3aa <loop+0x2e>
        delayMicroseconds(30);
        /*
        Minimum value is -maxPeak = -1240
        Maximum value is maxPeak = 1240
         */
        samples[i] = (analogRead(A1) - sampleBias) * 26; // scale samples to maximise resolution
     3b4:	200f      	movs	r0, #15
     3b6:	f001 f901 	bl	15bc <analogRead>
     3ba:	f2a0 50f2 	subw	r0, r0, #1522	; 0x5f2
     3be:	eb00 0340 	add.w	r3, r0, r0, lsl #1
     3c2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
     3c6:	0040      	lsls	r0, r0, #1
     3c8:	f829 0f02 	strh.w	r0, [r9, #2]!
void loop() {
    // reading 100000 samples takes approximately 574 milliseconds
    long micros1, micros2;
    micros1 = micros();
    // Sample window = 36.6 ms, fundamental frequency 27.3 Hz
    for (int i = 0; i < N_SAMPLES; i++) {
     3cc:	454e      	cmp	r6, r9
     3ce:	d1e3      	bne.n	398 <loop+0x1c>
        Maximum value is maxPeak = 1240
         */
        samples[i] = (analogRead(A1) - sampleBias) * 26; // scale samples to maximise resolution
        // samples[i] = arm_sin_q15((i*128) % 32768); // sample 4 periods of a sine wave
    }
    micros2 = micros();
     3d0:	f001 fb64 	bl	1a9c <micros>
     3d4:	4604      	mov	r4, r0
     3d6:	2115      	movs	r1, #21
     3d8:	4856      	ldr	r0, [pc, #344]	; (534 <loop+0x1b8>)
     3da:	f002 fc2f 	bl	2c3c <usb_serial_write>
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
     3de:	1be1      	subs	r1, r4, r7
     3e0:	4855      	ldr	r0, [pc, #340]	; (538 <loop+0x1bc>)
     3e2:	f002 fd39 	bl	2e58 <Print::print(long)>
     3e6:	4854      	ldr	r0, [pc, #336]	; (538 <loop+0x1bc>)
     3e8:	f002 fce6 	bl	2db8 <Print::println()>
    Serial.println(micros2 - micros1);
    

    // peak = getPeak(samples);
    // Serial.println(peak);
    arm_rfft_init_q15(&fftInstance, fftLength, 0, 1);
     3ec:	2301      	movs	r3, #1
     3ee:	2200      	movs	r2, #0
     3f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
     3f4:	4851      	ldr	r0, [pc, #324]	; (53c <loop+0x1c0>)
     3f6:	f003 f8ff 	bl	35f8 <arm_rfft_init_q15>
    arm_rfft_q15(&fftInstance, samples, fftOutput); // Q10.6 output format
     3fa:	4a51      	ldr	r2, [pc, #324]	; (540 <loop+0x1c4>)
     3fc:	4951      	ldr	r1, [pc, #324]	; (544 <loop+0x1c8>)
     3fe:	484f      	ldr	r0, [pc, #316]	; (53c <loop+0x1c0>)
     400:	f003 f89a 	bl	3538 <arm_rfft_q15>
    Serial.print("Imaginary: ");
    Serial.println(fftOutput[3]);*/

    q15_t max;
    uint32_t maxIndex;
    arm_max_q15(fftOutput, fftLength, &max, &maxIndex);
     404:	ab01      	add	r3, sp, #4
     406:	f10d 0202 	add.w	r2, sp, #2
     40a:	f44f 6180 	mov.w	r1, #1024	; 0x400
     40e:	484c      	ldr	r0, [pc, #304]	; (540 <loop+0x1c4>)
     410:	f002 ffda 	bl	33c8 <arm_max_q15>
     414:	2119      	movs	r1, #25
     416:	484c      	ldr	r0, [pc, #304]	; (548 <loop+0x1cc>)
     418:	f002 fc10 	bl	2c3c <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     41c:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
     420:	4845      	ldr	r0, [pc, #276]	; (538 <loop+0x1bc>)
     422:	f002 fd19 	bl	2e58 <Print::print(long)>
    Serial.print("Max value in fft output: ");
    Serial.println(max);
    arm_cmplx_mag_q15(fftOutput, frequencies, N_SAMPLES); // output is in Q2,14 format
     426:	4c49      	ldr	r4, [pc, #292]	; (54c <loop+0x1d0>)
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     428:	4843      	ldr	r0, [pc, #268]	; (538 <loop+0x1bc>)
     42a:	f002 fcc5 	bl	2db8 <Print::println()>
     42e:	f44f 6280 	mov.w	r2, #1024	; 0x400
     432:	4947      	ldr	r1, [pc, #284]	; (550 <loop+0x1d4>)
     434:	4842      	ldr	r0, [pc, #264]	; (540 <loop+0x1c4>)
     436:	f003 f967 	bl	3708 <arm_cmplx_mag_q15>
     43a:	4620      	mov	r0, r4
     43c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
     440:	f000 ff22 	bl	1288 <VisualMicroDebug::OnBreakPointBegin(unsigned long)>
     444:	4620      	mov	r0, r4
     446:	2105      	movs	r1, #5
     448:	f000 ff06 	bl	1258 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>
     44c:	4620      	mov	r0, r4
     44e:	210a      	movs	r1, #10
     450:	f000 ff02 	bl	1258 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>
     454:	2365      	movs	r3, #101	; 0x65
     456:	4618      	mov	r0, r3
     458:	7663      	strb	r3, [r4, #25]
     45a:	e00a      	b.n	472 <loop+0xf6>
     45c:	210a      	movs	r1, #10
     45e:	483b      	ldr	r0, [pc, #236]	; (54c <loop+0x1d0>)
     460:	f000 fefa 	bl	1258 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>
     464:	2101      	movs	r1, #1
     466:	4839      	ldr	r0, [pc, #228]	; (54c <loop+0x1d0>)
     468:	f000 ffe0 	bl	142c <VisualMicroDebug::breakWait(unsigned char)>
     46c:	2863      	cmp	r0, #99	; 0x63
     46e:	7660      	strb	r0, [r4, #25]
     470:	d015      	beq.n	49e <loop+0x122>
     472:	2865      	cmp	r0, #101	; 0x65
     474:	d1f2      	bne.n	45c <loop+0xe0>
     476:	6963      	ldr	r3, [r4, #20]
     478:	2100      	movs	r1, #0
     47a:	6922      	ldr	r2, [r4, #16]
     47c:	3301      	adds	r3, #1
     47e:	4833      	ldr	r0, [pc, #204]	; (54c <loop+0x1d0>)
     480:	6163      	str	r3, [r4, #20]
     482:	b90a      	cbnz	r2, 488 <loop+0x10c>
     484:	2b00      	cmp	r3, #0
     486:	d1e9      	bne.n	45c <loop+0xe0>
     488:	f000 ff76 	bl	1378 <VisualMicroDebug::outPacketStart(bool)>
     48c:	2800      	cmp	r0, #0
     48e:	d141      	bne.n	514 <loop+0x198>
     490:	2201      	movs	r2, #1
     492:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
     496:	482d      	ldr	r0, [pc, #180]	; (54c <loop+0x1d0>)
     498:	f000 feea 	bl	1270 <VisualMicroDebug::DBG_YieldAndWait(unsigned long, bool)>
     49c:	e7de      	b.n	45c <loop+0xe0>

    Serial.print("Fundamental frequency (170 Hz): ");
    unsigned char* p1 = (unsigned char*)(frequencies + 1);
    for (int i = (sizeof *frequencies) - 1; i >= 0; i--) {
        Serial.print(p1[i], HEX);
     49e:	4e2c      	ldr	r6, [pc, #176]	; (550 <loop+0x1d4>)
    for (int i = (sizeof * fftOutput) - 1; i >= 0; i--) {
        Serial.print(p4[i], HEX);
    }
    Serial.println(fftOutput[9]);*/

    for (int i = 2; i < 50; i++) {
     4a0:	2502      	movs	r5, #2
    q15_t max;
    uint32_t maxIndex;
    arm_max_q15(fftOutput, fftLength, &max, &maxIndex);
    Serial.print("Max value in fft output: ");
    Serial.println(max);
    arm_cmplx_mag_q15(fftOutput, frequencies, N_SAMPLES); // output is in Q2,14 format
     4a2:	482a      	ldr	r0, [pc, #168]	; (54c <loop+0x1d0>)
     4a4:	f000 ff54 	bl	1350 <VisualMicroDebug::OnBreakPointEnd()>
     4a8:	2120      	movs	r1, #32
     4aa:	482a      	ldr	r0, [pc, #168]	; (554 <loop+0x1d8>)
     4ac:	4634      	mov	r4, r6
     4ae:	f002 fbc5 	bl	2c3c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
     4b2:	78f1      	ldrb	r1, [r6, #3]
     4b4:	2300      	movs	r3, #0
     4b6:	2210      	movs	r2, #16
     4b8:	481f      	ldr	r0, [pc, #124]	; (538 <loop+0x1bc>)
     4ba:	f002 fc8d 	bl	2dd8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     4be:	78b1      	ldrb	r1, [r6, #2]
     4c0:	2300      	movs	r3, #0
     4c2:	2210      	movs	r2, #16
     4c4:	481c      	ldr	r0, [pc, #112]	; (538 <loop+0x1bc>)
     4c6:	f002 fc87 	bl	2dd8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    Serial.print("Fundamental frequency (170 Hz): ");
    unsigned char* p1 = (unsigned char*)(frequencies + 1);
    for (int i = (sizeof *frequencies) - 1; i >= 0; i--) {
        Serial.print(p1[i], HEX);
    }
    Serial.println();
     4ca:	481b      	ldr	r0, [pc, #108]	; (538 <loop+0x1bc>)
     4cc:	f002 fc74 	bl	2db8 <Print::println()>
     4d0:	2109      	movs	r1, #9
     4d2:	4821      	ldr	r0, [pc, #132]	; (558 <loop+0x1dc>)
     4d4:	f002 fbb2 	bl	2c3c <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     4d8:	4629      	mov	r1, r5
     4da:	4817      	ldr	r0, [pc, #92]	; (538 <loop+0x1bc>)
    for (int i = (sizeof * fftOutput) - 1; i >= 0; i--) {
        Serial.print(p4[i], HEX);
    }
    Serial.println(fftOutput[9]);*/

    for (int i = 2; i < 50; i++) {
     4dc:	3501      	adds	r5, #1
     4de:	f002 fcbb 	bl	2e58 <Print::print(long)>
     4e2:	2102      	movs	r1, #2
     4e4:	481d      	ldr	r0, [pc, #116]	; (55c <loop+0x1e0>)
     4e6:	3402      	adds	r4, #2
     4e8:	f002 fba8 	bl	2c3c <usb_serial_write>
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
     4ec:	78e1      	ldrb	r1, [r4, #3]
     4ee:	2300      	movs	r3, #0
     4f0:	2210      	movs	r2, #16
     4f2:	4811      	ldr	r0, [pc, #68]	; (538 <loop+0x1bc>)
     4f4:	f002 fc70 	bl	2dd8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     4f8:	78a1      	ldrb	r1, [r4, #2]
     4fa:	2300      	movs	r3, #0
     4fc:	2210      	movs	r2, #16
     4fe:	480e      	ldr	r0, [pc, #56]	; (538 <loop+0x1bc>)
     500:	f002 fc6a 	bl	2dd8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
        Serial.print(": ");
        unsigned char* p = (unsigned char*)(frequencies + i);
        for (int j = (sizeof *frequencies) - 1; j >= 0 ; j--) {
            Serial.print(p[j], HEX);
        }
        Serial.println();
     504:	480c      	ldr	r0, [pc, #48]	; (538 <loop+0x1bc>)
     506:	f002 fc57 	bl	2db8 <Print::println()>
    for (int i = (sizeof * fftOutput) - 1; i >= 0; i--) {
        Serial.print(p4[i], HEX);
    }
    Serial.println(fftOutput[9]);*/

    for (int i = 2; i < 50; i++) {
     50a:	2d32      	cmp	r5, #50	; 0x32
     50c:	d1e0      	bne.n	4d0 <loop+0x154>
    for (int i = ledsOn; i < numLeds; i++) {
        leds[i] = CRGB::Black;
    }

    FastLED.show();*/
}
     50e:	b003      	add	sp, #12
     510:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    q15_t max;
    uint32_t maxIndex;
    arm_max_q15(fftOutput, fftLength, &max, &maxIndex);
    Serial.print("Max value in fft output: ");
    Serial.println(max);
    arm_cmplx_mag_q15(fftOutput, frequencies, N_SAMPLES); // output is in Q2,14 format
     514:	2101      	movs	r1, #1
     516:	480d      	ldr	r0, [pc, #52]	; (54c <loop+0x1d0>)
     518:	f000 fecc 	bl	12b4 <VisualMicroDebug::OnBreakPointPrintBegin(unsigned char)>
     51c:	480b      	ldr	r0, [pc, #44]	; (54c <loop+0x1d0>)
     51e:	f000 ff09 	bl	1334 <VisualMicroDebug::OnBreakPointPrintEnd()>
     522:	480a      	ldr	r0, [pc, #40]	; (54c <loop+0x1d0>)
     524:	f000 ff44 	bl	13b0 <VisualMicroDebug::outPacketEnd()>
     528:	e7b2      	b.n	490 <loop+0x114>
     52a:	bf00      	nop
     52c:	200123c4 	.word	0x200123c4
     530:	431bde83 	.word	0x431bde83
     534:	20000048 	.word	0x20000048
     538:	200123f4 	.word	0x200123f4
     53c:	20012a08 	.word	0x20012a08
     540:	20012b80 	.word	0x20012b80
     544:	20013b80 	.word	0x20013b80
     548:	20000060 	.word	0x20000060
     54c:	20014b80 	.word	0x20014b80
     550:	20014380 	.word	0x20014380
     554:	2000007c 	.word	0x2000007c
     558:	200000a0 	.word	0x200000a0
     55c:	200000ac 	.word	0x200000ac
     560:	20013b7e 	.word	0x20013b7e
     564:	e0001004 	.word	0xe0001004

00000568 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)>:
        }
      }
    }
  }

  uint32_t showRGBInternal(PixelController<RGB_ORDER,LANES, __FL_T4_MASK> &allpixels) {
     568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     56c:	b097      	sub	sp, #92	; 0x5c
                d[2] = e[2] - d[2];
        }

        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
     56e:	7c0b      	ldrb	r3, [r1, #16]
     570:	4606      	mov	r6, r0
     572:	4608      	mov	r0, r1
     574:	9101      	str	r1, [sp, #4]
     576:	7b49      	ldrb	r1, [r1, #13]
    allpixels.preStepFirstByteDithering();
    _outlines b0;
    uint32_t start = ARM_DWT_CYCCNT;
     578:	4ace      	ldr	r2, [pc, #824]	; (8b4 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x34c>)
     57a:	1a5b      	subs	r3, r3, r1
     57c:	fa5f fc83 	uxtb.w	ip, r3
     580:	f880 c00d 	strb.w	ip, [r0, #13]
     584:	6812      	ldr	r2, [r2, #0]

    for(int i = 0; i < m_nActualLanes; i++) {
     586:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
  }

  uint32_t showRGBInternal(PixelController<RGB_ORDER,LANES, __FL_T4_MASK> &allpixels) {
    allpixels.preStepFirstByteDithering();
    _outlines b0;
    uint32_t start = ARM_DWT_CYCCNT;
     58a:	9205      	str	r2, [sp, #20]

    for(int i = 0; i < m_nActualLanes; i++) {
     58c:	b313      	cbz	r3, 5d4 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x6c>
     58e:	9901      	ldr	r1, [sp, #4]
     590:	3305      	adds	r3, #5
     592:	f106 0417 	add.w	r4, r6, #23
     596:	f891 e013 	ldrb.w	lr, [r1, #19]
     59a:	eb01 0583 	add.w	r5, r1, r3, lsl #2
     59e:	680f      	ldr	r7, [r1, #0]
     5a0:	f101 0014 	add.w	r0, r1, #20
     5a4:	f10e 0e01 	add.w	lr, lr, #1
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }
     5a8:	f850 3f04 	ldr.w	r3, [r0, #4]!
      b0.bytes[m_bitOffsets[i]] = allpixels.loadAndScale0(i);
     5ac:	a916      	add	r1, sp, #88	; 0x58
     5ae:	f814 2f01 	ldrb.w	r2, [r4, #1]!
     5b2:	443b      	add	r3, r7
     5b4:	440a      	add	r2, r1
     5b6:	785b      	ldrb	r3, [r3, #1]
/// @param j - second byte to add
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
     5b8:	eb03 010c 	add.w	r1, r3, ip

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
     5bc:	b133      	cbz	r3, 5cc <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x64>
    if( t > 255) t = 255;
     5be:	29ff      	cmp	r1, #255	; 0xff
     5c0:	bfa8      	it	ge
     5c2:	21ff      	movge	r1, #255	; 0xff
     5c4:	fb01 f30e 	mul.w	r3, r1, lr
     5c8:	f3c3 2307 	ubfx	r3, r3, #8, #8
  uint32_t showRGBInternal(PixelController<RGB_ORDER,LANES, __FL_T4_MASK> &allpixels) {
    allpixels.preStepFirstByteDithering();
    _outlines b0;
    uint32_t start = ARM_DWT_CYCCNT;

    for(int i = 0; i < m_nActualLanes; i++) {
     5cc:	4285      	cmp	r5, r0
      b0.bytes[m_bitOffsets[i]] = allpixels.loadAndScale0(i);
     5ce:	f802 3c40 	strb.w	r3, [r2, #-64]
  uint32_t showRGBInternal(PixelController<RGB_ORDER,LANES, __FL_T4_MASK> &allpixels) {
    allpixels.preStepFirstByteDithering();
    _outlines b0;
    uint32_t start = ARM_DWT_CYCCNT;

    for(int i = 0; i < m_nActualLanes; i++) {
     5d2:	d1e9      	bne.n	5a8 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x40>
      b0.bytes[m_bitOffsets[i]] = allpixels.loadAndScale0(i);
    }

    cli();
     5d4:	b672      	cpsid	i
    m_offsets[0] = _FASTLED_NS_TO_DWT(T1+T2+T3);
     5d6:	49b8      	ldr	r1, [pc, #736]	; (8b8 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x350>)
     5d8:	48b8      	ldr	r0, [pc, #736]	; (8bc <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x354>)
     5da:	680c      	ldr	r4, [r1, #0]
    m_offsets[1] = _FASTLED_NS_TO_DWT(T2+T3);
     5dc:	680b      	ldr	r3, [r1, #0]
    for(int i = 0; i < m_nActualLanes; i++) {
      b0.bytes[m_bitOffsets[i]] = allpixels.loadAndScale0(i);
    }

    cli();
    m_offsets[0] = _FASTLED_NS_TO_DWT(T1+T2+T3);
     5de:	0c24      	lsrs	r4, r4, #16
    m_offsets[1] = _FASTLED_NS_TO_DWT(T2+T3);
    m_offsets[2] = _FASTLED_NS_TO_DWT(T3);
     5e0:	680a      	ldr	r2, [r1, #0]
      b0.bytes[m_bitOffsets[i]] = allpixels.loadAndScale0(i);
    }

    cli();
    m_offsets[0] = _FASTLED_NS_TO_DWT(T1+T2+T3);
    m_offsets[1] = _FASTLED_NS_TO_DWT(T2+T3);
     5e2:	0c1b      	lsrs	r3, r3, #16
    m_offsets[2] = _FASTLED_NS_TO_DWT(T3);
    uint32_t wait_off = _FASTLED_NS_TO_DWT((WAIT_TIME-INTERRUPT_THRESHOLD));
     5e4:	6809      	ldr	r1, [r1, #0]
    }

    cli();
    m_offsets[0] = _FASTLED_NS_TO_DWT(T1+T2+T3);
    m_offsets[1] = _FASTLED_NS_TO_DWT(T2+T3);
    m_offsets[2] = _FASTLED_NS_TO_DWT(T3);
     5e6:	0c12      	lsrs	r2, r2, #16
      b0.bytes[m_bitOffsets[i]] = allpixels.loadAndScale0(i);
    }

    cli();
    m_offsets[0] = _FASTLED_NS_TO_DWT(T1+T2+T3);
    m_offsets[1] = _FASTLED_NS_TO_DWT(T2+T3);
     5e8:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    for(int i = 0; i < m_nActualLanes; i++) {
      b0.bytes[m_bitOffsets[i]] = allpixels.loadAndScale0(i);
    }

    cli();
    m_offsets[0] = _FASTLED_NS_TO_DWT(T1+T2+T3);
     5ec:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    m_offsets[1] = _FASTLED_NS_TO_DWT(T2+T3);
     5f0:	019b      	lsls	r3, r3, #6
    m_offsets[2] = _FASTLED_NS_TO_DWT(T3);
    uint32_t wait_off = _FASTLED_NS_TO_DWT((WAIT_TIME-INTERRUPT_THRESHOLD));
     5f2:	0c09      	lsrs	r1, r1, #16
    for(int i = 0; i < m_nActualLanes; i++) {
      b0.bytes[m_bitOffsets[i]] = allpixels.loadAndScale0(i);
    }

    cli();
    m_offsets[0] = _FASTLED_NS_TO_DWT(T1+T2+T3);
     5f4:	01e4      	lsls	r4, r4, #7
    m_offsets[1] = _FASTLED_NS_TO_DWT(T2+T3);
    m_offsets[2] = _FASTLED_NS_TO_DWT(T3);
     5f6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
      b0.bytes[m_bitOffsets[i]] = allpixels.loadAndScale0(i);
    }

    cli();
    m_offsets[0] = _FASTLED_NS_TO_DWT(T1+T2+T3);
    m_offsets[1] = _FASTLED_NS_TO_DWT(T2+T3);
     5fa:	085b      	lsrs	r3, r3, #1
    m_offsets[2] = _FASTLED_NS_TO_DWT(T3);
    uint32_t wait_off = _FASTLED_NS_TO_DWT((WAIT_TIME-INTERRUPT_THRESHOLD));
     5fc:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    }

    cli();
    m_offsets[0] = _FASTLED_NS_TO_DWT(T1+T2+T3);
    m_offsets[1] = _FASTLED_NS_TO_DWT(T2+T3);
    m_offsets[2] = _FASTLED_NS_TO_DWT(T3);
     600:	0195      	lsls	r5, r2, #6
    for(int i = 0; i < m_nActualLanes; i++) {
      b0.bytes[m_bitOffsets[i]] = allpixels.loadAndScale0(i);
    }

    cli();
    m_offsets[0] = _FASTLED_NS_TO_DWT(T1+T2+T3);
     602:	fba0 4204 	umull	r4, r2, r0, r4
    m_offsets[1] = _FASTLED_NS_TO_DWT(T2+T3);
    m_offsets[2] = _FASTLED_NS_TO_DWT(T3);
    uint32_t wait_off = _FASTLED_NS_TO_DWT((WAIT_TIME-INTERRUPT_THRESHOLD));
     606:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
      b0.bytes[m_bitOffsets[i]] = allpixels.loadAndScale0(i);
    }

    cli();
    m_offsets[0] = _FASTLED_NS_TO_DWT(T1+T2+T3);
    m_offsets[1] = _FASTLED_NS_TO_DWT(T2+T3);
     60a:	fba0 4303 	umull	r4, r3, r0, r3
    m_offsets[2] = _FASTLED_NS_TO_DWT(T3);
     60e:	fba0 4505 	umull	r4, r5, r0, r5
    for(int i = 0; i < m_nActualLanes; i++) {
      b0.bytes[m_bitOffsets[i]] = allpixels.loadAndScale0(i);
    }

    cli();
    m_offsets[0] = _FASTLED_NS_TO_DWT(T1+T2+T3);
     612:	0a12      	lsrs	r2, r2, #8
    m_offsets[1] = _FASTLED_NS_TO_DWT(T2+T3);
     614:	0a1b      	lsrs	r3, r3, #8
    m_offsets[2] = _FASTLED_NS_TO_DWT(T3);
    uint32_t wait_off = _FASTLED_NS_TO_DWT((WAIT_TIME-INTERRUPT_THRESHOLD));

    uint32_t next_mark = ARM_DWT_CYCCNT + m_offsets[0];
     616:	4ca7      	ldr	r4, [pc, #668]	; (8b4 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x34c>)

    cli();
    m_offsets[0] = _FASTLED_NS_TO_DWT(T1+T2+T3);
    m_offsets[1] = _FASTLED_NS_TO_DWT(T2+T3);
    m_offsets[2] = _FASTLED_NS_TO_DWT(T3);
    uint32_t wait_off = _FASTLED_NS_TO_DWT((WAIT_TIME-INTERRUPT_THRESHOLD));
     618:	0849      	lsrs	r1, r1, #1
    for(int i = 0; i < m_nActualLanes; i++) {
      b0.bytes[m_bitOffsets[i]] = allpixels.loadAndScale0(i);
    }

    cli();
    m_offsets[0] = _FASTLED_NS_TO_DWT(T1+T2+T3);
     61a:	6372      	str	r2, [r6, #52]	; 0x34
    m_offsets[1] = _FASTLED_NS_TO_DWT(T2+T3);
     61c:	63b3      	str	r3, [r6, #56]	; 0x38
    m_offsets[2] = _FASTLED_NS_TO_DWT(T3);
     61e:	0a2d      	lsrs	r5, r5, #8
    uint32_t wait_off = _FASTLED_NS_TO_DWT((WAIT_TIME-INTERRUPT_THRESHOLD));
     620:	fba0 1301 	umull	r1, r3, r0, r1

    uint32_t next_mark = ARM_DWT_CYCCNT + m_offsets[0];

    while(allpixels.has(1)) {
     624:	9901      	ldr	r1, [sp, #4]
    }

    cli();
    m_offsets[0] = _FASTLED_NS_TO_DWT(T1+T2+T3);
    m_offsets[1] = _FASTLED_NS_TO_DWT(T2+T3);
    m_offsets[2] = _FASTLED_NS_TO_DWT(T3);
     626:	63f5      	str	r5, [r6, #60]	; 0x3c
    uint32_t wait_off = _FASTLED_NS_TO_DWT((WAIT_TIME-INTERRUPT_THRESHOLD));

    uint32_t next_mark = ARM_DWT_CYCCNT + m_offsets[0];

    while(allpixels.has(1)) {
     628:	6889      	ldr	r1, [r1, #8]

    cli();
    m_offsets[0] = _FASTLED_NS_TO_DWT(T1+T2+T3);
    m_offsets[1] = _FASTLED_NS_TO_DWT(T2+T3);
    m_offsets[2] = _FASTLED_NS_TO_DWT(T3);
    uint32_t wait_off = _FASTLED_NS_TO_DWT((WAIT_TIME-INTERRUPT_THRESHOLD));
     62a:	0a1b      	lsrs	r3, r3, #8

    uint32_t next_mark = ARM_DWT_CYCCNT + m_offsets[0];
     62c:	6820      	ldr	r0, [r4, #0]

    while(allpixels.has(1)) {
     62e:	2900      	cmp	r1, #0

    cli();
    m_offsets[0] = _FASTLED_NS_TO_DWT(T1+T2+T3);
    m_offsets[1] = _FASTLED_NS_TO_DWT(T2+T3);
    m_offsets[2] = _FASTLED_NS_TO_DWT(T3);
    uint32_t wait_off = _FASTLED_NS_TO_DWT((WAIT_TIME-INTERRUPT_THRESHOLD));
     630:	9304      	str	r3, [sp, #16]

    uint32_t next_mark = ARM_DWT_CYCCNT + m_offsets[0];
     632:	eb02 0b00 	add.w	fp, r2, r0

    while(allpixels.has(1)) {
     636:	f340 8420 	ble.w	e7a <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x912>
      allpixels.stepDithering();
      #if (FASTLED_ALLOW_INTERRUPTS == 1)
			cli();
			// if interrupts took longer than 45µs, punt on the current frame
			if(ARM_DWT_CYCCNT > next_mark) {
     63a:	46a2      	mov	sl, r4

      uint32_t out = (b2.bg[3][i] << 24) | (b2.bg[2][i] << 16) | (b2.bg[1][i] << 8) | b2.bg[0][i];

      out = ((~out) & m_nWriteMask);
      while((next_mark - ARM_DWT_CYCCNT) > m_offsets[1]);
      *FastPin<FIRST_PIN>::cport() = out;
     63c:	9602      	str	r6, [sp, #8]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     63e:	9d01      	ldr	r5, [sp, #4]
                d[1] = e[1] - d[1];
     640:	7b68      	ldrb	r0, [r5, #13]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     642:	7beb      	ldrb	r3, [r5, #15]
     644:	7b29      	ldrb	r1, [r5, #12]
                d[1] = e[1] - d[1];
     646:	7c2a      	ldrb	r2, [r5, #16]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     648:	1a59      	subs	r1, r3, r1
                d[1] = e[1] - d[1];
                d[2] = e[2] - d[2];
     64a:	7c6b      	ldrb	r3, [r5, #17]
        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
                d[1] = e[1] - d[1];
     64c:	1a12      	subs	r2, r2, r0
                d[2] = e[2] - d[2];
     64e:	7ba8      	ldrb	r0, [r5, #14]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     650:	7329      	strb	r1, [r5, #12]
                d[1] = e[1] - d[1];
                d[2] = e[2] - d[2];
     652:	1a1b      	subs	r3, r3, r0
        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
                d[1] = e[1] - d[1];
     654:	736a      	strb	r2, [r5, #13]
                d[2] = e[2] - d[2];
     656:	73ab      	strb	r3, [r5, #14]
    uint32_t next_mark = ARM_DWT_CYCCNT + m_offsets[0];

    while(allpixels.has(1)) {
      allpixels.stepDithering();
      #if (FASTLED_ALLOW_INTERRUPTS == 1)
			cli();
     658:	b672      	cpsid	i
			// if interrupts took longer than 45µs, punt on the current frame
			if(ARM_DWT_CYCCNT > next_mark) {
     65a:	f8da 3000 	ldr.w	r3, [sl]
     65e:	4a95      	ldr	r2, [pc, #596]	; (8b4 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x34c>)
     660:	455b      	cmp	r3, fp
     662:	d907      	bls.n	674 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x10c>
				if((ARM_DWT_CYCCNT-next_mark) > wait_off) { sei(); return ARM_DWT_CYCCNT - start; }
     664:	f8da 3000 	ldr.w	r3, [sl]
     668:	9904      	ldr	r1, [sp, #16]
     66a:	ebcb 0303 	rsb	r3, fp, r3
     66e:	4299      	cmp	r1, r3
     670:	f0c0 8411 	bcc.w	e96 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x92e>
/// data into LSB for a faster write (the code using this data can happily walk the array backwards)
__attribute__((always_inline)) inline void transpose8x1(unsigned char *A, unsigned char *B) {
  uint32_t x, y, t;

  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
     674:	990c      	ldr	r1, [sp, #48]	; 0x30
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     676:	f64c 48cc 	movw	r8, #52428	; 0xcccc
__attribute__((always_inline)) inline void transpose8x1(unsigned char *A, unsigned char *B) {
  uint32_t x, y, t;

  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);
     67a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     67c:	ea81 14d1 	eor.w	r4, r1, r1, lsr #7
__attribute__((always_inline)) inline void transpose8x1(unsigned char *A, unsigned char *B) {
  uint32_t x, y, t;

  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);
     680:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     684:	ea83 10d3 	eor.w	r0, r3, r3, lsr #7
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     688:	4642      	mov	r2, r8

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     68a:	f004 14aa 	and.w	r4, r4, #11141290	; 0xaa00aa
/// data into LSB for a faster write (the code using this data can happily walk the array backwards)
__attribute__((always_inline)) inline void transpose8x1(unsigned char *A, unsigned char *B) {
  uint32_t x, y, t;

  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
     68e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     690:	f000 10aa 	and.w	r0, r0, #11141290	; 0xaa00aa
/// data into LSB for a faster write (the code using this data can happily walk the array backwards)
__attribute__((always_inline)) inline void transpose8x1(unsigned char *A, unsigned char *B) {
  uint32_t x, y, t;

  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
     694:	9d08      	ldr	r5, [sp, #32]
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     696:	4061      	eors	r1, r4
__attribute__((always_inline)) inline void transpose8x1(unsigned char *A, unsigned char *B) {
  uint32_t x, y, t;

  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);
     698:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     69c:	4043      	eors	r3, r0
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     69e:	ea87 1ed7 	eor.w	lr, r7, r7, lsr #7
     6a2:	ea81 14c4 	eor.w	r4, r1, r4, lsl #7
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     6a6:	ea83 10c0 	eor.w	r0, r3, r0, lsl #7
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     6aa:	f00e 1eaa 	and.w	lr, lr, #11141290	; 0xaa00aa
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     6ae:	ea84 3194 	eor.w	r1, r4, r4, lsr #14
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     6b2:	ea8c 13dc 	eor.w	r3, ip, ip, lsr #7
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     6b6:	ea87 070e 	eor.w	r7, r7, lr
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     6ba:	ea01 0808 	and.w	r8, r1, r8
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     6be:	ea80 3190 	eor.w	r1, r0, r0, lsr #14
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     6c2:	f003 13aa 	and.w	r3, r3, #11141290	; 0xaa00aa
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     6c6:	ea87 17ce 	eor.w	r7, r7, lr, lsl #7
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     6ca:	400a      	ands	r2, r1

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     6cc:	ea84 0108 	eor.w	r1, r4, r8
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     6d0:	ea8c 0403 	eor.w	r4, ip, r3
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     6d4:	ea85 1cd5 	eor.w	ip, r5, r5, lsr #7
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     6d8:	ea81 3188 	eor.w	r1, r1, r8, lsl #14
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     6dc:	4050      	eors	r0, r2
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     6de:	ea84 13c3 	eor.w	r3, r4, r3, lsl #7
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     6e2:	f00c 1caa 	and.w	ip, ip, #11141290	; 0xaa00aa
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     6e6:	ea80 3282 	eor.w	r2, r0, r2, lsl #14
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
     6ea:	f001 300f 	and.w	r0, r1, #252645135	; 0xf0f0f0f
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     6ee:	ea89 14d9 	eor.w	r4, r9, r9, lsr #7
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     6f2:	ea85 050c 	eor.w	r5, r5, ip
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
     6f6:	4606      	mov	r6, r0
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     6f8:	9806      	ldr	r0, [sp, #24]
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     6fa:	f004 14aa 	and.w	r4, r4, #11141290	; 0xaa00aa
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     6fe:	ea85 15cc 	eor.w	r5, r5, ip, lsl #7
     702:	ea80 18d0 	eor.w	r8, r0, r0, lsr #7
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     706:	9807      	ldr	r0, [sp, #28]
     708:	ea89 0e04 	eor.w	lr, r9, r4
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     70c:	0909      	lsrs	r1, r1, #4
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     70e:	ea80 1cd0 	eor.w	ip, r0, r0, lsr #7
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     712:	f008 18aa 	and.w	r8, r8, #11141290	; 0xaa00aa
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     716:	ea8e 1ec4 	eor.w	lr, lr, r4, lsl #7
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     71a:	9806      	ldr	r0, [sp, #24]
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     71c:	f00c 1caa 	and.w	ip, ip, #11141290	; 0xaa00aa
     720:	9c07      	ldr	r4, [sp, #28]
  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
     722:	f002 39f0 	and.w	r9, r2, #4042322160	; 0xf0f0f0f0
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     726:	ea80 0008 	eor.w	r0, r0, r8
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     72a:	ea84 040c 	eor.w	r4, r4, ip
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     72e:	0112      	lsls	r2, r2, #4
  *((uint32_t*)(B+4)) = x;
     730:	f001 310f 	and.w	r1, r1, #252645135	; 0xf0f0f0f
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     734:	ea80 10c8 	eor.w	r0, r0, r8, lsl #7
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     738:	ea84 14cc 	eor.w	r4, r4, ip, lsl #7
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     73c:	f002 32f0 	and.w	r2, r2, #4042322160	; 0xf0f0f0f0
  *((uint32_t*)(B+4)) = x;
     740:	ea41 0109 	orr.w	r1, r1, r9
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     744:	ea87 3897 	eor.w	r8, r7, r7, lsr #14
     748:	f64c 4ccc 	movw	ip, #52428	; 0xcccc
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     74c:	4332      	orrs	r2, r6
  *((uint32_t*)(B+4)) = x;
     74e:	9115      	str	r1, [sp, #84]	; 0x54
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     750:	f64c 41cc 	movw	r1, #52428	; 0xcccc

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     754:	ea08 0c0c 	and.w	ip, r8, ip
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     758:	ea83 3893 	eor.w	r8, r3, r3, lsr #14
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     75c:	9214      	str	r2, [sp, #80]	; 0x50
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     75e:	f64c 42cc 	movw	r2, #52428	; 0xcccc
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     762:	ea08 0101 	and.w	r1, r8, r1

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     766:	ea85 3895 	eor.w	r8, r5, r5, lsr #14
     76a:	ea87 070c 	eor.w	r7, r7, ip
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     76e:	ea84 3994 	eor.w	r9, r4, r4, lsr #14

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     772:	ea08 0202 	and.w	r2, r8, r2
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     776:	ea8e 389e 	eor.w	r8, lr, lr, lsr #14

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     77a:	ea87 378c 	eor.w	r7, r7, ip, lsl #14
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     77e:	f64c 4ccc 	movw	ip, #52428	; 0xcccc

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     782:	4055      	eors	r5, r2
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     784:	404b      	eors	r3, r1
     786:	ea08 0c0c 	and.w	ip, r8, ip

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     78a:	ea80 3890 	eor.w	r8, r0, r0, lsr #14
     78e:	ea85 3582 	eor.w	r5, r5, r2, lsl #14
     792:	f64c 42cc 	movw	r2, #52428	; 0xcccc
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     796:	ea83 3381 	eor.w	r3, r3, r1, lsl #14
     79a:	ea8e 0e0c 	eor.w	lr, lr, ip

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     79e:	ea08 0202 	and.w	r2, r8, r2
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     7a2:	f64c 48cc 	movw	r8, #52428	; 0xcccc
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     7a6:	0939      	lsrs	r1, r7, #4
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
     7a8:	f007 370f 	and.w	r7, r7, #252645135	; 0xf0f0f0f
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     7ac:	ea09 0808 	and.w	r8, r9, r8

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     7b0:	4050      	eors	r0, r2

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
     7b2:	f003 39f0 	and.w	r9, r3, #4042322160	; 0xf0f0f0f0
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     7b6:	011b      	lsls	r3, r3, #4
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     7b8:	ea84 0408 	eor.w	r4, r4, r8

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     7bc:	ea80 3082 	eor.w	r0, r0, r2, lsl #14
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     7c0:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
  *((uint32_t*)(B+4)) = x;
     7c4:	f001 310f 	and.w	r1, r1, #252645135	; 0xf0f0f0f
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     7c8:	ea84 3488 	eor.w	r4, r4, r8, lsl #14
     7cc:	9e02      	ldr	r6, [sp, #8]
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     7ce:	433b      	orrs	r3, r7
  *((uint32_t*)(B+4)) = x;
     7d0:	0907      	lsrs	r7, r0, #4
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     7d2:	0122      	lsls	r2, r4, #4
  *((uint32_t*)(B+4)) = x;
     7d4:	ea41 0109 	orr.w	r1, r1, r9
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     7d8:	ea8e 3e8c 	eor.w	lr, lr, ip, lsl #14
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
     7dc:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     7e0:	ea4f 1915 	mov.w	r9, r5, lsr #4
     7e4:	f007 370f 	and.w	r7, r7, #252645135	; 0xf0f0f0f
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     7e8:	f002 32f0 	and.w	r2, r2, #4042322160	; 0xf0f0f0f0
  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
     7ec:	f004 34f0 	and.w	r4, r4, #4042322160	; 0xf0f0f0f0
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     7f0:	ea4f 180e 	mov.w	r8, lr, lsl #4
  *((uint32_t*)(B+4)) = x;
     7f4:	f009 390f 	and.w	r9, r9, #252645135	; 0xf0f0f0f
  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
     7f8:	f00e 3ef0 	and.w	lr, lr, #4042322160	; 0xf0f0f0f0
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     7fc:	433c      	orrs	r4, r7
     7fe:	9113      	str	r1, [sp, #76]	; 0x4c
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     800:	ea42 0100 	orr.w	r1, r2, r0
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane, uint8_t scale) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane, scale); }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getd(PixelController & pc) { return pc.d[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getscale(PixelController & pc) { return pc.mScale.raw[RO(SLOT)]; }
     804:	9f01      	ldr	r7, [sp, #4]
     806:	f008 3cf0 	and.w	ip, r8, #4042322160	; 0xf0f0f0f0
  *((uint32_t*)(B+4)) = x;
     80a:	ea49 090e 	orr.w	r9, r9, lr
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
     80e:	f005 350f 	and.w	r5, r5, #252645135	; 0xf0f0f0f
     812:	f897 e012 	ldrb.w	lr, [r7, #18]
     816:	aa0e      	add	r2, sp, #56	; 0x38
  x = t;

  *((uint32_t*)B) = y;
     818:	910e      	str	r1, [sp, #56]	; 0x38
     81a:	ea4c 0505 	orr.w	r5, ip, r5
     81e:	6839      	ldr	r1, [r7, #0]
     820:	f10e 0e01 	add.w	lr, lr, #1
     824:	9312      	str	r3, [sp, #72]	; 0x48
    transpose8x1(b.bg[0], b2.bg[0]);

    register uint8_t d = pixels.template getd<PX>(pixels);
    register uint8_t scale = pixels.template getscale<PX>(pixels);

    int x = 0;
     826:	2000      	movs	r0, #0
    for(uint32_t i = 8; i > 0;) {
     828:	2308      	movs	r3, #8

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane, uint8_t scale) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane, scale); }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getd(PixelController & pc) { return pc.d[RO(SLOT)]; }
     82a:	f897 800c 	ldrb.w	r8, [r7, #12]
     82e:	468c      	mov	ip, r1
  *((uint32_t*)(B+4)) = x;
     830:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     834:	9510      	str	r5, [sp, #64]	; 0x40
  *((uint32_t*)(B+4)) = x;
     836:	940f      	str	r4, [sp, #60]	; 0x3c
     838:	9103      	str	r1, [sp, #12]
      i--;
     83a:	3b01      	subs	r3, #1
      while(ARM_DWT_CYCCNT < next_mark);
     83c:	f8da 1000 	ldr.w	r1, [sl]
     840:	4559      	cmp	r1, fp
     842:	d3fb      	bcc.n	83c <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x2d4>
      *FastPin<FIRST_PIN>::sport() = m_nWriteMask;
     844:	6af1      	ldr	r1, [r6, #44]	; 0x2c
     846:	4c1e      	ldr	r4, [pc, #120]	; (8c0 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x358>)
     848:	6021      	str	r1, [r4, #0]
      next_mark = ARM_DWT_CYCCNT + m_offsets[0];

      uint32_t out = (b2.bg[3][i] << 24) | (b2.bg[2][i] << 16) | (b2.bg[1][i] << 8) | b2.bg[0][i];

      out = ((~out) & m_nWriteMask);
     84a:	7dd1      	ldrb	r1, [r2, #23]
     84c:	7fd5      	ldrb	r5, [r2, #31]
     84e:	0409      	lsls	r1, r1, #16
     850:	79d7      	ldrb	r7, [r2, #7]
     852:	f892 900f 	ldrb.w	r9, [r2, #15]
     856:	ea41 6505 	orr.w	r5, r1, r5, lsl #24
     85a:	6af4      	ldr	r4, [r6, #44]	; 0x2c
     85c:	ea45 0107 	orr.w	r1, r5, r7
    int x = 0;
    for(uint32_t i = 8; i > 0;) {
      i--;
      while(ARM_DWT_CYCCNT < next_mark);
      *FastPin<FIRST_PIN>::sport() = m_nWriteMask;
      next_mark = ARM_DWT_CYCCNT + m_offsets[0];
     860:	4d14      	ldr	r5, [pc, #80]	; (8b4 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x34c>)
     862:	682f      	ldr	r7, [r5, #0]

      uint32_t out = (b2.bg[3][i] << 24) | (b2.bg[2][i] << 16) | (b2.bg[1][i] << 8) | b2.bg[0][i];

      out = ((~out) & m_nWriteMask);
     864:	ea41 2509 	orr.w	r5, r1, r9, lsl #8
    int x = 0;
    for(uint32_t i = 8; i > 0;) {
      i--;
      while(ARM_DWT_CYCCNT < next_mark);
      *FastPin<FIRST_PIN>::sport() = m_nWriteMask;
      next_mark = ARM_DWT_CYCCNT + m_offsets[0];
     868:	6b71      	ldr	r1, [r6, #52]	; 0x34

      uint32_t out = (b2.bg[3][i] << 24) | (b2.bg[2][i] << 16) | (b2.bg[1][i] << 8) | b2.bg[0][i];

      out = ((~out) & m_nWriteMask);
     86a:	ea24 0405 	bic.w	r4, r4, r5
     86e:	6bb5      	ldr	r5, [r6, #56]	; 0x38
    int x = 0;
    for(uint32_t i = 8; i > 0;) {
      i--;
      while(ARM_DWT_CYCCNT < next_mark);
      *FastPin<FIRST_PIN>::sport() = m_nWriteMask;
      next_mark = ARM_DWT_CYCCNT + m_offsets[0];
     870:	eb07 0b01 	add.w	fp, r7, r1

      uint32_t out = (b2.bg[3][i] << 24) | (b2.bg[2][i] << 16) | (b2.bg[1][i] << 8) | b2.bg[0][i];

      out = ((~out) & m_nWriteMask);
      while((next_mark - ARM_DWT_CYCCNT) > m_offsets[1]);
     874:	f8da 1000 	ldr.w	r1, [sl]
     878:	ebc1 010b 	rsb	r1, r1, fp
     87c:	42a9      	cmp	r1, r5
     87e:	d8f9      	bhi.n	874 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x30c>
      *FastPin<FIRST_PIN>::cport() = out;
     880:	4910      	ldr	r1, [pc, #64]	; (8c4 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x35c>)
     882:	600c      	str	r4, [r1, #0]

      out = m_nWriteMask;
     884:	6af5      	ldr	r5, [r6, #44]	; 0x2c
     886:	6bf4      	ldr	r4, [r6, #60]	; 0x3c
      while((next_mark - ARM_DWT_CYCCNT) > m_offsets[2]);
     888:	f8da 1000 	ldr.w	r1, [sl]
     88c:	ebc1 010b 	rsb	r1, r1, fp
     890:	42a1      	cmp	r1, r4
     892:	d8f9      	bhi.n	888 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x320>
      *FastPin<FIRST_PIN>::cport() = out;
     894:	490b      	ldr	r1, [pc, #44]	; (8c4 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x35c>)
     896:	600d      	str	r5, [r1, #0]

      // Read and store up to two bytes
      if (x < m_nActualLanes) {
     898:	f896 4028 	ldrb.w	r4, [r6, #40]	; 0x28
     89c:	4284      	cmp	r4, r0
     89e:	dd39      	ble.n	914 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x3ac>
     8a0:	9901      	ldr	r1, [sp, #4]
        b.bytes[m_bitOffsets[x]] = pixels.template loadAndScale<PX>(pixels,x,d,scale);
     8a2:	1835      	adds	r5, r6, r0
     8a4:	eb01 0780 	add.w	r7, r1, r0, lsl #2
     8a8:	7e2d      	ldrb	r5, [r5, #24]
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }
     8aa:	69b9      	ldr	r1, [r7, #24]
     8ac:	f81c 1001 	ldrb.w	r1, [ip, r1]

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & , uint8_t b, uint8_t d) { return b ? qadd8(b,d) : 0; }
     8b0:	b191      	cbz	r1, 8d8 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x370>
     8b2:	e009      	b.n	8c8 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x360>
     8b4:	e0001004 	.word	0xe0001004
     8b8:	200123c4 	.word	0x200123c4
     8bc:	08972311 	.word	0x08972311
     8c0:	42000084 	.word	0x42000084
     8c4:	42000088 	.word	0x42000088
/// @param j - second byte to add
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
     8c8:	4441      	add	r1, r8
    if( t > 255) t = 255;
     8ca:	29ff      	cmp	r1, #255	; 0xff
     8cc:	bfa8      	it	ge
     8ce:	21ff      	movge	r1, #255	; 0xff
     8d0:	fb01 f10e 	mul.w	r1, r1, lr
     8d4:	f3c1 2107 	ubfx	r1, r1, #8, #8
     8d8:	f10d 0958 	add.w	r9, sp, #88	; 0x58
     8dc:	444d      	add	r5, r9
        x++;
     8de:	f100 0901 	add.w	r9, r0, #1
        if (x < m_nActualLanes) {
     8e2:	454c      	cmp	r4, r9
      while((next_mark - ARM_DWT_CYCCNT) > m_offsets[2]);
      *FastPin<FIRST_PIN>::cport() = out;

      // Read and store up to two bytes
      if (x < m_nActualLanes) {
        b.bytes[m_bitOffsets[x]] = pixels.template loadAndScale<PX>(pixels,x,d,scale);
     8e4:	f805 1c40 	strb.w	r1, [r5, #-64]
        x++;
        if (x < m_nActualLanes) {
     8e8:	f340 82d1 	ble.w	e8e <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x926>
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }
     8ec:	69f9      	ldr	r1, [r7, #28]
          b.bytes[m_bitOffsets[x]] = pixels.template loadAndScale<PX>(pixels,x,d,scale);
     8ee:	44b1      	add	r9, r6
     8f0:	f81c 1001 	ldrb.w	r1, [ip, r1]
     8f4:	f899 4018 	ldrb.w	r4, [r9, #24]

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & , uint8_t b, uint8_t d) { return b ? qadd8(b,d) : 0; }
     8f8:	b139      	cbz	r1, 90a <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x3a2>
/// @param j - second byte to add
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
     8fa:	4441      	add	r1, r8
    if( t > 255) t = 255;
     8fc:	29ff      	cmp	r1, #255	; 0xff
     8fe:	bfa8      	it	ge
     900:	21ff      	movge	r1, #255	; 0xff
     902:	fb0e f101 	mul.w	r1, lr, r1
     906:	f3c1 2107 	ubfx	r1, r1, #8, #8
     90a:	ad16      	add	r5, sp, #88	; 0x58
          x++;
     90c:	3002      	adds	r0, #2
      // Read and store up to two bytes
      if (x < m_nActualLanes) {
        b.bytes[m_bitOffsets[x]] = pixels.template loadAndScale<PX>(pixels,x,d,scale);
        x++;
        if (x < m_nActualLanes) {
          b.bytes[m_bitOffsets[x]] = pixels.template loadAndScale<PX>(pixels,x,d,scale);
     90e:	442c      	add	r4, r5
     910:	f804 1c40 	strb.w	r1, [r4, #-64]
     914:	3a01      	subs	r2, #1

    register uint8_t d = pixels.template getd<PX>(pixels);
    register uint8_t scale = pixels.template getscale<PX>(pixels);

    int x = 0;
    for(uint32_t i = 8; i > 0;) {
     916:	2b00      	cmp	r3, #0
     918:	d18f      	bne.n	83a <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x2d2>
/// data into LSB for a faster write (the code using this data can happily walk the array backwards)
__attribute__((always_inline)) inline void transpose8x1(unsigned char *A, unsigned char *B) {
  uint32_t x, y, t;

  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
     91a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     91c:	f64c 44cc 	movw	r4, #52428	; 0xcccc
__attribute__((always_inline)) inline void transpose8x1(unsigned char *A, unsigned char *B) {
  uint32_t x, y, t;

  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);
     920:	990d      	ldr	r1, [sp, #52]	; 0x34
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     922:	ea82 1cd2 	eor.w	ip, r2, r2, lsr #7
__attribute__((always_inline)) inline void transpose8x1(unsigned char *A, unsigned char *B) {
  uint32_t x, y, t;

  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);
     926:	9d0b      	ldr	r5, [sp, #44]	; 0x2c

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     928:	ea81 10d1 	eor.w	r0, r1, r1, lsr #7
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     92c:	46a6      	mov	lr, r4

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     92e:	f00c 1caa 	and.w	ip, ip, #11141290	; 0xaa00aa
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     932:	ea85 18d5 	eor.w	r8, r5, r5, lsr #7
     936:	f000 10aa 	and.w	r0, r0, #11141290	; 0xaa00aa
/// data into LSB for a faster write (the code using this data can happily walk the array backwards)
__attribute__((always_inline)) inline void transpose8x1(unsigned char *A, unsigned char *B) {
  uint32_t x, y, t;

  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
     93a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     93c:	ea82 020c 	eor.w	r2, r2, ip
/// data into LSB for a faster write (the code using this data can happily walk the array backwards)
__attribute__((always_inline)) inline void transpose8x1(unsigned char *A, unsigned char *B) {
  uint32_t x, y, t;

  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
     940:	f8dd 9020 	ldr.w	r9, [sp, #32]
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     944:	4041      	eors	r1, r0
     946:	9602      	str	r6, [sp, #8]
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     948:	ea82 12cc 	eor.w	r2, r2, ip, lsl #7
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     94c:	9e07      	ldr	r6, [sp, #28]
     94e:	ea81 10c0 	eor.w	r0, r1, r0, lsl #7
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     952:	ea82 3192 	eor.w	r1, r2, r2, lsr #14
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     956:	ea87 1cd7 	eor.w	ip, r7, r7, lsr #7
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     95a:	400c      	ands	r4, r1
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     95c:	ea80 3190 	eor.w	r1, r0, r0, lsr #14

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     960:	f00c 1caa 	and.w	ip, ip, #11141290	; 0xaa00aa
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     964:	ea01 0e0e 	and.w	lr, r1, lr

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     968:	ea82 0104 	eor.w	r1, r2, r4
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     96c:	f008 12aa 	and.w	r2, r8, #11141290	; 0xaa00aa
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     970:	ea87 070c 	eor.w	r7, r7, ip
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     974:	ea81 3484 	eor.w	r4, r1, r4, lsl #14
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     978:	ea80 000e 	eor.w	r0, r0, lr
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     97c:	ea85 0102 	eor.w	r1, r5, r2
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     980:	ea87 17cc 	eor.w	r7, r7, ip, lsl #7
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     984:	ea80 3e8e 	eor.w	lr, r0, lr, lsl #14
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
     988:	f004 380f 	and.w	r8, r4, #252645135	; 0xf0f0f0f
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     98c:	ea81 12c2 	eor.w	r2, r1, r2, lsl #7
     990:	9909      	ldr	r1, [sp, #36]	; 0x24
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     992:	0924      	lsrs	r4, r4, #4
  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
     994:	f00e 3cf0 	and.w	ip, lr, #4042322160	; 0xf0f0f0f0
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     998:	ea81 11d1 	eor.w	r1, r1, r1, lsr #7
     99c:	9809      	ldr	r0, [sp, #36]	; 0x24
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     99e:	f004 340f 	and.w	r4, r4, #252645135	; 0xf0f0f0f
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     9a2:	ea89 15d9 	eor.w	r5, r9, r9, lsr #7
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     9a6:	f001 11aa 	and.w	r1, r1, #11141290	; 0xaa00aa
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     9aa:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  *((uint32_t*)(B+4)) = x;
     9ae:	ea44 0c0c 	orr.w	ip, r4, ip
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     9b2:	9c06      	ldr	r4, [sp, #24]
     9b4:	f005 15aa 	and.w	r5, r5, #11141290	; 0xaa00aa
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     9b8:	f00e 3ef0 	and.w	lr, lr, #4042322160	; 0xf0f0f0f0
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     9bc:	4048      	eors	r0, r1
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     9be:	ea84 14d4 	eor.w	r4, r4, r4, lsr #7
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     9c2:	ea4e 0808 	orr.w	r8, lr, r8
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     9c6:	ea89 0905 	eor.w	r9, r9, r5
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     9ca:	ea87 3e97 	eor.w	lr, r7, r7, lsr #14
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     9ce:	f004 14aa 	and.w	r4, r4, #11141290	; 0xaa00aa
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     9d2:	ea80 10c1 	eor.w	r0, r0, r1, lsl #7
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     9d6:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     9da:	9906      	ldr	r1, [sp, #24]
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     9dc:	f64c 4ccc 	movw	ip, #52428	; 0xcccc
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     9e0:	ea89 15c5 	eor.w	r5, r9, r5, lsl #7
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     9e4:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     9e8:	ea81 0904 	eor.w	r9, r1, r4
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     9ec:	ea0e 0c0c 	and.w	ip, lr, ip
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     9f0:	9907      	ldr	r1, [sp, #28]
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     9f2:	ea82 3e92 	eor.w	lr, r2, r2, lsr #14

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     9f6:	ea89 14c4 	eor.w	r4, r9, r4, lsl #7
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     9fa:	ea87 090c 	eor.w	r9, r7, ip
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     9fe:	ea81 11d1 	eor.w	r1, r1, r1, lsr #7
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     a02:	f64c 47cc 	movw	r7, #52428	; 0xcccc

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     a06:	ea89 3c8c 	eor.w	ip, r9, ip, lsl #14
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     a0a:	ea0e 0707 	and.w	r7, lr, r7
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     a0e:	f001 11aa 	and.w	r1, r1, #11141290	; 0xaa00aa
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     a12:	ea85 3995 	eor.w	r9, r5, r5, lsr #14
     a16:	f64c 4ecc 	movw	lr, #52428	; 0xcccc
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     a1a:	ea86 0801 	eor.w	r8, r6, r1
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     a1e:	407a      	eors	r2, r7

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     a20:	ea09 0e0e 	and.w	lr, r9, lr

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
     a24:	f00c 360f 	and.w	r6, ip, #252645135	; 0xf0f0f0f
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     a28:	ea88 11c1 	eor.w	r1, r8, r1, lsl #7
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     a2c:	ea82 3287 	eor.w	r2, r2, r7, lsl #14

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     a30:	ea85 050e 	eor.w	r5, r5, lr
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     a34:	ea4f 181c 	mov.w	r8, ip, lsr #4
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     a38:	f64c 47cc 	movw	r7, #52428	; 0xcccc
  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
     a3c:	f002 3cf0 	and.w	ip, r2, #4042322160	; 0xf0f0f0f0
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     a40:	ea85 358e 	eor.w	r5, r5, lr, lsl #14
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     a44:	f008 380f 	and.w	r8, r8, #252645135	; 0xf0f0f0f
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     a48:	ea84 3e94 	eor.w	lr, r4, r4, lsr #14
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     a4c:	ea80 3990 	eor.w	r9, r0, r0, lsr #14
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     a50:	ea48 0c0c 	orr.w	ip, r8, ip
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     a54:	f64c 48cc 	movw	r8, #52428	; 0xcccc
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     a58:	ea09 0707 	and.w	r7, r9, r7
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     a5c:	0112      	lsls	r2, r2, #4
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     a5e:	ea0e 0808 	and.w	r8, lr, r8
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     a62:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     a66:	ea81 3e91 	eor.w	lr, r1, r1, lsr #14
     a6a:	f64c 4ccc 	movw	ip, #52428	; 0xcccc
     a6e:	4078      	eors	r0, r7
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     a70:	f002 32f0 	and.w	r2, r2, #4042322160	; 0xf0f0f0f0
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     a74:	ea0e 0c0c 	and.w	ip, lr, ip

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     a78:	ea84 0408 	eor.w	r4, r4, r8
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     a7c:	ea80 3087 	eor.w	r0, r0, r7, lsl #14
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     a80:	4332      	orrs	r2, r6
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     a82:	ea81 070c 	eor.w	r7, r1, ip

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     a86:	ea84 3488 	eor.w	r4, r4, r8, lsl #14
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     a8a:	9212      	str	r2, [sp, #72]	; 0x48
     a8c:	0102      	lsls	r2, r0, #4
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     a8e:	ea87 3c8c 	eor.w	ip, r7, ip, lsl #14
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane, uint8_t scale) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane, scale); }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getd(PixelController & pc) { return pc.d[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getscale(PixelController & pc) { return pc.mScale.raw[RO(SLOT)]; }
     a92:	9e01      	ldr	r6, [sp, #4]
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     a94:	f002 3ef0 	and.w	lr, r2, #4042322160	; 0xf0f0f0f0
  *((uint32_t*)(B+4)) = x;
     a98:	0929      	lsrs	r1, r5, #4
     a9a:	0927      	lsrs	r7, r4, #4
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
     a9c:	f005 350f 	and.w	r5, r5, #252645135	; 0xf0f0f0f
  x = t;

  *((uint32_t*)B) = y;
     aa0:	ea4f 120c 	mov.w	r2, ip, lsl #4
  *((uint32_t*)(B+4)) = x;
     aa4:	f001 310f 	and.w	r1, r1, #252645135	; 0xf0f0f0f
  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
     aa8:	f00c 3cf0 	and.w	ip, ip, #4042322160	; 0xf0f0f0f0
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     aac:	ea4e 0505 	orr.w	r5, lr, r5
     ab0:	f002 32f0 	and.w	r2, r2, #4042322160	; 0xf0f0f0f0
     ab4:	f896 e014 	ldrb.w	lr, [r6, #20]
  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
     ab8:	f000 30f0 	and.w	r0, r0, #4042322160	; 0xf0f0f0f0
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
     abc:	f004 340f 	and.w	r4, r4, #252645135	; 0xf0f0f0f
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     ac0:	f007 370f 	and.w	r7, r7, #252645135	; 0xf0f0f0f

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane, uint8_t scale) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane, scale); }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getd(PixelController & pc) { return pc.d[RO(SLOT)]; }
     ac4:	f896 800e 	ldrb.w	r8, [r6, #14]
     ac8:	4308      	orrs	r0, r1
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     aca:	4314      	orrs	r4, r2
  *((uint32_t*)(B+4)) = x;
     acc:	ea47 070c 	orr.w	r7, r7, ip
     ad0:	aa0e      	add	r2, sp, #56	; 0x38
     ad2:	f10e 0e01 	add.w	lr, lr, #1
     ad6:	2108      	movs	r1, #8
     ad8:	f8dd c00c 	ldr.w	ip, [sp, #12]
     adc:	9e02      	ldr	r6, [sp, #8]
     ade:	9011      	str	r0, [sp, #68]	; 0x44
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     ae0:	9510      	str	r5, [sp, #64]	; 0x40
  *((uint32_t*)(B+4)) = x;
     ae2:	970f      	str	r7, [sp, #60]	; 0x3c
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     ae4:	940e      	str	r4, [sp, #56]	; 0x38
      i--;
     ae6:	3901      	subs	r1, #1
      while(ARM_DWT_CYCCNT < next_mark);
     ae8:	f8da 0000 	ldr.w	r0, [sl]
     aec:	4558      	cmp	r0, fp
     aee:	d3fb      	bcc.n	ae8 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x580>
      *FastPin<FIRST_PIN>::sport() = m_nWriteMask;
     af0:	6af0      	ldr	r0, [r6, #44]	; 0x2c
     af2:	4ccb      	ldr	r4, [pc, #812]	; (e20 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x8b8>)
     af4:	6020      	str	r0, [r4, #0]
      next_mark = ARM_DWT_CYCCNT + m_offsets[0];

      uint32_t out = (b2.bg[3][i] << 24) | (b2.bg[2][i] << 16) | (b2.bg[1][i] << 8) | b2.bg[0][i];

      out = ((~out) & m_nWriteMask);
     af6:	7dd0      	ldrb	r0, [r2, #23]
     af8:	7fd5      	ldrb	r5, [r2, #31]
     afa:	0400      	lsls	r0, r0, #16
     afc:	79d7      	ldrb	r7, [r2, #7]
     afe:	f892 900f 	ldrb.w	r9, [r2, #15]
     b02:	ea40 6505 	orr.w	r5, r0, r5, lsl #24
     b06:	6af4      	ldr	r4, [r6, #44]	; 0x2c
     b08:	ea45 0007 	orr.w	r0, r5, r7
    int x = 0;
    for(uint32_t i = 8; i > 0;) {
      i--;
      while(ARM_DWT_CYCCNT < next_mark);
      *FastPin<FIRST_PIN>::sport() = m_nWriteMask;
      next_mark = ARM_DWT_CYCCNT + m_offsets[0];
     b0c:	4dc5      	ldr	r5, [pc, #788]	; (e24 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x8bc>)
     b0e:	682f      	ldr	r7, [r5, #0]

      uint32_t out = (b2.bg[3][i] << 24) | (b2.bg[2][i] << 16) | (b2.bg[1][i] << 8) | b2.bg[0][i];

      out = ((~out) & m_nWriteMask);
     b10:	ea40 2509 	orr.w	r5, r0, r9, lsl #8
    int x = 0;
    for(uint32_t i = 8; i > 0;) {
      i--;
      while(ARM_DWT_CYCCNT < next_mark);
      *FastPin<FIRST_PIN>::sport() = m_nWriteMask;
      next_mark = ARM_DWT_CYCCNT + m_offsets[0];
     b14:	6b70      	ldr	r0, [r6, #52]	; 0x34

      uint32_t out = (b2.bg[3][i] << 24) | (b2.bg[2][i] << 16) | (b2.bg[1][i] << 8) | b2.bg[0][i];

      out = ((~out) & m_nWriteMask);
     b16:	ea24 0405 	bic.w	r4, r4, r5
     b1a:	6bb5      	ldr	r5, [r6, #56]	; 0x38
    int x = 0;
    for(uint32_t i = 8; i > 0;) {
      i--;
      while(ARM_DWT_CYCCNT < next_mark);
      *FastPin<FIRST_PIN>::sport() = m_nWriteMask;
      next_mark = ARM_DWT_CYCCNT + m_offsets[0];
     b1c:	eb07 0b00 	add.w	fp, r7, r0

      uint32_t out = (b2.bg[3][i] << 24) | (b2.bg[2][i] << 16) | (b2.bg[1][i] << 8) | b2.bg[0][i];

      out = ((~out) & m_nWriteMask);
      while((next_mark - ARM_DWT_CYCCNT) > m_offsets[1]);
     b20:	f8da 0000 	ldr.w	r0, [sl]
     b24:	ebc0 000b 	rsb	r0, r0, fp
     b28:	42a8      	cmp	r0, r5
     b2a:	d8f9      	bhi.n	b20 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x5b8>
      *FastPin<FIRST_PIN>::cport() = out;
     b2c:	48be      	ldr	r0, [pc, #760]	; (e28 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x8c0>)
     b2e:	6004      	str	r4, [r0, #0]

      out = m_nWriteMask;
     b30:	6af5      	ldr	r5, [r6, #44]	; 0x2c
     b32:	6bf4      	ldr	r4, [r6, #60]	; 0x3c
      while((next_mark - ARM_DWT_CYCCNT) > m_offsets[2]);
     b34:	f8da 0000 	ldr.w	r0, [sl]
     b38:	ebc0 000b 	rsb	r0, r0, fp
     b3c:	42a0      	cmp	r0, r4
     b3e:	d8f9      	bhi.n	b34 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x5cc>
      *FastPin<FIRST_PIN>::cport() = out;
     b40:	48b9      	ldr	r0, [pc, #740]	; (e28 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x8c0>)
     b42:	6005      	str	r5, [r0, #0]

      // Read and store up to two bytes
      if (x < m_nActualLanes) {
     b44:	f896 4028 	ldrb.w	r4, [r6, #40]	; 0x28
     b48:	429c      	cmp	r4, r3
     b4a:	dd2e      	ble.n	baa <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x642>
     b4c:	9801      	ldr	r0, [sp, #4]
        b.bytes[m_bitOffsets[x]] = pixels.template loadAndScale<PX>(pixels,x,d,scale);
     b4e:	18f5      	adds	r5, r6, r3
     b50:	eb00 0783 	add.w	r7, r0, r3, lsl #2
     b54:	7e2d      	ldrb	r5, [r5, #24]
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }
     b56:	69b8      	ldr	r0, [r7, #24]
     b58:	4460      	add	r0, ip
     b5a:	7880      	ldrb	r0, [r0, #2]

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & , uint8_t b, uint8_t d) { return b ? qadd8(b,d) : 0; }
     b5c:	b138      	cbz	r0, b6e <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x606>
/// @param j - second byte to add
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
     b5e:	4440      	add	r0, r8
    if( t > 255) t = 255;
     b60:	28ff      	cmp	r0, #255	; 0xff
     b62:	bfa8      	it	ge
     b64:	20ff      	movge	r0, #255	; 0xff
     b66:	fb00 f00e 	mul.w	r0, r0, lr
     b6a:	f3c0 2007 	ubfx	r0, r0, #8, #8
     b6e:	f10d 0958 	add.w	r9, sp, #88	; 0x58
     b72:	444d      	add	r5, r9
        x++;
     b74:	f103 0901 	add.w	r9, r3, #1
        if (x < m_nActualLanes) {
     b78:	454c      	cmp	r4, r9
      while((next_mark - ARM_DWT_CYCCNT) > m_offsets[2]);
      *FastPin<FIRST_PIN>::cport() = out;

      // Read and store up to two bytes
      if (x < m_nActualLanes) {
        b.bytes[m_bitOffsets[x]] = pixels.template loadAndScale<PX>(pixels,x,d,scale);
     b7a:	f805 0c40 	strb.w	r0, [r5, #-64]
        x++;
        if (x < m_nActualLanes) {
     b7e:	f340 8188 	ble.w	e92 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x92a>
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }
     b82:	69f8      	ldr	r0, [r7, #28]
          b.bytes[m_bitOffsets[x]] = pixels.template loadAndScale<PX>(pixels,x,d,scale);
     b84:	44b1      	add	r9, r6
     b86:	4460      	add	r0, ip
     b88:	f899 4018 	ldrb.w	r4, [r9, #24]
     b8c:	7880      	ldrb	r0, [r0, #2]

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & , uint8_t b, uint8_t d) { return b ? qadd8(b,d) : 0; }
     b8e:	b138      	cbz	r0, ba0 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x638>
/// @param j - second byte to add
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
     b90:	4440      	add	r0, r8
    if( t > 255) t = 255;
     b92:	28ff      	cmp	r0, #255	; 0xff
     b94:	bfa8      	it	ge
     b96:	20ff      	movge	r0, #255	; 0xff
     b98:	fb0e f000 	mul.w	r0, lr, r0
     b9c:	f3c0 2007 	ubfx	r0, r0, #8, #8
     ba0:	ad16      	add	r5, sp, #88	; 0x58
          x++;
     ba2:	3302      	adds	r3, #2
      // Read and store up to two bytes
      if (x < m_nActualLanes) {
        b.bytes[m_bitOffsets[x]] = pixels.template loadAndScale<PX>(pixels,x,d,scale);
        x++;
        if (x < m_nActualLanes) {
          b.bytes[m_bitOffsets[x]] = pixels.template loadAndScale<PX>(pixels,x,d,scale);
     ba4:	442c      	add	r4, r5
     ba6:	f804 0c40 	strb.w	r0, [r4, #-64]
     baa:	3a01      	subs	r2, #1

    register uint8_t d = pixels.template getd<PX>(pixels);
    register uint8_t scale = pixels.template getscale<PX>(pixels);

    int x = 0;
    for(uint32_t i = 8; i > 0;) {
     bac:	2900      	cmp	r1, #0
     bae:	d19a      	bne.n	ae6 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x57e>
/// data into LSB for a faster write (the code using this data can happily walk the array backwards)
__attribute__((always_inline)) inline void transpose8x1(unsigned char *A, unsigned char *B) {
  uint32_t x, y, t;

  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
     bb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     bb2:	f64c 44cc 	movw	r4, #52428	; 0xcccc
__attribute__((always_inline)) inline void transpose8x1(unsigned char *A, unsigned char *B) {
  uint32_t x, y, t;

  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);
     bb6:	980d      	ldr	r0, [sp, #52]	; 0x34
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     bb8:	ea83 12d3 	eor.w	r2, r3, r3, lsr #7
__attribute__((always_inline)) inline void transpose8x1(unsigned char *A, unsigned char *B) {
  uint32_t x, y, t;

  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);
     bbc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     bbe:	ea80 1cd0 	eor.w	ip, r0, r0, lsr #7
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     bc2:	46a6      	mov	lr, r4

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     bc4:	f002 12aa 	and.w	r2, r2, #11141290	; 0xaa00aa
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     bc8:	ea85 18d5 	eor.w	r8, r5, r5, lsr #7
     bcc:	f00c 1caa 	and.w	ip, ip, #11141290	; 0xaa00aa
/// data into LSB for a faster write (the code using this data can happily walk the array backwards)
__attribute__((always_inline)) inline void transpose8x1(unsigned char *A, unsigned char *B) {
  uint32_t x, y, t;

  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
     bd0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     bd2:	4053      	eors	r3, r2
/// data into LSB for a faster write (the code using this data can happily walk the array backwards)
__attribute__((always_inline)) inline void transpose8x1(unsigned char *A, unsigned char *B) {
  uint32_t x, y, t;

  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
     bd4:	f8dd 9020 	ldr.w	r9, [sp, #32]
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     bd8:	ea80 000c 	eor.w	r0, r0, ip
     bdc:	9602      	str	r6, [sp, #8]
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     bde:	ea83 12c2 	eor.w	r2, r3, r2, lsl #7
    transpose8x1(b.bg[0], b2.bg[0]);

    register uint8_t d = pixels.template getd<PX>(pixels);
    register uint8_t scale = pixels.template getscale<PX>(pixels);

    int x = 0;
     be2:	460b      	mov	r3, r1
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     be4:	ea80 10cc 	eor.w	r0, r0, ip, lsl #7
     be8:	9e07      	ldr	r6, [sp, #28]
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     bea:	ea82 3192 	eor.w	r1, r2, r2, lsr #14
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     bee:	ea87 1cd7 	eor.w	ip, r7, r7, lsr #7
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     bf2:	400c      	ands	r4, r1
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     bf4:	ea80 3190 	eor.w	r1, r0, r0, lsr #14

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     bf8:	f00c 1caa 	and.w	ip, ip, #11141290	; 0xaa00aa
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     bfc:	ea01 0e0e 	and.w	lr, r1, lr

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     c00:	ea82 0104 	eor.w	r1, r2, r4
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     c04:	f008 12aa 	and.w	r2, r8, #11141290	; 0xaa00aa
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     c08:	ea87 070c 	eor.w	r7, r7, ip
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     c0c:	ea81 3484 	eor.w	r4, r1, r4, lsl #14
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     c10:	ea80 000e 	eor.w	r0, r0, lr
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     c14:	ea85 0102 	eor.w	r1, r5, r2
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     c18:	ea87 17cc 	eor.w	r7, r7, ip, lsl #7
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     c1c:	ea80 3e8e 	eor.w	lr, r0, lr, lsl #14
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
     c20:	f004 380f 	and.w	r8, r4, #252645135	; 0xf0f0f0f
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     c24:	ea81 12c2 	eor.w	r2, r1, r2, lsl #7
     c28:	9909      	ldr	r1, [sp, #36]	; 0x24
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     c2a:	0924      	lsrs	r4, r4, #4
  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
     c2c:	f00e 3cf0 	and.w	ip, lr, #4042322160	; 0xf0f0f0f0
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     c30:	ea81 11d1 	eor.w	r1, r1, r1, lsr #7
     c34:	9809      	ldr	r0, [sp, #36]	; 0x24
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     c36:	f004 340f 	and.w	r4, r4, #252645135	; 0xf0f0f0f
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     c3a:	ea89 15d9 	eor.w	r5, r9, r9, lsr #7
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     c3e:	f001 11aa 	and.w	r1, r1, #11141290	; 0xaa00aa
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     c42:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  *((uint32_t*)(B+4)) = x;
     c46:	ea44 0c0c 	orr.w	ip, r4, ip
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     c4a:	9c06      	ldr	r4, [sp, #24]
     c4c:	f005 15aa 	and.w	r5, r5, #11141290	; 0xaa00aa
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     c50:	f00e 3ef0 	and.w	lr, lr, #4042322160	; 0xf0f0f0f0
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     c54:	4048      	eors	r0, r1
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     c56:	ea84 14d4 	eor.w	r4, r4, r4, lsr #7
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     c5a:	ea4e 0808 	orr.w	r8, lr, r8
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     c5e:	ea89 0905 	eor.w	r9, r9, r5
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     c62:	ea87 3e97 	eor.w	lr, r7, r7, lsr #14
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     c66:	f004 14aa 	and.w	r4, r4, #11141290	; 0xaa00aa
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     c6a:	ea80 10c1 	eor.w	r0, r0, r1, lsl #7
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     c6e:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     c72:	9906      	ldr	r1, [sp, #24]
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     c74:	f64c 4ccc 	movw	ip, #52428	; 0xcccc
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     c78:	ea89 15c5 	eor.w	r5, r9, r5, lsl #7
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     c7c:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     c80:	ea81 0904 	eor.w	r9, r1, r4
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     c84:	ea0e 0c0c 	and.w	ip, lr, ip
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     c88:	9907      	ldr	r1, [sp, #28]
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     c8a:	ea82 3e92 	eor.w	lr, r2, r2, lsr #14

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     c8e:	ea89 14c4 	eor.w	r4, r9, r4, lsl #7
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     c92:	ea87 090c 	eor.w	r9, r7, ip
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     c96:	ea81 11d1 	eor.w	r1, r1, r1, lsr #7
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     c9a:	f64c 47cc 	movw	r7, #52428	; 0xcccc

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     c9e:	ea89 3c8c 	eor.w	ip, r9, ip, lsl #14
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     ca2:	ea0e 0707 	and.w	r7, lr, r7
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     ca6:	f001 11aa 	and.w	r1, r1, #11141290	; 0xaa00aa
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     caa:	ea85 3995 	eor.w	r9, r5, r5, lsr #14
     cae:	f64c 4ecc 	movw	lr, #52428	; 0xcccc
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     cb2:	ea86 0801 	eor.w	r8, r6, r1
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     cb6:	407a      	eors	r2, r7

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     cb8:	ea09 0e0e 	and.w	lr, r9, lr

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
     cbc:	f00c 360f 	and.w	r6, ip, #252645135	; 0xf0f0f0f
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     cc0:	ea88 11c1 	eor.w	r1, r8, r1, lsl #7
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     cc4:	ea82 3287 	eor.w	r2, r2, r7, lsl #14

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     cc8:	ea85 050e 	eor.w	r5, r5, lr
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     ccc:	ea4f 181c 	mov.w	r8, ip, lsr #4
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     cd0:	f64c 47cc 	movw	r7, #52428	; 0xcccc
  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
     cd4:	f002 3cf0 	and.w	ip, r2, #4042322160	; 0xf0f0f0f0
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     cd8:	ea80 3990 	eor.w	r9, r0, r0, lsr #14
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     cdc:	f008 380f 	and.w	r8, r8, #252645135	; 0xf0f0f0f
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     ce0:	ea85 358e 	eor.w	r5, r5, lr, lsl #14
     ce4:	ea84 3e94 	eor.w	lr, r4, r4, lsr #14
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     ce8:	ea09 0707 	and.w	r7, r9, r7
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     cec:	ea48 0c0c 	orr.w	ip, r8, ip
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     cf0:	f64c 48cc 	movw	r8, #52428	; 0xcccc
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     cf4:	0112      	lsls	r2, r2, #4
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     cf6:	4078      	eors	r0, r7

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     cf8:	ea0e 0808 	and.w	r8, lr, r8
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     cfc:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     d00:	ea81 3e91 	eor.w	lr, r1, r1, lsr #14
     d04:	f64c 4ccc 	movw	ip, #52428	; 0xcccc
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     d08:	f002 32f0 	and.w	r2, r2, #4042322160	; 0xf0f0f0f0
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     d0c:	ea80 3087 	eor.w	r0, r0, r7, lsl #14
     d10:	ea0e 0c0c 	and.w	ip, lr, ip

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     d14:	ea84 0408 	eor.w	r4, r4, r8
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     d18:	4332      	orrs	r2, r6
  *((uint32_t*)(B+4)) = x;
     d1a:	092f      	lsrs	r7, r5, #4
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     d1c:	ea81 010c 	eor.w	r1, r1, ip

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     d20:	ea84 3488 	eor.w	r4, r4, r8, lsl #14
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     d24:	9212      	str	r2, [sp, #72]	; 0x48
     d26:	0102      	lsls	r2, r0, #4
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     d28:	ea81 3c8c 	eor.w	ip, r1, ip, lsl #14

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     d2c:	9e01      	ldr	r6, [sp, #4]
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     d2e:	f002 3ef0 	and.w	lr, r2, #4042322160	; 0xf0f0f0f0
  *((uint32_t*)(B+4)) = x;
     d32:	f007 370f 	and.w	r7, r7, #252645135	; 0xf0f0f0f
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     d36:	ea4f 120c 	mov.w	r2, ip, lsl #4
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
     d3a:	f005 350f 	and.w	r5, r5, #252645135	; 0xf0f0f0f
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     d3e:	0921      	lsrs	r1, r4, #4
  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
     d40:	f000 30f0 	and.w	r0, r0, #4042322160	; 0xf0f0f0f0
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     d44:	f002 32f0 	and.w	r2, r2, #4042322160	; 0xf0f0f0f0
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
     d48:	f004 340f 	and.w	r4, r4, #252645135	; 0xf0f0f0f
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     d4c:	4338      	orrs	r0, r7
  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
     d4e:	f00c 3cf0 	and.w	ip, ip, #4042322160	; 0xf0f0f0f0
     d52:	68b7      	ldr	r7, [r6, #8]
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     d54:	ea4e 0505 	orr.w	r5, lr, r5
     d58:	4314      	orrs	r4, r2
     d5a:	f996 e015 	ldrsb.w	lr, [r6, #21]
     d5e:	4632      	mov	r2, r6
  *((uint32_t*)(B+4)) = x;
     d60:	f001 310f 	and.w	r1, r1, #252645135	; 0xf0f0f0f
     d64:	9e03      	ldr	r6, [sp, #12]
     d66:	3f01      	subs	r7, #1
     d68:	ea41 010c 	orr.w	r1, r1, ip
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane, uint8_t scale) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane, scale); }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getd(PixelController & pc) { return pc.d[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getscale(PixelController & pc) { return pc.mScale.raw[RO(SLOT)]; }
     d6c:	f892 c013 	ldrb.w	ip, [r2, #19]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     d70:	4476      	add	r6, lr
     d72:	9011      	str	r0, [sp, #68]	; 0x44
     d74:	910f      	str	r1, [sp, #60]	; 0x3c
     d76:	a90e      	add	r1, sp, #56	; 0x38
     d78:	46b6      	mov	lr, r6
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane, uint8_t scale) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane, scale); }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getd(PixelController & pc) { return pc.d[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getscale(PixelController & pc) { return pc.mScale.raw[RO(SLOT)]; }
     d7a:	4616      	mov	r6, r2
     d7c:	f10c 0c01 	add.w	ip, ip, #1
     d80:	460a      	mov	r2, r1

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     d82:	f8c6 e000 	str.w	lr, [r6]
    for(uint32_t i = 8; i > 0;) {
     d86:	2008      	movs	r0, #8
     d88:	60b7      	str	r7, [r6, #8]

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane, uint8_t scale) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane, scale); }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getd(PixelController & pc) { return pc.d[RO(SLOT)]; }
     d8a:	f896 900d 	ldrb.w	r9, [r6, #13]
     d8e:	9e02      	ldr	r6, [sp, #8]
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     d90:	9510      	str	r5, [sp, #64]	; 0x40
     d92:	940e      	str	r4, [sp, #56]	; 0x38
      i--;
     d94:	3801      	subs	r0, #1
      while(ARM_DWT_CYCCNT < next_mark);
     d96:	f8da 1000 	ldr.w	r1, [sl]
     d9a:	4559      	cmp	r1, fp
     d9c:	d3fb      	bcc.n	d96 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x82e>
      *FastPin<FIRST_PIN>::sport() = m_nWriteMask;
     d9e:	6af1      	ldr	r1, [r6, #44]	; 0x2c
     da0:	4c1f      	ldr	r4, [pc, #124]	; (e20 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x8b8>)
     da2:	6021      	str	r1, [r4, #0]
      next_mark = ARM_DWT_CYCCNT + m_offsets[0];

      uint32_t out = (b2.bg[3][i] << 24) | (b2.bg[2][i] << 16) | (b2.bg[1][i] << 8) | b2.bg[0][i];

      out = ((~out) & m_nWriteMask);
     da4:	7dd1      	ldrb	r1, [r2, #23]
     da6:	7fd5      	ldrb	r5, [r2, #31]
     da8:	0409      	lsls	r1, r1, #16
     daa:	79d7      	ldrb	r7, [r2, #7]
     dac:	f892 800f 	ldrb.w	r8, [r2, #15]
     db0:	ea41 6505 	orr.w	r5, r1, r5, lsl #24
     db4:	6af4      	ldr	r4, [r6, #44]	; 0x2c
     db6:	ea45 0107 	orr.w	r1, r5, r7
    int x = 0;
    for(uint32_t i = 8; i > 0;) {
      i--;
      while(ARM_DWT_CYCCNT < next_mark);
      *FastPin<FIRST_PIN>::sport() = m_nWriteMask;
      next_mark = ARM_DWT_CYCCNT + m_offsets[0];
     dba:	4d1a      	ldr	r5, [pc, #104]	; (e24 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x8bc>)
     dbc:	682f      	ldr	r7, [r5, #0]

      uint32_t out = (b2.bg[3][i] << 24) | (b2.bg[2][i] << 16) | (b2.bg[1][i] << 8) | b2.bg[0][i];

      out = ((~out) & m_nWriteMask);
     dbe:	ea41 2508 	orr.w	r5, r1, r8, lsl #8
    int x = 0;
    for(uint32_t i = 8; i > 0;) {
      i--;
      while(ARM_DWT_CYCCNT < next_mark);
      *FastPin<FIRST_PIN>::sport() = m_nWriteMask;
      next_mark = ARM_DWT_CYCCNT + m_offsets[0];
     dc2:	6b71      	ldr	r1, [r6, #52]	; 0x34

      uint32_t out = (b2.bg[3][i] << 24) | (b2.bg[2][i] << 16) | (b2.bg[1][i] << 8) | b2.bg[0][i];

      out = ((~out) & m_nWriteMask);
     dc4:	ea24 0405 	bic.w	r4, r4, r5
     dc8:	6bb5      	ldr	r5, [r6, #56]	; 0x38
    int x = 0;
    for(uint32_t i = 8; i > 0;) {
      i--;
      while(ARM_DWT_CYCCNT < next_mark);
      *FastPin<FIRST_PIN>::sport() = m_nWriteMask;
      next_mark = ARM_DWT_CYCCNT + m_offsets[0];
     dca:	eb07 0b01 	add.w	fp, r7, r1

      uint32_t out = (b2.bg[3][i] << 24) | (b2.bg[2][i] << 16) | (b2.bg[1][i] << 8) | b2.bg[0][i];

      out = ((~out) & m_nWriteMask);
      while((next_mark - ARM_DWT_CYCCNT) > m_offsets[1]);
     dce:	f8da 1000 	ldr.w	r1, [sl]
     dd2:	ebc1 010b 	rsb	r1, r1, fp
     dd6:	42a9      	cmp	r1, r5
     dd8:	d8f9      	bhi.n	dce <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x866>
      *FastPin<FIRST_PIN>::cport() = out;
     dda:	4913      	ldr	r1, [pc, #76]	; (e28 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x8c0>)
     ddc:	600c      	str	r4, [r1, #0]

      out = m_nWriteMask;
     dde:	6af5      	ldr	r5, [r6, #44]	; 0x2c
     de0:	6bf4      	ldr	r4, [r6, #60]	; 0x3c
      while((next_mark - ARM_DWT_CYCCNT) > m_offsets[2]);
     de2:	f8da 1000 	ldr.w	r1, [sl]
     de6:	ebc1 010b 	rsb	r1, r1, fp
     dea:	42a1      	cmp	r1, r4
     dec:	d8f9      	bhi.n	de2 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x87a>
      *FastPin<FIRST_PIN>::cport() = out;
     dee:	490e      	ldr	r1, [pc, #56]	; (e28 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x8c0>)
     df0:	600d      	str	r5, [r1, #0]

      // Read and store up to two bytes
      if (x < m_nActualLanes) {
     df2:	f896 4028 	ldrb.w	r4, [r6, #40]	; 0x28
     df6:	429c      	cmp	r4, r3
     df8:	dd35      	ble.n	e66 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x8fe>
     dfa:	9901      	ldr	r1, [sp, #4]
        b.bytes[m_bitOffsets[x]] = pixels.template loadAndScale<PX>(pixels,x,d,scale);
     dfc:	18f5      	adds	r5, r6, r3
     dfe:	eb01 0783 	add.w	r7, r1, r3, lsl #2
     e02:	7e2d      	ldrb	r5, [r5, #24]
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }
     e04:	69b9      	ldr	r1, [r7, #24]
     e06:	4471      	add	r1, lr
     e08:	7849      	ldrb	r1, [r1, #1]

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & , uint8_t b, uint8_t d) { return b ? qadd8(b,d) : 0; }
     e0a:	b179      	cbz	r1, e2c <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x8c4>
/// @param j - second byte to add
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
     e0c:	4449      	add	r1, r9
    if( t > 255) t = 255;
     e0e:	29ff      	cmp	r1, #255	; 0xff
     e10:	bfa8      	it	ge
     e12:	21ff      	movge	r1, #255	; 0xff
     e14:	fb01 f10c 	mul.w	r1, r1, ip
     e18:	f3c1 2107 	ubfx	r1, r1, #8, #8
     e1c:	e006      	b.n	e2c <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x8c4>
     e1e:	bf00      	nop
     e20:	42000084 	.word	0x42000084
     e24:	e0001004 	.word	0xe0001004
     e28:	42000088 	.word	0x42000088
     e2c:	f10d 0858 	add.w	r8, sp, #88	; 0x58
     e30:	4445      	add	r5, r8
        x++;
     e32:	f103 0801 	add.w	r8, r3, #1
        if (x < m_nActualLanes) {
     e36:	4544      	cmp	r4, r8
      while((next_mark - ARM_DWT_CYCCNT) > m_offsets[2]);
      *FastPin<FIRST_PIN>::cport() = out;

      // Read and store up to two bytes
      if (x < m_nActualLanes) {
        b.bytes[m_bitOffsets[x]] = pixels.template loadAndScale<PX>(pixels,x,d,scale);
     e38:	f805 1c40 	strb.w	r1, [r5, #-64]
        x++;
        if (x < m_nActualLanes) {
     e3c:	dd25      	ble.n	e8a <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x922>
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }
     e3e:	69f9      	ldr	r1, [r7, #28]
          b.bytes[m_bitOffsets[x]] = pixels.template loadAndScale<PX>(pixels,x,d,scale);
     e40:	44b0      	add	r8, r6
     e42:	4471      	add	r1, lr
     e44:	f898 4018 	ldrb.w	r4, [r8, #24]
     e48:	7849      	ldrb	r1, [r1, #1]

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & , uint8_t b, uint8_t d) { return b ? qadd8(b,d) : 0; }
     e4a:	b139      	cbz	r1, e5c <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x8f4>
/// @param j - second byte to add
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
     e4c:	4449      	add	r1, r9
    if( t > 255) t = 255;
     e4e:	29ff      	cmp	r1, #255	; 0xff
     e50:	bfa8      	it	ge
     e52:	21ff      	movge	r1, #255	; 0xff
     e54:	fb0c f101 	mul.w	r1, ip, r1
     e58:	f3c1 2107 	ubfx	r1, r1, #8, #8
     e5c:	ad16      	add	r5, sp, #88	; 0x58
          x++;
     e5e:	3302      	adds	r3, #2
      // Read and store up to two bytes
      if (x < m_nActualLanes) {
        b.bytes[m_bitOffsets[x]] = pixels.template loadAndScale<PX>(pixels,x,d,scale);
        x++;
        if (x < m_nActualLanes) {
          b.bytes[m_bitOffsets[x]] = pixels.template loadAndScale<PX>(pixels,x,d,scale);
     e60:	442c      	add	r4, r5
     e62:	f804 1c40 	strb.w	r1, [r4, #-64]
     e66:	3a01      	subs	r2, #1

    register uint8_t d = pixels.template getd<PX>(pixels);
    register uint8_t scale = pixels.template getscale<PX>(pixels);

    int x = 0;
    for(uint32_t i = 8; i > 0;) {
     e68:	2800      	cmp	r0, #0
     e6a:	d193      	bne.n	d94 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x82c>
     e6c:	9602      	str	r6, [sp, #8]

			// Write third byte
			writeBits<8+XTRA0,0>(next_mark, b0, allpixels);

			#if (FASTLED_ALLOW_INTERRUPTS == 1)
			sei();
     e6e:	b662      	cpsie	i
    m_offsets[2] = _FASTLED_NS_TO_DWT(T3);
    uint32_t wait_off = _FASTLED_NS_TO_DWT((WAIT_TIME-INTERRUPT_THRESHOLD));

    uint32_t next_mark = ARM_DWT_CYCCNT + m_offsets[0];

    while(allpixels.has(1)) {
     e70:	9b01      	ldr	r3, [sp, #4]
     e72:	689b      	ldr	r3, [r3, #8]
     e74:	2b00      	cmp	r3, #0
     e76:	f73f abe2 	bgt.w	63e <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0xd6>
			#if (FASTLED_ALLOW_INTERRUPTS == 1)
			sei();
			#endif
    }

    sei();
     e7a:	b662      	cpsie	i

    return ARM_DWT_CYCCNT - start;
     e7c:	4b09      	ldr	r3, [pc, #36]	; (ea4 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x93c>)
     e7e:	6818      	ldr	r0, [r3, #0]
     e80:	9b05      	ldr	r3, [sp, #20]
     e82:	1ac0      	subs	r0, r0, r3
  }
     e84:	b017      	add	sp, #92	; 0x5c
     e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

      // Read and store up to two bytes
      if (x < m_nActualLanes) {
        b.bytes[m_bitOffsets[x]] = pixels.template loadAndScale<PX>(pixels,x,d,scale);
        x++;
        if (x < m_nActualLanes) {
     e8a:	4643      	mov	r3, r8
     e8c:	e7eb      	b.n	e66 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x8fe>
     e8e:	4648      	mov	r0, r9
     e90:	e540      	b.n	914 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x3ac>
     e92:	464b      	mov	r3, r9
     e94:	e689      	b.n	baa <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x642>
      allpixels.stepDithering();
      #if (FASTLED_ALLOW_INTERRUPTS == 1)
			cli();
			// if interrupts took longer than 45µs, punt on the current frame
			if(ARM_DWT_CYCCNT > next_mark) {
				if((ARM_DWT_CYCCNT-next_mark) > wait_off) { sei(); return ARM_DWT_CYCCNT - start; }
     e96:	b662      	cpsie	i
     e98:	6810      	ldr	r0, [r2, #0]
     e9a:	9b05      	ldr	r3, [sp, #20]
     e9c:	1ac0      	subs	r0, r0, r3
    }

    sei();

    return ARM_DWT_CYCCNT - start;
  }
     e9e:	b017      	add	sp, #92	; 0x5c
     ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     ea4:	e0001004 	.word	0xe0001004

00000ea8 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 1ul>&)>:
    m_nOutBlocks = (m_nHighBit + 8)/8;

  }


  virtual void showPixels(PixelController<RGB_ORDER, LANES, __FL_T4_MASK> & pixels) {
     ea8:	b538      	push	{r3, r4, r5, lr}
     eaa:	4604      	mov	r4, r0
     eac:	460d      	mov	r5, r1

	void wait() {
		uint16_t diff;
		do {
			diff = (micros() & 0xFFFF) - mLastMicros;
     eae:	f000 fdf5 	bl	1a9c <micros>
public:
	CMinWait() { mLastMicros = 0; }

	void wait() {
		uint16_t diff;
		do {
     eb2:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
     eb6:	1ac0      	subs	r0, r0, r3
     eb8:	b280      	uxth	r0, r0
     eba:	2831      	cmp	r0, #49	; 0x31
     ebc:	d9f7      	bls.n	eae <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 1ul>&)+0x6>
		uint32_t clocks = showRGBInternal(pixels);
		// Adjust the timer
		long microsTaken = CLKS_TO_MICROS(clocks);
		MS_COUNTER += (1 + (microsTaken / 1000));
		#else
      showRGBInternal(pixels);
     ebe:	4629      	mov	r1, r5
     ec0:	4620      	mov	r0, r4
     ec2:	f7ff fb51 	bl	568 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)>
			diff = (micros() & 0xFFFF) - mLastMicros;
		} while(diff < WAIT);
	}

	void mark() { mLastMicros = micros() & 0xFFFF; }
     ec6:	f000 fde9 	bl	1a9c <micros>
     eca:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40
     ece:	bd38      	pop	{r3, r4, r5, pc}

00000ed0 <CPixelLEDController<(EOrder)66, 1, 1ul>::show(CRGB const*, int, CRGB)>:

/// write the passed in rgb data out to the leds managed by this controller
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
     ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
     ed2:	4604      	mov	r4, r0
     ed4:	b089      	sub	sp, #36	; 0x24

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
     ed6:	785d      	ldrb	r5, [r3, #1]
        b = rhs.b;
     ed8:	7898      	ldrb	r0, [r3, #2]
            mData += skip;
            mAdvance = (advance) ? 3+skip : 0;
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
     eda:	9101      	str	r1, [sp, #4]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     edc:	7819      	ldrb	r1, [r3, #0]
     ede:	7ca3      	ldrb	r3, [r4, #18]
     ee0:	9202      	str	r2, [sp, #8]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     ee2:	2b01      	cmp	r3, #1
            mData += skip;
            mAdvance = (advance) ? 3+skip : 0;
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
     ee4:	9203      	str	r2, [sp, #12]
     ee6:	f88d 1016 	strb.w	r1, [sp, #22]
        g = rhs.g;
     eea:	f88d 5017 	strb.w	r5, [sp, #23]
        b = rhs.b;
     eee:	f88d 0018 	strb.w	r0, [sp, #24]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     ef2:	d028      	beq.n	f46 <CPixelLEDController<(EOrder)66, 1, 1ul>::show(CRGB const*, int, CRGB)+0x76>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     ef4:	2300      	movs	r3, #0
     ef6:	f88d 3015 	strb.w	r3, [sp, #21]
     efa:	f88d 3014 	strb.w	r3, [sp, #20]
     efe:	f88d 3013 	strb.w	r3, [sp, #19]
     f02:	f88d 3012 	strb.w	r3, [sp, #18]
     f06:	f88d 3011 	strb.w	r3, [sp, #17]
     f0a:	f88d 3010 	strb.w	r3, [sp, #16]
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     f0e:	6823      	ldr	r3, [r4, #0]
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
     f10:	2003      	movs	r0, #3
     f12:	4a2b      	ldr	r2, [pc, #172]	; (fc0 <CPixelLEDController<(EOrder)66, 1, 1ul>::show(CRGB const*, int, CRGB)+0xf0>)
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     f14:	2100      	movs	r1, #0
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     f16:	699b      	ldr	r3, [r3, #24]
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
     f18:	f88d 0019 	strb.w	r0, [sp, #25]
     f1c:	4293      	cmp	r3, r2
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     f1e:	9107      	str	r1, [sp, #28]
     f20:	d148      	bne.n	fb4 <CPixelLEDController<(EOrder)66, 1, 1ul>::show(CRGB const*, int, CRGB)+0xe4>
	CMinWait() { mLastMicros = 0; }

	void wait() {
		uint16_t diff;
		do {
			diff = (micros() & 0xFFFF) - mLastMicros;
     f22:	f000 fdbb 	bl	1a9c <micros>
public:
	CMinWait() { mLastMicros = 0; }

	void wait() {
		uint16_t diff;
		do {
     f26:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
     f2a:	1ac0      	subs	r0, r0, r3
     f2c:	b280      	uxth	r0, r0
     f2e:	2831      	cmp	r0, #49	; 0x31
     f30:	d9f7      	bls.n	f22 <CPixelLEDController<(EOrder)66, 1, 1ul>::show(CRGB const*, int, CRGB)+0x52>
     f32:	a901      	add	r1, sp, #4
     f34:	4620      	mov	r0, r4
     f36:	f7ff fb17 	bl	568 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)>
			diff = (micros() & 0xFFFF) - mLastMicros;
		} while(diff < WAIT);
	}

	void mark() { mLastMicros = micros() & 0xFFFF; }
     f3a:	f000 fdaf 	bl	1a9c <micros>
     f3e:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
  }
     f42:	b009      	add	sp, #36	; 0x24
     f44:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     f46:	4a1f      	ldr	r2, [pc, #124]	; (fc4 <CPixelLEDController<(EOrder)66, 1, 1ul>::show(CRGB const*, int, CRGB)+0xf4>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     f48:	7813      	ldrb	r3, [r2, #0]
     f4a:	3301      	adds	r3, #1
     f4c:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     f50:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     f54:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     f56:	bf14      	ite	ne
     f58:	2280      	movne	r2, #128	; 0x80
     f5a:	2200      	moveq	r2, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     f5c:	0798      	lsls	r0, r3, #30
     f5e:	d502      	bpl.n	f66 <CPixelLEDController<(EOrder)66, 1, 1ul>::show(CRGB const*, int, CRGB)+0x96>
     f60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     f64:	b2d2      	uxtb	r2, r2
                if(R & 0x04) { Q |= 0x20; }
     f66:	075b      	lsls	r3, r3, #29
     f68:	f10d 0716 	add.w	r7, sp, #22
     f6c:	f10d 0313 	add.w	r3, sp, #19
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     f70:	f44f 7e80 	mov.w	lr, #256	; 0x100

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
                if(R & 0x04) { Q |= 0x20; }
     f74:	bf48      	it	mi
     f76:	f042 0220 	orrmi.w	r2, r2, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     f7a:	3210      	adds	r2, #16
     f7c:	b2d2      	uxtb	r2, r2
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     f7e:	b1a9      	cbz	r1, fac <CPixelLEDController<(EOrder)66, 1, 1ul>::show(CRGB const*, int, CRGB)+0xdc>
     f80:	fb9e f1f1 	sdiv	r1, lr, r1
     f84:	b2c9      	uxtb	r1, r1
     f86:	1c48      	adds	r0, r1, #1
     f88:	b2c0      	uxtb	r0, r0
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
     f8a:	fb00 2502 	mla	r5, r0, r2, r2
     f8e:	7018      	strb	r0, [r3, #0]
     f90:	122d      	asrs	r5, r5, #8
     f92:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     f94:	b105      	cbz	r5, f98 <CPixelLEDController<(EOrder)66, 1, 1ul>::show(CRGB const*, int, CRGB)+0xc8>
     f96:	3e01      	subs	r6, #1
     f98:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     f9c:	b100      	cbz	r0, fa0 <CPixelLEDController<(EOrder)66, 1, 1ul>::show(CRGB const*, int, CRGB)+0xd0>
     f9e:	7019      	strb	r1, [r3, #0]
     fa0:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     fa2:	42bb      	cmp	r3, r7
     fa4:	d0b3      	beq.n	f0e <CPixelLEDController<(EOrder)66, 1, 1ul>::show(CRGB const*, int, CRGB)+0x3e>
     fa6:	78d9      	ldrb	r1, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     fa8:	2900      	cmp	r1, #0
     faa:	d1e9      	bne.n	f80 <CPixelLEDController<(EOrder)66, 1, 1ul>::show(CRGB const*, int, CRGB)+0xb0>
     fac:	7019      	strb	r1, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     fae:	f803 1c03 	strb.w	r1, [r3, #-3]
     fb2:	e7f5      	b.n	fa0 <CPixelLEDController<(EOrder)66, 1, 1ul>::show(CRGB const*, int, CRGB)+0xd0>
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     fb4:	4620      	mov	r0, r4
     fb6:	a901      	add	r1, sp, #4
     fb8:	4798      	blx	r3
  }
     fba:	b009      	add	sp, #36	; 0x24
     fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     fbe:	bf00      	nop
     fc0:	00000ea9 	.word	0x00000ea9
     fc4:	200129bc 	.word	0x200129bc

00000fc8 <CPixelLEDController<(EOrder)66, 1, 1ul>::showColor(CRGB const&, int, CRGB)>:

  /// set all the leds on the controller to a given color
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
     fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
     fca:	4604      	mov	r4, r0
     fcc:	b089      	sub	sp, #36	; 0x24

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
     fce:	785d      	ldrb	r5, [r3, #1]
        b = rhs.b;
     fd0:	7898      	ldrb	r0, [r3, #2]
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     fd2:	9101      	str	r1, [sp, #4]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     fd4:	7819      	ldrb	r1, [r3, #0]
     fd6:	7ca3      	ldrb	r3, [r4, #18]
     fd8:	9202      	str	r2, [sp, #8]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     fda:	2b01      	cmp	r3, #1
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     fdc:	9203      	str	r2, [sp, #12]
     fde:	f88d 1016 	strb.w	r1, [sp, #22]
        g = rhs.g;
     fe2:	f88d 5017 	strb.w	r5, [sp, #23]
        b = rhs.b;
     fe6:	f88d 0018 	strb.w	r0, [sp, #24]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     fea:	d027      	beq.n	103c <CPixelLEDController<(EOrder)66, 1, 1ul>::showColor(CRGB const&, int, CRGB)+0x74>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     fec:	2300      	movs	r3, #0
     fee:	f88d 3015 	strb.w	r3, [sp, #21]
     ff2:	f88d 3014 	strb.w	r3, [sp, #20]
     ff6:	f88d 3013 	strb.w	r3, [sp, #19]
     ffa:	f88d 3012 	strb.w	r3, [sp, #18]
     ffe:	f88d 3011 	strb.w	r3, [sp, #17]
    1002:	f88d 3010 	strb.w	r3, [sp, #16]
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
    1006:	6822      	ldr	r2, [r4, #0]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
    1008:	2300      	movs	r3, #0
    100a:	492a      	ldr	r1, [pc, #168]	; (10b4 <CPixelLEDController<(EOrder)66, 1, 1ul>::showColor(CRGB const&, int, CRGB)+0xec>)
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
    100c:	6992      	ldr	r2, [r2, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
    100e:	f88d 3019 	strb.w	r3, [sp, #25]
    1012:	428a      	cmp	r2, r1
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
    1014:	9307      	str	r3, [sp, #28]
    1016:	d148      	bne.n	10aa <CPixelLEDController<(EOrder)66, 1, 1ul>::showColor(CRGB const&, int, CRGB)+0xe2>
	CMinWait() { mLastMicros = 0; }

	void wait() {
		uint16_t diff;
		do {
			diff = (micros() & 0xFFFF) - mLastMicros;
    1018:	f000 fd40 	bl	1a9c <micros>
public:
	CMinWait() { mLastMicros = 0; }

	void wait() {
		uint16_t diff;
		do {
    101c:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
    1020:	1ac0      	subs	r0, r0, r3
    1022:	b280      	uxth	r0, r0
    1024:	2831      	cmp	r0, #49	; 0x31
    1026:	d9f7      	bls.n	1018 <CPixelLEDController<(EOrder)66, 1, 1ul>::showColor(CRGB const&, int, CRGB)+0x50>
    1028:	a901      	add	r1, sp, #4
    102a:	4620      	mov	r0, r4
    102c:	f7ff fa9c 	bl	568 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)>
			diff = (micros() & 0xFFFF) - mLastMicros;
		} while(diff < WAIT);
	}

	void mark() { mLastMicros = micros() & 0xFFFF; }
    1030:	f000 fd34 	bl	1a9c <micros>
    1034:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
  }
    1038:	b009      	add	sp, #36	; 0x24
    103a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
    103c:	4a1e      	ldr	r2, [pc, #120]	; (10b8 <CPixelLEDController<(EOrder)66, 1, 1ul>::showColor(CRGB const&, int, CRGB)+0xf0>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
    103e:	7813      	ldrb	r3, [r2, #0]
    1040:	3301      	adds	r3, #1
    1042:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
    1046:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
    104a:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
    104c:	bf14      	ite	ne
    104e:	2280      	movne	r2, #128	; 0x80
    1050:	2200      	moveq	r2, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
    1052:	0798      	lsls	r0, r3, #30
    1054:	d502      	bpl.n	105c <CPixelLEDController<(EOrder)66, 1, 1ul>::showColor(CRGB const&, int, CRGB)+0x94>
    1056:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    105a:	b2d2      	uxtb	r2, r2
                if(R & 0x04) { Q |= 0x20; }
    105c:	075b      	lsls	r3, r3, #29
    105e:	f10d 0716 	add.w	r7, sp, #22
    1062:	f10d 0313 	add.w	r3, sp, #19
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
    1066:	f44f 7e80 	mov.w	lr, #256	; 0x100

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
                if(R & 0x04) { Q |= 0x20; }
    106a:	bf48      	it	mi
    106c:	f042 0220 	orrmi.w	r2, r2, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
    1070:	3210      	adds	r2, #16
    1072:	b2d2      	uxtb	r2, r2
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
    1074:	b1a9      	cbz	r1, 10a2 <CPixelLEDController<(EOrder)66, 1, 1ul>::showColor(CRGB const&, int, CRGB)+0xda>
    1076:	fb9e f1f1 	sdiv	r1, lr, r1
    107a:	b2c9      	uxtb	r1, r1
    107c:	1c48      	adds	r0, r1, #1
    107e:	b2c0      	uxtb	r0, r0
    1080:	fb00 2502 	mla	r5, r0, r2, r2
    1084:	7018      	strb	r0, [r3, #0]
    1086:	122d      	asrs	r5, r5, #8
    1088:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
    108a:	b105      	cbz	r5, 108e <CPixelLEDController<(EOrder)66, 1, 1ul>::showColor(CRGB const&, int, CRGB)+0xc6>
    108c:	3e01      	subs	r6, #1
    108e:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
    1092:	b100      	cbz	r0, 1096 <CPixelLEDController<(EOrder)66, 1, 1ul>::showColor(CRGB const&, int, CRGB)+0xce>
    1094:	7019      	strb	r1, [r3, #0]
    1096:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
    1098:	42bb      	cmp	r3, r7
    109a:	d0b4      	beq.n	1006 <CPixelLEDController<(EOrder)66, 1, 1ul>::showColor(CRGB const&, int, CRGB)+0x3e>
    109c:	78d9      	ldrb	r1, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
    109e:	2900      	cmp	r1, #0
    10a0:	d1e9      	bne.n	1076 <CPixelLEDController<(EOrder)66, 1, 1ul>::showColor(CRGB const&, int, CRGB)+0xae>
    10a2:	7019      	strb	r1, [r3, #0]
                    d[i] = scale8(Q, e[i]);
    10a4:	f803 1c03 	strb.w	r1, [r3, #-3]
    10a8:	e7f5      	b.n	1096 <CPixelLEDController<(EOrder)66, 1, 1ul>::showColor(CRGB const&, int, CRGB)+0xce>
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
    10aa:	4620      	mov	r0, r4
    10ac:	a901      	add	r1, sp, #4
    10ae:	4790      	blx	r2
  }
    10b0:	b009      	add	sp, #36	; 0x24
    10b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    10b4:	00000ea9 	.word	0x00000ea9
    10b8:	200129bc 	.word	0x200129bc

000010bc <CLEDController::clearLeds(int)>:

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
    10bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    10be:	2300      	movs	r3, #0
    10c0:	b08b      	sub	sp, #44	; 0x2c
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
    10c2:	6805      	ldr	r5, [r0, #0]
    10c4:	4a45      	ldr	r2, [pc, #276]	; (11dc <CLEDController::clearLeds(int)+0x120>)
    10c6:	f88d 3004 	strb.w	r3, [sp, #4]
    10ca:	f88d 3005 	strb.w	r3, [sp, #5]
    10ce:	f88d 3006 	strb.w	r3, [sp, #6]
    10d2:	682e      	ldr	r6, [r5, #0]
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
    10d4:	f88d 3008 	strb.w	r3, [sp, #8]
    10d8:	4296      	cmp	r6, r2
    10da:	f88d 3009 	strb.w	r3, [sp, #9]
    10de:	f88d 300a 	strb.w	r3, [sp, #10]
    10e2:	d170      	bne.n	11c6 <CLEDController::clearLeds(int)+0x10a>
    10e4:	4604      	mov	r4, r0
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
    10e6:	a801      	add	r0, sp, #4
    10e8:	9104      	str	r1, [sp, #16]
    10ea:	7ca2      	ldrb	r2, [r4, #18]
    10ec:	9105      	str	r1, [sp, #20]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
    10ee:	2a01      	cmp	r2, #1
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    10f0:	f88d 301e 	strb.w	r3, [sp, #30]
        g = rhs.g;
    10f4:	f88d 301f 	strb.w	r3, [sp, #31]
        b = rhs.b;
    10f8:	f88d 3020 	strb.w	r3, [sp, #32]
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
    10fc:	9003      	str	r0, [sp, #12]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
    10fe:	d025      	beq.n	114c <CLEDController::clearLeds(int)+0x90>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
    1100:	f88d 301d 	strb.w	r3, [sp, #29]
    1104:	f88d 301c 	strb.w	r3, [sp, #28]
    1108:	f88d 301b 	strb.w	r3, [sp, #27]
    110c:	f88d 301a 	strb.w	r3, [sp, #26]
    1110:	f88d 3019 	strb.w	r3, [sp, #25]
    1114:	f88d 3018 	strb.w	r3, [sp, #24]
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
    1118:	69aa      	ldr	r2, [r5, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
    111a:	2300      	movs	r3, #0
    111c:	4930      	ldr	r1, [pc, #192]	; (11e0 <CLEDController::clearLeds(int)+0x124>)
    111e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    1122:	428a      	cmp	r2, r1
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
    1124:	9309      	str	r3, [sp, #36]	; 0x24
    1126:	d154      	bne.n	11d2 <CLEDController::clearLeds(int)+0x116>
	CMinWait() { mLastMicros = 0; }

	void wait() {
		uint16_t diff;
		do {
			diff = (micros() & 0xFFFF) - mLastMicros;
    1128:	f000 fcb8 	bl	1a9c <micros>
public:
	CMinWait() { mLastMicros = 0; }

	void wait() {
		uint16_t diff;
		do {
    112c:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
    1130:	1ac0      	subs	r0, r0, r3
    1132:	b280      	uxth	r0, r0
    1134:	2831      	cmp	r0, #49	; 0x31
    1136:	d9f7      	bls.n	1128 <CLEDController::clearLeds(int)+0x6c>
    1138:	a903      	add	r1, sp, #12
    113a:	4620      	mov	r0, r4
    113c:	f7ff fa14 	bl	568 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)>
			diff = (micros() & 0xFFFF) - mLastMicros;
		} while(diff < WAIT);
	}

	void mark() { mLastMicros = micros() & 0xFFFF; }
    1140:	f000 fcac 	bl	1a9c <micros>
    1144:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
    1148:	b00b      	add	sp, #44	; 0x2c
    114a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
    114c:	4a25      	ldr	r2, [pc, #148]	; (11e4 <CLEDController::clearLeds(int)+0x128>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
    114e:	7813      	ldrb	r3, [r2, #0]
    1150:	3301      	adds	r3, #1
    1152:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
    1156:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
    115a:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
    115c:	bf14      	ite	ne
    115e:	2180      	movne	r1, #128	; 0x80
    1160:	2100      	moveq	r1, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
    1162:	079a      	lsls	r2, r3, #30
    1164:	d502      	bpl.n	116c <CLEDController::clearLeds(int)+0xb0>
    1166:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    116a:	b2c9      	uxtb	r1, r1
                if(R & 0x04) { Q |= 0x20; }
    116c:	075b      	lsls	r3, r3, #29
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
    116e:	f04f 0200 	mov.w	r2, #0
    1172:	f10d 031b 	add.w	r3, sp, #27
    1176:	f10d 071e 	add.w	r7, sp, #30

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
                if(R & 0x04) { Q |= 0x20; }
    117a:	bf48      	it	mi
    117c:	f041 0120 	orrmi.w	r1, r1, #32
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
    1180:	f44f 7e80 	mov.w	lr, #256	; 0x100
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
    1184:	3110      	adds	r1, #16
    1186:	b2c9      	uxtb	r1, r1
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
    1188:	b1aa      	cbz	r2, 11b6 <CLEDController::clearLeds(int)+0xfa>
    118a:	fb9e f2f2 	sdiv	r2, lr, r2
    118e:	b2d2      	uxtb	r2, r2
    1190:	1c50      	adds	r0, r2, #1
    1192:	b2c0      	uxtb	r0, r0
    1194:	fb00 1501 	mla	r5, r0, r1, r1
    1198:	7018      	strb	r0, [r3, #0]
    119a:	122d      	asrs	r5, r5, #8
    119c:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
    119e:	b105      	cbz	r5, 11a2 <CLEDController::clearLeds(int)+0xe6>
    11a0:	3e01      	subs	r6, #1
    11a2:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
    11a6:	b100      	cbz	r0, 11aa <CLEDController::clearLeds(int)+0xee>
    11a8:	701a      	strb	r2, [r3, #0]
    11aa:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
    11ac:	429f      	cmp	r7, r3
    11ae:	d008      	beq.n	11c2 <CLEDController::clearLeds(int)+0x106>
    11b0:	78da      	ldrb	r2, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
    11b2:	2a00      	cmp	r2, #0
    11b4:	d1e9      	bne.n	118a <CLEDController::clearLeds(int)+0xce>
    11b6:	701a      	strb	r2, [r3, #0]
    11b8:	3301      	adds	r3, #1
                    d[i] = scale8(Q, e[i]);
    11ba:	f803 2c04 	strb.w	r2, [r3, #-4]
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
    11be:	429f      	cmp	r7, r3
    11c0:	d1f6      	bne.n	11b0 <CLEDController::clearLeds(int)+0xf4>
    11c2:	6825      	ldr	r5, [r4, #0]
    11c4:	e7a8      	b.n	1118 <CLEDController::clearLeds(int)+0x5c>
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
    11c6:	460a      	mov	r2, r1
    11c8:	ab02      	add	r3, sp, #8
    11ca:	a901      	add	r1, sp, #4
    11cc:	47b0      	blx	r6

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
    11ce:	b00b      	add	sp, #44	; 0x2c
    11d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
    11d2:	4620      	mov	r0, r4
    11d4:	a903      	add	r1, sp, #12
    11d6:	4790      	blx	r2

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
    11d8:	b00b      	add	sp, #44	; 0x2c
    11da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    11dc:	00000fc9 	.word	0x00000fc9
    11e0:	00000ea9 	.word	0x00000ea9
    11e4:	200129bc 	.word	0x200129bc

000011e8 <VisualMicroDebug::digitalWriteMessageCheck() [clone .part.1]>:
	BreakStartMillis = DBG_Millis();
	digitalWriteMessageCheck();
}

// Work out if we have a DigitalPin Inbound
void VisualMicroDebug::digitalWriteMessageCheck()
    11e8:	b510      	push	{r4, lr}
    11ea:	b082      	sub	sp, #8
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    11ec:	f001 fd00 	bl	2bf0 <usb_serial_getchar>
    11f0:	f001 fcfe 	bl	2bf0 <usb_serial_getchar>
#elif defined(VMDGB_HAS_READER)
	b = reader->getchar();
#elif defined(VM_DBT) && (VM_DBT == VM_DBT_SOFTWARESERIAL)
	b = transport->read();
#else
	b = VM_DEBUGGER_SOFT_TRANSPORT.read();
    11f4:	b2c0      	uxtb	r0, r0
	char pinCharRead = 0;
	if (nxtChar == 'd') {
		// Read Our message back -> dxxxx:1 where xxxxx is the pin number (must be a number!)
		read(); // Remove d
		char nxt = read();
		while (nxt != ':') {
    11f6:	283a      	cmp	r0, #58	; 0x3a
    11f8:	d00b      	beq.n	1212 <VisualMicroDebug::digitalWriteMessageCheck() [clone .part.1]+0x2a>
    11fa:	2400      	movs	r4, #0
			pinStr[pinCharRead] = nxt;
    11fc:	ab02      	add	r3, sp, #8
    11fe:	fa53 f384 	uxtab	r3, r3, r4
    1202:	3401      	adds	r4, #1
    1204:	f803 0c04 	strb.w	r0, [r3, #-4]
    1208:	f001 fcf2 	bl	2bf0 <usb_serial_getchar>
#elif defined(VMDGB_HAS_READER)
	b = reader->getchar();
#elif defined(VM_DBT) && (VM_DBT == VM_DBT_SOFTWARESERIAL)
	b = transport->read();
#else
	b = VM_DEBUGGER_SOFT_TRANSPORT.read();
    120c:	b2c0      	uxtb	r0, r0
	char pinCharRead = 0;
	if (nxtChar == 'd') {
		// Read Our message back -> dxxxx:1 where xxxxx is the pin number (must be a number!)
		read(); // Remove d
		char nxt = read();
		while (nxt != ':') {
    120e:	283a      	cmp	r0, #58	; 0x3a
    1210:	d1f4      	bne.n	11fc <VisualMicroDebug::digitalWriteMessageCheck() [clone .part.1]+0x14>
			pinStr[pinCharRead] = nxt;
			pinCharRead++;
			nxt = read();
		}
		int pin = atoi(pinStr);	// at : so skip and read state char
    1212:	a801      	add	r0, sp, #4
    1214:	f002 ff32 	bl	407c <atoi>
    1218:	4604      	mov	r4, r0
    121a:	f001 fce9 	bl	2bf0 <usb_serial_getchar>
		int state = read() - 48;
    121e:	b2c0      	uxtb	r0, r0
    1220:	f1a0 0130 	sub.w	r1, r0, #48	; 0x30
		if (state == 1 || state == 0) { // State check, not sure tri-state truly supported with DigiWrite
    1224:	2901      	cmp	r1, #1
    1226:	d802      	bhi.n	122e <VisualMicroDebug::digitalWriteMessageCheck() [clone .part.1]+0x46>
    1228:	e011      	b.n	124e <VisualMicroDebug::digitalWriteMessageCheck() [clone .part.1]+0x66>
			digitalWrite(pin, state);
		}
		while (nxt != '\n' && nxt != '\r') {
    122a:	280d      	cmp	r0, #13
    122c:	d004      	beq.n	1238 <VisualMicroDebug::digitalWriteMessageCheck() [clone .part.1]+0x50>
    122e:	f001 fcdf 	bl	2bf0 <usb_serial_getchar>
#elif defined(VMDGB_HAS_READER)
	b = reader->getchar();
#elif defined(VM_DBT) && (VM_DBT == VM_DBT_SOFTWARESERIAL)
	b = transport->read();
#else
	b = VM_DEBUGGER_SOFT_TRANSPORT.read();
    1232:	b2c0      	uxtb	r0, r0
		int pin = atoi(pinStr);	// at : so skip and read state char
		int state = read() - 48;
		if (state == 1 || state == 0) { // State check, not sure tri-state truly supported with DigiWrite
			digitalWrite(pin, state);
		}
		while (nxt != '\n' && nxt != '\r') {
    1234:	280a      	cmp	r0, #10
    1236:	d1f8      	bne.n	122a <VisualMicroDebug::digitalWriteMessageCheck() [clone .part.1]+0x42>
        virtual int peek() { return usb_serial_peekchar(); }
    1238:	f001 fc78 	bl	2b2c <usb_serial_peekchar>
			nxt = read();
		}
		if (peek() == '\n') {
    123c:	b2c0      	uxtb	r0, r0
    123e:	280a      	cmp	r0, #10
    1240:	d001      	beq.n	1246 <VisualMicroDebug::digitalWriteMessageCheck() [clone .part.1]+0x5e>
			read();
		}
	}
}
    1242:	b002      	add	sp, #8
    1244:	bd10      	pop	{r4, pc}
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    1246:	f001 fcd3 	bl	2bf0 <usb_serial_getchar>
    124a:	b002      	add	sp, #8
    124c:	bd10      	pop	{r4, pc}
			nxt = read();
		}
		int pin = atoi(pinStr);	// at : so skip and read state char
		int state = read() - 48;
		if (state == 1 || state == 0) { // State check, not sure tri-state truly supported with DigiWrite
			digitalWrite(pin, state);
    124e:	b2c9      	uxtb	r1, r1
    1250:	b2e0      	uxtb	r0, r4
    1252:	f000 fc7b 	bl	1b4c <digitalWrite>
    1256:	e7ea      	b.n	122e <VisualMicroDebug::digitalWriteMessageCheck() [clone .part.1]+0x46>

00001258 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>:
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
    1258:	4804      	ldr	r0, [pc, #16]	; (126c <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x14>)
    125a:	6802      	ldr	r2, [r0, #0]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    125c:	4411      	add	r1, r2
    125e:	e001      	b.n	1264 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0xc>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    1260:	4299      	cmp	r1, r3
    1262:	d302      	bcc.n	126a <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x12>
    1264:	6803      	ldr	r3, [r0, #0]
    1266:	429a      	cmp	r2, r3
    1268:	d9fa      	bls.n	1260 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x8>
    126a:	4770      	bx	lr
    126c:	20014bec 	.word	0x20014bec

00001270 <VisualMicroDebug::DBG_YieldAndWait(unsigned long, bool)>:
    1270:	4804      	ldr	r0, [pc, #16]	; (1284 <VisualMicroDebug::DBG_YieldAndWait(unsigned long, bool)+0x14>)
    1272:	6802      	ldr	r2, [r0, #0]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    1274:	4411      	add	r1, r2
    1276:	e001      	b.n	127c <VisualMicroDebug::DBG_YieldAndWait(unsigned long, bool)+0xc>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    1278:	428b      	cmp	r3, r1
    127a:	d802      	bhi.n	1282 <VisualMicroDebug::DBG_YieldAndWait(unsigned long, bool)+0x12>
    127c:	6803      	ldr	r3, [r0, #0]
    127e:	4293      	cmp	r3, r2
    1280:	d2fa      	bcs.n	1278 <VisualMicroDebug::DBG_YieldAndWait(unsigned long, bool)+0x8>
    1282:	4770      	bx	lr
    1284:	20014bec 	.word	0x20014bec

00001288 <VisualMicroDebug::OnBreakPointBegin(unsigned long)>:
    1288:	4b09      	ldr	r3, [pc, #36]	; (12b0 <VisualMicroDebug::OnBreakPointBegin(unsigned long)+0x28>)
#if defined(VM_DBT) && (VM_DBT == VM_DBT_NET_UDP)
	available();
#endif
	InBreakMsgRepeatMS = iInBreakMsgRepeatMS;
	InBreakMsgSent = 0L;
	BreakPrevMillis = BreakStartMillis;
    128a:	6882      	ldr	r2, [r0, #8]
    128c:	681b      	ldr	r3, [r3, #0]
{

}

void VisualMicroDebug::OnBreakPointBegin(unsigned long iInBreakMsgRepeatMS)
{
    128e:	b510      	push	{r4, lr}
#if defined(VM_DBT) && (VM_DBT == VM_DBT_NET_UDP)
	available();
#endif
	InBreakMsgRepeatMS = iInBreakMsgRepeatMS;
	InBreakMsgSent = 0L;
    1290:	2400      	movs	r4, #0
void VisualMicroDebug::OnBreakPointBegin(unsigned long iInBreakMsgRepeatMS)
{
#if defined(VM_DBT) && (VM_DBT == VM_DBT_NET_UDP)
	available();
#endif
	InBreakMsgRepeatMS = iInBreakMsgRepeatMS;
    1292:	6101      	str	r1, [r0, #16]
	InBreakMsgSent = 0L;
	BreakPrevMillis = BreakStartMillis;
    1294:	60c2      	str	r2, [r0, #12]
{
#if defined(VM_DBT) && (VM_DBT == VM_DBT_NET_UDP)
	available();
#endif
	InBreakMsgRepeatMS = iInBreakMsgRepeatMS;
	InBreakMsgSent = 0L;
    1296:	6144      	str	r4, [r0, #20]
	BreakPrevMillis = BreakStartMillis;
	BreakStartMillis = DBG_Millis();
    1298:	6083      	str	r3, [r0, #8]
        virtual int peek() { return usb_serial_peekchar(); }
    129a:	f001 fc47 	bl	2b2c <usb_serial_peekchar>
void VisualMicroDebug::digitalWriteMessageCheck()
{
	char nxtChar = peek();
	char pinStr[4];
	char pinCharRead = 0;
	if (nxtChar == 'd') {
    129e:	b2c0      	uxtb	r0, r0
    12a0:	2864      	cmp	r0, #100	; 0x64
    12a2:	d000      	beq.n	12a6 <VisualMicroDebug::OnBreakPointBegin(unsigned long)+0x1e>
    12a4:	bd10      	pop	{r4, pc}
	InBreakMsgRepeatMS = iInBreakMsgRepeatMS;
	InBreakMsgSent = 0L;
	BreakPrevMillis = BreakStartMillis;
	BreakStartMillis = DBG_Millis();
	digitalWriteMessageCheck();
}
    12a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    12aa:	f7ff bf9d 	b.w	11e8 <VisualMicroDebug::digitalWriteMessageCheck() [clone .part.1]>
    12ae:	bf00      	nop
    12b0:	20014bec 	.word	0x20014bec

000012b4 <VisualMicroDebug::OnBreakPointPrintBegin(unsigned char)>:
		}
	}
}

void VisualMicroDebug::OnBreakPointPrintBegin(uint8_t breakpoint_id)
{
    12b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    12b8:	4b19      	ldr	r3, [pc, #100]	; (1320 <VisualMicroDebug::OnBreakPointPrintBegin(unsigned char)+0x6c>)
    12ba:	460e      	mov	r6, r1
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    12bc:	4c19      	ldr	r4, [pc, #100]	; (1324 <VisualMicroDebug::OnBreakPointPrintBegin(unsigned char)+0x70>)
    12be:	4605      	mov	r5, r0
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    12c0:	2106      	movs	r1, #6
    12c2:	4819      	ldr	r0, [pc, #100]	; (1328 <VisualMicroDebug::OnBreakPointPrintBegin(unsigned char)+0x74>)
    12c4:	681f      	ldr	r7, [r3, #0]
    12c6:	f001 fcb9 	bl	2c3c <usb_serial_write>
    12ca:	4631      	mov	r1, r6
    12cc:	2300      	movs	r3, #0
    12ce:	220a      	movs	r2, #10
    12d0:	4620      	mov	r0, r4
    12d2:	f001 fd81 	bl	2dd8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    12d6:	4e15      	ldr	r6, [pc, #84]	; (132c <VisualMicroDebug::OnBreakPointPrintBegin(unsigned char)+0x78>)
    12d8:	2103      	movs	r1, #3
    12da:	4815      	ldr	r0, [pc, #84]	; (1330 <VisualMicroDebug::OnBreakPointPrintBegin(unsigned char)+0x7c>)
    12dc:	f001 fcae 	bl	2c3c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    12e0:	4639      	mov	r1, r7
    12e2:	2300      	movs	r3, #0
    12e4:	220a      	movs	r2, #10
    12e6:	4620      	mov	r0, r4
    12e8:	f001 fd76 	bl	2dd8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    12ec:	4630      	mov	r0, r6
    12ee:	2101      	movs	r1, #1
    12f0:	f001 fca4 	bl	2c3c <usb_serial_write>
    12f4:	68a9      	ldr	r1, [r5, #8]
    12f6:	2300      	movs	r3, #0
    12f8:	220a      	movs	r2, #10
    12fa:	1a79      	subs	r1, r7, r1
    12fc:	4620      	mov	r0, r4
    12fe:	f001 fd6b 	bl	2dd8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1302:	4630      	mov	r0, r6
    1304:	2101      	movs	r1, #1
    1306:	f001 fc99 	bl	2c3c <usb_serial_write>
    130a:	68ae      	ldr	r6, [r5, #8]
    130c:	68e9      	ldr	r1, [r5, #12]
    130e:	4620      	mov	r0, r4
    1310:	2300      	movs	r3, #0
    1312:	220a      	movs	r2, #10
    1314:	1a71      	subs	r1, r6, r1
	VM_DEBUGGER_SOFT_TRANSPORT.print((m - BreakStartMillis));
	VM_DEBUGGER_SOFT_TRANSPORT.print(":");
	//millis since last bp was hit
	VM_DEBUGGER_SOFT_TRANSPORT.print((BreakStartMillis - BreakPrevMillis));
#endif
}
    1316:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    131a:	f001 bd5d 	b.w	2dd8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    131e:	bf00      	nop
    1320:	20014bec 	.word	0x20014bec
    1324:	200123f4 	.word	0x200123f4
    1328:	200000b0 	.word	0x200000b0
    132c:	200000bc 	.word	0x200000bc
    1330:	200000b8 	.word	0x200000b8

00001334 <VisualMicroDebug::OnBreakPointPrintEnd()>:
void VisualMicroDebug::OnBreakPointPrintEnd()
{
    1334:	b508      	push	{r3, lr}
    1336:	2106      	movs	r1, #6
    1338:	4803      	ldr	r0, [pc, #12]	; (1348 <VisualMicroDebug::OnBreakPointPrintEnd()+0x14>)
    133a:	f001 fc7f 	bl	2c3c <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    133e:	4803      	ldr	r0, [pc, #12]	; (134c <VisualMicroDebug::OnBreakPointPrintEnd()+0x18>)
#else
	VM_DEBUGGER_SOFT_TRANSPORT.println("_VMDPE");
#endif

#endif
}
    1340:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    1344:	f001 bd38 	b.w	2db8 <Print::println()>
    1348:	200000c0 	.word	0x200000c0
    134c:	200123f4 	.word	0x200123f4

00001350 <VisualMicroDebug::OnBreakPointEnd()>:

void VisualMicroDebug::OnBreakPointEnd()
{
    1350:	b510      	push	{r4, lr}
    1352:	4604      	mov	r4, r0
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    1354:	f001 fbea 	bl	2b2c <usb_serial_peekchar>
void VisualMicroDebug::digitalWriteMessageCheck()
{
	char nxtChar = peek();
	char pinStr[4];
	char pinCharRead = 0;
	if (nxtChar == 'd') {
    1358:	b2c0      	uxtb	r0, r0
    135a:	2864      	cmp	r0, #100	; 0x64
    135c:	d003      	beq.n	1366 <VisualMicroDebug::OnBreakPointEnd()+0x16>
    135e:	4b05      	ldr	r3, [pc, #20]	; (1374 <VisualMicroDebug::OnBreakPointEnd()+0x24>)
    1360:	681b      	ldr	r3, [r3, #0]

void VisualMicroDebug::OnBreakPointEnd()
{
	digitalWriteMessageCheck(); // Check for Digital Pin
	//update millis to now. ensure time taken for debug doesn't affect comparison of the time to the next point
	BreakStartMillis = DBG_Millis();
    1362:	60a3      	str	r3, [r4, #8]
    1364:	bd10      	pop	{r4, pc}
    1366:	f7ff ff3f 	bl	11e8 <VisualMicroDebug::digitalWriteMessageCheck() [clone .part.1]>
    136a:	4b02      	ldr	r3, [pc, #8]	; (1374 <VisualMicroDebug::OnBreakPointEnd()+0x24>)
    136c:	681b      	ldr	r3, [r3, #0]
    136e:	60a3      	str	r3, [r4, #8]
    1370:	bd10      	pop	{r4, pc}
    1372:	bf00      	nop
    1374:	20014bec 	.word	0x20014bec

00001378 <VisualMicroDebug::outPacketStart(bool)>:
	return outPacketStart(false);
}


bool VisualMicroDebug::outPacketStart(bool noWait)
{
    1378:	b410      	push	{r4}
    137a:	4a0c      	ldr	r2, [pc, #48]	; (13ac <VisualMicroDebug::outPacketStart(bool)+0x34>)
    137c:	4604      	mov	r4, r0
	yield();
#endif


#if defined(VM_DEBUG_BANDWIDTH_THROTTLE_MS) //&& (VM_DBT != VM_DBT_NET_UDP)
	if (!noWait)
    137e:	b971      	cbnz	r1, 139e <VisualMicroDebug::outPacketStart(bool)+0x26>
	{

		unsigned long ms_wait;
		ms_wait = (DBG_Millis() - lastPacketMS);
    1380:	6841      	ldr	r1, [r0, #4]
    1382:	6813      	ldr	r3, [r2, #0]
    1384:	1a59      	subs	r1, r3, r1
		if (ms_wait < VM_DEBUG_BANDWIDTH_THROTTLE_MS)
    1386:	2931      	cmp	r1, #49	; 0x31
    1388:	d809      	bhi.n	139e <VisualMicroDebug::outPacketStart(bool)+0x26>
    138a:	6810      	ldr	r0, [r2, #0]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    138c:	f100 0332 	add.w	r3, r0, #50	; 0x32
    1390:	1a59      	subs	r1, r3, r1
    1392:	e001      	b.n	1398 <VisualMicroDebug::outPacketStart(bool)+0x20>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    1394:	4299      	cmp	r1, r3
    1396:	d302      	bcc.n	139e <VisualMicroDebug::outPacketStart(bool)+0x26>
    1398:	6813      	ldr	r3, [r2, #0]
    139a:	4298      	cmp	r0, r3
    139c:	d9fa      	bls.n	1394 <VisualMicroDebug::outPacketStart(bool)+0x1c>
    139e:	6813      	ldr	r3, [r2, #0]
	transport->beginPacket();
#endif
#endif

	return true;
}
    13a0:	2001      	movs	r0, #1
			//DBG_YieldAndWait(3)
		//}
	}
	//XXX: this should really be after packet end!
	//1501 for cosa - lastPacketMS=millis();
	lastPacketMS = DBG_Millis();
    13a2:	6063      	str	r3, [r4, #4]
	transport->beginPacket();
#endif
#endif

	return true;
}
    13a4:	f85d 4b04 	ldr.w	r4, [sp], #4
    13a8:	4770      	bx	lr
    13aa:	bf00      	nop
    13ac:	20014bec 	.word	0x20014bec

000013b0 <VisualMicroDebug::outPacketEnd()>:
    13b0:	4770      	bx	lr
    13b2:	bf00      	nop

000013b4 <VisualMicroDebug::begin(unsigned long)>:
{

	//todo: detect usb type ports that need a delay
	//don't wait for the port unless we add a timeout and disable debug. because we might be discntected
	//todo: see if esp can handle this delay wuith wifi also connecting!
	delay(1000);
    13b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    13b8:	f000 bb0a 	b.w	19d0 <delay>

000013bc <VisualMicroDebug::init(unsigned long)>:
	vmdebug.init();
	vmdebug.stats();
#endif


	baudRate = 0L; //gets a value later if required, only used by cosa for a re-begin!
    13bc:	2300      	movs	r3, #0
    13be:	6443      	str	r3, [r0, #68]	; 0x44

	lastPacketMS = 0L;
    13c0:	6043      	str	r3, [r0, #4]

	//note: a delay at start causes esp8266 wifi to fail to connect!!
	//		the delay can also be switched off via board/platform.txt property=
	if (delayMs > 0)
    13c2:	b141      	cbz	r1, 13d6 <VisualMicroDebug::init(unsigned long)+0x1a>
    13c4:	4804      	ldr	r0, [pc, #16]	; (13d8 <VisualMicroDebug::init(unsigned long)+0x1c>)
    13c6:	6802      	ldr	r2, [r0, #0]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    13c8:	4411      	add	r1, r2
    13ca:	e001      	b.n	13d0 <VisualMicroDebug::init(unsigned long)+0x14>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    13cc:	4299      	cmp	r1, r3
    13ce:	d302      	bcc.n	13d6 <VisualMicroDebug::init(unsigned long)+0x1a>
    13d0:	6803      	ldr	r3, [r0, #0]
    13d2:	429a      	cmp	r2, r3
    13d4:	d9fa      	bls.n	13cc <VisualMicroDebug::init(unsigned long)+0x10>
    13d6:	4770      	bx	lr
    13d8:	20014bec 	.word	0x20014bec

000013dc <VisualMicroDebug::sendContinuedACK(unsigned char)>:
}
#endif


void VisualMicroDebug::sendContinuedACK(uint8_t breakPointId)
{
    13dc:	b538      	push	{r3, r4, r5, lr}
    13de:	4c0f      	ldr	r4, [pc, #60]	; (141c <VisualMicroDebug::sendContinuedACK(unsigned char)+0x40>)
    13e0:	460d      	mov	r5, r1
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    13e2:	2106      	movs	r1, #6
    13e4:	6823      	ldr	r3, [r4, #0]
			//DBG_YieldAndWait(3)
		//}
	}
	//XXX: this should really be after packet end!
	//1501 for cosa - lastPacketMS=millis();
	lastPacketMS = DBG_Millis();
    13e6:	6043      	str	r3, [r0, #4]
    13e8:	480d      	ldr	r0, [pc, #52]	; (1420 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x44>)
    13ea:	f001 fc27 	bl	2c3c <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    13ee:	220a      	movs	r2, #10
    13f0:	2300      	movs	r3, #0
    13f2:	4629      	mov	r1, r5
    13f4:	480b      	ldr	r0, [pc, #44]	; (1424 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x48>)
    13f6:	f001 fcef 	bl	2dd8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    13fa:	2106      	movs	r1, #6
    13fc:	480a      	ldr	r0, [pc, #40]	; (1428 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x4c>)
    13fe:	f001 fc1d 	bl	2c3c <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1402:	4808      	ldr	r0, [pc, #32]	; (1424 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x48>)
    1404:	f001 fcd8 	bl	2db8 <Print::println()>
    1408:	6822      	ldr	r2, [r4, #0]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    140a:	f102 0132 	add.w	r1, r2, #50	; 0x32
    140e:	e001      	b.n	1414 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x38>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    1410:	4299      	cmp	r1, r3
    1412:	d302      	bcc.n	141a <VisualMicroDebug::sendContinuedACK(unsigned char)+0x3e>
    1414:	6823      	ldr	r3, [r4, #0]
    1416:	429a      	cmp	r2, r3
    1418:	d9fa      	bls.n	1410 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x34>
    141a:	bd38      	pop	{r3, r4, r5, pc}
    141c:	20014bec 	.word	0x20014bec
    1420:	200000c8 	.word	0x200000c8
    1424:	200123f4 	.word	0x200123f4
    1428:	200000d0 	.word	0x200000d0

0000142c <VisualMicroDebug::breakWait(unsigned char)>:
#if defined(VM_DBT) //&& ( VM_DBT == VM_DBT_HARDWARESERIAL || VM_DBT == VM_DBT_FASTSERIAL)
//TODO: implement sturcture serial com!
//we never get called if break was not set during compliation
//return _vm_cmd so that we can setVariable if required (caller needs to know result)
uint8_t VisualMicroDebug::breakWait(uint8_t breakPointId)
{
    142c:	b538      	push	{r3, r4, r5, lr}
	//console write not working yet
#if defined(VM_DBT) && (VM_DBT == VM_DBT_NET_CONSOLE)
	return 'c';
#endif

	if (!alwaysBreak)
    142e:	7e03      	ldrb	r3, [r0, #24]
    1430:	b90b      	cbnz	r3, 1436 <VisualMicroDebug::breakWait(unsigned char)+0xa>
		case 'h':
			//Serial.println("Remote debug session started");
#if defined(VM_DBT) && (VM_DBT == VM_DBT_NET_UDP)
			alwaysBreak = true;
#endif
			return 'c';
    1432:	2063      	movs	r0, #99	; 0x63
	//sendContinuedACK(breakPointId);
	//return 'c'; //if we get here we are continuing!

	//	return '?'; //software serial rubbish detected?
	return 'e';
}
    1434:	bd38      	pop	{r3, r4, r5, pc}
    1436:	460d      	mov	r5, r1
    1438:	4604      	mov	r4, r0
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    143a:	f001 fb99 	bl	2b70 <usb_serial_available>
#endif

	uint8_t b;

	//break/pause until we get a command
	if (available() == 0)
    143e:	f010 0fff 	tst.w	r0, #255	; 0xff
    1442:	d101      	bne.n	1448 <VisualMicroDebug::breakWait(unsigned char)+0x1c>
		if (!UDPConnectionStarted) {
			return 'c';
		}
#endif

		return 'e';
    1444:	2065      	movs	r0, #101	; 0x65
    1446:	bd38      	pop	{r3, r4, r5, pc}
    1448:	f001 fb92 	bl	2b70 <usb_serial_available>
	//doh!  better if we have any key to continue so users data doesn't get lost so much. 
	//NOTE. pause/breakpoints are best used with dedicated port!
	//while(true)
	//{

	while (available() > 0)
    144c:	f010 0fff 	tst.w	r0, #255	; 0xff
    1450:	d0f8      	beq.n	1444 <VisualMicroDebug::breakWait(unsigned char)+0x18>
        virtual int read() { return usb_serial_getchar(); }
    1452:	f001 fbcd 	bl	2bf0 <usb_serial_getchar>
		//		while(VM_DEBUGGER_SOFT_TRANSPORT.available()>0)
		//		{
		//			b = VM_DEBUGGER_SOFT_TRANSPORT.read();
		//#endif
		//debug break commands
		switch (b)
    1456:	b2c0      	uxtb	r0, r0
    1458:	f1a0 0358 	sub.w	r3, r0, #88	; 0x58
    145c:	2b1e      	cmp	r3, #30
    145e:	d8f3      	bhi.n	1448 <VisualMicroDebug::breakWait(unsigned char)+0x1c>
    1460:	a201      	add	r2, pc, #4	; (adr r2, 1468 <VisualMicroDebug::breakWait(unsigned char)+0x3c>)
    1462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1466:	bf00      	nop
    1468:	000014f1 	.word	0x000014f1
    146c:	00001449 	.word	0x00001449
    1470:	00001449 	.word	0x00001449
    1474:	00001449 	.word	0x00001449
    1478:	00001449 	.word	0x00001449
    147c:	00001449 	.word	0x00001449
    1480:	00001449 	.word	0x00001449
    1484:	00001449 	.word	0x00001449
    1488:	00001449 	.word	0x00001449
    148c:	00001449 	.word	0x00001449
    1490:	00001449 	.word	0x00001449
    1494:	000014e5 	.word	0x000014e5
    1498:	00001449 	.word	0x00001449
    149c:	00001449 	.word	0x00001449
    14a0:	00001449 	.word	0x00001449
    14a4:	00001449 	.word	0x00001449
    14a8:	00001433 	.word	0x00001433
    14ac:	00001449 	.word	0x00001449
    14b0:	00001449 	.word	0x00001449
    14b4:	00001449 	.word	0x00001449
    14b8:	00001449 	.word	0x00001449
    14bc:	00001449 	.word	0x00001449
    14c0:	00001449 	.word	0x00001449
    14c4:	00001449 	.word	0x00001449
    14c8:	00001449 	.word	0x00001449
    14cc:	00001433 	.word	0x00001433
    14d0:	00001449 	.word	0x00001449
    14d4:	00001449 	.word	0x00001449
    14d8:	00001449 	.word	0x00001449
    14dc:	00001449 	.word	0x00001449
    14e0:	00001435 	.word	0x00001435
		{

		case 'c':
			sendContinuedACK(breakPointId);
    14e4:	4620      	mov	r0, r4
    14e6:	4629      	mov	r1, r5
    14e8:	f7ff ff78 	bl	13dc <VisualMicroDebug::sendContinuedACK(unsigned char)>
			return 'c'; //if we get here we are continuing!
    14ec:	2063      	movs	r0, #99	; 0x63
    14ee:	bd38      	pop	{r3, r4, r5, pc}
					  //	sendContinuedACK(breakPointId);
					  //	return;

					  //switch off break until re-start. for dev/testing
		case 'X':
			alwaysBreak = false;
    14f0:	2300      	movs	r3, #0
			return 'c';
    14f2:	2063      	movs	r0, #99	; 0x63
					  //	sendContinuedACK(breakPointId);
					  //	return;

					  //switch off break until re-start. for dev/testing
		case 'X':
			alwaysBreak = false;
    14f4:	7623      	strb	r3, [r4, #24]
    14f6:	bd38      	pop	{r3, r4, r5, pc}

000014f8 <VisualMicroDebug::start(bool, bool)>:
}
#endif


void VisualMicroDebug::start(bool waitForKeyToStart, bool _alwaysBreak)
{
    14f8:	b570      	push	{r4, r5, r6, lr}
    14fa:	4605      	mov	r5, r0
    14fc:	4616      	mov	r6, r2
#if defined (VM_DEBUG_BREAKPAUSE)
	if (waitForKeyToStart)
    14fe:	b1a9      	cbz	r1, 152c <VisualMicroDebug::start(bool, bool)+0x34>
	{
		alwaysBreak = true;
    1500:	2301      	movs	r3, #1
    1502:	4c0b      	ldr	r4, [pc, #44]	; (1530 <VisualMicroDebug::start(bool, bool)+0x38>)
    1504:	7603      	strb	r3, [r0, #24]

		//server should know we are waiting sendMessage("Press any key to continue");
		while (breakWait(0) != 'c') {
    1506:	2100      	movs	r1, #0
    1508:	4628      	mov	r0, r5
    150a:	f7ff ff8f 	bl	142c <VisualMicroDebug::breakWait(unsigned char)>
    150e:	2863      	cmp	r0, #99	; 0x63
    1510:	d00c      	beq.n	152c <VisualMicroDebug::start(bool, bool)+0x34>
    1512:	6822      	ldr	r2, [r4, #0]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    1514:	1c51      	adds	r1, r2, #1
    1516:	6823      	ldr	r3, [r4, #0]

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    1518:	429a      	cmp	r2, r3
    151a:	d8f4      	bhi.n	1506 <VisualMicroDebug::start(bool, bool)+0xe>
    151c:	4299      	cmp	r1, r3
    151e:	d2fa      	bcs.n	1516 <VisualMicroDebug::start(bool, bool)+0x1e>
	if (waitForKeyToStart)
	{
		alwaysBreak = true;

		//server should know we are waiting sendMessage("Press any key to continue");
		while (breakWait(0) != 'c') {
    1520:	2100      	movs	r1, #0
    1522:	4628      	mov	r0, r5
    1524:	f7ff ff82 	bl	142c <VisualMicroDebug::breakWait(unsigned char)>
    1528:	2863      	cmp	r0, #99	; 0x63
    152a:	d1f2      	bne.n	1512 <VisualMicroDebug::start(bool, bool)+0x1a>
			DBG_YieldAndWait(1);
		}
		//breakWait(0);
	}
	alwaysBreak = _alwaysBreak;
    152c:	762e      	strb	r6, [r5, #24]
    152e:	bd70      	pop	{r4, r5, r6, pc}
    1530:	20014bec 	.word	0x20014bec

00001534 <_GLOBAL__sub_I__ZN16VisualMicroDebug16DBG_YieldAndWaitEm>:
	//wait if we have to
	//try to prevent new users from overloading bandwidth and filling windows buffer
	//can be overriden via preferences
	//defaults to 50ms; needs to allow time for windows to recover if it pauses, so we need to be slower than the extensions and debugger can process + a bit

	BreakStartMillis = 0L;
    1534:	4b03      	ldr	r3, [pc, #12]	; (1544 <_GLOBAL__sub_I__ZN16VisualMicroDebug16DBG_YieldAndWaitEm+0x10>)
    1536:	2200      	movs	r2, #0
    1538:	609a      	str	r2, [r3, #8]
	BreakPrevMillis = 0L;
    153a:	60da      	str	r2, [r3, #12]
	InBreakMsgRepeatMS = 0L;
    153c:	611a      	str	r2, [r3, #16]
	InBreakMsgSent = 0L;
    153e:	615a      	str	r2, [r3, #20]
    1540:	4770      	bx	lr
    1542:	bf00      	nop
    1544:	20014b80 	.word	0x20014b80

00001548 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>:
	m_nPowerData = 0xFFFFFFFF;
}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
    1548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
    154a:	1e1e      	subs	r6, r3, #0
	m_nPowerData = 0xFFFFFFFF;
}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
    154c:	4604      	mov	r4, r0
    154e:	460f      	mov	r7, r1
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
    1550:	dd0f      	ble.n	1572 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x2a>
    1552:	eb02 0542 	add.w	r5, r2, r2, lsl #1
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
    1556:	6823      	ldr	r3, [r4, #0]
    1558:	4620      	mov	r0, r4
    155a:	689b      	ldr	r3, [r3, #8]
    155c:	4798      	blx	r3
    /// get the next controller in the chain after this one.  will return NULL at the end of the chain
    CLEDController *next() { return m_pNext; }

	/// set the default array of leds to be used by this controller
    CLEDController & setLeds(CRGB *data, int nLeds) {
        m_Data = data;
    155e:	197a      	adds	r2, r7, r5
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
    1560:	6823      	ldr	r3, [r4, #0]
    1562:	6062      	str	r2, [r4, #4]
    1564:	4a0c      	ldr	r2, [pc, #48]	; (1598 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x50>)
    1566:	695b      	ldr	r3, [r3, #20]
        m_nLeds = nLeds;
    1568:	6166      	str	r6, [r4, #20]
    156a:	4293      	cmp	r3, r2
    156c:	d104      	bne.n	1578 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x30>
	return *pLed;
}
    156e:	4620      	mov	r0, r4
    1570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;
    1572:	4616      	mov	r6, r2
    1574:	2500      	movs	r5, #0
    1576:	e7ee      	b.n	1556 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0xe>

	pLed->init();
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
    1578:	4620      	mov	r0, r4
    157a:	4798      	blx	r3

void CFastLED::setMaxRefreshRate(uint16_t refresh, bool constrain) {
  if(constrain) {
    // if we're constraining, the new value of m_nMinMicros _must_ be higher than previously (because we're only
    // allowed to slow things down if constraining)
    if(refresh > 0) {
    157c:	2800      	cmp	r0, #0
    157e:	d0f6      	beq.n	156e <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x26>
      m_nMinMicros = ( (1000000/refresh) >  m_nMinMicros) ? (1000000/refresh) : m_nMinMicros;
    1580:	4b06      	ldr	r3, [pc, #24]	; (159c <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x54>)
    1582:	4a07      	ldr	r2, [pc, #28]	; (15a0 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x58>)
    1584:	fb93 f0f0 	sdiv	r0, r3, r0
    1588:	6853      	ldr	r3, [r2, #4]
    158a:	4298      	cmp	r0, r3
    158c:	bf38      	it	cc
    158e:	4618      	movcc	r0, r3
    1590:	6050      	str	r0, [r2, #4]

	pLed->init();
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
	return *pLed;
}
    1592:	4620      	mov	r0, r4
    1594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1596:	bf00      	nop
    1598:	0000007d 	.word	0x0000007d
    159c:	000f4240 	.word	0x000f4240
    15a0:	20014bc8 	.word	0x20014bc8

000015a4 <_GLOBAL__sub_I_pSmartMatrix>:
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    15a4:	4b04      	ldr	r3, [pc, #16]	; (15b8 <_GLOBAL__sub_I_pSmartMatrix+0x14>)
	m_nFPS = 0;
    15a6:	2200      	movs	r2, #0
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    15a8:	20ff      	movs	r0, #255	; 0xff
	m_nFPS = 0;
	m_pPowerFunc = NULL;
	m_nPowerData = 0xFFFFFFFF;
    15aa:	f04f 31ff 	mov.w	r1, #4294967295

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
	m_nFPS = 0;
    15ae:	805a      	strh	r2, [r3, #2]
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    15b0:	7018      	strb	r0, [r3, #0]
	m_nFPS = 0;
	m_pPowerFunc = NULL;
	m_nPowerData = 0xFFFFFFFF;
    15b2:	6099      	str	r1, [r3, #8]
CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
	m_nFPS = 0;
	m_pPowerFunc = NULL;
    15b4:	60da      	str	r2, [r3, #12]
    15b6:	4770      	bx	lr
    15b8:	20014bc8 	.word	0x20014bc8

000015bc <analogRead>:
}


int analogRead(uint8_t pin)
{
	if (pin > sizeof(pin_to_channel)) return 0;
    15bc:	281c      	cmp	r0, #28
    15be:	d81b      	bhi.n	15f8 <analogRead+0x3c>
	if (calibrating) wait_for_cal();
    15c0:	4914      	ldr	r1, [pc, #80]	; (1614 <analogRead+0x58>)
    15c2:	780b      	ldrb	r3, [r1, #0]
    15c4:	b14b      	cbz	r3, 15da <analogRead+0x1e>


static void wait_for_cal(void)
{
	//printf("wait_for_cal\n");
	while (ADC1_GC & ADC_GC_CAL) ;
    15c6:	4a14      	ldr	r2, [pc, #80]	; (1618 <analogRead+0x5c>)
    15c8:	6c93      	ldr	r3, [r2, #72]	; 0x48
    15ca:	061b      	lsls	r3, r3, #24
    15cc:	d4fc      	bmi.n	15c8 <analogRead+0xc>
	while (ADC2_GC & ADC_GC_CAL) ;
    15ce:	4a13      	ldr	r2, [pc, #76]	; (161c <analogRead+0x60>)
    15d0:	6c93      	ldr	r3, [r2, #72]	; 0x48
    15d2:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    15d6:	d1fb      	bne.n	15d0 <analogRead+0x14>
	// TODO: check CALF, but what do to about CAL failure?
	calibrating = 0;
    15d8:	700b      	strb	r3, [r1, #0]

int analogRead(uint8_t pin)
{
	if (pin > sizeof(pin_to_channel)) return 0;
	if (calibrating) wait_for_cal();
	uint8_t ch = pin_to_channel[pin];
    15da:	4b11      	ldr	r3, [pc, #68]	; (1620 <analogRead+0x64>)
    15dc:	5c1b      	ldrb	r3, [r3, r0]
	if (ch == 255) return 0;
    15de:	2bff      	cmp	r3, #255	; 0xff
    15e0:	d00a      	beq.n	15f8 <analogRead+0x3c>
//	printf("%d\n", ch);
//	if (ch > 15) return 0;
	if(!(ch & 0x80)) {
    15e2:	061a      	lsls	r2, r3, #24
    15e4:	d40a      	bmi.n	15fc <analogRead+0x40>
		ADC1_HC0 = ch;
    15e6:	4a0c      	ldr	r2, [pc, #48]	; (1618 <analogRead+0x5c>)
		while (!(ADC1_HS & ADC_HS_COCO0)) ; // wait
    15e8:	4611      	mov	r1, r2
	uint8_t ch = pin_to_channel[pin];
	if (ch == 255) return 0;
//	printf("%d\n", ch);
//	if (ch > 15) return 0;
	if(!(ch & 0x80)) {
		ADC1_HC0 = ch;
    15ea:	6013      	str	r3, [r2, #0]
		while (!(ADC1_HS & ADC_HS_COCO0)) ; // wait
    15ec:	6a0b      	ldr	r3, [r1, #32]
    15ee:	4a0a      	ldr	r2, [pc, #40]	; (1618 <analogRead+0x5c>)
    15f0:	07d8      	lsls	r0, r3, #31
    15f2:	d5fb      	bpl.n	15ec <analogRead+0x30>
		return ADC1_R0;
	} else {
		ADC2_HC0 = ch & 0x7f;
		while (!(ADC2_HS & ADC_HS_COCO0)) ; // wait
		return ADC2_R0;
    15f4:	6a50      	ldr	r0, [r2, #36]	; 0x24
	}
}
    15f6:	4770      	bx	lr
}


int analogRead(uint8_t pin)
{
	if (pin > sizeof(pin_to_channel)) return 0;
    15f8:	2000      	movs	r0, #0
    15fa:	4770      	bx	lr
	if(!(ch & 0x80)) {
		ADC1_HC0 = ch;
		while (!(ADC1_HS & ADC_HS_COCO0)) ; // wait
		return ADC1_R0;
	} else {
		ADC2_HC0 = ch & 0x7f;
    15fc:	4a07      	ldr	r2, [pc, #28]	; (161c <analogRead+0x60>)
    15fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		while (!(ADC2_HS & ADC_HS_COCO0)) ; // wait
    1602:	4611      	mov	r1, r2
	if(!(ch & 0x80)) {
		ADC1_HC0 = ch;
		while (!(ADC1_HS & ADC_HS_COCO0)) ; // wait
		return ADC1_R0;
	} else {
		ADC2_HC0 = ch & 0x7f;
    1604:	6013      	str	r3, [r2, #0]
		while (!(ADC2_HS & ADC_HS_COCO0)) ; // wait
    1606:	6a0b      	ldr	r3, [r1, #32]
    1608:	4a04      	ldr	r2, [pc, #16]	; (161c <analogRead+0x60>)
    160a:	07db      	lsls	r3, r3, #31
    160c:	d5fb      	bpl.n	1606 <analogRead+0x4a>
		return ADC2_R0;
    160e:	6a50      	ldr	r0, [r2, #36]	; 0x24
	}
}
    1610:	4770      	bx	lr
    1612:	bf00      	nop
    1614:	20014be0 	.word	0x20014be0
    1618:	400c4000 	.word	0x400c4000
    161c:	400c8000 	.word	0x400c8000
    1620:	20000120 	.word	0x20000120

00001624 <analogReadRes>:

void analogReadRes(unsigned int bits)
{
  uint32_t tmp32, mode;

   if (bits == 8) {
    1624:	2808      	cmp	r0, #8
void analogReference(uint8_t type)
{
}

void analogReadRes(unsigned int bits)
{
    1626:	b470      	push	{r4, r5, r6}
  uint32_t tmp32, mode;

   if (bits == 8) {
    1628:	d024      	beq.n	1674 <analogReadRes+0x50>
    // 8 bit conversion (17 clocks) plus 8 clocks for input settling
    mode = ADC_CFG_MODE(0) | ADC_CFG_ADSTS(3);
  } else if (bits == 10) {
    162a:	280a      	cmp	r0, #10
    // 10 bit conversion (17 clocks) plus 20 clocks for input settling
    mode = ADC_CFG_MODE(1) | ADC_CFG_ADSTS(2) | ADC_CFG_ADLSMP;
  } else {
    // 12 bit conversion (25 clocks) plus 24 clocks for input settling
    mode = ADC_CFG_MODE(2) | ADC_CFG_ADSTS(3) | ADC_CFG_ADLSMP;
    162c:	bf0c      	ite	eq
    162e:	f44f 7405 	moveq.w	r4, #532	; 0x214
    1632:	f44f 7446 	movne.w	r4, #792	; 0x318
  }

  tmp32  = (ADC1_CFG & (0xFFFFFC00));
    1636:	4811      	ldr	r0, [pc, #68]	; (167c <analogReadRes+0x58>)
    1638:	4a11      	ldr	r2, [pc, #68]	; (1680 <analogReadRes+0x5c>)
    163a:	6c43      	ldr	r3, [r0, #68]	; 0x44
  tmp32 |= (ADC1_CFG & (0x03));  // ADICLK
    163c:	6c46      	ldr	r6, [r0, #68]	; 0x44
  } else {
    // 12 bit conversion (25 clocks) plus 24 clocks for input settling
    mode = ADC_CFG_MODE(2) | ADC_CFG_ADSTS(3) | ADC_CFG_ADLSMP;
  }

  tmp32  = (ADC1_CFG & (0xFFFFFC00));
    163e:	401a      	ands	r2, r3
  tmp32 |= (ADC1_CFG & (0x03));  // ADICLK
  tmp32 |= (ADC1_CFG & (0xE0));  // ADIV & ADLPC
    1640:	6c45      	ldr	r5, [r0, #68]	; 0x44
    // 12 bit conversion (25 clocks) plus 24 clocks for input settling
    mode = ADC_CFG_MODE(2) | ADC_CFG_ADSTS(3) | ADC_CFG_ADLSMP;
  }

  tmp32  = (ADC1_CFG & (0xFFFFFC00));
  tmp32 |= (ADC1_CFG & (0x03));  // ADICLK
    1642:	f006 0603 	and.w	r6, r6, #3
  tmp32 |= (ADC1_CFG & (0xE0));  // ADIV & ADLPC

  tmp32 |= mode; 
  ADC1_CFG = tmp32;
  
  tmp32  = (ADC2_CFG & (0xFFFFFC00));
    1646:	490f      	ldr	r1, [pc, #60]	; (1684 <analogReadRes+0x60>)
    mode = ADC_CFG_MODE(2) | ADC_CFG_ADSTS(3) | ADC_CFG_ADLSMP;
  }

  tmp32  = (ADC1_CFG & (0xFFFFFC00));
  tmp32 |= (ADC1_CFG & (0x03));  // ADICLK
  tmp32 |= (ADC1_CFG & (0xE0));  // ADIV & ADLPC
    1648:	f005 05e0 	and.w	r5, r5, #224	; 0xe0

  tmp32 |= mode; 
  ADC1_CFG = tmp32;
  
  tmp32  = (ADC2_CFG & (0xFFFFFC00));
    164c:	4b0c      	ldr	r3, [pc, #48]	; (1680 <analogReadRes+0x5c>)
    // 12 bit conversion (25 clocks) plus 24 clocks for input settling
    mode = ADC_CFG_MODE(2) | ADC_CFG_ADSTS(3) | ADC_CFG_ADLSMP;
  }

  tmp32  = (ADC1_CFG & (0xFFFFFC00));
  tmp32 |= (ADC1_CFG & (0x03));  // ADICLK
    164e:	4332      	orrs	r2, r6
  tmp32 |= (ADC1_CFG & (0xE0));  // ADIV & ADLPC
    1650:	432a      	orrs	r2, r5

  tmp32 |= mode; 
    1652:	4322      	orrs	r2, r4
  ADC1_CFG = tmp32;
    1654:	6442      	str	r2, [r0, #68]	; 0x44
  
  tmp32  = (ADC2_CFG & (0xFFFFFC00));
    1656:	6c48      	ldr	r0, [r1, #68]	; 0x44
  tmp32 |= (ADC2_CFG & (0x03));  // ADICLK
    1658:	6c4a      	ldr	r2, [r1, #68]	; 0x44
  tmp32 |= (ADC1_CFG & (0xE0));  // ADIV & ADLPC

  tmp32 |= mode; 
  ADC1_CFG = tmp32;
  
  tmp32  = (ADC2_CFG & (0xFFFFFC00));
    165a:	4003      	ands	r3, r0
  tmp32 |= (ADC2_CFG & (0x03));  // ADICLK
  tmp32 |= (ADC2_CFG & (0xE0));  // ADIV & ADLPC
    165c:	6c48      	ldr	r0, [r1, #68]	; 0x44

  tmp32 |= mode; 
  ADC1_CFG = tmp32;
  
  tmp32  = (ADC2_CFG & (0xFFFFFC00));
  tmp32 |= (ADC2_CFG & (0x03));  // ADICLK
    165e:	f002 0203 	and.w	r2, r2, #3
  tmp32 |= (ADC2_CFG & (0xE0));  // ADIV & ADLPC
    1662:	f000 00e0 	and.w	r0, r0, #224	; 0xe0

  tmp32 |= mode; 
  ADC1_CFG = tmp32;
  
  tmp32  = (ADC2_CFG & (0xFFFFFC00));
  tmp32 |= (ADC2_CFG & (0x03));  // ADICLK
    1666:	431a      	orrs	r2, r3
  tmp32 |= (ADC2_CFG & (0xE0));  // ADIV & ADLPC
    1668:	ea40 0302 	orr.w	r3, r0, r2

  tmp32 |= mode; 
    166c:	4323      	orrs	r3, r4
  ADC2_CFG = tmp32;
}
    166e:	bc70      	pop	{r4, r5, r6}
  tmp32  = (ADC2_CFG & (0xFFFFFC00));
  tmp32 |= (ADC2_CFG & (0x03));  // ADICLK
  tmp32 |= (ADC2_CFG & (0xE0));  // ADIV & ADLPC

  tmp32 |= mode; 
  ADC2_CFG = tmp32;
    1670:	644b      	str	r3, [r1, #68]	; 0x44
}
    1672:	4770      	bx	lr
{
  uint32_t tmp32, mode;

   if (bits == 8) {
    // 8 bit conversion (17 clocks) plus 8 clocks for input settling
    mode = ADC_CFG_MODE(0) | ADC_CFG_ADSTS(3);
    1674:	f44f 7440 	mov.w	r4, #768	; 0x300
    1678:	e7dd      	b.n	1636 <analogReadRes+0x12>
    167a:	bf00      	nop
    167c:	400c4000 	.word	0x400c4000
    1680:	fffffc00 	.word	0xfffffc00
    1684:	400c8000 	.word	0x400c8000

00001688 <analogReadAveraging>:
  tmp32 |= mode; 
  ADC2_CFG = tmp32;
}

void analogReadAveraging(unsigned int num)
{
    1688:	b410      	push	{r4}
  uint32_t mode, mode1;
  
  //disable averaging, ADC1 and ADC2
  ADC1_GC &= ~0x20;
    168a:	4c1e      	ldr	r4, [pc, #120]	; (1704 <analogReadAveraging+0x7c>)
  mode = ADC1_CFG & ~0xC000;
  ADC2_GC &= ~0x20;
  mode1 = ADC2_CFG & ~0xC000;
  
    if (num >= 32) {
    168c:	281f      	cmp	r0, #31
  uint32_t mode, mode1;
  
  //disable averaging, ADC1 and ADC2
  ADC1_GC &= ~0x20;
  mode = ADC1_CFG & ~0xC000;
  ADC2_GC &= ~0x20;
    168e:	491e      	ldr	r1, [pc, #120]	; (1708 <analogReadAveraging+0x80>)
void analogReadAveraging(unsigned int num)
{
  uint32_t mode, mode1;
  
  //disable averaging, ADC1 and ADC2
  ADC1_GC &= ~0x20;
    1690:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    1692:	f023 0320 	bic.w	r3, r3, #32
    1696:	64a3      	str	r3, [r4, #72]	; 0x48
  mode = ADC1_CFG & ~0xC000;
    1698:	6c62      	ldr	r2, [r4, #68]	; 0x44
  ADC2_GC &= ~0x20;
    169a:	6c8b      	ldr	r3, [r1, #72]	; 0x48
{
  uint32_t mode, mode1;
  
  //disable averaging, ADC1 and ADC2
  ADC1_GC &= ~0x20;
  mode = ADC1_CFG & ~0xC000;
    169c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
  ADC2_GC &= ~0x20;
    16a0:	f023 0320 	bic.w	r3, r3, #32
    16a4:	648b      	str	r3, [r1, #72]	; 0x48
  mode1 = ADC2_CFG & ~0xC000;
    16a6:	6c4b      	ldr	r3, [r1, #68]	; 0x44
    16a8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
  
    if (num >= 32) {
    16ac:	d912      	bls.n	16d4 <analogReadAveraging+0x4c>
      mode |= ADC_CFG_AVGS(3);
    16ae:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
      mode1 |= ADC_CFG_AVGS(3);
    16b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
    16b6:	6462      	str	r2, [r4, #68]	; 0x44
  ADC2_CFG = mode1;
    16b8:	644b      	str	r3, [r1, #68]	; 0x44
  
  if(num >= 4){
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
    16ba:	4912      	ldr	r1, [pc, #72]	; (1704 <analogReadAveraging+0x7c>)
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
    16bc:	4a12      	ldr	r2, [pc, #72]	; (1708 <analogReadAveraging+0x80>)

  ADC1_CFG = mode;
  ADC2_CFG = mode1;
  
  if(num >= 4){
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
    16be:	6c8b      	ldr	r3, [r1, #72]	; 0x48
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
  }
}
    16c0:	f85d 4b04 	ldr.w	r4, [sp], #4

  ADC1_CFG = mode;
  ADC2_CFG = mode1;
  
  if(num >= 4){
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
    16c4:	f043 0320 	orr.w	r3, r3, #32
    16c8:	648b      	str	r3, [r1, #72]	; 0x48
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
    16ca:	6c93      	ldr	r3, [r2, #72]	; 0x48
    16cc:	f043 0320 	orr.w	r3, r3, #32
    16d0:	6493      	str	r3, [r2, #72]	; 0x48
  }
}
    16d2:	4770      	bx	lr
  
    if (num >= 32) {
      mode |= ADC_CFG_AVGS(3);
      mode1 |= ADC_CFG_AVGS(3);

    } else if (num >= 16) {
    16d4:	280f      	cmp	r0, #15
    16d6:	d906      	bls.n	16e6 <analogReadAveraging+0x5e>
      mode |= ADC_CFG_AVGS(2);
    16d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
      mode1 |= ADC_CFG_AVGS(2);
    16dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
    16e0:	6462      	str	r2, [r4, #68]	; 0x44
  ADC2_CFG = mode1;
    16e2:	644b      	str	r3, [r1, #68]	; 0x44
    16e4:	e7e9      	b.n	16ba <analogReadAveraging+0x32>

    } else if (num >= 16) {
      mode |= ADC_CFG_AVGS(2);
      mode1 |= ADC_CFG_AVGS(2);

    } else if (num >= 8) {
    16e6:	2807      	cmp	r0, #7
    16e8:	d903      	bls.n	16f2 <analogReadAveraging+0x6a>
      mode |= ADC_CFG_AVGS(1);
    16ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
      mode1 |= ADC_CFG_AVGS(1);
    16ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
    16f2:	4c04      	ldr	r4, [pc, #16]	; (1704 <analogReadAveraging+0x7c>)
  ADC2_CFG = mode1;
  
  if(num >= 4){
    16f4:	2803      	cmp	r0, #3
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
  ADC2_CFG = mode1;
    16f6:	4904      	ldr	r1, [pc, #16]	; (1708 <analogReadAveraging+0x80>)
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
    16f8:	6462      	str	r2, [r4, #68]	; 0x44
  ADC2_CFG = mode1;
    16fa:	644b      	str	r3, [r1, #68]	; 0x44
  
  if(num >= 4){
    16fc:	d8dd      	bhi.n	16ba <analogReadAveraging+0x32>
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
  }
}
    16fe:	f85d 4b04 	ldr.w	r4, [sp], #4
    1702:	4770      	bx	lr
    1704:	400c4000 	.word	0x400c4000
    1708:	400c8000 	.word	0x400c8000

0000170c <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    170c:	4a96      	ldr	r2, [pc, #600]	; (1968 <set_arm_clock+0x25c>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    170e:	4b97      	ldr	r3, [pc, #604]	; (196c <set_arm_clock+0x260>)
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    1710:	4290      	cmp	r0, r2
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
    1712:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;
    1716:	4c96      	ldr	r4, [pc, #600]	; (1970 <set_arm_clock+0x264>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    1718:	f8d3 e014 	ldr.w	lr, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    171c:	6999      	ldr	r1, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    171e:	68e6      	ldr	r6, [r4, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    1720:	d91c      	bls.n	175c <set_arm_clock+0x50>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    1722:	4b94      	ldr	r3, [pc, #592]	; (1974 <set_arm_clock+0x268>)
    1724:	4298      	cmp	r0, r3
    1726:	f240 8115 	bls.w	1954 <set_arm_clock+0x248>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    172a:	4b93      	ldr	r3, [pc, #588]	; (1978 <set_arm_clock+0x26c>)
    172c:	f240 6527 	movw	r5, #1575	; 0x627
    1730:	4f92      	ldr	r7, [pc, #584]	; (197c <set_arm_clock+0x270>)
    1732:	4403      	add	r3, r0
    1734:	4c92      	ldr	r4, [pc, #584]	; (1980 <set_arm_clock+0x274>)
    1736:	0a1a      	lsrs	r2, r3, #8
    1738:	fba7 3202 	umull	r3, r2, r7, r2
    173c:	09d3      	lsrs	r3, r2, #7
    173e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    1742:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    1746:	f202 43e2 	addw	r3, r2, #1250	; 0x4e2
    174a:	42ab      	cmp	r3, r5
    174c:	bf28      	it	cs
    174e:	462b      	movcs	r3, r5
    1750:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
    1754:	fba4 3503 	umull	r3, r5, r4, r3
    1758:	08ed      	lsrs	r5, r5, #3
    175a:	e004      	b.n	1766 <set_arm_clock+0x5a>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24000000) {
    175c:	4d89      	ldr	r5, [pc, #548]	; (1984 <set_arm_clock+0x278>)
    175e:	42a8      	cmp	r0, r5
    1760:	bf94      	ite	ls
    1762:	2506      	movls	r5, #6
    1764:	250e      	movhi	r5, #14
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    1766:	4a81      	ldr	r2, [pc, #516]	; (196c <set_arm_clock+0x260>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    1768:	f006 071f 	and.w	r7, r6, #31
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    176c:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    1770:	42af      	cmp	r7, r5
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    1772:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    1776:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    177a:	d20a      	bcs.n	1792 <set_arm_clock+0x86>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    177c:	4b7c      	ldr	r3, [pc, #496]	; (1970 <set_arm_clock+0x264>)

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    177e:	f026 061f 	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    1782:	461a      	mov	r2, r3
	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    1784:	432e      	orrs	r6, r5
		DCDC_REG3 = dcdc;
    1786:	60de      	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    1788:	6813      	ldr	r3, [r2, #0]
    178a:	2b00      	cmp	r3, #0
    178c:	dafc      	bge.n	1788 <set_arm_clock+0x7c>
    178e:	f006 071f 	and.w	r7, r6, #31
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    1792:	f01e 7300 	ands.w	r3, lr, #33554432	; 0x2000000
    1796:	d131      	bne.n	17fc <set_arm_clock+0xf0>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    1798:	4c7b      	ldr	r4, [pc, #492]	; (1988 <set_arm_clock+0x27c>)
    179a:	4a7c      	ldr	r2, [pc, #496]	; (198c <set_arm_clock+0x280>)
    179c:	f8d4 c010 	ldr.w	ip, [r4, #16]
    17a0:	4614      	mov	r4, r2
    17a2:	ea0c 0202 	and.w	r2, ip, r2
    17a6:	42a2      	cmp	r2, r4
    17a8:	bf0a      	itet	eq
    17aa:	f04f 53c0 	moveq.w	r3, #402653184	; 0x18000000
    17ae:	f44f 5280 	movne.w	r2, #4096	; 0x1000
    17b2:	2200      	moveq	r2, #0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    17b4:	ea8e 0403 	eor.w	r4, lr, r3
    17b8:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    17bc:	d008      	beq.n	17d0 <set_arm_clock+0xc4>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    17be:	f02e 5e60 	bic.w	lr, lr, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    17c2:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
			CCM_CBCDR = cbcdr;
    17c6:	4c69      	ldr	r4, [pc, #420]	; (196c <set_arm_clock+0x260>)
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    17c8:	ea43 0e0e 	orr.w	lr, r3, lr
			CCM_CBCDR = cbcdr;
    17cc:	f8c4 e014 	str.w	lr, [r4, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    17d0:	ea81 0302 	eor.w	r3, r1, r2
    17d4:	f413 5f40 	tst.w	r3, #12288	; 0x3000
    17d8:	d008      	beq.n	17ec <set_arm_clock+0xe0>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    17da:	4b64      	ldr	r3, [pc, #400]	; (196c <set_arm_clock+0x260>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    17dc:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    17e0:	4311      	orrs	r1, r2
			CCM_CBCMR = cbcmr;
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    17e2:	461a      	mov	r2, r3
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    17e4:	6199      	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    17e6:	6c93      	ldr	r3, [r2, #72]	; 0x48
    17e8:	071c      	lsls	r4, r3, #28
    17ea:	d4fc      	bmi.n	17e6 <set_arm_clock+0xda>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    17ec:	f04e 7e00 	orr.w	lr, lr, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    17f0:	4a5e      	ldr	r2, [pc, #376]	; (196c <set_arm_clock+0x260>)
    17f2:	f8c2 e014 	str.w	lr, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    17f6:	6c93      	ldr	r3, [r2, #72]	; 0x48
    17f8:	0699      	lsls	r1, r3, #26
    17fa:	d4fc      	bmi.n	17f6 <set_arm_clock+0xea>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
    17fc:	2101      	movs	r1, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    17fe:	4c64      	ldr	r4, [pc, #400]	; (1990 <set_arm_clock+0x284>)
	}

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
    1800:	460a      	mov	r2, r1
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    1802:	fb01 f302 	mul.w	r3, r1, r2
    1806:	fb00 f303 	mul.w	r3, r0, r3
    180a:	42a3      	cmp	r3, r4
    180c:	d809      	bhi.n	1822 <set_arm_clock+0x116>
		if (div_arm < 8) {
    180e:	2a07      	cmp	r2, #7
    1810:	f200 8095 	bhi.w	193e <set_arm_clock+0x232>
			div_arm = div_arm + 1;
    1814:	3201      	adds	r2, #1
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    1816:	fb01 f302 	mul.w	r3, r1, r2
    181a:	fb00 f303 	mul.w	r3, r0, r3
    181e:	42a3      	cmp	r3, r4
    1820:	d9f5      	bls.n	180e <set_arm_clock+0x102>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    1822:	485c      	ldr	r0, [pc, #368]	; (1994 <set_arm_clock+0x288>)
    1824:	4c5c      	ldr	r4, [pc, #368]	; (1998 <set_arm_clock+0x28c>)
    1826:	4418      	add	r0, r3
    1828:	fba4 0300 	umull	r0, r3, r4, r0
    182c:	0d1b      	lsrs	r3, r3, #20
	if (mult > 108) mult = 108;
    182e:	2b6c      	cmp	r3, #108	; 0x6c
    1830:	f200 808b 	bhi.w	194a <set_arm_clock+0x23e>
	if (mult < 54) mult = 54;
    1834:	2b35      	cmp	r3, #53	; 0x35
    1836:	f200 808f 	bhi.w	1958 <set_arm_clock+0x24c>
    183a:	f8df 8188 	ldr.w	r8, [pc, #392]	; 19c4 <set_arm_clock+0x2b8>
    183e:	2336      	movs	r3, #54	; 0x36
    1840:	4856      	ldr	r0, [pc, #344]	; (199c <set_arm_clock+0x290>)

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    1842:	f8df c144 	ldr.w	ip, [pc, #324]	; 1988 <set_arm_clock+0x27c>
    1846:	4c56      	ldr	r4, [pc, #344]	; (19a0 <set_arm_clock+0x294>)
    1848:	f8dc 9000 	ldr.w	r9, [ip]
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    184c:	fbb0 f0f2 	udiv	r0, r0, r2

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    1850:	ea09 0404 	and.w	r4, r9, r4
    1854:	4544      	cmp	r4, r8
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    1856:	fbb0 f0f1 	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    185a:	d00b      	beq.n	1874 <set_arm_clock+0x168>
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    185c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    1860:	f44f 5880 	mov.w	r8, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    1864:	4664      	mov	r4, ip
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    1866:	f8cc 8000 	str.w	r8, [ip]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    186a:	f8cc 3000 	str.w	r3, [ip]
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    186e:	6823      	ldr	r3, [r4, #0]
    1870:	2b00      	cmp	r3, #0
    1872:	dafc      	bge.n	186e <set_arm_clock+0x162>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    1874:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 196c <set_arm_clock+0x260>
    1878:	3a01      	subs	r2, #1
    187a:	f8dc 3010 	ldr.w	r3, [ip, #16]
    187e:	f003 0307 	and.w	r3, r3, #7
    1882:	4293      	cmp	r3, r2
    1884:	d007      	beq.n	1896 <set_arm_clock+0x18a>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    1886:	f002 0207 	and.w	r2, r2, #7
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    188a:	4664      	mov	r4, ip
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    188c:	f8cc 2010 	str.w	r2, [ip, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    1890:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    1892:	03db      	lsls	r3, r3, #15
    1894:	d4fc      	bmi.n	1890 <set_arm_clock+0x184>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    1896:	3901      	subs	r1, #1
    1898:	0289      	lsls	r1, r1, #10
    189a:	ea8e 0301 	eor.w	r3, lr, r1
    189e:	f413 5fe0 	tst.w	r3, #7168	; 0x1c00
    18a2:	d00c      	beq.n	18be <set_arm_clock+0x1b2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
		CCM_CBCDR = cbcdr;
    18a4:	4b31      	ldr	r3, [pc, #196]	; (196c <set_arm_clock+0x260>)
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    18a6:	f42e 5ee0 	bic.w	lr, lr, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    18aa:	f401 51e0 	and.w	r1, r1, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    18ae:	461a      	mov	r2, r3
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    18b0:	ea41 0e0e 	orr.w	lr, r1, lr
		CCM_CBCDR = cbcdr;
    18b4:	f8c3 e014 	str.w	lr, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    18b8:	6c93      	ldr	r3, [r2, #72]	; 0x48
    18ba:	0799      	lsls	r1, r3, #30
    18bc:	d4fc      	bmi.n	18b8 <set_arm_clock+0x1ac>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    18be:	4b39      	ldr	r3, [pc, #228]	; (19a4 <set_arm_clock+0x298>)
    18c0:	4939      	ldr	r1, [pc, #228]	; (19a8 <set_arm_clock+0x29c>)
    18c2:	4403      	add	r3, r0
    18c4:	09db      	lsrs	r3, r3, #7
    18c6:	fba1 3103 	umull	r3, r1, r1, r3
    18ca:	0b09      	lsrs	r1, r1, #12
    18cc:	2904      	cmp	r1, #4
    18ce:	bf28      	it	cs
    18d0:	2104      	movcs	r1, #4
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    18d2:	1e4b      	subs	r3, r1, #1
    18d4:	021b      	lsls	r3, r3, #8
    18d6:	ea8e 0203 	eor.w	r2, lr, r3
    18da:	f412 7f40 	tst.w	r2, #768	; 0x300
    18de:	d007      	beq.n	18f0 <set_arm_clock+0x1e4>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    18e0:	f42e 7e40 	bic.w	lr, lr, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    18e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    18e8:	4a20      	ldr	r2, [pc, #128]	; (196c <set_arm_clock+0x260>)

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    18ea:	ea43 030e 	orr.w	r3, r3, lr
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    18ee:	6153      	str	r3, [r2, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    18f0:	4b1e      	ldr	r3, [pc, #120]	; (196c <set_arm_clock+0x260>)
    18f2:	695c      	ldr	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    18f4:	461a      	mov	r2, r3
		CCM_CBCDR = cbcdr;
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    18f6:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
    18fa:	615c      	str	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    18fc:	6c93      	ldr	r3, [r2, #72]	; 0x48
    18fe:	069b      	lsls	r3, r3, #26
    1900:	d4fc      	bmi.n	18fc <set_arm_clock+0x1f0>

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    1902:	4b2a      	ldr	r3, [pc, #168]	; (19ac <set_arm_clock+0x2a0>)
    1904:	f04f 32ff 	mov.w	r2, #4294967295
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    1908:	4c29      	ldr	r4, [pc, #164]	; (19b0 <set_arm_clock+0x2a4>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    190a:	42bd      	cmp	r5, r7
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    190c:	fba3 e300 	umull	lr, r3, r3, r0
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    1910:	6020      	str	r0, [r4, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    1912:	ea4f 4393 	mov.w	r3, r3, lsr #18
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    1916:	4c27      	ldr	r4, [pc, #156]	; (19b4 <set_arm_clock+0x2a8>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    1918:	fbb2 f3f3 	udiv	r3, r2, r3
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    191c:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    1920:	4a25      	ldr	r2, [pc, #148]	; (19b8 <set_arm_clock+0x2ac>)
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    1922:	6021      	str	r1, [r4, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    1924:	6013      	str	r3, [r2, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    1926:	d208      	bcs.n	193a <set_arm_clock+0x22e>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    1928:	4b11      	ldr	r3, [pc, #68]	; (1970 <set_arm_clock+0x264>)
	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    192a:	f026 061f 	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    192e:	461a      	mov	r2, r3

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    1930:	432e      	orrs	r6, r5
		DCDC_REG3 = dcdc;
    1932:	60de      	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    1934:	6813      	ldr	r3, [r2, #0]
    1936:	2b00      	cmp	r3, #0
    1938:	dafc      	bge.n	1934 <set_arm_clock+0x228>
	}

	return frequency;
}
    193a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
    193e:	2904      	cmp	r1, #4
    1940:	f63f af6f 	bhi.w	1822 <set_arm_clock+0x116>
				div_ahb = div_ahb + 1;
    1944:	3101      	adds	r1, #1
				div_arm = 1;
    1946:	2201      	movs	r2, #1
    1948:	e75b      	b.n	1802 <set_arm_clock+0xf6>
    194a:	f8df 807c 	ldr.w	r8, [pc, #124]	; 19c8 <set_arm_clock+0x2bc>
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
    194e:	236c      	movs	r3, #108	; 0x6c
    1950:	481a      	ldr	r0, [pc, #104]	; (19bc <set_arm_clock+0x2b0>)
    1952:	e776      	b.n	1842 <set_arm_clock+0x136>
    1954:	2512      	movs	r5, #18
    1956:	e706      	b.n	1766 <set_arm_clock+0x5a>
    1958:	4819      	ldr	r0, [pc, #100]	; (19c0 <set_arm_clock+0x2b4>)
    195a:	f8df 8070 	ldr.w	r8, [pc, #112]	; 19cc <set_arm_clock+0x2c0>
    195e:	fb00 f003 	mul.w	r0, r0, r3
    1962:	ea43 0808 	orr.w	r8, r3, r8
    1966:	e76c      	b.n	1842 <set_arm_clock+0x136>
    1968:	1f78a400 	.word	0x1f78a400
    196c:	400fc000 	.word	0x400fc000
    1970:	40080000 	.word	0x40080000
    1974:	23c34600 	.word	0x23c34600
    1978:	dc3cba00 	.word	0xdc3cba00
    197c:	004cb223 	.word	0x004cb223
    1980:	51eb851f 	.word	0x51eb851f
    1984:	016e3600 	.word	0x016e3600
    1988:	400d8000 	.word	0x400d8000
    198c:	80003040 	.word	0x80003040
    1990:	269fb1ff 	.word	0x269fb1ff
    1994:	005b8d80 	.word	0x005b8d80
    1998:	165e9f81 	.word	0x165e9f81
    199c:	269fb200 	.word	0x269fb200
    19a0:	8001307f 	.word	0x8001307f
    19a4:	08f0d17f 	.word	0x08f0d17f
    19a8:	00e5109f 	.word	0x00e5109f
    19ac:	431bde83 	.word	0x431bde83
    19b0:	200123c4 	.word	0x200123c4
    19b4:	200123c0 	.word	0x200123c0
    19b8:	20014be8 	.word	0x20014be8
    19bc:	4d3f6400 	.word	0x4d3f6400
    19c0:	00b71b00 	.word	0x00b71b00
    19c4:	80002036 	.word	0x80002036
    19c8:	8000206c 	.word	0x8000206c
    19cc:	80002000 	.word	0x80002000

000019d0 <delay>:

void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    19d0:	2800      	cmp	r0, #0
    19d2:	d057      	beq.n	1a84 <delay+0xb4>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    19d4:	2201      	movs	r2, #1
{

}*/

void delay(uint32_t msec)
{
    19d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    19da:	b085      	sub	sp, #20
    19dc:	4683      	mov	fp, r0
    19de:	4c2a      	ldr	r4, [pc, #168]	; (1a88 <delay+0xb8>)
    19e0:	4d2a      	ldr	r5, [pc, #168]	; (1a8c <delay+0xbc>)
    19e2:	4e2b      	ldr	r6, [pc, #172]	; (1a90 <delay+0xc0>)
    19e4:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    19e8:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    19ec:	6828      	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    19ee:	6833      	ldr	r3, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    19f0:	e844 2100 	strex	r1, r2, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    19f4:	2900      	cmp	r1, #0
    19f6:	d1f7      	bne.n	19e8 <delay+0x18>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    19f8:	4f26      	ldr	r7, [pc, #152]	; (1a94 <delay+0xc4>)
    19fa:	e9cd 8902 	strd	r8, r9, [sp, #8]
    19fe:	683a      	ldr	r2, [r7, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    1a00:	1ad3      	subs	r3, r2, r3
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1a02:	4a25      	ldr	r2, [pc, #148]	; (1a98 <delay+0xc8>)
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    1a04:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    1a08:	9701      	str	r7, [sp, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1a0a:	6812      	ldr	r2, [r2, #0]
    1a0c:	2701      	movs	r7, #1
    1a0e:	fba3 2302 	umull	r2, r3, r3, r2
	if (frac > 1000) frac = 1000;
    1a12:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1a16:	4698      	mov	r8, r3
	if (frac > 1000) frac = 1000;
    1a18:	2300      	movs	r3, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1a1a:	428b      	cmp	r3, r1
    1a1c:	bf08      	it	eq
    1a1e:	4542      	cmpeq	r2, r8
    1a20:	bf2c      	ite	cs
    1a22:	46c2      	movcs	sl, r8
    1a24:	46f2      	movcc	sl, lr
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    1a26:	fb0e aa00 	mla	sl, lr, r0, sl
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    1a2a:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    1a2e:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    1a30:	6831      	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    1a32:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    1a36:	2b00      	cmp	r3, #0
    1a38:	d1f7      	bne.n	1a2a <delay+0x5a>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    1a3a:	9801      	ldr	r0, [sp, #4]
    1a3c:	6800      	ldr	r0, [r0, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    1a3e:	1a41      	subs	r1, r0, r1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1a40:	4815      	ldr	r0, [pc, #84]	; (1a98 <delay+0xc8>)
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    1a42:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1a46:	6800      	ldr	r0, [r0, #0]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    1a48:	fb0e f202 	mul.w	r2, lr, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1a4c:	fba1 0100 	umull	r0, r1, r1, r0
	if (frac > 1000) frac = 1000;
    1a50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    1a54:	ebca 0202 	rsb	r2, sl, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1a58:	4688      	mov	r8, r1
	if (frac > 1000) frac = 1000;
    1a5a:	2100      	movs	r1, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1a5c:	4299      	cmp	r1, r3
    1a5e:	bf08      	it	eq
    1a60:	4540      	cmpeq	r0, r8
    1a62:	bf2c      	ite	cs
    1a64:	4643      	movcs	r3, r8
    1a66:	4673      	movcc	r3, lr
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    1a68:	441a      	add	r2, r3
    1a6a:	4572      	cmp	r2, lr
    1a6c:	d307      	bcc.n	1a7e <delay+0xae>
			if (--msec == 0) return;
    1a6e:	f1bb 0b01 	subs.w	fp, fp, #1
			start += 1000;
    1a72:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
    1a76:	d1d8      	bne.n	1a2a <delay+0x5a>
			start += 1000;
		}
		yield();
	}
	// TODO...
}
    1a78:	b005      	add	sp, #20
    1a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
			start += 1000;
		}
		yield();
    1a7e:	f001 fa0b 	bl	2e98 <yield>
	}
    1a82:	e7d2      	b.n	1a2a <delay+0x5a>
    1a84:	4770      	bx	lr
    1a86:	bf00      	nop
    1a88:	20014e54 	.word	0x20014e54
    1a8c:	20014bec 	.word	0x20014bec
    1a90:	20014be4 	.word	0x20014be4
    1a94:	e0001004 	.word	0xe0001004
    1a98:	20014be8 	.word	0x20014be8

00001a9c <micros>:
	// TODO...
}

uint32_t micros(void)
{
    1a9c:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
    1aa0:	4a12      	ldr	r2, [pc, #72]	; (1aec <micros+0x50>)
    1aa2:	2601      	movs	r6, #1
    1aa4:	4d12      	ldr	r5, [pc, #72]	; (1af0 <micros+0x54>)
    1aa6:	4c13      	ldr	r4, [pc, #76]	; (1af4 <micros+0x58>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    1aa8:	e852 3f00 	ldrex	r3, [r2]
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    1aac:	6829      	ldr	r1, [r5, #0]
		scc = systick_cycle_count;
    1aae:	6820      	ldr	r0, [r4, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    1ab0:	e842 6300 	strex	r3, r6, [r2]
	} while ( __STREXW(1, &systick_safe_read));
    1ab4:	2b00      	cmp	r3, #0
    1ab6:	d1f7      	bne.n	1aa8 <micros+0xc>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    1ab8:	4a0f      	ldr	r2, [pc, #60]	; (1af8 <micros+0x5c>)
    1aba:	6816      	ldr	r6, [r2, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1abc:	4f0f      	ldr	r7, [pc, #60]	; (1afc <micros+0x60>)
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    1abe:	1a32      	subs	r2, r6, r0
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
    1ac0:	f04f 0900 	mov.w	r9, #0
    1ac4:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1ac8:	683e      	ldr	r6, [r7, #0]
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
	return usec;
    1aca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1ace:	4599      	cmp	r9, r3
    1ad0:	fba2 6706 	umull	r6, r7, r2, r6
    1ad4:	bf08      	it	eq
    1ad6:	45b8      	cmpeq	r8, r7
    1ad8:	463c      	mov	r4, r7
    1ada:	bf2c      	ite	cs
    1adc:	463c      	movcs	r4, r7
    1ade:	4604      	movcc	r4, r0
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
	return usec;
}
    1ae0:	fb00 4001 	mla	r0, r0, r1, r4
    1ae4:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
    1ae8:	4770      	bx	lr
    1aea:	bf00      	nop
    1aec:	20014e54 	.word	0x20014e54
    1af0:	20014bec 	.word	0x20014bec
    1af4:	20014be4 	.word	0x20014be4
    1af8:	e0001004 	.word	0xe0001004
    1afc:	20014be8 	.word	0x20014be8

00001b00 <digitalWrite.part.0>:
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    1b00:	0100      	lsls	r0, r0, #4
    1b02:	4b0f      	ldr	r3, [pc, #60]	; (1b40 <digitalWrite.part.0+0x40>)
    1b04:	181a      	adds	r2, r3, r0
	pinmode = *(p->reg + 1);
    1b06:	581b      	ldr	r3, [r3, r0]
	{&CORE_PIN53_PORTREG, &CORE_PIN53_CONFIG, &CORE_PIN53_PADCONFIG, CORE_PIN53_BITMASK},
	{&CORE_PIN54_PORTREG, &CORE_PIN54_CONFIG, &CORE_PIN54_PADCONFIG, CORE_PIN54_BITMASK},
#endif
};

void digitalWrite(uint8_t pin, uint8_t val)
    1b08:	b410      	push	{r4}
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
	mask = p->mask;
    1b0a:	68d0      	ldr	r0, [r2, #12]
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
    1b0c:	685c      	ldr	r4, [r3, #4]
	mask = p->mask;
	if (pinmode & mask) {
    1b0e:	4204      	tst	r4, r0
    1b10:	d005      	beq.n	1b1e <digitalWrite.part.0+0x1e>
		// pin is configured for output mode
		if (val) {
    1b12:	b159      	cbz	r1, 1b2c <digitalWrite.part.0+0x2c>
			*(p->reg + 0x21) = mask; // set register
    1b14:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    1b18:	f85d 4b04 	ldr.w	r4, [sp], #4
    1b1c:	4770      	bx	lr
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    1b1e:	6893      	ldr	r3, [r2, #8]
			*(p->reg + 0x22) = mask; // clear register
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
    1b20:	b949      	cbnz	r1, 1b36 <digitalWrite.part.0+0x36>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    1b22:	4a08      	ldr	r2, [pc, #32]	; (1b44 <digitalWrite.part.0+0x44>)
		}
	}
}
    1b24:	f85d 4b04 	ldr.w	r4, [sp], #4
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    1b28:	601a      	str	r2, [r3, #0]
		}
	}
}
    1b2a:	4770      	bx	lr
	if (pinmode & mask) {
		// pin is configured for output mode
		if (val) {
			*(p->reg + 0x21) = mask; // set register
		} else {
			*(p->reg + 0x22) = mask; // clear register
    1b2c:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    1b30:	f85d 4b04 	ldr.w	r4, [sp], #4
    1b34:	4770      	bx	lr
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    1b36:	4a04      	ldr	r2, [pc, #16]	; (1b48 <digitalWrite.part.0+0x48>)
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    1b38:	f85d 4b04 	ldr.w	r4, [sp], #4
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    1b3c:	601a      	str	r2, [r3, #0]
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    1b3e:	4770      	bx	lr
    1b40:	2000013c 	.word	0x2000013c
    1b44:	00013038 	.word	0x00013038
    1b48:	0001f038 	.word	0x0001f038

00001b4c <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    1b4c:	2827      	cmp	r0, #39	; 0x27
    1b4e:	d801      	bhi.n	1b54 <digitalWrite+0x8>
    1b50:	f7ff bfd6 	b.w	1b00 <digitalWrite.part.0>
    1b54:	4770      	bx	lr
    1b56:	bf00      	nop

00001b58 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    1b58:	2827      	cmp	r0, #39	; 0x27
    1b5a:	d81c      	bhi.n	1b96 <pinMode+0x3e>
	p = digital_pin_to_info_PGM + pin;
    1b5c:	0100      	lsls	r0, r0, #4
    1b5e:	4a1a      	ldr	r2, [pc, #104]	; (1bc8 <pinMode+0x70>)
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    1b60:	2901      	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    1b62:	eb02 0300 	add.w	r3, r2, r0
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    1b66:	5810      	ldr	r0, [r2, r0]
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}

void pinMode(uint8_t pin, uint8_t mode)
{
    1b68:	b410      	push	{r4}
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    1b6a:	d015      	beq.n	1b98 <pinMode+0x40>
    1b6c:	2904      	cmp	r1, #4
    1b6e:	d013      	beq.n	1b98 <pinMode+0x40>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    1b70:	68dc      	ldr	r4, [r3, #12]
    1b72:	6842      	ldr	r2, [r0, #4]
    1b74:	ea22 0204 	bic.w	r2, r2, r4
    1b78:	6042      	str	r2, [r0, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    1b7a:	689a      	ldr	r2, [r3, #8]
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
    1b7c:	b1e9      	cbz	r1, 1bba <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
    1b7e:	2902      	cmp	r1, #2
    1b80:	d01e      	beq.n	1bc0 <pinMode+0x68>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    1b82:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    1b84:	685b      	ldr	r3, [r3, #4]
}
    1b86:	f85d 4b04 	ldr.w	r4, [sp], #4
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    1b8a:	bf0c      	ite	eq
    1b8c:	490f      	ldreq	r1, [pc, #60]	; (1bcc <pinMode+0x74>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    1b8e:	4910      	ldrne	r1, [pc, #64]	; (1bd0 <pinMode+0x78>)
    1b90:	6011      	str	r1, [r2, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    1b92:	2215      	movs	r2, #21
    1b94:	601a      	str	r2, [r3, #0]
}
    1b96:	4770      	bx	lr
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    1b98:	68da      	ldr	r2, [r3, #12]
		if (mode == OUTPUT) {
    1b9a:	2901      	cmp	r1, #1
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    1b9c:	6844      	ldr	r4, [r0, #4]
    1b9e:	ea42 0204 	orr.w	r2, r2, r4
    1ba2:	6042      	str	r2, [r0, #4]
		if (mode == OUTPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    1ba4:	689a      	ldr	r2, [r3, #8]

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
		if (mode == OUTPUT) {
    1ba6:	d008      	beq.n	1bba <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    1ba8:	f640 0138 	movw	r1, #2104	; 0x838
    1bac:	6011      	str	r1, [r2, #0]
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    1bae:	685b      	ldr	r3, [r3, #4]
    1bb0:	2215      	movs	r2, #21
}
    1bb2:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    1bb6:	601a      	str	r2, [r3, #0]
}
    1bb8:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    1bba:	2138      	movs	r1, #56	; 0x38
    1bbc:	6011      	str	r1, [r2, #0]
    1bbe:	e7f6      	b.n	1bae <pinMode+0x56>
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    1bc0:	4904      	ldr	r1, [pc, #16]	; (1bd4 <pinMode+0x7c>)
    1bc2:	6011      	str	r1, [r2, #0]
    1bc4:	e7f3      	b.n	1bae <pinMode+0x56>
    1bc6:	bf00      	nop
    1bc8:	2000013c 	.word	0x2000013c
    1bcc:	00013038 	.word	0x00013038
    1bd0:	00010038 	.word	0x00010038
    1bd4:	0001f038 	.word	0x0001f038

00001bd8 <unused_interrupt_vector>:
//  R0
// Code from :: https://community.nxp.com/thread/389002
__attribute__((naked))
void unused_interrupt_vector(void)
{
  __asm( ".syntax unified\n"
    1bd8:	2004      	movs	r0, #4
    1bda:	4671      	mov	r1, lr
    1bdc:	4208      	tst	r0, r1
    1bde:	d003      	beq.n	1be8 <_MSP>
    1be0:	f3ef 8009 	mrs	r0, PSP
    1be4:	f000 b808 	b.w	1bf8 <HardFault_HandlerC>

00001be8 <_MSP>:
    1be8:	f3ef 8008 	mrs	r0, MSP
    1bec:	f000 b804 	b.w	1bf8 <HardFault_HandlerC>

00001bf0 <startup_default_early_hook>:
         "B HardFault_HandlerC \n"
         "_MSP: \n"
         "MRS R0, MSP \n"
         "B HardFault_HandlerC \n"
         ".syntax divided\n") ;
}
    1bf0:	4770      	bx	lr
    1bf2:	bf00      	nop

00001bf4 <startup_default_late_hook>:
uint8_t external_psram_size = 0;

extern int main (void);
void startup_default_early_hook(void) {}
void startup_early_hook(void)		__attribute__ ((weak, alias("startup_default_early_hook")));
void startup_default_late_hook(void) {}
    1bf4:	4770      	bx	lr
    1bf6:	bf00      	nop

00001bf8 <HardFault_HandlerC>:
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    1bf8:	4b1b      	ldr	r3, [pc, #108]	; (1c68 <HardFault_HandlerC+0x70>)
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    1bfa:	2105      	movs	r1, #5
    1bfc:	4a1b      	ldr	r2, [pc, #108]	; (1c6c <HardFault_HandlerC+0x74>)
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    1bfe:	2038      	movs	r0, #56	; 0x38
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    1c00:	b530      	push	{r4, r5, lr}
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    1c02:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
  GPIO2_DR_SET = (1 << 3);
    1c06:	2108      	movs	r1, #8
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    1c08:	f8c2 0338 	str.w	r0, [r2, #824]	; 0x338
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    1c0c:	b083      	sub	sp, #12
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    1c0e:	685a      	ldr	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    1c10:	4c17      	ldr	r4, [pc, #92]	; (1c70 <HardFault_HandlerC+0x78>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    1c12:	430a      	orrs	r2, r1
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    1c14:	4817      	ldr	r0, [pc, #92]	; (1c74 <HardFault_HandlerC+0x7c>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    1c16:	605a      	str	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
    1c18:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    1c1c:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88

  if ( F_CPU_ACTUAL >= 600000000 )
    1c20:	6823      	ldr	r3, [r4, #0]
    1c22:	4283      	cmp	r3, r0
    1c24:	d902      	bls.n	1c2c <HardFault_HandlerC+0x34>
    set_arm_clock(300000000);
    1c26:	4814      	ldr	r0, [pc, #80]	; (1c78 <HardFault_HandlerC+0x80>)
    1c28:	f7ff fd70 	bl	170c <set_arm_clock>

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    1c2c:	4d0e      	ldr	r5, [pc, #56]	; (1c68 <HardFault_HandlerC+0x70>)
    1c2e:	2408      	movs	r4, #8
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    1c30:	2000      	movs	r0, #0
    1c32:	4a12      	ldr	r2, [pc, #72]	; (1c7c <HardFault_HandlerC+0x84>)
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    1c34:	4912      	ldr	r1, [pc, #72]	; (1c80 <HardFault_HandlerC+0x88>)
  if ( F_CPU_ACTUAL >= 600000000 )
    set_arm_clock(300000000);

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    1c36:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    1c3a:	9001      	str	r0, [sp, #4]
    1c3c:	9b01      	ldr	r3, [sp, #4]
    1c3e:	4293      	cmp	r3, r2
    1c40:	d805      	bhi.n	1c4e <HardFault_HandlerC+0x56>
    1c42:	9b01      	ldr	r3, [sp, #4]
    1c44:	3301      	adds	r3, #1
    1c46:	9301      	str	r3, [sp, #4]
    1c48:	9b01      	ldr	r3, [sp, #4]
    1c4a:	4293      	cmp	r3, r2
    1c4c:	d9f9      	bls.n	1c42 <HardFault_HandlerC+0x4a>
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    1c4e:	f8c5 4088 	str.w	r4, [r5, #136]	; 0x88
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    1c52:	9001      	str	r0, [sp, #4]
    1c54:	9b01      	ldr	r3, [sp, #4]
    1c56:	428b      	cmp	r3, r1
    1c58:	d8ed      	bhi.n	1c36 <HardFault_HandlerC+0x3e>
    1c5a:	9b01      	ldr	r3, [sp, #4]
    1c5c:	3301      	adds	r3, #1
    1c5e:	9301      	str	r3, [sp, #4]
    1c60:	9b01      	ldr	r3, [sp, #4]
    1c62:	428b      	cmp	r3, r1
    1c64:	d9f9      	bls.n	1c5a <HardFault_HandlerC+0x62>
    1c66:	e7e6      	b.n	1c36 <HardFault_HandlerC+0x3e>
    1c68:	401bc000 	.word	0x401bc000
    1c6c:	401f8000 	.word	0x401f8000
    1c70:	200123c4 	.word	0x200123c4
    1c74:	23c345ff 	.word	0x23c345ff
    1c78:	11e1a300 	.word	0x11e1a300
    1c7c:	000f423f 	.word	0x000f423f
    1c80:	0089543f 	.word	0x0089543f

00001c84 <Panic_Temp_isr>:

static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
    1c84:	b672      	cpsid	i
  IOMUXC_GPR_GPR16 = 0x00000007;
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
    1c86:	4a06      	ldr	r2, [pc, #24]	; (1ca0 <Panic_Temp_isr+0x1c>)
static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
  IOMUXC_GPR_GPR16 = 0x00000007;
    1c88:	2107      	movs	r1, #7
    1c8a:	4b06      	ldr	r3, [pc, #24]	; (1ca4 <Panic_Temp_isr+0x20>)
    1c8c:	6419      	str	r1, [r3, #64]	; 0x40
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
    1c8e:	6b93      	ldr	r3, [r2, #56]	; 0x38
    1c90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1c94:	6393      	str	r3, [r2, #56]	; 0x38
  asm volatile ("dsb":::"memory");
    1c96:	f3bf 8f4f 	dsb	sy
  while (1) asm ("wfi");
    1c9a:	bf30      	wfi
    1c9c:	e7fd      	b.n	1c9a <Panic_Temp_isr+0x16>
    1c9e:	bf00      	nop
    1ca0:	400d4000 	.word	0x400d4000
    1ca4:	400ac000 	.word	0x400ac000

00001ca8 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    1ca8:	6b83      	ldr	r3, [r0, #56]	; 0x38
	}
}
#endif

static void schedule_transfer(endpoint_t *endpoint, uint32_t epmask, transfer_t *transfer)
{
    1caa:	b4f0      	push	{r4, r5, r6, r7}
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    1cac:	b11b      	cbz	r3, 1cb6 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    1cae:	6853      	ldr	r3, [r2, #4]
    1cb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    1cb4:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    1cb6:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    1cb8:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    1cba:	b1dc      	cbz	r4, 1cf4 <schedule_transfer+0x4c>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    1cbc:	4b14      	ldr	r3, [pc, #80]	; (1d10 <schedule_transfer+0x68>)
	__disable_irq();
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
    1cbe:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    1cc0:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    1cc4:	420c      	tst	r4, r1
    1cc6:	d11f      	bne.n	1d08 <schedule_transfer+0x60>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    1cc8:	4d12      	ldr	r5, [pc, #72]	; (1d14 <schedule_transfer+0x6c>)
    1cca:	682f      	ldr	r7, [r5, #0]
    1ccc:	e004      	b.n	1cd8 <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    1cce:	682c      	ldr	r4, [r5, #0]
    1cd0:	1be4      	subs	r4, r4, r7
    1cd2:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
    1cd6:	d20b      	bcs.n	1cf0 <schedule_transfer+0x48>
		if (USB1_ENDPTPRIME & epmask) goto end;
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    1cd8:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    1cdc:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    1ce0:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    1ce4:	f8d3 61b8 	ldr.w	r6, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    1ce8:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    1cec:	0464      	lsls	r4, r4, #17
    1cee:	d5ee      	bpl.n	1cce <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    1cf0:	4231      	tst	r1, r6
    1cf2:	d109      	bne.n	1d08 <schedule_transfer+0x60>
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
    1cf4:	2300      	movs	r3, #0
	USB1_ENDPTPRIME |= epmask;
    1cf6:	4c06      	ldr	r4, [pc, #24]	; (1d10 <schedule_transfer+0x68>)
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
    1cf8:	6082      	str	r2, [r0, #8]
	endpoint->status = 0;
    1cfa:	60c3      	str	r3, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
    1cfc:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1d00:	4319      	orrs	r1, r3
    1d02:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    1d06:	6302      	str	r2, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
    1d08:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    1d0a:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    1d0c:	bcf0      	pop	{r4, r5, r6, r7}
    1d0e:	4770      	bx	lr
    1d10:	402e0000 	.word	0x402e0000
    1d14:	e0001004 	.word	0xe0001004

00001d18 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    1d18:	b570      	push	{r4, r5, r6, lr}
    1d1a:	4606      	mov	r6, r0
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    1d1c:	6b00      	ldr	r0, [r0, #48]	; 0x30
	if (first == NULL) return;
    1d1e:	b190      	cbz	r0, 1d46 <run_callbacks+0x2e>
    1d20:	4602      	mov	r2, r0
    1d22:	2400      	movs	r4, #0
    1d24:	e003      	b.n	1d2e <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    1d26:	6812      	ldr	r2, [r2, #0]
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
    1d28:	3401      	adds	r4, #1
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
    1d2a:	2a01      	cmp	r2, #1
    1d2c:	d00c      	beq.n	1d48 <run_callbacks+0x30>

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
	transfer_t *t = first;
	while (1) {
		if (t->status & (1<<7)) {
    1d2e:	6853      	ldr	r3, [r2, #4]
    1d30:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    1d34:	d0f7      	beq.n	1d26 <run_callbacks+0xe>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
    1d36:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    1d38:	b12c      	cbz	r4, 1d46 <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
    1d3a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
			break;
		}
	}
	// do all the callbacks
	while (count) {
		transfer_t *next = (transfer_t *)first->next;
    1d3c:	6805      	ldr	r5, [r0, #0]
		ep->callback_function(first);
    1d3e:	4798      	blx	r3
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    1d40:	3c01      	subs	r4, #1
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
		first = next;
    1d42:	4628      	mov	r0, r5
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    1d44:	d1f9      	bne.n	1d3a <run_callbacks+0x22>
    1d46:	bd70      	pop	{r4, r5, r6, pc}
		count++;
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
			// reached end of list, all need callbacks, new list is empty
			//printf(" end of list\n");
			ep->first_transfer = NULL;
    1d48:	6333      	str	r3, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
    1d4a:	6373      	str	r3, [r6, #52]	; 0x34
			break;
    1d4c:	e7f4      	b.n	1d38 <run_callbacks+0x20>
    1d4e:	bf00      	nop

00001d50 <endpoint0_transmit.constprop.1>:
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
}

static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    1d50:	b5f0      	push	{r4, r5, r6, r7, lr}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
    1d52:	b9e1      	cbnz	r1, 1d8e <endpoint0_transmit.constprop.1+0x3e>
    1d54:	4c21      	ldr	r4, [pc, #132]	; (1ddc <endpoint0_transmit.constprop.1+0x8c>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1d56:	4922      	ldr	r1, [pc, #136]	; (1de0 <endpoint0_transmit.constprop.1+0x90>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1d58:	2000      	movs	r0, #0
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1d5a:	4b22      	ldr	r3, [pc, #136]	; (1de4 <endpoint0_transmit.constprop.1+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1d5c:	2201      	movs	r2, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1d5e:	f04f 1501 	mov.w	r5, #65537	; 0x10001
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1d62:	2680      	movs	r6, #128	; 0x80
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1d64:	600a      	str	r2, [r1, #0]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
    1d66:	461a      	mov	r2, r3
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    1d68:	60a1      	str	r1, [r4, #8]
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1d6a:	604e      	str	r6, [r1, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
    1d6c:	60e0      	str	r0, [r4, #12]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1d6e:	f8c3 51bc 	str.w	r5, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    1d72:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    1d76:	4d1c      	ldr	r5, [pc, #112]	; (1de8 <endpoint0_transmit.constprop.1+0x98>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    1d78:	f044 0401 	orr.w	r4, r4, #1
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1d7c:	6088      	str	r0, [r1, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    1d7e:	f8c3 41b0 	str.w	r4, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    1d82:	6028      	str	r0, [r5, #0]
	while (USB1_ENDPTPRIME) ;
    1d84:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    1d88:	2b00      	cmp	r3, #0
    1d8a:	d1fb      	bne.n	1d84 <endpoint0_transmit.constprop.1+0x34>
}
    1d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    1d8e:	0409      	lsls	r1, r1, #16
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    1d90:	4b16      	ldr	r3, [pc, #88]	; (1dec <endpoint0_transmit.constprop.1+0x9c>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    1d92:	4d14      	ldr	r5, [pc, #80]	; (1de4 <endpoint0_transmit.constprop.1+0x94>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    1d94:	2601      	movs	r6, #1
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    1d96:	4c11      	ldr	r4, [pc, #68]	; (1ddc <endpoint0_transmit.constprop.1+0x8c>)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    1d98:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    1d9c:	2200      	movs	r2, #0
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    1d9e:	601e      	str	r6, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    1da0:	6059      	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    1da2:	f500 5c80 	add.w	ip, r0, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    1da6:	64e2      	str	r2, [r4, #76]	; 0x4c
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    1da8:	f500 5e00 	add.w	lr, r0, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    1dac:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    1dae:	f500 5740 	add.w	r7, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    1db2:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    1db6:	f500 4680 	add.w	r6, r0, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
    1dba:	462a      	mov	r2, r5
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    1dbc:	6098      	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    1dbe:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    1dc2:	f8c3 c00c 	str.w	ip, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    1dc6:	f8c3 e010 	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    1dca:	615f      	str	r7, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    1dcc:	619e      	str	r6, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    1dce:	f8c5 11b0 	str.w	r1, [r5, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    1dd2:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    1dd6:	2b00      	cmp	r3, #0
    1dd8:	d1fb      	bne.n	1dd2 <endpoint0_transmit.constprop.1+0x82>
    1dda:	e7bc      	b.n	1d56 <endpoint0_transmit.constprop.1+0x6>
    1ddc:	20017000 	.word	0x20017000
    1de0:	20016020 	.word	0x20016020
    1de4:	402e0000 	.word	0x402e0000
    1de8:	20014c14 	.word	0x20014c14
    1dec:	20016000 	.word	0x20016000

00001df0 <isr>:
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}


static void isr(void)
{
    1df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    1df4:	4cac      	ldr	r4, [pc, #688]	; (20a8 <isr+0x2b8>)
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}


static void isr(void)
{
    1df6:	b083      	sub	sp, #12
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    1df8:	f8d4 8144 	ldr.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    1dfc:	f018 0f01 	tst.w	r8, #1
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
	USB1_USBSTS = status;
    1e00:	f8c4 8144 	str.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    1e04:	d05e      	beq.n	1ec4 <isr+0xd4>
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    1e06:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1e0a:	2b00      	cmp	r3, #0
    1e0c:	d055      	beq.n	1eba <isr+0xca>
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    1e0e:	f04f 1b01 	mov.w	fp, #65537	; 0x10001
    1e12:	f8df 92bc 	ldr.w	r9, [pc, #700]	; 20d0 <isr+0x2e0>
    1e16:	4ea5      	ldr	r6, [pc, #660]	; (20ac <isr+0x2bc>)
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    1e18:	4625      	mov	r5, r4
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    1e1a:	46da      	mov	sl, fp
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
    1e1c:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
    1e20:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    1e22:	6af2      	ldr	r2, [r6, #44]	; 0x2c
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    1e24:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    1e28:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1e2c:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    1e30:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    1e34:	049f      	lsls	r7, r3, #18
    1e36:	d5f5      	bpl.n	1e24 <isr+0x34>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    1e38:	f8d5 3140 	ldr.w	r3, [r5, #320]	; 0x140
    1e3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    1e40:	f8c5 3140 	str.w	r3, [r5, #320]	; 0x140
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    1e44:	f8c5 a1b4 	str.w	sl, [r5, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    1e48:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    1e4c:	f013 1301 	ands.w	r3, r3, #65537	; 0x10001
    1e50:	d1fa      	bne.n	1e48 <isr+0x58>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    1e52:	b281      	uxth	r1, r0
    1e54:	f240 6781 	movw	r7, #1665	; 0x681
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
    1e58:	f8c9 3000 	str.w	r3, [r9]
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    1e5c:	42b9      	cmp	r1, r7
    1e5e:	f200 80b4 	bhi.w	1fca <isr+0x1da>
    1e62:	f5b1 6fd0 	cmp.w	r1, #1664	; 0x680
    1e66:	f080 81e9 	bcs.w	223c <isr+0x44c>
    1e6a:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
    1e6e:	f000 816b 	beq.w	2148 <isr+0x358>
    1e72:	f200 80f0 	bhi.w	2056 <isr+0x266>
    1e76:	2980      	cmp	r1, #128	; 0x80
    1e78:	f000 8159 	beq.w	212e <isr+0x33e>
    1e7c:	2982      	cmp	r1, #130	; 0x82
    1e7e:	f040 80e2 	bne.w	2046 <isr+0x256>
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
    1e82:	b292      	uxth	r2, r2
    1e84:	f002 017f 	and.w	r1, r2, #127	; 0x7f
		if (endpoint > 7) break;
    1e88:	2907      	cmp	r1, #7
    1e8a:	f200 80dc 	bhi.w	2046 <isr+0x256>
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    1e8e:	0089      	lsls	r1, r1, #2
    1e90:	4887      	ldr	r0, [pc, #540]	; (20b0 <isr+0x2c0>)
		reply_buffer[0] = 0;
    1e92:	4f88      	ldr	r7, [pc, #544]	; (20b4 <isr+0x2c4>)
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    1e94:	4408      	add	r0, r1
    1e96:	6801      	ldr	r1, [r0, #0]
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    1e98:	0610      	lsls	r0, r2, #24
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
    1e9a:	703b      	strb	r3, [r7, #0]
		reply_buffer[1] = 0;
    1e9c:	707b      	strb	r3, [r7, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    1e9e:	f140 820c 	bpl.w	22ba <isr+0x4ca>
    1ea2:	03ca      	lsls	r2, r1, #15
    1ea4:	d501      	bpl.n	1eaa <isr+0xba>
			reply_buffer[0] = 1;
    1ea6:	2301      	movs	r3, #1
    1ea8:	703b      	strb	r3, [r7, #0]
		}
		endpoint0_transmit(reply_buffer, 2, 0);
    1eaa:	2102      	movs	r1, #2
    1eac:	4881      	ldr	r0, [pc, #516]	; (20b4 <isr+0x2c4>)
    1eae:	f7ff ff4f 	bl	1d50 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1eb2:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1eb6:	2b00      	cmp	r3, #0
    1eb8:	d1b0      	bne.n	1e1c <isr+0x2c>
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    1eba:	4a7b      	ldr	r2, [pc, #492]	; (20a8 <isr+0x2b8>)
    1ebc:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    1ec0:	2b00      	cmp	r3, #0
    1ec2:	d150      	bne.n	1f66 <isr+0x176>
			}
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
    1ec4:	f018 0f40 	tst.w	r8, #64	; 0x40
    1ec8:	d018      	beq.n	1efc <isr+0x10c>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    1eca:	4b77      	ldr	r3, [pc, #476]	; (20a8 <isr+0x2b8>)
    1ecc:	f8d3 11ac 	ldr.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    1ed0:	461a      	mov	r2, r3
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    1ed2:	f8c3 11ac 	str.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    1ed6:	f8d3 11bc 	ldr.w	r1, [r3, #444]	; 0x1bc
    1eda:	f8c3 11bc 	str.w	r1, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    1ede:	f8d2 41b0 	ldr.w	r4, [r2, #432]	; 0x1b0
    1ee2:	4b71      	ldr	r3, [pc, #452]	; (20a8 <isr+0x2b8>)
    1ee4:	2c00      	cmp	r4, #0
    1ee6:	d1fa      	bne.n	1ede <isr+0xee>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    1ee8:	f04f 32ff 	mov.w	r2, #4294967295
    1eec:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    1ef0:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
			// we took too long to respond :(
			// TODO; is this ever really a problem?
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
    1ef4:	f000 fd1e 	bl	2934 <usb_serial_reset>
		#endif
		endpointN_notify_mask = 0;
    1ef8:	4b6f      	ldr	r3, [pc, #444]	; (20b8 <isr+0x2c8>)
    1efa:	601c      	str	r4, [r3, #0]
			// shut off USB - easier to see results in protocol analyzer
			//USB1_USBCMD &= ~USB_USBCMD_RS;
			//printf("shut off USB\n");
		//}
	}
	if (status & USB_USBSTS_TI0) {
    1efc:	f018 7f80 	tst.w	r8, #16777216	; 0x1000000
    1f00:	d003      	beq.n	1f0a <isr+0x11a>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    1f02:	4b6e      	ldr	r3, [pc, #440]	; (20bc <isr+0x2cc>)
    1f04:	681b      	ldr	r3, [r3, #0]
    1f06:	b103      	cbz	r3, 1f0a <isr+0x11a>
    1f08:	4798      	blx	r3
	}
	if (status & USB_USBSTS_TI1) {
    1f0a:	f018 7f00 	tst.w	r8, #33554432	; 0x2000000
    1f0e:	d003      	beq.n	1f18 <isr+0x128>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    1f10:	4b6b      	ldr	r3, [pc, #428]	; (20c0 <isr+0x2d0>)
    1f12:	681b      	ldr	r3, [r3, #0]
    1f14:	b103      	cbz	r3, 1f18 <isr+0x128>
    1f16:	4798      	blx	r3
	}
	if (status & USB_USBSTS_PCI) {
    1f18:	f018 0f04 	tst.w	r8, #4
    1f1c:	d008      	beq.n	1f30 <isr+0x140>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    1f1e:	4b62      	ldr	r3, [pc, #392]	; (20a8 <isr+0x2b8>)
    1f20:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    1f24:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    1f28:	d04c      	beq.n	1fc4 <isr+0x1d4>
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
    1f2a:	4b66      	ldr	r3, [pc, #408]	; (20c4 <isr+0x2d4>)
    1f2c:	2201      	movs	r2, #1
    1f2e:	701a      	strb	r2, [r3, #0]
		//printf("suspend\n");
	}
	if (status & USB_USBSTS_UEI) {
		//printf("error\n");
	}
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    1f30:	4b5d      	ldr	r3, [pc, #372]	; (20a8 <isr+0x2b8>)
    1f32:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    1f36:	0612      	lsls	r2, r2, #24
    1f38:	d512      	bpl.n	1f60 <isr+0x170>
    1f3a:	f018 0f80 	tst.w	r8, #128	; 0x80
    1f3e:	d00f      	beq.n	1f60 <isr+0x170>
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
    1f40:	4961      	ldr	r1, [pc, #388]	; (20c8 <isr+0x2d8>)
    1f42:	780a      	ldrb	r2, [r1, #0]
    1f44:	b162      	cbz	r2, 1f60 <isr+0x170>
			if (--usb_reboot_timer == 0) {
    1f46:	3a01      	subs	r2, #1
    1f48:	b2d2      	uxtb	r2, r2
    1f4a:	700a      	strb	r2, [r1, #0]
    1f4c:	b942      	cbnz	r2, 1f60 <isr+0x170>
	__enable_irq();
}

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
    1f4e:	495f      	ldr	r1, [pc, #380]	; (20cc <isr+0x2dc>)
    1f50:	780a      	ldrb	r2, [r1, #0]
    1f52:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    1f56:	700a      	strb	r2, [r1, #0]
	if (sof_usage == 0) {
    1f58:	2a00      	cmp	r2, #0
    1f5a:	f000 8232 	beq.w	23c2 <isr+0x5d2>
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
			if (--usb_reboot_timer == 0) {
				usb_stop_sof_interrupts(NUM_INTERFACE);
				asm("bkpt #251"); // run bootloader
    1f5e:	befb      	bkpt	0x00fb
		#endif
		#ifdef FLIGHTSIM_INTERFACE
		usb_flightsim_flush_output();
		#endif
	}
}
    1f60:	b003      	add	sp, #12
    1f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    1f66:	495a      	ldr	r1, [pc, #360]	; (20d0 <isr+0x2e0>)
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
    1f68:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    1f6c:	6808      	ldr	r0, [r1, #0]
    1f6e:	4203      	tst	r3, r0
    1f70:	f040 81e6 	bne.w	2340 <isr+0x550>
				endpoint0_notify_mask = 0;
				endpoint0_complete();
			}
			completestatus &= endpointN_notify_mask;
    1f74:	4a50      	ldr	r2, [pc, #320]	; (20b8 <isr+0x2c8>)
    1f76:	6815      	ldr	r5, [r2, #0]
#if 1
			if (completestatus) {
    1f78:	401d      	ands	r5, r3
    1f7a:	d0a3      	beq.n	1ec4 <isr+0xd4>

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
    1f7c:	0c2f      	lsrs	r7, r5, #16
    1f7e:	d00f      	beq.n	1fa0 <isr+0x1b0>
    1f80:	4e4a      	ldr	r6, [pc, #296]	; (20ac <isr+0x2bc>)
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
    1f82:	f04f 0901 	mov.w	r9, #1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
    1f86:	fa97 f4a7 	rbit	r4, r7
    1f8a:	fab4 f484 	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    1f8e:	eb06 10c4 	add.w	r0, r6, r4, lsl #7
					tx &= ~(1<<p);
    1f92:	fa09 f404 	lsl.w	r4, r9, r4

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    1f96:	3040      	adds	r0, #64	; 0x40
    1f98:	f7ff febe 	bl	1d18 <run_callbacks>
#if 1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
    1f9c:	43a7      	bics	r7, r4
    1f9e:	d1f2      	bne.n	1f86 <isr+0x196>
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
    1fa0:	b2ad      	uxth	r5, r5
				while(rx) {
    1fa2:	2d00      	cmp	r5, #0
    1fa4:	d08e      	beq.n	1ec4 <isr+0xd4>
    1fa6:	4e41      	ldr	r6, [pc, #260]	; (20ac <isr+0x2bc>)
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
					rx &= ~(1<<p);
    1fa8:	2701      	movs	r7, #1
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
    1faa:	fa95 f4a5 	rbit	r4, r5
    1fae:	fab4 f484 	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2);
    1fb2:	eb06 10c4 	add.w	r0, r6, r4, lsl #7
					rx &= ~(1<<p);
    1fb6:	fa07 f404 	lsl.w	r4, r7, r4

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
    1fba:	f7ff fead 	bl	1d18 <run_callbacks>
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
    1fbe:	43a5      	bics	r5, r4
    1fc0:	d1f3      	bne.n	1faa <isr+0x1ba>
    1fc2:	e77f      	b.n	1ec4 <isr+0xd4>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
		} else {
			//printf("port at 12 Mbit\n");
			usb_high_speed = 0;
    1fc4:	4a3f      	ldr	r2, [pc, #252]	; (20c4 <isr+0x2d4>)
    1fc6:	7013      	strb	r3, [r2, #0]
    1fc8:	e7b2      	b.n	1f30 <isr+0x140>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    1fca:	f242 0721 	movw	r7, #8225	; 0x2021
    1fce:	42b9      	cmp	r1, r7
    1fd0:	d035      	beq.n	203e <isr+0x24e>
    1fd2:	f200 8089 	bhi.w	20e8 <isr+0x2f8>
    1fd6:	f5b1 6f08 	cmp.w	r1, #2176	; 0x880
    1fda:	f000 8121 	beq.w	2220 <isr+0x430>
    1fde:	f5b1 6f10 	cmp.w	r1, #2304	; 0x900
    1fe2:	d130      	bne.n	2046 <isr+0x256>
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    1fe4:	f3c0 4007 	ubfx	r0, r0, #16, #8
    1fe8:	4a3a      	ldr	r2, [pc, #232]	; (20d4 <isr+0x2e4>)
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    1fea:	493b      	ldr	r1, [pc, #236]	; (20d8 <isr+0x2e8>)
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    1fec:	7010      	strb	r0, [r2, #0]
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    1fee:	4f3b      	ldr	r7, [pc, #236]	; (20dc <isr+0x2ec>)
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    1ff0:	4a3b      	ldr	r2, [pc, #236]	; (20e0 <isr+0x2f0>)
    1ff2:	9301      	str	r3, [sp, #4]
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    1ff4:	f8c5 71c8 	str.w	r7, [r5, #456]	; 0x1c8
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    1ff8:	f8c5 11cc 	str.w	r1, [r5, #460]	; 0x1cc
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    1ffc:	f8c5 21d0 	str.w	r2, [r5, #464]	; 0x1d0
		#endif
		#if defined(ENDPOINT7_CONFIG)
		USB1_ENDPTCTRL7 = ENDPOINT7_CONFIG;
		#endif
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_configure();
    2000:	f000 fc9a 	bl	2938 <usb_serial_configure>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2004:	4a37      	ldr	r2, [pc, #220]	; (20e4 <isr+0x2f4>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    2006:	9b01      	ldr	r3, [sp, #4]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2008:	2180      	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    200a:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    200c:	64b2      	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    200e:	6051      	str	r1, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2010:	6010      	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    2012:	64f3      	str	r3, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    2014:	f8c5 b1bc 	str.w	fp, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    2018:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    201c:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    201e:	f441 3280 	orr.w	r2, r1, #65536	; 0x10000
    2022:	f8c5 21b0 	str.w	r2, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    2026:	4a2a      	ldr	r2, [pc, #168]	; (20d0 <isr+0x2e0>)
    2028:	6013      	str	r3, [r2, #0]
	while (USB1_ENDPTPRIME) ;
    202a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    202e:	2b00      	cmp	r3, #0
    2030:	d1fb      	bne.n	202a <isr+0x23a>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    2032:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    2036:	2b00      	cmp	r3, #0
    2038:	f47f aef0 	bne.w	1e1c <isr+0x2c>
    203c:	e73d      	b.n	1eba <isr+0xca>
		// fall through to next case, to always send ZLP ACK
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
    203e:	0c11      	lsrs	r1, r2, #16
    2040:	2907      	cmp	r1, #7
    2042:	f000 813e 	beq.w	22c2 <isr+0x4d2>
			return;
		}
		break;
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    2046:	f8c4 b1c0 	str.w	fp, [r4, #448]	; 0x1c0
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    204a:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    204e:	2b00      	cmp	r3, #0
    2050:	f47f aee4 	bne.w	1e1c <isr+0x2c>
    2054:	e731      	b.n	1eba <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    2056:	f240 3702 	movw	r7, #770	; 0x302
    205a:	42b9      	cmp	r1, r7
    205c:	f000 80b0 	beq.w	21c0 <isr+0x3d0>
    2060:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
    2064:	d1ef      	bne.n	2046 <isr+0x256>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2066:	4a1f      	ldr	r2, [pc, #124]	; (20e4 <isr+0x2f4>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2068:	2180      	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    206a:	2701      	movs	r7, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    206c:	64f3      	str	r3, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    206e:	64b2      	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2070:	6017      	str	r7, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2072:	6051      	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    2074:	f8c5 b1bc 	str.w	fp, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    2078:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    207c:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    207e:	f441 3380 	orr.w	r3, r1, #65536	; 0x10000
    2082:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    2086:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    208a:	2b00      	cmp	r3, #0
    208c:	d1fb      	bne.n	2086 <isr+0x296>

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    208e:	0c03      	lsrs	r3, r0, #16
    2090:	065b      	lsls	r3, r3, #25
    2092:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    2096:	f8c5 3154 	str.w	r3, [r5, #340]	; 0x154
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    209a:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    209e:	2b00      	cmp	r3, #0
    20a0:	f47f aebc 	bne.w	1e1c <isr+0x2c>
    20a4:	e709      	b.n	1eba <isr+0xca>
    20a6:	bf00      	nop
    20a8:	402e0000 	.word	0x402e0000
    20ac:	20017000 	.word	0x20017000
    20b0:	402e01c0 	.word	0x402e01c0
    20b4:	20014c28 	.word	0x20014c28
    20b8:	20014c04 	.word	0x20014c04
    20bc:	20014c00 	.word	0x20014c00
    20c0:	20014c0c 	.word	0x20014c0c
    20c4:	20014c10 	.word	0x20014c10
    20c8:	20014c18 	.word	0x20014c18
    20cc:	20014c08 	.word	0x20014c08
    20d0:	20014c14 	.word	0x20014c14
    20d4:	20014c38 	.word	0x20014c38
    20d8:	000200c8 	.word	0x000200c8
    20dc:	00cc0002 	.word	0x00cc0002
    20e0:	00c80002 	.word	0x00c80002
    20e4:	20016020 	.word	0x20016020
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    20e8:	f242 2321 	movw	r3, #8737	; 0x2221
    20ec:	4299      	cmp	r1, r3
    20ee:	d05b      	beq.n	21a8 <isr+0x3b8>
    20f0:	f242 3321 	movw	r3, #8993	; 0x2321
    20f4:	4299      	cmp	r1, r3
    20f6:	d1a6      	bne.n	2046 <isr+0x256>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    20f8:	4bb5      	ldr	r3, [pc, #724]	; (23d0 <isr+0x5e0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    20fa:	2280      	movs	r2, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    20fc:	2100      	movs	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    20fe:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    2100:	64b3      	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2102:	6018      	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2104:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    2106:	64f1      	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    2108:	f8c4 b1bc 	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    210c:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    2110:	6099      	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    2112:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
    2116:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    211a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    211e:	2b00      	cmp	r3, #0
    2120:	d1fb      	bne.n	211a <isr+0x32a>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    2122:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    2126:	2b00      	cmp	r3, #0
    2128:	f47f ae78 	bne.w	1e1c <isr+0x2c>
    212c:	e6c5      	b.n	1eba <isr+0xca>
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    212e:	4aa9      	ldr	r2, [pc, #676]	; (23d4 <isr+0x5e4>)
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
    2130:	2102      	movs	r1, #2
    2132:	4610      	mov	r0, r2
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    2134:	7013      	strb	r3, [r2, #0]
		reply_buffer[1] = 0;
    2136:	7053      	strb	r3, [r2, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    2138:	f7ff fe0a 	bl	1d50 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    213c:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    2140:	2b00      	cmp	r3, #0
    2142:	f47f ae6b 	bne.w	1e1c <isr+0x2c>
    2146:	e6b8      	b.n	1eba <isr+0xca>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    2148:	b292      	uxth	r2, r2
    214a:	f002 037f 	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    214e:	2b07      	cmp	r3, #7
    2150:	f63f af79 	bhi.w	2046 <isr+0x256>
		dir = setup.wIndex & 0x80;
		if (dir) {
    2154:	f012 0f80 	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    2158:	ea4f 0383 	mov.w	r3, r3, lsl #2
    215c:	4a9e      	ldr	r2, [pc, #632]	; (23d8 <isr+0x5e8>)
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    215e:	f04f 0100 	mov.w	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2162:	f04f 0001 	mov.w	r0, #1
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    2166:	441a      	add	r2, r3
    2168:	6813      	ldr	r3, [r2, #0]
    216a:	bf14      	ite	ne
    216c:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    2170:	f023 0301 	biceq.w	r3, r3, #1
    2174:	6013      	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2176:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2178:	4b95      	ldr	r3, [pc, #596]	; (23d0 <isr+0x5e0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    217a:	64f1      	str	r1, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    217c:	64b3      	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    217e:	6018      	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2180:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    2182:	f8c4 b1bc 	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    2186:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    218a:	6099      	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    218c:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
    2190:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    2194:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2198:	2b00      	cmp	r3, #0
    219a:	d1fb      	bne.n	2194 <isr+0x3a4>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    219c:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    21a0:	2b00      	cmp	r3, #0
    21a2:	f47f ae3b 	bne.w	1e1c <isr+0x2c>
    21a6:	e688      	b.n	1eba <isr+0xca>
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    21a8:	b292      	uxth	r2, r2
    21aa:	2a00      	cmp	r2, #0
    21ac:	d1a4      	bne.n	20f8 <isr+0x308>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    21ae:	4b8b      	ldr	r3, [pc, #556]	; (23dc <isr+0x5ec>)
			usb_cdc_line_rtsdtr = setup.wValue;
    21b0:	f3c0 4007 	ubfx	r0, r0, #16, #8
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    21b4:	4a8a      	ldr	r2, [pc, #552]	; (23e0 <isr+0x5f0>)
    21b6:	6819      	ldr	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    21b8:	4b8a      	ldr	r3, [pc, #552]	; (23e4 <isr+0x5f4>)
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    21ba:	6011      	str	r1, [r2, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    21bc:	7018      	strb	r0, [r3, #0]
    21be:	e79b      	b.n	20f8 <isr+0x308>
			reply_buffer[0] = 1;
		}
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    21c0:	b292      	uxth	r2, r2
    21c2:	f002 037f 	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    21c6:	2b07      	cmp	r3, #7
    21c8:	f63f af3d 	bhi.w	2046 <isr+0x256>
		dir = setup.wIndex & 0x80;
		if (dir) {
    21cc:	f012 0f80 	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    21d0:	ea4f 0383 	mov.w	r3, r3, lsl #2
    21d4:	4a80      	ldr	r2, [pc, #512]	; (23d8 <isr+0x5e8>)
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    21d6:	f04f 0100 	mov.w	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    21da:	f04f 0001 	mov.w	r0, #1
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    21de:	441a      	add	r2, r3
    21e0:	6813      	ldr	r3, [r2, #0]
    21e2:	bf14      	ite	ne
    21e4:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    21e8:	f043 0301 	orreq.w	r3, r3, #1
    21ec:	6013      	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    21ee:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    21f0:	4b77      	ldr	r3, [pc, #476]	; (23d0 <isr+0x5e0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    21f2:	64f1      	str	r1, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    21f4:	64b3      	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    21f6:	6018      	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    21f8:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    21fa:	f8c4 b1bc 	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    21fe:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    2202:	6099      	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    2204:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
    2208:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    220c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2210:	2b00      	cmp	r3, #0
    2212:	d1fb      	bne.n	220c <isr+0x41c>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    2214:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    2218:	2b00      	cmp	r3, #0
    221a:	f47f adff 	bne.w	1e1c <isr+0x2c>
    221e:	e64c      	b.n	1eba <isr+0xca>
		usb_audio_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    2220:	4a71      	ldr	r2, [pc, #452]	; (23e8 <isr+0x5f8>)
		endpoint0_transmit(reply_buffer, 1, 0);
    2222:	2101      	movs	r1, #1
		usb_audio_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    2224:	4b6b      	ldr	r3, [pc, #428]	; (23d4 <isr+0x5e4>)
    2226:	7812      	ldrb	r2, [r2, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    2228:	4618      	mov	r0, r3
		usb_audio_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    222a:	701a      	strb	r2, [r3, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    222c:	f7ff fd90 	bl	1d50 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    2230:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    2234:	2b00      	cmp	r3, #0
    2236:	f47f adf1 	bne.w	1e1c <isr+0x2c>
    223a:	e63e      	b.n	1eba <isr+0xca>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    223c:	4b6b      	ldr	r3, [pc, #428]	; (23ec <isr+0x5fc>)
    223e:	6859      	ldr	r1, [r3, #4]
    2240:	2900      	cmp	r1, #0
    2242:	f43f af00 	beq.w	2046 <isr+0x256>
    2246:	0c00      	lsrs	r0, r0, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    2248:	fa1f fe82 	uxth.w	lr, r2
    224c:	e004      	b.n	2258 <isr+0x468>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    224e:	330c      	adds	r3, #12
    2250:	6859      	ldr	r1, [r3, #4]
    2252:	2900      	cmp	r1, #0
    2254:	f43f aef7 	beq.w	2046 <isr+0x256>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    2258:	881f      	ldrh	r7, [r3, #0]
    225a:	4287      	cmp	r7, r0
    225c:	d1f7      	bne.n	224e <isr+0x45e>
    225e:	885f      	ldrh	r7, [r3, #2]
    2260:	4577      	cmp	r7, lr
    2262:	d1f4      	bne.n	224e <isr+0x45e>
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
    2264:	0a07      	lsrs	r7, r0, #8
    2266:	2f03      	cmp	r7, #3
    2268:	f000 80e9 	beq.w	243e <isr+0x64e>
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
    226c:	891b      	ldrh	r3, [r3, #8]
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    226e:	0c12      	lsrs	r2, r2, #16
    2270:	4293      	cmp	r3, r2
    2272:	bf28      	it	cs
    2274:	4613      	movcs	r3, r2

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
    2276:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    227a:	f000 80d1 	beq.w	2420 <isr+0x630>
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
    227e:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
    2282:	f000 808b 	beq.w	239c <isr+0x5ac>
    2286:	4f5a      	ldr	r7, [pc, #360]	; (23f0 <isr+0x600>)
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
					usb_descriptor_buffer[1] = 7;
				} else {
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    2288:	461a      	mov	r2, r3
    228a:	9301      	str	r3, [sp, #4]
    228c:	4638      	mov	r0, r7
    228e:	f000 fe7b 	bl	2f88 <memcpy>
    2292:	9b01      	ldr	r3, [sp, #4]
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    2294:	f027 021f 	bic.w	r2, r7, #31
	uint32_t end_addr = (uint32_t)addr + size;
    2298:	441f      	add	r7, r3
	asm volatile("": : :"memory");
	asm("dsb");
    229a:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    229e:	4955      	ldr	r1, [pc, #340]	; (23f4 <isr+0x604>)
    22a0:	600a      	str	r2, [r1, #0]
		location += 32;
    22a2:	3220      	adds	r2, #32
	} while (location < end_addr);
    22a4:	4297      	cmp	r7, r2
    22a6:	d8fa      	bhi.n	229e <isr+0x4ae>
	asm("dsb");
    22a8:	f3bf 8f4f 	dsb	sy
	asm("isb");
    22ac:	f3bf 8f6f 	isb	sy
				}
				// prep transmit
				arm_dcache_flush_delete(usb_descriptor_buffer, datalen);
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    22b0:	484f      	ldr	r0, [pc, #316]	; (23f0 <isr+0x600>)
    22b2:	4619      	mov	r1, r3
    22b4:	f7ff fd4c 	bl	1d50 <endpoint0_transmit.constprop.1>
    22b8:	e5fb      	b.n	1eb2 <isr+0xc2>
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    22ba:	07cb      	lsls	r3, r1, #31
    22bc:	f57f adf5 	bpl.w	1eaa <isr+0xba>
    22c0:	e5f1      	b.n	1ea6 <isr+0xb6>
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    22c2:	4f4d      	ldr	r7, [pc, #308]	; (23f8 <isr+0x608>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    22c4:	f04f 0e01 	mov.w	lr, #1
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
    22c8:	60f3      	str	r3, [r6, #12]
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    22ca:	494c      	ldr	r1, [pc, #304]	; (23fc <isr+0x60c>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    22cc:	4b4c      	ldr	r3, [pc, #304]	; (2400 <isr+0x610>)
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    22ce:	6038      	str	r0, [r7, #0]
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    22d0:	f8c3 e000 	str.w	lr, [r3]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    22d4:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    22d6:	60b3      	str	r3, [r6, #8]
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
    22d8:	494a      	ldr	r1, [pc, #296]	; (2404 <isr+0x614>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    22da:	f8d5 01b0 	ldr.w	r0, [r5, #432]	; 0x1b0
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    22de:	607a      	str	r2, [r7, #4]
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    22e0:	f501 5780 	add.w	r7, r1, #4096	; 0x1000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    22e4:	ea40 020e 	orr.w	r2, r0, lr
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    22e8:	6099      	str	r1, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    22ea:	f501 5e00 	add.w	lr, r1, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    22ee:	f501 5040 	add.w	r0, r1, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    22f2:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    22f6:	f8c5 21b0 	str.w	r2, [r5, #432]	; 0x1b0
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    22fa:	60df      	str	r7, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    22fc:	f8c3 e010 	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    2300:	6158      	str	r0, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    2302:	6199      	str	r1, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
    2304:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2308:	2b00      	cmp	r3, #0
    230a:	d1fb      	bne.n	2304 <isr+0x514>
	}
	endpoint0_transfer_ack.next = 1;
    230c:	4a30      	ldr	r2, [pc, #192]	; (23d0 <isr+0x5e0>)
    230e:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2310:	f248 0180 	movw	r1, #32896	; 0x8080
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    2314:	64f3      	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2316:	6010      	str	r0, [r2, #0]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    2318:	f44f 3080 	mov.w	r0, #65536	; 0x10000
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    231c:	64b2      	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    231e:	6051      	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    2320:	f8c5 b1bc 	str.w	fp, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    2324:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    2328:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    232a:	ea41 0300 	orr.w	r3, r1, r0
    232e:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    2332:	f8c9 0000 	str.w	r0, [r9]
	while (USB1_ENDPTPRIME) ;
    2336:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    233a:	2b00      	cmp	r3, #0
    233c:	d1fb      	bne.n	2336 <isr+0x546>
    233e:	e5b8      	b.n	1eb2 <isr+0xc2>

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    2340:	482d      	ldr	r0, [pc, #180]	; (23f8 <isr+0x608>)
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    2342:	f242 0421 	movw	r4, #8225	; 0x2021
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    2346:	2600      	movs	r6, #0

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    2348:	8805      	ldrh	r5, [r0, #0]
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    234a:	600e      	str	r6, [r1, #0]

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    234c:	42a5      	cmp	r5, r4

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    234e:	6840      	ldr	r0, [r0, #4]
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    2350:	f47f ae10 	bne.w	1f74 <isr+0x184>
    2354:	b281      	uxth	r1, r0
    2356:	2900      	cmp	r1, #0
    2358:	f47f ae0c 	bne.w	1f74 <isr+0x184>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    235c:	4929      	ldr	r1, [pc, #164]	; (2404 <isr+0x614>)
    235e:	4c2a      	ldr	r4, [pc, #168]	; (2408 <isr+0x618>)
    2360:	c903      	ldmia	r1, {r0, r1}
    2362:	0c0d      	lsrs	r5, r1, #16
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    2364:	2886      	cmp	r0, #134	; 0x86
	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    2366:	6020      	str	r0, [r4, #0]
    2368:	80a1      	strh	r1, [r4, #4]
    236a:	71a5      	strb	r5, [r4, #6]
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    236c:	f47f ae02 	bne.w	1f74 <isr+0x184>
}


void usb_start_sof_interrupts(int interface)
{
	__disable_irq();
    2370:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    2372:	4826      	ldr	r0, [pc, #152]	; (240c <isr+0x61c>)
    2374:	7801      	ldrb	r1, [r0, #0]
    2376:	f041 0104 	orr.w	r1, r1, #4
    237a:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    237c:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    2380:	0608      	lsls	r0, r1, #24
    2382:	d406      	bmi.n	2392 <isr+0x5a2>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    2384:	f041 0180 	orr.w	r1, r1, #128	; 0x80
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    2388:	2080      	movs	r0, #128	; 0x80
    238a:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    238e:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	}
	__enable_irq();
    2392:	b662      	cpsie	i
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
			usb_start_sof_interrupts(NUM_INTERFACE);
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    2394:	4a1e      	ldr	r2, [pc, #120]	; (2410 <isr+0x620>)
    2396:	2150      	movs	r1, #80	; 0x50
    2398:	7011      	strb	r1, [r2, #0]
    239a:	e5eb      	b.n	1f74 <isr+0x184>
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    239c:	481d      	ldr	r0, [pc, #116]	; (2414 <isr+0x624>)
					memcpy(usb_descriptor_buffer, src, datalen);
    239e:	461a      	mov	r2, r3
    23a0:	4f13      	ldr	r7, [pc, #76]	; (23f0 <isr+0x600>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    23a2:	f890 e000 	ldrb.w	lr, [r0]
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
    23a6:	491c      	ldr	r1, [pc, #112]	; (2418 <isr+0x628>)
    23a8:	481c      	ldr	r0, [pc, #112]	; (241c <isr+0x62c>)
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
    23aa:	9301      	str	r3, [sp, #4]
    23ac:	f1be 0f00 	cmp.w	lr, #0
    23b0:	bf08      	it	eq
    23b2:	4601      	moveq	r1, r0
    23b4:	4638      	mov	r0, r7
    23b6:	f000 fde7 	bl	2f88 <memcpy>
					usb_descriptor_buffer[1] = 7;
    23ba:	2207      	movs	r2, #7
    23bc:	9b01      	ldr	r3, [sp, #4]
    23be:	707a      	strb	r2, [r7, #1]
    23c0:	e768      	b.n	2294 <isr+0x4a4>

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
	if (sof_usage == 0) {
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    23c2:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    23c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    23ca:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    23ce:	e5c6      	b.n	1f5e <isr+0x16e>
    23d0:	20016020 	.word	0x20016020
    23d4:	20014c28 	.word	0x20014c28
    23d8:	402e01c0 	.word	0x402e01c0
    23dc:	20014bec 	.word	0x20014bec
    23e0:	20017288 	.word	0x20017288
    23e4:	20014d88 	.word	0x20014d88
    23e8:	20014c38 	.word	0x20014c38
    23ec:	200003bc 	.word	0x200003bc
    23f0:	20200000 	.word	0x20200000
    23f4:	e000ef70 	.word	0xe000ef70
    23f8:	20014c20 	.word	0x20014c20
    23fc:	00070080 	.word	0x00070080
    2400:	20016000 	.word	0x20016000
    2404:	20014c30 	.word	0x20014c30
    2408:	20017280 	.word	0x20017280
    240c:	20014c08 	.word	0x20014c08
    2410:	20014c18 	.word	0x20014c18
    2414:	20014c10 	.word	0x20014c10
    2418:	60001694 	.word	0x60001694
    241c:	600016d8 	.word	0x600016d8

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
    2420:	480a      	ldr	r0, [pc, #40]	; (244c <isr+0x65c>)
					memcpy(usb_descriptor_buffer, src, datalen);
    2422:	461a      	mov	r2, r3
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    2424:	490a      	ldr	r1, [pc, #40]	; (2450 <isr+0x660>)
					if (usb_high_speed) src = usb_config_descriptor_480;
    2426:	7807      	ldrb	r7, [r0, #0]
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    2428:	480a      	ldr	r0, [pc, #40]	; (2454 <isr+0x664>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
    242a:	9301      	str	r3, [sp, #4]
    242c:	2f00      	cmp	r7, #0
    242e:	bf08      	it	eq
    2430:	4601      	moveq	r1, r0
    2432:	4809      	ldr	r0, [pc, #36]	; (2458 <isr+0x668>)
    2434:	f000 fda8 	bl	2f88 <memcpy>
    2438:	4f07      	ldr	r7, [pc, #28]	; (2458 <isr+0x668>)
    243a:	9b01      	ldr	r3, [sp, #4]
    243c:	e72a      	b.n	2294 <isr+0x4a4>
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    243e:	0c12      	lsrs	r2, r2, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
    2440:	780b      	ldrb	r3, [r1, #0]
    2442:	4293      	cmp	r3, r2
    2444:	bf28      	it	cs
    2446:	4613      	movcs	r3, r2
    2448:	e719      	b.n	227e <isr+0x48e>
    244a:	bf00      	nop
    244c:	20014c10 	.word	0x20014c10
    2450:	600016d8 	.word	0x600016d8
    2454:	60001694 	.word	0x60001694
    2458:	20200000 	.word	0x20200000

0000245c <usb_config_rx>:
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    245c:	2a00      	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    245e:	f1a0 0202 	sub.w	r2, r0, #2
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    2462:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    2466:	bf14      	ite	ne
    2468:	2700      	movne	r7, #0
    246a:	f04f 5700 	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    246e:	2a02      	cmp	r2, #2
    2470:	d901      	bls.n	2476 <usb_config_rx+0x1a>
    2472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    2476:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
    247a:	f8df 9040 	ldr.w	r9, [pc, #64]	; 24bc <usb_config_rx+0x60>
    247e:	460d      	mov	r5, r1
    2480:	4604      	mov	r4, r0
    2482:	eb0a 0609 	add.w	r6, sl, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    2486:	2100      	movs	r1, #0
    2488:	2240      	movs	r2, #64	; 0x40
    248a:	4698      	mov	r8, r3
    248c:	4630      	mov	r0, r6
    248e:	f001 fe3b 	bl	4108 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    2492:	2001      	movs	r0, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    2494:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
    2498:	f84a 1009 	str.w	r1, [sl, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    249c:	f8c6 8038 	str.w	r8, [r6, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    24a0:	60b0      	str	r0, [r6, #8]
void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
    24a2:	f1b8 0f00 	cmp.w	r8, #0
    24a6:	d0e4      	beq.n	2472 <usb_config_rx+0x16>
    24a8:	4b03      	ldr	r3, [pc, #12]	; (24b8 <usb_config_rx+0x5c>)
    24aa:	40a0      	lsls	r0, r4
    24ac:	681c      	ldr	r4, [r3, #0]
    24ae:	4320      	orrs	r0, r4
    24b0:	6018      	str	r0, [r3, #0]
    24b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    24b6:	bf00      	nop
    24b8:	20014c04 	.word	0x20014c04
    24bc:	20017000 	.word	0x20017000

000024c0 <usb_config_tx>:
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    24c0:	2a00      	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    24c2:	f1a0 0202 	sub.w	r2, r0, #2
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    24c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    24ca:	bf14      	ite	ne
    24cc:	2700      	movne	r7, #0
    24ce:	f04f 5700 	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    24d2:	2a02      	cmp	r2, #2
    24d4:	d901      	bls.n	24da <usb_config_tx+0x1a>
    24d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    24da:	2240      	movs	r2, #64	; 0x40

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    24dc:	01c5      	lsls	r5, r0, #7
    24de:	f8df 9044 	ldr.w	r9, [pc, #68]	; 2524 <usb_config_tx+0x64>
    24e2:	4688      	mov	r8, r1
    24e4:	4415      	add	r5, r2
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    24e6:	2100      	movs	r1, #0
    24e8:	4604      	mov	r4, r0
    24ea:	461e      	mov	r6, r3

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    24ec:	eb05 0a09 	add.w	sl, r5, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    24f0:	4650      	mov	r0, sl
    24f2:	f001 fe09 	bl	4108 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    24f6:	2201      	movs	r2, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    24f8:	ea47 4108 	orr.w	r1, r7, r8, lsl #16
    24fc:	f845 1009 	str.w	r1, [r5, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    2500:	f8ca 6038 	str.w	r6, [sl, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    2504:	f8ca 2008 	str.w	r2, [sl, #8]
void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    2508:	2e00      	cmp	r6, #0
    250a:	d0e4      	beq.n	24d6 <usb_config_tx+0x16>
    250c:	f104 0010 	add.w	r0, r4, #16
    2510:	4b03      	ldr	r3, [pc, #12]	; (2520 <usb_config_tx+0x60>)
    2512:	4082      	lsls	r2, r0
    2514:	6818      	ldr	r0, [r3, #0]
    2516:	4302      	orrs	r2, r0
    2518:	601a      	str	r2, [r3, #0]
    251a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    251e:	bf00      	nop
    2520:	20014c04 	.word	0x20014c04
    2524:	20017000 	.word	0x20017000

00002528 <usb_prepare_transfer>:


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    2528:	0412      	lsls	r2, r2, #16
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
    252a:	6081      	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
	transfer->pointer3 = addr + 12288;
	transfer->pointer4 = addr + 16384;
	transfer->callback_param = param;
    252c:	61c3      	str	r3, [r0, #28]


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    252e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
}



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
    2532:	b4f0      	push	{r4, r5, r6, r7}
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    2534:	6042      	str	r2, [r0, #4]



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    2536:	2701      	movs	r7, #1
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    2538:	f501 5680 	add.w	r6, r1, #4096	; 0x1000
	transfer->pointer2 = addr + 8192;
    253c:	f501 5500 	add.w	r5, r1, #8192	; 0x2000
	transfer->pointer3 = addr + 12288;
    2540:	f501 5440 	add.w	r4, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    2544:	f501 4280 	add.w	r2, r1, #16384	; 0x4000



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    2548:	6007      	str	r7, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    254a:	60c6      	str	r6, [r0, #12]
	transfer->pointer2 = addr + 8192;
    254c:	6105      	str	r5, [r0, #16]
	transfer->pointer3 = addr + 12288;
    254e:	6144      	str	r4, [r0, #20]
	transfer->pointer4 = addr + 16384;
    2550:	6182      	str	r2, [r0, #24]
	transfer->callback_param = param;
}
    2552:	bcf0      	pop	{r4, r5, r6, r7}
    2554:	4770      	bx	lr
    2556:	bf00      	nop

00002558 <usb_transmit>:
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    2558:	1e83      	subs	r3, r0, #2
    255a:	2b02      	cmp	r3, #2
    255c:	d900      	bls.n	2560 <usb_transmit+0x8>
    255e:	4770      	bx	lr
		count--;
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    2560:	b430      	push	{r4, r5}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    2562:	4b06      	ldr	r3, [pc, #24]	; (257c <usb_transmit+0x24>)
    2564:	f100 0410 	add.w	r4, r0, #16
    2568:	2501      	movs	r5, #1
    256a:	460a      	mov	r2, r1
    256c:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    2570:	fa05 f104 	lsl.w	r1, r5, r4
}
    2574:	bc30      	pop	{r4, r5}
void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    2576:	f7ff bb97 	b.w	1ca8 <schedule_transfer>
    257a:	bf00      	nop
    257c:	20017040 	.word	0x20017040

00002580 <usb_receive>:
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    2580:	1e83      	subs	r3, r0, #2
    2582:	2b02      	cmp	r3, #2
    2584:	d900      	bls.n	2588 <usb_receive+0x8>
    2586:	4770      	bx	lr
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
    2588:	b410      	push	{r4}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    258a:	4b05      	ldr	r3, [pc, #20]	; (25a0 <usb_receive+0x20>)
    258c:	2401      	movs	r4, #1
    258e:	460a      	mov	r2, r1
    2590:	fa04 f100 	lsl.w	r1, r4, r0
    2594:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
}
    2598:	f85d 4b04 	ldr.w	r4, [sp], #4
void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    259c:	f7ff bb84 	b.w	1ca8 <schedule_transfer>
    25a0:	20017000 	.word	0x20017000

000025a4 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    25a4:	6840      	ldr	r0, [r0, #4]
#endif
}
    25a6:	4770      	bx	lr

000025a8 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    25a8:	4a12      	ldr	r2, [pc, #72]	; (25f4 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    25aa:	4b13      	ldr	r3, [pc, #76]	; (25f8 <usb_init_serialnumber+0x50>)
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    25ac:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    25b0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    25b4:	4298      	cmp	r0, r3
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    25b6:	b510      	push	{r4, lr}
    25b8:	b084      	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    25ba:	d802      	bhi.n	25c2 <usb_init_serialnumber+0x1a>
    25bc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    25c0:	0040      	lsls	r0, r0, #1
    25c2:	4c0e      	ldr	r4, [pc, #56]	; (25fc <usb_init_serialnumber+0x54>)
	ultoa(num, buf, 10);
    25c4:	a901      	add	r1, sp, #4
    25c6:	220a      	movs	r2, #10
    25c8:	f000 fd78 	bl	30bc <ultoa>
    25cc:	a901      	add	r1, sp, #4
	for (i=0; i<10; i++) {
    25ce:	2300      	movs	r3, #0
    25d0:	4620      	mov	r0, r4
		char c = buf[i];
    25d2:	f811 2b01 	ldrb.w	r2, [r1], #1
    25d6:	3301      	adds	r3, #1
		if (!c) break;
    25d8:	b13a      	cbz	r2, 25ea <usb_init_serialnumber+0x42>

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    25da:	2b0a      	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    25dc:	f820 2f02 	strh.w	r2, [r0, #2]!

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    25e0:	d1f7      	bne.n	25d2 <usb_init_serialnumber+0x2a>
    25e2:	2316      	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    25e4:	7023      	strb	r3, [r4, #0]
}
    25e6:	b004      	add	sp, #16
    25e8:	bd10      	pop	{r4, pc}
    25ea:	005b      	lsls	r3, r3, #1
    25ec:	b2db      	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    25ee:	7023      	strb	r3, [r4, #0]
}
    25f0:	b004      	add	sp, #16
    25f2:	bd10      	pop	{r4, pc}
    25f4:	401f4400 	.word	0x401f4400
    25f8:	0098967f 	.word	0x0098967f
    25fc:	200123dc 	.word	0x200123dc

00002600 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    2600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    2602:	4914      	ldr	r1, [pc, #80]	; (2654 <rx_queue_transfer+0x54>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    2604:	f44f 3700 	mov.w	r7, #131072	; 0x20000
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    2608:	4d13      	ldr	r5, [pc, #76]	; (2658 <rx_queue_transfer+0x58>)
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    260a:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    260c:	eb01 2440 	add.w	r4, r1, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    2610:	4e12      	ldr	r6, [pc, #72]	; (265c <rx_queue_transfer+0x5c>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    2612:	4a13      	ldr	r2, [pc, #76]	; (2660 <rx_queue_transfer+0x60>)
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    2614:	eb05 1540 	add.w	r5, r5, r0, lsl #5
    2618:	4621      	mov	r1, r4
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    261a:	6017      	str	r7, [r2, #0]
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    261c:	4628      	mov	r0, r5
    261e:	8832      	ldrh	r2, [r6, #0]
    2620:	f7ff ff82 	bl	2528 <usb_prepare_transfer>
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    2624:	8831      	ldrh	r1, [r6, #0]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    2626:	f024 031f 	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    262a:	4421      	add	r1, r4
	asm volatile("": : :"memory");
	asm("dsb");
    262c:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    2630:	4a0c      	ldr	r2, [pc, #48]	; (2664 <rx_queue_transfer+0x64>)
    2632:	6013      	str	r3, [r2, #0]
		location += 32;
    2634:	3320      	adds	r3, #32
	} while (location < end_addr);
    2636:	4299      	cmp	r1, r3
    2638:	d8fb      	bhi.n	2632 <rx_queue_transfer+0x32>
	asm("dsb");
    263a:	f3bf 8f4f 	dsb	sy
	asm("isb");
    263e:	f3bf 8f6f 	isb	sy
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    2642:	2003      	movs	r0, #3
    2644:	4629      	mov	r1, r5
    2646:	f7ff ff9b 	bl	2580 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    264a:	4b07      	ldr	r3, [pc, #28]	; (2668 <rx_queue_transfer+0x68>)
    264c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    2650:	601a      	str	r2, [r3, #0]
    2652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2654:	20200060 	.word	0x20200060
    2658:	20014c60 	.word	0x20014c60
    265c:	20014d6e 	.word	0x20014d6e
    2660:	e000e18c 	.word	0xe000e18c
    2664:	e000ef5c 	.word	0xe000ef5c
    2668:	e000e10c 	.word	0xe000e10c

0000266c <rx_event>:
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    266c:	4a24      	ldr	r2, [pc, #144]	; (2700 <rx_event+0x94>)
    266e:	6843      	ldr	r3, [r0, #4]
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
    2670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    2674:	f3c3 430e 	ubfx	r3, r3, #16, #15
    2678:	8814      	ldrh	r4, [r2, #0]
	int i = t->callback_param;
    267a:	69c5      	ldr	r5, [r0, #28]
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    267c:	1ae4      	subs	r4, r4, r3
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    267e:	2c00      	cmp	r4, #0
    2680:	dd38      	ble.n	26f4 <rx_event+0x88>
		// received a packet with data
		uint32_t head = rx_head;
    2682:	4920      	ldr	r1, [pc, #128]	; (2704 <rx_event+0x98>)
		if (head != rx_tail) {
    2684:	4a20      	ldr	r2, [pc, #128]	; (2708 <rx_event+0x9c>)
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    2686:	780b      	ldrb	r3, [r1, #0]
		if (head != rx_tail) {
    2688:	7812      	ldrb	r2, [r2, #0]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    268a:	b2db      	uxtb	r3, r3
		if (head != rx_tail) {
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    268c:	481f      	ldr	r0, [pc, #124]	; (270c <rx_event+0xa0>)
			uint32_t count = rx_count[ii];
    268e:	4e20      	ldr	r6, [pc, #128]	; (2710 <rx_event+0xa4>)
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
		if (head != rx_tail) {
    2690:	4293      	cmp	r3, r2
    2692:	d007      	beq.n	26a4 <rx_event+0x38>
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    2694:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    2698:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    269c:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    26a0:	4294      	cmp	r4, r2
    26a2:	d912      	bls.n	26ca <rx_event+0x5e>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    26a4:	3301      	adds	r3, #1
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
    26a6:	2200      	movs	r2, #0
    26a8:	4f1a      	ldr	r7, [pc, #104]	; (2714 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    26aa:	2b08      	cmp	r3, #8
				// TODO: trigger serialEvent
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
    26ac:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		rx_index[i] = 0;
    26b0:	f827 2015 	strh.w	r2, [r7, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
		rx_head = head;
		rx_available += len;
    26b4:	4e18      	ldr	r6, [pc, #96]	; (2718 <rx_event+0xac>)
    26b6:	bf94      	ite	ls
    26b8:	b2da      	uxtbls	r2, r3
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    26ba:	4613      	movhi	r3, r2
		rx_list[head] = i;
		rx_head = head;
    26bc:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    26be:	6832      	ldr	r2, [r6, #0]
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
    26c0:	54c5      	strb	r5, [r0, r3]
		rx_head = head;
		rx_available += len;
    26c2:	4414      	add	r4, r2
    26c4:	6034      	str	r4, [r6, #0]
    26c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    26ca:	4b14      	ldr	r3, [pc, #80]	; (271c <rx_event+0xb0>)
    26cc:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    26d0:	4622      	mov	r2, r4
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    26d2:	4427      	add	r7, r4
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    26d4:	eb03 2145 	add.w	r1, r3, r5, lsl #9
    26d8:	4418      	add	r0, r3
    26da:	f000 fc55 	bl	2f88 <memcpy>
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
    26de:	4a0e      	ldr	r2, [pc, #56]	; (2718 <rx_event+0xac>)
				rx_queue_transfer(i);
    26e0:	4628      	mov	r0, r5
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    26e2:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    26e6:	6813      	ldr	r3, [r2, #0]
    26e8:	441c      	add	r4, r3
    26ea:	6014      	str	r4, [r2, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    26ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
				rx_queue_transfer(i);
    26f0:	f7ff bf86 	b.w	2600 <rx_queue_transfer>
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    26f4:	4628      	mov	r0, r5
	}
}
    26f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    26fa:	f7ff bf81 	b.w	2600 <rx_queue_transfer>
    26fe:	bf00      	nop
    2700:	20014d6e 	.word	0x20014d6e
    2704:	20014d84 	.word	0x20014d84
    2708:	20014d60 	.word	0x20014d60
    270c:	20014d64 	.word	0x20014d64
    2710:	20014d70 	.word	0x20014d70
    2714:	20014c3c 	.word	0x20014c3c
    2718:	20014d80 	.word	0x20014d80
    271c:	20200060 	.word	0x20200060

00002720 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    2720:	4b1e      	ldr	r3, [pc, #120]	; (279c <usb_serial_flush_callback+0x7c>)
    2722:	781a      	ldrb	r2, [r3, #0]
    2724:	b95a      	cbnz	r2, 273e <usb_serial_flush_callback+0x1e>
    2726:	f002 03ff 	and.w	r3, r2, #255	; 0xff
	if (!usb_configuration) return;
    272a:	4a1d      	ldr	r2, [pc, #116]	; (27a0 <usb_serial_flush_callback+0x80>)
    272c:	7812      	ldrb	r2, [r2, #0]
    272e:	b132      	cbz	r2, 273e <usb_serial_flush_callback+0x1e>
	tx_available = 0;
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
    2730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
    2734:	4d1b      	ldr	r5, [pc, #108]	; (27a4 <usb_serial_flush_callback+0x84>)
    2736:	882a      	ldrh	r2, [r5, #0]
    2738:	b912      	cbnz	r2, 2740 <usb_serial_flush_callback+0x20>
    273a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    273e:	4770      	bx	lr
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    2740:	4e19      	ldr	r6, [pc, #100]	; (27a8 <usb_serial_flush_callback+0x88>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    2742:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    2746:	4f19      	ldr	r7, [pc, #100]	; (27ac <usb_serial_flush_callback+0x8c>)
    2748:	7831      	ldrb	r1, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    274a:	4642      	mov	r2, r8
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    274c:	4c18      	ldr	r4, [pc, #96]	; (27b0 <usb_serial_flush_callback+0x90>)
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    274e:	eb07 1741 	add.w	r7, r7, r1, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    2752:	eb04 24c1 	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    2756:	4638      	mov	r0, r7
    2758:	4621      	mov	r1, r4
    275a:	f7ff fee5 	bl	2528 <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    275e:	eb08 0204 	add.w	r2, r8, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    2762:	f024 011f 	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    2766:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    276a:	4b12      	ldr	r3, [pc, #72]	; (27b4 <usb_serial_flush_callback+0x94>)
    276c:	6019      	str	r1, [r3, #0]
		location += 32;
    276e:	3120      	adds	r1, #32
	} while (location < end_addr);
    2770:	428a      	cmp	r2, r1
    2772:	d8fb      	bhi.n	276c <usb_serial_flush_callback+0x4c>
	asm("dsb");
    2774:	f3bf 8f4f 	dsb	sy
	asm("isb");
    2778:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    277c:	2004      	movs	r0, #4
    277e:	4639      	mov	r1, r7
    2780:	f7ff feea 	bl	2558 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    2784:	7833      	ldrb	r3, [r6, #0]
    2786:	4a08      	ldr	r2, [pc, #32]	; (27a8 <usb_serial_flush_callback+0x88>)
    2788:	3301      	adds	r3, #1
    278a:	b2db      	uxtb	r3, r3
    278c:	2b03      	cmp	r3, #3
    278e:	bf88      	it	hi
    2790:	2300      	movhi	r3, #0
    2792:	7013      	strb	r3, [r2, #0]
	tx_available = 0;
    2794:	2300      	movs	r3, #0
    2796:	802b      	strh	r3, [r5, #0]
    2798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    279c:	20014c4e 	.word	0x20014c4e
    27a0:	20014c38 	.word	0x20014c38
    27a4:	20014d86 	.word	0x20014d86
    27a8:	20014c4f 	.word	0x20014c4f
    27ac:	20014da0 	.word	0x20014da0
    27b0:	20201060 	.word	0x20201060
    27b4:	e000ef70 	.word	0xe000ef70

000027b8 <usb_serial_write.part.1>:
{
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
    27b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    27bc:	b085      	sub	sp, #20
    27be:	9002      	str	r0, [sp, #8]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    27c0:	9101      	str	r1, [sp, #4]
    27c2:	2900      	cmp	r1, #0
    27c4:	f000 80a2 	beq.w	290c <usb_serial_write.part.1+0x154>
    27c8:	2300      	movs	r3, #0
    27ca:	f8df 815c 	ldr.w	r8, [pc, #348]	; 2928 <usb_serial_write.part.1+0x170>
    27ce:	f8df 914c 	ldr.w	r9, [pc, #332]	; 291c <usb_serial_write.part.1+0x164>
    27d2:	9300      	str	r3, [sp, #0]
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
    27d4:	4e4e      	ldr	r6, [pc, #312]	; (2910 <usb_serial_write.part.1+0x158>)
    27d6:	f8b8 3000 	ldrh.w	r3, [r8]
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    27da:	f8df a150 	ldr.w	sl, [pc, #336]	; 292c <usb_serial_write.part.1+0x174>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
	do {
		SCB_CACHE_DCCIMVAC = location;
    27de:	f8df b150 	ldr.w	fp, [pc, #336]	; 2930 <usb_serial_write.part.1+0x178>
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
    27e2:	4a4c      	ldr	r2, [pc, #304]	; (2914 <usb_serial_write.part.1+0x15c>)
    27e4:	7814      	ldrb	r4, [r2, #0]
    27e6:	4a4c      	ldr	r2, [pc, #304]	; (2918 <usb_serial_write.part.1+0x160>)
    27e8:	eb02 1744 	add.w	r7, r2, r4, lsl #5
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    27ec:	2b00      	cmp	r3, #0
    27ee:	d16e      	bne.n	28ce <usb_serial_write.part.1+0x116>
    27f0:	461d      	mov	r5, r3
    27f2:	461c      	mov	r4, r3
    27f4:	e014      	b.n	2820 <usb_serial_write.part.1+0x68>
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    27f6:	f899 3000 	ldrb.w	r3, [r9]
				}
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
    27fa:	b904      	cbnz	r4, 27fe <usb_serial_write.part.1+0x46>
				wait_begin_at = systick_millis_count;
    27fc:	6835      	ldr	r5, [r6, #0]
    27fe:	2401      	movs	r4, #1
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    2800:	2b00      	cmp	r3, #0
    2802:	d15e      	bne.n	28c2 <usb_serial_write.part.1+0x10a>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    2804:	6833      	ldr	r3, [r6, #0]
    2806:	1b5b      	subs	r3, r3, r5
    2808:	2b78      	cmp	r3, #120	; 0x78
    280a:	d879      	bhi.n	2900 <usb_serial_write.part.1+0x148>
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    280c:	f89a 3000 	ldrb.w	r3, [sl]
    2810:	2b00      	cmp	r3, #0
    2812:	d056      	beq.n	28c2 <usb_serial_write.part.1+0x10a>
			yield();
    2814:	f000 fb40 	bl	2e98 <yield>
	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    2818:	f8b8 3000 	ldrh.w	r3, [r8]
    281c:	2b00      	cmp	r3, #0
    281e:	d154      	bne.n	28ca <usb_serial_write.part.1+0x112>
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
    2820:	4638      	mov	r0, r7
    2822:	f7ff febf 	bl	25a4 <usb_transfer_status>
			if (!(status & 0x80)) {
    2826:	f010 0080 	ands.w	r0, r0, #128	; 0x80
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    282a:	4a3c      	ldr	r2, [pc, #240]	; (291c <usb_serial_write.part.1+0x164>)
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
			if (!(status & 0x80)) {
    282c:	d1e3      	bne.n	27f6 <usb_serial_write.part.1+0x3e>
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    282e:	f44f 6300 	mov.w	r3, #2048	; 0x800
    2832:	4a38      	ldr	r2, [pc, #224]	; (2914 <usb_serial_write.part.1+0x15c>)
				transmit_previous_timeout = 0;
    2834:	f889 0000 	strb.w	r0, [r9]
    2838:	7814      	ldrb	r4, [r2, #0]
    283a:	461a      	mov	r2, r3
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    283c:	f8a8 3000 	strh.w	r3, [r8]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    2840:	02e4      	lsls	r4, r4, #11
		if (size >= tx_available) {
    2842:	9d01      	ldr	r5, [sp, #4]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    2844:	4936      	ldr	r1, [pc, #216]	; (2920 <usb_serial_write.part.1+0x168>)
    2846:	4420      	add	r0, r4
		if (size >= tx_available) {
    2848:	4295      	cmp	r5, r2
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    284a:	4408      	add	r0, r1
		if (size >= tx_available) {
    284c:	d343      	bcc.n	28d6 <usb_serial_write.part.1+0x11e>
			memcpy(txdata, data, tx_available);
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    284e:	440c      	add	r4, r1
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
    2850:	9902      	ldr	r1, [sp, #8]
    2852:	f000 fb99 	bl	2f88 <memcpy>
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    2856:	2300      	movs	r3, #0
    2858:	4621      	mov	r1, r4
    285a:	f44f 6200 	mov.w	r2, #2048	; 0x800
    285e:	4638      	mov	r0, r7
    2860:	f7ff fe62 	bl	2528 <usb_prepare_transfer>
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    2864:	f024 031f 	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    2868:	f504 6400 	add.w	r4, r4, #2048	; 0x800
	asm volatile("": : :"memory");
	asm("dsb");
    286c:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    2870:	f8cb 3000 	str.w	r3, [fp]
		location += 32;
    2874:	3320      	adds	r3, #32
	} while (location < end_addr);
    2876:	429c      	cmp	r4, r3
    2878:	d8fa      	bhi.n	2870 <usb_serial_write.part.1+0xb8>
	asm("dsb");
    287a:	f3bf 8f4f 	dsb	sy
	asm("isb");
    287e:	f3bf 8f6f 	isb	sy
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    2882:	2004      	movs	r0, #4
    2884:	4639      	mov	r1, r7
    2886:	f7ff fe67 	bl	2558 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    288a:	4b22      	ldr	r3, [pc, #136]	; (2914 <usb_serial_write.part.1+0x15c>)
    288c:	4a21      	ldr	r2, [pc, #132]	; (2914 <usb_serial_write.part.1+0x15c>)
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
    288e:	2100      	movs	r1, #0
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    2890:	781b      	ldrb	r3, [r3, #0]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    2892:	4824      	ldr	r0, [pc, #144]	; (2924 <usb_serial_write.part.1+0x16c>)
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    2894:	3301      	adds	r3, #1
    2896:	b2db      	uxtb	r3, r3
    2898:	2b03      	cmp	r3, #3
    289a:	bf88      	it	hi
    289c:	2300      	movhi	r3, #0
    289e:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    28a0:	f8b8 2000 	ldrh.w	r2, [r8]
			sent += tx_available;
    28a4:	9b00      	ldr	r3, [sp, #0]
			data += tx_available;
			tx_available = 0;
    28a6:	f8a8 1000 	strh.w	r1, [r8]
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
			sent += tx_available;
    28aa:	4413      	add	r3, r2
    28ac:	9300      	str	r3, [sp, #0]
			data += tx_available;
    28ae:	9b02      	ldr	r3, [sp, #8]
    28b0:	4413      	add	r3, r2
    28b2:	9302      	str	r3, [sp, #8]
    28b4:	460b      	mov	r3, r1
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    28b6:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    28ba:	9901      	ldr	r1, [sp, #4]
    28bc:	1a8a      	subs	r2, r1, r2
    28be:	9201      	str	r2, [sp, #4]
    28c0:	d18f      	bne.n	27e2 <usb_serial_write.part.1+0x2a>
    28c2:	9800      	ldr	r0, [sp, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    28c4:	b005      	add	sp, #20
    28c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    28ca:	4a12      	ldr	r2, [pc, #72]	; (2914 <usb_serial_write.part.1+0x15c>)
    28cc:	7814      	ldrb	r4, [r2, #0]
    28ce:	461a      	mov	r2, r3
    28d0:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    28d4:	e7b4      	b.n	2840 <usb_serial_write.part.1+0x88>
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
    28d6:	9c01      	ldr	r4, [sp, #4]
    28d8:	9902      	ldr	r1, [sp, #8]
    28da:	4622      	mov	r2, r4
    28dc:	9303      	str	r3, [sp, #12]
    28de:	f000 fb53 	bl	2f88 <memcpy>
			tx_available -= size;
    28e2:	9b03      	ldr	r3, [sp, #12]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    28e4:	4a0f      	ldr	r2, [pc, #60]	; (2924 <usb_serial_write.part.1+0x16c>)
    28e6:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
    28ea:	1b1b      	subs	r3, r3, r4
    28ec:	f8a8 3000 	strh.w	r3, [r8]
    28f0:	9b00      	ldr	r3, [sp, #0]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    28f2:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    28f6:	4618      	mov	r0, r3
    28f8:	4420      	add	r0, r4
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    28fa:	b005      	add	sp, #20
    28fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    2900:	2301      	movs	r3, #1
				return sent;
    2902:	9800      	ldr	r0, [sp, #0]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    2904:	7013      	strb	r3, [r2, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    2906:	b005      	add	sp, #20
    2908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    290c:	9801      	ldr	r0, [sp, #4]
    290e:	e7d9      	b.n	28c4 <usb_serial_write.part.1+0x10c>
    2910:	20014bec 	.word	0x20014bec
    2914:	20014c4f 	.word	0x20014c4f
    2918:	20014da0 	.word	0x20014da0
    291c:	20014d85 	.word	0x20014d85
    2920:	20201060 	.word	0x20201060
    2924:	402e0000 	.word	0x402e0000
    2928:	20014d86 	.word	0x20014d86
    292c:	20014c38 	.word	0x20014c38
    2930:	e000ef70 	.word	0xe000ef70

00002934 <usb_serial_reset>:
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);


void usb_serial_reset(void)
{
    2934:	4770      	bx	lr
    2936:	bf00      	nop

00002938 <usb_serial_configure>:
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    2938:	4b31      	ldr	r3, [pc, #196]	; (2a00 <usb_serial_configure+0xc8>)
	printf("usb_serial_reset\n");
	// deallocate all transfer descriptors
}

void usb_serial_configure(void)
{
    293a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    293e:	781b      	ldrb	r3, [r3, #0]
		tx_packet_size = CDC_TX_SIZE_480;
    2940:	4f30      	ldr	r7, [pc, #192]	; (2a04 <usb_serial_configure+0xcc>)
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    2942:	2b00      	cmp	r3, #0
    2944:	d054      	beq.n	29f0 <usb_serial_configure+0xb8>
		tx_packet_size = CDC_TX_SIZE_480;
    2946:	f44f 7300 	mov.w	r3, #512	; 0x200
		rx_packet_size = CDC_RX_SIZE_480;
    294a:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 2a38 <usb_serial_configure+0x100>
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
    294e:	803b      	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    2950:	f8a8 3000 	strh.w	r3, [r8]
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    2954:	2100      	movs	r1, #0
    2956:	2280      	movs	r2, #128	; 0x80
    2958:	482b      	ldr	r0, [pc, #172]	; (2a08 <usb_serial_configure+0xd0>)
	tx_head = 0;
    295a:	460d      	mov	r5, r1
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    295c:	4e2b      	ldr	r6, [pc, #172]	; (2a0c <usb_serial_configure+0xd4>)
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    295e:	f001 fbd3 	bl	4108 <memset>
	tx_head = 0;
    2962:	4c2b      	ldr	r4, [pc, #172]	; (2a10 <usb_serial_configure+0xd8>)
	tx_available = 0;
    2964:	4b2b      	ldr	r3, [pc, #172]	; (2a14 <usb_serial_configure+0xdc>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    2966:	4629      	mov	r1, r5
    2968:	f44f 7280 	mov.w	r2, #256	; 0x100
    296c:	482a      	ldr	r0, [pc, #168]	; (2a18 <usb_serial_configure+0xe0>)
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    296e:	7025      	strb	r5, [r4, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    2970:	462c      	mov	r4, r5
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    2972:	801d      	strh	r5, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    2974:	f001 fbc8 	bl	4108 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    2978:	6035      	str	r5, [r6, #0]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    297a:	462b      	mov	r3, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    297c:	6075      	str	r5, [r6, #4]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    297e:	462a      	mov	r2, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    2980:	60b5      	str	r5, [r6, #8]
    2982:	60f5      	str	r5, [r6, #12]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    2984:	4925      	ldr	r1, [pc, #148]	; (2a1c <usb_serial_configure+0xe4>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    2986:	4e26      	ldr	r6, [pc, #152]	; (2a20 <usb_serial_configure+0xe8>)
	rx_head = 0;
	rx_tail = 0;
    2988:	4826      	ldr	r0, [pc, #152]	; (2a24 <usb_serial_configure+0xec>)
	rx_available = 0;
    298a:	f8df e0b0 	ldr.w	lr, [pc, #176]	; 2a3c <usb_serial_configure+0x104>
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    298e:	700d      	strb	r5, [r1, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    2990:	2110      	movs	r1, #16
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
    2992:	7005      	strb	r5, [r0, #0]
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    2994:	2002      	movs	r0, #2
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    2996:	6035      	str	r5, [r6, #0]
    2998:	6075      	str	r5, [r6, #4]
    299a:	60b5      	str	r5, [r6, #8]
    299c:	60f5      	str	r5, [r6, #12]
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
    299e:	f8ce 5000 	str.w	r5, [lr]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    29a2:	f7ff fd8d 	bl	24c0 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    29a6:	f8b8 1000 	ldrh.w	r1, [r8]
    29aa:	462a      	mov	r2, r5
    29ac:	4b1e      	ldr	r3, [pc, #120]	; (2a28 <usb_serial_configure+0xf0>)
    29ae:	2003      	movs	r0, #3
    29b0:	f7ff fd54 	bl	245c <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    29b4:	462b      	mov	r3, r5
    29b6:	8839      	ldrh	r1, [r7, #0]
    29b8:	2201      	movs	r2, #1
    29ba:	2004      	movs	r0, #4
    29bc:	f7ff fd80 	bl	24c0 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    29c0:	4620      	mov	r0, r4
    29c2:	3401      	adds	r4, #1
    29c4:	f7ff fe1c 	bl	2600 <rx_queue_transfer>
    29c8:	2c08      	cmp	r4, #8
    29ca:	d1f9      	bne.n	29c0 <usb_serial_configure+0x88>
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
	USB1_GPTIMER0CTRL = 0;
    29cc:	4b17      	ldr	r3, [pc, #92]	; (2a2c <usb_serial_configure+0xf4>)
	USB1_GPTIMER0LD = microseconds - 1;
    29ce:	224a      	movs	r2, #74	; 0x4a
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    29d0:	4817      	ldr	r0, [pc, #92]	; (2a30 <usb_serial_configure+0xf8>)
	USB1_GPTIMER0CTRL = 0;
    29d2:	2100      	movs	r1, #0
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    29d4:	4c17      	ldr	r4, [pc, #92]	; (2a34 <usb_serial_configure+0xfc>)
    29d6:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    29d8:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    29dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    29e0:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    29e4:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    29e8:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    29ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    29f0:	2340      	movs	r3, #64	; 0x40
		rx_packet_size = CDC_RX_SIZE_12;
    29f2:	f8df 8044 	ldr.w	r8, [pc, #68]	; 2a38 <usb_serial_configure+0x100>
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    29f6:	803b      	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_12;
    29f8:	f8a8 3000 	strh.w	r3, [r8]
    29fc:	e7aa      	b.n	2954 <usb_serial_configure+0x1c>
    29fe:	bf00      	nop
    2a00:	20014c10 	.word	0x20014c10
    2a04:	20014c4c 	.word	0x20014c4c
    2a08:	20014da0 	.word	0x20014da0
    2a0c:	20014d70 	.word	0x20014d70
    2a10:	20014c4f 	.word	0x20014c4f
    2a14:	20014d86 	.word	0x20014d86
    2a18:	20014c60 	.word	0x20014c60
    2a1c:	20014d84 	.word	0x20014d84
    2a20:	20014c3c 	.word	0x20014c3c
    2a24:	20014d60 	.word	0x20014d60
    2a28:	0000266d 	.word	0x0000266d
    2a2c:	402e0000 	.word	0x402e0000
    2a30:	20014c00 	.word	0x20014c00
    2a34:	00002721 	.word	0x00002721
    2a38:	20014d6e 	.word	0x20014d6e
    2a3c:	20014d80 	.word	0x20014d80

00002a40 <usb_serial_read>:
int usb_serial_read(void *buffer, uint32_t size)
{
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    2a40:	4b31      	ldr	r3, [pc, #196]	; (2b08 <usb_serial_read+0xc8>)
    2a42:	f44f 3200 	mov.w	r2, #131072	; 0x20000

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    2a46:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    2a4a:	601a      	str	r2, [r3, #0]

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    2a4c:	b083      	sub	sp, #12
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    2a4e:	4b2f      	ldr	r3, [pc, #188]	; (2b0c <usb_serial_read+0xcc>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    2a50:	4689      	mov	r9, r1
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    2a52:	781c      	ldrb	r4, [r3, #0]
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    2a54:	2900      	cmp	r1, #0
    2a56:	d053      	beq.n	2b00 <usb_serial_read+0xc0>
    2a58:	4b2d      	ldr	r3, [pc, #180]	; (2b10 <usb_serial_read+0xd0>)
    2a5a:	b2e4      	uxtb	r4, r4
    2a5c:	781b      	ldrb	r3, [r3, #0]
    2a5e:	429c      	cmp	r4, r3
    2a60:	d050      	beq.n	2b04 <usb_serial_read+0xc4>
    2a62:	4682      	mov	sl, r0
    2a64:	2700      	movs	r7, #0
    2a66:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 2b28 <usb_serial_read+0xe8>
		if (++tail > RX_NUM) tail = 0;
    2a6a:	3401      	adds	r4, #1
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    2a6c:	4b29      	ldr	r3, [pc, #164]	; (2b14 <usb_serial_read+0xd4>)
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
    2a6e:	ebc7 0809 	rsb	r8, r7, r9
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    2a72:	4650      	mov	r0, sl
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    2a74:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    2a76:	9301      	str	r3, [sp, #4]
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
    2a78:	4b27      	ldr	r3, [pc, #156]	; (2b18 <usb_serial_read+0xd8>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    2a7a:	bf28      	it	cs
    2a7c:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    2a7e:	5d1d      	ldrb	r5, [r3, r4]
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    2a80:	4b24      	ldr	r3, [pc, #144]	; (2b14 <usb_serial_read+0xd4>)
    2a82:	f833 e015 	ldrh.w	lr, [r3, r5, lsl #1]
    2a86:	4b25      	ldr	r3, [pc, #148]	; (2b1c <usb_serial_read+0xdc>)
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    2a88:	eb0e 2145 	add.w	r1, lr, r5, lsl #9
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    2a8c:	f833 6015 	ldrh.w	r6, [r3, r5, lsl #1]
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    2a90:	4b23      	ldr	r3, [pc, #140]	; (2b20 <usb_serial_read+0xe0>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    2a92:	ebce 0606 	rsb	r6, lr, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    2a96:	4419      	add	r1, r3
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    2a98:	45b0      	cmp	r8, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    2a9a:	4632      	mov	r2, r6
			p += avail;
			rx_available -= avail;
			count += avail;
    2a9c:	4437      	add	r7, r6
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    2a9e:	d219      	bcs.n	2ad4 <usb_serial_read+0x94>
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    2aa0:	eb0e 2145 	add.w	r1, lr, r5, lsl #9
    2aa4:	4642      	mov	r2, r8
    2aa6:	4419      	add	r1, r3
    2aa8:	f000 fa6e 	bl	2f88 <memcpy>
			rx_available -= len;
			rx_index[i] += len;
    2aac:	9b01      	ldr	r3, [sp, #4]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    2aae:	f8db 1000 	ldr.w	r1, [fp]
    2ab2:	4648      	mov	r0, r9
			rx_index[i] += len;
    2ab4:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    2ab8:	ebc8 0101 	rsb	r1, r8, r1
			rx_index[i] += len;
    2abc:	4490      	add	r8, r2
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    2abe:	f8cb 1000 	str.w	r1, [fp]
			rx_index[i] += len;
    2ac2:	f823 8015 	strh.w	r8, [r3, r5, lsl #1]
			count += avail;
			rx_tail = tail;
			rx_queue_transfer(i);
		}
	}
	NVIC_ENABLE_IRQ(IRQ_USB1);
    2ac6:	4b17      	ldr	r3, [pc, #92]	; (2b24 <usb_serial_read+0xe4>)
    2ac8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    2acc:	601a      	str	r2, [r3, #0]
	return count;
}
    2ace:	b003      	add	sp, #12
    2ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    2ad4:	f000 fa58 	bl	2f88 <memcpy>
			p += avail;
			rx_available -= avail;
    2ad8:	f8db 2000 	ldr.w	r2, [fp]
			count += avail;
			rx_tail = tail;
    2adc:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
    2ade:	4628      	mov	r0, r5
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
			rx_available -= avail;
    2ae0:	1b92      	subs	r2, r2, r6
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
    2ae2:	44b2      	add	sl, r6
			rx_available -= avail;
    2ae4:	f8cb 2000 	str.w	r2, [fp]
			count += avail;
			rx_tail = tail;
    2ae8:	4a08      	ldr	r2, [pc, #32]	; (2b0c <usb_serial_read+0xcc>)
    2aea:	7013      	strb	r3, [r2, #0]
			rx_queue_transfer(i);
    2aec:	f7ff fd88 	bl	2600 <rx_queue_transfer>

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    2af0:	45b9      	cmp	r9, r7
    2af2:	d903      	bls.n	2afc <usb_serial_read+0xbc>
    2af4:	4b06      	ldr	r3, [pc, #24]	; (2b10 <usb_serial_read+0xd0>)
    2af6:	781b      	ldrb	r3, [r3, #0]
    2af8:	429c      	cmp	r4, r3
    2afa:	d1b6      	bne.n	2a6a <usb_serial_read+0x2a>
    2afc:	4638      	mov	r0, r7
    2afe:	e7e2      	b.n	2ac6 <usb_serial_read+0x86>
    2b00:	4608      	mov	r0, r1
    2b02:	e7e0      	b.n	2ac6 <usb_serial_read+0x86>
    2b04:	2000      	movs	r0, #0
    2b06:	e7de      	b.n	2ac6 <usb_serial_read+0x86>
    2b08:	e000e18c 	.word	0xe000e18c
    2b0c:	20014d60 	.word	0x20014d60
    2b10:	20014d84 	.word	0x20014d84
    2b14:	20014c3c 	.word	0x20014c3c
    2b18:	20014d64 	.word	0x20014d64
    2b1c:	20014d70 	.word	0x20014d70
    2b20:	20200060 	.word	0x20200060
    2b24:	e000e10c 	.word	0xe000e10c
    2b28:	20014d80 	.word	0x20014d80

00002b2c <usb_serial_peekchar>:
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    2b2c:	4b0b      	ldr	r3, [pc, #44]	; (2b5c <usb_serial_peekchar+0x30>)
	if (tail == rx_head) return -1;
    2b2e:	4a0c      	ldr	r2, [pc, #48]	; (2b60 <usb_serial_peekchar+0x34>)
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    2b30:	781b      	ldrb	r3, [r3, #0]
	if (tail == rx_head) return -1;
    2b32:	7812      	ldrb	r2, [r2, #0]
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    2b34:	b2db      	uxtb	r3, r3
	if (tail == rx_head) return -1;
    2b36:	4293      	cmp	r3, r2
    2b38:	d00d      	beq.n	2b56 <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    2b3a:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    2b3c:	4809      	ldr	r0, [pc, #36]	; (2b64 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    2b3e:	4a0a      	ldr	r2, [pc, #40]	; (2b68 <usb_serial_peekchar+0x3c>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    2b40:	2b09      	cmp	r3, #9
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    2b42:	490a      	ldr	r1, [pc, #40]	; (2b6c <usb_serial_peekchar+0x40>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    2b44:	bf28      	it	cs
    2b46:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    2b48:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    2b4a:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
    2b4e:	eb02 2343 	add.w	r3, r2, r3, lsl #9
    2b52:	5c58      	ldrb	r0, [r3, r1]
    2b54:	4770      	bx	lr

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
    2b56:	f04f 30ff 	mov.w	r0, #4294967295
	if (++tail > RX_NUM) tail = 0;
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
}
    2b5a:	4770      	bx	lr
    2b5c:	20014d60 	.word	0x20014d60
    2b60:	20014d84 	.word	0x20014d84
    2b64:	20014d64 	.word	0x20014d64
    2b68:	20200060 	.word	0x20200060
    2b6c:	20014c3c 	.word	0x20014c3c

00002b70 <usb_serial_available>:

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	return rx_available;
    2b70:	4b01      	ldr	r3, [pc, #4]	; (2b78 <usb_serial_available+0x8>)
    2b72:	6818      	ldr	r0, [r3, #0]
}
    2b74:	4770      	bx	lr
    2b76:	bf00      	nop
    2b78:	20014d80 	.word	0x20014d80

00002b7c <usb_serial_flush_input>:

// discard any buffered input
void usb_serial_flush_input(void)
{
    2b7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    2b80:	4e15      	ldr	r6, [pc, #84]	; (2bd8 <usb_serial_flush_input+0x5c>)
	while (tail != rx_head) {
    2b82:	4d16      	ldr	r5, [pc, #88]	; (2bdc <usb_serial_flush_input+0x60>)
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    2b84:	7834      	ldrb	r4, [r6, #0]
	while (tail != rx_head) {
    2b86:	782b      	ldrb	r3, [r5, #0]
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    2b88:	b2e4      	uxtb	r4, r4
	while (tail != rx_head) {
    2b8a:	429c      	cmp	r4, r3
    2b8c:	d021      	beq.n	2bd2 <usb_serial_flush_input+0x56>
    2b8e:	f8df 9054 	ldr.w	r9, [pc, #84]	; 2be4 <usb_serial_flush_input+0x68>
    2b92:	f8df b054 	ldr.w	fp, [pc, #84]	; 2be8 <usb_serial_flush_input+0x6c>
    2b96:	f8df 8054 	ldr.w	r8, [pc, #84]	; 2bec <usb_serial_flush_input+0x70>
    2b9a:	4f11      	ldr	r7, [pc, #68]	; (2be0 <usb_serial_flush_input+0x64>)
		if (++tail > RX_NUM) tail = 0;
    2b9c:	3401      	adds	r4, #1
    2b9e:	2c08      	cmp	r4, #8
    2ba0:	fa5f fa84 	uxtb.w	sl, r4
    2ba4:	d901      	bls.n	2baa <usb_serial_flush_input+0x2e>
    2ba6:	2400      	movs	r4, #0
    2ba8:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
    2baa:	f819 1004 	ldrb.w	r1, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    2bae:	f8db 2000 	ldr.w	r2, [fp]
    2bb2:	f838 3011 	ldrh.w	r3, [r8, r1, lsl #1]
		rx_queue_transfer(i);
    2bb6:	4608      	mov	r0, r1
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		rx_available -= rx_count[i] - rx_index[i];
    2bb8:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
    2bbc:	1a5b      	subs	r3, r3, r1
    2bbe:	1ad3      	subs	r3, r2, r3
    2bc0:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
    2bc4:	f7ff fd1c 	bl	2600 <rx_queue_transfer>
		rx_tail = tail;
    2bc8:	f886 a000 	strb.w	sl, [r6]

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
    2bcc:	782b      	ldrb	r3, [r5, #0]
    2bce:	429c      	cmp	r4, r3
    2bd0:	d1e4      	bne.n	2b9c <usb_serial_flush_input+0x20>
    2bd2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2bd6:	bf00      	nop
    2bd8:	20014d60 	.word	0x20014d60
    2bdc:	20014d84 	.word	0x20014d84
    2be0:	20014c3c 	.word	0x20014c3c
    2be4:	20014d64 	.word	0x20014d64
    2be8:	20014d80 	.word	0x20014d80
    2bec:	20014d70 	.word	0x20014d70

00002bf0 <usb_serial_getchar>:
}


// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    2bf0:	b500      	push	{lr}
    2bf2:	b083      	sub	sp, #12
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
    2bf4:	2101      	movs	r1, #1
    2bf6:	f10d 0007 	add.w	r0, sp, #7
    2bfa:	f7ff ff21 	bl	2a40 <usb_serial_read>
    2bfe:	b120      	cbz	r0, 2c0a <usb_serial_getchar+0x1a>
    2c00:	f89d 0007 	ldrb.w	r0, [sp, #7]
	return -1;
}
    2c04:	b003      	add	sp, #12
    2c06:	f85d fb04 	ldr.w	pc, [sp], #4
// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
	return -1;
    2c0a:	f04f 30ff 	mov.w	r0, #4294967295
    2c0e:	e7f9      	b.n	2c04 <usb_serial_getchar+0x14>

00002c10 <usb_serial_putchar>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    2c10:	4b09      	ldr	r3, [pc, #36]	; (2c38 <usb_serial_putchar+0x28>)
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    2c12:	b500      	push	{lr}
    2c14:	b083      	sub	sp, #12
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    2c16:	781b      	ldrb	r3, [r3, #0]
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    2c18:	f88d 0007 	strb.w	r0, [sp, #7]
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    2c1c:	b923      	cbnz	r3, 2c28 <usb_serial_putchar+0x18>
    2c1e:	f003 00ff 	and.w	r0, r3, #255	; 0xff

// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
	return usb_serial_write(&c, 1);
}
    2c22:	b003      	add	sp, #12
    2c24:	f85d fb04 	ldr.w	pc, [sp], #4
    2c28:	2101      	movs	r1, #1
    2c2a:	f10d 0007 	add.w	r0, sp, #7
    2c2e:	f7ff fdc3 	bl	27b8 <usb_serial_write.part.1>
    2c32:	b003      	add	sp, #12
    2c34:	f85d fb04 	ldr.w	pc, [sp], #4
    2c38:	20014c38 	.word	0x20014c38

00002c3c <usb_serial_write>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    2c3c:	4b04      	ldr	r3, [pc, #16]	; (2c50 <usb_serial_write+0x14>)
    2c3e:	781b      	ldrb	r3, [r3, #0]
    2c40:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    2c44:	b10b      	cbz	r3, 2c4a <usb_serial_write+0xe>
    2c46:	f7ff bdb7 	b.w	27b8 <usb_serial_write.part.1>
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    2c4a:	4610      	mov	r0, r2
    2c4c:	4770      	bx	lr
    2c4e:	bf00      	nop
    2c50:	20014c38 	.word	0x20014c38

00002c54 <usb_serial_write_buffer_free>:

int usb_serial_write_buffer_free(void)
{
    2c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    2c58:	2400      	movs	r4, #0
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
    2c5a:	f8df 8040 	ldr.w	r8, [pc, #64]	; 2c9c <usb_serial_write_buffer_free+0x48>
    2c5e:	2301      	movs	r3, #1
    2c60:	4d0c      	ldr	r5, [pc, #48]	; (2c94 <usb_serial_write_buffer_free+0x40>)
	return sent;
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
    2c62:	4627      	mov	r7, r4
    2c64:	4e0c      	ldr	r6, [pc, #48]	; (2c98 <usb_serial_write_buffer_free+0x44>)
	tx_noautoflush = 1;
    2c66:	f888 3000 	strb.w	r3, [r8]
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    2c6a:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    2c6c:	4628      	mov	r0, r5
    2c6e:	3520      	adds	r5, #32
int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    2c70:	42a3      	cmp	r3, r4

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    2c72:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
    2c76:	d005      	beq.n	2c84 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    2c78:	f7ff fc94 	bl	25a4 <usb_transfer_status>
    2c7c:	0603      	lsls	r3, r0, #24
    2c7e:	bf58      	it	pl
    2c80:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    2c84:	2c04      	cmp	r4, #4
    2c86:	d1f0      	bne.n	2c6a <usb_serial_write_buffer_free+0x16>
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    2c88:	2300      	movs	r3, #0
	return sum;
}
    2c8a:	4638      	mov	r0, r7
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    2c8c:	f888 3000 	strb.w	r3, [r8]
	return sum;
}
    2c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2c94:	20014da0 	.word	0x20014da0
    2c98:	20014c4f 	.word	0x20014c4f
    2c9c:	20014c4e 	.word	0x20014c4e

00002ca0 <usb_serial_flush_output>:

void usb_serial_flush_output(void)
{
    2ca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	if (!usb_configuration) return;
    2ca4:	4b1f      	ldr	r3, [pc, #124]	; (2d24 <usb_serial_flush_output+0x84>)
    2ca6:	781b      	ldrb	r3, [r3, #0]
    2ca8:	b113      	cbz	r3, 2cb0 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    2caa:	4d1f      	ldr	r5, [pc, #124]	; (2d28 <usb_serial_flush_output+0x88>)
    2cac:	882a      	ldrh	r2, [r5, #0]
    2cae:	b90a      	cbnz	r2, 2cb4 <usb_serial_flush_output+0x14>
    2cb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    2cb4:	f8df 8084 	ldr.w	r8, [pc, #132]	; 2d3c <usb_serial_flush_output+0x9c>
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    2cb8:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    2cbc:	4e1b      	ldr	r6, [pc, #108]	; (2d2c <usb_serial_flush_output+0x8c>)
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    2cbe:	f04f 0e01 	mov.w	lr, #1
	transfer_t *xfer = tx_transfer + tx_head;
    2cc2:	f898 1000 	ldrb.w	r1, [r8]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    2cc6:	464a      	mov	r2, r9

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    2cc8:	4c19      	ldr	r4, [pc, #100]	; (2d30 <usb_serial_flush_output+0x90>)
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    2cca:	2300      	movs	r3, #0
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    2ccc:	eb06 1641 	add.w	r6, r6, r1, lsl #5
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    2cd0:	4f18      	ldr	r7, [pc, #96]	; (2d34 <usb_serial_flush_output+0x94>)
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    2cd2:	eb04 24c1 	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    2cd6:	4630      	mov	r0, r6
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    2cd8:	f887 e000 	strb.w	lr, [r7]
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    2cdc:	4621      	mov	r1, r4
    2cde:	f7ff fc23 	bl	2528 <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    2ce2:	eb09 0204 	add.w	r2, r9, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    2ce6:	f024 011f 	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    2cea:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    2cee:	4b12      	ldr	r3, [pc, #72]	; (2d38 <usb_serial_flush_output+0x98>)
    2cf0:	6019      	str	r1, [r3, #0]
		location += 32;
    2cf2:	3120      	adds	r1, #32
	} while (location < end_addr);
    2cf4:	428a      	cmp	r2, r1
    2cf6:	d8fb      	bhi.n	2cf0 <usb_serial_flush_output+0x50>
	asm("dsb");
    2cf8:	f3bf 8f4f 	dsb	sy
	asm("isb");
    2cfc:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    2d00:	2004      	movs	r0, #4
    2d02:	4631      	mov	r1, r6
    2d04:	f7ff fc28 	bl	2558 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    2d08:	f898 3000 	ldrb.w	r3, [r8]
    2d0c:	4a0b      	ldr	r2, [pc, #44]	; (2d3c <usb_serial_flush_output+0x9c>)
    2d0e:	3301      	adds	r3, #1
    2d10:	b2db      	uxtb	r3, r3
    2d12:	2b03      	cmp	r3, #3
    2d14:	bf88      	it	hi
    2d16:	2300      	movhi	r3, #0
    2d18:	7013      	strb	r3, [r2, #0]
	tx_available = 0;
    2d1a:	2300      	movs	r3, #0
    2d1c:	802b      	strh	r3, [r5, #0]
	tx_noautoflush = 0;
    2d1e:	703b      	strb	r3, [r7, #0]
    2d20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2d24:	20014c38 	.word	0x20014c38
    2d28:	20014d86 	.word	0x20014d86
    2d2c:	20014da0 	.word	0x20014da0
    2d30:	20201060 	.word	0x20201060
    2d34:	20014c4e 	.word	0x20014c4e
    2d38:	e000ef70 	.word	0xe000ef70
    2d3c:	20014c4f 	.word	0x20014c4f

00002d40 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    2d40:	b570      	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    2d42:	f3ef 8110 	mrs	r1, PRIMASK
		__disable_irq();
    2d46:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    2d48:	4c0c      	ldr	r4, [pc, #48]	; (2d7c <EventResponder::runFromInterrupt()+0x3c>)
    2d4a:	6823      	ldr	r3, [r4, #0]
		if (first) {
    2d4c:	b18b      	cbz	r3, 2d72 <EventResponder::runFromInterrupt()+0x32>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    2d4e:	4e0c      	ldr	r6, [pc, #48]	; (2d80 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    2d50:	2500      	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    2d52:	695a      	ldr	r2, [r3, #20]
    2d54:	6022      	str	r2, [r4, #0]
			if (firstInterrupt) {
    2d56:	b17a      	cbz	r2, 2d78 <EventResponder::runFromInterrupt()+0x38>
				firstInterrupt->_prev = nullptr;
    2d58:	6195      	str	r5, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    2d5a:	b901      	cbnz	r1, 2d5e <EventResponder::runFromInterrupt()+0x1e>
    2d5c:	b662      	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    2d5e:	775d      	strb	r5, [r3, #29]
			(*(first->_function))(*first);
    2d60:	4618      	mov	r0, r3
    2d62:	689b      	ldr	r3, [r3, #8]
    2d64:	4798      	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    2d66:	f3ef 8110 	mrs	r1, PRIMASK
		__disable_irq();
    2d6a:	b672      	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    2d6c:	6823      	ldr	r3, [r4, #0]
		if (first) {
    2d6e:	2b00      	cmp	r3, #0
    2d70:	d1ef      	bne.n	2d52 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    2d72:	b901      	cbnz	r1, 2d76 <EventResponder::runFromInterrupt()+0x36>
    2d74:	b662      	cpsie	i
    2d76:	bd70      	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    2d78:	6032      	str	r2, [r6, #0]
    2d7a:	e7ee      	b.n	2d5a <EventResponder::runFromInterrupt()+0x1a>
    2d7c:	20014e20 	.word	0x20014e20
    2d80:	20014e24 	.word	0x20014e24

00002d84 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

extern "C" void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    2d84:	f7ff bfdc 	b.w	2d40 <EventResponder::runFromInterrupt()>

00002d88 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    2d88:	4a04      	ldr	r2, [pc, #16]	; (2d9c <systick_isr+0x14>)
    2d8a:	4b05      	ldr	r3, [pc, #20]	; (2da0 <systick_isr+0x18>)
    2d8c:	6811      	ldr	r1, [r2, #0]
	systick_millis_count++;
    2d8e:	4a05      	ldr	r2, [pc, #20]	; (2da4 <systick_isr+0x1c>)
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    2d90:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    2d92:	6813      	ldr	r3, [r2, #0]
    2d94:	3301      	adds	r3, #1
    2d96:	6013      	str	r3, [r2, #0]
    2d98:	4770      	bx	lr
    2d9a:	bf00      	nop
    2d9c:	e0001004 	.word	0xe0001004
    2da0:	20014be4 	.word	0x20014be4
    2da4:	20014bec 	.word	0x20014bec

00002da8 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    2da8:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    2daa:	f7fd fa61 	bl	270 <setup>
	while (1) {
		loop();
    2dae:	f7fd fae5 	bl	37c <loop>
		yield();
    2db2:	f000 f871 	bl	2e98 <yield>
    2db6:	e7fa      	b.n	2dae <main+0x6>

00002db8 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    2db8:	b510      	push	{r4, lr}
	uint8_t buf[2]={'\r', '\n'};
    2dba:	4c06      	ldr	r4, [pc, #24]	; (2dd4 <Print::println()+0x1c>)
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    2dbc:	b082      	sub	sp, #8
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    2dbe:	6803      	ldr	r3, [r0, #0]
    2dc0:	2202      	movs	r2, #2
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    2dc2:	8824      	ldrh	r4, [r4, #0]
	return write(buf, 2);
    2dc4:	a901      	add	r1, sp, #4
    2dc6:	685b      	ldr	r3, [r3, #4]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    2dc8:	f8ad 4004 	strh.w	r4, [sp, #4]
	return write(buf, 2);
    2dcc:	4798      	blx	r3
}
    2dce:	b002      	add	sp, #8
    2dd0:	bd10      	pop	{r4, pc}
    2dd2:	bf00      	nop
    2dd4:	20000428 	.word	0x20000428

00002dd8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	return vdprintf((int)this, (const char *)format, ap);
#endif
}

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    2dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2dda:	4606      	mov	r6, r0
    2ddc:	b08b      	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    2dde:	2a00      	cmp	r2, #0
    2de0:	d033      	beq.n	2e4a <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    2de2:	2a01      	cmp	r2, #1
    2de4:	bf08      	it	eq
    2de6:	220a      	moveq	r2, #10
	}


	if (n == 0) {
    2de8:	b351      	cbz	r1, 2e40 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    2dea:	2521      	movs	r5, #33	; 0x21
    2dec:	e000      	b.n	2df0 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    2dee:	b2fd      	uxtb	r5, r7
    2df0:	1e6f      	subs	r7, r5, #1
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    2df2:	fbb1 f4f2 	udiv	r4, r1, r2
    2df6:	fb02 1114 	mls	r1, r2, r4, r1
    2dfa:	b2c8      	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    2dfc:	2909      	cmp	r1, #9
    2dfe:	f100 0137 	add.w	r1, r0, #55	; 0x37
    2e02:	f100 0030 	add.w	r0, r0, #48	; 0x30
    2e06:	bf88      	it	hi
    2e08:	b2c8      	uxtbhi	r0, r1
			n /= base;
			if (n == 0) break;
    2e0a:	4621      	mov	r1, r4
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    2e0c:	ac0a      	add	r4, sp, #40	; 0x28
    2e0e:	bf98      	it	ls
    2e10:	b2c0      	uxtbls	r0, r0
    2e12:	442c      	add	r4, r5
    2e14:	f804 0c24 	strb.w	r0, [r4, #-36]
			n /= base;
			if (n == 0) break;
    2e18:	2900      	cmp	r1, #0
    2e1a:	d1e8      	bne.n	2dee <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    2e1c:	b133      	cbz	r3, 2e2c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    2e1e:	3d01      	subs	r5, #1
		buf[i] = '-';
    2e20:	ab0a      	add	r3, sp, #40	; 0x28
    2e22:	222d      	movs	r2, #45	; 0x2d
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
		i--;
    2e24:	b2ed      	uxtb	r5, r5
		buf[i] = '-';
    2e26:	442b      	add	r3, r5
    2e28:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    2e2c:	6833      	ldr	r3, [r6, #0]
    2e2e:	a901      	add	r1, sp, #4
    2e30:	f1c5 0222 	rsb	r2, r5, #34	; 0x22
    2e34:	4630      	mov	r0, r6
    2e36:	4429      	add	r1, r5
    2e38:	685b      	ldr	r3, [r3, #4]
    2e3a:	4798      	blx	r3
}
    2e3c:	b00b      	add	sp, #44	; 0x2c
    2e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    2e40:	2230      	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    2e42:	2521      	movs	r5, #33	; 0x21
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    2e44:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
    2e48:	e7e8      	b.n	2e1c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    2e4a:	6803      	ldr	r3, [r0, #0]
    2e4c:	b2c9      	uxtb	r1, r1
    2e4e:	681b      	ldr	r3, [r3, #0]
    2e50:	4798      	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    2e52:	b00b      	add	sp, #44	; 0x2c
    2e54:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2e56:	bf00      	nop

00002e58 <Print::print(long)>:

size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
    2e58:	2900      	cmp	r1, #0
    2e5a:	db03      	blt.n	2e64 <Print::print(long)+0xc>
}


size_t Print::print(long n)
{
	uint8_t sign=0;
    2e5c:	2300      	movs	r3, #0

	if (n < 0) {
		sign = '-';
		n = -n;
	}
	return printNumber(n, 10, sign);
    2e5e:	220a      	movs	r2, #10
    2e60:	f7ff bfba 	b.w	2dd8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
		n = -n;
    2e64:	4249      	negs	r1, r1
size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
    2e66:	232d      	movs	r3, #45	; 0x2d
		n = -n;
	}
	return printNumber(n, 10, sign);
    2e68:	220a      	movs	r2, #10
    2e6a:	f7ff bfb5 	b.w	2dd8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    2e6e:	bf00      	nop

00002e70 <usb_serial_class::clear()>:
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    2e70:	f7ff be84 	b.w	2b7c <usb_serial_flush_input>

00002e74 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    2e74:	f7ff be5a 	b.w	2b2c <usb_serial_peekchar>

00002e78 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    2e78:	f7ff beba 	b.w	2bf0 <usb_serial_getchar>

00002e7c <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    2e7c:	f7ff be78 	b.w	2b70 <usb_serial_available>

00002e80 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    2e80:	f7ff bf0e 	b.w	2ca0 <usb_serial_flush_output>

00002e84 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    2e84:	f7ff bee6 	b.w	2c54 <usb_serial_write_buffer_free>

00002e88 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    2e88:	4608      	mov	r0, r1
    2e8a:	4611      	mov	r1, r2
    2e8c:	f7ff bed6 	b.w	2c3c <usb_serial_write>

00002e90 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    2e90:	4608      	mov	r0, r1
    2e92:	f7ff bebd 	b.w	2c10 <usb_serial_putchar>
    2e96:	bf00      	nop

00002e98 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    2e98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    2e9c:	4e32      	ldr	r6, [pc, #200]	; (2f68 <yield+0xd0>)
    2e9e:	7833      	ldrb	r3, [r6, #0]
    2ea0:	b193      	cbz	r3, 2ec8 <yield+0x30>
	if (running) return; // TODO: does this need to be atomic?
    2ea2:	4f32      	ldr	r7, [pc, #200]	; (2f6c <yield+0xd4>)
    2ea4:	783a      	ldrb	r2, [r7, #0]
    2ea6:	b97a      	cbnz	r2, 2ec8 <yield+0x30>
	running = 1;
    2ea8:	2201      	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    2eaa:	07d9      	lsls	r1, r3, #31
void yield(void)
{
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    2eac:	703a      	strb	r2, [r7, #0]


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    2eae:	d437      	bmi.n	2f20 <yield+0x88>
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();
    2eb0:	079a      	lsls	r2, r3, #30
    2eb2:	d419      	bmi.n	2ee8 <yield+0x50>

	running = 0;
    2eb4:	2200      	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    2eb6:	075b      	lsls	r3, r3, #29
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();

	running = 0;
    2eb8:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    2eba:	d505      	bpl.n	2ec8 <yield+0x30>
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    2ebc:	4b2c      	ldr	r3, [pc, #176]	; (2f70 <yield+0xd8>)
    2ebe:	681a      	ldr	r2, [r3, #0]
    2ec0:	b112      	cbz	r2, 2ec8 <yield+0x30>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    2ec2:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    2ec6:	b10a      	cbz	r2, 2ecc <yield+0x34>
    2ec8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    2ecc:	f3ef 8010 	mrs	r0, PRIMASK
		__disable_irq();
    2ed0:	b672      	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    2ed2:	681a      	ldr	r2, [r3, #0]
		if (first == nullptr) {
    2ed4:	b11a      	cbz	r2, 2ede <yield+0x46>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    2ed6:	4c27      	ldr	r4, [pc, #156]	; (2f74 <yield+0xdc>)
    2ed8:	7821      	ldrb	r1, [r4, #0]
    2eda:	2900      	cmp	r1, #0
    2edc:	d02f      	beq.n	2f3e <yield+0xa6>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    2ede:	2800      	cmp	r0, #0
    2ee0:	d1f2      	bne.n	2ec8 <yield+0x30>
    2ee2:	b662      	cpsie	i
    2ee4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    2ee8:	f8df 8094 	ldr.w	r8, [pc, #148]	; 2f80 <yield+0xe8>
    2eec:	f898 2000 	ldrb.w	r2, [r8]
    2ef0:	2a00      	cmp	r2, #0
    2ef2:	d0df      	beq.n	2eb4 <yield+0x1c>
    2ef4:	2400      	movs	r4, #0
    2ef6:	f8df 908c 	ldr.w	r9, [pc, #140]	; 2f84 <yield+0xec>
    2efa:	e005      	b.n	2f08 <yield+0x70>
    2efc:	3401      	adds	r4, #1
    2efe:	f898 3000 	ldrb.w	r3, [r8]
    2f02:	b2e4      	uxtb	r4, r4
    2f04:	42a3      	cmp	r3, r4
    2f06:	d913      	bls.n	2f30 <yield+0x98>
			s_serials_with_serial_events[i]->doYieldCode();
    2f08:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
	static HardwareSerial 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    2f0c:	682b      	ldr	r3, [r5, #0]
    2f0e:	4628      	mov	r0, r5
    2f10:	691b      	ldr	r3, [r3, #16]
    2f12:	4798      	blx	r3
    2f14:	2800      	cmp	r0, #0
    2f16:	d0f1      	beq.n	2efc <yield+0x64>
    2f18:	696b      	ldr	r3, [r5, #20]
    2f1a:	689b      	ldr	r3, [r3, #8]
    2f1c:	4798      	blx	r3
    2f1e:	e7ed      	b.n	2efc <yield+0x64>
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    2f20:	f7ff fe26 	bl	2b70 <usb_serial_available>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    2f24:	b9d0      	cbnz	r0, 2f5c <yield+0xc4>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    2f26:	4b14      	ldr	r3, [pc, #80]	; (2f78 <yield+0xe0>)
    2f28:	781b      	ldrb	r3, [r3, #0]
    2f2a:	b91b      	cbnz	r3, 2f34 <yield+0x9c>
    2f2c:	7833      	ldrb	r3, [r6, #0]
    2f2e:	e7bf      	b.n	2eb0 <yield+0x18>
    2f30:	7833      	ldrb	r3, [r6, #0]
    2f32:	e7bf      	b.n	2eb4 <yield+0x1c>
    2f34:	7833      	ldrb	r3, [r6, #0]
    2f36:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    2f3a:	7033      	strb	r3, [r6, #0]
    2f3c:	e7b8      	b.n	2eb0 <yield+0x18>
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    2f3e:	2601      	movs	r6, #1
		firstYield = first->_next;
    2f40:	6955      	ldr	r5, [r2, #20]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    2f42:	7026      	strb	r6, [r4, #0]
		firstYield = first->_next;
    2f44:	601d      	str	r5, [r3, #0]
		if (firstYield) {
    2f46:	b165      	cbz	r5, 2f62 <yield+0xca>
			firstYield->_prev = nullptr;
    2f48:	61a9      	str	r1, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    2f4a:	b900      	cbnz	r0, 2f4e <yield+0xb6>
    2f4c:	b662      	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    2f4e:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    2f50:	6893      	ldr	r3, [r2, #8]
    2f52:	4610      	mov	r0, r2
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    2f54:	7755      	strb	r5, [r2, #29]
		(*(first->_function))(*first);
    2f56:	4798      	blx	r3
		runningFromYield = false;
    2f58:	7025      	strb	r5, [r4, #0]
    2f5a:	e7b5      	b.n	2ec8 <yield+0x30>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    2f5c:	f000 fa32 	bl	33c4 <serialEvent()>
    2f60:	e7e1      	b.n	2f26 <yield+0x8e>
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    2f62:	4b06      	ldr	r3, [pc, #24]	; (2f7c <yield+0xe4>)
    2f64:	601d      	str	r5, [r3, #0]
    2f66:	e7f0      	b.n	2f4a <yield+0xb2>
    2f68:	20012404 	.word	0x20012404
    2f6c:	20014e31 	.word	0x20014e31
    2f70:	20014e2c 	.word	0x20014e2c
    2f74:	20014e30 	.word	0x20014e30
    2f78:	60001726 	.word	0x60001726
    2f7c:	20014e28 	.word	0x20014e28
    2f80:	20014e50 	.word	0x20014e50
    2f84:	20014e34 	.word	0x20014e34

00002f88 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    2f88:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    2f8a:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    2f8e:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    2f92:	d16d      	bne.n	3070 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    2f94:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    2f96:	d341      	bcc.n	301c <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    2f98:	f851 3b04 	ldr.w	r3, [r1], #4
    2f9c:	f840 3b04 	str.w	r3, [r0], #4
    2fa0:	f851 3b04 	ldr.w	r3, [r1], #4
    2fa4:	f840 3b04 	str.w	r3, [r0], #4
    2fa8:	f851 3b04 	ldr.w	r3, [r1], #4
    2fac:	f840 3b04 	str.w	r3, [r0], #4
    2fb0:	f851 3b04 	ldr.w	r3, [r1], #4
    2fb4:	f840 3b04 	str.w	r3, [r0], #4
    2fb8:	f851 3b04 	ldr.w	r3, [r1], #4
    2fbc:	f840 3b04 	str.w	r3, [r0], #4
    2fc0:	f851 3b04 	ldr.w	r3, [r1], #4
    2fc4:	f840 3b04 	str.w	r3, [r0], #4
    2fc8:	f851 3b04 	ldr.w	r3, [r1], #4
    2fcc:	f840 3b04 	str.w	r3, [r0], #4
    2fd0:	f851 3b04 	ldr.w	r3, [r1], #4
    2fd4:	f840 3b04 	str.w	r3, [r0], #4
    2fd8:	f851 3b04 	ldr.w	r3, [r1], #4
    2fdc:	f840 3b04 	str.w	r3, [r0], #4
    2fe0:	f851 3b04 	ldr.w	r3, [r1], #4
    2fe4:	f840 3b04 	str.w	r3, [r0], #4
    2fe8:	f851 3b04 	ldr.w	r3, [r1], #4
    2fec:	f840 3b04 	str.w	r3, [r0], #4
    2ff0:	f851 3b04 	ldr.w	r3, [r1], #4
    2ff4:	f840 3b04 	str.w	r3, [r0], #4
    2ff8:	f851 3b04 	ldr.w	r3, [r1], #4
    2ffc:	f840 3b04 	str.w	r3, [r0], #4
    3000:	f851 3b04 	ldr.w	r3, [r1], #4
    3004:	f840 3b04 	str.w	r3, [r0], #4
    3008:	f851 3b04 	ldr.w	r3, [r1], #4
    300c:	f840 3b04 	str.w	r3, [r0], #4
    3010:	f851 3b04 	ldr.w	r3, [r1], #4
    3014:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    3018:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    301a:	d2bd      	bcs.n	2f98 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    301c:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    301e:	d311      	bcc.n	3044 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    3020:	f851 3b04 	ldr.w	r3, [r1], #4
    3024:	f840 3b04 	str.w	r3, [r0], #4
    3028:	f851 3b04 	ldr.w	r3, [r1], #4
    302c:	f840 3b04 	str.w	r3, [r0], #4
    3030:	f851 3b04 	ldr.w	r3, [r1], #4
    3034:	f840 3b04 	str.w	r3, [r0], #4
    3038:	f851 3b04 	ldr.w	r3, [r1], #4
    303c:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    3040:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    3042:	d2ed      	bcs.n	3020 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    3044:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    3046:	d305      	bcc.n	3054 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    3048:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    304c:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    3050:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    3052:	d2f9      	bcs.n	3048 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    3054:	3204      	adds	r2, #4
	beq	.Ldone
    3056:	d008      	beq.n	306a <memcpy+0xe2>

	lsls	r2, r2, #31
    3058:	07d2      	lsls	r2, r2, #31
	itt ne
    305a:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    305c:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    3060:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    3064:	d301      	bcc.n	306a <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    3066:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    3068:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    306a:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    306c:	4770      	bx	lr
    306e:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    3070:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    3072:	d313      	bcc.n	309c <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    3074:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    3076:	d08d      	beq.n	2f94 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    3078:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    307c:	d08a      	beq.n	2f94 <memcpy+0xc>

	rsb	r3, #4
    307e:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    3082:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    3084:	07db      	lsls	r3, r3, #31
	itt ne
    3086:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    3088:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    308c:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    3090:	d380      	bcc.n	2f94 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    3092:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    3096:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    309a:	e77b      	b.n	2f94 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    309c:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    309e:	d3d9      	bcc.n	3054 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    30a0:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    30a2:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    30a6:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    30aa:	d2f9      	bcs.n	30a0 <memcpy+0x118>

	ldrb	r3, [r1]
    30ac:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    30ae:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    30b0:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    30b2:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    30b4:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    30b6:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    30b8:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    30ba:	4770      	bx	lr

000030bc <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    30bc:	b4f0      	push	{r4, r5, r6, r7}
    30be:	1e4e      	subs	r6, r1, #1
	unsigned digit;
	int i=0, j;
    30c0:	2500      	movs	r5, #0
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    30c2:	4637      	mov	r7, r6
    30c4:	e000      	b.n	30c8 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    30c6:	3501      	adds	r5, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    30c8:	fbb0 f3f2 	udiv	r3, r0, r2
    30cc:	fb02 0013 	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    30d0:	f100 0437 	add.w	r4, r0, #55	; 0x37
    30d4:	2809      	cmp	r0, #9
    30d6:	f100 0030 	add.w	r0, r0, #48	; 0x30
    30da:	b2e4      	uxtb	r4, r4
    30dc:	bf98      	it	ls
    30de:	b2c4      	uxtbls	r4, r0
		val /= radix;
		if (val == 0) break;
    30e0:	4618      	mov	r0, r3
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    30e2:	f807 4f01 	strb.w	r4, [r7, #1]!
		val /= radix;
		if (val == 0) break;
    30e6:	2b00      	cmp	r3, #0
    30e8:	d1ed      	bne.n	30c6 <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    30ea:	194a      	adds	r2, r1, r5
    30ec:	7053      	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    30ee:	b14d      	cbz	r5, 3104 <ultoa+0x48>
    30f0:	3301      	adds	r3, #1
		t = buf[j];
    30f2:	f816 4f01 	ldrb.w	r4, [r6, #1]!
		buf[j] = buf[i];
    30f6:	7817      	ldrb	r7, [r2, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    30f8:	1ae8      	subs	r0, r5, r3
		t = buf[j];
		buf[j] = buf[i];
    30fa:	7037      	strb	r7, [r6, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    30fc:	4283      	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    30fe:	f802 4901 	strb.w	r4, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    3102:	dbf5      	blt.n	30f0 <ultoa+0x34>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    3104:	4608      	mov	r0, r1
    3106:	bcf0      	pop	{r4, r5, r6, r7}
    3108:	4770      	bx	lr
    310a:	bf00      	nop

0000310c <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    310c:	48a4      	ldr	r0, [pc, #656]	; (33a0 <pwm_init+0x294>)
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    310e:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    3112:	4ba4      	ldr	r3, [pc, #656]	; (33a4 <pwm_init+0x298>)
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    3114:	6f82      	ldr	r2, [r0, #120]	; 0x78
    3116:	f442 027f 	orr.w	r2, r2, #16711680	; 0xff0000
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

void pwm_init(void)
{
    311a:	b5f0      	push	{r4, r5, r6, r7, lr}
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    311c:	6782      	str	r2, [r0, #120]	; 0x78
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    311e:	2500      	movs	r5, #0
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    3120:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    3124:	f44f 4670 	mov.w	r6, #61440	; 0xf000
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    3128:	4c9f      	ldr	r4, [pc, #636]	; (33a8 <pwm_init+0x29c>)
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    312a:	f44f 4e60 	mov.w	lr, #57344	; 0xe000

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    312e:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    3130:	f44f 6780 	mov.w	r7, #1024	; 0x400
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    3134:	4314      	orrs	r4, r2
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    3136:	462a      	mov	r2, r5
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    3138:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    313c:	f8a3 618c 	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    3140:	f248 26b8 	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    3144:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    3148:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    314c:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
    3150:	b280      	uxth	r0, r0
    3152:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
    3156:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
    315a:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    315e:	4b91      	ldr	r3, [pc, #580]	; (33a4 <pwm_init+0x298>)
	for (i=0; i < 4; i++) {
    3160:	3101      	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    3162:	2500      	movs	r5, #0
    3164:	0140      	lsls	r0, r0, #5
    3166:	461c      	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    3168:	2904      	cmp	r1, #4
    316a:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    316c:	f8a3 e004 	strh.w	lr, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    3170:	80df      	strh	r7, [r3, #6]
		p->SM[i].OCTRL = 0;
    3172:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    3174:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    3176:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    3178:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    317a:	81de      	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    317c:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    317e:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    3180:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    3182:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    3184:	d1e9      	bne.n	315a <pwm_init+0x4e>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3186:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    318a:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    318e:	4b87      	ldr	r3, [pc, #540]	; (33ac <pwm_init+0x2a0>)
    3190:	f44f 4670 	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3194:	b280      	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    3196:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    3198:	f44f 4760 	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    319c:	462a      	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    319e:	ea40 000c 	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    31a2:	f44f 6e80 	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    31a6:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    31aa:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
    31ae:	b280      	uxth	r0, r0
    31b0:	f440 6070 	orr.w	r0, r0, #3840	; 0xf00
    31b4:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    31b8:	f8a3 618c 	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    31bc:	f248 26b8 	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    31c0:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    31c4:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    31c8:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
    31cc:	b280      	uxth	r0, r0
    31ce:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
    31d2:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
    31d6:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    31da:	4b74      	ldr	r3, [pc, #464]	; (33ac <pwm_init+0x2a0>)
	for (i=0; i < 4; i++) {
    31dc:	3101      	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    31de:	2500      	movs	r5, #0
    31e0:	0140      	lsls	r0, r0, #5
    31e2:	461c      	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    31e4:	2904      	cmp	r1, #4
    31e6:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    31e8:	809f      	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    31ea:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    31ee:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    31f0:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    31f2:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    31f4:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    31f6:	81de      	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    31f8:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    31fa:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    31fc:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    31fe:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    3200:	d1e9      	bne.n	31d6 <pwm_init+0xca>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3202:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    3206:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    320a:	4b69      	ldr	r3, [pc, #420]	; (33b0 <pwm_init+0x2a4>)
    320c:	f44f 4670 	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3210:	b280      	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    3212:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    3214:	f44f 4760 	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    3218:	462a      	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    321a:	ea40 000c 	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    321e:	f44f 6e80 	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3222:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    3226:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
    322a:	b280      	uxth	r0, r0
    322c:	f440 6070 	orr.w	r0, r0, #3840	; 0xf00
    3230:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    3234:	f8a3 618c 	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    3238:	f248 26b8 	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    323c:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    3240:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    3244:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
    3248:	b280      	uxth	r0, r0
    324a:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
    324e:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
    3252:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    3256:	4b56      	ldr	r3, [pc, #344]	; (33b0 <pwm_init+0x2a4>)
	for (i=0; i < 4; i++) {
    3258:	3101      	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    325a:	2500      	movs	r5, #0
    325c:	0140      	lsls	r0, r0, #5
    325e:	461c      	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    3260:	2904      	cmp	r1, #4
    3262:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    3264:	809f      	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    3266:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    326a:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    326c:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    326e:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    3270:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    3272:	81de      	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    3274:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    3276:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    3278:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    327a:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    327c:	d1e9      	bne.n	3252 <pwm_init+0x146>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    327e:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    3282:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    3286:	4b4b      	ldr	r3, [pc, #300]	; (33b4 <pwm_init+0x2a8>)
    3288:	f44f 4770 	mov.w	r7, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    328c:	b280      	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    328e:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    3290:	f44f 4660 	mov.w	r6, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    3294:	462a      	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3296:	ea40 000c 	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    329a:	f44f 6e80 	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    329e:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    32a2:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
    32a6:	b280      	uxth	r0, r0
    32a8:	f440 6070 	orr.w	r0, r0, #3840	; 0xf00
    32ac:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    32b0:	f8a3 718c 	strh.w	r7, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    32b4:	f248 27b8 	movw	r7, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    32b8:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    32bc:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    32c0:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
    32c4:	b280      	uxth	r0, r0
    32c6:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
    32ca:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
    32ce:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    32d2:	4b38      	ldr	r3, [pc, #224]	; (33b4 <pwm_init+0x2a8>)
	for (i=0; i < 4; i++) {
    32d4:	3101      	adds	r1, #1
    32d6:	0140      	lsls	r0, r0, #5
    32d8:	461c      	mov	r4, r3
    32da:	2904      	cmp	r1, #4
    32dc:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    32de:	809e      	strh	r6, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    32e0:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    32e4:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    32e6:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    32e8:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    32ea:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    32ec:	81df      	strh	r7, [r3, #14]
		p->SM[i].VAL2 = 0;
    32ee:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    32f0:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    32f2:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    32f4:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    32f6:	d1ea      	bne.n	32ce <pwm_init+0x1c2>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    32f8:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    32fc:	270f      	movs	r7, #15

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    32fe:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    3300:	f241 0601 	movw	r6, #4097	; 0x1001
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3304:	b29b      	uxth	r3, r3
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    3306:	f645 5ec0 	movw	lr, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    330a:	4611      	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    330c:	f243 0526 	movw	r5, #12326	; 0x3026
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3310:	433b      	orrs	r3, r7
    3312:	f8a4 3188 	strh.w	r3, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    3316:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
    331a:	b29b      	uxth	r3, r3
    331c:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    3320:	f8a4 3188 	strh.w	r3, [r4, #392]	; 0x188
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    3324:	0150      	lsls	r0, r2, #5
    3326:	4b24      	ldr	r3, [pc, #144]	; (33b8 <pwm_init+0x2ac>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    3328:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    332a:	4403      	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    332c:	2a04      	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    332e:	8199      	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    3330:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    3332:	81df      	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    3334:	829e      	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    3336:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    333a:	8019      	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    333c:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    333e:	819d      	strh	r5, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    3340:	d1f0      	bne.n	3324 <pwm_init+0x218>
    3342:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    3344:	270f      	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    3346:	f241 0601 	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    334a:	f645 55c0 	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    334e:	4611      	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    3350:	f243 0426 	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    3354:	0150      	lsls	r0, r2, #5
    3356:	4b19      	ldr	r3, [pc, #100]	; (33bc <pwm_init+0x2b0>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    3358:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    335a:	4403      	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    335c:	2a04      	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    335e:	8199      	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    3360:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    3362:	81df      	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    3364:	829e      	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    3366:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    3368:	8019      	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    336a:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    336c:	819c      	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    336e:	d1f1      	bne.n	3354 <pwm_init+0x248>
    3370:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    3372:	270f      	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    3374:	f241 0601 	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    3378:	f645 55c0 	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    337c:	4611      	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    337e:	f243 0426 	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    3382:	0150      	lsls	r0, r2, #5
    3384:	4b0e      	ldr	r3, [pc, #56]	; (33c0 <pwm_init+0x2b4>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    3386:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    3388:	4403      	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    338a:	2a04      	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    338c:	8199      	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    338e:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    3390:	81df      	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    3392:	829e      	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    3394:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    3396:	8019      	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    3398:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    339a:	819c      	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    339c:	d1f1      	bne.n	3382 <pwm_init+0x276>
	flexpwm_init(&IMXRT_FLEXPWM3);
	flexpwm_init(&IMXRT_FLEXPWM4);
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    339e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    33a0:	400fc000 	.word	0x400fc000
    33a4:	403dc000 	.word	0x403dc000
    33a8:	fc030000 	.word	0xfc030000
    33ac:	403e0000 	.word	0x403e0000
    33b0:	403e4000 	.word	0x403e4000
    33b4:	403e8000 	.word	0x403e8000
    33b8:	401dc000 	.word	0x401dc000
    33bc:	401e0000 	.word	0x401e0000
    33c0:	401e4000 	.word	0x401e4000

000033c4 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
    33c4:	4770      	bx	lr
    33c6:	bf00      	nop

000033c8 <arm_max_q15>:
    33c8:	f101 3cff 	add.w	ip, r1, #4294967295
    33cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    33d0:	ea5f 0a9c 	movs.w	sl, ip, lsr #2
    33d4:	f100 0902 	add.w	r9, r0, #2
    33d8:	f9b0 4000 	ldrsh.w	r4, [r0]
    33dc:	d049      	beq.n	3472 <arm_max_q15+0xaa>
    33de:	300a      	adds	r0, #10
    33e0:	46d0      	mov	r8, sl
    33e2:	f04f 0e04 	mov.w	lr, #4
    33e6:	2700      	movs	r7, #0
    33e8:	f930 5c08 	ldrsh.w	r5, [r0, #-8]
    33ec:	f1ae 0603 	sub.w	r6, lr, #3
    33f0:	f930 bc06 	ldrsh.w	fp, [r0, #-6]
    33f4:	3008      	adds	r0, #8
    33f6:	42a5      	cmp	r5, r4
    33f8:	bfc8      	it	gt
    33fa:	4637      	movgt	r7, r6
    33fc:	42ac      	cmp	r4, r5
    33fe:	f930 6c0c 	ldrsh.w	r6, [r0, #-12]
    3402:	bfb8      	it	lt
    3404:	462c      	movlt	r4, r5
    3406:	f1ae 0502 	sub.w	r5, lr, #2
    340a:	455c      	cmp	r4, fp
    340c:	bfb8      	it	lt
    340e:	462f      	movlt	r7, r5
    3410:	455c      	cmp	r4, fp
    3412:	bfb8      	it	lt
    3414:	465c      	movlt	r4, fp
    3416:	f10e 3bff 	add.w	fp, lr, #4294967295
    341a:	4625      	mov	r5, r4
    341c:	f930 4c0a 	ldrsh.w	r4, [r0, #-10]
    3420:	42b5      	cmp	r5, r6
    3422:	bfb8      	it	lt
    3424:	465f      	movlt	r7, fp
    3426:	42b5      	cmp	r5, r6
    3428:	bfb8      	it	lt
    342a:	4635      	movlt	r5, r6
    342c:	42a5      	cmp	r5, r4
    342e:	bfb8      	it	lt
    3430:	4677      	movlt	r7, lr
    3432:	42ac      	cmp	r4, r5
    3434:	f10e 0e04 	add.w	lr, lr, #4
    3438:	bfb8      	it	lt
    343a:	462c      	movlt	r4, r5
    343c:	f1b8 0801 	subs.w	r8, r8, #1
    3440:	d1d2      	bne.n	33e8 <arm_max_q15+0x20>
    3442:	eb09 09ca 	add.w	r9, r9, sl, lsl #3
    3446:	f01c 0c03 	ands.w	ip, ip, #3
    344a:	d014      	beq.n	3476 <arm_max_q15+0xae>
    344c:	ebcc 0c01 	rsb	ip, ip, r1
    3450:	f939 0b02 	ldrsh.w	r0, [r9], #2
    3454:	42a0      	cmp	r0, r4
    3456:	bfc8      	it	gt
    3458:	4667      	movgt	r7, ip
    345a:	42a0      	cmp	r0, r4
    345c:	f10c 0c01 	add.w	ip, ip, #1
    3460:	bfb8      	it	lt
    3462:	4620      	movlt	r0, r4
    3464:	4561      	cmp	r1, ip
    3466:	4604      	mov	r4, r0
    3468:	d1f2      	bne.n	3450 <arm_max_q15+0x88>
    346a:	8010      	strh	r0, [r2, #0]
    346c:	601f      	str	r7, [r3, #0]
    346e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3472:	4657      	mov	r7, sl
    3474:	e7e7      	b.n	3446 <arm_max_q15+0x7e>
    3476:	4620      	mov	r0, r4
    3478:	e7f7      	b.n	346a <arm_max_q15+0xa2>
    347a:	bf00      	nop

0000347c <arm_split_rfft_q15>:
    347c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3480:	f06f 4440 	mvn.w	r4, #3221225472	; 0xc0000000
    3484:	b083      	sub	sp, #12
    3486:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
    348a:	440c      	add	r4, r1
    348c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    348e:	9001      	str	r0, [sp, #4]
    3490:	3901      	subs	r1, #1
    3492:	ea4f 0b85 	mov.w	fp, r5, lsl #2
    3496:	ea4f 0084 	mov.w	r0, r4, lsl #2
    349a:	445a      	add	r2, fp
    349c:	445b      	add	r3, fp
    349e:	9000      	str	r0, [sp, #0]
    34a0:	d030      	beq.n	3504 <arm_split_rfft_q15+0x88>
    34a2:	f100 0904 	add.w	r9, r0, #4
    34a6:	9c01      	ldr	r4, [sp, #4]
    34a8:	980c      	ldr	r0, [sp, #48]	; 0x30
    34aa:	f1ae 0e08 	sub.w	lr, lr, #8
    34ae:	46a2      	mov	sl, r4
    34b0:	44a1      	add	r9, r4
    34b2:	f100 0808 	add.w	r8, r0, #8
    34b6:	4486      	add	lr, r0
    34b8:	f04f 0c00 	mov.w	ip, #0
    34bc:	f85a 4f04 	ldr.w	r4, [sl, #4]!
    34c0:	f852 000c 	ldr.w	r0, [r2, ip]
    34c4:	fb44 f500 	smusd	r5, r4, r0
    34c8:	f859 6d04 	ldr.w	r6, [r9, #-4]!
    34cc:	f853 700c 	ldr.w	r7, [r3, ip]
    34d0:	fb26 5507 	smlad	r5, r6, r7, r5
    34d4:	fb46 f617 	smusdx	r6, r6, r7
    34d8:	fb24 6010 	smladx	r0, r4, r0, r6
    34dc:	1400      	asrs	r0, r0, #16
    34de:	3901      	subs	r1, #1
    34e0:	ea4f 4425 	mov.w	r4, r5, asr #16
    34e4:	44dc      	add	ip, fp
    34e6:	f1c0 0500 	rsb	r5, r0, #0
    34ea:	f828 0c02 	strh.w	r0, [r8, #-2]
    34ee:	f828 4c04 	strh.w	r4, [r8, #-4]
    34f2:	f1ae 0e04 	sub.w	lr, lr, #4
    34f6:	f8ae 500a 	strh.w	r5, [lr, #10]
    34fa:	f108 0804 	add.w	r8, r8, #4
    34fe:	f8ae 4008 	strh.w	r4, [lr, #8]
    3502:	d1db      	bne.n	34bc <arm_split_rfft_q15+0x40>
    3504:	9c01      	ldr	r4, [sp, #4]
    3506:	980c      	ldr	r0, [sp, #48]	; 0x30
    3508:	9a00      	ldr	r2, [sp, #0]
    350a:	f9b4 3000 	ldrsh.w	r3, [r4]
    350e:	4402      	add	r2, r0
    3510:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
    3514:	1a1b      	subs	r3, r3, r0
    3516:	4611      	mov	r1, r2
    3518:	2200      	movs	r2, #0
    351a:	980c      	ldr	r0, [sp, #48]	; 0x30
    351c:	105b      	asrs	r3, r3, #1
    351e:	80ca      	strh	r2, [r1, #6]
    3520:	808b      	strh	r3, [r1, #4]
    3522:	f9b4 1000 	ldrsh.w	r1, [r4]
    3526:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
    352a:	8042      	strh	r2, [r0, #2]
    352c:	440b      	add	r3, r1
    352e:	105b      	asrs	r3, r3, #1
    3530:	8003      	strh	r3, [r0, #0]
    3532:	b003      	add	sp, #12
    3534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00003538 <arm_rfft_q15>:
    3538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    353c:	4616      	mov	r6, r2
    353e:	7902      	ldrb	r2, [r0, #4]
    3540:	b085      	sub	sp, #20
    3542:	6804      	ldr	r4, [r0, #0]
    3544:	6943      	ldr	r3, [r0, #20]
    3546:	2a01      	cmp	r2, #1
    3548:	4605      	mov	r5, r0
    354a:	460f      	mov	r7, r1
    354c:	ea4f 0454 	mov.w	r4, r4, lsr #1
    3550:	9303      	str	r3, [sp, #12]
    3552:	d00f      	beq.n	3574 <arm_rfft_q15+0x3c>
    3554:	4618      	mov	r0, r3
    3556:	796b      	ldrb	r3, [r5, #5]
    3558:	f000 fa5a 	bl	3a10 <arm_cfft_q15>
    355c:	4621      	mov	r1, r4
    355e:	68ac      	ldr	r4, [r5, #8]
    3560:	4638      	mov	r0, r7
    3562:	692b      	ldr	r3, [r5, #16]
    3564:	68ea      	ldr	r2, [r5, #12]
    3566:	9600      	str	r6, [sp, #0]
    3568:	9401      	str	r4, [sp, #4]
    356a:	f7ff ff87 	bl	347c <arm_split_rfft_q15>
    356e:	b005      	add	sp, #20
    3570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3574:	f8d0 800c 	ldr.w	r8, [r0, #12]
    3578:	ea4f 0984 	mov.w	r9, r4, lsl #2
    357c:	f8d0 c010 	ldr.w	ip, [r0, #16]
    3580:	6883      	ldr	r3, [r0, #8]
    3582:	b314      	cbz	r4, 35ca <arm_rfft_q15+0x92>
    3584:	f109 0904 	add.w	r9, r9, #4
    3588:	ea4f 0a83 	mov.w	sl, r3, lsl #2
    358c:	46b3      	mov	fp, r6
    358e:	4489      	add	r9, r1
    3590:	f859 3d04 	ldr.w	r3, [r9, #-4]!
    3594:	f8dc e000 	ldr.w	lr, [ip]
    3598:	fb43 f10e 	smusd	r1, r3, lr
    359c:	f857 0b04 	ldr.w	r0, [r7], #4
    35a0:	f8d8 2000 	ldr.w	r2, [r8]
    35a4:	fb20 1102 	smlad	r1, r0, r2, r1
    35a8:	fb23 f31e 	smuadx	r3, r3, lr
    35ac:	425b      	negs	r3, r3
    35ae:	fb42 3310 	smlsdx	r3, r2, r0, r3
    35b2:	4810      	ldr	r0, [pc, #64]	; (35f4 <arm_rfft_q15+0xbc>)
    35b4:	3c01      	subs	r4, #1
    35b6:	44d4      	add	ip, sl
    35b8:	44d0      	add	r8, sl
    35ba:	ea00 0003 	and.w	r0, r0, r3
    35be:	ea40 4111 	orr.w	r1, r0, r1, lsr #16
    35c2:	f84b 1b04 	str.w	r1, [fp], #4
    35c6:	d1e3      	bne.n	3590 <arm_rfft_q15+0x58>
    35c8:	792a      	ldrb	r2, [r5, #4]
    35ca:	796b      	ldrb	r3, [r5, #5]
    35cc:	4631      	mov	r1, r6
    35ce:	9803      	ldr	r0, [sp, #12]
    35d0:	f000 fa1e 	bl	3a10 <arm_cfft_q15>
    35d4:	682b      	ldr	r3, [r5, #0]
    35d6:	2b00      	cmp	r3, #0
    35d8:	d0c9      	beq.n	356e <arm_rfft_q15+0x36>
    35da:	3e02      	subs	r6, #2
    35dc:	2200      	movs	r2, #0
    35de:	f936 3f02 	ldrsh.w	r3, [r6, #2]!
    35e2:	3201      	adds	r2, #1
    35e4:	005b      	lsls	r3, r3, #1
    35e6:	8033      	strh	r3, [r6, #0]
    35e8:	682b      	ldr	r3, [r5, #0]
    35ea:	4293      	cmp	r3, r2
    35ec:	d8f7      	bhi.n	35de <arm_rfft_q15+0xa6>
    35ee:	b005      	add	sp, #20
    35f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    35f4:	ffff0000 	.word	0xffff0000

000035f8 <arm_rfft_init_q15>:
    35f8:	b289      	uxth	r1, r1
    35fa:	b430      	push	{r4, r5}
    35fc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    3600:	4d36      	ldr	r5, [pc, #216]	; (36dc <arm_rfft_init_q15+0xe4>)
    3602:	4c37      	ldr	r4, [pc, #220]	; (36e0 <arm_rfft_init_q15+0xe8>)
    3604:	7102      	strb	r2, [r0, #4]
    3606:	7143      	strb	r3, [r0, #5]
    3608:	6001      	str	r1, [r0, #0]
    360a:	60c5      	str	r5, [r0, #12]
    360c:	6104      	str	r4, [r0, #16]
    360e:	d050      	beq.n	36b2 <arm_rfft_init_q15+0xba>
    3610:	d911      	bls.n	3636 <arm_rfft_init_q15+0x3e>
    3612:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
    3616:	d054      	beq.n	36c2 <arm_rfft_init_q15+0xca>
    3618:	d938      	bls.n	368c <arm_rfft_init_q15+0x94>
    361a:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    361e:	d022      	beq.n	3666 <arm_rfft_init_q15+0x6e>
    3620:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
    3624:	d155      	bne.n	36d2 <arm_rfft_init_q15+0xda>
    3626:	2101      	movs	r1, #1
    3628:	4a2e      	ldr	r2, [pc, #184]	; (36e4 <arm_rfft_init_q15+0xec>)
    362a:	2300      	movs	r3, #0
    362c:	6081      	str	r1, [r0, #8]
    362e:	6142      	str	r2, [r0, #20]
    3630:	4618      	mov	r0, r3
    3632:	bc30      	pop	{r4, r5}
    3634:	4770      	bx	lr
    3636:	2940      	cmp	r1, #64	; 0x40
    3638:	d033      	beq.n	36a2 <arm_rfft_init_q15+0xaa>
    363a:	d91c      	bls.n	3676 <arm_rfft_init_q15+0x7e>
    363c:	2980      	cmp	r1, #128	; 0x80
    363e:	d00a      	beq.n	3656 <arm_rfft_init_q15+0x5e>
    3640:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    3644:	d145      	bne.n	36d2 <arm_rfft_init_q15+0xda>
    3646:	2120      	movs	r1, #32
    3648:	4a27      	ldr	r2, [pc, #156]	; (36e8 <arm_rfft_init_q15+0xf0>)
    364a:	2300      	movs	r3, #0
    364c:	6081      	str	r1, [r0, #8]
    364e:	6142      	str	r2, [r0, #20]
    3650:	4618      	mov	r0, r3
    3652:	bc30      	pop	{r4, r5}
    3654:	4770      	bx	lr
    3656:	2140      	movs	r1, #64	; 0x40
    3658:	4a24      	ldr	r2, [pc, #144]	; (36ec <arm_rfft_init_q15+0xf4>)
    365a:	2300      	movs	r3, #0
    365c:	6081      	str	r1, [r0, #8]
    365e:	6142      	str	r2, [r0, #20]
    3660:	4618      	mov	r0, r3
    3662:	bc30      	pop	{r4, r5}
    3664:	4770      	bx	lr
    3666:	2102      	movs	r1, #2
    3668:	4a21      	ldr	r2, [pc, #132]	; (36f0 <arm_rfft_init_q15+0xf8>)
    366a:	2300      	movs	r3, #0
    366c:	6081      	str	r1, [r0, #8]
    366e:	6142      	str	r2, [r0, #20]
    3670:	4618      	mov	r0, r3
    3672:	bc30      	pop	{r4, r5}
    3674:	4770      	bx	lr
    3676:	2920      	cmp	r1, #32
    3678:	d12b      	bne.n	36d2 <arm_rfft_init_q15+0xda>
    367a:	f44f 7180 	mov.w	r1, #256	; 0x100
    367e:	4a1d      	ldr	r2, [pc, #116]	; (36f4 <arm_rfft_init_q15+0xfc>)
    3680:	2300      	movs	r3, #0
    3682:	6081      	str	r1, [r0, #8]
    3684:	6142      	str	r2, [r0, #20]
    3686:	4618      	mov	r0, r3
    3688:	bc30      	pop	{r4, r5}
    368a:	4770      	bx	lr
    368c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
    3690:	d11f      	bne.n	36d2 <arm_rfft_init_q15+0xda>
    3692:	2108      	movs	r1, #8
    3694:	4a18      	ldr	r2, [pc, #96]	; (36f8 <arm_rfft_init_q15+0x100>)
    3696:	2300      	movs	r3, #0
    3698:	6081      	str	r1, [r0, #8]
    369a:	6142      	str	r2, [r0, #20]
    369c:	4618      	mov	r0, r3
    369e:	bc30      	pop	{r4, r5}
    36a0:	4770      	bx	lr
    36a2:	2180      	movs	r1, #128	; 0x80
    36a4:	4a15      	ldr	r2, [pc, #84]	; (36fc <arm_rfft_init_q15+0x104>)
    36a6:	2300      	movs	r3, #0
    36a8:	6081      	str	r1, [r0, #8]
    36aa:	6142      	str	r2, [r0, #20]
    36ac:	4618      	mov	r0, r3
    36ae:	bc30      	pop	{r4, r5}
    36b0:	4770      	bx	lr
    36b2:	2110      	movs	r1, #16
    36b4:	4a12      	ldr	r2, [pc, #72]	; (3700 <arm_rfft_init_q15+0x108>)
    36b6:	2300      	movs	r3, #0
    36b8:	6081      	str	r1, [r0, #8]
    36ba:	6142      	str	r2, [r0, #20]
    36bc:	4618      	mov	r0, r3
    36be:	bc30      	pop	{r4, r5}
    36c0:	4770      	bx	lr
    36c2:	2104      	movs	r1, #4
    36c4:	4a0f      	ldr	r2, [pc, #60]	; (3704 <arm_rfft_init_q15+0x10c>)
    36c6:	2300      	movs	r3, #0
    36c8:	6081      	str	r1, [r0, #8]
    36ca:	6142      	str	r2, [r0, #20]
    36cc:	4618      	mov	r0, r3
    36ce:	bc30      	pop	{r4, r5}
    36d0:	4770      	bx	lr
    36d2:	f04f 33ff 	mov.w	r3, #4294967295
    36d6:	bc30      	pop	{r4, r5}
    36d8:	4618      	mov	r0, r3
    36da:	4770      	bx	lr
    36dc:	20000454 	.word	0x20000454
    36e0:	20004454 	.word	0x20004454
    36e4:	200084b4 	.word	0x200084b4
    36e8:	20008464 	.word	0x20008464
    36ec:	20008494 	.word	0x20008494
    36f0:	200084a4 	.word	0x200084a4
    36f4:	200084c4 	.word	0x200084c4
    36f8:	20008474 	.word	0x20008474
    36fc:	200084d4 	.word	0x200084d4
    3700:	20008454 	.word	0x20008454
    3704:	20008484 	.word	0x20008484

00003708 <arm_cmplx_mag_q15>:
    3708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    370c:	0893      	lsrs	r3, r2, #2
    370e:	b085      	sub	sp, #20
    3710:	4682      	mov	sl, r0
    3712:	4689      	mov	r9, r1
    3714:	9202      	str	r2, [sp, #8]
    3716:	9303      	str	r3, [sp, #12]
    3718:	d031      	beq.n	377e <arm_cmplx_mag_q15+0x76>
    371a:	f100 0510 	add.w	r5, r0, #16
    371e:	469b      	mov	fp, r3
    3720:	460c      	mov	r4, r1
    3722:	f855 0c10 	ldr.w	r0, [r5, #-16]
    3726:	fb20 f000 	smuad	r0, r0, r0
    372a:	f855 2c0c 	ldr.w	r2, [r5, #-12]
    372e:	fb22 f802 	smuad	r8, r2, r2
    3732:	f855 7c08 	ldr.w	r7, [r5, #-8]
    3736:	fb27 f707 	smuad	r7, r7, r7
    373a:	f855 6c04 	ldr.w	r6, [r5, #-4]
    373e:	fb26 f606 	smuad	r6, r6, r6
    3742:	4621      	mov	r1, r4
    3744:	1440      	asrs	r0, r0, #17
    3746:	f000 f82f 	bl	37a8 <arm_sqrt_q15>
    374a:	1da2      	adds	r2, r4, #6
    374c:	1ca1      	adds	r1, r4, #2
    374e:	ea4f 4068 	mov.w	r0, r8, asr #17
    3752:	9201      	str	r2, [sp, #4]
    3754:	f000 f828 	bl	37a8 <arm_sqrt_q15>
    3758:	1d21      	adds	r1, r4, #4
    375a:	1478      	asrs	r0, r7, #17
    375c:	f000 f824 	bl	37a8 <arm_sqrt_q15>
    3760:	9a01      	ldr	r2, [sp, #4]
    3762:	1470      	asrs	r0, r6, #17
    3764:	3510      	adds	r5, #16
    3766:	4611      	mov	r1, r2
    3768:	3408      	adds	r4, #8
    376a:	f000 f81d 	bl	37a8 <arm_sqrt_q15>
    376e:	f1bb 0b01 	subs.w	fp, fp, #1
    3772:	d1d6      	bne.n	3722 <arm_cmplx_mag_q15+0x1a>
    3774:	9a03      	ldr	r2, [sp, #12]
    3776:	eb0a 1a02 	add.w	sl, sl, r2, lsl #4
    377a:	eb09 09c2 	add.w	r9, r9, r2, lsl #3
    377e:	9b02      	ldr	r3, [sp, #8]
    3780:	f013 0403 	ands.w	r4, r3, #3
    3784:	d00c      	beq.n	37a0 <arm_cmplx_mag_q15+0x98>
    3786:	f85a 0b04 	ldr.w	r0, [sl], #4
    378a:	fb20 f000 	smuad	r0, r0, r0
    378e:	4649      	mov	r1, r9
    3790:	1440      	asrs	r0, r0, #17
    3792:	f109 0502 	add.w	r5, r9, #2
    3796:	f000 f807 	bl	37a8 <arm_sqrt_q15>
    379a:	3c01      	subs	r4, #1
    379c:	46a9      	mov	r9, r5
    379e:	d1f2      	bne.n	3786 <arm_cmplx_mag_q15+0x7e>
    37a0:	b005      	add	sp, #20
    37a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    37a6:	bf00      	nop

000037a8 <arm_sqrt_q15>:
    37a8:	2800      	cmp	r0, #0
    37aa:	dd66      	ble.n	387a <arm_sqrt_q15+0xd2>
    37ac:	b470      	push	{r4, r5, r6}
    37ae:	fab0 f480 	clz	r4, r0
    37b2:	b083      	sub	sp, #12
    37b4:	3c11      	subs	r4, #17
    37b6:	b2a4      	uxth	r4, r4
    37b8:	f014 0501 	ands.w	r5, r4, #1
    37bc:	d052      	beq.n	3864 <arm_sqrt_q15+0xbc>
    37be:	1e63      	subs	r3, r4, #1
    37c0:	4098      	lsls	r0, r3
    37c2:	b200      	sxth	r0, r0
    37c4:	ee07 0a90 	vmov	s15, r0
    37c8:	4b2e      	ldr	r3, [pc, #184]	; (3884 <arm_sqrt_q15+0xdc>)
    37ca:	1046      	asrs	r6, r0, #1
    37cc:	eefa 7ae8 	vcvt.f32.s32	s15, s15, #15
    37d0:	ee17 2a90 	vmov	r2, s15
    37d4:	1052      	asrs	r2, r2, #1
    37d6:	1a9b      	subs	r3, r3, r2
    37d8:	ee07 3a90 	vmov	s15, r3
    37dc:	eefe 7ac9 	vcvt.s32.f32	s15, s15, #14
    37e0:	edcd 7a01 	vstr	s15, [sp, #4]
    37e4:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
    37e8:	fb03 f203 	mul.w	r2, r3, r3
    37ec:	f342 32cf 	sbfx	r2, r2, #15, #16
    37f0:	fb02 f206 	mul.w	r2, r2, r6
    37f4:	13d2      	asrs	r2, r2, #15
    37f6:	f5c2 5240 	rsb	r2, r2, #12288	; 0x3000
    37fa:	fb03 f202 	mul.w	r2, r3, r2
    37fe:	f342 324f 	sbfx	r2, r2, #13, #16
    3802:	f022 0203 	bic.w	r2, r2, #3
    3806:	fb02 f302 	mul.w	r3, r2, r2
    380a:	f343 33cf 	sbfx	r3, r3, #15, #16
    380e:	fb06 f303 	mul.w	r3, r6, r3
    3812:	13db      	asrs	r3, r3, #15
    3814:	f5c3 5340 	rsb	r3, r3, #12288	; 0x3000
    3818:	fb02 f303 	mul.w	r3, r2, r3
    381c:	f343 334f 	sbfx	r3, r3, #13, #16
    3820:	f023 0303 	bic.w	r3, r3, #3
    3824:	fb03 f203 	mul.w	r2, r3, r3
    3828:	f342 32cf 	sbfx	r2, r2, #15, #16
    382c:	fb06 f602 	mul.w	r6, r6, r2
    3830:	13f6      	asrs	r6, r6, #15
    3832:	f5c6 5640 	rsb	r6, r6, #12288	; 0x3000
    3836:	fb03 f306 	mul.w	r3, r3, r6
    383a:	f343 334f 	sbfx	r3, r3, #13, #16
    383e:	f023 0303 	bic.w	r3, r3, #3
    3842:	fb00 f003 	mul.w	r0, r0, r3
    3846:	f340 308f 	sbfx	r0, r0, #14, #16
    384a:	f020 0001 	bic.w	r0, r0, #1
    384e:	b965      	cbnz	r5, 386a <arm_sqrt_q15+0xc2>
    3850:	f344 034e 	sbfx	r3, r4, #1, #15
    3854:	fa40 f303 	asr.w	r3, r0, r3
    3858:	b21b      	sxth	r3, r3
    385a:	2000      	movs	r0, #0
    385c:	800b      	strh	r3, [r1, #0]
    385e:	b003      	add	sp, #12
    3860:	bc70      	pop	{r4, r5, r6}
    3862:	4770      	bx	lr
    3864:	40a0      	lsls	r0, r4
    3866:	b200      	sxth	r0, r0
    3868:	e7ac      	b.n	37c4 <arm_sqrt_q15+0x1c>
    386a:	1e63      	subs	r3, r4, #1
    386c:	bf48      	it	mi
    386e:	4623      	movmi	r3, r4
    3870:	105b      	asrs	r3, r3, #1
    3872:	fa40 f303 	asr.w	r3, r0, r3
    3876:	b21b      	sxth	r3, r3
    3878:	e7ef      	b.n	385a <arm_sqrt_q15+0xb2>
    387a:	2300      	movs	r3, #0
    387c:	f04f 30ff 	mov.w	r0, #4294967295
    3880:	800b      	strh	r3, [r1, #0]
    3882:	4770      	bx	lr
    3884:	5f3759df 	.word	0x5f3759df

00003888 <arm_cfft_radix4by2_q15>:
    3888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    388c:	084d      	lsrs	r5, r1, #1
    388e:	4616      	mov	r6, r2
    3890:	eb00 0741 	add.w	r7, r0, r1, lsl #1
    3894:	d04b      	beq.n	392e <arm_cfft_radix4by2_q15+0xa6>
    3896:	4604      	mov	r4, r0
    3898:	46be      	mov	lr, r7
    389a:	4690      	mov	r8, r2
    389c:	4629      	mov	r1, r5
    389e:	f04f 0c00 	mov.w	ip, #0
    38a2:	f858 9b04 	ldr.w	r9, [r8], #4
    38a6:	6803      	ldr	r3, [r0, #0]
    38a8:	fa93 f32c 	shadd16	r3, r3, ip
    38ac:	f8de 2000 	ldr.w	r2, [lr]
    38b0:	fa92 f22c 	shadd16	r2, r2, ip
    38b4:	fad3 fa12 	qsub16	sl, r3, r2
    38b8:	fa93 f322 	shadd16	r3, r3, r2
    38bc:	f840 3b04 	str.w	r3, [r0], #4
    38c0:	fb29 f20a 	smuad	r2, r9, sl
    38c4:	fb49 f91a 	smusdx	r9, r9, sl
    38c8:	4b1f      	ldr	r3, [pc, #124]	; (3948 <arm_cfft_radix4by2_q15+0xc0>)
    38ca:	3901      	subs	r1, #1
    38cc:	ea09 0303 	and.w	r3, r9, r3
    38d0:	ea43 4312 	orr.w	r3, r3, r2, lsr #16
    38d4:	f84e 3b04 	str.w	r3, [lr], #4
    38d8:	d1e3      	bne.n	38a2 <arm_cfft_radix4by2_q15+0x1a>
    38da:	4629      	mov	r1, r5
    38dc:	2302      	movs	r3, #2
    38de:	4632      	mov	r2, r6
    38e0:	4620      	mov	r0, r4
    38e2:	f000 f953 	bl	3b8c <arm_radix4_butterfly_q15>
    38e6:	4638      	mov	r0, r7
    38e8:	2302      	movs	r3, #2
    38ea:	4629      	mov	r1, r5
    38ec:	4632      	mov	r2, r6
    38ee:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
    38f2:	f000 f94b 	bl	3b8c <arm_radix4_butterfly_q15>
    38f6:	4620      	mov	r0, r4
    38f8:	1ca3      	adds	r3, r4, #2
    38fa:	f933 7c02 	ldrsh.w	r7, [r3, #-2]
    38fe:	3008      	adds	r0, #8
    3900:	f930 6c06 	ldrsh.w	r6, [r0, #-6]
    3904:	3308      	adds	r3, #8
    3906:	f930 4c04 	ldrsh.w	r4, [r0, #-4]
    390a:	007f      	lsls	r7, r7, #1
    390c:	f930 2c02 	ldrsh.w	r2, [r0, #-2]
    3910:	0076      	lsls	r6, r6, #1
    3912:	0064      	lsls	r4, r4, #1
    3914:	f823 7c0a 	strh.w	r7, [r3, #-10]
    3918:	0052      	lsls	r2, r2, #1
    391a:	f820 6c06 	strh.w	r6, [r0, #-6]
    391e:	f820 4c04 	strh.w	r4, [r0, #-4]
    3922:	f820 2c02 	strh.w	r2, [r0, #-2]
    3926:	4285      	cmp	r5, r0
    3928:	d1e7      	bne.n	38fa <arm_cfft_radix4by2_q15+0x72>
    392a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    392e:	4629      	mov	r1, r5
    3930:	2302      	movs	r3, #2
    3932:	f000 f92b 	bl	3b8c <arm_radix4_butterfly_q15>
    3936:	4632      	mov	r2, r6
    3938:	4629      	mov	r1, r5
    393a:	4638      	mov	r0, r7
    393c:	2302      	movs	r3, #2
    393e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3942:	f000 b923 	b.w	3b8c <arm_radix4_butterfly_q15>
    3946:	bf00      	nop
    3948:	ffff0000 	.word	0xffff0000

0000394c <arm_cfft_radix4by2_inverse_q15>:
    394c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3950:	084d      	lsrs	r5, r1, #1
    3952:	4616      	mov	r6, r2
    3954:	eb00 0741 	add.w	r7, r0, r1, lsl #1
    3958:	d04b      	beq.n	39f2 <arm_cfft_radix4by2_inverse_q15+0xa6>
    395a:	4604      	mov	r4, r0
    395c:	46be      	mov	lr, r7
    395e:	4690      	mov	r8, r2
    3960:	4629      	mov	r1, r5
    3962:	f04f 0c00 	mov.w	ip, #0
    3966:	f858 9b04 	ldr.w	r9, [r8], #4
    396a:	6803      	ldr	r3, [r0, #0]
    396c:	fa93 f32c 	shadd16	r3, r3, ip
    3970:	f8de 2000 	ldr.w	r2, [lr]
    3974:	fa92 f22c 	shadd16	r2, r2, ip
    3978:	fad3 fa12 	qsub16	sl, r3, r2
    397c:	fa93 f322 	shadd16	r3, r3, r2
    3980:	f840 3b04 	str.w	r3, [r0], #4
    3984:	fb49 f20a 	smusd	r2, r9, sl
    3988:	fb29 f91a 	smuadx	r9, r9, sl
    398c:	4b1f      	ldr	r3, [pc, #124]	; (3a0c <arm_cfft_radix4by2_inverse_q15+0xc0>)
    398e:	3901      	subs	r1, #1
    3990:	ea09 0303 	and.w	r3, r9, r3
    3994:	ea43 4312 	orr.w	r3, r3, r2, lsr #16
    3998:	f84e 3b04 	str.w	r3, [lr], #4
    399c:	d1e3      	bne.n	3966 <arm_cfft_radix4by2_inverse_q15+0x1a>
    399e:	4629      	mov	r1, r5
    39a0:	2302      	movs	r3, #2
    39a2:	4632      	mov	r2, r6
    39a4:	4620      	mov	r0, r4
    39a6:	f000 fa2d 	bl	3e04 <arm_radix4_butterfly_inverse_q15>
    39aa:	4638      	mov	r0, r7
    39ac:	2302      	movs	r3, #2
    39ae:	4629      	mov	r1, r5
    39b0:	4632      	mov	r2, r6
    39b2:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
    39b6:	f000 fa25 	bl	3e04 <arm_radix4_butterfly_inverse_q15>
    39ba:	4620      	mov	r0, r4
    39bc:	1ca3      	adds	r3, r4, #2
    39be:	f933 7c02 	ldrsh.w	r7, [r3, #-2]
    39c2:	3008      	adds	r0, #8
    39c4:	f930 6c06 	ldrsh.w	r6, [r0, #-6]
    39c8:	3308      	adds	r3, #8
    39ca:	f930 4c04 	ldrsh.w	r4, [r0, #-4]
    39ce:	007f      	lsls	r7, r7, #1
    39d0:	f930 2c02 	ldrsh.w	r2, [r0, #-2]
    39d4:	0076      	lsls	r6, r6, #1
    39d6:	0064      	lsls	r4, r4, #1
    39d8:	f823 7c0a 	strh.w	r7, [r3, #-10]
    39dc:	0052      	lsls	r2, r2, #1
    39de:	f820 6c06 	strh.w	r6, [r0, #-6]
    39e2:	f820 4c04 	strh.w	r4, [r0, #-4]
    39e6:	f820 2c02 	strh.w	r2, [r0, #-2]
    39ea:	4285      	cmp	r5, r0
    39ec:	d1e7      	bne.n	39be <arm_cfft_radix4by2_inverse_q15+0x72>
    39ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    39f2:	4629      	mov	r1, r5
    39f4:	2302      	movs	r3, #2
    39f6:	f000 fa05 	bl	3e04 <arm_radix4_butterfly_inverse_q15>
    39fa:	4632      	mov	r2, r6
    39fc:	4629      	mov	r1, r5
    39fe:	4638      	mov	r0, r7
    3a00:	2302      	movs	r3, #2
    3a02:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3a06:	f000 b9fd 	b.w	3e04 <arm_radix4_butterfly_inverse_q15>
    3a0a:	bf00      	nop
    3a0c:	ffff0000 	.word	0xffff0000

00003a10 <arm_cfft_q15>:
    3a10:	2a01      	cmp	r2, #1
    3a12:	b570      	push	{r4, r5, r6, lr}
    3a14:	460d      	mov	r5, r1
    3a16:	4604      	mov	r4, r0
    3a18:	461e      	mov	r6, r3
    3a1a:	8801      	ldrh	r1, [r0, #0]
    3a1c:	d024      	beq.n	3a68 <arm_cfft_q15+0x58>
    3a1e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    3a22:	d013      	beq.n	3a4c <arm_cfft_q15+0x3c>
    3a24:	d808      	bhi.n	3a38 <arm_cfft_q15+0x28>
    3a26:	2920      	cmp	r1, #32
    3a28:	d031      	beq.n	3a8e <arm_cfft_q15+0x7e>
    3a2a:	d945      	bls.n	3ab8 <arm_cfft_q15+0xa8>
    3a2c:	2940      	cmp	r1, #64	; 0x40
    3a2e:	d00d      	beq.n	3a4c <arm_cfft_q15+0x3c>
    3a30:	2980      	cmp	r1, #128	; 0x80
    3a32:	d02c      	beq.n	3a8e <arm_cfft_q15+0x7e>
    3a34:	b98e      	cbnz	r6, 3a5a <arm_cfft_q15+0x4a>
    3a36:	bd70      	pop	{r4, r5, r6, pc}
    3a38:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
    3a3c:	d006      	beq.n	3a4c <arm_cfft_q15+0x3c>
    3a3e:	d923      	bls.n	3a88 <arm_cfft_q15+0x78>
    3a40:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
    3a44:	d023      	beq.n	3a8e <arm_cfft_q15+0x7e>
    3a46:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    3a4a:	d1f3      	bne.n	3a34 <arm_cfft_q15+0x24>
    3a4c:	2301      	movs	r3, #1
    3a4e:	6862      	ldr	r2, [r4, #4]
    3a50:	4628      	mov	r0, r5
    3a52:	f000 f89b 	bl	3b8c <arm_radix4_butterfly_q15>
    3a56:	2e00      	cmp	r6, #0
    3a58:	d0ed      	beq.n	3a36 <arm_cfft_q15+0x26>
    3a5a:	4628      	mov	r0, r5
    3a5c:	68a2      	ldr	r2, [r4, #8]
    3a5e:	89a1      	ldrh	r1, [r4, #12]
    3a60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3a64:	f000 b867 	b.w	3b36 <arm_bitreversal_16>
    3a68:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    3a6c:	d01e      	beq.n	3aac <arm_cfft_q15+0x9c>
    3a6e:	d813      	bhi.n	3a98 <arm_cfft_q15+0x88>
    3a70:	2920      	cmp	r1, #32
    3a72:	d004      	beq.n	3a7e <arm_cfft_q15+0x6e>
    3a74:	d927      	bls.n	3ac6 <arm_cfft_q15+0xb6>
    3a76:	2940      	cmp	r1, #64	; 0x40
    3a78:	d018      	beq.n	3aac <arm_cfft_q15+0x9c>
    3a7a:	2980      	cmp	r1, #128	; 0x80
    3a7c:	d1da      	bne.n	3a34 <arm_cfft_q15+0x24>
    3a7e:	6862      	ldr	r2, [r4, #4]
    3a80:	4628      	mov	r0, r5
    3a82:	f7ff ff63 	bl	394c <arm_cfft_radix4by2_inverse_q15>
    3a86:	e7d5      	b.n	3a34 <arm_cfft_q15+0x24>
    3a88:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    3a8c:	d1d2      	bne.n	3a34 <arm_cfft_q15+0x24>
    3a8e:	6862      	ldr	r2, [r4, #4]
    3a90:	4628      	mov	r0, r5
    3a92:	f7ff fef9 	bl	3888 <arm_cfft_radix4by2_q15>
    3a96:	e7cd      	b.n	3a34 <arm_cfft_q15+0x24>
    3a98:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
    3a9c:	d006      	beq.n	3aac <arm_cfft_q15+0x9c>
    3a9e:	d90e      	bls.n	3abe <arm_cfft_q15+0xae>
    3aa0:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
    3aa4:	d0eb      	beq.n	3a7e <arm_cfft_q15+0x6e>
    3aa6:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    3aaa:	d1c3      	bne.n	3a34 <arm_cfft_q15+0x24>
    3aac:	2301      	movs	r3, #1
    3aae:	6862      	ldr	r2, [r4, #4]
    3ab0:	4628      	mov	r0, r5
    3ab2:	f000 f9a7 	bl	3e04 <arm_radix4_butterfly_inverse_q15>
    3ab6:	e7bd      	b.n	3a34 <arm_cfft_q15+0x24>
    3ab8:	2910      	cmp	r1, #16
    3aba:	d1bb      	bne.n	3a34 <arm_cfft_q15+0x24>
    3abc:	e7c6      	b.n	3a4c <arm_cfft_q15+0x3c>
    3abe:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    3ac2:	d0dc      	beq.n	3a7e <arm_cfft_q15+0x6e>
    3ac4:	e7b6      	b.n	3a34 <arm_cfft_q15+0x24>
    3ac6:	2910      	cmp	r1, #16
    3ac8:	d1b4      	bne.n	3a34 <arm_cfft_q15+0x24>
    3aca:	e7ef      	b.n	3aac <arm_cfft_q15+0x9c>

00003acc <arm_bitreversal_32>:
    3acc:	1c4b      	adds	r3, r1, #1
    3ace:	2b01      	cmp	r3, #1
    3ad0:	bf98      	it	ls
    3ad2:	4770      	bxls	lr
    3ad4:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
    3ad8:	1c91      	adds	r1, r2, #2
    3ada:	089b      	lsrs	r3, r3, #2

00003adc <arm_bitreversal_32_0>:
    3adc:	f8b1 8004 	ldrh.w	r8, [r1, #4]
    3ae0:	f8b1 9002 	ldrh.w	r9, [r1, #2]
    3ae4:	880a      	ldrh	r2, [r1, #0]
    3ae6:	f831 cc02 	ldrh.w	ip, [r1, #-2]
    3aea:	4480      	add	r8, r0
    3aec:	4481      	add	r9, r0
    3aee:	4402      	add	r2, r0
    3af0:	4484      	add	ip, r0
    3af2:	f8d9 7000 	ldr.w	r7, [r9]
    3af6:	f8d8 6000 	ldr.w	r6, [r8]
    3afa:	6815      	ldr	r5, [r2, #0]
    3afc:	f8dc 4000 	ldr.w	r4, [ip]
    3b00:	f8c9 6000 	str.w	r6, [r9]
    3b04:	f8c8 7000 	str.w	r7, [r8]
    3b08:	f8cc 5000 	str.w	r5, [ip]
    3b0c:	6014      	str	r4, [r2, #0]
    3b0e:	f8d9 7004 	ldr.w	r7, [r9, #4]
    3b12:	f8d8 6004 	ldr.w	r6, [r8, #4]
    3b16:	6855      	ldr	r5, [r2, #4]
    3b18:	f8dc 4004 	ldr.w	r4, [ip, #4]
    3b1c:	f8c9 6004 	str.w	r6, [r9, #4]
    3b20:	f8c8 7004 	str.w	r7, [r8, #4]
    3b24:	f8cc 5004 	str.w	r5, [ip, #4]
    3b28:	6054      	str	r4, [r2, #4]
    3b2a:	3108      	adds	r1, #8
    3b2c:	3b01      	subs	r3, #1
    3b2e:	d1d5      	bne.n	3adc <arm_bitreversal_32_0>
    3b30:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
    3b34:	4770      	bx	lr

00003b36 <arm_bitreversal_16>:
    3b36:	1c4b      	adds	r3, r1, #1
    3b38:	2b01      	cmp	r3, #1
    3b3a:	bf98      	it	ls
    3b3c:	4770      	bxls	lr
    3b3e:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
    3b42:	1c91      	adds	r1, r2, #2
    3b44:	089b      	lsrs	r3, r3, #2

00003b46 <arm_bitreversal_16_0>:
    3b46:	f8b1 8004 	ldrh.w	r8, [r1, #4]
    3b4a:	f8b1 9002 	ldrh.w	r9, [r1, #2]
    3b4e:	880a      	ldrh	r2, [r1, #0]
    3b50:	f831 cc02 	ldrh.w	ip, [r1, #-2]
    3b54:	eb00 0858 	add.w	r8, r0, r8, lsr #1
    3b58:	eb00 0959 	add.w	r9, r0, r9, lsr #1
    3b5c:	eb00 0252 	add.w	r2, r0, r2, lsr #1
    3b60:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
    3b64:	f8d9 7000 	ldr.w	r7, [r9]
    3b68:	f8d8 6000 	ldr.w	r6, [r8]
    3b6c:	6815      	ldr	r5, [r2, #0]
    3b6e:	f8dc 4000 	ldr.w	r4, [ip]
    3b72:	f8c9 6000 	str.w	r6, [r9]
    3b76:	f8c8 7000 	str.w	r7, [r8]
    3b7a:	f8cc 5000 	str.w	r5, [ip]
    3b7e:	6014      	str	r4, [r2, #0]
    3b80:	3108      	adds	r1, #8
    3b82:	3b01      	subs	r3, #1
    3b84:	d1df      	bne.n	3b46 <arm_bitreversal_16_0>
    3b86:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
    3b8a:	4770      	bx	lr

00003b8c <arm_radix4_butterfly_q15>:
    3b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3b90:	469b      	mov	fp, r3
    3b92:	b091      	sub	sp, #68	; 0x44
    3b94:	088b      	lsrs	r3, r1, #2
    3b96:	4606      	mov	r6, r0
    3b98:	900e      	str	r0, [sp, #56]	; 0x38
    3b9a:	2500      	movs	r5, #0
    3b9c:	4618      	mov	r0, r3
    3b9e:	9103      	str	r1, [sp, #12]
    3ba0:	930f      	str	r3, [sp, #60]	; 0x3c
    3ba2:	4637      	mov	r7, r6
    3ba4:	0081      	lsls	r1, r0, #2
    3ba6:	4682      	mov	sl, r0
    3ba8:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
    3bac:	4696      	mov	lr, r2
    3bae:	1870      	adds	r0, r6, r1
    3bb0:	9207      	str	r2, [sp, #28]
    3bb2:	009b      	lsls	r3, r3, #2
    3bb4:	462c      	mov	r4, r5
    3bb6:	1846      	adds	r6, r0, r1
    3bb8:	462a      	mov	r2, r5
    3bba:	9304      	str	r3, [sp, #16]
    3bbc:	4431      	add	r1, r6
    3bbe:	9601      	str	r6, [sp, #4]
    3bc0:	f8cd b008 	str.w	fp, [sp, #8]
    3bc4:	683b      	ldr	r3, [r7, #0]
    3bc6:	fa93 fc22 	shadd16	ip, r3, r2
    3bca:	fa9c fc22 	shadd16	ip, ip, r2
    3bce:	9b01      	ldr	r3, [sp, #4]
    3bd0:	681b      	ldr	r3, [r3, #0]
    3bd2:	fa93 f322 	shadd16	r3, r3, r2
    3bd6:	fa93 f322 	shadd16	r3, r3, r2
    3bda:	fa9c f813 	qadd16	r8, ip, r3
    3bde:	fadc fc13 	qsub16	ip, ip, r3
    3be2:	6803      	ldr	r3, [r0, #0]
    3be4:	fa93 f322 	shadd16	r3, r3, r2
    3be8:	fa93 f922 	shadd16	r9, r3, r2
    3bec:	680b      	ldr	r3, [r1, #0]
    3bee:	fa93 f322 	shadd16	r3, r3, r2
    3bf2:	fa93 f322 	shadd16	r3, r3, r2
    3bf6:	fa99 f313 	qadd16	r3, r9, r3
    3bfa:	fa98 f923 	shadd16	r9, r8, r3
    3bfe:	f847 9b04 	str.w	r9, [r7], #4
    3c02:	fad8 f313 	qsub16	r3, r8, r3
    3c06:	f85e 9034 	ldr.w	r9, [lr, r4, lsl #3]
    3c0a:	fb29 fb03 	smuad	fp, r9, r3
    3c0e:	fb49 f913 	smusdx	r9, r9, r3
    3c12:	6803      	ldr	r3, [r0, #0]
    3c14:	fa93 f322 	shadd16	r3, r3, r2
    3c18:	fa93 f822 	shadd16	r8, r3, r2
    3c1c:	4b78      	ldr	r3, [pc, #480]	; (3e00 <arm_radix4_butterfly_q15+0x274>)
    3c1e:	ea09 0303 	and.w	r3, r9, r3
    3c22:	ea43 431b 	orr.w	r3, r3, fp, lsr #16
    3c26:	f840 3b04 	str.w	r3, [r0], #4
    3c2a:	680b      	ldr	r3, [r1, #0]
    3c2c:	fa93 f322 	shadd16	r3, r3, r2
    3c30:	fa93 f322 	shadd16	r3, r3, r2
    3c34:	fad8 f313 	qsub16	r3, r8, r3
    3c38:	faac f913 	qasx	r9, ip, r3
    3c3c:	faec fc13 	qsax	ip, ip, r3
    3c40:	f85e 3024 	ldr.w	r3, [lr, r4, lsl #2]
    3c44:	fb23 f80c 	smuad	r8, r3, ip
    3c48:	fb43 fc1c 	smusdx	ip, r3, ip
    3c4c:	4b6c      	ldr	r3, [pc, #432]	; (3e00 <arm_radix4_butterfly_q15+0x274>)
    3c4e:	9e01      	ldr	r6, [sp, #4]
    3c50:	ea0c 0303 	and.w	r3, ip, r3
    3c54:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
    3c58:	f846 3b04 	str.w	r3, [r6], #4
    3c5c:	9601      	str	r6, [sp, #4]
    3c5e:	462e      	mov	r6, r5
    3c60:	f85e 3005 	ldr.w	r3, [lr, r5]
    3c64:	fb23 fc09 	smuad	ip, r3, r9
    3c68:	fb43 f919 	smusdx	r9, r3, r9
    3c6c:	4b64      	ldr	r3, [pc, #400]	; (3e00 <arm_radix4_butterfly_q15+0x274>)
    3c6e:	f1ba 0a01 	subs.w	sl, sl, #1
    3c72:	9d02      	ldr	r5, [sp, #8]
    3c74:	ea09 0303 	and.w	r3, r9, r3
    3c78:	442c      	add	r4, r5
    3c7a:	9d04      	ldr	r5, [sp, #16]
    3c7c:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
    3c80:	442e      	add	r6, r5
    3c82:	f841 3b04 	str.w	r3, [r1], #4
    3c86:	4635      	mov	r5, r6
    3c88:	d19c      	bne.n	3bc4 <arm_radix4_butterfly_q15+0x38>
    3c8a:	f8dd b008 	ldr.w	fp, [sp, #8]
    3c8e:	ea4f 038b 	mov.w	r3, fp, lsl #2
    3c92:	9309      	str	r3, [sp, #36]	; 0x24
    3c94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    3c96:	2b04      	cmp	r3, #4
    3c98:	f240 8086 	bls.w	3da8 <arm_radix4_butterfly_q15+0x21c>
    3c9c:	f8cd a010 	str.w	sl, [sp, #16]
    3ca0:	930c      	str	r3, [sp, #48]	; 0x30
    3ca2:	9302      	str	r3, [sp, #8]
    3ca4:	9a02      	ldr	r2, [sp, #8]
    3ca6:	2100      	movs	r1, #0
    3ca8:	0893      	lsrs	r3, r2, #2
    3caa:	9105      	str	r1, [sp, #20]
    3cac:	0097      	lsls	r7, r2, #2
    3cae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    3cb0:	930d      	str	r3, [sp, #52]	; 0x34
    3cb2:	9206      	str	r2, [sp, #24]
    3cb4:	1e5a      	subs	r2, r3, #1
    3cb6:	009b      	lsls	r3, r3, #2
    3cb8:	9108      	str	r1, [sp, #32]
    3cba:	920a      	str	r2, [sp, #40]	; 0x28
    3cbc:	930b      	str	r3, [sp, #44]	; 0x2c
    3cbe:	9907      	ldr	r1, [sp, #28]
    3cc0:	9a08      	ldr	r2, [sp, #32]
    3cc2:	460d      	mov	r5, r1
    3cc4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    3cc6:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    3cca:	4611      	mov	r1, r2
    3ccc:	f855 c022 	ldr.w	ip, [r5, r2, lsl #2]
    3cd0:	9a07      	ldr	r2, [sp, #28]
    3cd2:	9e06      	ldr	r6, [sp, #24]
    3cd4:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
    3cd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3cda:	1930      	adds	r0, r6, r4
    3cdc:	f852 8031 	ldr.w	r8, [r2, r1, lsl #3]
    3ce0:	18cb      	adds	r3, r1, r3
    3ce2:	9a05      	ldr	r2, [sp, #20]
    3ce4:	1825      	adds	r5, r4, r0
    3ce6:	9308      	str	r3, [sp, #32]
    3ce8:	9b03      	ldr	r3, [sp, #12]
    3cea:	442c      	add	r4, r5
    3cec:	4293      	cmp	r3, r2
    3cee:	d946      	bls.n	3d7e <arm_radix4_butterfly_q15+0x1f2>
    3cf0:	9b02      	ldr	r3, [sp, #8]
    3cf2:	9501      	str	r5, [sp, #4]
    3cf4:	eb03 0e02 	add.w	lr, r3, r2
    3cf8:	9a01      	ldr	r2, [sp, #4]
    3cfa:	6833      	ldr	r3, [r6, #0]
    3cfc:	6812      	ldr	r2, [r2, #0]
    3cfe:	fa93 fa12 	qadd16	sl, r3, r2
    3d02:	fad3 f312 	qsub16	r3, r3, r2
    3d06:	6801      	ldr	r1, [r0, #0]
    3d08:	6822      	ldr	r2, [r4, #0]
    3d0a:	fa91 f112 	qadd16	r1, r1, r2
    3d0e:	fa9a f221 	shadd16	r2, sl, r1
    3d12:	9d04      	ldr	r5, [sp, #16]
    3d14:	fa92 f225 	shadd16	r2, r2, r5
    3d18:	6032      	str	r2, [r6, #0]
    3d1a:	443e      	add	r6, r7
    3d1c:	fada f121 	shsub16	r1, sl, r1
    3d20:	fb28 fb01 	smuad	fp, r8, r1
    3d24:	fb48 f211 	smusdx	r2, r8, r1
    3d28:	4935      	ldr	r1, [pc, #212]	; (3e00 <arm_radix4_butterfly_q15+0x274>)
    3d2a:	f8d0 a000 	ldr.w	sl, [r0]
    3d2e:	4011      	ands	r1, r2
    3d30:	ea41 411b 	orr.w	r1, r1, fp, lsr #16
    3d34:	6001      	str	r1, [r0, #0]
    3d36:	4438      	add	r0, r7
    3d38:	6822      	ldr	r2, [r4, #0]
    3d3a:	fada f212 	qsub16	r2, sl, r2
    3d3e:	faa3 f122 	shasx	r1, r3, r2
    3d42:	fae3 f322 	shsax	r3, r3, r2
    3d46:	fb2c fb03 	smuad	fp, ip, r3
    3d4a:	fb4c f313 	smusdx	r3, ip, r3
    3d4e:	4a2c      	ldr	r2, [pc, #176]	; (3e00 <arm_radix4_butterfly_q15+0x274>)
    3d50:	401a      	ands	r2, r3
    3d52:	9b01      	ldr	r3, [sp, #4]
    3d54:	ea42 421b 	orr.w	r2, r2, fp, lsr #16
    3d58:	601a      	str	r2, [r3, #0]
    3d5a:	443b      	add	r3, r7
    3d5c:	9301      	str	r3, [sp, #4]
    3d5e:	fb29 f201 	smuad	r2, r9, r1
    3d62:	fb49 f111 	smusdx	r1, r9, r1
    3d66:	4b26      	ldr	r3, [pc, #152]	; (3e00 <arm_radix4_butterfly_q15+0x274>)
    3d68:	46f2      	mov	sl, lr
    3d6a:	9d02      	ldr	r5, [sp, #8]
    3d6c:	400b      	ands	r3, r1
    3d6e:	44ae      	add	lr, r5
    3d70:	ea43 4312 	orr.w	r3, r3, r2, lsr #16
    3d74:	6023      	str	r3, [r4, #0]
    3d76:	443c      	add	r4, r7
    3d78:	9b03      	ldr	r3, [sp, #12]
    3d7a:	4553      	cmp	r3, sl
    3d7c:	d8bc      	bhi.n	3cf8 <arm_radix4_butterfly_q15+0x16c>
    3d7e:	9a06      	ldr	r2, [sp, #24]
    3d80:	9b05      	ldr	r3, [sp, #20]
    3d82:	3204      	adds	r2, #4
    3d84:	3301      	adds	r3, #1
    3d86:	9206      	str	r2, [sp, #24]
    3d88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3d8a:	9305      	str	r3, [sp, #20]
    3d8c:	4293      	cmp	r3, r2
    3d8e:	d996      	bls.n	3cbe <arm_radix4_butterfly_q15+0x132>
    3d90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3d92:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    3d94:	089b      	lsrs	r3, r3, #2
    3d96:	9202      	str	r2, [sp, #8]
    3d98:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3d9a:	2b04      	cmp	r3, #4
    3d9c:	930c      	str	r3, [sp, #48]	; 0x30
    3d9e:	ea4f 0282 	mov.w	r2, r2, lsl #2
    3da2:	9209      	str	r2, [sp, #36]	; 0x24
    3da4:	f63f af7e 	bhi.w	3ca4 <arm_radix4_butterfly_q15+0x118>
    3da8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    3daa:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    3dac:	3410      	adds	r4, #16
    3dae:	f854 3c10 	ldr.w	r3, [r4, #-16]
    3db2:	f854 7c08 	ldr.w	r7, [r4, #-8]
    3db6:	fa93 f117 	qadd16	r1, r3, r7
    3dba:	f854 2c0c 	ldr.w	r2, [r4, #-12]
    3dbe:	f854 0c04 	ldr.w	r0, [r4, #-4]
    3dc2:	fa92 f510 	qadd16	r5, r2, r0
    3dc6:	fa91 f525 	shadd16	r5, r1, r5
    3dca:	f844 5c10 	str.w	r5, [r4, #-16]
    3dce:	fa92 f510 	qadd16	r5, r2, r0
    3dd2:	fad1 f125 	shsub16	r1, r1, r5
    3dd6:	f844 1c0c 	str.w	r1, [r4, #-12]
    3dda:	fad3 f317 	qsub16	r3, r3, r7
    3dde:	fad2 f210 	qsub16	r2, r2, r0
    3de2:	fae3 f122 	shsax	r1, r3, r2
    3de6:	f844 1c08 	str.w	r1, [r4, #-8]
    3dea:	faa3 f322 	shasx	r3, r3, r2
    3dee:	3e01      	subs	r6, #1
    3df0:	f844 3c04 	str.w	r3, [r4, #-4]
    3df4:	f104 0410 	add.w	r4, r4, #16
    3df8:	d1d9      	bne.n	3dae <arm_radix4_butterfly_q15+0x222>
    3dfa:	b011      	add	sp, #68	; 0x44
    3dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3e00:	ffff0000 	.word	0xffff0000

00003e04 <arm_radix4_butterfly_inverse_q15>:
    3e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3e08:	469b      	mov	fp, r3
    3e0a:	b091      	sub	sp, #68	; 0x44
    3e0c:	088b      	lsrs	r3, r1, #2
    3e0e:	4606      	mov	r6, r0
    3e10:	900e      	str	r0, [sp, #56]	; 0x38
    3e12:	2500      	movs	r5, #0
    3e14:	4618      	mov	r0, r3
    3e16:	9103      	str	r1, [sp, #12]
    3e18:	930f      	str	r3, [sp, #60]	; 0x3c
    3e1a:	4637      	mov	r7, r6
    3e1c:	0081      	lsls	r1, r0, #2
    3e1e:	4682      	mov	sl, r0
    3e20:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
    3e24:	4696      	mov	lr, r2
    3e26:	1870      	adds	r0, r6, r1
    3e28:	9207      	str	r2, [sp, #28]
    3e2a:	009b      	lsls	r3, r3, #2
    3e2c:	462c      	mov	r4, r5
    3e2e:	1846      	adds	r6, r0, r1
    3e30:	462a      	mov	r2, r5
    3e32:	9304      	str	r3, [sp, #16]
    3e34:	4431      	add	r1, r6
    3e36:	9601      	str	r6, [sp, #4]
    3e38:	f8cd b008 	str.w	fp, [sp, #8]
    3e3c:	683b      	ldr	r3, [r7, #0]
    3e3e:	fa93 fc22 	shadd16	ip, r3, r2
    3e42:	fa9c fc22 	shadd16	ip, ip, r2
    3e46:	9b01      	ldr	r3, [sp, #4]
    3e48:	681b      	ldr	r3, [r3, #0]
    3e4a:	fa93 f322 	shadd16	r3, r3, r2
    3e4e:	fa93 f322 	shadd16	r3, r3, r2
    3e52:	fa9c f813 	qadd16	r8, ip, r3
    3e56:	fadc fc13 	qsub16	ip, ip, r3
    3e5a:	6803      	ldr	r3, [r0, #0]
    3e5c:	fa93 f322 	shadd16	r3, r3, r2
    3e60:	fa93 f922 	shadd16	r9, r3, r2
    3e64:	680b      	ldr	r3, [r1, #0]
    3e66:	fa93 f322 	shadd16	r3, r3, r2
    3e6a:	fa93 f322 	shadd16	r3, r3, r2
    3e6e:	fa99 f313 	qadd16	r3, r9, r3
    3e72:	fa98 f923 	shadd16	r9, r8, r3
    3e76:	f847 9b04 	str.w	r9, [r7], #4
    3e7a:	fad8 f313 	qsub16	r3, r8, r3
    3e7e:	f85e 9034 	ldr.w	r9, [lr, r4, lsl #3]
    3e82:	fb49 fb03 	smusd	fp, r9, r3
    3e86:	fb29 f913 	smuadx	r9, r9, r3
    3e8a:	6803      	ldr	r3, [r0, #0]
    3e8c:	fa93 f322 	shadd16	r3, r3, r2
    3e90:	fa93 f822 	shadd16	r8, r3, r2
    3e94:	4b78      	ldr	r3, [pc, #480]	; (4078 <arm_radix4_butterfly_inverse_q15+0x274>)
    3e96:	ea09 0303 	and.w	r3, r9, r3
    3e9a:	ea43 431b 	orr.w	r3, r3, fp, lsr #16
    3e9e:	f840 3b04 	str.w	r3, [r0], #4
    3ea2:	680b      	ldr	r3, [r1, #0]
    3ea4:	fa93 f322 	shadd16	r3, r3, r2
    3ea8:	fa93 f322 	shadd16	r3, r3, r2
    3eac:	fad8 f313 	qsub16	r3, r8, r3
    3eb0:	faec f913 	qsax	r9, ip, r3
    3eb4:	faac fc13 	qasx	ip, ip, r3
    3eb8:	f85e 3024 	ldr.w	r3, [lr, r4, lsl #2]
    3ebc:	fb43 f80c 	smusd	r8, r3, ip
    3ec0:	fb23 fc1c 	smuadx	ip, r3, ip
    3ec4:	4b6c      	ldr	r3, [pc, #432]	; (4078 <arm_radix4_butterfly_inverse_q15+0x274>)
    3ec6:	9e01      	ldr	r6, [sp, #4]
    3ec8:	ea0c 0303 	and.w	r3, ip, r3
    3ecc:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
    3ed0:	f846 3b04 	str.w	r3, [r6], #4
    3ed4:	9601      	str	r6, [sp, #4]
    3ed6:	462e      	mov	r6, r5
    3ed8:	f85e 3005 	ldr.w	r3, [lr, r5]
    3edc:	fb43 fc09 	smusd	ip, r3, r9
    3ee0:	fb23 f919 	smuadx	r9, r3, r9
    3ee4:	4b64      	ldr	r3, [pc, #400]	; (4078 <arm_radix4_butterfly_inverse_q15+0x274>)
    3ee6:	f1ba 0a01 	subs.w	sl, sl, #1
    3eea:	9d02      	ldr	r5, [sp, #8]
    3eec:	ea09 0303 	and.w	r3, r9, r3
    3ef0:	442c      	add	r4, r5
    3ef2:	9d04      	ldr	r5, [sp, #16]
    3ef4:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
    3ef8:	442e      	add	r6, r5
    3efa:	f841 3b04 	str.w	r3, [r1], #4
    3efe:	4635      	mov	r5, r6
    3f00:	d19c      	bne.n	3e3c <arm_radix4_butterfly_inverse_q15+0x38>
    3f02:	f8dd b008 	ldr.w	fp, [sp, #8]
    3f06:	ea4f 038b 	mov.w	r3, fp, lsl #2
    3f0a:	9309      	str	r3, [sp, #36]	; 0x24
    3f0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    3f0e:	2b04      	cmp	r3, #4
    3f10:	f240 8086 	bls.w	4020 <arm_radix4_butterfly_inverse_q15+0x21c>
    3f14:	f8cd a010 	str.w	sl, [sp, #16]
    3f18:	930c      	str	r3, [sp, #48]	; 0x30
    3f1a:	9302      	str	r3, [sp, #8]
    3f1c:	9a02      	ldr	r2, [sp, #8]
    3f1e:	2100      	movs	r1, #0
    3f20:	0893      	lsrs	r3, r2, #2
    3f22:	9105      	str	r1, [sp, #20]
    3f24:	0097      	lsls	r7, r2, #2
    3f26:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    3f28:	930d      	str	r3, [sp, #52]	; 0x34
    3f2a:	9206      	str	r2, [sp, #24]
    3f2c:	1e5a      	subs	r2, r3, #1
    3f2e:	009b      	lsls	r3, r3, #2
    3f30:	9108      	str	r1, [sp, #32]
    3f32:	920a      	str	r2, [sp, #40]	; 0x28
    3f34:	930b      	str	r3, [sp, #44]	; 0x2c
    3f36:	9907      	ldr	r1, [sp, #28]
    3f38:	9a08      	ldr	r2, [sp, #32]
    3f3a:	460d      	mov	r5, r1
    3f3c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    3f3e:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    3f42:	4611      	mov	r1, r2
    3f44:	f855 c022 	ldr.w	ip, [r5, r2, lsl #2]
    3f48:	9a07      	ldr	r2, [sp, #28]
    3f4a:	9e06      	ldr	r6, [sp, #24]
    3f4c:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
    3f50:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3f52:	1930      	adds	r0, r6, r4
    3f54:	f852 8031 	ldr.w	r8, [r2, r1, lsl #3]
    3f58:	18cb      	adds	r3, r1, r3
    3f5a:	9a05      	ldr	r2, [sp, #20]
    3f5c:	1825      	adds	r5, r4, r0
    3f5e:	9308      	str	r3, [sp, #32]
    3f60:	9b03      	ldr	r3, [sp, #12]
    3f62:	442c      	add	r4, r5
    3f64:	4293      	cmp	r3, r2
    3f66:	d946      	bls.n	3ff6 <arm_radix4_butterfly_inverse_q15+0x1f2>
    3f68:	9b02      	ldr	r3, [sp, #8]
    3f6a:	9501      	str	r5, [sp, #4]
    3f6c:	eb03 0e02 	add.w	lr, r3, r2
    3f70:	9a01      	ldr	r2, [sp, #4]
    3f72:	6833      	ldr	r3, [r6, #0]
    3f74:	6812      	ldr	r2, [r2, #0]
    3f76:	fa93 fa12 	qadd16	sl, r3, r2
    3f7a:	fad3 f312 	qsub16	r3, r3, r2
    3f7e:	6801      	ldr	r1, [r0, #0]
    3f80:	6822      	ldr	r2, [r4, #0]
    3f82:	fa91 f112 	qadd16	r1, r1, r2
    3f86:	fa9a f221 	shadd16	r2, sl, r1
    3f8a:	9d04      	ldr	r5, [sp, #16]
    3f8c:	fa92 f225 	shadd16	r2, r2, r5
    3f90:	6032      	str	r2, [r6, #0]
    3f92:	443e      	add	r6, r7
    3f94:	fada f121 	shsub16	r1, sl, r1
    3f98:	fb48 fb01 	smusd	fp, r8, r1
    3f9c:	fb28 f211 	smuadx	r2, r8, r1
    3fa0:	4935      	ldr	r1, [pc, #212]	; (4078 <arm_radix4_butterfly_inverse_q15+0x274>)
    3fa2:	f8d0 a000 	ldr.w	sl, [r0]
    3fa6:	4011      	ands	r1, r2
    3fa8:	ea41 411b 	orr.w	r1, r1, fp, lsr #16
    3fac:	6001      	str	r1, [r0, #0]
    3fae:	4438      	add	r0, r7
    3fb0:	6822      	ldr	r2, [r4, #0]
    3fb2:	fada f212 	qsub16	r2, sl, r2
    3fb6:	fae3 f122 	shsax	r1, r3, r2
    3fba:	faa3 f322 	shasx	r3, r3, r2
    3fbe:	fb4c fb03 	smusd	fp, ip, r3
    3fc2:	fb2c f313 	smuadx	r3, ip, r3
    3fc6:	4a2c      	ldr	r2, [pc, #176]	; (4078 <arm_radix4_butterfly_inverse_q15+0x274>)
    3fc8:	401a      	ands	r2, r3
    3fca:	9b01      	ldr	r3, [sp, #4]
    3fcc:	ea42 421b 	orr.w	r2, r2, fp, lsr #16
    3fd0:	601a      	str	r2, [r3, #0]
    3fd2:	443b      	add	r3, r7
    3fd4:	9301      	str	r3, [sp, #4]
    3fd6:	fb49 f201 	smusd	r2, r9, r1
    3fda:	fb29 f111 	smuadx	r1, r9, r1
    3fde:	4b26      	ldr	r3, [pc, #152]	; (4078 <arm_radix4_butterfly_inverse_q15+0x274>)
    3fe0:	46f2      	mov	sl, lr
    3fe2:	9d02      	ldr	r5, [sp, #8]
    3fe4:	400b      	ands	r3, r1
    3fe6:	44ae      	add	lr, r5
    3fe8:	ea43 4312 	orr.w	r3, r3, r2, lsr #16
    3fec:	6023      	str	r3, [r4, #0]
    3fee:	443c      	add	r4, r7
    3ff0:	9b03      	ldr	r3, [sp, #12]
    3ff2:	4553      	cmp	r3, sl
    3ff4:	d8bc      	bhi.n	3f70 <arm_radix4_butterfly_inverse_q15+0x16c>
    3ff6:	9a06      	ldr	r2, [sp, #24]
    3ff8:	9b05      	ldr	r3, [sp, #20]
    3ffa:	3204      	adds	r2, #4
    3ffc:	3301      	adds	r3, #1
    3ffe:	9206      	str	r2, [sp, #24]
    4000:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4002:	9305      	str	r3, [sp, #20]
    4004:	4293      	cmp	r3, r2
    4006:	d996      	bls.n	3f36 <arm_radix4_butterfly_inverse_q15+0x132>
    4008:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    400a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    400c:	089b      	lsrs	r3, r3, #2
    400e:	9202      	str	r2, [sp, #8]
    4010:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4012:	2b04      	cmp	r3, #4
    4014:	930c      	str	r3, [sp, #48]	; 0x30
    4016:	ea4f 0282 	mov.w	r2, r2, lsl #2
    401a:	9209      	str	r2, [sp, #36]	; 0x24
    401c:	f63f af7e 	bhi.w	3f1c <arm_radix4_butterfly_inverse_q15+0x118>
    4020:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    4022:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    4024:	3410      	adds	r4, #16
    4026:	f854 3c10 	ldr.w	r3, [r4, #-16]
    402a:	f854 7c08 	ldr.w	r7, [r4, #-8]
    402e:	fa93 f117 	qadd16	r1, r3, r7
    4032:	f854 2c0c 	ldr.w	r2, [r4, #-12]
    4036:	f854 0c04 	ldr.w	r0, [r4, #-4]
    403a:	fa92 f510 	qadd16	r5, r2, r0
    403e:	fa91 f525 	shadd16	r5, r1, r5
    4042:	f844 5c10 	str.w	r5, [r4, #-16]
    4046:	fa92 f510 	qadd16	r5, r2, r0
    404a:	fad1 f125 	shsub16	r1, r1, r5
    404e:	f844 1c0c 	str.w	r1, [r4, #-12]
    4052:	fad3 f317 	qsub16	r3, r3, r7
    4056:	fad2 f210 	qsub16	r2, r2, r0
    405a:	faa3 f122 	shasx	r1, r3, r2
    405e:	f844 1c08 	str.w	r1, [r4, #-8]
    4062:	fae3 f322 	shsax	r3, r3, r2
    4066:	3e01      	subs	r6, #1
    4068:	f844 3c04 	str.w	r3, [r4, #-4]
    406c:	f104 0410 	add.w	r4, r4, #16
    4070:	d1d9      	bne.n	4026 <arm_radix4_butterfly_inverse_q15+0x222>
    4072:	b011      	add	sp, #68	; 0x44
    4074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4078:	ffff0000 	.word	0xffff0000

0000407c <atoi>:
    407c:	220a      	movs	r2, #10
    407e:	2100      	movs	r1, #0
    4080:	f000 b92c 	b.w	42dc <strtol>

00004084 <__libc_init_array>:
    4084:	b570      	push	{r4, r5, r6, lr}
    4086:	4e0f      	ldr	r6, [pc, #60]	; (40c4 <__libc_init_array+0x40>)
    4088:	4d0f      	ldr	r5, [pc, #60]	; (40c8 <__libc_init_array+0x44>)
    408a:	1b76      	subs	r6, r6, r5
    408c:	10b6      	asrs	r6, r6, #2
    408e:	bf18      	it	ne
    4090:	2400      	movne	r4, #0
    4092:	d005      	beq.n	40a0 <__libc_init_array+0x1c>
    4094:	3401      	adds	r4, #1
    4096:	f855 3b04 	ldr.w	r3, [r5], #4
    409a:	4798      	blx	r3
    409c:	42a6      	cmp	r6, r4
    409e:	d1f9      	bne.n	4094 <__libc_init_array+0x10>
    40a0:	4e0a      	ldr	r6, [pc, #40]	; (40cc <__libc_init_array+0x48>)
    40a2:	4d0b      	ldr	r5, [pc, #44]	; (40d0 <__libc_init_array+0x4c>)
    40a4:	1b76      	subs	r6, r6, r5
    40a6:	f000 f93f 	bl	4328 <___init_veneer>
    40aa:	10b6      	asrs	r6, r6, #2
    40ac:	bf18      	it	ne
    40ae:	2400      	movne	r4, #0
    40b0:	d006      	beq.n	40c0 <__libc_init_array+0x3c>
    40b2:	3401      	adds	r4, #1
    40b4:	f855 3b04 	ldr.w	r3, [r5], #4
    40b8:	4798      	blx	r3
    40ba:	42a6      	cmp	r6, r4
    40bc:	d1f9      	bne.n	40b2 <__libc_init_array+0x2e>
    40be:	bd70      	pop	{r4, r5, r6, pc}
    40c0:	bd70      	pop	{r4, r5, r6, pc}
    40c2:	bf00      	nop
    40c4:	60001780 	.word	0x60001780
    40c8:	60001780 	.word	0x60001780
    40cc:	6000178c 	.word	0x6000178c
    40d0:	60001780 	.word	0x60001780

000040d4 <__locale_ctype_ptr_l>:
    40d4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
    40d8:	4770      	bx	lr
    40da:	bf00      	nop

000040dc <__ascii_mbtowc>:
    40dc:	b082      	sub	sp, #8
    40de:	b149      	cbz	r1, 40f4 <__ascii_mbtowc+0x18>
    40e0:	b15a      	cbz	r2, 40fa <__ascii_mbtowc+0x1e>
    40e2:	b16b      	cbz	r3, 4100 <__ascii_mbtowc+0x24>
    40e4:	7813      	ldrb	r3, [r2, #0]
    40e6:	600b      	str	r3, [r1, #0]
    40e8:	7812      	ldrb	r2, [r2, #0]
    40ea:	1c10      	adds	r0, r2, #0
    40ec:	bf18      	it	ne
    40ee:	2001      	movne	r0, #1
    40f0:	b002      	add	sp, #8
    40f2:	4770      	bx	lr
    40f4:	a901      	add	r1, sp, #4
    40f6:	2a00      	cmp	r2, #0
    40f8:	d1f3      	bne.n	40e2 <__ascii_mbtowc+0x6>
    40fa:	4610      	mov	r0, r2
    40fc:	b002      	add	sp, #8
    40fe:	4770      	bx	lr
    4100:	f06f 0001 	mvn.w	r0, #1
    4104:	e7f4      	b.n	40f0 <__ascii_mbtowc+0x14>
    4106:	bf00      	nop

00004108 <memset>:
    4108:	b470      	push	{r4, r5, r6}
    410a:	0784      	lsls	r4, r0, #30
    410c:	d046      	beq.n	419c <memset+0x94>
    410e:	1e54      	subs	r4, r2, #1
    4110:	2a00      	cmp	r2, #0
    4112:	d041      	beq.n	4198 <memset+0x90>
    4114:	b2cd      	uxtb	r5, r1
    4116:	4603      	mov	r3, r0
    4118:	e002      	b.n	4120 <memset+0x18>
    411a:	1e62      	subs	r2, r4, #1
    411c:	b3e4      	cbz	r4, 4198 <memset+0x90>
    411e:	4614      	mov	r4, r2
    4120:	f803 5b01 	strb.w	r5, [r3], #1
    4124:	079a      	lsls	r2, r3, #30
    4126:	d1f8      	bne.n	411a <memset+0x12>
    4128:	2c03      	cmp	r4, #3
    412a:	d92e      	bls.n	418a <memset+0x82>
    412c:	b2cd      	uxtb	r5, r1
    412e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    4132:	2c0f      	cmp	r4, #15
    4134:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    4138:	d919      	bls.n	416e <memset+0x66>
    413a:	f103 0210 	add.w	r2, r3, #16
    413e:	4626      	mov	r6, r4
    4140:	3e10      	subs	r6, #16
    4142:	2e0f      	cmp	r6, #15
    4144:	f842 5c10 	str.w	r5, [r2, #-16]
    4148:	f842 5c0c 	str.w	r5, [r2, #-12]
    414c:	f842 5c08 	str.w	r5, [r2, #-8]
    4150:	f842 5c04 	str.w	r5, [r2, #-4]
    4154:	f102 0210 	add.w	r2, r2, #16
    4158:	d8f2      	bhi.n	4140 <memset+0x38>
    415a:	f1a4 0210 	sub.w	r2, r4, #16
    415e:	f022 020f 	bic.w	r2, r2, #15
    4162:	f004 040f 	and.w	r4, r4, #15
    4166:	3210      	adds	r2, #16
    4168:	2c03      	cmp	r4, #3
    416a:	4413      	add	r3, r2
    416c:	d90d      	bls.n	418a <memset+0x82>
    416e:	461e      	mov	r6, r3
    4170:	4622      	mov	r2, r4
    4172:	3a04      	subs	r2, #4
    4174:	2a03      	cmp	r2, #3
    4176:	f846 5b04 	str.w	r5, [r6], #4
    417a:	d8fa      	bhi.n	4172 <memset+0x6a>
    417c:	1f22      	subs	r2, r4, #4
    417e:	f022 0203 	bic.w	r2, r2, #3
    4182:	3204      	adds	r2, #4
    4184:	4413      	add	r3, r2
    4186:	f004 0403 	and.w	r4, r4, #3
    418a:	b12c      	cbz	r4, 4198 <memset+0x90>
    418c:	b2c9      	uxtb	r1, r1
    418e:	441c      	add	r4, r3
    4190:	f803 1b01 	strb.w	r1, [r3], #1
    4194:	42a3      	cmp	r3, r4
    4196:	d1fb      	bne.n	4190 <memset+0x88>
    4198:	bc70      	pop	{r4, r5, r6}
    419a:	4770      	bx	lr
    419c:	4614      	mov	r4, r2
    419e:	4603      	mov	r3, r0
    41a0:	e7c2      	b.n	4128 <memset+0x20>
    41a2:	bf00      	nop

000041a4 <_strtol_l.isra.0>:
    41a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    41a8:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    41ac:	460f      	mov	r7, r1
    41ae:	4680      	mov	r8, r0
    41b0:	4616      	mov	r6, r2
    41b2:	461d      	mov	r5, r3
    41b4:	468b      	mov	fp, r1
    41b6:	e000      	b.n	41ba <_strtol_l.isra.0+0x16>
    41b8:	46a3      	mov	fp, r4
    41ba:	465c      	mov	r4, fp
    41bc:	4648      	mov	r0, r9
    41be:	f814 ab01 	ldrb.w	sl, [r4], #1
    41c2:	f7ff ff87 	bl	40d4 <__locale_ctype_ptr_l>
    41c6:	4450      	add	r0, sl
    41c8:	7841      	ldrb	r1, [r0, #1]
    41ca:	f001 0108 	and.w	r1, r1, #8
    41ce:	f001 0cff 	and.w	ip, r1, #255	; 0xff
    41d2:	2900      	cmp	r1, #0
    41d4:	d1f0      	bne.n	41b8 <_strtol_l.isra.0+0x14>
    41d6:	4652      	mov	r2, sl
    41d8:	2a2d      	cmp	r2, #45	; 0x2d
    41da:	d061      	beq.n	42a0 <_strtol_l.isra.0+0xfc>
    41dc:	2a2b      	cmp	r2, #43	; 0x2b
    41de:	bf04      	itt	eq
    41e0:	f89b 2001 	ldrbeq.w	r2, [fp, #1]
    41e4:	f10b 0402 	addeq.w	r4, fp, #2
    41e8:	2d00      	cmp	r5, #0
    41ea:	d043      	beq.n	4274 <_strtol_l.isra.0+0xd0>
    41ec:	2d10      	cmp	r5, #16
    41ee:	d065      	beq.n	42bc <_strtol_l.isra.0+0x118>
    41f0:	46a9      	mov	r9, r5
    41f2:	f1bc 0f00 	cmp.w	ip, #0
    41f6:	bf0c      	ite	eq
    41f8:	f06f 4a00 	mvneq.w	sl, #2147483648	; 0x80000000
    41fc:	f04f 4a00 	movne.w	sl, #2147483648	; 0x80000000
    4200:	2100      	movs	r1, #0
    4202:	fbba fef9 	udiv	lr, sl, r9
    4206:	4608      	mov	r0, r1
    4208:	fb09 aa1e 	mls	sl, r9, lr, sl
    420c:	e005      	b.n	421a <_strtol_l.isra.0+0x76>
    420e:	d029      	beq.n	4264 <_strtol_l.isra.0+0xc0>
    4210:	fb09 3000 	mla	r0, r9, r0, r3
    4214:	2101      	movs	r1, #1
    4216:	f814 2b01 	ldrb.w	r2, [r4], #1
    421a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
    421e:	2b09      	cmp	r3, #9
    4220:	d905      	bls.n	422e <_strtol_l.isra.0+0x8a>
    4222:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
    4226:	2b19      	cmp	r3, #25
    4228:	d80a      	bhi.n	4240 <_strtol_l.isra.0+0x9c>
    422a:	f1a2 0337 	sub.w	r3, r2, #55	; 0x37
    422e:	429d      	cmp	r5, r3
    4230:	dd0e      	ble.n	4250 <_strtol_l.isra.0+0xac>
    4232:	1c4a      	adds	r2, r1, #1
    4234:	d0ef      	beq.n	4216 <_strtol_l.isra.0+0x72>
    4236:	4586      	cmp	lr, r0
    4238:	d2e9      	bcs.n	420e <_strtol_l.isra.0+0x6a>
    423a:	f04f 31ff 	mov.w	r1, #4294967295
    423e:	e7ea      	b.n	4216 <_strtol_l.isra.0+0x72>
    4240:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
    4244:	2b19      	cmp	r3, #25
    4246:	d803      	bhi.n	4250 <_strtol_l.isra.0+0xac>
    4248:	f1a2 0357 	sub.w	r3, r2, #87	; 0x57
    424c:	429d      	cmp	r5, r3
    424e:	dcf0      	bgt.n	4232 <_strtol_l.isra.0+0x8e>
    4250:	1c4b      	adds	r3, r1, #1
    4252:	d015      	beq.n	4280 <_strtol_l.isra.0+0xdc>
    4254:	f1bc 0f00 	cmp.w	ip, #0
    4258:	d110      	bne.n	427c <_strtol_l.isra.0+0xd8>
    425a:	b14e      	cbz	r6, 4270 <_strtol_l.isra.0+0xcc>
    425c:	b9e1      	cbnz	r1, 4298 <_strtol_l.isra.0+0xf4>
    425e:	6037      	str	r7, [r6, #0]
    4260:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4264:	459a      	cmp	sl, r3
    4266:	dad3      	bge.n	4210 <_strtol_l.isra.0+0x6c>
    4268:	4670      	mov	r0, lr
    426a:	f04f 31ff 	mov.w	r1, #4294967295
    426e:	e7d2      	b.n	4216 <_strtol_l.isra.0+0x72>
    4270:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4274:	2a30      	cmp	r2, #48	; 0x30
    4276:	d01a      	beq.n	42ae <_strtol_l.isra.0+0x10a>
    4278:	250a      	movs	r5, #10
    427a:	e7b9      	b.n	41f0 <_strtol_l.isra.0+0x4c>
    427c:	4240      	negs	r0, r0
    427e:	e7ec      	b.n	425a <_strtol_l.isra.0+0xb6>
    4280:	f1bc 0f00 	cmp.w	ip, #0
    4284:	f04f 0322 	mov.w	r3, #34	; 0x22
    4288:	bf0c      	ite	eq
    428a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    428e:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
    4292:	f8c8 3000 	str.w	r3, [r8]
    4296:	b1f6      	cbz	r6, 42d6 <_strtol_l.isra.0+0x132>
    4298:	1e67      	subs	r7, r4, #1
    429a:	6037      	str	r7, [r6, #0]
    429c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    42a0:	f10b 0402 	add.w	r4, fp, #2
    42a4:	f89b 2001 	ldrb.w	r2, [fp, #1]
    42a8:	f04f 0c01 	mov.w	ip, #1
    42ac:	e79c      	b.n	41e8 <_strtol_l.isra.0+0x44>
    42ae:	7823      	ldrb	r3, [r4, #0]
    42b0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    42b4:	2b58      	cmp	r3, #88	; 0x58
    42b6:	d008      	beq.n	42ca <_strtol_l.isra.0+0x126>
    42b8:	2508      	movs	r5, #8
    42ba:	e799      	b.n	41f0 <_strtol_l.isra.0+0x4c>
    42bc:	2a30      	cmp	r2, #48	; 0x30
    42be:	d197      	bne.n	41f0 <_strtol_l.isra.0+0x4c>
    42c0:	7823      	ldrb	r3, [r4, #0]
    42c2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    42c6:	2b58      	cmp	r3, #88	; 0x58
    42c8:	d192      	bne.n	41f0 <_strtol_l.isra.0+0x4c>
    42ca:	f04f 0910 	mov.w	r9, #16
    42ce:	7862      	ldrb	r2, [r4, #1]
    42d0:	464d      	mov	r5, r9
    42d2:	3402      	adds	r4, #2
    42d4:	e78d      	b.n	41f2 <_strtol_l.isra.0+0x4e>
    42d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    42da:	bf00      	nop

000042dc <strtol>:
    42dc:	b530      	push	{r4, r5, lr}
    42de:	4c08      	ldr	r4, [pc, #32]	; (4300 <strtol+0x24>)
    42e0:	4b08      	ldr	r3, [pc, #32]	; (4304 <strtol+0x28>)
    42e2:	6825      	ldr	r5, [r4, #0]
    42e4:	6b6c      	ldr	r4, [r5, #52]	; 0x34
    42e6:	b083      	sub	sp, #12
    42e8:	2c00      	cmp	r4, #0
    42ea:	bf08      	it	eq
    42ec:	461c      	moveq	r4, r3
    42ee:	9400      	str	r4, [sp, #0]
    42f0:	4613      	mov	r3, r2
    42f2:	460a      	mov	r2, r1
    42f4:	4601      	mov	r1, r0
    42f6:	4628      	mov	r0, r5
    42f8:	f7ff ff54 	bl	41a4 <_strtol_l.isra.0>
    42fc:	b003      	add	sp, #12
    42fe:	bd30      	pop	{r4, r5, pc}
    4300:	20012830 	.word	0x20012830
    4304:	20012834 	.word	0x20012834

00004308 <__ascii_wctomb>:
    4308:	b121      	cbz	r1, 4314 <__ascii_wctomb+0xc>
    430a:	2aff      	cmp	r2, #255	; 0xff
    430c:	d804      	bhi.n	4318 <__ascii_wctomb+0x10>
    430e:	700a      	strb	r2, [r1, #0]
    4310:	2001      	movs	r0, #1
    4312:	4770      	bx	lr
    4314:	4608      	mov	r0, r1
    4316:	4770      	bx	lr
    4318:	238a      	movs	r3, #138	; 0x8a
    431a:	6003      	str	r3, [r0, #0]
    431c:	f04f 30ff 	mov.w	r0, #4294967295
    4320:	4770      	bx	lr
    4322:	bf00      	nop
    4324:	0000      	movs	r0, r0
	...

00004328 <___init_veneer>:
    4328:	f85f f000 	ldr.w	pc, [pc]	; 432c <___init_veneer+0x4>
    432c:	60001729 	.word	0x60001729

Disassembly of section .fini:

00004330 <_fini>:
    4330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4332:	bf00      	nop
