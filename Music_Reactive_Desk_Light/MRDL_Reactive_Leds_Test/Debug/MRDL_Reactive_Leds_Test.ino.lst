
C:\Users\lesle\AppData\Local\Temp\VMBuilds\MRDL_Reactive_Leds_Test\teensy40\Debug/MRDL_Reactive_Leds_Test.ino.elf:     file format elf32-littlearm


Disassembly of section .text.progmem:

60000000 <FlexSPI_NOR_Config>:
60000000:	46 43 46 42 00 00 01 56 00 00 00 00 01 01 02 00     FCFB...V........
	...
60000044:	01 04 03 00 00 00 00 00 00 00 00 00 00 00 20 00     .............. .
	...
60000080:	eb 04 18 0a 06 32 04 26 00 00 00 00 00 00 00 00     .....2.&........
60000090:	05 04 04 24 00 00 00 00 00 00 00 00 00 00 00 00     ...$............
	...
600000b0:	06 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
600000d0:	20 04 18 08 00 00 00 00 00 00 00 00 00 00 00 00      ...............
	...
60000100:	d8 04 18 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
60000110:	02 04 18 08 04 20 00 00 00 00 00 00 00 00 00 00     ..... ..........
	...
60000130:	60 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     `...............
	...
600001c0:	00 01 00 00 00 10 00 00 01 00 00 00 00 00 00 00     ................
600001d0:	00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
60000200:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000210:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000220:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000230:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000240:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000250:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000260:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000270:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000280:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000290:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000300:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000310:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000320:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000330:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000340:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000350:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000360:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000370:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000380:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000390:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000400:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000410:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000420:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000430:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000440:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000450:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000460:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000470:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000480:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000490:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000500:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000510:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000520:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000530:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000540:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000550:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000560:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000570:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000580:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000590:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000600:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000610:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000620:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000630:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000640:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000650:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000660:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000670:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000680:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000690:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000700:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000710:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000720:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000730:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000740:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000750:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000760:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000770:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000780:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000790:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000800:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000810:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000820:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000830:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000840:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000850:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000860:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000870:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000880:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000890:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000900:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000910:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000920:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000930:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000940:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000950:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000960:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000970:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000980:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000990:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000aa0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ab0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ac0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ad0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ae0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000af0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ba0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000be0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bf0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ca0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ce0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cf0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000da0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000db0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000dc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000dd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000de0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000df0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ea0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000eb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ec0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ed0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ee0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ef0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fa0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fe0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ff0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................

60001000 <ImageVectorTable>:
60001000:	d1 00 20 40 2c 10 00 60 00 00 00 00 00 00 00 00     .. @,..`........
60001010:	20 10 00 60 00 10 00 60 00 00 00 00 00 00 00 00      ..`...`........

60001020 <BootData>:
60001020:	00 00 00 60 90 6f 01 00 00 00 00 00                 ...`.o......

6000102c <vector_table>:
6000102c:	00 00 01 20 35 10 00 60                             ... 5..`

60001034 <ResetHandler>:
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001034:	4b76      	ldr	r3, [pc, #472]	; (60001210 <ResetHandler+0x1dc>)
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001036:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103a:	4a76      	ldr	r2, [pc, #472]	; (60001214 <ResetHandler+0x1e0>)
	IOMUXC_GPR_GPR16 = 0x00200007;
6000103c:	4876      	ldr	r0, [pc, #472]	; (60001218 <ResetHandler+0x1e4>)
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103e:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001040:	6418      	str	r0, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001042:	4a76      	ldr	r2, [pc, #472]	; (6000121c <ResetHandler+0x1e8>)
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001044:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001046:	4695      	mov	sp, r2
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001048:	4a75      	ldr	r2, [pc, #468]	; (60001220 <ResetHandler+0x1ec>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
6000104a:	f503 3330 	add.w	r3, r3, #180224	; 0x2c000
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
6000104e:	4975      	ldr	r1, [pc, #468]	; (60001224 <ResetHandler+0x1f0>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001050:	2008      	movs	r0, #8
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001052:	428a      	cmp	r2, r1
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001054:	f8c3 0154 	str.w	r0, [r3, #340]	; 0x154
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001058:	d00f      	beq.n	6000107a <ResetHandler+0x46>
	while (dest < dest_end) {
6000105a:	4b73      	ldr	r3, [pc, #460]	; (60001228 <ResetHandler+0x1f4>)
6000105c:	429a      	cmp	r2, r3
6000105e:	d20c      	bcs.n	6000107a <ResetHandler+0x46>
60001060:	43d4      	mvns	r4, r2
60001062:	4608      	mov	r0, r1
60001064:	4423      	add	r3, r4
60001066:	f023 0303 	bic.w	r3, r3, #3
6000106a:	3304      	adds	r3, #4
6000106c:	440b      	add	r3, r1
		*dest++ = *src++;
6000106e:	f850 1b04 	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001072:	4298      	cmp	r0, r3
		*dest++ = *src++;
60001074:	f842 1b04 	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001078:	d1f9      	bne.n	6000106e <ResetHandler+0x3a>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
6000107a:	4a6c      	ldr	r2, [pc, #432]	; (6000122c <ResetHandler+0x1f8>)
6000107c:	496c      	ldr	r1, [pc, #432]	; (60001230 <ResetHandler+0x1fc>)
6000107e:	428a      	cmp	r2, r1
60001080:	d00f      	beq.n	600010a2 <ResetHandler+0x6e>
	while (dest < dest_end) {
60001082:	4b6c      	ldr	r3, [pc, #432]	; (60001234 <ResetHandler+0x200>)
60001084:	429a      	cmp	r2, r3
60001086:	d20c      	bcs.n	600010a2 <ResetHandler+0x6e>
60001088:	43d4      	mvns	r4, r2
6000108a:	4608      	mov	r0, r1
6000108c:	4423      	add	r3, r4
6000108e:	f023 0303 	bic.w	r3, r3, #3
60001092:	3304      	adds	r3, #4
60001094:	440b      	add	r3, r1
		*dest++ = *src++;
60001096:	f850 1b04 	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
6000109a:	4298      	cmp	r0, r3
		*dest++ = *src++;
6000109c:	f842 1b04 	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
600010a0:	d1f9      	bne.n	60001096 <ResetHandler+0x62>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010a2:	4a65      	ldr	r2, [pc, #404]	; (60001238 <ResetHandler+0x204>)
600010a4:	4b65      	ldr	r3, [pc, #404]	; (6000123c <ResetHandler+0x208>)
600010a6:	429a      	cmp	r2, r3
600010a8:	d20b      	bcs.n	600010c2 <ResetHandler+0x8e>
600010aa:	43d0      	mvns	r0, r2
600010ac:	4611      	mov	r1, r2
		*dest++ = 0;
600010ae:	2400      	movs	r4, #0
600010b0:	4403      	add	r3, r0
600010b2:	f023 0303 	bic.w	r3, r3, #3
600010b6:	3304      	adds	r3, #4
600010b8:	4413      	add	r3, r2
600010ba:	f841 4b04 	str.w	r4, [r1], #4
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010be:	428b      	cmp	r3, r1
600010c0:	d1fb      	bne.n	600010ba <ResetHandler+0x86>
	memory_copy(&_stext, &_stextload, &_etext);
	memory_copy(&_sdata, &_sdataload, &_edata);
	memory_clear(&_sbss, &_ebss);

	// enable FPU
	SCB_CPACR = 0x00F00000;
600010c2:	4a5f      	ldr	r2, [pc, #380]	; (60001240 <ResetHandler+0x20c>)
600010c4:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
600010c8:	4b5e      	ldr	r3, [pc, #376]	; (60001244 <ResetHandler+0x210>)
600010ca:	6011      	str	r1, [r2, #0]
600010cc:	f503 7130 	add.w	r1, r3, #704	; 0x2c0
600010d0:	4a5d      	ldr	r2, [pc, #372]	; (60001248 <ResetHandler+0x214>)

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
600010d2:	f843 2f04 	str.w	r2, [r3, #4]!
600010d6:	4299      	cmp	r1, r3
600010d8:	d1fb      	bne.n	600010d2 <ResetHandler+0x9e>
600010da:	4b5c      	ldr	r3, [pc, #368]	; (6000124c <ResetHandler+0x218>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600010dc:	2180      	movs	r1, #128	; 0x80
600010de:	4a5c      	ldr	r2, [pc, #368]	; (60001250 <ResetHandler+0x21c>)
600010e0:	f803 1b01 	strb.w	r1, [r3], #1
600010e4:	4293      	cmp	r3, r2
600010e6:	d1fb      	bne.n	600010e0 <ResetHandler+0xac>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600010e8:	4c5a      	ldr	r4, [pc, #360]	; (60001254 <ResetHandler+0x220>)
600010ea:	f04f 3780 	mov.w	r7, #2155905152	; 0x80808080
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600010ee:	4e5a      	ldr	r6, [pc, #360]	; (60001258 <ResetHandler+0x224>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010f0:	f04f 32ff 	mov.w	r2, #4294967295
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010f4:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 60001298 <ResetHandler+0x264>
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
600010f8:	2500      	movs	r5, #0

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600010fa:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 6000129c <ResetHandler+0x268>
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600010fe:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 600012a0 <ResetHandler+0x26c>
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
60001102:	4b56      	ldr	r3, [pc, #344]	; (6000125c <ResetHandler+0x228>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001104:	4942      	ldr	r1, [pc, #264]	; (60001210 <ResetHandler+0x1dc>)
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
60001106:	f8c3 a000 	str.w	sl, [r3]
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
6000110a:	f8c4 7104 	str.w	r7, [r4, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000110e:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001112:	f8c4 70f4 	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001116:	f8c4 80f0 	str.w	r8, [r4, #240]	; 0xf0
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
6000111a:	69f3      	ldr	r3, [r6, #28]
6000111c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
60001120:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001124:	61f3      	str	r3, [r6, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
60001126:	6a73      	ldr	r3, [r6, #36]	; 0x24
60001128:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
6000112c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001130:	6273      	str	r3, [r6, #36]	; 0x24

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001132:	668a      	str	r2, [r1, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
60001134:	66ca      	str	r2, [r1, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001136:	670a      	str	r2, [r1, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001138:	674a      	str	r2, [r1, #116]	; 0x74
	// must enable PRINT_DEBUG_STUFF in debug/print.h
	printf_debug_init();
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
6000113a:	f000 f8df 	bl	600012fc <configure_cache>
extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000113e:	4a48      	ldr	r2, [pc, #288]	; (60001260 <ResetHandler+0x22c>)
60001140:	2063      	movs	r0, #99	; 0x63
	SYST_CVR = 0;
60001142:	4b48      	ldr	r3, [pc, #288]	; (60001264 <ResetHandler+0x230>)
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
60001144:	4948      	ldr	r1, [pc, #288]	; (60001268 <ResetHandler+0x234>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001146:	6010      	str	r0, [r2, #0]
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001148:	2203      	movs	r2, #3
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
6000114a:	601d      	str	r5, [r3, #0]
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
6000114c:	f8ca 1038 	str.w	r1, [sl, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001150:	f843 2c08 	str.w	r2, [r3, #-8]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001154:	4945      	ldr	r1, [pc, #276]	; (6000126c <ResetHandler+0x238>)
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001156:	4a46      	ldr	r2, [pc, #280]	; (60001270 <ResetHandler+0x23c>)

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
60001158:	4846      	ldr	r0, [pc, #280]	; (60001274 <ResetHandler+0x240>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000115a:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000115e:	680b      	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001160:	4a45      	ldr	r2, [pc, #276]	; (60001278 <ResetHandler+0x244>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001162:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
60001166:	f8ca 003c 	str.w	r0, [sl, #60]	; 0x3c
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000116a:	4844      	ldr	r0, [pc, #272]	; (6000127c <ResetHandler+0x248>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000116c:	600b      	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000116e:	6813      	ldr	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001170:	4943      	ldr	r1, [pc, #268]	; (60001280 <ResetHandler+0x24c>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001172:	f043 0301 	orr.w	r3, r3, #1
60001176:	6013      	str	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001178:	6803      	ldr	r3, [r0, #0]
6000117a:	600b      	str	r3, [r1, #0]
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
	configure_systick();
	usb_pll_start();	
6000117c:	f000 f93a 	bl	600013f4 <usb_pll_start>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001180:	f8c4 7104 	str.w	r7, [r4, #260]	; 0x104
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001184:	483f      	ldr	r0, [pc, #252]	; (60001284 <ResetHandler+0x250>)

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001186:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000118a:	f8c4 70f4 	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000118e:	f8c4 80f0 	str.w	r8, [r4, #240]	; 0xf0
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001192:	f000 faed 	bl	60001770 <__set_arm_clock_veneer>
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?
60001196:	bf00      	nop
60001198:	bf00      	nop
6000119a:	bf00      	nop
6000119c:	bf00      	nop

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000119e:	6ef1      	ldr	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
600011a0:	4a39      	ldr	r2, [pc, #228]	; (60001288 <ResetHandler+0x254>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
600011a2:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
	PIT_TCTRL1 = 0;
	PIT_TCTRL2 = 0;
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011a6:	4b39      	ldr	r3, [pc, #228]	; (6000128c <ResetHandler+0x258>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
600011a8:	66f1      	str	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
600011aa:	6015      	str	r5, [r2, #0]
	PIT_TCTRL0 = 0;
600011ac:	f8c2 5108 	str.w	r5, [r2, #264]	; 0x108
	PIT_TCTRL1 = 0;
600011b0:	f8c2 5118 	str.w	r5, [r2, #280]	; 0x118
	PIT_TCTRL2 = 0;
600011b4:	f8c2 5128 	str.w	r5, [r2, #296]	; 0x128
	PIT_TCTRL3 = 0;
600011b8:	f8c2 5138 	str.w	r5, [r2, #312]	; 0x138

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
600011be:	07d2      	lsls	r2, r2, #31
600011c0:	d408      	bmi.n	600011d4 <ResetHandler+0x1a0>
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011c2:	f642 6215 	movw	r2, #11797	; 0x2e15
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
600011c6:	4932      	ldr	r1, [pc, #200]	; (60001290 <ResetHandler+0x25c>)
600011c8:	6559      	str	r1, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011ca:	651a      	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
600011cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
600011ce:	f042 0201 	orr.w	r2, r2, #1
600011d2:	639a      	str	r2, [r3, #56]	; 0x38
	}
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600011d4:	4a2d      	ldr	r2, [pc, #180]	; (6000128c <ResetHandler+0x258>)
600011d6:	4c2f      	ldr	r4, [pc, #188]	; (60001294 <ResetHandler+0x260>)
600011d8:	6893      	ldr	r3, [r2, #8]
600011da:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
600011de:	6093      	str	r3, [r2, #8]

#ifdef ARDUINO_TEENSY41
	configure_external_ram();
#endif
	startup_early_hook();
600011e0:	f000 faca 	bl	60001778 <__startup_early_hook_veneer>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
600011e4:	6823      	ldr	r3, [r4, #0]
	while (millis() < 20) ; // wait at least 20ms before starting USB
600011e6:	2b13      	cmp	r3, #19
600011e8:	d9fc      	bls.n	600011e4 <ResetHandler+0x1b0>
	usb_init();
600011ea:	f000 f9c3 	bl	60001574 <usb_init>
	analog_init();
600011ee:	f000 f859 	bl	600012a4 <analog_init>
	pwm_init();
600011f2:	f000 faa1 	bl	60001738 <__pwm_init_veneer>
	tempmon_init();
600011f6:	f000 f92f 	bl	60001458 <tempmon_init>

	startup_late_hook();
600011fa:	f000 faa9 	bl	60001750 <__startup_late_hook_veneer>
600011fe:	6823      	ldr	r3, [r4, #0]
	while (millis() < 300) ; // wait at least 300ms before calling user code
60001200:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
60001204:	d3fb      	bcc.n	600011fe <ResetHandler+0x1ca>
	//printf("before C++ constructors\n");
	__libc_init_array();
60001206:	f000 fa9b 	bl	60001740 <____libc_init_array_veneer>
	//printf("after C++ constructors\n");
	//printf("before setup\n");
	main();
6000120a:	f000 faad 	bl	60001768 <__main_veneer>
6000120e:	e7fe      	b.n	6000120e <ResetHandler+0x1da>
60001210:	400ac000 	.word	0x400ac000
60001214:	aaaaaaab 	.word	0xaaaaaaab
60001218:	00200007 	.word	0x00200007
6000121c:	20078000 	.word	0x20078000
60001220:	00000000 	.word	0x00000000
60001224:	60001790 	.word	0x60001790
60001228:	00003570 	.word	0x00003570
6000122c:	20000000 	.word	0x20000000
60001230:	60004d04 	.word	0x60004d04
60001234:	20012290 	.word	0x20012290
60001238:	20012290 	.word	0x20012290
6000123c:	200452c0 	.word	0x200452c0
60001240:	e000ed88 	.word	0xe000ed88
60001244:	200437fc 	.word	0x200437fc
60001248:	00001a1d 	.word	0x00001a1d
6000124c:	e000e400 	.word	0xe000e400
60001250:	e000e4a0 	.word	0xe000e4a0
60001254:	400d8000 	.word	0x400d8000
60001258:	400fc000 	.word	0x400fc000
6000125c:	e000ed08 	.word	0xe000ed08
60001260:	e000e014 	.word	0xe000e014
60001264:	e000e018 	.word	0xe000e018
60001268:	00002bc9 	.word	0x00002bc9
6000126c:	e000edfc 	.word	0xe000edfc
60001270:	20200000 	.word	0x20200000
60001274:	00002bcd 	.word	0x00002bcd
60001278:	e0001000 	.word	0xe0001000
6000127c:	e0001004 	.word	0xe0001004
60001280:	20043238 	.word	0x20043238
60001284:	23c34600 	.word	0x23c34600
60001288:	40084000 	.word	0x40084000
6000128c:	400d4000 	.word	0x400d4000
60001290:	56c00000 	.word	0x56c00000
60001294:	20043240 	.word	0x20043240
60001298:	20043800 	.word	0x20043800
6000129c:	2018101b 	.word	0x2018101b
600012a0:	13110d0c 	.word	0x13110d0c

600012a4 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600012a4:	4b11      	ldr	r3, [pc, #68]	; (600012ec <analog_init+0x48>)
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600012a6:	4912      	ldr	r1, [pc, #72]	; (600012f0 <analog_init+0x4c>)
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600012a8:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
600012aa:	460a      	mov	r2, r1
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600012ac:	f440 3040 	orr.w	r0, r0, #196608	; 0x30000
}

#define MAX_ADC_CLOCK 20000000

FLASHMEM void analog_init(void)
{
600012b0:	b430      	push	{r4, r5}
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600012b2:	66d8      	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600012b4:	f240 6537 	movw	r5, #1591	; 0x637
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600012b8:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600012ba:	24a0      	movs	r4, #160	; 0xa0
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600012bc:	f440 7040 	orr.w	r0, r0, #768	; 0x300
600012c0:	66d8      	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600012c2:	644d      	str	r5, [r1, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600012c4:	648c      	str	r4, [r1, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
600012c6:	6c93      	ldr	r3, [r2, #72]	; 0x48
600012c8:	061b      	lsls	r3, r3, #24
600012ca:	d4fc      	bmi.n	600012c6 <analog_init+0x22>
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
600012cc:	4b09      	ldr	r3, [pc, #36]	; (600012f4 <analog_init+0x50>)
600012ce:	f240 6037 	movw	r0, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600012d2:	21a0      	movs	r1, #160	; 0xa0
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
600012d4:	461a      	mov	r2, r3
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
600012d6:	6458      	str	r0, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600012d8:	6499      	str	r1, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
600012da:	6c93      	ldr	r3, [r2, #72]	; 0x48
600012dc:	f013 0380 	ands.w	r3, r3, #128	; 0x80
600012e0:	d1fb      	bne.n	600012da <analog_init+0x36>
	calibrating = 0;
600012e2:	4a05      	ldr	r2, [pc, #20]	; (600012f8 <analog_init+0x54>)
600012e4:	7013      	strb	r3, [r2, #0]
}
600012e6:	bc30      	pop	{r4, r5}
600012e8:	4770      	bx	lr
600012ea:	bf00      	nop
600012ec:	400fc000 	.word	0x400fc000
600012f0:	400c4000 	.word	0x400c4000
600012f4:	400c8000 	.word	0x400c8000
600012f8:	20043234 	.word	0x20043234

600012fc <configure_cache>:
#define SIZE_2G		(SCB_MPU_RASR_SIZE(30) | SCB_MPU_RASR_ENABLE)
#define SIZE_4G		(SCB_MPU_RASR_SIZE(31) | SCB_MPU_RASR_ENABLE)
#define REGION(n)	(SCB_MPU_RBAR_REGION(n) | SCB_MPU_RBAR_VALID)

FLASHMEM void configure_cache(void)
{
600012fc:	b5f0      	push	{r4, r5, r6, r7, lr}
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600012fe:	4a28      	ldr	r2, [pc, #160]	; (600013a0 <configure_cache+0xa4>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
60001300:	2000      	movs	r0, #0

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60001302:	4b28      	ldr	r3, [pc, #160]	; (600013a4 <configure_cache+0xa8>)
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001304:	f04f 0c10 	mov.w	ip, #16
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
60001308:	4c27      	ldr	r4, [pc, #156]	; (600013a8 <configure_cache+0xac>)

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
6000130a:	2711      	movs	r7, #17

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000130c:	f8df e0d8 	ldr.w	lr, [pc, #216]	; 600013e8 <configure_cache+0xec>
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001310:	2612      	movs	r6, #18
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
60001312:	6020      	str	r0, [r4, #0]
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001314:	2501      	movs	r5, #1
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001316:	f8c2 c000 	str.w	ip, [r2]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000131a:	f8c3 e000 	str.w	lr, [r3]
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
6000131e:	6017      	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
60001320:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 600013ec <configure_cache+0xf0>

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60001324:	4f21      	ldr	r7, [pc, #132]	; (600013ac <configure_cache+0xb0>)
	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
60001326:	f8c3 e000 	str.w	lr, [r3]

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
6000132a:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
6000132c:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
6000132e:	4e20      	ldr	r6, [pc, #128]	; (600013b0 <configure_cache+0xb4>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001330:	4f20      	ldr	r7, [pc, #128]	; (600013b4 <configure_cache+0xb8>)
	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001332:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001334:	4920      	ldr	r1, [pc, #128]	; (600013b8 <configure_cache+0xbc>)
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001336:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001338:	4e20      	ldr	r6, [pc, #128]	; (600013bc <configure_cache+0xc0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
6000133a:	f041 0115 	orr.w	r1, r1, #21

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
6000133e:	4f20      	ldr	r7, [pc, #128]	; (600013c0 <configure_cache+0xc4>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001340:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001342:	601f      	str	r7, [r3, #0]
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001344:	f507 3740 	add.w	r7, r7, #196608	; 0x30000

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001348:	4e1e      	ldr	r6, [pc, #120]	; (600013c4 <configure_cache+0xc8>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
6000134a:	6011      	str	r1, [r2, #0]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
6000134c:	3702      	adds	r7, #2

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
6000134e:	601e      	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001350:	f8df e09c 	ldr.w	lr, [pc, #156]	; 600013f0 <configure_cache+0xf4>
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001354:	4e1c      	ldr	r6, [pc, #112]	; (600013c8 <configure_cache+0xcc>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001356:	491d      	ldr	r1, [pc, #116]	; (600013cc <configure_cache+0xd0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001358:	f8c2 e000 	str.w	lr, [r2]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
6000135c:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
6000135e:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001360:	4f1b      	ldr	r7, [pc, #108]	; (600013d0 <configure_cache+0xd4>)

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001362:	6019      	str	r1, [r3, #0]

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001364:	4e1b      	ldr	r6, [pc, #108]	; (600013d4 <configure_cache+0xd8>)

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001366:	491c      	ldr	r1, [pc, #112]	; (600013d8 <configure_cache+0xdc>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001368:	6017      	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
6000136a:	601e      	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;
6000136c:	4f1b      	ldr	r7, [pc, #108]	; (600013dc <configure_cache+0xe0>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000136e:	6011      	str	r1, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001370:	4e1b      	ldr	r6, [pc, #108]	; (600013e0 <configure_cache+0xe4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001372:	491c      	ldr	r1, [pc, #112]	; (600013e4 <configure_cache+0xe8>)

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;
60001374:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001376:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001378:	6019      	str	r1, [r3, #0]

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
6000137a:	6025      	str	r5, [r4, #0]

	// cache enable, ARM DDI0403E, pg 628
	asm("dsb");
6000137c:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001380:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
60001384:	f8c3 01b0 	str.w	r0, [r3, #432]	; 0x1b0

	asm("dsb");
60001388:	f3bf 8f4f 	dsb	sy
	asm("isb");
6000138c:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001390:	f852 3c88 	ldr.w	r3, [r2, #-136]
60001394:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
60001398:	f842 3c88 	str.w	r3, [r2, #-136]
6000139c:	bdf0      	pop	{r4, r5, r6, r7, pc}
6000139e:	bf00      	nop
600013a0:	e000ed9c 	.word	0xe000ed9c
600013a4:	e000eda0 	.word	0xe000eda0
600013a8:	e000ed94 	.word	0xe000ed94
600013ac:	00100009 	.word	0x00100009
600013b0:	00200013 	.word	0x00200013
600013b4:	07020021 	.word	0x07020021
600013b8:	200452c0 	.word	0x200452c0
600013bc:	20000014 	.word	0x20000014
600013c0:	13080025 	.word	0x13080025
600013c4:	10000009 	.word	0x10000009
600013c8:	40000017 	.word	0x40000017
600013cc:	13100033 	.word	0x13100033
600013d0:	60000018 	.word	0x60000018
600013d4:	070b002f 	.word	0x070b002f
600013d8:	70000019 	.word	0x70000019
600013dc:	170b0037 	.word	0x170b0037
600013e0:	7000001a 	.word	0x7000001a
600013e4:	130b002f 	.word	0x130b002f
600013e8:	1000003f 	.word	0x1000003f
600013ec:	03080025 	.word	0x03080025
600013f0:	20200016 	.word	0x20200016

600013f4 <usb_pll_start>:

#endif // ARDUINO_TEENSY41


FLASHMEM void usb_pll_start()
{
600013f4:	b4f0      	push	{r4, r5, r6, r7}
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
600013f6:	4a17      	ldr	r2, [pc, #92]	; (60001454 <usb_pll_start+0x60>)
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
600013f8:	2740      	movs	r7, #64	; 0x40
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
600013fa:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
600013fe:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001402:	f44f 5500 	mov.w	r5, #8192	; 0x2000
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001406:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
6000140a:	f243 0042 	movw	r0, #12354	; 0x3042


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000140e:	6913      	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001410:	f013 0f02 	tst.w	r3, #2
60001414:	d006      	beq.n	60001424 <usb_pll_start+0x30>
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001416:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001418:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
6000141a:	6190      	str	r0, [r2, #24]


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000141c:	6913      	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
6000141e:	f013 0f02 	tst.w	r3, #2
60001422:	d1f8      	bne.n	60001416 <usb_pll_start+0x22>
				CCM_ANALOG_PLL_USB1_DIV_SELECT |		// use 480 MHz
				CCM_ANALOG_PLL_USB1_ENABLE |			// disable
				CCM_ANALOG_PLL_USB1_EN_USB_CLKS;		// disable usb
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001424:	f413 5f00 	tst.w	r3, #8192	; 0x2000
60001428:	d101      	bne.n	6000142e <usb_pll_start+0x3a>
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000142a:	6155      	str	r5, [r2, #20]
			continue;
6000142c:	e7ef      	b.n	6000140e <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
6000142e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
60001432:	d101      	bne.n	60001438 <usb_pll_start+0x44>
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001434:	6156      	str	r6, [r2, #20]
			continue;
60001436:	e7ea      	b.n	6000140e <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001438:	2b00      	cmp	r3, #0
6000143a:	dae8      	bge.n	6000140e <usb_pll_start+0x1a>
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
6000143c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
60001440:	d001      	beq.n	60001446 <usb_pll_start+0x52>
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001442:	6191      	str	r1, [r2, #24]
			continue;
60001444:	e7e3      	b.n	6000140e <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001446:	065b      	lsls	r3, r3, #25
60001448:	d401      	bmi.n	6000144e <usb_pll_start+0x5a>
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
6000144a:	6157      	str	r7, [r2, #20]
			continue;
6000144c:	e7df      	b.n	6000140e <usb_pll_start+0x1a>
		}
		return; // everything is as it should be  :-)
	}
}
6000144e:	bcf0      	pop	{r4, r5, r6, r7}
60001450:	4770      	bx	lr
60001452:	bf00      	nop
60001454:	400d8000 	.word	0x400d8000

60001458 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001458:	4a3b      	ldr	r2, [pc, #236]	; (60001548 <tempmon_init+0xf0>)
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
6000145a:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
6000145e:	493b      	ldr	r1, [pc, #236]	; (6000154c <tempmon_init+0xf4>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001460:	2000      	movs	r0, #0
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001462:	6813      	ldr	r3, [r2, #0]
  asm volatile ("dsb":::"memory");
  while (1) asm ("wfi");
}

FLASHMEM void tempmon_init(void)
{
60001464:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001466:	f023 0301 	bic.w	r3, r3, #1

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
6000146a:	2403      	movs	r4, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
6000146c:	f8df e100 	ldr.w	lr, [pc, #256]	; 60001570 <tempmon_init+0x118>
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001470:	6013      	str	r3, [r2, #0]

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001472:	f8c2 4090 	str.w	r4, [r2, #144]	; 0x90
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001476:	f8d1 30e0 	ldr.w	r3, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
6000147a:	4f35      	ldr	r7, [pc, #212]	; (60001550 <tempmon_init+0xf8>)
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
6000147c:	b2dd      	uxtb	r5, r3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
6000147e:	f3c3 240b 	ubfx	r4, r3, #8, #12
60001482:	4e34      	ldr	r6, [pc, #208]	; (60001554 <tempmon_init+0xfc>)
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
60001484:	ebc4 5313 	rsb	r3, r4, r3, lsr #20
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001488:	ee07 5a90 	vmov	s15, r5
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000148c:	f1a5 0155 	sub.w	r1, r5, #85	; 0x55
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001490:	f8ce 5000 	str.w	r5, [lr]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001494:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001498:	eb03 0583 	add.w	r5, r3, r3, lsl #2
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000149c:	ee07 4a90 	vmov	s15, r4
600014a0:	fb03 f101 	mul.w	r1, r3, r1
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
600014a4:	603b      	str	r3, [r7, #0]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600014a6:	eb03 1383 	add.w	r3, r3, r3, lsl #6
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600014aa:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600014ae:	ee07 1a90 	vmov	s15, r1
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600014b2:	1b49      	subs	r1, r1, r5
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600014b4:	ee77 6a66 	vsub.f32	s13, s14, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600014b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600014bc:	4d26      	ldr	r5, [pc, #152]	; (60001558 <tempmon_init+0x100>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600014be:	ee07 1a90 	vmov	s15, r1
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600014c2:	440b      	add	r3, r1
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600014c4:	edc5 6a00 	vstr	s13, [r5]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600014c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
600014cc:	6034      	str	r4, [r6, #0]
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600014ce:	eec7 5a26 	vdiv.f32	s11, s14, s13
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
600014d2:	4e22      	ldr	r6, [pc, #136]	; (6000155c <tempmon_init+0x104>)
600014d4:	6815      	ldr	r5, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600014d6:	4922      	ldr	r1, [pc, #136]	; (60001560 <tempmon_init+0x108>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600014d8:	4c22      	ldr	r4, [pc, #136]	; (60001564 <tempmon_init+0x10c>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600014da:	ee87 6aa6 	vdiv.f32	s12, s15, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600014de:	ee07 3a90 	vmov	s15, r3
600014e2:	4b21      	ldr	r3, [pc, #132]	; (60001568 <tempmon_init+0x110>)
600014e4:	f8c6 3140 	str.w	r3, [r6, #320]	; 0x140
600014e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
600014ec:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600014f0:	ee75 5a85 	vadd.f32	s11, s11, s10
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600014f4:	ee76 6a05 	vadd.f32	s13, s12, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600014f8:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600014fc:	eefc 6ae6 	vcvt.u32.f32	s13, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001500:	ee15 3a90 	vmov	r3, s11
60001504:	ea45 5303 	orr.w	r3, r5, r3, lsl #20
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001508:	ee16 5a90 	vmov	r5, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000150c:	ee77 7a05 	vadd.f32	s15, s14, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001510:	6013      	str	r3, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001512:	ea01 4105 	and.w	r1, r1, r5, lsl #16
60001516:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000151a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000151e:	430b      	orrs	r3, r1
60001520:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001524:	ee17 3a90 	vmov	r3, s15
60001528:	f8d2 1110 	ldr.w	r1, [r2, #272]	; 0x110
6000152c:	f3c3 030b 	ubfx	r3, r3, #0, #12
60001530:	430b      	orrs	r3, r1
60001532:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001536:	6813      	ldr	r3, [r2, #0]
60001538:	f043 0302 	orr.w	r3, r3, #2
6000153c:	6013      	str	r3, [r2, #0]

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
6000153e:	7020      	strb	r0, [r4, #0]
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001540:	4b0a      	ldr	r3, [pc, #40]	; (6000156c <tempmon_init+0x114>)
60001542:	2201      	movs	r2, #1
60001544:	601a      	str	r2, [r3, #0]
60001546:	bdf0      	pop	{r4, r5, r6, r7, pc}
60001548:	400d8180 	.word	0x400d8180
6000154c:	401f4400 	.word	0x401f4400
60001550:	2004324c 	.word	0x2004324c
60001554:	20043250 	.word	0x20043250
60001558:	20043248 	.word	0x20043248
6000155c:	20043800 	.word	0x20043800
60001560:	0fff0000 	.word	0x0fff0000
60001564:	e000e440 	.word	0xe000e440
60001568:	00001ac9 	.word	0x00001ac9
6000156c:	e000e108 	.word	0xe000e108
60001570:	20043244 	.word	0x20043244

60001574 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001574:	4b30      	ldr	r3, [pc, #192]	; (60001638 <usb_init+0xc4>)
60001576:	f640 7261 	movw	r2, #3937	; 0xf61

static void run_callbacks(endpoint_t *ep);


FLASHMEM void usb_init(void)
{
6000157a:	b570      	push	{r4, r5, r6, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
6000157c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001580:	f240 4504 	movw	r5, #1028	; 0x404
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
60001584:	f000 f8e0 	bl	60001748 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001588:	492c      	ldr	r1, [pc, #176]	; (6000163c <usb_init+0xc8>)
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
6000158a:	482d      	ldr	r0, [pc, #180]	; (60001640 <usb_init+0xcc>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000158c:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001590:	4c2c      	ldr	r4, [pc, #176]	; (60001644 <usb_init+0xd0>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001592:	f042 0203 	orr.w	r2, r2, #3
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001596:	4b2c      	ldr	r3, [pc, #176]	; (60001648 <usb_init+0xd4>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001598:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
6000159c:	f8c0 5160 	str.w	r5, [r0, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600015a0:	6822      	ldr	r2, [r4, #0]
600015a2:	4013      	ands	r3, r2
600015a4:	b91b      	cbnz	r3, 600015ae <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
600015a6:	f8d0 31a8 	ldr.w	r3, [r0, #424]	; 0x1a8
600015aa:	079a      	lsls	r2, r3, #30
600015ac:	d01a      	beq.n	600015e4 <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600015ae:	4b24      	ldr	r3, [pc, #144]	; (60001640 <usb_init+0xcc>)
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
600015b0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
600015b4:	4a23      	ldr	r2, [pc, #140]	; (60001644 <usb_init+0xd0>)
600015b6:	6351      	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600015b8:	461a      	mov	r2, r3
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600015ba:	f8d3 1140 	ldr.w	r1, [r3, #320]	; 0x140
600015be:	f041 0102 	orr.w	r1, r1, #2
600015c2:	f8c3 1140 	str.w	r1, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600015c6:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
600015ca:	079b      	lsls	r3, r3, #30
600015cc:	d4fb      	bmi.n	600015c6 <usb_init+0x52>
		NVIC_CLEAR_PENDING(IRQ_USB1);
600015ce:	f44f 3000 	mov.w	r0, #131072	; 0x20000
600015d2:	491e      	ldr	r1, [pc, #120]	; (6000164c <usb_init+0xd8>)
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600015d4:	4b1b      	ldr	r3, [pc, #108]	; (60001644 <usb_init+0xd0>)
600015d6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
600015da:	6008      	str	r0, [r1, #0]
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
600015dc:	2019      	movs	r0, #25
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600015de:	639a      	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
600015e0:	f000 f8be 	bl	60001760 <__delay_veneer>
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600015e4:	4d1a      	ldr	r5, [pc, #104]	; (60001650 <usb_init+0xdc>)
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
600015e6:	2200      	movs	r2, #0
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600015e8:	4b16      	ldr	r3, [pc, #88]	; (60001644 <usb_init+0xd0>)
600015ea:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600015ee:	4c14      	ldr	r4, [pc, #80]	; (60001640 <usb_init+0xcc>)
600015f0:	260a      	movs	r6, #10
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600015f2:	6399      	str	r1, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600015f4:	4628      	mov	r0, r5
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
600015f6:	601a      	str	r2, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600015f8:	4611      	mov	r1, r2
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600015fa:	f8c4 61a8 	str.w	r6, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600015fe:	f44f 7220 	mov.w	r2, #640	; 0x280
60001602:	f000 f8a9 	bl	60001758 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001606:	f44f 0681 	mov.w	r6, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
6000160a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
6000160e:	f240 1343 	movw	r3, #323	; 0x143
60001612:	4a10      	ldr	r2, [pc, #64]	; (60001654 <usb_init+0xe0>)
60001614:	4910      	ldr	r1, [pc, #64]	; (60001658 <usb_init+0xe4>)
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001616:	602e      	str	r6, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
60001618:	6428      	str	r0, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
6000161a:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
6000161e:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001622:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001626:	4a0d      	ldr	r2, [pc, #52]	; (6000165c <usb_init+0xe8>)
60001628:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
6000162c:	2301      	movs	r3, #1
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
6000162e:	6011      	str	r1, [r2, #0]
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001630:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
60001634:	bd70      	pop	{r4, r5, r6, pc}
60001636:	bf00      	nop
60001638:	400d8000 	.word	0x400d8000
6000163c:	400fc000 	.word	0x400fc000
60001640:	402e0000 	.word	0x402e0000
60001644:	400d9000 	.word	0x400d9000
60001648:	001e1c00 	.word	0x001e1c00
6000164c:	e000e28c 	.word	0xe000e28c
60001650:	20045000 	.word	0x20045000
60001654:	20043800 	.word	0x20043800
60001658:	00001c35 	.word	0x00001c35
6000165c:	e000e10c 	.word	0xe000e10c

60001660 <usb_string_product_name_default>:
60001660:	00550316 00420053 00530020 00720065     ..U.S.B. .S.e.r.
60001670:	00610069 0000006c                       i.a.l...

60001678 <usb_string_manufacturer_name_default>:
60001678:	00540318 00650065 0073006e 00640079     ..T.e.e.n.s.y.d.
60001688:	00690075 006f006e                       u.i.n.o.

60001690 <string0>:
60001690:	04090304                                ....

60001694 <usb_config_descriptor_12>:
60001694:	00430209 c0000102 00040932 02020100     ..C.....2.......
600016a4:	24050001 05011000 01010124 06022404     ...$....$....$..
600016b4:	00062405 82050701 10001003 00010409     .$..............
600016c4:	00000a02 03050700 00004002 02840507     .........@......
600016d4:	00000040                                @...

600016d8 <usb_config_descriptor_480>:
600016d8:	00430209 c0000102 00040932 02020100     ..C.....2.......
600016e8:	24050001 05011000 01010124 06022404     ...$....$....$..
600016f8:	00062405 82050701 05001003 00010409     .$..............
60001708:	00000a02 03050700 00020002 02840507     ................
60001718:	00000200                                ....

6000171c <qualifier_descriptor>:
6000171c:	0200060a 40000002 ff010001                       .......@..

60001726 <_serialEvent_default>:
60001726:	b5f8ff01                                         ..

60001728 <_init>:
60001728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
6000172a:	bf00      	nop
6000172c:	bcf8      	pop	{r3, r4, r5, r6, r7}
6000172e:	bc08      	pop	{r3}
60001730:	469e      	mov	lr, r3
60001732:	4770      	bx	lr
60001734:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

60001738 <__pwm_init_veneer>:
60001738:	f85f f000 	ldr.w	pc, [pc]	; 6000173c <__pwm_init_veneer+0x4>
6000173c:	000030b1 	.word	0x000030b1

60001740 <____libc_init_array_veneer>:
60001740:	f85f f000 	ldr.w	pc, [pc]	; 60001744 <____libc_init_array_veneer+0x4>
60001744:	0000347d 	.word	0x0000347d

60001748 <__usb_init_serialnumber_veneer>:
60001748:	f85f f000 	ldr.w	pc, [pc]	; 6000174c <__usb_init_serialnumber_veneer+0x4>
6000174c:	000023ed 	.word	0x000023ed

60001750 <__startup_late_hook_veneer>:
60001750:	f85f f000 	ldr.w	pc, [pc]	; 60001754 <__startup_late_hook_veneer+0x4>
60001754:	00001a39 	.word	0x00001a39

60001758 <__memset_veneer>:
60001758:	f85f f000 	ldr.w	pc, [pc]	; 6000175c <__memset_veneer+0x4>
6000175c:	000034cd 	.word	0x000034cd

60001760 <__delay_veneer>:
60001760:	f85f f000 	ldr.w	pc, [pc]	; 60001764 <__delay_veneer+0x4>
60001764:	0000186d 	.word	0x0000186d

60001768 <__main_veneer>:
60001768:	f85f f000 	ldr.w	pc, [pc]	; 6000176c <__main_veneer+0x4>
6000176c:	00002bed 	.word	0x00002bed

60001770 <__set_arm_clock_veneer>:
60001770:	f85f f000 	ldr.w	pc, [pc]	; 60001774 <__set_arm_clock_veneer+0x4>
60001774:	000015a9 	.word	0x000015a9

60001778 <__startup_early_hook_veneer>:
60001778:	f85f f000 	ldr.w	pc, [pc]	; 6000177c <__startup_early_hook_veneer+0x4>
6000177c:	00001a35 	.word	0x00001a35

60001780 <__init_array_start>:
60001780:	00000045 	.word	0x00000045
60001784:	000012d9 	.word	0x000012d9
60001788:	00001441 	.word	0x00001441

6000178c <__init_array_end>:
6000178c:	ffffffff 	.word	0xffffffff

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <__do_global_dtors_aux>:
    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);

    return tmeas;
      20:	4c05b510 	.word	0x4c05b510
      24:	7823      	ldrb	r3, [r4, #0]
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);
      26:	b933      	cbnz	r3, 36 <_teensy_model_identifier+0x12>

    return tmeas;
      28:	b1134b04 	.word	0xb1134b04
      2c:	4804      	ldr	r0, [pc, #16]	; (40 <_teensy_model_identifier+0x1c>)
      2e:	f3af      	.short	0xf3af
      30:	8000      	strh	r0, [r0, #0]
      32:	2301      	movs	r3, #1
      34:	bd107023 	.word	0xbd107023
      38:	2290      	movs	r2, #144	; 0x90
      3a:	2001      	movs	r0, #1
      3c:	0000      	movs	r0, r0
      3e:	0000      	.short	0x0000
}
      40:	3574      	adds	r5, #116	; 0x74
	...

00000044 <frame_dummy>:
      44:	4b08      	ldr	r3, [pc, #32]	; (68 <frame_dummy+0x24>)
      46:	b510      	push	{r4, lr}
      48:	b11b      	cbz	r3, 52 <frame_dummy+0xe>
      4a:	4908      	ldr	r1, [pc, #32]	; (6c <frame_dummy+0x28>)
      4c:	4808      	ldr	r0, [pc, #32]	; (70 <frame_dummy+0x2c>)
      4e:	f3af 8000 	nop.w
      52:	4808      	ldr	r0, [pc, #32]	; (74 <frame_dummy+0x30>)
      54:	6803      	ldr	r3, [r0, #0]
      56:	b903      	.short	0xb903
      58:	bd10      	pop	{r4, pc}
      5a:	4b07      	ldr	r3, [pc, #28]	; (78 <frame_dummy+0x34>)
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      5c:	d0fb2b00 	.word	0xd0fb2b00
      60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      64:	4718      	bx	r3
      66:	bf00      	.short	0xbf00
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 20000000; nn++) ;
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
	// digitalWrite(13, LOW);
    for (nn = 0; nn < 10000000; nn++) ;
      68:	0000      	movs	r0, r0
      6a:	0000      	movs	r0, r0
      6c:	20012294 	.word	0x20012294
      70:	3574      	adds	r5, #116	; 0x74
      72:	0000      	.short	0x0000
      74:	2290      	movs	r2, #144	; 0x90
      76:	2001      	.short	0x2001
      78:	0000      	movs	r0, r0
	...

0000007c <CLEDController::getMaxRefreshRate() const>:
              }

              return adj;
      #endif
    }
    virtual uint16_t getMaxRefreshRate() const { return 0; }
      7c:	47702000 	.word	0x47702000

00000080 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::size()>:
  uint8_t m_nOutBlocks;
  uint32_t m_offsets[3];
  CMinWait<WAIT_TIME> mWait;
public:

  virtual int size() { return CLEDController::size() * m_nActualLanes; }
      80:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
      84:	fb006940 	.word	0xfb006940
      88:	f003 4770 	and.w	r7, r3, #4026531840	; 0xf0000000

0000008c <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::init()>:
        show(m_Data, m_nLeds, getAdjustment(brightness));
    }

	/// show the given color on the led strip
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
      8c:	b570      	push	{r4, r5, r6, lr}
      8e:	2300      	.short	0x2300

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
      90:	4604      	mov	r4, r0
      92:	2521      	.short	0x2521
      94:	2101      	movs	r1, #1
	if(m_pPowerFunc) {
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
      96:	6183      	.short	0x6183
      98:	200e      	movs	r0, #14

void CFastLED::countFPS(int nFrames) {
  static int br = 0;
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
      9a:	61e3      	.short	0x61e3
      9c:	6223      	str	r3, [r4, #32]
      9e:	6263      	.short	0x6263
      a0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
      a4:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
      uint32_t now = millis();
      now -= lastframe;
      if( now == 0 ) {
          now = 1; // prevent division by zero below
      }
      m_nFPS = (br * 1000) / now;
      a8:	f88462e3 	.word	0xf88462e3
  static int br = 0;
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
      uint32_t now = millis();
      now -= lastframe;
      ac:	5029      	str	r1, [r5, r0]
      if( now == 0 ) {
          now = 1; // prevent division by zero below
      }
      m_nFPS = (br * 1000) / now;
    br = 0;
      ae:	f001      	.short	0xf001
      b0:	fc75 f894 	ldc2l	8, cr15, [r5], #-592	; 0xfffffdb0
      uint32_t now = millis();
      now -= lastframe;
      if( now == 0 ) {
          now = 1; // prevent division by zero below
      }
      m_nFPS = (br * 1000) / now;
      b4:	21122028 	.word	0x21122028
      b8:	1c53      	adds	r3, r2, #1

  if(br++ >= nFrames) {
      uint32_t now = millis();
      now -= lastframe;
      if( now == 0 ) {
          now = 1; // prevent division by zero below
      ba:	4422      	.short	0x4422
      }
      m_nFPS = (br * 1000) / now;
    br = 0;
      bc:	b2db      	uxtb	r3, r3
    lastframe = millis();
      be:	f884      	.short	0xf884

  if(br++ >= nFrames) {
      uint32_t now = millis();
      now -= lastframe;
      if( now == 0 ) {
          now = 1; // prevent division by zero below
      c0:	3028      	adds	r0, #40	; 0x28
      c2:	2b01      	cmp	r3, #1
      }
      m_nFPS = (br * 1000) / now;
      c4:	6ae27611 	.word	0x6ae27611
      c8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
		pCur->showColor(color, scale);
		pCur->setDither(d);
		pCur = pCur->next();
	}
	countFPS();
}
      cc:	f00062e2 	.word	0xf00062e2
		return *pCur;
	}
}

void CFastLED::showColor(const struct CRGB & color, uint8_t scale) {
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
      d0:	80b3      	strh	r3, [r6, #4]
      d2:	2101      	movs	r1, #1
      d4:	f001200f 	.word	0xf001200f
      d8:	fc61 f894 	stc2l	8, cr15, [r1], #-592	; 0xfffffdb0
      dc:	21132028 	.word	0x21132028
      e0:	1c53      	adds	r3, r2, #1
      e2:	4422      	.short	0x4422
      e4:	b2db      	uxtb	r3, r3
      e6:	f884      	.short	0xf884
      e8:	3028      	adds	r0, #40	; 0x28
      ea:	2b01      	.short	0x2b01
      ec:	7611      	strb	r1, [r2, #24]
      ee:	6ae2      	.short	0x6ae2
      f0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
			_BLOCK_PIN(24);
			_BLOCK_PIN(25);
			_BLOCK_PIN(19);
			_BLOCK_PIN(18);
			_BLOCK_PIN(14);
			_BLOCK_PIN(15);
      f4:	62e2      	str	r2, [r4, #44]	; 0x2c
			_BLOCK_PIN(17);
      f6:	f000      	.short	0xf000
      f8:	809f      	strh	r7, [r3, #4]
template<uint8_t PIN, uint32_t _BIT, uint32_t _MASK, typename _GPIO_DR, typename _GPIO_DR_SET, typename _GPIO_DR_CLEAR, typename _GPIO_DR_TOGGLE> class _ARMPIN {
public:
	typedef volatile uint32_t * port_ptr_t;
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
      fa:	2101      	.short	0x2101
      fc:	2011      	movs	r0, #17
      fe:	f001      	.short	0xf001
     100:	fc4d f894 	mcrr2	8, 9, pc, sp, cr4	; <UNPREDICTABLE>
     104:	2028      	movs	r0, #40	; 0x28
     106:	2516      	movs	r5, #22
     108:	1c53      	adds	r3, r2, #1
     10a:	4422      	.short	0x4422
     10c:	b2db      	uxtb	r3, r3
     10e:	f884      	.short	0xf884
     110:	3028      	adds	r0, #40	; 0x28
			_BLOCK_PIN(16);
     112:	2b01      	.short	0x2b01
			_BLOCK_PIN(25);
			_BLOCK_PIN(19);
			_BLOCK_PIN(18);
			_BLOCK_PIN(14);
			_BLOCK_PIN(15);
			_BLOCK_PIN(17);
     114:	7615      	strb	r5, [r2, #24]
     116:	6ae2      	.short	0x6ae2
     118:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
     11c:	f00062e2 	.word	0xf00062e2
			_BLOCK_PIN(16);
     120:	808b      	strh	r3, [r1, #4]
     122:	2101      	.short	0x2101
     124:	2010      	movs	r0, #16
     126:	f001      	.short	0xf001
     128:	fc39 f894 	ldc2	8, cr15, [r9], #-592	; 0xfffffdb0
     12c:	26172028 	.word	0x26172028
     130:	1c53      	adds	r3, r2, #1
     132:	4422      	.short	0x4422
     134:	b2db      	uxtb	r3, r3
     136:	f884      	.short	0xf884
     138:	3028      	adds	r0, #40	; 0x28
			_BLOCK_PIN(22);
     13a:	2b01      	.short	0x2b01
			_BLOCK_PIN(19);
			_BLOCK_PIN(18);
			_BLOCK_PIN(14);
			_BLOCK_PIN(15);
			_BLOCK_PIN(17);
			_BLOCK_PIN(16);
     13c:	7616      	strb	r6, [r2, #24]
     13e:	6ae2      	.short	0x6ae2
     140:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
     144:	62e2      	str	r2, [r4, #44]	; 0x2c
			_BLOCK_PIN(22);
     146:	d077      	.short	0xd077
     148:	2101      	movs	r1, #1
     14a:	4628      	.short	0x4628
     14c:	f001 fc26 	bl	199c <pinMode>
     150:	2028f894 	.word	0x2028f894
     154:	2118      	movs	r1, #24
     156:	1c53      	adds	r3, r2, #1
     158:	4422      	add	r2, r4
     15a:	b2db      	.short	0xb2db
     15c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			_BLOCK_PIN(23);
     160:	76112b01 	.word	0x76112b01
			_BLOCK_PIN(18);
			_BLOCK_PIN(14);
			_BLOCK_PIN(15);
			_BLOCK_PIN(17);
			_BLOCK_PIN(16);
			_BLOCK_PIN(22);
     164:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
     166:	f042      	.short	0xf042
     168:	7280      	strb	r0, [r0, #10]
     16a:	62e2      	.short	0x62e2
			_BLOCK_PIN(23);
     16c:	d064      	beq.n	238 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::init()+0x1ac>
     16e:	2101      	.short	0x2101
     170:	4630      	mov	r0, r6
     172:	f001 fc13 	bl	199c <pinMode>
     176:	f894      	.short	0xf894
     178:	2028      	movs	r0, #40	; 0x28
     17a:	2119      	.short	0x2119
     17c:	1c53      	adds	r3, r2, #1
     17e:	4422      	.short	0x4422
     180:	b2db      	uxtb	r3, r3
     182:	f884      	.short	0xf884
     184:	3028      	adds	r0, #40	; 0x28
			_BLOCK_PIN(20);
     186:	2b01      	.short	0x2b01
			_BLOCK_PIN(14);
			_BLOCK_PIN(15);
			_BLOCK_PIN(17);
			_BLOCK_PIN(16);
			_BLOCK_PIN(22);
			_BLOCK_PIN(23);
     188:	7611      	strb	r1, [r2, #24]
     18a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
     18c:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
     190:	62e2      	str	r2, [r4, #44]	; 0x2c
			_BLOCK_PIN(20);
     192:	d051      	beq.n	238 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::init()+0x1ac>
     194:	2101      	movs	r1, #1
     196:	2014      	movs	r0, #20
     198:	f001 fc00 	bl	199c <pinMode>
     19c:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
     1a0:	261a      	movs	r6, #26
     1a2:	1c53      	adds	r3, r2, #1
     1a4:	4422      	add	r2, r4
     1a6:	b2db      	uxtb	r3, r3
     1a8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			_BLOCK_PIN(21);
     1ac:	2b01      	cmp	r3, #1
			_BLOCK_PIN(15);
			_BLOCK_PIN(17);
			_BLOCK_PIN(16);
			_BLOCK_PIN(22);
			_BLOCK_PIN(23);
			_BLOCK_PIN(20);
     1ae:	7616      	strb	r6, [r2, #24]
     1b0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
     1b2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
     1b6:	62e2      	str	r2, [r4, #44]	; 0x2c
			_BLOCK_PIN(21);
     1b8:	d03e      	beq.n	238 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::init()+0x1ac>
     1ba:	2101      	movs	r1, #1
     1bc:	2015      	movs	r0, #21
     1be:	f001 fbed 	bl	199c <pinMode>
     1c2:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
     1c6:	251b      	movs	r5, #27
     1c8:	1c53      	adds	r3, r2, #1
     1ca:	4422      	add	r2, r4
     1cc:	b2db      	uxtb	r3, r3
     1ce:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			_BLOCK_PIN(26);
     1d2:	2b01      	cmp	r3, #1
			_BLOCK_PIN(17);
			_BLOCK_PIN(16);
			_BLOCK_PIN(22);
			_BLOCK_PIN(23);
			_BLOCK_PIN(20);
			_BLOCK_PIN(21);
     1d4:	7615      	strb	r5, [r2, #24]
     1d6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
     1d8:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
     1dc:	62e2      	str	r2, [r4, #44]	; 0x2c
			_BLOCK_PIN(26);
     1de:	d02b      	beq.n	238 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::init()+0x1ac>
     1e0:	2101      	movs	r1, #1
     1e2:	4630      	mov	r0, r6
     1e4:	f001 fbda 	bl	199c <pinMode>
     1e8:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
     1ec:	211e      	movs	r1, #30
     1ee:	1c53      	adds	r3, r2, #1
     1f0:	4422      	add	r2, r4
     1f2:	b2db      	uxtb	r3, r3
     1f4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			_BLOCK_PIN(27);
     1f8:	2b01      	cmp	r3, #1
			_BLOCK_PIN(16);
			_BLOCK_PIN(22);
			_BLOCK_PIN(23);
			_BLOCK_PIN(20);
			_BLOCK_PIN(21);
			_BLOCK_PIN(26);
     1fa:	7611      	strb	r1, [r2, #24]
     1fc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
     1fe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
     202:	62e2      	str	r2, [r4, #44]	; 0x2c
			_BLOCK_PIN(27);
     204:	d018      	beq.n	238 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::init()+0x1ac>
     206:	4628      	mov	r0, r5
     208:	2101      	movs	r1, #1
     20a:	f001 fbc7 	bl	199c <pinMode>
     20e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
     212:	221f      	movs	r2, #31
     214:	1c5e      	adds	r6, r3, #1
     216:	4423      	add	r3, r4
     218:	b2f6      	uxtb	r6, r6
     21a:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
     21e:	761a      	strb	r2, [r3, #24]
     220:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     222:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     226:	62e3      	str	r3, [r4, #44]	; 0x2c
			_BLOCK_PIN(28);
			_BLOCK_PIN(31);
			_BLOCK_PIN(30);
    }

    for(int i = 0; i < m_nActualLanes; i++) {
     228:	b93e      	cbnz	r6, 23a <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::init()+0x1ae>
     22a:	f894 502a 	ldrb.w	r5, [r4, #42]	; 0x2a
      if(m_bitOffsets[i] < m_nLowBit) { m_nLowBit = m_bitOffsets[i]; }
      if(m_bitOffsets[i] > m_nHighBit) { m_nHighBit = m_bitOffsets[i]; }
    }

    m_nOutBlocks = (m_nHighBit + 8)/8;
     22e:	3508      	adds	r5, #8
     230:	10ed      	asrs	r5, r5, #3
     232:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30

  }
     236:	bd70      	pop	{r4, r5, r6, pc}
			_BLOCK_PIN(28);
			_BLOCK_PIN(31);
			_BLOCK_PIN(30);
    }

    for(int i = 0; i < m_nActualLanes; i++) {
     238:	2601      	movs	r6, #1
     23a:	f894 502a 	ldrb.w	r5, [r4, #42]	; 0x2a
     23e:	f104 0117 	add.w	r1, r4, #23
     242:	2200      	movs	r2, #0
      if(m_bitOffsets[i] < m_nLowBit) { m_nLowBit = m_bitOffsets[i]; }
     244:	f811 3f01 	ldrb.w	r3, [r1, #1]!
			_BLOCK_PIN(28);
			_BLOCK_PIN(31);
			_BLOCK_PIN(30);
    }

    for(int i = 0; i < m_nActualLanes; i++) {
     248:	3201      	adds	r2, #1
      if(m_bitOffsets[i] < m_nLowBit) { m_nLowBit = m_bitOffsets[i]; }
     24a:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
     24e:	4298      	cmp	r0, r3
     250:	bf88      	it	hi
     252:	f884 3029 	strbhi.w	r3, [r4, #41]	; 0x29
      if(m_bitOffsets[i] > m_nHighBit) { m_nHighBit = m_bitOffsets[i]; }
     256:	42ab      	cmp	r3, r5
     258:	d902      	bls.n	260 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::init()+0x1d4>
     25a:	461d      	mov	r5, r3
     25c:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
			_BLOCK_PIN(28);
			_BLOCK_PIN(31);
			_BLOCK_PIN(30);
    }

    for(int i = 0; i < m_nActualLanes; i++) {
     260:	42b2      	cmp	r2, r6
     262:	dbef      	blt.n	244 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::init()+0x1b8>
      if(m_bitOffsets[i] < m_nLowBit) { m_nLowBit = m_bitOffsets[i]; }
      if(m_bitOffsets[i] > m_nHighBit) { m_nHighBit = m_bitOffsets[i]; }
    }

    m_nOutBlocks = (m_nHighBit + 8)/8;
     264:	3508      	adds	r5, #8
     266:	10ed      	asrs	r5, r5, #3
     268:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30

  }
     26c:	bd70      	pop	{r4, r5, r6, pc}
     26e:	bf00      	nop

00000270 <setup>:
double rms;
double peak;

arm_rfft_instance_q15 fftInstance;

void setup() {
     270:	b570      	push	{r4, r5, r6, lr}
     272:	f640 31b8 	movw	r1, #3000	; 0xbb8
     276:	4836      	ldr	r0, [pc, #216]	; (350 <setup+0xe0>)
     278:	f000 ff72 	bl	1160 <VisualMicroDebug::init(unsigned long)>
     27c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
     280:	4833      	ldr	r0, [pc, #204]	; (350 <setup+0xe0>)
     282:	f000 ff69 	bl	1158 <VisualMicroDebug::begin(unsigned long)>
     286:	2101      	movs	r1, #1
     288:	4831      	ldr	r0, [pc, #196]	; (350 <setup+0xe0>)
     28a:	f000 ff47 	bl	111c <VisualMicroDebug::outPacketStart(bool)>
     28e:	2800      	cmp	r0, #0
     290:	d14f      	bne.n	332 <setup+0xc2>
     292:	2100      	movs	r1, #0
     294:	482e      	ldr	r0, [pc, #184]	; (350 <setup+0xe0>)
     296:	2201      	movs	r2, #1
     298:	f001 f800 	bl	129c <VisualMicroDebug::start(bool, bool)>
     29c:	2101      	movs	r1, #1
     29e:	482c      	ldr	r0, [pc, #176]	; (350 <setup+0xe0>)
     2a0:	f000 ff3c 	bl	111c <VisualMicroDebug::outPacketStart(bool)>
     2a4:	b130      	cbz	r0, 2b4 <setup+0x44>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     2a6:	2106      	movs	r1, #6
     2a8:	482a      	ldr	r0, [pc, #168]	; (354 <setup+0xe4>)
     2aa:	f002 fbe9 	bl	2a80 <usb_serial_write>
     2ae:	4828      	ldr	r0, [pc, #160]	; (350 <setup+0xe0>)
     2b0:	f000 ff50 	bl	1154 <VisualMicroDebug::outPacketEnd()>
    // put your setup code here, to run once:
    // analogReference(EXTERNAL);
    pinMode(A1, INPUT);
     2b4:	2100      	movs	r1, #0
     2b6:	200f      	movs	r0, #15
     2b8:	f001 fb70 	bl	199c <pinMode>
    pinMode(dataPin, OUTPUT);
     2bc:	2101      	movs	r1, #1
     2be:	200e      	movs	r0, #14
     2c0:	f001 fb6c 	bl	199c <pinMode>

    analogReadRes(10);          // set ADC resolution to this many bits
     2c4:	200a      	movs	r0, #10
     2c6:	f001 f8fb 	bl	14c0 <analogReadRes>
    analogReadAveraging(1);    // average this many readings
     2ca:	2001      	movs	r0, #1
     2cc:	f001 f92a 	bl	1524 <analogReadAveraging>
	}

#if defined(__FASTLED_HAS_FIBCC) && (__FASTLED_HAS_FIBCC == 1)
  template<uint8_t NUM_LANES, template<uint8_t DATA_PIN, EOrder RGB_ORDER> class CHIPSET, uint8_t DATA_PIN, EOrder RGB_ORDER=RGB>
  static CLEDController &addLeds(struct CRGB *data, int nLeds) {
    static __FIBCC<CHIPSET, DATA_PIN, NUM_LANES, RGB_ORDER> c;
     2d0:	4821      	ldr	r0, [pc, #132]	; (358 <setup+0xe8>)
     2d2:	6803      	ldr	r3, [r0, #0]
     2d4:	f013 0201 	ands.w	r2, r3, #1
     2d8:	d00e      	beq.n	2f8 <setup+0x88>
    return addLeds(&c, data, nLeds);
     2da:	2300      	movs	r3, #0
     2dc:	2275      	movs	r2, #117	; 0x75
     2de:	491f      	ldr	r1, [pc, #124]	; (35c <setup+0xec>)
     2e0:	481f      	ldr	r0, [pc, #124]	; (360 <setup+0xf0>)
     2e2:	f001 f803 	bl	12ec <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>

    FastLED.addLeds<1, WS2813, dataPin, GRB>(leds, numLeds);

    arm_rfft_init_q15(&fftInstance, fftLength, 0, 1);
     2e6:	2301      	movs	r3, #1
     2e8:	2200      	movs	r2, #0
     2ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
     2ee:	481d      	ldr	r0, [pc, #116]	; (364 <setup+0xf4>)
}
     2f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    analogReadRes(10);          // set ADC resolution to this many bits
    analogReadAveraging(1);    // average this many readings

    FastLED.addLeds<1, WS2813, dataPin, GRB>(leds, numLeds);

    arm_rfft_init_q15(&fftInstance, fftLength, 0, 1);
     2f4:	f003 b83a 	b.w	336c <arm_rfft_init_q15>

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
     2f8:	4c1b      	ldr	r4, [pc, #108]	; (368 <setup+0xf8>)
    {
    }

    /// allow construction from a LEDColorCorrection enum
    inline CRGB( LEDColorCorrection colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     2fa:	21ff      	movs	r1, #255	; 0xff
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
     2fc:	4b18      	ldr	r3, [pc, #96]	; (360 <setup+0xf0>)
     2fe:	2601      	movs	r6, #1
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
     300:	6825      	ldr	r5, [r4, #0]
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
     302:	605a      	str	r2, [r3, #4]
     304:	615a      	str	r2, [r3, #20]
        m_pNext = NULL;
     306:	609a      	str	r2, [r3, #8]
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
     308:	749e      	strb	r6, [r3, #18]
     30a:	7319      	strb	r1, [r3, #12]
     30c:	7359      	strb	r1, [r3, #13]
     30e:	7399      	strb	r1, [r3, #14]

    }

    /// allow construction from a ColorTemperature enum
    inline CRGB( ColorTemperature colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     310:	73d9      	strb	r1, [r3, #15]
     312:	7419      	strb	r1, [r3, #16]
     314:	7459      	strb	r1, [r3, #17]
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
     316:	b1c5      	cbz	r5, 34a <setup+0xda>
        if(m_pTail != NULL) { m_pTail->m_pNext = this; }
     318:	4a14      	ldr	r2, [pc, #80]	; (36c <setup+0xfc>)
     31a:	6811      	ldr	r1, [r2, #0]
     31c:	b101      	cbz	r1, 320 <setup+0xb0>
     31e:	608b      	str	r3, [r1, #8]
/// Class to ensure that a minimum amount of time has kicked since the last time run - and delay if not enough time has passed yet
/// this should make sure that chipsets that have
template<int WAIT> class CMinWait {
	uint16_t mLastMicros;
public:
	CMinWait() { mLastMicros = 0; }
     320:	2500      	movs	r5, #0
    return ARM_DWT_CYCCNT - start;
  }
};

template<template<uint8_t DATA_PIN, EOrder RGB_ORDER> class CHIPSET, uint8_t DATA_PIN, int NUM_LANES, EOrder RGB_ORDER=GRB>
class __FIBCC : public FlexibleInlineBlockClocklessController<NUM_LANES,DATA_PIN,CHIPSET<DATA_PIN,RGB_ORDER>::__T1(),CHIPSET<DATA_PIN,RGB_ORDER>::__T2(),CHIPSET<DATA_PIN,RGB_ORDER>::__T3(),RGB_ORDER,CHIPSET<DATA_PIN,RGB_ORDER>::__XTRA0(),CHIPSET<DATA_PIN,RGB_ORDER>::__FLIP(),CHIPSET<DATA_PIN,RGB_ORDER>::__WAIT_TIME()> {};
     322:	4c13      	ldr	r4, [pc, #76]	; (370 <setup+0x100>)
	}

#if defined(__FASTLED_HAS_FIBCC) && (__FASTLED_HAS_FIBCC == 1)
  template<uint8_t NUM_LANES, template<uint8_t DATA_PIN, EOrder RGB_ORDER> class CHIPSET, uint8_t DATA_PIN, EOrder RGB_ORDER=RGB>
  static CLEDController &addLeds(struct CRGB *data, int nLeds) {
    static __FIBCC<CHIPSET, DATA_PIN, NUM_LANES, RGB_ORDER> c;
     324:	2101      	movs	r1, #1
        m_pTail = this;
     326:	6013      	str	r3, [r2, #0]
     328:	f8a3 5040 	strh.w	r5, [r3, #64]	; 0x40
     32c:	601c      	str	r4, [r3, #0]
     32e:	6001      	str	r1, [r0, #0]
     330:	e7d3      	b.n	2da <setup+0x6a>
     332:	2110      	movs	r1, #16
     334:	480f      	ldr	r0, [pc, #60]	; (374 <setup+0x104>)
     336:	f002 fba3 	bl	2a80 <usb_serial_write>
double rms;
double peak;

arm_rfft_instance_q15 fftInstance;

void setup() {
     33a:	210a      	movs	r1, #10
     33c:	4804      	ldr	r0, [pc, #16]	; (350 <setup+0xe0>)
     33e:	f000 fee1 	bl	1104 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>
     342:	4803      	ldr	r0, [pc, #12]	; (350 <setup+0xe0>)
     344:	f000 ff06 	bl	1154 <VisualMicroDebug::outPacketEnd()>
     348:	e7a3      	b.n	292 <setup+0x22>

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
     34a:	6023      	str	r3, [r4, #0]
     34c:	e7e4      	b.n	318 <setup+0xa8>
     34e:	bf00      	nop
     350:	200431c8 	.word	0x200431c8
     354:	20000038 	.word	0x20000038
     358:	200122b0 	.word	0x200122b0
     35c:	20012310 	.word	0x20012310
     360:	200122b4 	.word	0x200122b4
     364:	200122f8 	.word	0x200122f8
     368:	20043220 	.word	0x20043220
     36c:	20043230 	.word	0x20043230
     370:	20000008 	.word	0x20000008
     374:	20000024 	.word	0x20000024

00000378 <loop>:
    FastLED.addLeds<1, WS2813, dataPin, GRB>(leds, numLeds);

    arm_rfft_init_q15(&fftInstance, fftLength, 0, 1);
}

void loop() {
     378:	b570      	push	{r4, r5, r6, lr}
     37a:	4c39      	ldr	r4, [pc, #228]	; (460 <loop+0xe8>)
     37c:	b082      	sub	sp, #8
     37e:	4e39      	ldr	r6, [pc, #228]	; (464 <loop+0xec>)
     380:	4625      	mov	r5, r4
    // reading 100000 samples takes approximately 574 milliseconds
    for (int i = 0; i < N_SAMPLES; i++) {
        samples[i] = analogRead(A1); // subtract the DC bias value in order to analyse the AC signal
     382:	200f      	movs	r0, #15
     384:	f001 f868 	bl	1458 <analogRead>
     388:	f825 0f02 	strh.w	r0, [r5, #2]!
    arm_rfft_init_q15(&fftInstance, fftLength, 0, 1);
}

void loop() {
    // reading 100000 samples takes approximately 574 milliseconds
    for (int i = 0; i < N_SAMPLES; i++) {
     38c:	42ae      	cmp	r6, r5
     38e:	d1f8      	bne.n	382 <loop+0xa>
     390:	2300      	movs	r3, #0
 */
double getAverage(short* samples) {
    long sum = 0;

    for (int i = 0; i < N_SAMPLES; i++) {
        sum += samples[i];
     392:	f934 2f02 	ldrsh.w	r2, [r4, #2]!
 * Returns average from an array of samples.
 */
double getAverage(short* samples) {
    long sum = 0;

    for (int i = 0; i < N_SAMPLES; i++) {
     396:	42b4      	cmp	r4, r6
        sum += samples[i];
     398:	4413      	add	r3, r2
 * Returns average from an array of samples.
 */
double getAverage(short* samples) {
    long sum = 0;

    for (int i = 0; i < N_SAMPLES; i++) {
     39a:	d1fa      	bne.n	392 <loop+0x1a>
        sum += samples[i];
    }

    return (double)sum / N_SAMPLES;
     39c:	ee07 3a90 	vmov	s15, r3
    // reading 100000 samples takes approximately 574 milliseconds
    for (int i = 0; i < N_SAMPLES; i++) {
        samples[i] = analogRead(A1); // subtract the DC bias value in order to analyse the AC signal
    }

    average = getAverage(samples);
     3a0:	4b31      	ldr	r3, [pc, #196]	; (468 <loop+0xf0>)
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }

	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
     3a2:	2102      	movs	r1, #2
     3a4:	4831      	ldr	r0, [pc, #196]	; (46c <loop+0xf4>)

    for (int i = 0; i < N_SAMPLES; i++) {
        sum += samples[i];
    }

    return (double)sum / N_SAMPLES;
     3a6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
     3aa:	ed9f 5b27 	vldr	d5, [pc, #156]	; 448 <loop+0xd0>
     3ae:	ee87 6b05 	vdiv.f64	d6, d7, d5
     3b2:	eeb0 0b46 	vmov.f64	d0, d6
    // reading 100000 samples takes approximately 574 milliseconds
    for (int i = 0; i < N_SAMPLES; i++) {
        samples[i] = analogRead(A1); // subtract the DC bias value in order to analyse the AC signal
    }

    average = getAverage(samples);
     3b6:	ed83 6b00 	vstr	d6, [r3]
     3ba:	f002 fc71 	bl	2ca0 <Print::printFloat(double, unsigned char)>
	size_t println(int n, int base)			{ return print(n, base) + println(); }
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }

	size_t println(double n, int digits = 2)	{ return print(n, digits) + println(); }
     3be:	482b      	ldr	r0, [pc, #172]	; (46c <loop+0xf4>)
     3c0:	f002 fc1c 	bl	2bfc <Print::println()>
    Serial.println(average);
    delay(1000);
     3c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     3c8:	f001 fa50 	bl	186c <delay>

    ledsOn = numLeds * peak / maxPeak;
     3cc:	4a28      	ldr	r2, [pc, #160]	; (470 <loop+0xf8>)
     3ce:	4b29      	ldr	r3, [pc, #164]	; (474 <loop+0xfc>)
     3d0:	ed92 7b00 	vldr	d7, [r2]
     3d4:	ed9f 6b1e 	vldr	d6, [pc, #120]	; 450 <loop+0xd8>
     3d8:	ed9f 5b1f 	vldr	d5, [pc, #124]	; 458 <loop+0xe0>
     3dc:	ee27 7b06 	vmul.f64	d7, d7, d6
     3e0:	ee87 6b05 	vdiv.f64	d6, d7, d5
     3e4:	eefd 7bc6 	vcvt.s32.f64	s15, d6
     3e8:	edcd 7a01 	vstr	s15, [sp, #4]
     3ec:	f9bd 2004 	ldrsh.w	r2, [sp, #4]

    for (int i = 0; i < ledsOn; i++) {
     3f0:	2a00      	cmp	r2, #0

    average = getAverage(samples);
    Serial.println(average);
    delay(1000);

    ledsOn = numLeds * peak / maxPeak;
     3f2:	801a      	strh	r2, [r3, #0]

    for (int i = 0; i < ledsOn; i++) {
     3f4:	dd23      	ble.n	43e <loop+0xc6>
     3f6:	0056      	lsls	r6, r2, #1
     3f8:	4b1f      	ldr	r3, [pc, #124]	; (478 <loop+0x100>)
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
     3fa:	2000      	movs	r0, #0
        g = (colorcode >>  8) & 0xFF;
        b = (colorcode >>  0) & 0xFF;
     3fc:	25ff      	movs	r5, #255	; 0xff
     3fe:	18b4      	adds	r4, r6, r2
     400:	4619      	mov	r1, r3
     402:	441c      	add	r4, r3
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
     404:	7008      	strb	r0, [r1, #0]
     406:	3103      	adds	r1, #3
        g = (colorcode >>  8) & 0xFF;
     408:	f801 0c02 	strb.w	r0, [r1, #-2]
        b = (colorcode >>  0) & 0xFF;
     40c:	f801 5c01 	strb.w	r5, [r1, #-1]
     410:	42a1      	cmp	r1, r4
     412:	d1f7      	bne.n	404 <loop+0x8c>
        leds[i] = CRGB::Blue;
    }
    for (int i = ledsOn; i < numLeds; i++) {
     414:	2a74      	cmp	r2, #116	; 0x74
     416:	dc0b      	bgt.n	430 <loop+0xb8>
     418:	4432      	add	r2, r6
     41a:	4818      	ldr	r0, [pc, #96]	; (47c <loop+0x104>)
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
     41c:	2100      	movs	r1, #0
     41e:	4413      	add	r3, r2
     420:	7019      	strb	r1, [r3, #0]
     422:	3303      	adds	r3, #3
        g = (colorcode >>  8) & 0xFF;
     424:	f803 1c02 	strb.w	r1, [r3, #-2]
        b = (colorcode >>  0) & 0xFF;
     428:	f803 1c01 	strb.w	r1, [r3, #-1]
     42c:	4283      	cmp	r3, r0
     42e:	d1f7      	bne.n	420 <loop+0xa8>
	/// Update all our controllers with the current led colors, using the passed in brightness
	/// @param scale temporarily override the scale
	void show(uint8_t scale);

	/// Update all our controllers with the current led colors
	void show() { show(m_Scale); }
     430:	4813      	ldr	r0, [pc, #76]	; (480 <loop+0x108>)
     432:	7801      	ldrb	r1, [r0, #0]
        leds[i] = CRGB::Black;
    }

    FastLED.show();
}
     434:	b002      	add	sp, #8
     436:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     43a:	f000 bf85 	b.w	1348 <CFastLED::show(unsigned char)>
     43e:	4b0e      	ldr	r3, [pc, #56]	; (478 <loop+0x100>)
     440:	0056      	lsls	r6, r2, #1
     442:	e7e9      	b.n	418 <loop+0xa0>
     444:	f3af 8000 	nop.w
     448:	00000000 	.word	0x00000000
     44c:	40f86a00 	.word	0x40f86a00
     450:	00000000 	.word	0x00000000
     454:	405d4000 	.word	0x405d4000
     458:	00000000 	.word	0x00000000
     45c:	40936000 	.word	0x40936000
     460:	2001247e 	.word	0x2001247e
     464:	200431be 	.word	0x200431be
     468:	200431c0 	.word	0x200431c0
     46c:	2001227c 	.word	0x2001227c
     470:	20012478 	.word	0x20012478
     474:	20012470 	.word	0x20012470
     478:	20012310 	.word	0x20012310
     47c:	2001246f 	.word	0x2001246f
     480:	20043210 	.word	0x20043210

00000484 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)>:
        }
      }
    }
  }

  uint32_t showRGBInternal(PixelController<RGB_ORDER,LANES, __FL_T4_MASK> &allpixels) {
     484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     488:	b097      	sub	sp, #92	; 0x5c
                d[2] = e[2] - d[2];
        }

        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
     48a:	7c0b      	ldrb	r3, [r1, #16]
     48c:	4606      	mov	r6, r0
     48e:	4608      	mov	r0, r1
     490:	9101      	str	r1, [sp, #4]
     492:	7b49      	ldrb	r1, [r1, #13]
    allpixels.preStepFirstByteDithering();
    _outlines b0;
    uint32_t start = ARM_DWT_CYCCNT;
     494:	4ace      	ldr	r2, [pc, #824]	; (7d0 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x34c>)
     496:	1a5b      	subs	r3, r3, r1
     498:	fa5f fc83 	uxtb.w	ip, r3
     49c:	f880 c00d 	strb.w	ip, [r0, #13]
     4a0:	6812      	ldr	r2, [r2, #0]

    for(int i = 0; i < m_nActualLanes; i++) {
     4a2:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
  }

  uint32_t showRGBInternal(PixelController<RGB_ORDER,LANES, __FL_T4_MASK> &allpixels) {
    allpixels.preStepFirstByteDithering();
    _outlines b0;
    uint32_t start = ARM_DWT_CYCCNT;
     4a6:	9205      	str	r2, [sp, #20]

    for(int i = 0; i < m_nActualLanes; i++) {
     4a8:	b313      	cbz	r3, 4f0 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x6c>
     4aa:	9901      	ldr	r1, [sp, #4]
     4ac:	3305      	adds	r3, #5
     4ae:	f106 0417 	add.w	r4, r6, #23
     4b2:	f891 e013 	ldrb.w	lr, [r1, #19]
     4b6:	eb01 0583 	add.w	r5, r1, r3, lsl #2
     4ba:	680f      	ldr	r7, [r1, #0]
     4bc:	f101 0014 	add.w	r0, r1, #20
     4c0:	f10e 0e01 	add.w	lr, lr, #1
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }
     4c4:	f850 3f04 	ldr.w	r3, [r0, #4]!
      b0.bytes[m_bitOffsets[i]] = allpixels.loadAndScale0(i);
     4c8:	a916      	add	r1, sp, #88	; 0x58
     4ca:	f814 2f01 	ldrb.w	r2, [r4, #1]!
     4ce:	443b      	add	r3, r7
     4d0:	440a      	add	r2, r1
     4d2:	785b      	ldrb	r3, [r3, #1]
/// @param j - second byte to add
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
     4d4:	eb03 010c 	add.w	r1, r3, ip

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
     4d8:	b133      	cbz	r3, 4e8 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x64>
    if( t > 255) t = 255;
     4da:	29ff      	cmp	r1, #255	; 0xff
     4dc:	bfa8      	it	ge
     4de:	21ff      	movge	r1, #255	; 0xff
     4e0:	fb01 f30e 	mul.w	r3, r1, lr
     4e4:	f3c3 2307 	ubfx	r3, r3, #8, #8
  uint32_t showRGBInternal(PixelController<RGB_ORDER,LANES, __FL_T4_MASK> &allpixels) {
    allpixels.preStepFirstByteDithering();
    _outlines b0;
    uint32_t start = ARM_DWT_CYCCNT;

    for(int i = 0; i < m_nActualLanes; i++) {
     4e8:	4285      	cmp	r5, r0
      b0.bytes[m_bitOffsets[i]] = allpixels.loadAndScale0(i);
     4ea:	f802 3c40 	strb.w	r3, [r2, #-64]
  uint32_t showRGBInternal(PixelController<RGB_ORDER,LANES, __FL_T4_MASK> &allpixels) {
    allpixels.preStepFirstByteDithering();
    _outlines b0;
    uint32_t start = ARM_DWT_CYCCNT;

    for(int i = 0; i < m_nActualLanes; i++) {
     4ee:	d1e9      	bne.n	4c4 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x40>
      b0.bytes[m_bitOffsets[i]] = allpixels.loadAndScale0(i);
    }

    cli();
     4f0:	b672      	cpsid	i
    m_offsets[0] = _FASTLED_NS_TO_DWT(T1+T2+T3);
     4f2:	49b8      	ldr	r1, [pc, #736]	; (7d4 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x350>)
     4f4:	48b8      	ldr	r0, [pc, #736]	; (7d8 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x354>)
     4f6:	680c      	ldr	r4, [r1, #0]
    m_offsets[1] = _FASTLED_NS_TO_DWT(T2+T3);
     4f8:	680b      	ldr	r3, [r1, #0]
    for(int i = 0; i < m_nActualLanes; i++) {
      b0.bytes[m_bitOffsets[i]] = allpixels.loadAndScale0(i);
    }

    cli();
    m_offsets[0] = _FASTLED_NS_TO_DWT(T1+T2+T3);
     4fa:	0c24      	lsrs	r4, r4, #16
    m_offsets[1] = _FASTLED_NS_TO_DWT(T2+T3);
    m_offsets[2] = _FASTLED_NS_TO_DWT(T3);
     4fc:	680a      	ldr	r2, [r1, #0]
      b0.bytes[m_bitOffsets[i]] = allpixels.loadAndScale0(i);
    }

    cli();
    m_offsets[0] = _FASTLED_NS_TO_DWT(T1+T2+T3);
    m_offsets[1] = _FASTLED_NS_TO_DWT(T2+T3);
     4fe:	0c1b      	lsrs	r3, r3, #16
    m_offsets[2] = _FASTLED_NS_TO_DWT(T3);
    uint32_t wait_off = _FASTLED_NS_TO_DWT((WAIT_TIME-INTERRUPT_THRESHOLD));
     500:	6809      	ldr	r1, [r1, #0]
    }

    cli();
    m_offsets[0] = _FASTLED_NS_TO_DWT(T1+T2+T3);
    m_offsets[1] = _FASTLED_NS_TO_DWT(T2+T3);
    m_offsets[2] = _FASTLED_NS_TO_DWT(T3);
     502:	0c12      	lsrs	r2, r2, #16
      b0.bytes[m_bitOffsets[i]] = allpixels.loadAndScale0(i);
    }

    cli();
    m_offsets[0] = _FASTLED_NS_TO_DWT(T1+T2+T3);
    m_offsets[1] = _FASTLED_NS_TO_DWT(T2+T3);
     504:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    for(int i = 0; i < m_nActualLanes; i++) {
      b0.bytes[m_bitOffsets[i]] = allpixels.loadAndScale0(i);
    }

    cli();
    m_offsets[0] = _FASTLED_NS_TO_DWT(T1+T2+T3);
     508:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    m_offsets[1] = _FASTLED_NS_TO_DWT(T2+T3);
     50c:	019b      	lsls	r3, r3, #6
    m_offsets[2] = _FASTLED_NS_TO_DWT(T3);
    uint32_t wait_off = _FASTLED_NS_TO_DWT((WAIT_TIME-INTERRUPT_THRESHOLD));
     50e:	0c09      	lsrs	r1, r1, #16
    for(int i = 0; i < m_nActualLanes; i++) {
      b0.bytes[m_bitOffsets[i]] = allpixels.loadAndScale0(i);
    }

    cli();
    m_offsets[0] = _FASTLED_NS_TO_DWT(T1+T2+T3);
     510:	01e4      	lsls	r4, r4, #7
    m_offsets[1] = _FASTLED_NS_TO_DWT(T2+T3);
    m_offsets[2] = _FASTLED_NS_TO_DWT(T3);
     512:	eb02 0282 	add.w	r2, r2, r2, lsl #2
      b0.bytes[m_bitOffsets[i]] = allpixels.loadAndScale0(i);
    }

    cli();
    m_offsets[0] = _FASTLED_NS_TO_DWT(T1+T2+T3);
    m_offsets[1] = _FASTLED_NS_TO_DWT(T2+T3);
     516:	085b      	lsrs	r3, r3, #1
    m_offsets[2] = _FASTLED_NS_TO_DWT(T3);
    uint32_t wait_off = _FASTLED_NS_TO_DWT((WAIT_TIME-INTERRUPT_THRESHOLD));
     518:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    }

    cli();
    m_offsets[0] = _FASTLED_NS_TO_DWT(T1+T2+T3);
    m_offsets[1] = _FASTLED_NS_TO_DWT(T2+T3);
    m_offsets[2] = _FASTLED_NS_TO_DWT(T3);
     51c:	0195      	lsls	r5, r2, #6
    for(int i = 0; i < m_nActualLanes; i++) {
      b0.bytes[m_bitOffsets[i]] = allpixels.loadAndScale0(i);
    }

    cli();
    m_offsets[0] = _FASTLED_NS_TO_DWT(T1+T2+T3);
     51e:	fba0 4204 	umull	r4, r2, r0, r4
    m_offsets[1] = _FASTLED_NS_TO_DWT(T2+T3);
    m_offsets[2] = _FASTLED_NS_TO_DWT(T3);
    uint32_t wait_off = _FASTLED_NS_TO_DWT((WAIT_TIME-INTERRUPT_THRESHOLD));
     522:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
      b0.bytes[m_bitOffsets[i]] = allpixels.loadAndScale0(i);
    }

    cli();
    m_offsets[0] = _FASTLED_NS_TO_DWT(T1+T2+T3);
    m_offsets[1] = _FASTLED_NS_TO_DWT(T2+T3);
     526:	fba0 4303 	umull	r4, r3, r0, r3
    m_offsets[2] = _FASTLED_NS_TO_DWT(T3);
     52a:	fba0 4505 	umull	r4, r5, r0, r5
    for(int i = 0; i < m_nActualLanes; i++) {
      b0.bytes[m_bitOffsets[i]] = allpixels.loadAndScale0(i);
    }

    cli();
    m_offsets[0] = _FASTLED_NS_TO_DWT(T1+T2+T3);
     52e:	0a12      	lsrs	r2, r2, #8
    m_offsets[1] = _FASTLED_NS_TO_DWT(T2+T3);
     530:	0a1b      	lsrs	r3, r3, #8
    m_offsets[2] = _FASTLED_NS_TO_DWT(T3);
    uint32_t wait_off = _FASTLED_NS_TO_DWT((WAIT_TIME-INTERRUPT_THRESHOLD));

    uint32_t next_mark = ARM_DWT_CYCCNT + m_offsets[0];
     532:	4ca7      	ldr	r4, [pc, #668]	; (7d0 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x34c>)

    cli();
    m_offsets[0] = _FASTLED_NS_TO_DWT(T1+T2+T3);
    m_offsets[1] = _FASTLED_NS_TO_DWT(T2+T3);
    m_offsets[2] = _FASTLED_NS_TO_DWT(T3);
    uint32_t wait_off = _FASTLED_NS_TO_DWT((WAIT_TIME-INTERRUPT_THRESHOLD));
     534:	0849      	lsrs	r1, r1, #1
    for(int i = 0; i < m_nActualLanes; i++) {
      b0.bytes[m_bitOffsets[i]] = allpixels.loadAndScale0(i);
    }

    cli();
    m_offsets[0] = _FASTLED_NS_TO_DWT(T1+T2+T3);
     536:	6372      	str	r2, [r6, #52]	; 0x34
    m_offsets[1] = _FASTLED_NS_TO_DWT(T2+T3);
     538:	63b3      	str	r3, [r6, #56]	; 0x38
    m_offsets[2] = _FASTLED_NS_TO_DWT(T3);
     53a:	0a2d      	lsrs	r5, r5, #8
    uint32_t wait_off = _FASTLED_NS_TO_DWT((WAIT_TIME-INTERRUPT_THRESHOLD));
     53c:	fba0 1301 	umull	r1, r3, r0, r1

    uint32_t next_mark = ARM_DWT_CYCCNT + m_offsets[0];

    while(allpixels.has(1)) {
     540:	9901      	ldr	r1, [sp, #4]
    }

    cli();
    m_offsets[0] = _FASTLED_NS_TO_DWT(T1+T2+T3);
    m_offsets[1] = _FASTLED_NS_TO_DWT(T2+T3);
    m_offsets[2] = _FASTLED_NS_TO_DWT(T3);
     542:	63f5      	str	r5, [r6, #60]	; 0x3c
    uint32_t wait_off = _FASTLED_NS_TO_DWT((WAIT_TIME-INTERRUPT_THRESHOLD));

    uint32_t next_mark = ARM_DWT_CYCCNT + m_offsets[0];

    while(allpixels.has(1)) {
     544:	6889      	ldr	r1, [r1, #8]

    cli();
    m_offsets[0] = _FASTLED_NS_TO_DWT(T1+T2+T3);
    m_offsets[1] = _FASTLED_NS_TO_DWT(T2+T3);
    m_offsets[2] = _FASTLED_NS_TO_DWT(T3);
    uint32_t wait_off = _FASTLED_NS_TO_DWT((WAIT_TIME-INTERRUPT_THRESHOLD));
     546:	0a1b      	lsrs	r3, r3, #8

    uint32_t next_mark = ARM_DWT_CYCCNT + m_offsets[0];
     548:	6820      	ldr	r0, [r4, #0]

    while(allpixels.has(1)) {
     54a:	2900      	cmp	r1, #0

    cli();
    m_offsets[0] = _FASTLED_NS_TO_DWT(T1+T2+T3);
    m_offsets[1] = _FASTLED_NS_TO_DWT(T2+T3);
    m_offsets[2] = _FASTLED_NS_TO_DWT(T3);
    uint32_t wait_off = _FASTLED_NS_TO_DWT((WAIT_TIME-INTERRUPT_THRESHOLD));
     54c:	9304      	str	r3, [sp, #16]

    uint32_t next_mark = ARM_DWT_CYCCNT + m_offsets[0];
     54e:	eb02 0b00 	add.w	fp, r2, r0

    while(allpixels.has(1)) {
     552:	f340 8420 	ble.w	d96 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x912>
      allpixels.stepDithering();
      #if (FASTLED_ALLOW_INTERRUPTS == 1)
			cli();
			// if interrupts took longer than 45µs, punt on the current frame
			if(ARM_DWT_CYCCNT > next_mark) {
     556:	46a2      	mov	sl, r4

      uint32_t out = (b2.bg[3][i] << 24) | (b2.bg[2][i] << 16) | (b2.bg[1][i] << 8) | b2.bg[0][i];

      out = ((~out) & m_nWriteMask);
      while((next_mark - ARM_DWT_CYCCNT) > m_offsets[1]);
      *FastPin<FIRST_PIN>::cport() = out;
     558:	9602      	str	r6, [sp, #8]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     55a:	9d01      	ldr	r5, [sp, #4]
                d[1] = e[1] - d[1];
     55c:	7b68      	ldrb	r0, [r5, #13]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     55e:	7beb      	ldrb	r3, [r5, #15]
     560:	7b29      	ldrb	r1, [r5, #12]
                d[1] = e[1] - d[1];
     562:	7c2a      	ldrb	r2, [r5, #16]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     564:	1a59      	subs	r1, r3, r1
                d[1] = e[1] - d[1];
                d[2] = e[2] - d[2];
     566:	7c6b      	ldrb	r3, [r5, #17]
        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
                d[1] = e[1] - d[1];
     568:	1a12      	subs	r2, r2, r0
                d[2] = e[2] - d[2];
     56a:	7ba8      	ldrb	r0, [r5, #14]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     56c:	7329      	strb	r1, [r5, #12]
                d[1] = e[1] - d[1];
                d[2] = e[2] - d[2];
     56e:	1a1b      	subs	r3, r3, r0
        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
                d[1] = e[1] - d[1];
     570:	736a      	strb	r2, [r5, #13]
                d[2] = e[2] - d[2];
     572:	73ab      	strb	r3, [r5, #14]
    uint32_t next_mark = ARM_DWT_CYCCNT + m_offsets[0];

    while(allpixels.has(1)) {
      allpixels.stepDithering();
      #if (FASTLED_ALLOW_INTERRUPTS == 1)
			cli();
     574:	b672      	cpsid	i
			// if interrupts took longer than 45µs, punt on the current frame
			if(ARM_DWT_CYCCNT > next_mark) {
     576:	f8da 3000 	ldr.w	r3, [sl]
     57a:	4a95      	ldr	r2, [pc, #596]	; (7d0 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x34c>)
     57c:	455b      	cmp	r3, fp
     57e:	d907      	bls.n	590 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x10c>
				if((ARM_DWT_CYCCNT-next_mark) > wait_off) { sei(); return ARM_DWT_CYCCNT - start; }
     580:	f8da 3000 	ldr.w	r3, [sl]
     584:	9904      	ldr	r1, [sp, #16]
     586:	ebcb 0303 	rsb	r3, fp, r3
     58a:	4299      	cmp	r1, r3
     58c:	f0c0 8411 	bcc.w	db2 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x92e>
/// data into LSB for a faster write (the code using this data can happily walk the array backwards)
__attribute__((always_inline)) inline void transpose8x1(unsigned char *A, unsigned char *B) {
  uint32_t x, y, t;

  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
     590:	990c      	ldr	r1, [sp, #48]	; 0x30
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     592:	f64c 48cc 	movw	r8, #52428	; 0xcccc
__attribute__((always_inline)) inline void transpose8x1(unsigned char *A, unsigned char *B) {
  uint32_t x, y, t;

  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);
     596:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     598:	ea81 14d1 	eor.w	r4, r1, r1, lsr #7
__attribute__((always_inline)) inline void transpose8x1(unsigned char *A, unsigned char *B) {
  uint32_t x, y, t;

  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);
     59c:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     5a0:	ea83 10d3 	eor.w	r0, r3, r3, lsr #7
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     5a4:	4642      	mov	r2, r8

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     5a6:	f004 14aa 	and.w	r4, r4, #11141290	; 0xaa00aa
/// data into LSB for a faster write (the code using this data can happily walk the array backwards)
__attribute__((always_inline)) inline void transpose8x1(unsigned char *A, unsigned char *B) {
  uint32_t x, y, t;

  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
     5aa:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     5ac:	f000 10aa 	and.w	r0, r0, #11141290	; 0xaa00aa
/// data into LSB for a faster write (the code using this data can happily walk the array backwards)
__attribute__((always_inline)) inline void transpose8x1(unsigned char *A, unsigned char *B) {
  uint32_t x, y, t;

  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
     5b0:	9d08      	ldr	r5, [sp, #32]
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     5b2:	4061      	eors	r1, r4
__attribute__((always_inline)) inline void transpose8x1(unsigned char *A, unsigned char *B) {
  uint32_t x, y, t;

  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);
     5b4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     5b8:	4043      	eors	r3, r0
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     5ba:	ea87 1ed7 	eor.w	lr, r7, r7, lsr #7
     5be:	ea81 14c4 	eor.w	r4, r1, r4, lsl #7
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     5c2:	ea83 10c0 	eor.w	r0, r3, r0, lsl #7
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     5c6:	f00e 1eaa 	and.w	lr, lr, #11141290	; 0xaa00aa
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     5ca:	ea84 3194 	eor.w	r1, r4, r4, lsr #14
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     5ce:	ea8c 13dc 	eor.w	r3, ip, ip, lsr #7
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     5d2:	ea87 070e 	eor.w	r7, r7, lr
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     5d6:	ea01 0808 	and.w	r8, r1, r8
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     5da:	ea80 3190 	eor.w	r1, r0, r0, lsr #14
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     5de:	f003 13aa 	and.w	r3, r3, #11141290	; 0xaa00aa
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     5e2:	ea87 17ce 	eor.w	r7, r7, lr, lsl #7
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     5e6:	400a      	ands	r2, r1

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     5e8:	ea84 0108 	eor.w	r1, r4, r8
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     5ec:	ea8c 0403 	eor.w	r4, ip, r3
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     5f0:	ea85 1cd5 	eor.w	ip, r5, r5, lsr #7
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     5f4:	ea81 3188 	eor.w	r1, r1, r8, lsl #14
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     5f8:	4050      	eors	r0, r2
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     5fa:	ea84 13c3 	eor.w	r3, r4, r3, lsl #7
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     5fe:	f00c 1caa 	and.w	ip, ip, #11141290	; 0xaa00aa
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     602:	ea80 3282 	eor.w	r2, r0, r2, lsl #14
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
     606:	f001 300f 	and.w	r0, r1, #252645135	; 0xf0f0f0f
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     60a:	ea89 14d9 	eor.w	r4, r9, r9, lsr #7
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     60e:	ea85 050c 	eor.w	r5, r5, ip
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
     612:	4606      	mov	r6, r0
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     614:	9806      	ldr	r0, [sp, #24]
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     616:	f004 14aa 	and.w	r4, r4, #11141290	; 0xaa00aa
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     61a:	ea85 15cc 	eor.w	r5, r5, ip, lsl #7
     61e:	ea80 18d0 	eor.w	r8, r0, r0, lsr #7
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     622:	9807      	ldr	r0, [sp, #28]
     624:	ea89 0e04 	eor.w	lr, r9, r4
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     628:	0909      	lsrs	r1, r1, #4
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     62a:	ea80 1cd0 	eor.w	ip, r0, r0, lsr #7
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     62e:	f008 18aa 	and.w	r8, r8, #11141290	; 0xaa00aa
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     632:	ea8e 1ec4 	eor.w	lr, lr, r4, lsl #7
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     636:	9806      	ldr	r0, [sp, #24]
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     638:	f00c 1caa 	and.w	ip, ip, #11141290	; 0xaa00aa
     63c:	9c07      	ldr	r4, [sp, #28]
  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
     63e:	f002 39f0 	and.w	r9, r2, #4042322160	; 0xf0f0f0f0
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     642:	ea80 0008 	eor.w	r0, r0, r8
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     646:	ea84 040c 	eor.w	r4, r4, ip
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     64a:	0112      	lsls	r2, r2, #4
  *((uint32_t*)(B+4)) = x;
     64c:	f001 310f 	and.w	r1, r1, #252645135	; 0xf0f0f0f
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     650:	ea80 10c8 	eor.w	r0, r0, r8, lsl #7
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     654:	ea84 14cc 	eor.w	r4, r4, ip, lsl #7
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     658:	f002 32f0 	and.w	r2, r2, #4042322160	; 0xf0f0f0f0
  *((uint32_t*)(B+4)) = x;
     65c:	ea41 0109 	orr.w	r1, r1, r9
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     660:	ea87 3897 	eor.w	r8, r7, r7, lsr #14
     664:	f64c 4ccc 	movw	ip, #52428	; 0xcccc
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     668:	4332      	orrs	r2, r6
  *((uint32_t*)(B+4)) = x;
     66a:	9115      	str	r1, [sp, #84]	; 0x54
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     66c:	f64c 41cc 	movw	r1, #52428	; 0xcccc

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     670:	ea08 0c0c 	and.w	ip, r8, ip
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     674:	ea83 3893 	eor.w	r8, r3, r3, lsr #14
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     678:	9214      	str	r2, [sp, #80]	; 0x50
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     67a:	f64c 42cc 	movw	r2, #52428	; 0xcccc
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     67e:	ea08 0101 	and.w	r1, r8, r1

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     682:	ea85 3895 	eor.w	r8, r5, r5, lsr #14
     686:	ea87 070c 	eor.w	r7, r7, ip
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     68a:	ea84 3994 	eor.w	r9, r4, r4, lsr #14

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     68e:	ea08 0202 	and.w	r2, r8, r2
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     692:	ea8e 389e 	eor.w	r8, lr, lr, lsr #14

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     696:	ea87 378c 	eor.w	r7, r7, ip, lsl #14
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     69a:	f64c 4ccc 	movw	ip, #52428	; 0xcccc

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     69e:	4055      	eors	r5, r2
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     6a0:	404b      	eors	r3, r1
     6a2:	ea08 0c0c 	and.w	ip, r8, ip

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     6a6:	ea80 3890 	eor.w	r8, r0, r0, lsr #14
     6aa:	ea85 3582 	eor.w	r5, r5, r2, lsl #14
     6ae:	f64c 42cc 	movw	r2, #52428	; 0xcccc
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     6b2:	ea83 3381 	eor.w	r3, r3, r1, lsl #14
     6b6:	ea8e 0e0c 	eor.w	lr, lr, ip

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     6ba:	ea08 0202 	and.w	r2, r8, r2
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     6be:	f64c 48cc 	movw	r8, #52428	; 0xcccc
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     6c2:	0939      	lsrs	r1, r7, #4
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
     6c4:	f007 370f 	and.w	r7, r7, #252645135	; 0xf0f0f0f
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     6c8:	ea09 0808 	and.w	r8, r9, r8

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     6cc:	4050      	eors	r0, r2

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
     6ce:	f003 39f0 	and.w	r9, r3, #4042322160	; 0xf0f0f0f0
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     6d2:	011b      	lsls	r3, r3, #4
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     6d4:	ea84 0408 	eor.w	r4, r4, r8

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     6d8:	ea80 3082 	eor.w	r0, r0, r2, lsl #14
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     6dc:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
  *((uint32_t*)(B+4)) = x;
     6e0:	f001 310f 	and.w	r1, r1, #252645135	; 0xf0f0f0f
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     6e4:	ea84 3488 	eor.w	r4, r4, r8, lsl #14
     6e8:	9e02      	ldr	r6, [sp, #8]
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     6ea:	433b      	orrs	r3, r7
  *((uint32_t*)(B+4)) = x;
     6ec:	0907      	lsrs	r7, r0, #4
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     6ee:	0122      	lsls	r2, r4, #4
  *((uint32_t*)(B+4)) = x;
     6f0:	ea41 0109 	orr.w	r1, r1, r9
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     6f4:	ea8e 3e8c 	eor.w	lr, lr, ip, lsl #14
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
     6f8:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     6fc:	ea4f 1915 	mov.w	r9, r5, lsr #4
     700:	f007 370f 	and.w	r7, r7, #252645135	; 0xf0f0f0f
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     704:	f002 32f0 	and.w	r2, r2, #4042322160	; 0xf0f0f0f0
  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
     708:	f004 34f0 	and.w	r4, r4, #4042322160	; 0xf0f0f0f0
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     70c:	ea4f 180e 	mov.w	r8, lr, lsl #4
  *((uint32_t*)(B+4)) = x;
     710:	f009 390f 	and.w	r9, r9, #252645135	; 0xf0f0f0f
  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
     714:	f00e 3ef0 	and.w	lr, lr, #4042322160	; 0xf0f0f0f0
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     718:	433c      	orrs	r4, r7
     71a:	9113      	str	r1, [sp, #76]	; 0x4c
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     71c:	ea42 0100 	orr.w	r1, r2, r0
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane, uint8_t scale) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane, scale); }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getd(PixelController & pc) { return pc.d[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getscale(PixelController & pc) { return pc.mScale.raw[RO(SLOT)]; }
     720:	9f01      	ldr	r7, [sp, #4]
     722:	f008 3cf0 	and.w	ip, r8, #4042322160	; 0xf0f0f0f0
  *((uint32_t*)(B+4)) = x;
     726:	ea49 090e 	orr.w	r9, r9, lr
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
     72a:	f005 350f 	and.w	r5, r5, #252645135	; 0xf0f0f0f
     72e:	f897 e012 	ldrb.w	lr, [r7, #18]
     732:	aa0e      	add	r2, sp, #56	; 0x38
  x = t;

  *((uint32_t*)B) = y;
     734:	910e      	str	r1, [sp, #56]	; 0x38
     736:	ea4c 0505 	orr.w	r5, ip, r5
     73a:	6839      	ldr	r1, [r7, #0]
     73c:	f10e 0e01 	add.w	lr, lr, #1
     740:	9312      	str	r3, [sp, #72]	; 0x48
    transpose8x1(b.bg[0], b2.bg[0]);

    register uint8_t d = pixels.template getd<PX>(pixels);
    register uint8_t scale = pixels.template getscale<PX>(pixels);

    int x = 0;
     742:	2000      	movs	r0, #0
    for(uint32_t i = 8; i > 0;) {
     744:	2308      	movs	r3, #8

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane, uint8_t scale) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane, scale); }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getd(PixelController & pc) { return pc.d[RO(SLOT)]; }
     746:	f897 800c 	ldrb.w	r8, [r7, #12]
     74a:	468c      	mov	ip, r1
  *((uint32_t*)(B+4)) = x;
     74c:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     750:	9510      	str	r5, [sp, #64]	; 0x40
  *((uint32_t*)(B+4)) = x;
     752:	940f      	str	r4, [sp, #60]	; 0x3c
     754:	9103      	str	r1, [sp, #12]
      i--;
     756:	3b01      	subs	r3, #1
      while(ARM_DWT_CYCCNT < next_mark);
     758:	f8da 1000 	ldr.w	r1, [sl]
     75c:	4559      	cmp	r1, fp
     75e:	d3fb      	bcc.n	758 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x2d4>
      *FastPin<FIRST_PIN>::sport() = m_nWriteMask;
     760:	6af1      	ldr	r1, [r6, #44]	; 0x2c
     762:	4c1e      	ldr	r4, [pc, #120]	; (7dc <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x358>)
     764:	6021      	str	r1, [r4, #0]
      next_mark = ARM_DWT_CYCCNT + m_offsets[0];

      uint32_t out = (b2.bg[3][i] << 24) | (b2.bg[2][i] << 16) | (b2.bg[1][i] << 8) | b2.bg[0][i];

      out = ((~out) & m_nWriteMask);
     766:	7dd1      	ldrb	r1, [r2, #23]
     768:	7fd5      	ldrb	r5, [r2, #31]
     76a:	0409      	lsls	r1, r1, #16
     76c:	79d7      	ldrb	r7, [r2, #7]
     76e:	f892 900f 	ldrb.w	r9, [r2, #15]
     772:	ea41 6505 	orr.w	r5, r1, r5, lsl #24
     776:	6af4      	ldr	r4, [r6, #44]	; 0x2c
     778:	ea45 0107 	orr.w	r1, r5, r7
    int x = 0;
    for(uint32_t i = 8; i > 0;) {
      i--;
      while(ARM_DWT_CYCCNT < next_mark);
      *FastPin<FIRST_PIN>::sport() = m_nWriteMask;
      next_mark = ARM_DWT_CYCCNT + m_offsets[0];
     77c:	4d14      	ldr	r5, [pc, #80]	; (7d0 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x34c>)
     77e:	682f      	ldr	r7, [r5, #0]

      uint32_t out = (b2.bg[3][i] << 24) | (b2.bg[2][i] << 16) | (b2.bg[1][i] << 8) | b2.bg[0][i];

      out = ((~out) & m_nWriteMask);
     780:	ea41 2509 	orr.w	r5, r1, r9, lsl #8
    int x = 0;
    for(uint32_t i = 8; i > 0;) {
      i--;
      while(ARM_DWT_CYCCNT < next_mark);
      *FastPin<FIRST_PIN>::sport() = m_nWriteMask;
      next_mark = ARM_DWT_CYCCNT + m_offsets[0];
     784:	6b71      	ldr	r1, [r6, #52]	; 0x34

      uint32_t out = (b2.bg[3][i] << 24) | (b2.bg[2][i] << 16) | (b2.bg[1][i] << 8) | b2.bg[0][i];

      out = ((~out) & m_nWriteMask);
     786:	ea24 0405 	bic.w	r4, r4, r5
     78a:	6bb5      	ldr	r5, [r6, #56]	; 0x38
    int x = 0;
    for(uint32_t i = 8; i > 0;) {
      i--;
      while(ARM_DWT_CYCCNT < next_mark);
      *FastPin<FIRST_PIN>::sport() = m_nWriteMask;
      next_mark = ARM_DWT_CYCCNT + m_offsets[0];
     78c:	eb07 0b01 	add.w	fp, r7, r1

      uint32_t out = (b2.bg[3][i] << 24) | (b2.bg[2][i] << 16) | (b2.bg[1][i] << 8) | b2.bg[0][i];

      out = ((~out) & m_nWriteMask);
      while((next_mark - ARM_DWT_CYCCNT) > m_offsets[1]);
     790:	f8da 1000 	ldr.w	r1, [sl]
     794:	ebc1 010b 	rsb	r1, r1, fp
     798:	42a9      	cmp	r1, r5
     79a:	d8f9      	bhi.n	790 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x30c>
      *FastPin<FIRST_PIN>::cport() = out;
     79c:	4910      	ldr	r1, [pc, #64]	; (7e0 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x35c>)
     79e:	600c      	str	r4, [r1, #0]

      out = m_nWriteMask;
     7a0:	6af5      	ldr	r5, [r6, #44]	; 0x2c
     7a2:	6bf4      	ldr	r4, [r6, #60]	; 0x3c
      while((next_mark - ARM_DWT_CYCCNT) > m_offsets[2]);
     7a4:	f8da 1000 	ldr.w	r1, [sl]
     7a8:	ebc1 010b 	rsb	r1, r1, fp
     7ac:	42a1      	cmp	r1, r4
     7ae:	d8f9      	bhi.n	7a4 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x320>
      *FastPin<FIRST_PIN>::cport() = out;
     7b0:	490b      	ldr	r1, [pc, #44]	; (7e0 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x35c>)
     7b2:	600d      	str	r5, [r1, #0]

      // Read and store up to two bytes
      if (x < m_nActualLanes) {
     7b4:	f896 4028 	ldrb.w	r4, [r6, #40]	; 0x28
     7b8:	4284      	cmp	r4, r0
     7ba:	dd39      	ble.n	830 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x3ac>
     7bc:	9901      	ldr	r1, [sp, #4]
        b.bytes[m_bitOffsets[x]] = pixels.template loadAndScale<PX>(pixels,x,d,scale);
     7be:	1835      	adds	r5, r6, r0
     7c0:	eb01 0780 	add.w	r7, r1, r0, lsl #2
     7c4:	7e2d      	ldrb	r5, [r5, #24]
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }
     7c6:	69b9      	ldr	r1, [r7, #24]
     7c8:	f81c 1001 	ldrb.w	r1, [ip, r1]

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & , uint8_t b, uint8_t d) { return b ? qadd8(b,d) : 0; }
     7cc:	b191      	cbz	r1, 7f4 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x370>
     7ce:	e009      	b.n	7e4 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x360>
     7d0:	e0001004 	.word	0xe0001004
     7d4:	2001224c 	.word	0x2001224c
     7d8:	08972311 	.word	0x08972311
     7dc:	42000084 	.word	0x42000084
     7e0:	42000088 	.word	0x42000088
/// @param j - second byte to add
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
     7e4:	4441      	add	r1, r8
    if( t > 255) t = 255;
     7e6:	29ff      	cmp	r1, #255	; 0xff
     7e8:	bfa8      	it	ge
     7ea:	21ff      	movge	r1, #255	; 0xff
     7ec:	fb01 f10e 	mul.w	r1, r1, lr
     7f0:	f3c1 2107 	ubfx	r1, r1, #8, #8
     7f4:	f10d 0958 	add.w	r9, sp, #88	; 0x58
     7f8:	444d      	add	r5, r9
        x++;
     7fa:	f100 0901 	add.w	r9, r0, #1
        if (x < m_nActualLanes) {
     7fe:	454c      	cmp	r4, r9
      while((next_mark - ARM_DWT_CYCCNT) > m_offsets[2]);
      *FastPin<FIRST_PIN>::cport() = out;

      // Read and store up to two bytes
      if (x < m_nActualLanes) {
        b.bytes[m_bitOffsets[x]] = pixels.template loadAndScale<PX>(pixels,x,d,scale);
     800:	f805 1c40 	strb.w	r1, [r5, #-64]
        x++;
        if (x < m_nActualLanes) {
     804:	f340 82d1 	ble.w	daa <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x926>
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }
     808:	69f9      	ldr	r1, [r7, #28]
          b.bytes[m_bitOffsets[x]] = pixels.template loadAndScale<PX>(pixels,x,d,scale);
     80a:	44b1      	add	r9, r6
     80c:	f81c 1001 	ldrb.w	r1, [ip, r1]
     810:	f899 4018 	ldrb.w	r4, [r9, #24]

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & , uint8_t b, uint8_t d) { return b ? qadd8(b,d) : 0; }
     814:	b139      	cbz	r1, 826 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x3a2>
/// @param j - second byte to add
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
     816:	4441      	add	r1, r8
    if( t > 255) t = 255;
     818:	29ff      	cmp	r1, #255	; 0xff
     81a:	bfa8      	it	ge
     81c:	21ff      	movge	r1, #255	; 0xff
     81e:	fb0e f101 	mul.w	r1, lr, r1
     822:	f3c1 2107 	ubfx	r1, r1, #8, #8
     826:	ad16      	add	r5, sp, #88	; 0x58
          x++;
     828:	3002      	adds	r0, #2
      // Read and store up to two bytes
      if (x < m_nActualLanes) {
        b.bytes[m_bitOffsets[x]] = pixels.template loadAndScale<PX>(pixels,x,d,scale);
        x++;
        if (x < m_nActualLanes) {
          b.bytes[m_bitOffsets[x]] = pixels.template loadAndScale<PX>(pixels,x,d,scale);
     82a:	442c      	add	r4, r5
     82c:	f804 1c40 	strb.w	r1, [r4, #-64]
     830:	3a01      	subs	r2, #1

    register uint8_t d = pixels.template getd<PX>(pixels);
    register uint8_t scale = pixels.template getscale<PX>(pixels);

    int x = 0;
    for(uint32_t i = 8; i > 0;) {
     832:	2b00      	cmp	r3, #0
     834:	d18f      	bne.n	756 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x2d2>
/// data into LSB for a faster write (the code using this data can happily walk the array backwards)
__attribute__((always_inline)) inline void transpose8x1(unsigned char *A, unsigned char *B) {
  uint32_t x, y, t;

  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
     836:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     838:	f64c 44cc 	movw	r4, #52428	; 0xcccc
__attribute__((always_inline)) inline void transpose8x1(unsigned char *A, unsigned char *B) {
  uint32_t x, y, t;

  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);
     83c:	990d      	ldr	r1, [sp, #52]	; 0x34
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     83e:	ea82 1cd2 	eor.w	ip, r2, r2, lsr #7
__attribute__((always_inline)) inline void transpose8x1(unsigned char *A, unsigned char *B) {
  uint32_t x, y, t;

  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);
     842:	9d0b      	ldr	r5, [sp, #44]	; 0x2c

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     844:	ea81 10d1 	eor.w	r0, r1, r1, lsr #7
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     848:	46a6      	mov	lr, r4

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     84a:	f00c 1caa 	and.w	ip, ip, #11141290	; 0xaa00aa
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     84e:	ea85 18d5 	eor.w	r8, r5, r5, lsr #7
     852:	f000 10aa 	and.w	r0, r0, #11141290	; 0xaa00aa
/// data into LSB for a faster write (the code using this data can happily walk the array backwards)
__attribute__((always_inline)) inline void transpose8x1(unsigned char *A, unsigned char *B) {
  uint32_t x, y, t;

  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
     856:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     858:	ea82 020c 	eor.w	r2, r2, ip
/// data into LSB for a faster write (the code using this data can happily walk the array backwards)
__attribute__((always_inline)) inline void transpose8x1(unsigned char *A, unsigned char *B) {
  uint32_t x, y, t;

  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
     85c:	f8dd 9020 	ldr.w	r9, [sp, #32]
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     860:	4041      	eors	r1, r0
     862:	9602      	str	r6, [sp, #8]
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     864:	ea82 12cc 	eor.w	r2, r2, ip, lsl #7
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     868:	9e07      	ldr	r6, [sp, #28]
     86a:	ea81 10c0 	eor.w	r0, r1, r0, lsl #7
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     86e:	ea82 3192 	eor.w	r1, r2, r2, lsr #14
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     872:	ea87 1cd7 	eor.w	ip, r7, r7, lsr #7
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     876:	400c      	ands	r4, r1
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     878:	ea80 3190 	eor.w	r1, r0, r0, lsr #14

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     87c:	f00c 1caa 	and.w	ip, ip, #11141290	; 0xaa00aa
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     880:	ea01 0e0e 	and.w	lr, r1, lr

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     884:	ea82 0104 	eor.w	r1, r2, r4
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     888:	f008 12aa 	and.w	r2, r8, #11141290	; 0xaa00aa
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     88c:	ea87 070c 	eor.w	r7, r7, ip
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     890:	ea81 3484 	eor.w	r4, r1, r4, lsl #14
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     894:	ea80 000e 	eor.w	r0, r0, lr
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     898:	ea85 0102 	eor.w	r1, r5, r2
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     89c:	ea87 17cc 	eor.w	r7, r7, ip, lsl #7
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     8a0:	ea80 3e8e 	eor.w	lr, r0, lr, lsl #14
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
     8a4:	f004 380f 	and.w	r8, r4, #252645135	; 0xf0f0f0f
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     8a8:	ea81 12c2 	eor.w	r2, r1, r2, lsl #7
     8ac:	9909      	ldr	r1, [sp, #36]	; 0x24
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     8ae:	0924      	lsrs	r4, r4, #4
  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
     8b0:	f00e 3cf0 	and.w	ip, lr, #4042322160	; 0xf0f0f0f0
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     8b4:	ea81 11d1 	eor.w	r1, r1, r1, lsr #7
     8b8:	9809      	ldr	r0, [sp, #36]	; 0x24
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     8ba:	f004 340f 	and.w	r4, r4, #252645135	; 0xf0f0f0f
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     8be:	ea89 15d9 	eor.w	r5, r9, r9, lsr #7
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     8c2:	f001 11aa 	and.w	r1, r1, #11141290	; 0xaa00aa
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     8c6:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  *((uint32_t*)(B+4)) = x;
     8ca:	ea44 0c0c 	orr.w	ip, r4, ip
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     8ce:	9c06      	ldr	r4, [sp, #24]
     8d0:	f005 15aa 	and.w	r5, r5, #11141290	; 0xaa00aa
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     8d4:	f00e 3ef0 	and.w	lr, lr, #4042322160	; 0xf0f0f0f0
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     8d8:	4048      	eors	r0, r1
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     8da:	ea84 14d4 	eor.w	r4, r4, r4, lsr #7
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     8de:	ea4e 0808 	orr.w	r8, lr, r8
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     8e2:	ea89 0905 	eor.w	r9, r9, r5
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     8e6:	ea87 3e97 	eor.w	lr, r7, r7, lsr #14
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     8ea:	f004 14aa 	and.w	r4, r4, #11141290	; 0xaa00aa
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     8ee:	ea80 10c1 	eor.w	r0, r0, r1, lsl #7
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     8f2:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     8f6:	9906      	ldr	r1, [sp, #24]
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     8f8:	f64c 4ccc 	movw	ip, #52428	; 0xcccc
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     8fc:	ea89 15c5 	eor.w	r5, r9, r5, lsl #7
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     900:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     904:	ea81 0904 	eor.w	r9, r1, r4
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     908:	ea0e 0c0c 	and.w	ip, lr, ip
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     90c:	9907      	ldr	r1, [sp, #28]
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     90e:	ea82 3e92 	eor.w	lr, r2, r2, lsr #14

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     912:	ea89 14c4 	eor.w	r4, r9, r4, lsl #7
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     916:	ea87 090c 	eor.w	r9, r7, ip
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     91a:	ea81 11d1 	eor.w	r1, r1, r1, lsr #7
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     91e:	f64c 47cc 	movw	r7, #52428	; 0xcccc

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     922:	ea89 3c8c 	eor.w	ip, r9, ip, lsl #14
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     926:	ea0e 0707 	and.w	r7, lr, r7
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     92a:	f001 11aa 	and.w	r1, r1, #11141290	; 0xaa00aa
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     92e:	ea85 3995 	eor.w	r9, r5, r5, lsr #14
     932:	f64c 4ecc 	movw	lr, #52428	; 0xcccc
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     936:	ea86 0801 	eor.w	r8, r6, r1
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     93a:	407a      	eors	r2, r7

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     93c:	ea09 0e0e 	and.w	lr, r9, lr

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
     940:	f00c 360f 	and.w	r6, ip, #252645135	; 0xf0f0f0f
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     944:	ea88 11c1 	eor.w	r1, r8, r1, lsl #7
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     948:	ea82 3287 	eor.w	r2, r2, r7, lsl #14

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     94c:	ea85 050e 	eor.w	r5, r5, lr
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     950:	ea4f 181c 	mov.w	r8, ip, lsr #4
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     954:	f64c 47cc 	movw	r7, #52428	; 0xcccc
  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
     958:	f002 3cf0 	and.w	ip, r2, #4042322160	; 0xf0f0f0f0
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     95c:	ea85 358e 	eor.w	r5, r5, lr, lsl #14
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     960:	f008 380f 	and.w	r8, r8, #252645135	; 0xf0f0f0f
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     964:	ea84 3e94 	eor.w	lr, r4, r4, lsr #14
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     968:	ea80 3990 	eor.w	r9, r0, r0, lsr #14
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     96c:	ea48 0c0c 	orr.w	ip, r8, ip
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     970:	f64c 48cc 	movw	r8, #52428	; 0xcccc
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     974:	ea09 0707 	and.w	r7, r9, r7
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     978:	0112      	lsls	r2, r2, #4
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     97a:	ea0e 0808 	and.w	r8, lr, r8
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     97e:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     982:	ea81 3e91 	eor.w	lr, r1, r1, lsr #14
     986:	f64c 4ccc 	movw	ip, #52428	; 0xcccc
     98a:	4078      	eors	r0, r7
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     98c:	f002 32f0 	and.w	r2, r2, #4042322160	; 0xf0f0f0f0
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     990:	ea0e 0c0c 	and.w	ip, lr, ip

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     994:	ea84 0408 	eor.w	r4, r4, r8
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     998:	ea80 3087 	eor.w	r0, r0, r7, lsl #14
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     99c:	4332      	orrs	r2, r6
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     99e:	ea81 070c 	eor.w	r7, r1, ip

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     9a2:	ea84 3488 	eor.w	r4, r4, r8, lsl #14
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     9a6:	9212      	str	r2, [sp, #72]	; 0x48
     9a8:	0102      	lsls	r2, r0, #4
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     9aa:	ea87 3c8c 	eor.w	ip, r7, ip, lsl #14
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane, uint8_t scale) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane, scale); }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getd(PixelController & pc) { return pc.d[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getscale(PixelController & pc) { return pc.mScale.raw[RO(SLOT)]; }
     9ae:	9e01      	ldr	r6, [sp, #4]
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     9b0:	f002 3ef0 	and.w	lr, r2, #4042322160	; 0xf0f0f0f0
  *((uint32_t*)(B+4)) = x;
     9b4:	0929      	lsrs	r1, r5, #4
     9b6:	0927      	lsrs	r7, r4, #4
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
     9b8:	f005 350f 	and.w	r5, r5, #252645135	; 0xf0f0f0f
  x = t;

  *((uint32_t*)B) = y;
     9bc:	ea4f 120c 	mov.w	r2, ip, lsl #4
  *((uint32_t*)(B+4)) = x;
     9c0:	f001 310f 	and.w	r1, r1, #252645135	; 0xf0f0f0f
  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
     9c4:	f00c 3cf0 	and.w	ip, ip, #4042322160	; 0xf0f0f0f0
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     9c8:	ea4e 0505 	orr.w	r5, lr, r5
     9cc:	f002 32f0 	and.w	r2, r2, #4042322160	; 0xf0f0f0f0
     9d0:	f896 e014 	ldrb.w	lr, [r6, #20]
  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
     9d4:	f000 30f0 	and.w	r0, r0, #4042322160	; 0xf0f0f0f0
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
     9d8:	f004 340f 	and.w	r4, r4, #252645135	; 0xf0f0f0f
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     9dc:	f007 370f 	and.w	r7, r7, #252645135	; 0xf0f0f0f

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane, uint8_t scale) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane, scale); }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getd(PixelController & pc) { return pc.d[RO(SLOT)]; }
     9e0:	f896 800e 	ldrb.w	r8, [r6, #14]
     9e4:	4308      	orrs	r0, r1
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     9e6:	4314      	orrs	r4, r2
  *((uint32_t*)(B+4)) = x;
     9e8:	ea47 070c 	orr.w	r7, r7, ip
     9ec:	aa0e      	add	r2, sp, #56	; 0x38
     9ee:	f10e 0e01 	add.w	lr, lr, #1
     9f2:	2108      	movs	r1, #8
     9f4:	f8dd c00c 	ldr.w	ip, [sp, #12]
     9f8:	9e02      	ldr	r6, [sp, #8]
     9fa:	9011      	str	r0, [sp, #68]	; 0x44
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     9fc:	9510      	str	r5, [sp, #64]	; 0x40
  *((uint32_t*)(B+4)) = x;
     9fe:	970f      	str	r7, [sp, #60]	; 0x3c
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     a00:	940e      	str	r4, [sp, #56]	; 0x38
      i--;
     a02:	3901      	subs	r1, #1
      while(ARM_DWT_CYCCNT < next_mark);
     a04:	f8da 0000 	ldr.w	r0, [sl]
     a08:	4558      	cmp	r0, fp
     a0a:	d3fb      	bcc.n	a04 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x580>
      *FastPin<FIRST_PIN>::sport() = m_nWriteMask;
     a0c:	6af0      	ldr	r0, [r6, #44]	; 0x2c
     a0e:	4ccb      	ldr	r4, [pc, #812]	; (d3c <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x8b8>)
     a10:	6020      	str	r0, [r4, #0]
      next_mark = ARM_DWT_CYCCNT + m_offsets[0];

      uint32_t out = (b2.bg[3][i] << 24) | (b2.bg[2][i] << 16) | (b2.bg[1][i] << 8) | b2.bg[0][i];

      out = ((~out) & m_nWriteMask);
     a12:	7dd0      	ldrb	r0, [r2, #23]
     a14:	7fd5      	ldrb	r5, [r2, #31]
     a16:	0400      	lsls	r0, r0, #16
     a18:	79d7      	ldrb	r7, [r2, #7]
     a1a:	f892 900f 	ldrb.w	r9, [r2, #15]
     a1e:	ea40 6505 	orr.w	r5, r0, r5, lsl #24
     a22:	6af4      	ldr	r4, [r6, #44]	; 0x2c
     a24:	ea45 0007 	orr.w	r0, r5, r7
    int x = 0;
    for(uint32_t i = 8; i > 0;) {
      i--;
      while(ARM_DWT_CYCCNT < next_mark);
      *FastPin<FIRST_PIN>::sport() = m_nWriteMask;
      next_mark = ARM_DWT_CYCCNT + m_offsets[0];
     a28:	4dc5      	ldr	r5, [pc, #788]	; (d40 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x8bc>)
     a2a:	682f      	ldr	r7, [r5, #0]

      uint32_t out = (b2.bg[3][i] << 24) | (b2.bg[2][i] << 16) | (b2.bg[1][i] << 8) | b2.bg[0][i];

      out = ((~out) & m_nWriteMask);
     a2c:	ea40 2509 	orr.w	r5, r0, r9, lsl #8
    int x = 0;
    for(uint32_t i = 8; i > 0;) {
      i--;
      while(ARM_DWT_CYCCNT < next_mark);
      *FastPin<FIRST_PIN>::sport() = m_nWriteMask;
      next_mark = ARM_DWT_CYCCNT + m_offsets[0];
     a30:	6b70      	ldr	r0, [r6, #52]	; 0x34

      uint32_t out = (b2.bg[3][i] << 24) | (b2.bg[2][i] << 16) | (b2.bg[1][i] << 8) | b2.bg[0][i];

      out = ((~out) & m_nWriteMask);
     a32:	ea24 0405 	bic.w	r4, r4, r5
     a36:	6bb5      	ldr	r5, [r6, #56]	; 0x38
    int x = 0;
    for(uint32_t i = 8; i > 0;) {
      i--;
      while(ARM_DWT_CYCCNT < next_mark);
      *FastPin<FIRST_PIN>::sport() = m_nWriteMask;
      next_mark = ARM_DWT_CYCCNT + m_offsets[0];
     a38:	eb07 0b00 	add.w	fp, r7, r0

      uint32_t out = (b2.bg[3][i] << 24) | (b2.bg[2][i] << 16) | (b2.bg[1][i] << 8) | b2.bg[0][i];

      out = ((~out) & m_nWriteMask);
      while((next_mark - ARM_DWT_CYCCNT) > m_offsets[1]);
     a3c:	f8da 0000 	ldr.w	r0, [sl]
     a40:	ebc0 000b 	rsb	r0, r0, fp
     a44:	42a8      	cmp	r0, r5
     a46:	d8f9      	bhi.n	a3c <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x5b8>
      *FastPin<FIRST_PIN>::cport() = out;
     a48:	48be      	ldr	r0, [pc, #760]	; (d44 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x8c0>)
     a4a:	6004      	str	r4, [r0, #0]

      out = m_nWriteMask;
     a4c:	6af5      	ldr	r5, [r6, #44]	; 0x2c
     a4e:	6bf4      	ldr	r4, [r6, #60]	; 0x3c
      while((next_mark - ARM_DWT_CYCCNT) > m_offsets[2]);
     a50:	f8da 0000 	ldr.w	r0, [sl]
     a54:	ebc0 000b 	rsb	r0, r0, fp
     a58:	42a0      	cmp	r0, r4
     a5a:	d8f9      	bhi.n	a50 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x5cc>
      *FastPin<FIRST_PIN>::cport() = out;
     a5c:	48b9      	ldr	r0, [pc, #740]	; (d44 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x8c0>)
     a5e:	6005      	str	r5, [r0, #0]

      // Read and store up to two bytes
      if (x < m_nActualLanes) {
     a60:	f896 4028 	ldrb.w	r4, [r6, #40]	; 0x28
     a64:	429c      	cmp	r4, r3
     a66:	dd2e      	ble.n	ac6 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x642>
     a68:	9801      	ldr	r0, [sp, #4]
        b.bytes[m_bitOffsets[x]] = pixels.template loadAndScale<PX>(pixels,x,d,scale);
     a6a:	18f5      	adds	r5, r6, r3
     a6c:	eb00 0783 	add.w	r7, r0, r3, lsl #2
     a70:	7e2d      	ldrb	r5, [r5, #24]
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }
     a72:	69b8      	ldr	r0, [r7, #24]
     a74:	4460      	add	r0, ip
     a76:	7880      	ldrb	r0, [r0, #2]

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & , uint8_t b, uint8_t d) { return b ? qadd8(b,d) : 0; }
     a78:	b138      	cbz	r0, a8a <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x606>
/// @param j - second byte to add
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
     a7a:	4440      	add	r0, r8
    if( t > 255) t = 255;
     a7c:	28ff      	cmp	r0, #255	; 0xff
     a7e:	bfa8      	it	ge
     a80:	20ff      	movge	r0, #255	; 0xff
     a82:	fb00 f00e 	mul.w	r0, r0, lr
     a86:	f3c0 2007 	ubfx	r0, r0, #8, #8
     a8a:	f10d 0958 	add.w	r9, sp, #88	; 0x58
     a8e:	444d      	add	r5, r9
        x++;
     a90:	f103 0901 	add.w	r9, r3, #1
        if (x < m_nActualLanes) {
     a94:	454c      	cmp	r4, r9
      while((next_mark - ARM_DWT_CYCCNT) > m_offsets[2]);
      *FastPin<FIRST_PIN>::cport() = out;

      // Read and store up to two bytes
      if (x < m_nActualLanes) {
        b.bytes[m_bitOffsets[x]] = pixels.template loadAndScale<PX>(pixels,x,d,scale);
     a96:	f805 0c40 	strb.w	r0, [r5, #-64]
        x++;
        if (x < m_nActualLanes) {
     a9a:	f340 8188 	ble.w	dae <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x92a>
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }
     a9e:	69f8      	ldr	r0, [r7, #28]
          b.bytes[m_bitOffsets[x]] = pixels.template loadAndScale<PX>(pixels,x,d,scale);
     aa0:	44b1      	add	r9, r6
     aa2:	4460      	add	r0, ip
     aa4:	f899 4018 	ldrb.w	r4, [r9, #24]
     aa8:	7880      	ldrb	r0, [r0, #2]

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & , uint8_t b, uint8_t d) { return b ? qadd8(b,d) : 0; }
     aaa:	b138      	cbz	r0, abc <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x638>
/// @param j - second byte to add
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
     aac:	4440      	add	r0, r8
    if( t > 255) t = 255;
     aae:	28ff      	cmp	r0, #255	; 0xff
     ab0:	bfa8      	it	ge
     ab2:	20ff      	movge	r0, #255	; 0xff
     ab4:	fb0e f000 	mul.w	r0, lr, r0
     ab8:	f3c0 2007 	ubfx	r0, r0, #8, #8
     abc:	ad16      	add	r5, sp, #88	; 0x58
          x++;
     abe:	3302      	adds	r3, #2
      // Read and store up to two bytes
      if (x < m_nActualLanes) {
        b.bytes[m_bitOffsets[x]] = pixels.template loadAndScale<PX>(pixels,x,d,scale);
        x++;
        if (x < m_nActualLanes) {
          b.bytes[m_bitOffsets[x]] = pixels.template loadAndScale<PX>(pixels,x,d,scale);
     ac0:	442c      	add	r4, r5
     ac2:	f804 0c40 	strb.w	r0, [r4, #-64]
     ac6:	3a01      	subs	r2, #1

    register uint8_t d = pixels.template getd<PX>(pixels);
    register uint8_t scale = pixels.template getscale<PX>(pixels);

    int x = 0;
    for(uint32_t i = 8; i > 0;) {
     ac8:	2900      	cmp	r1, #0
     aca:	d19a      	bne.n	a02 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x57e>
/// data into LSB for a faster write (the code using this data can happily walk the array backwards)
__attribute__((always_inline)) inline void transpose8x1(unsigned char *A, unsigned char *B) {
  uint32_t x, y, t;

  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
     acc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     ace:	f64c 44cc 	movw	r4, #52428	; 0xcccc
__attribute__((always_inline)) inline void transpose8x1(unsigned char *A, unsigned char *B) {
  uint32_t x, y, t;

  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);
     ad2:	980d      	ldr	r0, [sp, #52]	; 0x34
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     ad4:	ea83 12d3 	eor.w	r2, r3, r3, lsr #7
__attribute__((always_inline)) inline void transpose8x1(unsigned char *A, unsigned char *B) {
  uint32_t x, y, t;

  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);
     ad8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     ada:	ea80 1cd0 	eor.w	ip, r0, r0, lsr #7
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     ade:	46a6      	mov	lr, r4

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     ae0:	f002 12aa 	and.w	r2, r2, #11141290	; 0xaa00aa
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     ae4:	ea85 18d5 	eor.w	r8, r5, r5, lsr #7
     ae8:	f00c 1caa 	and.w	ip, ip, #11141290	; 0xaa00aa
/// data into LSB for a faster write (the code using this data can happily walk the array backwards)
__attribute__((always_inline)) inline void transpose8x1(unsigned char *A, unsigned char *B) {
  uint32_t x, y, t;

  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
     aec:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     aee:	4053      	eors	r3, r2
/// data into LSB for a faster write (the code using this data can happily walk the array backwards)
__attribute__((always_inline)) inline void transpose8x1(unsigned char *A, unsigned char *B) {
  uint32_t x, y, t;

  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
     af0:	f8dd 9020 	ldr.w	r9, [sp, #32]
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     af4:	ea80 000c 	eor.w	r0, r0, ip
     af8:	9602      	str	r6, [sp, #8]
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     afa:	ea83 12c2 	eor.w	r2, r3, r2, lsl #7
    transpose8x1(b.bg[0], b2.bg[0]);

    register uint8_t d = pixels.template getd<PX>(pixels);
    register uint8_t scale = pixels.template getscale<PX>(pixels);

    int x = 0;
     afe:	460b      	mov	r3, r1
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     b00:	ea80 10cc 	eor.w	r0, r0, ip, lsl #7
     b04:	9e07      	ldr	r6, [sp, #28]
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     b06:	ea82 3192 	eor.w	r1, r2, r2, lsr #14
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     b0a:	ea87 1cd7 	eor.w	ip, r7, r7, lsr #7
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     b0e:	400c      	ands	r4, r1
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     b10:	ea80 3190 	eor.w	r1, r0, r0, lsr #14

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     b14:	f00c 1caa 	and.w	ip, ip, #11141290	; 0xaa00aa
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     b18:	ea01 0e0e 	and.w	lr, r1, lr

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     b1c:	ea82 0104 	eor.w	r1, r2, r4
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     b20:	f008 12aa 	and.w	r2, r8, #11141290	; 0xaa00aa
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     b24:	ea87 070c 	eor.w	r7, r7, ip
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     b28:	ea81 3484 	eor.w	r4, r1, r4, lsl #14
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     b2c:	ea80 000e 	eor.w	r0, r0, lr
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     b30:	ea85 0102 	eor.w	r1, r5, r2
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     b34:	ea87 17cc 	eor.w	r7, r7, ip, lsl #7
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     b38:	ea80 3e8e 	eor.w	lr, r0, lr, lsl #14
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
     b3c:	f004 380f 	and.w	r8, r4, #252645135	; 0xf0f0f0f
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     b40:	ea81 12c2 	eor.w	r2, r1, r2, lsl #7
     b44:	9909      	ldr	r1, [sp, #36]	; 0x24
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     b46:	0924      	lsrs	r4, r4, #4
  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
     b48:	f00e 3cf0 	and.w	ip, lr, #4042322160	; 0xf0f0f0f0
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     b4c:	ea81 11d1 	eor.w	r1, r1, r1, lsr #7
     b50:	9809      	ldr	r0, [sp, #36]	; 0x24
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     b52:	f004 340f 	and.w	r4, r4, #252645135	; 0xf0f0f0f
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     b56:	ea89 15d9 	eor.w	r5, r9, r9, lsr #7
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     b5a:	f001 11aa 	and.w	r1, r1, #11141290	; 0xaa00aa
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     b5e:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  *((uint32_t*)(B+4)) = x;
     b62:	ea44 0c0c 	orr.w	ip, r4, ip
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     b66:	9c06      	ldr	r4, [sp, #24]
     b68:	f005 15aa 	and.w	r5, r5, #11141290	; 0xaa00aa
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     b6c:	f00e 3ef0 	and.w	lr, lr, #4042322160	; 0xf0f0f0f0
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     b70:	4048      	eors	r0, r1
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     b72:	ea84 14d4 	eor.w	r4, r4, r4, lsr #7
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     b76:	ea4e 0808 	orr.w	r8, lr, r8
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     b7a:	ea89 0905 	eor.w	r9, r9, r5
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     b7e:	ea87 3e97 	eor.w	lr, r7, r7, lsr #14
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     b82:	f004 14aa 	and.w	r4, r4, #11141290	; 0xaa00aa
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     b86:	ea80 10c1 	eor.w	r0, r0, r1, lsl #7
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     b8a:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     b8e:	9906      	ldr	r1, [sp, #24]
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     b90:	f64c 4ccc 	movw	ip, #52428	; 0xcccc
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     b94:	ea89 15c5 	eor.w	r5, r9, r5, lsl #7
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     b98:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     b9c:	ea81 0904 	eor.w	r9, r1, r4
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     ba0:	ea0e 0c0c 	and.w	ip, lr, ip
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     ba4:	9907      	ldr	r1, [sp, #28]
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     ba6:	ea82 3e92 	eor.w	lr, r2, r2, lsr #14

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     baa:	ea89 14c4 	eor.w	r4, r9, r4, lsl #7
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     bae:	ea87 090c 	eor.w	r9, r7, ip
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     bb2:	ea81 11d1 	eor.w	r1, r1, r1, lsr #7
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     bb6:	f64c 47cc 	movw	r7, #52428	; 0xcccc

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     bba:	ea89 3c8c 	eor.w	ip, r9, ip, lsl #14
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     bbe:	ea0e 0707 	and.w	r7, lr, r7
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     bc2:	f001 11aa 	and.w	r1, r1, #11141290	; 0xaa00aa
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     bc6:	ea85 3995 	eor.w	r9, r5, r5, lsr #14
     bca:	f64c 4ecc 	movw	lr, #52428	; 0xcccc
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     bce:	ea86 0801 	eor.w	r8, r6, r1
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     bd2:	407a      	eors	r2, r7

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     bd4:	ea09 0e0e 	and.w	lr, r9, lr

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
     bd8:	f00c 360f 	and.w	r6, ip, #252645135	; 0xf0f0f0f
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     bdc:	ea88 11c1 	eor.w	r1, r8, r1, lsl #7
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     be0:	ea82 3287 	eor.w	r2, r2, r7, lsl #14

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     be4:	ea85 050e 	eor.w	r5, r5, lr
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     be8:	ea4f 181c 	mov.w	r8, ip, lsr #4
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     bec:	f64c 47cc 	movw	r7, #52428	; 0xcccc
  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
     bf0:	f002 3cf0 	and.w	ip, r2, #4042322160	; 0xf0f0f0f0
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     bf4:	ea80 3990 	eor.w	r9, r0, r0, lsr #14
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     bf8:	f008 380f 	and.w	r8, r8, #252645135	; 0xf0f0f0f
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     bfc:	ea85 358e 	eor.w	r5, r5, lr, lsl #14
     c00:	ea84 3e94 	eor.w	lr, r4, r4, lsr #14
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     c04:	ea09 0707 	and.w	r7, r9, r7
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     c08:	ea48 0c0c 	orr.w	ip, r8, ip
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     c0c:	f64c 48cc 	movw	r8, #52428	; 0xcccc
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     c10:	0112      	lsls	r2, r2, #4
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     c12:	4078      	eors	r0, r7

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     c14:	ea0e 0808 	and.w	r8, lr, r8
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     c18:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     c1c:	ea81 3e91 	eor.w	lr, r1, r1, lsr #14
     c20:	f64c 4ccc 	movw	ip, #52428	; 0xcccc
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     c24:	f002 32f0 	and.w	r2, r2, #4042322160	; 0xf0f0f0f0
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     c28:	ea80 3087 	eor.w	r0, r0, r7, lsl #14
     c2c:	ea0e 0c0c 	and.w	ip, lr, ip

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     c30:	ea84 0408 	eor.w	r4, r4, r8
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     c34:	4332      	orrs	r2, r6
  *((uint32_t*)(B+4)) = x;
     c36:	092f      	lsrs	r7, r5, #4
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     c38:	ea81 010c 	eor.w	r1, r1, ip

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     c3c:	ea84 3488 	eor.w	r4, r4, r8, lsl #14
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     c40:	9212      	str	r2, [sp, #72]	; 0x48
     c42:	0102      	lsls	r2, r0, #4
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     c44:	ea81 3c8c 	eor.w	ip, r1, ip, lsl #14

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     c48:	9e01      	ldr	r6, [sp, #4]
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     c4a:	f002 3ef0 	and.w	lr, r2, #4042322160	; 0xf0f0f0f0
  *((uint32_t*)(B+4)) = x;
     c4e:	f007 370f 	and.w	r7, r7, #252645135	; 0xf0f0f0f
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     c52:	ea4f 120c 	mov.w	r2, ip, lsl #4
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
     c56:	f005 350f 	and.w	r5, r5, #252645135	; 0xf0f0f0f
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     c5a:	0921      	lsrs	r1, r4, #4
  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
     c5c:	f000 30f0 	and.w	r0, r0, #4042322160	; 0xf0f0f0f0
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     c60:	f002 32f0 	and.w	r2, r2, #4042322160	; 0xf0f0f0f0
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
     c64:	f004 340f 	and.w	r4, r4, #252645135	; 0xf0f0f0f
  x = t;

  *((uint32_t*)B) = y;
  *((uint32_t*)(B+4)) = x;
     c68:	4338      	orrs	r0, r7
  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
     c6a:	f00c 3cf0 	and.w	ip, ip, #4042322160	; 0xf0f0f0f0
     c6e:	68b7      	ldr	r7, [r6, #8]
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     c70:	ea4e 0505 	orr.w	r5, lr, r5
     c74:	4314      	orrs	r4, r2
     c76:	f996 e015 	ldrsb.w	lr, [r6, #21]
     c7a:	4632      	mov	r2, r6
  *((uint32_t*)(B+4)) = x;
     c7c:	f001 310f 	and.w	r1, r1, #252645135	; 0xf0f0f0f
     c80:	9e03      	ldr	r6, [sp, #12]
     c82:	3f01      	subs	r7, #1
     c84:	ea41 010c 	orr.w	r1, r1, ip
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane, uint8_t scale) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane, scale); }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getd(PixelController & pc) { return pc.d[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getscale(PixelController & pc) { return pc.mScale.raw[RO(SLOT)]; }
     c88:	f892 c013 	ldrb.w	ip, [r2, #19]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     c8c:	4476      	add	r6, lr
     c8e:	9011      	str	r0, [sp, #68]	; 0x44
     c90:	910f      	str	r1, [sp, #60]	; 0x3c
     c92:	a90e      	add	r1, sp, #56	; 0x38
     c94:	46b6      	mov	lr, r6
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane, uint8_t scale) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane, scale); }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getd(PixelController & pc) { return pc.d[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getscale(PixelController & pc) { return pc.mScale.raw[RO(SLOT)]; }
     c96:	4616      	mov	r6, r2
     c98:	f10c 0c01 	add.w	ip, ip, #1
     c9c:	460a      	mov	r2, r1

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     c9e:	f8c6 e000 	str.w	lr, [r6]
    for(uint32_t i = 8; i > 0;) {
     ca2:	2008      	movs	r0, #8
     ca4:	60b7      	str	r7, [r6, #8]

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane, uint8_t scale) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane, scale); }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getd(PixelController & pc) { return pc.d[RO(SLOT)]; }
     ca6:	f896 900d 	ldrb.w	r9, [r6, #13]
     caa:	9e02      	ldr	r6, [sp, #8]
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  *((uint32_t*)B) = y;
     cac:	9510      	str	r5, [sp, #64]	; 0x40
     cae:	940e      	str	r4, [sp, #56]	; 0x38
      i--;
     cb0:	3801      	subs	r0, #1
      while(ARM_DWT_CYCCNT < next_mark);
     cb2:	f8da 1000 	ldr.w	r1, [sl]
     cb6:	4559      	cmp	r1, fp
     cb8:	d3fb      	bcc.n	cb2 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x82e>
      *FastPin<FIRST_PIN>::sport() = m_nWriteMask;
     cba:	6af1      	ldr	r1, [r6, #44]	; 0x2c
     cbc:	4c1f      	ldr	r4, [pc, #124]	; (d3c <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x8b8>)
     cbe:	6021      	str	r1, [r4, #0]
      next_mark = ARM_DWT_CYCCNT + m_offsets[0];

      uint32_t out = (b2.bg[3][i] << 24) | (b2.bg[2][i] << 16) | (b2.bg[1][i] << 8) | b2.bg[0][i];

      out = ((~out) & m_nWriteMask);
     cc0:	7dd1      	ldrb	r1, [r2, #23]
     cc2:	7fd5      	ldrb	r5, [r2, #31]
     cc4:	0409      	lsls	r1, r1, #16
     cc6:	79d7      	ldrb	r7, [r2, #7]
     cc8:	f892 800f 	ldrb.w	r8, [r2, #15]
     ccc:	ea41 6505 	orr.w	r5, r1, r5, lsl #24
     cd0:	6af4      	ldr	r4, [r6, #44]	; 0x2c
     cd2:	ea45 0107 	orr.w	r1, r5, r7
    int x = 0;
    for(uint32_t i = 8; i > 0;) {
      i--;
      while(ARM_DWT_CYCCNT < next_mark);
      *FastPin<FIRST_PIN>::sport() = m_nWriteMask;
      next_mark = ARM_DWT_CYCCNT + m_offsets[0];
     cd6:	4d1a      	ldr	r5, [pc, #104]	; (d40 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x8bc>)
     cd8:	682f      	ldr	r7, [r5, #0]

      uint32_t out = (b2.bg[3][i] << 24) | (b2.bg[2][i] << 16) | (b2.bg[1][i] << 8) | b2.bg[0][i];

      out = ((~out) & m_nWriteMask);
     cda:	ea41 2508 	orr.w	r5, r1, r8, lsl #8
    int x = 0;
    for(uint32_t i = 8; i > 0;) {
      i--;
      while(ARM_DWT_CYCCNT < next_mark);
      *FastPin<FIRST_PIN>::sport() = m_nWriteMask;
      next_mark = ARM_DWT_CYCCNT + m_offsets[0];
     cde:	6b71      	ldr	r1, [r6, #52]	; 0x34

      uint32_t out = (b2.bg[3][i] << 24) | (b2.bg[2][i] << 16) | (b2.bg[1][i] << 8) | b2.bg[0][i];

      out = ((~out) & m_nWriteMask);
     ce0:	ea24 0405 	bic.w	r4, r4, r5
     ce4:	6bb5      	ldr	r5, [r6, #56]	; 0x38
    int x = 0;
    for(uint32_t i = 8; i > 0;) {
      i--;
      while(ARM_DWT_CYCCNT < next_mark);
      *FastPin<FIRST_PIN>::sport() = m_nWriteMask;
      next_mark = ARM_DWT_CYCCNT + m_offsets[0];
     ce6:	eb07 0b01 	add.w	fp, r7, r1

      uint32_t out = (b2.bg[3][i] << 24) | (b2.bg[2][i] << 16) | (b2.bg[1][i] << 8) | b2.bg[0][i];

      out = ((~out) & m_nWriteMask);
      while((next_mark - ARM_DWT_CYCCNT) > m_offsets[1]);
     cea:	f8da 1000 	ldr.w	r1, [sl]
     cee:	ebc1 010b 	rsb	r1, r1, fp
     cf2:	42a9      	cmp	r1, r5
     cf4:	d8f9      	bhi.n	cea <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x866>
      *FastPin<FIRST_PIN>::cport() = out;
     cf6:	4913      	ldr	r1, [pc, #76]	; (d44 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x8c0>)
     cf8:	600c      	str	r4, [r1, #0]

      out = m_nWriteMask;
     cfa:	6af5      	ldr	r5, [r6, #44]	; 0x2c
     cfc:	6bf4      	ldr	r4, [r6, #60]	; 0x3c
      while((next_mark - ARM_DWT_CYCCNT) > m_offsets[2]);
     cfe:	f8da 1000 	ldr.w	r1, [sl]
     d02:	ebc1 010b 	rsb	r1, r1, fp
     d06:	42a1      	cmp	r1, r4
     d08:	d8f9      	bhi.n	cfe <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x87a>
      *FastPin<FIRST_PIN>::cport() = out;
     d0a:	490e      	ldr	r1, [pc, #56]	; (d44 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x8c0>)
     d0c:	600d      	str	r5, [r1, #0]

      // Read and store up to two bytes
      if (x < m_nActualLanes) {
     d0e:	f896 4028 	ldrb.w	r4, [r6, #40]	; 0x28
     d12:	429c      	cmp	r4, r3
     d14:	dd35      	ble.n	d82 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x8fe>
     d16:	9901      	ldr	r1, [sp, #4]
        b.bytes[m_bitOffsets[x]] = pixels.template loadAndScale<PX>(pixels,x,d,scale);
     d18:	18f5      	adds	r5, r6, r3
     d1a:	eb01 0783 	add.w	r7, r1, r3, lsl #2
     d1e:	7e2d      	ldrb	r5, [r5, #24]
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }
     d20:	69b9      	ldr	r1, [r7, #24]
     d22:	4471      	add	r1, lr
     d24:	7849      	ldrb	r1, [r1, #1]

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & , uint8_t b, uint8_t d) { return b ? qadd8(b,d) : 0; }
     d26:	b179      	cbz	r1, d48 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x8c4>
/// @param j - second byte to add
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
     d28:	4449      	add	r1, r9
    if( t > 255) t = 255;
     d2a:	29ff      	cmp	r1, #255	; 0xff
     d2c:	bfa8      	it	ge
     d2e:	21ff      	movge	r1, #255	; 0xff
     d30:	fb01 f10c 	mul.w	r1, r1, ip
     d34:	f3c1 2107 	ubfx	r1, r1, #8, #8
     d38:	e006      	b.n	d48 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x8c4>
     d3a:	bf00      	nop
     d3c:	42000084 	.word	0x42000084
     d40:	e0001004 	.word	0xe0001004
     d44:	42000088 	.word	0x42000088
     d48:	f10d 0858 	add.w	r8, sp, #88	; 0x58
     d4c:	4445      	add	r5, r8
        x++;
     d4e:	f103 0801 	add.w	r8, r3, #1
        if (x < m_nActualLanes) {
     d52:	4544      	cmp	r4, r8
      while((next_mark - ARM_DWT_CYCCNT) > m_offsets[2]);
      *FastPin<FIRST_PIN>::cport() = out;

      // Read and store up to two bytes
      if (x < m_nActualLanes) {
        b.bytes[m_bitOffsets[x]] = pixels.template loadAndScale<PX>(pixels,x,d,scale);
     d54:	f805 1c40 	strb.w	r1, [r5, #-64]
        x++;
        if (x < m_nActualLanes) {
     d58:	dd25      	ble.n	da6 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x922>
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }
     d5a:	69f9      	ldr	r1, [r7, #28]
          b.bytes[m_bitOffsets[x]] = pixels.template loadAndScale<PX>(pixels,x,d,scale);
     d5c:	44b0      	add	r8, r6
     d5e:	4471      	add	r1, lr
     d60:	f898 4018 	ldrb.w	r4, [r8, #24]
     d64:	7849      	ldrb	r1, [r1, #1]

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & , uint8_t b, uint8_t d) { return b ? qadd8(b,d) : 0; }
     d66:	b139      	cbz	r1, d78 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x8f4>
/// @param j - second byte to add
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
     d68:	4449      	add	r1, r9
    if( t > 255) t = 255;
     d6a:	29ff      	cmp	r1, #255	; 0xff
     d6c:	bfa8      	it	ge
     d6e:	21ff      	movge	r1, #255	; 0xff
     d70:	fb0c f101 	mul.w	r1, ip, r1
     d74:	f3c1 2107 	ubfx	r1, r1, #8, #8
     d78:	ad16      	add	r5, sp, #88	; 0x58
          x++;
     d7a:	3302      	adds	r3, #2
      // Read and store up to two bytes
      if (x < m_nActualLanes) {
        b.bytes[m_bitOffsets[x]] = pixels.template loadAndScale<PX>(pixels,x,d,scale);
        x++;
        if (x < m_nActualLanes) {
          b.bytes[m_bitOffsets[x]] = pixels.template loadAndScale<PX>(pixels,x,d,scale);
     d7c:	442c      	add	r4, r5
     d7e:	f804 1c40 	strb.w	r1, [r4, #-64]
     d82:	3a01      	subs	r2, #1

    register uint8_t d = pixels.template getd<PX>(pixels);
    register uint8_t scale = pixels.template getscale<PX>(pixels);

    int x = 0;
    for(uint32_t i = 8; i > 0;) {
     d84:	2800      	cmp	r0, #0
     d86:	d193      	bne.n	cb0 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x82c>
     d88:	9602      	str	r6, [sp, #8]

			// Write third byte
			writeBits<8+XTRA0,0>(next_mark, b0, allpixels);

			#if (FASTLED_ALLOW_INTERRUPTS == 1)
			sei();
     d8a:	b662      	cpsie	i
    m_offsets[2] = _FASTLED_NS_TO_DWT(T3);
    uint32_t wait_off = _FASTLED_NS_TO_DWT((WAIT_TIME-INTERRUPT_THRESHOLD));

    uint32_t next_mark = ARM_DWT_CYCCNT + m_offsets[0];

    while(allpixels.has(1)) {
     d8c:	9b01      	ldr	r3, [sp, #4]
     d8e:	689b      	ldr	r3, [r3, #8]
     d90:	2b00      	cmp	r3, #0
     d92:	f73f abe2 	bgt.w	55a <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0xd6>
			#if (FASTLED_ALLOW_INTERRUPTS == 1)
			sei();
			#endif
    }

    sei();
     d96:	b662      	cpsie	i

    return ARM_DWT_CYCCNT - start;
     d98:	4b09      	ldr	r3, [pc, #36]	; (dc0 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x93c>)
     d9a:	6818      	ldr	r0, [r3, #0]
     d9c:	9b05      	ldr	r3, [sp, #20]
     d9e:	1ac0      	subs	r0, r0, r3
  }
     da0:	b017      	add	sp, #92	; 0x5c
     da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

      // Read and store up to two bytes
      if (x < m_nActualLanes) {
        b.bytes[m_bitOffsets[x]] = pixels.template loadAndScale<PX>(pixels,x,d,scale);
        x++;
        if (x < m_nActualLanes) {
     da6:	4643      	mov	r3, r8
     da8:	e7eb      	b.n	d82 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x8fe>
     daa:	4648      	mov	r0, r9
     dac:	e540      	b.n	830 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x3ac>
     dae:	464b      	mov	r3, r9
     db0:	e689      	b.n	ac6 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)+0x642>
      allpixels.stepDithering();
      #if (FASTLED_ALLOW_INTERRUPTS == 1)
			cli();
			// if interrupts took longer than 45µs, punt on the current frame
			if(ARM_DWT_CYCCNT > next_mark) {
				if((ARM_DWT_CYCCNT-next_mark) > wait_off) { sei(); return ARM_DWT_CYCCNT - start; }
     db2:	b662      	cpsie	i
     db4:	6810      	ldr	r0, [r2, #0]
     db6:	9b05      	ldr	r3, [sp, #20]
     db8:	1ac0      	subs	r0, r0, r3
    }

    sei();

    return ARM_DWT_CYCCNT - start;
  }
     dba:	b017      	add	sp, #92	; 0x5c
     dbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     dc0:	e0001004 	.word	0xe0001004

00000dc4 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 1ul>&)>:
    m_nOutBlocks = (m_nHighBit + 8)/8;

  }


  virtual void showPixels(PixelController<RGB_ORDER, LANES, __FL_T4_MASK> & pixels) {
     dc4:	b538      	push	{r3, r4, r5, lr}
     dc6:	4604      	mov	r4, r0
     dc8:	460d      	mov	r5, r1

	void wait() {
		uint16_t diff;
		do {
			diff = (micros() & 0xFFFF) - mLastMicros;
     dca:	f000 fdb5 	bl	1938 <micros>
public:
	CMinWait() { mLastMicros = 0; }

	void wait() {
		uint16_t diff;
		do {
     dce:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
     dd2:	1ac0      	subs	r0, r0, r3
     dd4:	b280      	uxth	r0, r0
     dd6:	2831      	cmp	r0, #49	; 0x31
     dd8:	d9f7      	bls.n	dca <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 1ul>&)+0x6>
		uint32_t clocks = showRGBInternal(pixels);
		// Adjust the timer
		long microsTaken = CLKS_TO_MICROS(clocks);
		MS_COUNTER += (1 + (microsTaken / 1000));
		#else
      showRGBInternal(pixels);
     dda:	4629      	mov	r1, r5
     ddc:	4620      	mov	r0, r4
     dde:	f7ff fb51 	bl	484 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)>
			diff = (micros() & 0xFFFF) - mLastMicros;
		} while(diff < WAIT);
	}

	void mark() { mLastMicros = micros() & 0xFFFF; }
     de2:	f000 fda9 	bl	1938 <micros>
     de6:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40
     dea:	bd38      	pop	{r3, r4, r5, pc}

00000dec <CPixelLEDController<(EOrder)66, 1, 1ul>::show(CRGB const*, int, CRGB)>:

/// write the passed in rgb data out to the leds managed by this controller
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
     dec:	b5f0      	push	{r4, r5, r6, r7, lr}
     dee:	4604      	mov	r4, r0
     df0:	b089      	sub	sp, #36	; 0x24

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
     df2:	785d      	ldrb	r5, [r3, #1]
        b = rhs.b;
     df4:	7898      	ldrb	r0, [r3, #2]
            mData += skip;
            mAdvance = (advance) ? 3+skip : 0;
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
     df6:	9101      	str	r1, [sp, #4]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     df8:	7819      	ldrb	r1, [r3, #0]
     dfa:	7ca3      	ldrb	r3, [r4, #18]
     dfc:	9202      	str	r2, [sp, #8]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     dfe:	2b01      	cmp	r3, #1
            mData += skip;
            mAdvance = (advance) ? 3+skip : 0;
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
     e00:	9203      	str	r2, [sp, #12]
     e02:	f88d 1016 	strb.w	r1, [sp, #22]
        g = rhs.g;
     e06:	f88d 5017 	strb.w	r5, [sp, #23]
        b = rhs.b;
     e0a:	f88d 0018 	strb.w	r0, [sp, #24]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     e0e:	d028      	beq.n	e62 <CPixelLEDController<(EOrder)66, 1, 1ul>::show(CRGB const*, int, CRGB)+0x76>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     e10:	2300      	movs	r3, #0
     e12:	f88d 3015 	strb.w	r3, [sp, #21]
     e16:	f88d 3014 	strb.w	r3, [sp, #20]
     e1a:	f88d 3013 	strb.w	r3, [sp, #19]
     e1e:	f88d 3012 	strb.w	r3, [sp, #18]
     e22:	f88d 3011 	strb.w	r3, [sp, #17]
     e26:	f88d 3010 	strb.w	r3, [sp, #16]
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     e2a:	6823      	ldr	r3, [r4, #0]
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
     e2c:	2003      	movs	r0, #3
     e2e:	4a2b      	ldr	r2, [pc, #172]	; (edc <CPixelLEDController<(EOrder)66, 1, 1ul>::show(CRGB const*, int, CRGB)+0xf0>)
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     e30:	2100      	movs	r1, #0
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     e32:	699b      	ldr	r3, [r3, #24]
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
     e34:	f88d 0019 	strb.w	r0, [sp, #25]
     e38:	4293      	cmp	r3, r2
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     e3a:	9107      	str	r1, [sp, #28]
     e3c:	d148      	bne.n	ed0 <CPixelLEDController<(EOrder)66, 1, 1ul>::show(CRGB const*, int, CRGB)+0xe4>
	CMinWait() { mLastMicros = 0; }

	void wait() {
		uint16_t diff;
		do {
			diff = (micros() & 0xFFFF) - mLastMicros;
     e3e:	f000 fd7b 	bl	1938 <micros>
public:
	CMinWait() { mLastMicros = 0; }

	void wait() {
		uint16_t diff;
		do {
     e42:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
     e46:	1ac0      	subs	r0, r0, r3
     e48:	b280      	uxth	r0, r0
     e4a:	2831      	cmp	r0, #49	; 0x31
     e4c:	d9f7      	bls.n	e3e <CPixelLEDController<(EOrder)66, 1, 1ul>::show(CRGB const*, int, CRGB)+0x52>
     e4e:	a901      	add	r1, sp, #4
     e50:	4620      	mov	r0, r4
     e52:	f7ff fb17 	bl	484 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)>
			diff = (micros() & 0xFFFF) - mLastMicros;
		} while(diff < WAIT);
	}

	void mark() { mLastMicros = micros() & 0xFFFF; }
     e56:	f000 fd6f 	bl	1938 <micros>
     e5a:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
  }
     e5e:	b009      	add	sp, #36	; 0x24
     e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     e62:	4a1f      	ldr	r2, [pc, #124]	; (ee0 <CPixelLEDController<(EOrder)66, 1, 1ul>::show(CRGB const*, int, CRGB)+0xf4>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     e64:	7813      	ldrb	r3, [r2, #0]
     e66:	3301      	adds	r3, #1
     e68:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     e6c:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     e70:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     e72:	bf14      	ite	ne
     e74:	2280      	movne	r2, #128	; 0x80
     e76:	2200      	moveq	r2, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     e78:	0798      	lsls	r0, r3, #30
     e7a:	d502      	bpl.n	e82 <CPixelLEDController<(EOrder)66, 1, 1ul>::show(CRGB const*, int, CRGB)+0x96>
     e7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     e80:	b2d2      	uxtb	r2, r2
                if(R & 0x04) { Q |= 0x20; }
     e82:	075b      	lsls	r3, r3, #29
     e84:	f10d 0716 	add.w	r7, sp, #22
     e88:	f10d 0313 	add.w	r3, sp, #19
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     e8c:	f44f 7e80 	mov.w	lr, #256	; 0x100

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
                if(R & 0x04) { Q |= 0x20; }
     e90:	bf48      	it	mi
     e92:	f042 0220 	orrmi.w	r2, r2, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     e96:	3210      	adds	r2, #16
     e98:	b2d2      	uxtb	r2, r2
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     e9a:	b1a9      	cbz	r1, ec8 <CPixelLEDController<(EOrder)66, 1, 1ul>::show(CRGB const*, int, CRGB)+0xdc>
     e9c:	fb9e f1f1 	sdiv	r1, lr, r1
     ea0:	b2c9      	uxtb	r1, r1
     ea2:	1c48      	adds	r0, r1, #1
     ea4:	b2c0      	uxtb	r0, r0
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
     ea6:	fb00 2502 	mla	r5, r0, r2, r2
     eaa:	7018      	strb	r0, [r3, #0]
     eac:	122d      	asrs	r5, r5, #8
     eae:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     eb0:	b105      	cbz	r5, eb4 <CPixelLEDController<(EOrder)66, 1, 1ul>::show(CRGB const*, int, CRGB)+0xc8>
     eb2:	3e01      	subs	r6, #1
     eb4:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     eb8:	b100      	cbz	r0, ebc <CPixelLEDController<(EOrder)66, 1, 1ul>::show(CRGB const*, int, CRGB)+0xd0>
     eba:	7019      	strb	r1, [r3, #0]
     ebc:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     ebe:	42bb      	cmp	r3, r7
     ec0:	d0b3      	beq.n	e2a <CPixelLEDController<(EOrder)66, 1, 1ul>::show(CRGB const*, int, CRGB)+0x3e>
     ec2:	78d9      	ldrb	r1, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     ec4:	2900      	cmp	r1, #0
     ec6:	d1e9      	bne.n	e9c <CPixelLEDController<(EOrder)66, 1, 1ul>::show(CRGB const*, int, CRGB)+0xb0>
     ec8:	7019      	strb	r1, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     eca:	f803 1c03 	strb.w	r1, [r3, #-3]
     ece:	e7f5      	b.n	ebc <CPixelLEDController<(EOrder)66, 1, 1ul>::show(CRGB const*, int, CRGB)+0xd0>
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     ed0:	4620      	mov	r0, r4
     ed2:	a901      	add	r1, sp, #4
     ed4:	4798      	blx	r3
  }
     ed6:	b009      	add	sp, #36	; 0x24
     ed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     eda:	bf00      	nop
     edc:	00000dc5 	.word	0x00000dc5
     ee0:	200122ac 	.word	0x200122ac

00000ee4 <CPixelLEDController<(EOrder)66, 1, 1ul>::showColor(CRGB const&, int, CRGB)>:

  /// set all the leds on the controller to a given color
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
     ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
     ee6:	4604      	mov	r4, r0
     ee8:	b089      	sub	sp, #36	; 0x24

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
     eea:	785d      	ldrb	r5, [r3, #1]
        b = rhs.b;
     eec:	7898      	ldrb	r0, [r3, #2]
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     eee:	9101      	str	r1, [sp, #4]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     ef0:	7819      	ldrb	r1, [r3, #0]
     ef2:	7ca3      	ldrb	r3, [r4, #18]
     ef4:	9202      	str	r2, [sp, #8]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     ef6:	2b01      	cmp	r3, #1
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     ef8:	9203      	str	r2, [sp, #12]
     efa:	f88d 1016 	strb.w	r1, [sp, #22]
        g = rhs.g;
     efe:	f88d 5017 	strb.w	r5, [sp, #23]
        b = rhs.b;
     f02:	f88d 0018 	strb.w	r0, [sp, #24]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     f06:	d027      	beq.n	f58 <CPixelLEDController<(EOrder)66, 1, 1ul>::showColor(CRGB const&, int, CRGB)+0x74>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     f08:	2300      	movs	r3, #0
     f0a:	f88d 3015 	strb.w	r3, [sp, #21]
     f0e:	f88d 3014 	strb.w	r3, [sp, #20]
     f12:	f88d 3013 	strb.w	r3, [sp, #19]
     f16:	f88d 3012 	strb.w	r3, [sp, #18]
     f1a:	f88d 3011 	strb.w	r3, [sp, #17]
     f1e:	f88d 3010 	strb.w	r3, [sp, #16]
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     f22:	6822      	ldr	r2, [r4, #0]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     f24:	2300      	movs	r3, #0
     f26:	492a      	ldr	r1, [pc, #168]	; (fd0 <CPixelLEDController<(EOrder)66, 1, 1ul>::showColor(CRGB const&, int, CRGB)+0xec>)
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     f28:	6992      	ldr	r2, [r2, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     f2a:	f88d 3019 	strb.w	r3, [sp, #25]
     f2e:	428a      	cmp	r2, r1
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     f30:	9307      	str	r3, [sp, #28]
     f32:	d148      	bne.n	fc6 <CPixelLEDController<(EOrder)66, 1, 1ul>::showColor(CRGB const&, int, CRGB)+0xe2>
	CMinWait() { mLastMicros = 0; }

	void wait() {
		uint16_t diff;
		do {
			diff = (micros() & 0xFFFF) - mLastMicros;
     f34:	f000 fd00 	bl	1938 <micros>
public:
	CMinWait() { mLastMicros = 0; }

	void wait() {
		uint16_t diff;
		do {
     f38:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
     f3c:	1ac0      	subs	r0, r0, r3
     f3e:	b280      	uxth	r0, r0
     f40:	2831      	cmp	r0, #49	; 0x31
     f42:	d9f7      	bls.n	f34 <CPixelLEDController<(EOrder)66, 1, 1ul>::showColor(CRGB const&, int, CRGB)+0x50>
     f44:	a901      	add	r1, sp, #4
     f46:	4620      	mov	r0, r4
     f48:	f7ff fa9c 	bl	484 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)>
			diff = (micros() & 0xFFFF) - mLastMicros;
		} while(diff < WAIT);
	}

	void mark() { mLastMicros = micros() & 0xFFFF; }
     f4c:	f000 fcf4 	bl	1938 <micros>
     f50:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
  }
     f54:	b009      	add	sp, #36	; 0x24
     f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     f58:	4a1e      	ldr	r2, [pc, #120]	; (fd4 <CPixelLEDController<(EOrder)66, 1, 1ul>::showColor(CRGB const&, int, CRGB)+0xf0>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     f5a:	7813      	ldrb	r3, [r2, #0]
     f5c:	3301      	adds	r3, #1
     f5e:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     f62:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     f66:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     f68:	bf14      	ite	ne
     f6a:	2280      	movne	r2, #128	; 0x80
     f6c:	2200      	moveq	r2, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     f6e:	0798      	lsls	r0, r3, #30
     f70:	d502      	bpl.n	f78 <CPixelLEDController<(EOrder)66, 1, 1ul>::showColor(CRGB const&, int, CRGB)+0x94>
     f72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     f76:	b2d2      	uxtb	r2, r2
                if(R & 0x04) { Q |= 0x20; }
     f78:	075b      	lsls	r3, r3, #29
     f7a:	f10d 0716 	add.w	r7, sp, #22
     f7e:	f10d 0313 	add.w	r3, sp, #19
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     f82:	f44f 7e80 	mov.w	lr, #256	; 0x100

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
                if(R & 0x04) { Q |= 0x20; }
     f86:	bf48      	it	mi
     f88:	f042 0220 	orrmi.w	r2, r2, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     f8c:	3210      	adds	r2, #16
     f8e:	b2d2      	uxtb	r2, r2
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     f90:	b1a9      	cbz	r1, fbe <CPixelLEDController<(EOrder)66, 1, 1ul>::showColor(CRGB const&, int, CRGB)+0xda>
     f92:	fb9e f1f1 	sdiv	r1, lr, r1
     f96:	b2c9      	uxtb	r1, r1
     f98:	1c48      	adds	r0, r1, #1
     f9a:	b2c0      	uxtb	r0, r0
     f9c:	fb00 2502 	mla	r5, r0, r2, r2
     fa0:	7018      	strb	r0, [r3, #0]
     fa2:	122d      	asrs	r5, r5, #8
     fa4:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     fa6:	b105      	cbz	r5, faa <CPixelLEDController<(EOrder)66, 1, 1ul>::showColor(CRGB const&, int, CRGB)+0xc6>
     fa8:	3e01      	subs	r6, #1
     faa:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     fae:	b100      	cbz	r0, fb2 <CPixelLEDController<(EOrder)66, 1, 1ul>::showColor(CRGB const&, int, CRGB)+0xce>
     fb0:	7019      	strb	r1, [r3, #0]
     fb2:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     fb4:	42bb      	cmp	r3, r7
     fb6:	d0b4      	beq.n	f22 <CPixelLEDController<(EOrder)66, 1, 1ul>::showColor(CRGB const&, int, CRGB)+0x3e>
     fb8:	78d9      	ldrb	r1, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     fba:	2900      	cmp	r1, #0
     fbc:	d1e9      	bne.n	f92 <CPixelLEDController<(EOrder)66, 1, 1ul>::showColor(CRGB const&, int, CRGB)+0xae>
     fbe:	7019      	strb	r1, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     fc0:	f803 1c03 	strb.w	r1, [r3, #-3]
     fc4:	e7f5      	b.n	fb2 <CPixelLEDController<(EOrder)66, 1, 1ul>::showColor(CRGB const&, int, CRGB)+0xce>
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     fc6:	4620      	mov	r0, r4
     fc8:	a901      	add	r1, sp, #4
     fca:	4790      	blx	r2
  }
     fcc:	b009      	add	sp, #36	; 0x24
     fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
     fd0:	00000dc5 	.word	0x00000dc5
     fd4:	200122ac 	.word	0x200122ac

00000fd8 <CLEDController::clearLeds(int)>:

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     fda:	2300      	movs	r3, #0
     fdc:	b08b      	sub	sp, #44	; 0x2c
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
     fde:	6805      	ldr	r5, [r0, #0]
     fe0:	4a45      	ldr	r2, [pc, #276]	; (10f8 <CLEDController::clearLeds(int)+0x120>)
     fe2:	f88d 3004 	strb.w	r3, [sp, #4]
     fe6:	f88d 3005 	strb.w	r3, [sp, #5]
     fea:	f88d 3006 	strb.w	r3, [sp, #6]
     fee:	682e      	ldr	r6, [r5, #0]
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
     ff0:	f88d 3008 	strb.w	r3, [sp, #8]
     ff4:	4296      	cmp	r6, r2
     ff6:	f88d 3009 	strb.w	r3, [sp, #9]
     ffa:	f88d 300a 	strb.w	r3, [sp, #10]
     ffe:	d170      	bne.n	10e2 <CLEDController::clearLeds(int)+0x10a>
    1000:	4604      	mov	r4, r0
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
    1002:	a801      	add	r0, sp, #4
    1004:	9104      	str	r1, [sp, #16]
    1006:	7ca2      	ldrb	r2, [r4, #18]
    1008:	9105      	str	r1, [sp, #20]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
    100a:	2a01      	cmp	r2, #1
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    100c:	f88d 301e 	strb.w	r3, [sp, #30]
        g = rhs.g;
    1010:	f88d 301f 	strb.w	r3, [sp, #31]
        b = rhs.b;
    1014:	f88d 3020 	strb.w	r3, [sp, #32]
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
    1018:	9003      	str	r0, [sp, #12]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
    101a:	d025      	beq.n	1068 <CLEDController::clearLeds(int)+0x90>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
    101c:	f88d 301d 	strb.w	r3, [sp, #29]
    1020:	f88d 301c 	strb.w	r3, [sp, #28]
    1024:	f88d 301b 	strb.w	r3, [sp, #27]
    1028:	f88d 301a 	strb.w	r3, [sp, #26]
    102c:	f88d 3019 	strb.w	r3, [sp, #25]
    1030:	f88d 3018 	strb.w	r3, [sp, #24]
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
    1034:	69aa      	ldr	r2, [r5, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
    1036:	2300      	movs	r3, #0
    1038:	4930      	ldr	r1, [pc, #192]	; (10fc <CLEDController::clearLeds(int)+0x124>)
    103a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    103e:	428a      	cmp	r2, r1
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
    1040:	9309      	str	r3, [sp, #36]	; 0x24
    1042:	d154      	bne.n	10ee <CLEDController::clearLeds(int)+0x116>
	CMinWait() { mLastMicros = 0; }

	void wait() {
		uint16_t diff;
		do {
			diff = (micros() & 0xFFFF) - mLastMicros;
    1044:	f000 fc78 	bl	1938 <micros>
public:
	CMinWait() { mLastMicros = 0; }

	void wait() {
		uint16_t diff;
		do {
    1048:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
    104c:	1ac0      	subs	r0, r0, r3
    104e:	b280      	uxth	r0, r0
    1050:	2831      	cmp	r0, #49	; 0x31
    1052:	d9f7      	bls.n	1044 <CLEDController::clearLeds(int)+0x6c>
    1054:	a903      	add	r1, sp, #12
    1056:	4620      	mov	r0, r4
    1058:	f7ff fa14 	bl	484 <FlexibleInlineBlockClocklessController<(unsigned char)1, 14, 320, 320, 640, (EOrder)66, 0, false, 50>::showRGBInternal(PixelController<(EOrder)66, 1, 1ul>&)>
			diff = (micros() & 0xFFFF) - mLastMicros;
		} while(diff < WAIT);
	}

	void mark() { mLastMicros = micros() & 0xFFFF; }
    105c:	f000 fc6c 	bl	1938 <micros>
    1060:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
    1064:	b00b      	add	sp, #44	; 0x2c
    1066:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
    1068:	4a25      	ldr	r2, [pc, #148]	; (1100 <CLEDController::clearLeds(int)+0x128>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
    106a:	7813      	ldrb	r3, [r2, #0]
    106c:	3301      	adds	r3, #1
    106e:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
    1072:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
    1076:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
    1078:	bf14      	ite	ne
    107a:	2180      	movne	r1, #128	; 0x80
    107c:	2100      	moveq	r1, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
    107e:	079a      	lsls	r2, r3, #30
    1080:	d502      	bpl.n	1088 <CLEDController::clearLeds(int)+0xb0>
    1082:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    1086:	b2c9      	uxtb	r1, r1
                if(R & 0x04) { Q |= 0x20; }
    1088:	075b      	lsls	r3, r3, #29
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
    108a:	f04f 0200 	mov.w	r2, #0
    108e:	f10d 031b 	add.w	r3, sp, #27
    1092:	f10d 071e 	add.w	r7, sp, #30

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
                if(R & 0x04) { Q |= 0x20; }
    1096:	bf48      	it	mi
    1098:	f041 0120 	orrmi.w	r1, r1, #32
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
    109c:	f44f 7e80 	mov.w	lr, #256	; 0x100
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
    10a0:	3110      	adds	r1, #16
    10a2:	b2c9      	uxtb	r1, r1
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
    10a4:	b1aa      	cbz	r2, 10d2 <CLEDController::clearLeds(int)+0xfa>
    10a6:	fb9e f2f2 	sdiv	r2, lr, r2
    10aa:	b2d2      	uxtb	r2, r2
    10ac:	1c50      	adds	r0, r2, #1
    10ae:	b2c0      	uxtb	r0, r0
    10b0:	fb00 1501 	mla	r5, r0, r1, r1
    10b4:	7018      	strb	r0, [r3, #0]
    10b6:	122d      	asrs	r5, r5, #8
    10b8:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
    10ba:	b105      	cbz	r5, 10be <CLEDController::clearLeds(int)+0xe6>
    10bc:	3e01      	subs	r6, #1
    10be:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
    10c2:	b100      	cbz	r0, 10c6 <CLEDController::clearLeds(int)+0xee>
    10c4:	701a      	strb	r2, [r3, #0]
    10c6:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
    10c8:	429f      	cmp	r7, r3
    10ca:	d008      	beq.n	10de <CLEDController::clearLeds(int)+0x106>
    10cc:	78da      	ldrb	r2, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
    10ce:	2a00      	cmp	r2, #0
    10d0:	d1e9      	bne.n	10a6 <CLEDController::clearLeds(int)+0xce>
    10d2:	701a      	strb	r2, [r3, #0]
    10d4:	3301      	adds	r3, #1
                    d[i] = scale8(Q, e[i]);
    10d6:	f803 2c04 	strb.w	r2, [r3, #-4]
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
    10da:	429f      	cmp	r7, r3
    10dc:	d1f6      	bne.n	10cc <CLEDController::clearLeds(int)+0xf4>
    10de:	6825      	ldr	r5, [r4, #0]
    10e0:	e7a8      	b.n	1034 <CLEDController::clearLeds(int)+0x5c>
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
    10e2:	460a      	mov	r2, r1
    10e4:	ab02      	add	r3, sp, #8
    10e6:	a901      	add	r1, sp, #4
    10e8:	47b0      	blx	r6

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
    10ea:	b00b      	add	sp, #44	; 0x2c
    10ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
    10ee:	4620      	mov	r0, r4
    10f0:	a903      	add	r1, sp, #12
    10f2:	4790      	blx	r2

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
    10f4:	b00b      	add	sp, #44	; 0x2c
    10f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    10f8:	00000ee5 	.word	0x00000ee5
    10fc:	00000dc5 	.word	0x00000dc5
    1100:	200122ac 	.word	0x200122ac

00001104 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>:
    1104:	4804      	ldr	r0, [pc, #16]	; (1118 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x14>)
    1106:	6802      	ldr	r2, [r0, #0]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    1108:	4411      	add	r1, r2
    110a:	e001      	b.n	1110 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0xc>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    110c:	4299      	cmp	r1, r3
    110e:	d302      	bcc.n	1116 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x12>
    1110:	6803      	ldr	r3, [r0, #0]
    1112:	429a      	cmp	r2, r3
    1114:	d9fa      	bls.n	110c <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x8>
    1116:	4770      	bx	lr
    1118:	20043240 	.word	0x20043240

0000111c <VisualMicroDebug::outPacketStart(bool)>:
	return outPacketStart(false);
}


bool VisualMicroDebug::outPacketStart(bool noWait)
{
    111c:	b410      	push	{r4}
    111e:	4a0c      	ldr	r2, [pc, #48]	; (1150 <VisualMicroDebug::outPacketStart(bool)+0x34>)
    1120:	4604      	mov	r4, r0
	yield();
#endif


#if defined(VM_DEBUG_BANDWIDTH_THROTTLE_MS) //&& (VM_DBT != VM_DBT_NET_UDP)
	if (!noWait)
    1122:	b971      	cbnz	r1, 1142 <VisualMicroDebug::outPacketStart(bool)+0x26>
	{

		unsigned long ms_wait;
		ms_wait = (DBG_Millis() - lastPacketMS);
    1124:	6841      	ldr	r1, [r0, #4]
    1126:	6813      	ldr	r3, [r2, #0]
    1128:	1a59      	subs	r1, r3, r1
		if (ms_wait < VM_DEBUG_BANDWIDTH_THROTTLE_MS)
    112a:	2931      	cmp	r1, #49	; 0x31
    112c:	d809      	bhi.n	1142 <VisualMicroDebug::outPacketStart(bool)+0x26>
    112e:	6810      	ldr	r0, [r2, #0]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    1130:	f100 0332 	add.w	r3, r0, #50	; 0x32
    1134:	1a59      	subs	r1, r3, r1
    1136:	e001      	b.n	113c <VisualMicroDebug::outPacketStart(bool)+0x20>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    1138:	4299      	cmp	r1, r3
    113a:	d302      	bcc.n	1142 <VisualMicroDebug::outPacketStart(bool)+0x26>
    113c:	6813      	ldr	r3, [r2, #0]
    113e:	4298      	cmp	r0, r3
    1140:	d9fa      	bls.n	1138 <VisualMicroDebug::outPacketStart(bool)+0x1c>
    1142:	6813      	ldr	r3, [r2, #0]
	transport->beginPacket();
#endif
#endif

	return true;
}
    1144:	2001      	movs	r0, #1
			//DBG_YieldAndWait(3)
		//}
	}
	//XXX: this should really be after packet end!
	//1501 for cosa - lastPacketMS=millis();
	lastPacketMS = DBG_Millis();
    1146:	6063      	str	r3, [r4, #4]
	transport->beginPacket();
#endif
#endif

	return true;
}
    1148:	f85d 4b04 	ldr.w	r4, [sp], #4
    114c:	4770      	bx	lr
    114e:	bf00      	nop
    1150:	20043240 	.word	0x20043240

00001154 <VisualMicroDebug::outPacketEnd()>:
    1154:	4770      	bx	lr
    1156:	bf00      	nop

00001158 <VisualMicroDebug::begin(unsigned long)>:
{

	//todo: detect usb type ports that need a delay
	//don't wait for the port unless we add a timeout and disable debug. because we might be discntected
	//todo: see if esp can handle this delay wuith wifi also connecting!
	delay(1000);
    1158:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    115c:	f000 bb86 	b.w	186c <delay>

00001160 <VisualMicroDebug::init(unsigned long)>:
	vmdebug.init();
	vmdebug.stats();
#endif


	baudRate = 0L; //gets a value later if required, only used by cosa for a re-begin!
    1160:	2300      	movs	r3, #0
    1162:	6443      	str	r3, [r0, #68]	; 0x44

	lastPacketMS = 0L;
    1164:	6043      	str	r3, [r0, #4]

	//note: a delay at start causes esp8266 wifi to fail to connect!!
	//		the delay can also be switched off via board/platform.txt property=
	if (delayMs > 0)
    1166:	b141      	cbz	r1, 117a <VisualMicroDebug::init(unsigned long)+0x1a>
    1168:	4804      	ldr	r0, [pc, #16]	; (117c <VisualMicroDebug::init(unsigned long)+0x1c>)
    116a:	6802      	ldr	r2, [r0, #0]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    116c:	4411      	add	r1, r2
    116e:	e001      	b.n	1174 <VisualMicroDebug::init(unsigned long)+0x14>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    1170:	4299      	cmp	r1, r3
    1172:	d302      	bcc.n	117a <VisualMicroDebug::init(unsigned long)+0x1a>
    1174:	6803      	ldr	r3, [r0, #0]
    1176:	429a      	cmp	r2, r3
    1178:	d9fa      	bls.n	1170 <VisualMicroDebug::init(unsigned long)+0x10>
    117a:	4770      	bx	lr
    117c:	20043240 	.word	0x20043240

00001180 <VisualMicroDebug::sendContinuedACK(unsigned char)>:
}
#endif


void VisualMicroDebug::sendContinuedACK(uint8_t breakPointId)
{
    1180:	b538      	push	{r3, r4, r5, lr}
    1182:	4c0f      	ldr	r4, [pc, #60]	; (11c0 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x40>)
    1184:	460d      	mov	r5, r1
    1186:	2106      	movs	r1, #6
    1188:	6823      	ldr	r3, [r4, #0]
			//DBG_YieldAndWait(3)
		//}
	}
	//XXX: this should really be after packet end!
	//1501 for cosa - lastPacketMS=millis();
	lastPacketMS = DBG_Millis();
    118a:	6043      	str	r3, [r0, #4]
    118c:	480d      	ldr	r0, [pc, #52]	; (11c4 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x44>)
    118e:	f001 fc77 	bl	2a80 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1192:	220a      	movs	r2, #10
    1194:	2300      	movs	r3, #0
    1196:	4629      	mov	r1, r5
    1198:	480b      	ldr	r0, [pc, #44]	; (11c8 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x48>)
    119a:	f001 fd3f 	bl	2c1c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    119e:	2106      	movs	r1, #6
    11a0:	480a      	ldr	r0, [pc, #40]	; (11cc <VisualMicroDebug::sendContinuedACK(unsigned char)+0x4c>)
    11a2:	f001 fc6d 	bl	2a80 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    11a6:	4808      	ldr	r0, [pc, #32]	; (11c8 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x48>)
    11a8:	f001 fd28 	bl	2bfc <Print::println()>
    11ac:	6822      	ldr	r2, [r4, #0]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    11ae:	f102 0132 	add.w	r1, r2, #50	; 0x32
    11b2:	e001      	b.n	11b8 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x38>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    11b4:	4299      	cmp	r1, r3
    11b6:	d302      	bcc.n	11be <VisualMicroDebug::sendContinuedACK(unsigned char)+0x3e>
    11b8:	6823      	ldr	r3, [r4, #0]
    11ba:	429a      	cmp	r2, r3
    11bc:	d9fa      	bls.n	11b4 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x34>
    11be:	bd38      	pop	{r3, r4, r5, pc}
    11c0:	20043240 	.word	0x20043240
    11c4:	20000058 	.word	0x20000058
    11c8:	2001227c 	.word	0x2001227c
    11cc:	20000060 	.word	0x20000060

000011d0 <VisualMicroDebug::breakWait(unsigned char)>:
#if defined(VM_DBT) //&& ( VM_DBT == VM_DBT_HARDWARESERIAL || VM_DBT == VM_DBT_FASTSERIAL)
//TODO: implement sturcture serial com!
//we never get called if break was not set during compliation
//return _vm_cmd so that we can setVariable if required (caller needs to know result)
uint8_t VisualMicroDebug::breakWait(uint8_t breakPointId)
{
    11d0:	b538      	push	{r3, r4, r5, lr}
	//console write not working yet
#if defined(VM_DBT) && (VM_DBT == VM_DBT_NET_CONSOLE)
	return 'c';
#endif

	if (!alwaysBreak)
    11d2:	7e03      	ldrb	r3, [r0, #24]
    11d4:	b90b      	cbnz	r3, 11da <VisualMicroDebug::breakWait(unsigned char)+0xa>
		case 'h':
			//Serial.println("Remote debug session started");
#if defined(VM_DBT) && (VM_DBT == VM_DBT_NET_UDP)
			alwaysBreak = true;
#endif
			return 'c';
    11d6:	2063      	movs	r0, #99	; 0x63
	//sendContinuedACK(breakPointId);
	//return 'c'; //if we get here we are continuing!

	//	return '?'; //software serial rubbish detected?
	return 'e';
}
    11d8:	bd38      	pop	{r3, r4, r5, pc}
    11da:	460d      	mov	r5, r1
    11dc:	4604      	mov	r4, r0
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    11de:	f001 fbe9 	bl	29b4 <usb_serial_available>
#endif

	uint8_t b;

	//break/pause until we get a command
	if (available() == 0)
    11e2:	f010 0fff 	tst.w	r0, #255	; 0xff
    11e6:	d101      	bne.n	11ec <VisualMicroDebug::breakWait(unsigned char)+0x1c>
		if (!UDPConnectionStarted) {
			return 'c';
		}
#endif

		return 'e';
    11e8:	2065      	movs	r0, #101	; 0x65
    11ea:	bd38      	pop	{r3, r4, r5, pc}
    11ec:	f001 fbe2 	bl	29b4 <usb_serial_available>
	//doh!  better if we have any key to continue so users data doesn't get lost so much. 
	//NOTE. pause/breakpoints are best used with dedicated port!
	//while(true)
	//{

	while (available() > 0)
    11f0:	f010 0fff 	tst.w	r0, #255	; 0xff
    11f4:	d0f8      	beq.n	11e8 <VisualMicroDebug::breakWait(unsigned char)+0x18>
        virtual int read() { return usb_serial_getchar(); }
    11f6:	f001 fc1d 	bl	2a34 <usb_serial_getchar>
		//		while(VM_DEBUGGER_SOFT_TRANSPORT.available()>0)
		//		{
		//			b = VM_DEBUGGER_SOFT_TRANSPORT.read();
		//#endif
		//debug break commands
		switch (b)
    11fa:	b2c0      	uxtb	r0, r0
    11fc:	f1a0 0358 	sub.w	r3, r0, #88	; 0x58
    1200:	2b1e      	cmp	r3, #30
    1202:	d8f3      	bhi.n	11ec <VisualMicroDebug::breakWait(unsigned char)+0x1c>
    1204:	a201      	add	r2, pc, #4	; (adr r2, 120c <VisualMicroDebug::breakWait(unsigned char)+0x3c>)
    1206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    120a:	bf00      	nop
    120c:	00001295 	.word	0x00001295
    1210:	000011ed 	.word	0x000011ed
    1214:	000011ed 	.word	0x000011ed
    1218:	000011ed 	.word	0x000011ed
    121c:	000011ed 	.word	0x000011ed
    1220:	000011ed 	.word	0x000011ed
    1224:	000011ed 	.word	0x000011ed
    1228:	000011ed 	.word	0x000011ed
    122c:	000011ed 	.word	0x000011ed
    1230:	000011ed 	.word	0x000011ed
    1234:	000011ed 	.word	0x000011ed
    1238:	00001289 	.word	0x00001289
    123c:	000011ed 	.word	0x000011ed
    1240:	000011ed 	.word	0x000011ed
    1244:	000011ed 	.word	0x000011ed
    1248:	000011ed 	.word	0x000011ed
    124c:	000011d7 	.word	0x000011d7
    1250:	000011ed 	.word	0x000011ed
    1254:	000011ed 	.word	0x000011ed
    1258:	000011ed 	.word	0x000011ed
    125c:	000011ed 	.word	0x000011ed
    1260:	000011ed 	.word	0x000011ed
    1264:	000011ed 	.word	0x000011ed
    1268:	000011ed 	.word	0x000011ed
    126c:	000011ed 	.word	0x000011ed
    1270:	000011d7 	.word	0x000011d7
    1274:	000011ed 	.word	0x000011ed
    1278:	000011ed 	.word	0x000011ed
    127c:	000011ed 	.word	0x000011ed
    1280:	000011ed 	.word	0x000011ed
    1284:	000011d9 	.word	0x000011d9
		{

		case 'c':
			sendContinuedACK(breakPointId);
    1288:	4620      	mov	r0, r4
    128a:	4629      	mov	r1, r5
    128c:	f7ff ff78 	bl	1180 <VisualMicroDebug::sendContinuedACK(unsigned char)>
			return 'c'; //if we get here we are continuing!
    1290:	2063      	movs	r0, #99	; 0x63
    1292:	bd38      	pop	{r3, r4, r5, pc}
					  //	sendContinuedACK(breakPointId);
					  //	return;

					  //switch off break until re-start. for dev/testing
		case 'X':
			alwaysBreak = false;
    1294:	2300      	movs	r3, #0
			return 'c';
    1296:	2063      	movs	r0, #99	; 0x63
					  //	sendContinuedACK(breakPointId);
					  //	return;

					  //switch off break until re-start. for dev/testing
		case 'X':
			alwaysBreak = false;
    1298:	7623      	strb	r3, [r4, #24]
    129a:	bd38      	pop	{r3, r4, r5, pc}

0000129c <VisualMicroDebug::start(bool, bool)>:
}
#endif


void VisualMicroDebug::start(bool waitForKeyToStart, bool _alwaysBreak)
{
    129c:	b570      	push	{r4, r5, r6, lr}
    129e:	4605      	mov	r5, r0
    12a0:	4616      	mov	r6, r2
#if defined (VM_DEBUG_BREAKPAUSE)
	if (waitForKeyToStart)
    12a2:	b1a9      	cbz	r1, 12d0 <VisualMicroDebug::start(bool, bool)+0x34>
	{
		alwaysBreak = true;
    12a4:	2301      	movs	r3, #1
    12a6:	4c0b      	ldr	r4, [pc, #44]	; (12d4 <VisualMicroDebug::start(bool, bool)+0x38>)
    12a8:	7603      	strb	r3, [r0, #24]

		//server should know we are waiting sendMessage("Press any key to continue");
		while (breakWait(0) != 'c') {
    12aa:	2100      	movs	r1, #0
    12ac:	4628      	mov	r0, r5
    12ae:	f7ff ff8f 	bl	11d0 <VisualMicroDebug::breakWait(unsigned char)>
    12b2:	2863      	cmp	r0, #99	; 0x63
    12b4:	d00c      	beq.n	12d0 <VisualMicroDebug::start(bool, bool)+0x34>
    12b6:	6822      	ldr	r2, [r4, #0]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    12b8:	1c51      	adds	r1, r2, #1
    12ba:	6823      	ldr	r3, [r4, #0]

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    12bc:	429a      	cmp	r2, r3
    12be:	d8f4      	bhi.n	12aa <VisualMicroDebug::start(bool, bool)+0xe>
    12c0:	4299      	cmp	r1, r3
    12c2:	d2fa      	bcs.n	12ba <VisualMicroDebug::start(bool, bool)+0x1e>
	if (waitForKeyToStart)
	{
		alwaysBreak = true;

		//server should know we are waiting sendMessage("Press any key to continue");
		while (breakWait(0) != 'c') {
    12c4:	2100      	movs	r1, #0
    12c6:	4628      	mov	r0, r5
    12c8:	f7ff ff82 	bl	11d0 <VisualMicroDebug::breakWait(unsigned char)>
    12cc:	2863      	cmp	r0, #99	; 0x63
    12ce:	d1f2      	bne.n	12b6 <VisualMicroDebug::start(bool, bool)+0x1a>
			DBG_YieldAndWait(1);
		}
		//breakWait(0);
	}
	alwaysBreak = _alwaysBreak;
    12d0:	762e      	strb	r6, [r5, #24]
    12d2:	bd70      	pop	{r4, r5, r6, pc}
    12d4:	20043240 	.word	0x20043240

000012d8 <_GLOBAL__sub_I__ZN16VisualMicroDebug16DBG_YieldAndWaitEm>:
	//wait if we have to
	//try to prevent new users from overloading bandwidth and filling windows buffer
	//can be overriden via preferences
	//defaults to 50ms; needs to allow time for windows to recover if it pauses, so we need to be slower than the extensions and debugger can process + a bit

	BreakStartMillis = 0L;
    12d8:	4b03      	ldr	r3, [pc, #12]	; (12e8 <_GLOBAL__sub_I__ZN16VisualMicroDebug16DBG_YieldAndWaitEm+0x10>)
    12da:	2200      	movs	r2, #0
    12dc:	609a      	str	r2, [r3, #8]
	BreakPrevMillis = 0L;
    12de:	60da      	str	r2, [r3, #12]
	InBreakMsgRepeatMS = 0L;
    12e0:	611a      	str	r2, [r3, #16]
	InBreakMsgSent = 0L;
    12e2:	615a      	str	r2, [r3, #20]
    12e4:	4770      	bx	lr
    12e6:	bf00      	nop
    12e8:	200431c8 	.word	0x200431c8

000012ec <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>:
	m_nPowerData = 0xFFFFFFFF;
}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
    12ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
    12ee:	1e1e      	subs	r6, r3, #0
	m_nPowerData = 0xFFFFFFFF;
}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
    12f0:	4604      	mov	r4, r0
    12f2:	460f      	mov	r7, r1
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
    12f4:	dd0f      	ble.n	1316 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x2a>
    12f6:	eb02 0542 	add.w	r5, r2, r2, lsl #1
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
    12fa:	6823      	ldr	r3, [r4, #0]
    12fc:	4620      	mov	r0, r4
    12fe:	689b      	ldr	r3, [r3, #8]
    1300:	4798      	blx	r3
    /// get the next controller in the chain after this one.  will return NULL at the end of the chain
    CLEDController *next() { return m_pNext; }

	/// set the default array of leds to be used by this controller
    CLEDController & setLeds(CRGB *data, int nLeds) {
        m_Data = data;
    1302:	197a      	adds	r2, r7, r5
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
    1304:	6823      	ldr	r3, [r4, #0]
    1306:	6062      	str	r2, [r4, #4]
    1308:	4a0c      	ldr	r2, [pc, #48]	; (133c <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x50>)
    130a:	695b      	ldr	r3, [r3, #20]
        m_nLeds = nLeds;
    130c:	6166      	str	r6, [r4, #20]
    130e:	4293      	cmp	r3, r2
    1310:	d104      	bne.n	131c <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x30>
	return *pLed;
}
    1312:	4620      	mov	r0, r4
    1314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;
    1316:	4616      	mov	r6, r2
    1318:	2500      	movs	r5, #0
    131a:	e7ee      	b.n	12fa <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0xe>

	pLed->init();
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
    131c:	4620      	mov	r0, r4
    131e:	4798      	blx	r3

void CFastLED::setMaxRefreshRate(uint16_t refresh, bool constrain) {
  if(constrain) {
    // if we're constraining, the new value of m_nMinMicros _must_ be higher than previously (because we're only
    // allowed to slow things down if constraining)
    if(refresh > 0) {
    1320:	2800      	cmp	r0, #0
    1322:	d0f6      	beq.n	1312 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x26>
      m_nMinMicros = ( (1000000/refresh) >  m_nMinMicros) ? (1000000/refresh) : m_nMinMicros;
    1324:	4b06      	ldr	r3, [pc, #24]	; (1340 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x54>)
    1326:	4a07      	ldr	r2, [pc, #28]	; (1344 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x58>)
    1328:	fb93 f0f0 	sdiv	r0, r3, r0
    132c:	6853      	ldr	r3, [r2, #4]
    132e:	4298      	cmp	r0, r3
    1330:	bf38      	it	cc
    1332:	4618      	movcc	r0, r3
    1334:	6050      	str	r0, [r2, #4]

	pLed->init();
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
	return *pLed;
}
    1336:	4620      	mov	r0, r4
    1338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    133a:	bf00      	nop
    133c:	0000007d 	.word	0x0000007d
    1340:	000f4240 	.word	0x000f4240
    1344:	20043210 	.word	0x20043210

00001348 <CFastLED::show(unsigned char)>:

void CFastLED::show(uint8_t scale) {
    1348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    134c:	6843      	ldr	r3, [r0, #4]
    134e:	b083      	sub	sp, #12
    1350:	4606      	mov	r6, r0
    1352:	460f      	mov	r7, r1
    1354:	4c35      	ldr	r4, [pc, #212]	; (142c <CFastLED::show(unsigned char)+0xe4>)
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    1356:	2b00      	cmp	r3, #0
    1358:	d15f      	bne.n	141a <CFastLED::show(unsigned char)+0xd2>
	lastshow = micros();
    135a:	f000 faed 	bl	1938 <micros>

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    135e:	68f3      	ldr	r3, [r6, #12]
}

void CFastLED::show(uint8_t scale) {
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
	lastshow = micros();
    1360:	6020      	str	r0, [r4, #0]

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    1362:	b11b      	cbz	r3, 136c <CFastLED::show(unsigned char)+0x24>
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
    1364:	4638      	mov	r0, r7
    1366:	68b1      	ldr	r1, [r6, #8]
    1368:	4798      	blx	r3
    136a:	4607      	mov	r7, r0
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    /// get the first led controller in the chain of controllers
    static CLEDController *head() { return m_pHead; }
    136c:	4b30      	ldr	r3, [pc, #192]	; (1430 <CFastLED::show(unsigned char)+0xe8>)
    136e:	681c      	ldr	r4, [r3, #0]
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    1370:	2c00      	cmp	r4, #0
    1372:	d037      	beq.n	13e4 <CFastLED::show(unsigned char)+0x9c>

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    1374:	2500      	movs	r5, #0
		uint8_t d = pCur->getDither();
		if(m_nFPS < 100) { pCur->setDither(0); }
    1376:	8873      	ldrh	r3, [r6, #2]
    1378:	f894 8012 	ldrb.w	r8, [r4, #18]
    137c:	2b63      	cmp	r3, #99	; 0x63
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    137e:	6823      	ldr	r3, [r4, #0]
    1380:	6861      	ldr	r1, [r4, #4]

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    1382:	bf98      	it	ls
    1384:	74a5      	strbls	r5, [r4, #18]
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
    1386:	f88d 5004 	strb.w	r5, [sp, #4]
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    138a:	f8d3 9004 	ldr.w	r9, [r3, #4]
    138e:	f88d 5005 	strb.w	r5, [sp, #5]
    1392:	f88d 5006 	strb.w	r5, [sp, #6]
    1396:	6962      	ldr	r2, [r4, #20]
      #if defined(NO_CORRECTION) && (NO_CORRECTION==1)
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
    1398:	b1e7      	cbz	r7, 13d4 <CFastLED::show(unsigned char)+0x8c>
    139a:	f104 000b 	add.w	r0, r4, #11
    139e:	f10d 0e04 	add.w	lr, sp, #4
    13a2:	f104 0c0e 	add.w	ip, r4, #14
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
    13a6:	f810 af01 	ldrb.w	sl, [r0, #1]!
                      uint8_t ct = colorTemperature.raw[i];
    13aa:	f890 b003 	ldrb.w	fp, [r0, #3]
                      if(cc > 0 && ct > 0) {
    13ae:	f1ba 0f00 	cmp.w	sl, #0
    13b2:	d00b      	beq.n	13cc <CFastLED::show(unsigned char)+0x84>
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    13b4:	f10b 0301 	add.w	r3, fp, #1

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
                      uint8_t ct = colorTemperature.raw[i];
                      if(cc > 0 && ct > 0) {
    13b8:	f1bb 0f00 	cmp.w	fp, #0
    13bc:	d006      	beq.n	13cc <CFastLED::show(unsigned char)+0x84>
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    13be:	fb0a 3303 	mla	r3, sl, r3, r3
    13c2:	fb07 f303 	mul.w	r3, r7, r3
                          work /= 0x10000L;
                          adj.raw[i] = work & 0xFF;
    13c6:	0c1b      	lsrs	r3, r3, #16
    13c8:	f88e 3000 	strb.w	r3, [lr]
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
    13cc:	4560      	cmp	r0, ip
    13ce:	f10e 0e01 	add.w	lr, lr, #1
    13d2:	d1e8      	bne.n	13a6 <CFastLED::show(unsigned char)+0x5e>
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    13d4:	4620      	mov	r0, r4
    13d6:	ab01      	add	r3, sp, #4
    13d8:	47c8      	blx	r9

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    13da:	f884 8012 	strb.w	r8, [r4, #18]
    13de:	68a4      	ldr	r4, [r4, #8]
	if(m_pPowerFunc) {
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    13e0:	2c00      	cmp	r4, #0
    13e2:	d1c8      	bne.n	1376 <CFastLED::show(unsigned char)+0x2e>

void CFastLED::countFPS(int nFrames) {
  static int br = 0;
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
    13e4:	4813      	ldr	r0, [pc, #76]	; (1434 <CFastLED::show(unsigned char)+0xec>)
    13e6:	6802      	ldr	r2, [r0, #0]
    13e8:	1c51      	adds	r1, r2, #1
    13ea:	2a18      	cmp	r2, #24
    13ec:	6001      	str	r1, [r0, #0]
    13ee:	dd11      	ble.n	1414 <CFastLED::show(unsigned char)+0xcc>
    13f0:	4d11      	ldr	r5, [pc, #68]	; (1438 <CFastLED::show(unsigned char)+0xf0>)
      uint32_t now = millis();
      now -= lastframe;
      if( now == 0 ) {
          now = 1; // prevent division by zero below
      }
      m_nFPS = (br * 1000) / now;
    13f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  static int br = 0;
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
      uint32_t now = millis();
      now -= lastframe;
    13f6:	4c11      	ldr	r4, [pc, #68]	; (143c <CFastLED::show(unsigned char)+0xf4>)
      if( now == 0 ) {
          now = 1; // prevent division by zero below
      }
      m_nFPS = (br * 1000) / now;
    br = 0;
    13f8:	2700      	movs	r7, #0
    13fa:	682a      	ldr	r2, [r5, #0]
      uint32_t now = millis();
      now -= lastframe;
      if( now == 0 ) {
          now = 1; // prevent division by zero below
      }
      m_nFPS = (br * 1000) / now;
    13fc:	fb03 f101 	mul.w	r1, r3, r1
  static int br = 0;
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
      uint32_t now = millis();
      now -= lastframe;
    1400:	6823      	ldr	r3, [r4, #0]
    1402:	682d      	ldr	r5, [r5, #0]
      if( now == 0 ) {
          now = 1; // prevent division by zero below
    1404:	1ad3      	subs	r3, r2, r3
      }
      m_nFPS = (br * 1000) / now;
    br = 0;
    1406:	6007      	str	r7, [r0, #0]
    lastframe = millis();
    1408:	6025      	str	r5, [r4, #0]

  if(br++ >= nFrames) {
      uint32_t now = millis();
      now -= lastframe;
      if( now == 0 ) {
          now = 1; // prevent division by zero below
    140a:	bf08      	it	eq
    140c:	2301      	moveq	r3, #1
      }
      m_nFPS = (br * 1000) / now;
    140e:	fbb1 f3f3 	udiv	r3, r1, r3
    1412:	8073      	strh	r3, [r6, #2]
		pCur->showLeds(scale);
		pCur->setDither(d);
		pCur = pCur->next();
	}
	countFPS();
}
    1414:	b003      	add	sp, #12
    1416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return *pLed;
}

void CFastLED::show(uint8_t scale) {
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    141a:	f000 fa8d 	bl	1938 <micros>
    141e:	6822      	ldr	r2, [r4, #0]
    1420:	6873      	ldr	r3, [r6, #4]
    1422:	1a80      	subs	r0, r0, r2
    1424:	4298      	cmp	r0, r3
    1426:	d396      	bcc.n	1356 <CFastLED::show(unsigned char)+0xe>
    1428:	e797      	b.n	135a <CFastLED::show(unsigned char)+0x12>
    142a:	bf00      	nop
    142c:	20043228 	.word	0x20043228
    1430:	20043220 	.word	0x20043220
    1434:	20043224 	.word	0x20043224
    1438:	20043240 	.word	0x20043240
    143c:	2004322c 	.word	0x2004322c

00001440 <_GLOBAL__sub_I_pSmartMatrix>:
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    1440:	4b04      	ldr	r3, [pc, #16]	; (1454 <_GLOBAL__sub_I_pSmartMatrix+0x14>)
	m_nFPS = 0;
    1442:	2200      	movs	r2, #0
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    1444:	20ff      	movs	r0, #255	; 0xff
	m_nFPS = 0;
	m_pPowerFunc = NULL;
	m_nPowerData = 0xFFFFFFFF;
    1446:	f04f 31ff 	mov.w	r1, #4294967295

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
	m_nFPS = 0;
    144a:	805a      	strh	r2, [r3, #2]
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    144c:	7018      	strb	r0, [r3, #0]
	m_nFPS = 0;
	m_pPowerFunc = NULL;
	m_nPowerData = 0xFFFFFFFF;
    144e:	6099      	str	r1, [r3, #8]
CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
	m_nFPS = 0;
	m_pPowerFunc = NULL;
    1450:	60da      	str	r2, [r3, #12]
    1452:	4770      	bx	lr
    1454:	20043210 	.word	0x20043210

00001458 <analogRead>:
}


int analogRead(uint8_t pin)
{
	if (pin > sizeof(pin_to_channel)) return 0;
    1458:	281c      	cmp	r0, #28
    145a:	d81b      	bhi.n	1494 <analogRead+0x3c>
	if (calibrating) wait_for_cal();
    145c:	4914      	ldr	r1, [pc, #80]	; (14b0 <analogRead+0x58>)
    145e:	780b      	ldrb	r3, [r1, #0]
    1460:	b14b      	cbz	r3, 1476 <analogRead+0x1e>


static void wait_for_cal(void)
{
	//printf("wait_for_cal\n");
	while (ADC1_GC & ADC_GC_CAL) ;
    1462:	4a14      	ldr	r2, [pc, #80]	; (14b4 <analogRead+0x5c>)
    1464:	6c93      	ldr	r3, [r2, #72]	; 0x48
    1466:	061b      	lsls	r3, r3, #24
    1468:	d4fc      	bmi.n	1464 <analogRead+0xc>
	while (ADC2_GC & ADC_GC_CAL) ;
    146a:	4a13      	ldr	r2, [pc, #76]	; (14b8 <analogRead+0x60>)
    146c:	6c93      	ldr	r3, [r2, #72]	; 0x48
    146e:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    1472:	d1fb      	bne.n	146c <analogRead+0x14>
	// TODO: check CALF, but what do to about CAL failure?
	calibrating = 0;
    1474:	700b      	strb	r3, [r1, #0]

int analogRead(uint8_t pin)
{
	if (pin > sizeof(pin_to_channel)) return 0;
	if (calibrating) wait_for_cal();
	uint8_t ch = pin_to_channel[pin];
    1476:	4b11      	ldr	r3, [pc, #68]	; (14bc <analogRead+0x64>)
    1478:	5c1b      	ldrb	r3, [r3, r0]
	if (ch == 255) return 0;
    147a:	2bff      	cmp	r3, #255	; 0xff
    147c:	d00a      	beq.n	1494 <analogRead+0x3c>
//	printf("%d\n", ch);
//	if (ch > 15) return 0;
	if(!(ch & 0x80)) {
    147e:	061a      	lsls	r2, r3, #24
    1480:	d40a      	bmi.n	1498 <analogRead+0x40>
		ADC1_HC0 = ch;
    1482:	4a0c      	ldr	r2, [pc, #48]	; (14b4 <analogRead+0x5c>)
		while (!(ADC1_HS & ADC_HS_COCO0)) ; // wait
    1484:	4611      	mov	r1, r2
	uint8_t ch = pin_to_channel[pin];
	if (ch == 255) return 0;
//	printf("%d\n", ch);
//	if (ch > 15) return 0;
	if(!(ch & 0x80)) {
		ADC1_HC0 = ch;
    1486:	6013      	str	r3, [r2, #0]
		while (!(ADC1_HS & ADC_HS_COCO0)) ; // wait
    1488:	6a0b      	ldr	r3, [r1, #32]
    148a:	4a0a      	ldr	r2, [pc, #40]	; (14b4 <analogRead+0x5c>)
    148c:	07d8      	lsls	r0, r3, #31
    148e:	d5fb      	bpl.n	1488 <analogRead+0x30>
		return ADC1_R0;
	} else {
		ADC2_HC0 = ch & 0x7f;
		while (!(ADC2_HS & ADC_HS_COCO0)) ; // wait
		return ADC2_R0;
    1490:	6a50      	ldr	r0, [r2, #36]	; 0x24
	}
}
    1492:	4770      	bx	lr
}


int analogRead(uint8_t pin)
{
	if (pin > sizeof(pin_to_channel)) return 0;
    1494:	2000      	movs	r0, #0
    1496:	4770      	bx	lr
	if(!(ch & 0x80)) {
		ADC1_HC0 = ch;
		while (!(ADC1_HS & ADC_HS_COCO0)) ; // wait
		return ADC1_R0;
	} else {
		ADC2_HC0 = ch & 0x7f;
    1498:	4a07      	ldr	r2, [pc, #28]	; (14b8 <analogRead+0x60>)
    149a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		while (!(ADC2_HS & ADC_HS_COCO0)) ; // wait
    149e:	4611      	mov	r1, r2
	if(!(ch & 0x80)) {
		ADC1_HC0 = ch;
		while (!(ADC1_HS & ADC_HS_COCO0)) ; // wait
		return ADC1_R0;
	} else {
		ADC2_HC0 = ch & 0x7f;
    14a0:	6013      	str	r3, [r2, #0]
		while (!(ADC2_HS & ADC_HS_COCO0)) ; // wait
    14a2:	6a0b      	ldr	r3, [r1, #32]
    14a4:	4a04      	ldr	r2, [pc, #16]	; (14b8 <analogRead+0x60>)
    14a6:	07db      	lsls	r3, r3, #31
    14a8:	d5fb      	bpl.n	14a2 <analogRead+0x4a>
		return ADC2_R0;
    14aa:	6a50      	ldr	r0, [r2, #36]	; 0x24
	}
}
    14ac:	4770      	bx	lr
    14ae:	bf00      	nop
    14b0:	20043234 	.word	0x20043234
    14b4:	400c4000 	.word	0x400c4000
    14b8:	400c8000 	.word	0x400c8000
    14bc:	200000b0 	.word	0x200000b0

000014c0 <analogReadRes>:

void analogReadRes(unsigned int bits)
{
  uint32_t tmp32, mode;

   if (bits == 8) {
    14c0:	2808      	cmp	r0, #8
void analogReference(uint8_t type)
{
}

void analogReadRes(unsigned int bits)
{
    14c2:	b470      	push	{r4, r5, r6}
  uint32_t tmp32, mode;

   if (bits == 8) {
    14c4:	d024      	beq.n	1510 <analogReadRes+0x50>
    // 8 bit conversion (17 clocks) plus 8 clocks for input settling
    mode = ADC_CFG_MODE(0) | ADC_CFG_ADSTS(3);
  } else if (bits == 10) {
    14c6:	280a      	cmp	r0, #10
    // 10 bit conversion (17 clocks) plus 20 clocks for input settling
    mode = ADC_CFG_MODE(1) | ADC_CFG_ADSTS(2) | ADC_CFG_ADLSMP;
  } else {
    // 12 bit conversion (25 clocks) plus 24 clocks for input settling
    mode = ADC_CFG_MODE(2) | ADC_CFG_ADSTS(3) | ADC_CFG_ADLSMP;
    14c8:	bf0c      	ite	eq
    14ca:	f44f 7405 	moveq.w	r4, #532	; 0x214
    14ce:	f44f 7446 	movne.w	r4, #792	; 0x318
  }

  tmp32  = (ADC1_CFG & (0xFFFFFC00));
    14d2:	4811      	ldr	r0, [pc, #68]	; (1518 <analogReadRes+0x58>)
    14d4:	4a11      	ldr	r2, [pc, #68]	; (151c <analogReadRes+0x5c>)
    14d6:	6c43      	ldr	r3, [r0, #68]	; 0x44
  tmp32 |= (ADC1_CFG & (0x03));  // ADICLK
    14d8:	6c46      	ldr	r6, [r0, #68]	; 0x44
  } else {
    // 12 bit conversion (25 clocks) plus 24 clocks for input settling
    mode = ADC_CFG_MODE(2) | ADC_CFG_ADSTS(3) | ADC_CFG_ADLSMP;
  }

  tmp32  = (ADC1_CFG & (0xFFFFFC00));
    14da:	401a      	ands	r2, r3
  tmp32 |= (ADC1_CFG & (0x03));  // ADICLK
  tmp32 |= (ADC1_CFG & (0xE0));  // ADIV & ADLPC
    14dc:	6c45      	ldr	r5, [r0, #68]	; 0x44
    // 12 bit conversion (25 clocks) plus 24 clocks for input settling
    mode = ADC_CFG_MODE(2) | ADC_CFG_ADSTS(3) | ADC_CFG_ADLSMP;
  }

  tmp32  = (ADC1_CFG & (0xFFFFFC00));
  tmp32 |= (ADC1_CFG & (0x03));  // ADICLK
    14de:	f006 0603 	and.w	r6, r6, #3
  tmp32 |= (ADC1_CFG & (0xE0));  // ADIV & ADLPC

  tmp32 |= mode; 
  ADC1_CFG = tmp32;
  
  tmp32  = (ADC2_CFG & (0xFFFFFC00));
    14e2:	490f      	ldr	r1, [pc, #60]	; (1520 <analogReadRes+0x60>)
    mode = ADC_CFG_MODE(2) | ADC_CFG_ADSTS(3) | ADC_CFG_ADLSMP;
  }

  tmp32  = (ADC1_CFG & (0xFFFFFC00));
  tmp32 |= (ADC1_CFG & (0x03));  // ADICLK
  tmp32 |= (ADC1_CFG & (0xE0));  // ADIV & ADLPC
    14e4:	f005 05e0 	and.w	r5, r5, #224	; 0xe0

  tmp32 |= mode; 
  ADC1_CFG = tmp32;
  
  tmp32  = (ADC2_CFG & (0xFFFFFC00));
    14e8:	4b0c      	ldr	r3, [pc, #48]	; (151c <analogReadRes+0x5c>)
    // 12 bit conversion (25 clocks) plus 24 clocks for input settling
    mode = ADC_CFG_MODE(2) | ADC_CFG_ADSTS(3) | ADC_CFG_ADLSMP;
  }

  tmp32  = (ADC1_CFG & (0xFFFFFC00));
  tmp32 |= (ADC1_CFG & (0x03));  // ADICLK
    14ea:	4332      	orrs	r2, r6
  tmp32 |= (ADC1_CFG & (0xE0));  // ADIV & ADLPC
    14ec:	432a      	orrs	r2, r5

  tmp32 |= mode; 
    14ee:	4322      	orrs	r2, r4
  ADC1_CFG = tmp32;
    14f0:	6442      	str	r2, [r0, #68]	; 0x44
  
  tmp32  = (ADC2_CFG & (0xFFFFFC00));
    14f2:	6c48      	ldr	r0, [r1, #68]	; 0x44
  tmp32 |= (ADC2_CFG & (0x03));  // ADICLK
    14f4:	6c4a      	ldr	r2, [r1, #68]	; 0x44
  tmp32 |= (ADC1_CFG & (0xE0));  // ADIV & ADLPC

  tmp32 |= mode; 
  ADC1_CFG = tmp32;
  
  tmp32  = (ADC2_CFG & (0xFFFFFC00));
    14f6:	4003      	ands	r3, r0
  tmp32 |= (ADC2_CFG & (0x03));  // ADICLK
  tmp32 |= (ADC2_CFG & (0xE0));  // ADIV & ADLPC
    14f8:	6c48      	ldr	r0, [r1, #68]	; 0x44

  tmp32 |= mode; 
  ADC1_CFG = tmp32;
  
  tmp32  = (ADC2_CFG & (0xFFFFFC00));
  tmp32 |= (ADC2_CFG & (0x03));  // ADICLK
    14fa:	f002 0203 	and.w	r2, r2, #3
  tmp32 |= (ADC2_CFG & (0xE0));  // ADIV & ADLPC
    14fe:	f000 00e0 	and.w	r0, r0, #224	; 0xe0

  tmp32 |= mode; 
  ADC1_CFG = tmp32;
  
  tmp32  = (ADC2_CFG & (0xFFFFFC00));
  tmp32 |= (ADC2_CFG & (0x03));  // ADICLK
    1502:	431a      	orrs	r2, r3
  tmp32 |= (ADC2_CFG & (0xE0));  // ADIV & ADLPC
    1504:	ea40 0302 	orr.w	r3, r0, r2

  tmp32 |= mode; 
    1508:	4323      	orrs	r3, r4
  ADC2_CFG = tmp32;
}
    150a:	bc70      	pop	{r4, r5, r6}
  tmp32  = (ADC2_CFG & (0xFFFFFC00));
  tmp32 |= (ADC2_CFG & (0x03));  // ADICLK
  tmp32 |= (ADC2_CFG & (0xE0));  // ADIV & ADLPC

  tmp32 |= mode; 
  ADC2_CFG = tmp32;
    150c:	644b      	str	r3, [r1, #68]	; 0x44
}
    150e:	4770      	bx	lr
{
  uint32_t tmp32, mode;

   if (bits == 8) {
    // 8 bit conversion (17 clocks) plus 8 clocks for input settling
    mode = ADC_CFG_MODE(0) | ADC_CFG_ADSTS(3);
    1510:	f44f 7440 	mov.w	r4, #768	; 0x300
    1514:	e7dd      	b.n	14d2 <analogReadRes+0x12>
    1516:	bf00      	nop
    1518:	400c4000 	.word	0x400c4000
    151c:	fffffc00 	.word	0xfffffc00
    1520:	400c8000 	.word	0x400c8000

00001524 <analogReadAveraging>:
  tmp32 |= mode; 
  ADC2_CFG = tmp32;
}

void analogReadAveraging(unsigned int num)
{
    1524:	b410      	push	{r4}
  uint32_t mode, mode1;
  
  //disable averaging, ADC1 and ADC2
  ADC1_GC &= ~0x20;
    1526:	4c1e      	ldr	r4, [pc, #120]	; (15a0 <analogReadAveraging+0x7c>)
  mode = ADC1_CFG & ~0xC000;
  ADC2_GC &= ~0x20;
  mode1 = ADC2_CFG & ~0xC000;
  
    if (num >= 32) {
    1528:	281f      	cmp	r0, #31
  uint32_t mode, mode1;
  
  //disable averaging, ADC1 and ADC2
  ADC1_GC &= ~0x20;
  mode = ADC1_CFG & ~0xC000;
  ADC2_GC &= ~0x20;
    152a:	491e      	ldr	r1, [pc, #120]	; (15a4 <analogReadAveraging+0x80>)
void analogReadAveraging(unsigned int num)
{
  uint32_t mode, mode1;
  
  //disable averaging, ADC1 and ADC2
  ADC1_GC &= ~0x20;
    152c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    152e:	f023 0320 	bic.w	r3, r3, #32
    1532:	64a3      	str	r3, [r4, #72]	; 0x48
  mode = ADC1_CFG & ~0xC000;
    1534:	6c62      	ldr	r2, [r4, #68]	; 0x44
  ADC2_GC &= ~0x20;
    1536:	6c8b      	ldr	r3, [r1, #72]	; 0x48
{
  uint32_t mode, mode1;
  
  //disable averaging, ADC1 and ADC2
  ADC1_GC &= ~0x20;
  mode = ADC1_CFG & ~0xC000;
    1538:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
  ADC2_GC &= ~0x20;
    153c:	f023 0320 	bic.w	r3, r3, #32
    1540:	648b      	str	r3, [r1, #72]	; 0x48
  mode1 = ADC2_CFG & ~0xC000;
    1542:	6c4b      	ldr	r3, [r1, #68]	; 0x44
    1544:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
  
    if (num >= 32) {
    1548:	d912      	bls.n	1570 <analogReadAveraging+0x4c>
      mode |= ADC_CFG_AVGS(3);
    154a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
      mode1 |= ADC_CFG_AVGS(3);
    154e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
    1552:	6462      	str	r2, [r4, #68]	; 0x44
  ADC2_CFG = mode1;
    1554:	644b      	str	r3, [r1, #68]	; 0x44
  
  if(num >= 4){
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
    1556:	4912      	ldr	r1, [pc, #72]	; (15a0 <analogReadAveraging+0x7c>)
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
    1558:	4a12      	ldr	r2, [pc, #72]	; (15a4 <analogReadAveraging+0x80>)

  ADC1_CFG = mode;
  ADC2_CFG = mode1;
  
  if(num >= 4){
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
    155a:	6c8b      	ldr	r3, [r1, #72]	; 0x48
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
  }
}
    155c:	f85d 4b04 	ldr.w	r4, [sp], #4

  ADC1_CFG = mode;
  ADC2_CFG = mode1;
  
  if(num >= 4){
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
    1560:	f043 0320 	orr.w	r3, r3, #32
    1564:	648b      	str	r3, [r1, #72]	; 0x48
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
    1566:	6c93      	ldr	r3, [r2, #72]	; 0x48
    1568:	f043 0320 	orr.w	r3, r3, #32
    156c:	6493      	str	r3, [r2, #72]	; 0x48
  }
}
    156e:	4770      	bx	lr
  
    if (num >= 32) {
      mode |= ADC_CFG_AVGS(3);
      mode1 |= ADC_CFG_AVGS(3);

    } else if (num >= 16) {
    1570:	280f      	cmp	r0, #15
    1572:	d906      	bls.n	1582 <analogReadAveraging+0x5e>
      mode |= ADC_CFG_AVGS(2);
    1574:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
      mode1 |= ADC_CFG_AVGS(2);
    1578:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
    157c:	6462      	str	r2, [r4, #68]	; 0x44
  ADC2_CFG = mode1;
    157e:	644b      	str	r3, [r1, #68]	; 0x44
    1580:	e7e9      	b.n	1556 <analogReadAveraging+0x32>

    } else if (num >= 16) {
      mode |= ADC_CFG_AVGS(2);
      mode1 |= ADC_CFG_AVGS(2);

    } else if (num >= 8) {
    1582:	2807      	cmp	r0, #7
    1584:	d903      	bls.n	158e <analogReadAveraging+0x6a>
      mode |= ADC_CFG_AVGS(1);
    1586:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
      mode1 |= ADC_CFG_AVGS(1);
    158a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
    158e:	4c04      	ldr	r4, [pc, #16]	; (15a0 <analogReadAveraging+0x7c>)
  ADC2_CFG = mode1;
  
  if(num >= 4){
    1590:	2803      	cmp	r0, #3
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
  ADC2_CFG = mode1;
    1592:	4904      	ldr	r1, [pc, #16]	; (15a4 <analogReadAveraging+0x80>)
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
    1594:	6462      	str	r2, [r4, #68]	; 0x44
  ADC2_CFG = mode1;
    1596:	644b      	str	r3, [r1, #68]	; 0x44
  
  if(num >= 4){
    1598:	d8dd      	bhi.n	1556 <analogReadAveraging+0x32>
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
  }
}
    159a:	f85d 4b04 	ldr.w	r4, [sp], #4
    159e:	4770      	bx	lr
    15a0:	400c4000 	.word	0x400c4000
    15a4:	400c8000 	.word	0x400c8000

000015a8 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    15a8:	4a96      	ldr	r2, [pc, #600]	; (1804 <set_arm_clock+0x25c>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    15aa:	4b97      	ldr	r3, [pc, #604]	; (1808 <set_arm_clock+0x260>)
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    15ac:	4290      	cmp	r0, r2
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
    15ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;
    15b2:	4c96      	ldr	r4, [pc, #600]	; (180c <set_arm_clock+0x264>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    15b4:	f8d3 e014 	ldr.w	lr, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    15b8:	6999      	ldr	r1, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    15ba:	68e6      	ldr	r6, [r4, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    15bc:	d91c      	bls.n	15f8 <set_arm_clock+0x50>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    15be:	4b94      	ldr	r3, [pc, #592]	; (1810 <set_arm_clock+0x268>)
    15c0:	4298      	cmp	r0, r3
    15c2:	f240 8115 	bls.w	17f0 <set_arm_clock+0x248>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    15c6:	4b93      	ldr	r3, [pc, #588]	; (1814 <set_arm_clock+0x26c>)
    15c8:	f240 6527 	movw	r5, #1575	; 0x627
    15cc:	4f92      	ldr	r7, [pc, #584]	; (1818 <set_arm_clock+0x270>)
    15ce:	4403      	add	r3, r0
    15d0:	4c92      	ldr	r4, [pc, #584]	; (181c <set_arm_clock+0x274>)
    15d2:	0a1a      	lsrs	r2, r3, #8
    15d4:	fba7 3202 	umull	r3, r2, r7, r2
    15d8:	09d3      	lsrs	r3, r2, #7
    15da:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    15de:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    15e2:	f202 43e2 	addw	r3, r2, #1250	; 0x4e2
    15e6:	42ab      	cmp	r3, r5
    15e8:	bf28      	it	cs
    15ea:	462b      	movcs	r3, r5
    15ec:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
    15f0:	fba4 3503 	umull	r3, r5, r4, r3
    15f4:	08ed      	lsrs	r5, r5, #3
    15f6:	e004      	b.n	1602 <set_arm_clock+0x5a>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24000000) {
    15f8:	4d89      	ldr	r5, [pc, #548]	; (1820 <set_arm_clock+0x278>)
    15fa:	42a8      	cmp	r0, r5
    15fc:	bf94      	ite	ls
    15fe:	2506      	movls	r5, #6
    1600:	250e      	movhi	r5, #14
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    1602:	4a81      	ldr	r2, [pc, #516]	; (1808 <set_arm_clock+0x260>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    1604:	f006 071f 	and.w	r7, r6, #31
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    1608:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    160c:	42af      	cmp	r7, r5
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    160e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    1612:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    1616:	d20a      	bcs.n	162e <set_arm_clock+0x86>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    1618:	4b7c      	ldr	r3, [pc, #496]	; (180c <set_arm_clock+0x264>)

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    161a:	f026 061f 	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    161e:	461a      	mov	r2, r3
	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    1620:	432e      	orrs	r6, r5
		DCDC_REG3 = dcdc;
    1622:	60de      	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    1624:	6813      	ldr	r3, [r2, #0]
    1626:	2b00      	cmp	r3, #0
    1628:	dafc      	bge.n	1624 <set_arm_clock+0x7c>
    162a:	f006 071f 	and.w	r7, r6, #31
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    162e:	f01e 7300 	ands.w	r3, lr, #33554432	; 0x2000000
    1632:	d131      	bne.n	1698 <set_arm_clock+0xf0>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    1634:	4c7b      	ldr	r4, [pc, #492]	; (1824 <set_arm_clock+0x27c>)
    1636:	4a7c      	ldr	r2, [pc, #496]	; (1828 <set_arm_clock+0x280>)
    1638:	f8d4 c010 	ldr.w	ip, [r4, #16]
    163c:	4614      	mov	r4, r2
    163e:	ea0c 0202 	and.w	r2, ip, r2
    1642:	42a2      	cmp	r2, r4
    1644:	bf0a      	itet	eq
    1646:	f04f 53c0 	moveq.w	r3, #402653184	; 0x18000000
    164a:	f44f 5280 	movne.w	r2, #4096	; 0x1000
    164e:	2200      	moveq	r2, #0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    1650:	ea8e 0403 	eor.w	r4, lr, r3
    1654:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    1658:	d008      	beq.n	166c <set_arm_clock+0xc4>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    165a:	f02e 5e60 	bic.w	lr, lr, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    165e:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
			CCM_CBCDR = cbcdr;
    1662:	4c69      	ldr	r4, [pc, #420]	; (1808 <set_arm_clock+0x260>)
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    1664:	ea43 0e0e 	orr.w	lr, r3, lr
			CCM_CBCDR = cbcdr;
    1668:	f8c4 e014 	str.w	lr, [r4, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    166c:	ea81 0302 	eor.w	r3, r1, r2
    1670:	f413 5f40 	tst.w	r3, #12288	; 0x3000
    1674:	d008      	beq.n	1688 <set_arm_clock+0xe0>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    1676:	4b64      	ldr	r3, [pc, #400]	; (1808 <set_arm_clock+0x260>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    1678:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    167c:	4311      	orrs	r1, r2
			CCM_CBCMR = cbcmr;
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    167e:	461a      	mov	r2, r3
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    1680:	6199      	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    1682:	6c93      	ldr	r3, [r2, #72]	; 0x48
    1684:	071c      	lsls	r4, r3, #28
    1686:	d4fc      	bmi.n	1682 <set_arm_clock+0xda>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    1688:	f04e 7e00 	orr.w	lr, lr, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    168c:	4a5e      	ldr	r2, [pc, #376]	; (1808 <set_arm_clock+0x260>)
    168e:	f8c2 e014 	str.w	lr, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    1692:	6c93      	ldr	r3, [r2, #72]	; 0x48
    1694:	0699      	lsls	r1, r3, #26
    1696:	d4fc      	bmi.n	1692 <set_arm_clock+0xea>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
    1698:	2101      	movs	r1, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    169a:	4c64      	ldr	r4, [pc, #400]	; (182c <set_arm_clock+0x284>)
	}

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
    169c:	460a      	mov	r2, r1
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    169e:	fb01 f302 	mul.w	r3, r1, r2
    16a2:	fb00 f303 	mul.w	r3, r0, r3
    16a6:	42a3      	cmp	r3, r4
    16a8:	d809      	bhi.n	16be <set_arm_clock+0x116>
		if (div_arm < 8) {
    16aa:	2a07      	cmp	r2, #7
    16ac:	f200 8095 	bhi.w	17da <set_arm_clock+0x232>
			div_arm = div_arm + 1;
    16b0:	3201      	adds	r2, #1
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    16b2:	fb01 f302 	mul.w	r3, r1, r2
    16b6:	fb00 f303 	mul.w	r3, r0, r3
    16ba:	42a3      	cmp	r3, r4
    16bc:	d9f5      	bls.n	16aa <set_arm_clock+0x102>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    16be:	485c      	ldr	r0, [pc, #368]	; (1830 <set_arm_clock+0x288>)
    16c0:	4c5c      	ldr	r4, [pc, #368]	; (1834 <set_arm_clock+0x28c>)
    16c2:	4418      	add	r0, r3
    16c4:	fba4 0300 	umull	r0, r3, r4, r0
    16c8:	0d1b      	lsrs	r3, r3, #20
	if (mult > 108) mult = 108;
    16ca:	2b6c      	cmp	r3, #108	; 0x6c
    16cc:	f200 808b 	bhi.w	17e6 <set_arm_clock+0x23e>
	if (mult < 54) mult = 54;
    16d0:	2b35      	cmp	r3, #53	; 0x35
    16d2:	f200 808f 	bhi.w	17f4 <set_arm_clock+0x24c>
    16d6:	f8df 8188 	ldr.w	r8, [pc, #392]	; 1860 <set_arm_clock+0x2b8>
    16da:	2336      	movs	r3, #54	; 0x36
    16dc:	4856      	ldr	r0, [pc, #344]	; (1838 <set_arm_clock+0x290>)

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    16de:	f8df c144 	ldr.w	ip, [pc, #324]	; 1824 <set_arm_clock+0x27c>
    16e2:	4c56      	ldr	r4, [pc, #344]	; (183c <set_arm_clock+0x294>)
    16e4:	f8dc 9000 	ldr.w	r9, [ip]
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    16e8:	fbb0 f0f2 	udiv	r0, r0, r2

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    16ec:	ea09 0404 	and.w	r4, r9, r4
    16f0:	4544      	cmp	r4, r8
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    16f2:	fbb0 f0f1 	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    16f6:	d00b      	beq.n	1710 <set_arm_clock+0x168>
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    16f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    16fc:	f44f 5880 	mov.w	r8, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    1700:	4664      	mov	r4, ip
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    1702:	f8cc 8000 	str.w	r8, [ip]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    1706:	f8cc 3000 	str.w	r3, [ip]
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    170a:	6823      	ldr	r3, [r4, #0]
    170c:	2b00      	cmp	r3, #0
    170e:	dafc      	bge.n	170a <set_arm_clock+0x162>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    1710:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 1808 <set_arm_clock+0x260>
    1714:	3a01      	subs	r2, #1
    1716:	f8dc 3010 	ldr.w	r3, [ip, #16]
    171a:	f003 0307 	and.w	r3, r3, #7
    171e:	4293      	cmp	r3, r2
    1720:	d007      	beq.n	1732 <set_arm_clock+0x18a>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    1722:	f002 0207 	and.w	r2, r2, #7
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    1726:	4664      	mov	r4, ip
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    1728:	f8cc 2010 	str.w	r2, [ip, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    172c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    172e:	03db      	lsls	r3, r3, #15
    1730:	d4fc      	bmi.n	172c <set_arm_clock+0x184>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    1732:	3901      	subs	r1, #1
    1734:	0289      	lsls	r1, r1, #10
    1736:	ea8e 0301 	eor.w	r3, lr, r1
    173a:	f413 5fe0 	tst.w	r3, #7168	; 0x1c00
    173e:	d00c      	beq.n	175a <set_arm_clock+0x1b2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
		CCM_CBCDR = cbcdr;
    1740:	4b31      	ldr	r3, [pc, #196]	; (1808 <set_arm_clock+0x260>)
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    1742:	f42e 5ee0 	bic.w	lr, lr, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    1746:	f401 51e0 	and.w	r1, r1, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    174a:	461a      	mov	r2, r3
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    174c:	ea41 0e0e 	orr.w	lr, r1, lr
		CCM_CBCDR = cbcdr;
    1750:	f8c3 e014 	str.w	lr, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    1754:	6c93      	ldr	r3, [r2, #72]	; 0x48
    1756:	0799      	lsls	r1, r3, #30
    1758:	d4fc      	bmi.n	1754 <set_arm_clock+0x1ac>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    175a:	4b39      	ldr	r3, [pc, #228]	; (1840 <set_arm_clock+0x298>)
    175c:	4939      	ldr	r1, [pc, #228]	; (1844 <set_arm_clock+0x29c>)
    175e:	4403      	add	r3, r0
    1760:	09db      	lsrs	r3, r3, #7
    1762:	fba1 3103 	umull	r3, r1, r1, r3
    1766:	0b09      	lsrs	r1, r1, #12
    1768:	2904      	cmp	r1, #4
    176a:	bf28      	it	cs
    176c:	2104      	movcs	r1, #4
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    176e:	1e4b      	subs	r3, r1, #1
    1770:	021b      	lsls	r3, r3, #8
    1772:	ea8e 0203 	eor.w	r2, lr, r3
    1776:	f412 7f40 	tst.w	r2, #768	; 0x300
    177a:	d007      	beq.n	178c <set_arm_clock+0x1e4>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    177c:	f42e 7e40 	bic.w	lr, lr, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    1780:	f403 7340 	and.w	r3, r3, #768	; 0x300
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    1784:	4a20      	ldr	r2, [pc, #128]	; (1808 <set_arm_clock+0x260>)

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    1786:	ea43 030e 	orr.w	r3, r3, lr
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    178a:	6153      	str	r3, [r2, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    178c:	4b1e      	ldr	r3, [pc, #120]	; (1808 <set_arm_clock+0x260>)
    178e:	695c      	ldr	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    1790:	461a      	mov	r2, r3
		CCM_CBCDR = cbcdr;
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    1792:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
    1796:	615c      	str	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    1798:	6c93      	ldr	r3, [r2, #72]	; 0x48
    179a:	069b      	lsls	r3, r3, #26
    179c:	d4fc      	bmi.n	1798 <set_arm_clock+0x1f0>

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    179e:	4b2a      	ldr	r3, [pc, #168]	; (1848 <set_arm_clock+0x2a0>)
    17a0:	f04f 32ff 	mov.w	r2, #4294967295
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    17a4:	4c29      	ldr	r4, [pc, #164]	; (184c <set_arm_clock+0x2a4>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    17a6:	42bd      	cmp	r5, r7
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    17a8:	fba3 e300 	umull	lr, r3, r3, r0
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    17ac:	6020      	str	r0, [r4, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    17ae:	ea4f 4393 	mov.w	r3, r3, lsr #18
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    17b2:	4c27      	ldr	r4, [pc, #156]	; (1850 <set_arm_clock+0x2a8>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    17b4:	fbb2 f3f3 	udiv	r3, r2, r3
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    17b8:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    17bc:	4a25      	ldr	r2, [pc, #148]	; (1854 <set_arm_clock+0x2ac>)
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    17be:	6021      	str	r1, [r4, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    17c0:	6013      	str	r3, [r2, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    17c2:	d208      	bcs.n	17d6 <set_arm_clock+0x22e>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    17c4:	4b11      	ldr	r3, [pc, #68]	; (180c <set_arm_clock+0x264>)
	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    17c6:	f026 061f 	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    17ca:	461a      	mov	r2, r3

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    17cc:	432e      	orrs	r6, r5
		DCDC_REG3 = dcdc;
    17ce:	60de      	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    17d0:	6813      	ldr	r3, [r2, #0]
    17d2:	2b00      	cmp	r3, #0
    17d4:	dafc      	bge.n	17d0 <set_arm_clock+0x228>
	}

	return frequency;
}
    17d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
    17da:	2904      	cmp	r1, #4
    17dc:	f63f af6f 	bhi.w	16be <set_arm_clock+0x116>
				div_ahb = div_ahb + 1;
    17e0:	3101      	adds	r1, #1
				div_arm = 1;
    17e2:	2201      	movs	r2, #1
    17e4:	e75b      	b.n	169e <set_arm_clock+0xf6>
    17e6:	f8df 807c 	ldr.w	r8, [pc, #124]	; 1864 <set_arm_clock+0x2bc>
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
    17ea:	236c      	movs	r3, #108	; 0x6c
    17ec:	481a      	ldr	r0, [pc, #104]	; (1858 <set_arm_clock+0x2b0>)
    17ee:	e776      	b.n	16de <set_arm_clock+0x136>
    17f0:	2512      	movs	r5, #18
    17f2:	e706      	b.n	1602 <set_arm_clock+0x5a>
    17f4:	4819      	ldr	r0, [pc, #100]	; (185c <set_arm_clock+0x2b4>)
    17f6:	f8df 8070 	ldr.w	r8, [pc, #112]	; 1868 <set_arm_clock+0x2c0>
    17fa:	fb00 f003 	mul.w	r0, r0, r3
    17fe:	ea43 0808 	orr.w	r8, r3, r8
    1802:	e76c      	b.n	16de <set_arm_clock+0x136>
    1804:	1f78a400 	.word	0x1f78a400
    1808:	400fc000 	.word	0x400fc000
    180c:	40080000 	.word	0x40080000
    1810:	23c34600 	.word	0x23c34600
    1814:	dc3cba00 	.word	0xdc3cba00
    1818:	004cb223 	.word	0x004cb223
    181c:	51eb851f 	.word	0x51eb851f
    1820:	016e3600 	.word	0x016e3600
    1824:	400d8000 	.word	0x400d8000
    1828:	80003040 	.word	0x80003040
    182c:	269fb1ff 	.word	0x269fb1ff
    1830:	005b8d80 	.word	0x005b8d80
    1834:	165e9f81 	.word	0x165e9f81
    1838:	269fb200 	.word	0x269fb200
    183c:	8001307f 	.word	0x8001307f
    1840:	08f0d17f 	.word	0x08f0d17f
    1844:	00e5109f 	.word	0x00e5109f
    1848:	431bde83 	.word	0x431bde83
    184c:	2001224c 	.word	0x2001224c
    1850:	20012248 	.word	0x20012248
    1854:	2004323c 	.word	0x2004323c
    1858:	4d3f6400 	.word	0x4d3f6400
    185c:	00b71b00 	.word	0x00b71b00
    1860:	80002036 	.word	0x80002036
    1864:	8000206c 	.word	0x8000206c
    1868:	80002000 	.word	0x80002000

0000186c <delay>:

void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    186c:	2800      	cmp	r0, #0
    186e:	d057      	beq.n	1920 <delay+0xb4>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    1870:	2201      	movs	r2, #1
{

}*/

void delay(uint32_t msec)
{
    1872:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1876:	b085      	sub	sp, #20
    1878:	4683      	mov	fp, r0
    187a:	4c2a      	ldr	r4, [pc, #168]	; (1924 <delay+0xb8>)
    187c:	4d2a      	ldr	r5, [pc, #168]	; (1928 <delay+0xbc>)
    187e:	4e2b      	ldr	r6, [pc, #172]	; (192c <delay+0xc0>)
    1880:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    1884:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    1888:	6828      	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    188a:	6833      	ldr	r3, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    188c:	e844 2100 	strex	r1, r2, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    1890:	2900      	cmp	r1, #0
    1892:	d1f7      	bne.n	1884 <delay+0x18>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    1894:	4f26      	ldr	r7, [pc, #152]	; (1930 <delay+0xc4>)
    1896:	e9cd 8902 	strd	r8, r9, [sp, #8]
    189a:	683a      	ldr	r2, [r7, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    189c:	1ad3      	subs	r3, r2, r3
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    189e:	4a25      	ldr	r2, [pc, #148]	; (1934 <delay+0xc8>)
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    18a0:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    18a4:	9701      	str	r7, [sp, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    18a6:	6812      	ldr	r2, [r2, #0]
    18a8:	2701      	movs	r7, #1
    18aa:	fba3 2302 	umull	r2, r3, r3, r2
	if (frac > 1000) frac = 1000;
    18ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    18b2:	4698      	mov	r8, r3
	if (frac > 1000) frac = 1000;
    18b4:	2300      	movs	r3, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    18b6:	428b      	cmp	r3, r1
    18b8:	bf08      	it	eq
    18ba:	4542      	cmpeq	r2, r8
    18bc:	bf2c      	ite	cs
    18be:	46c2      	movcs	sl, r8
    18c0:	46f2      	movcc	sl, lr
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    18c2:	fb0e aa00 	mla	sl, lr, r0, sl
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    18c6:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    18ca:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    18cc:	6831      	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    18ce:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    18d2:	2b00      	cmp	r3, #0
    18d4:	d1f7      	bne.n	18c6 <delay+0x5a>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    18d6:	9801      	ldr	r0, [sp, #4]
    18d8:	6800      	ldr	r0, [r0, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    18da:	1a41      	subs	r1, r0, r1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    18dc:	4815      	ldr	r0, [pc, #84]	; (1934 <delay+0xc8>)
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    18de:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    18e2:	6800      	ldr	r0, [r0, #0]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    18e4:	fb0e f202 	mul.w	r2, lr, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    18e8:	fba1 0100 	umull	r0, r1, r1, r0
	if (frac > 1000) frac = 1000;
    18ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    18f0:	ebca 0202 	rsb	r2, sl, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    18f4:	4688      	mov	r8, r1
	if (frac > 1000) frac = 1000;
    18f6:	2100      	movs	r1, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    18f8:	4299      	cmp	r1, r3
    18fa:	bf08      	it	eq
    18fc:	4540      	cmpeq	r0, r8
    18fe:	bf2c      	ite	cs
    1900:	4643      	movcs	r3, r8
    1902:	4673      	movcc	r3, lr
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    1904:	441a      	add	r2, r3
    1906:	4572      	cmp	r2, lr
    1908:	d307      	bcc.n	191a <delay+0xae>
			if (--msec == 0) return;
    190a:	f1bb 0b01 	subs.w	fp, fp, #1
			start += 1000;
    190e:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
    1912:	d1d8      	bne.n	18c6 <delay+0x5a>
			start += 1000;
		}
		yield();
	}
	// TODO...
}
    1914:	b005      	add	sp, #20
    1916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
			start += 1000;
		}
		yield();
    191a:	f001 fa8f 	bl	2e3c <yield>
	}
    191e:	e7d2      	b.n	18c6 <delay+0x5a>
    1920:	4770      	bx	lr
    1922:	bf00      	nop
    1924:	20043494 	.word	0x20043494
    1928:	20043240 	.word	0x20043240
    192c:	20043238 	.word	0x20043238
    1930:	e0001004 	.word	0xe0001004
    1934:	2004323c 	.word	0x2004323c

00001938 <micros>:
	// TODO...
}

uint32_t micros(void)
{
    1938:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
    193c:	4a12      	ldr	r2, [pc, #72]	; (1988 <micros+0x50>)
    193e:	2601      	movs	r6, #1
    1940:	4d12      	ldr	r5, [pc, #72]	; (198c <micros+0x54>)
    1942:	4c13      	ldr	r4, [pc, #76]	; (1990 <micros+0x58>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    1944:	e852 3f00 	ldrex	r3, [r2]
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    1948:	6829      	ldr	r1, [r5, #0]
		scc = systick_cycle_count;
    194a:	6820      	ldr	r0, [r4, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    194c:	e842 6300 	strex	r3, r6, [r2]
	} while ( __STREXW(1, &systick_safe_read));
    1950:	2b00      	cmp	r3, #0
    1952:	d1f7      	bne.n	1944 <micros+0xc>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    1954:	4a0f      	ldr	r2, [pc, #60]	; (1994 <micros+0x5c>)
    1956:	6816      	ldr	r6, [r2, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1958:	4f0f      	ldr	r7, [pc, #60]	; (1998 <micros+0x60>)
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    195a:	1a32      	subs	r2, r6, r0
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
    195c:	f04f 0900 	mov.w	r9, #0
    1960:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1964:	683e      	ldr	r6, [r7, #0]
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
	return usec;
    1966:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    196a:	4599      	cmp	r9, r3
    196c:	fba2 6706 	umull	r6, r7, r2, r6
    1970:	bf08      	it	eq
    1972:	45b8      	cmpeq	r8, r7
    1974:	463c      	mov	r4, r7
    1976:	bf2c      	ite	cs
    1978:	463c      	movcs	r4, r7
    197a:	4604      	movcc	r4, r0
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
	return usec;
}
    197c:	fb00 4001 	mla	r0, r0, r1, r4
    1980:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
    1984:	4770      	bx	lr
    1986:	bf00      	nop
    1988:	20043494 	.word	0x20043494
    198c:	20043240 	.word	0x20043240
    1990:	20043238 	.word	0x20043238
    1994:	e0001004 	.word	0xe0001004
    1998:	2004323c 	.word	0x2004323c

0000199c <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    199c:	2827      	cmp	r0, #39	; 0x27
    199e:	d81c      	bhi.n	19da <pinMode+0x3e>
	p = digital_pin_to_info_PGM + pin;
    19a0:	0100      	lsls	r0, r0, #4
    19a2:	4a1a      	ldr	r2, [pc, #104]	; (1a0c <pinMode+0x70>)
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    19a4:	2901      	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    19a6:	eb02 0300 	add.w	r3, r2, r0
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    19aa:	5810      	ldr	r0, [r2, r0]
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}

void pinMode(uint8_t pin, uint8_t mode)
{
    19ac:	b410      	push	{r4}
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    19ae:	d015      	beq.n	19dc <pinMode+0x40>
    19b0:	2904      	cmp	r1, #4
    19b2:	d013      	beq.n	19dc <pinMode+0x40>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    19b4:	68dc      	ldr	r4, [r3, #12]
    19b6:	6842      	ldr	r2, [r0, #4]
    19b8:	ea22 0204 	bic.w	r2, r2, r4
    19bc:	6042      	str	r2, [r0, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    19be:	689a      	ldr	r2, [r3, #8]
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
    19c0:	b1e9      	cbz	r1, 19fe <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
    19c2:	2902      	cmp	r1, #2
    19c4:	d01e      	beq.n	1a04 <pinMode+0x68>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    19c6:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    19c8:	685b      	ldr	r3, [r3, #4]
}
    19ca:	f85d 4b04 	ldr.w	r4, [sp], #4
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    19ce:	bf0c      	ite	eq
    19d0:	490f      	ldreq	r1, [pc, #60]	; (1a10 <pinMode+0x74>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    19d2:	4910      	ldrne	r1, [pc, #64]	; (1a14 <pinMode+0x78>)
    19d4:	6011      	str	r1, [r2, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    19d6:	2215      	movs	r2, #21
    19d8:	601a      	str	r2, [r3, #0]
}
    19da:	4770      	bx	lr
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    19dc:	68da      	ldr	r2, [r3, #12]
		if (mode == OUTPUT) {
    19de:	2901      	cmp	r1, #1
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    19e0:	6844      	ldr	r4, [r0, #4]
    19e2:	ea42 0204 	orr.w	r2, r2, r4
    19e6:	6042      	str	r2, [r0, #4]
		if (mode == OUTPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    19e8:	689a      	ldr	r2, [r3, #8]

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
		if (mode == OUTPUT) {
    19ea:	d008      	beq.n	19fe <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    19ec:	f640 0138 	movw	r1, #2104	; 0x838
    19f0:	6011      	str	r1, [r2, #0]
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    19f2:	685b      	ldr	r3, [r3, #4]
    19f4:	2215      	movs	r2, #21
}
    19f6:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    19fa:	601a      	str	r2, [r3, #0]
}
    19fc:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    19fe:	2138      	movs	r1, #56	; 0x38
    1a00:	6011      	str	r1, [r2, #0]
    1a02:	e7f6      	b.n	19f2 <pinMode+0x56>
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    1a04:	4904      	ldr	r1, [pc, #16]	; (1a18 <pinMode+0x7c>)
    1a06:	6011      	str	r1, [r2, #0]
    1a08:	e7f3      	b.n	19f2 <pinMode+0x56>
    1a0a:	bf00      	nop
    1a0c:	200000cc 	.word	0x200000cc
    1a10:	00013038 	.word	0x00013038
    1a14:	00010038 	.word	0x00010038
    1a18:	0001f038 	.word	0x0001f038

00001a1c <unused_interrupt_vector>:
//  R0
// Code from :: https://community.nxp.com/thread/389002
__attribute__((naked))
void unused_interrupt_vector(void)
{
  __asm( ".syntax unified\n"
    1a1c:	2004      	movs	r0, #4
    1a1e:	4671      	mov	r1, lr
    1a20:	4208      	tst	r0, r1
    1a22:	d003      	beq.n	1a2c <_MSP>
    1a24:	f3ef 8009 	mrs	r0, PSP
    1a28:	f000 b808 	b.w	1a3c <HardFault_HandlerC>

00001a2c <_MSP>:
    1a2c:	f3ef 8008 	mrs	r0, MSP
    1a30:	f000 b804 	b.w	1a3c <HardFault_HandlerC>

00001a34 <startup_default_early_hook>:
         "B HardFault_HandlerC \n"
         "_MSP: \n"
         "MRS R0, MSP \n"
         "B HardFault_HandlerC \n"
         ".syntax divided\n") ;
}
    1a34:	4770      	bx	lr
    1a36:	bf00      	nop

00001a38 <startup_default_late_hook>:
uint8_t external_psram_size = 0;

extern int main (void);
void startup_default_early_hook(void) {}
void startup_early_hook(void)		__attribute__ ((weak, alias("startup_default_early_hook")));
void startup_default_late_hook(void) {}
    1a38:	4770      	bx	lr
    1a3a:	bf00      	nop

00001a3c <HardFault_HandlerC>:
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    1a3c:	4b1b      	ldr	r3, [pc, #108]	; (1aac <HardFault_HandlerC+0x70>)
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    1a3e:	2105      	movs	r1, #5
    1a40:	4a1b      	ldr	r2, [pc, #108]	; (1ab0 <HardFault_HandlerC+0x74>)
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    1a42:	2038      	movs	r0, #56	; 0x38
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    1a44:	b530      	push	{r4, r5, lr}
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    1a46:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
  GPIO2_DR_SET = (1 << 3);
    1a4a:	2108      	movs	r1, #8
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    1a4c:	f8c2 0338 	str.w	r0, [r2, #824]	; 0x338
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    1a50:	b083      	sub	sp, #12
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    1a52:	685a      	ldr	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    1a54:	4c17      	ldr	r4, [pc, #92]	; (1ab4 <HardFault_HandlerC+0x78>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    1a56:	430a      	orrs	r2, r1
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    1a58:	4817      	ldr	r0, [pc, #92]	; (1ab8 <HardFault_HandlerC+0x7c>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    1a5a:	605a      	str	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
    1a5c:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    1a60:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88

  if ( F_CPU_ACTUAL >= 600000000 )
    1a64:	6823      	ldr	r3, [r4, #0]
    1a66:	4283      	cmp	r3, r0
    1a68:	d902      	bls.n	1a70 <HardFault_HandlerC+0x34>
    set_arm_clock(300000000);
    1a6a:	4814      	ldr	r0, [pc, #80]	; (1abc <HardFault_HandlerC+0x80>)
    1a6c:	f7ff fd9c 	bl	15a8 <set_arm_clock>

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    1a70:	4d0e      	ldr	r5, [pc, #56]	; (1aac <HardFault_HandlerC+0x70>)
    1a72:	2408      	movs	r4, #8
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    1a74:	2000      	movs	r0, #0
    1a76:	4a12      	ldr	r2, [pc, #72]	; (1ac0 <HardFault_HandlerC+0x84>)
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    1a78:	4912      	ldr	r1, [pc, #72]	; (1ac4 <HardFault_HandlerC+0x88>)
  if ( F_CPU_ACTUAL >= 600000000 )
    set_arm_clock(300000000);

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    1a7a:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    1a7e:	9001      	str	r0, [sp, #4]
    1a80:	9b01      	ldr	r3, [sp, #4]
    1a82:	4293      	cmp	r3, r2
    1a84:	d805      	bhi.n	1a92 <HardFault_HandlerC+0x56>
    1a86:	9b01      	ldr	r3, [sp, #4]
    1a88:	3301      	adds	r3, #1
    1a8a:	9301      	str	r3, [sp, #4]
    1a8c:	9b01      	ldr	r3, [sp, #4]
    1a8e:	4293      	cmp	r3, r2
    1a90:	d9f9      	bls.n	1a86 <HardFault_HandlerC+0x4a>
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    1a92:	f8c5 4088 	str.w	r4, [r5, #136]	; 0x88
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    1a96:	9001      	str	r0, [sp, #4]
    1a98:	9b01      	ldr	r3, [sp, #4]
    1a9a:	428b      	cmp	r3, r1
    1a9c:	d8ed      	bhi.n	1a7a <HardFault_HandlerC+0x3e>
    1a9e:	9b01      	ldr	r3, [sp, #4]
    1aa0:	3301      	adds	r3, #1
    1aa2:	9301      	str	r3, [sp, #4]
    1aa4:	9b01      	ldr	r3, [sp, #4]
    1aa6:	428b      	cmp	r3, r1
    1aa8:	d9f9      	bls.n	1a9e <HardFault_HandlerC+0x62>
    1aaa:	e7e6      	b.n	1a7a <HardFault_HandlerC+0x3e>
    1aac:	401bc000 	.word	0x401bc000
    1ab0:	401f8000 	.word	0x401f8000
    1ab4:	2001224c 	.word	0x2001224c
    1ab8:	23c345ff 	.word	0x23c345ff
    1abc:	11e1a300 	.word	0x11e1a300
    1ac0:	000f423f 	.word	0x000f423f
    1ac4:	0089543f 	.word	0x0089543f

00001ac8 <Panic_Temp_isr>:

static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
    1ac8:	b672      	cpsid	i
  IOMUXC_GPR_GPR16 = 0x00000007;
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
    1aca:	4a06      	ldr	r2, [pc, #24]	; (1ae4 <Panic_Temp_isr+0x1c>)
static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
  IOMUXC_GPR_GPR16 = 0x00000007;
    1acc:	2107      	movs	r1, #7
    1ace:	4b06      	ldr	r3, [pc, #24]	; (1ae8 <Panic_Temp_isr+0x20>)
    1ad0:	6419      	str	r1, [r3, #64]	; 0x40
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
    1ad2:	6b93      	ldr	r3, [r2, #56]	; 0x38
    1ad4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1ad8:	6393      	str	r3, [r2, #56]	; 0x38
  asm volatile ("dsb":::"memory");
    1ada:	f3bf 8f4f 	dsb	sy
  while (1) asm ("wfi");
    1ade:	bf30      	wfi
    1ae0:	e7fd      	b.n	1ade <Panic_Temp_isr+0x16>
    1ae2:	bf00      	nop
    1ae4:	400d4000 	.word	0x400d4000
    1ae8:	400ac000 	.word	0x400ac000

00001aec <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    1aec:	6b83      	ldr	r3, [r0, #56]	; 0x38
	}
}
#endif

static void schedule_transfer(endpoint_t *endpoint, uint32_t epmask, transfer_t *transfer)
{
    1aee:	b4f0      	push	{r4, r5, r6, r7}
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    1af0:	b11b      	cbz	r3, 1afa <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    1af2:	6853      	ldr	r3, [r2, #4]
    1af4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    1af8:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    1afa:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    1afc:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    1afe:	b1dc      	cbz	r4, 1b38 <schedule_transfer+0x4c>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    1b00:	4b14      	ldr	r3, [pc, #80]	; (1b54 <schedule_transfer+0x68>)
	__disable_irq();
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
    1b02:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    1b04:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    1b08:	420c      	tst	r4, r1
    1b0a:	d11f      	bne.n	1b4c <schedule_transfer+0x60>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    1b0c:	4d12      	ldr	r5, [pc, #72]	; (1b58 <schedule_transfer+0x6c>)
    1b0e:	682f      	ldr	r7, [r5, #0]
    1b10:	e004      	b.n	1b1c <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    1b12:	682c      	ldr	r4, [r5, #0]
    1b14:	1be4      	subs	r4, r4, r7
    1b16:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
    1b1a:	d20b      	bcs.n	1b34 <schedule_transfer+0x48>
		if (USB1_ENDPTPRIME & epmask) goto end;
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    1b1c:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    1b20:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    1b24:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    1b28:	f8d3 61b8 	ldr.w	r6, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    1b2c:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    1b30:	0464      	lsls	r4, r4, #17
    1b32:	d5ee      	bpl.n	1b12 <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    1b34:	4231      	tst	r1, r6
    1b36:	d109      	bne.n	1b4c <schedule_transfer+0x60>
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
    1b38:	2300      	movs	r3, #0
	USB1_ENDPTPRIME |= epmask;
    1b3a:	4c06      	ldr	r4, [pc, #24]	; (1b54 <schedule_transfer+0x68>)
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
    1b3c:	6082      	str	r2, [r0, #8]
	endpoint->status = 0;
    1b3e:	60c3      	str	r3, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
    1b40:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1b44:	4319      	orrs	r1, r3
    1b46:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    1b4a:	6302      	str	r2, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
    1b4c:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    1b4e:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    1b50:	bcf0      	pop	{r4, r5, r6, r7}
    1b52:	4770      	bx	lr
    1b54:	402e0000 	.word	0x402e0000
    1b58:	e0001004 	.word	0xe0001004

00001b5c <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    1b5c:	b570      	push	{r4, r5, r6, lr}
    1b5e:	4606      	mov	r6, r0
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    1b60:	6b00      	ldr	r0, [r0, #48]	; 0x30
	if (first == NULL) return;
    1b62:	b190      	cbz	r0, 1b8a <run_callbacks+0x2e>
    1b64:	4602      	mov	r2, r0
    1b66:	2400      	movs	r4, #0
    1b68:	e003      	b.n	1b72 <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    1b6a:	6812      	ldr	r2, [r2, #0]
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
    1b6c:	3401      	adds	r4, #1
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
    1b6e:	2a01      	cmp	r2, #1
    1b70:	d00c      	beq.n	1b8c <run_callbacks+0x30>

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
	transfer_t *t = first;
	while (1) {
		if (t->status & (1<<7)) {
    1b72:	6853      	ldr	r3, [r2, #4]
    1b74:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    1b78:	d0f7      	beq.n	1b6a <run_callbacks+0xe>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
    1b7a:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    1b7c:	b12c      	cbz	r4, 1b8a <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
    1b7e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
			break;
		}
	}
	// do all the callbacks
	while (count) {
		transfer_t *next = (transfer_t *)first->next;
    1b80:	6805      	ldr	r5, [r0, #0]
		ep->callback_function(first);
    1b82:	4798      	blx	r3
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    1b84:	3c01      	subs	r4, #1
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
		first = next;
    1b86:	4628      	mov	r0, r5
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    1b88:	d1f9      	bne.n	1b7e <run_callbacks+0x22>
    1b8a:	bd70      	pop	{r4, r5, r6, pc}
		count++;
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
			// reached end of list, all need callbacks, new list is empty
			//printf(" end of list\n");
			ep->first_transfer = NULL;
    1b8c:	6333      	str	r3, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
    1b8e:	6373      	str	r3, [r6, #52]	; 0x34
			break;
    1b90:	e7f4      	b.n	1b7c <run_callbacks+0x20>
    1b92:	bf00      	nop

00001b94 <endpoint0_transmit.constprop.1>:
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
}

static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    1b94:	b5f0      	push	{r4, r5, r6, r7, lr}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
    1b96:	b9e1      	cbnz	r1, 1bd2 <endpoint0_transmit.constprop.1+0x3e>
    1b98:	4c21      	ldr	r4, [pc, #132]	; (1c20 <endpoint0_transmit.constprop.1+0x8c>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1b9a:	4922      	ldr	r1, [pc, #136]	; (1c24 <endpoint0_transmit.constprop.1+0x90>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1b9c:	2000      	movs	r0, #0
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1b9e:	4b22      	ldr	r3, [pc, #136]	; (1c28 <endpoint0_transmit.constprop.1+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1ba0:	2201      	movs	r2, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1ba2:	f04f 1501 	mov.w	r5, #65537	; 0x10001
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1ba6:	2680      	movs	r6, #128	; 0x80
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1ba8:	600a      	str	r2, [r1, #0]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
    1baa:	461a      	mov	r2, r3
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    1bac:	60a1      	str	r1, [r4, #8]
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1bae:	604e      	str	r6, [r1, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
    1bb0:	60e0      	str	r0, [r4, #12]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1bb2:	f8c3 51bc 	str.w	r5, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    1bb6:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    1bba:	4d1c      	ldr	r5, [pc, #112]	; (1c2c <endpoint0_transmit.constprop.1+0x98>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    1bbc:	f044 0401 	orr.w	r4, r4, #1
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1bc0:	6088      	str	r0, [r1, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    1bc2:	f8c3 41b0 	str.w	r4, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    1bc6:	6028      	str	r0, [r5, #0]
	while (USB1_ENDPTPRIME) ;
    1bc8:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    1bcc:	2b00      	cmp	r3, #0
    1bce:	d1fb      	bne.n	1bc8 <endpoint0_transmit.constprop.1+0x34>
}
    1bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    1bd2:	0409      	lsls	r1, r1, #16
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    1bd4:	4b16      	ldr	r3, [pc, #88]	; (1c30 <endpoint0_transmit.constprop.1+0x9c>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    1bd6:	4d14      	ldr	r5, [pc, #80]	; (1c28 <endpoint0_transmit.constprop.1+0x94>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    1bd8:	2601      	movs	r6, #1
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    1bda:	4c11      	ldr	r4, [pc, #68]	; (1c20 <endpoint0_transmit.constprop.1+0x8c>)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    1bdc:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    1be0:	2200      	movs	r2, #0
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    1be2:	601e      	str	r6, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    1be4:	6059      	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    1be6:	f500 5c80 	add.w	ip, r0, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    1bea:	64e2      	str	r2, [r4, #76]	; 0x4c
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    1bec:	f500 5e00 	add.w	lr, r0, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    1bf0:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    1bf2:	f500 5740 	add.w	r7, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    1bf6:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    1bfa:	f500 4680 	add.w	r6, r0, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
    1bfe:	462a      	mov	r2, r5
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    1c00:	6098      	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    1c02:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    1c06:	f8c3 c00c 	str.w	ip, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    1c0a:	f8c3 e010 	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    1c0e:	615f      	str	r7, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    1c10:	619e      	str	r6, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    1c12:	f8c5 11b0 	str.w	r1, [r5, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    1c16:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    1c1a:	2b00      	cmp	r3, #0
    1c1c:	d1fb      	bne.n	1c16 <endpoint0_transmit.constprop.1+0x82>
    1c1e:	e7bc      	b.n	1b9a <endpoint0_transmit.constprop.1+0x6>
    1c20:	20045000 	.word	0x20045000
    1c24:	20044020 	.word	0x20044020
    1c28:	402e0000 	.word	0x402e0000
    1c2c:	20043268 	.word	0x20043268
    1c30:	20044000 	.word	0x20044000

00001c34 <isr>:
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}


static void isr(void)
{
    1c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    1c38:	4cac      	ldr	r4, [pc, #688]	; (1eec <isr+0x2b8>)
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}


static void isr(void)
{
    1c3a:	b083      	sub	sp, #12
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    1c3c:	f8d4 8144 	ldr.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    1c40:	f018 0f01 	tst.w	r8, #1
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
	USB1_USBSTS = status;
    1c44:	f8c4 8144 	str.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    1c48:	d05e      	beq.n	1d08 <isr+0xd4>
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    1c4a:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1c4e:	2b00      	cmp	r3, #0
    1c50:	d055      	beq.n	1cfe <isr+0xca>
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    1c52:	f04f 1b01 	mov.w	fp, #65537	; 0x10001
    1c56:	f8df 92bc 	ldr.w	r9, [pc, #700]	; 1f14 <isr+0x2e0>
    1c5a:	4ea5      	ldr	r6, [pc, #660]	; (1ef0 <isr+0x2bc>)
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    1c5c:	4625      	mov	r5, r4
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    1c5e:	46da      	mov	sl, fp
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
    1c60:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
    1c64:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    1c66:	6af2      	ldr	r2, [r6, #44]	; 0x2c
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    1c68:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    1c6c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1c70:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    1c74:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    1c78:	049f      	lsls	r7, r3, #18
    1c7a:	d5f5      	bpl.n	1c68 <isr+0x34>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    1c7c:	f8d5 3140 	ldr.w	r3, [r5, #320]	; 0x140
    1c80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    1c84:	f8c5 3140 	str.w	r3, [r5, #320]	; 0x140
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    1c88:	f8c5 a1b4 	str.w	sl, [r5, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    1c8c:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    1c90:	f013 1301 	ands.w	r3, r3, #65537	; 0x10001
    1c94:	d1fa      	bne.n	1c8c <isr+0x58>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    1c96:	b281      	uxth	r1, r0
    1c98:	f240 6781 	movw	r7, #1665	; 0x681
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
    1c9c:	f8c9 3000 	str.w	r3, [r9]
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    1ca0:	42b9      	cmp	r1, r7
    1ca2:	f200 80b4 	bhi.w	1e0e <isr+0x1da>
    1ca6:	f5b1 6fd0 	cmp.w	r1, #1664	; 0x680
    1caa:	f080 81e9 	bcs.w	2080 <isr+0x44c>
    1cae:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
    1cb2:	f000 816b 	beq.w	1f8c <isr+0x358>
    1cb6:	f200 80f0 	bhi.w	1e9a <isr+0x266>
    1cba:	2980      	cmp	r1, #128	; 0x80
    1cbc:	f000 8159 	beq.w	1f72 <isr+0x33e>
    1cc0:	2982      	cmp	r1, #130	; 0x82
    1cc2:	f040 80e2 	bne.w	1e8a <isr+0x256>
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
    1cc6:	b292      	uxth	r2, r2
    1cc8:	f002 017f 	and.w	r1, r2, #127	; 0x7f
		if (endpoint > 7) break;
    1ccc:	2907      	cmp	r1, #7
    1cce:	f200 80dc 	bhi.w	1e8a <isr+0x256>
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    1cd2:	0089      	lsls	r1, r1, #2
    1cd4:	4887      	ldr	r0, [pc, #540]	; (1ef4 <isr+0x2c0>)
		reply_buffer[0] = 0;
    1cd6:	4f88      	ldr	r7, [pc, #544]	; (1ef8 <isr+0x2c4>)
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    1cd8:	4408      	add	r0, r1
    1cda:	6801      	ldr	r1, [r0, #0]
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    1cdc:	0610      	lsls	r0, r2, #24
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
    1cde:	703b      	strb	r3, [r7, #0]
		reply_buffer[1] = 0;
    1ce0:	707b      	strb	r3, [r7, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    1ce2:	f140 820c 	bpl.w	20fe <isr+0x4ca>
    1ce6:	03ca      	lsls	r2, r1, #15
    1ce8:	d501      	bpl.n	1cee <isr+0xba>
			reply_buffer[0] = 1;
    1cea:	2301      	movs	r3, #1
    1cec:	703b      	strb	r3, [r7, #0]
		}
		endpoint0_transmit(reply_buffer, 2, 0);
    1cee:	2102      	movs	r1, #2
    1cf0:	4881      	ldr	r0, [pc, #516]	; (1ef8 <isr+0x2c4>)
    1cf2:	f7ff ff4f 	bl	1b94 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1cf6:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1cfa:	2b00      	cmp	r3, #0
    1cfc:	d1b0      	bne.n	1c60 <isr+0x2c>
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    1cfe:	4a7b      	ldr	r2, [pc, #492]	; (1eec <isr+0x2b8>)
    1d00:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    1d04:	2b00      	cmp	r3, #0
    1d06:	d150      	bne.n	1daa <isr+0x176>
			}
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
    1d08:	f018 0f40 	tst.w	r8, #64	; 0x40
    1d0c:	d018      	beq.n	1d40 <isr+0x10c>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    1d0e:	4b77      	ldr	r3, [pc, #476]	; (1eec <isr+0x2b8>)
    1d10:	f8d3 11ac 	ldr.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    1d14:	461a      	mov	r2, r3
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    1d16:	f8c3 11ac 	str.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    1d1a:	f8d3 11bc 	ldr.w	r1, [r3, #444]	; 0x1bc
    1d1e:	f8c3 11bc 	str.w	r1, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    1d22:	f8d2 41b0 	ldr.w	r4, [r2, #432]	; 0x1b0
    1d26:	4b71      	ldr	r3, [pc, #452]	; (1eec <isr+0x2b8>)
    1d28:	2c00      	cmp	r4, #0
    1d2a:	d1fa      	bne.n	1d22 <isr+0xee>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    1d2c:	f04f 32ff 	mov.w	r2, #4294967295
    1d30:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    1d34:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
			// we took too long to respond :(
			// TODO; is this ever really a problem?
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
    1d38:	f000 fd1e 	bl	2778 <usb_serial_reset>
		#endif
		endpointN_notify_mask = 0;
    1d3c:	4b6f      	ldr	r3, [pc, #444]	; (1efc <isr+0x2c8>)
    1d3e:	601c      	str	r4, [r3, #0]
			// shut off USB - easier to see results in protocol analyzer
			//USB1_USBCMD &= ~USB_USBCMD_RS;
			//printf("shut off USB\n");
		//}
	}
	if (status & USB_USBSTS_TI0) {
    1d40:	f018 7f80 	tst.w	r8, #16777216	; 0x1000000
    1d44:	d003      	beq.n	1d4e <isr+0x11a>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    1d46:	4b6e      	ldr	r3, [pc, #440]	; (1f00 <isr+0x2cc>)
    1d48:	681b      	ldr	r3, [r3, #0]
    1d4a:	b103      	cbz	r3, 1d4e <isr+0x11a>
    1d4c:	4798      	blx	r3
	}
	if (status & USB_USBSTS_TI1) {
    1d4e:	f018 7f00 	tst.w	r8, #33554432	; 0x2000000
    1d52:	d003      	beq.n	1d5c <isr+0x128>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    1d54:	4b6b      	ldr	r3, [pc, #428]	; (1f04 <isr+0x2d0>)
    1d56:	681b      	ldr	r3, [r3, #0]
    1d58:	b103      	cbz	r3, 1d5c <isr+0x128>
    1d5a:	4798      	blx	r3
	}
	if (status & USB_USBSTS_PCI) {
    1d5c:	f018 0f04 	tst.w	r8, #4
    1d60:	d008      	beq.n	1d74 <isr+0x140>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    1d62:	4b62      	ldr	r3, [pc, #392]	; (1eec <isr+0x2b8>)
    1d64:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    1d68:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    1d6c:	d04c      	beq.n	1e08 <isr+0x1d4>
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
    1d6e:	4b66      	ldr	r3, [pc, #408]	; (1f08 <isr+0x2d4>)
    1d70:	2201      	movs	r2, #1
    1d72:	701a      	strb	r2, [r3, #0]
		//printf("suspend\n");
	}
	if (status & USB_USBSTS_UEI) {
		//printf("error\n");
	}
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    1d74:	4b5d      	ldr	r3, [pc, #372]	; (1eec <isr+0x2b8>)
    1d76:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    1d7a:	0612      	lsls	r2, r2, #24
    1d7c:	d512      	bpl.n	1da4 <isr+0x170>
    1d7e:	f018 0f80 	tst.w	r8, #128	; 0x80
    1d82:	d00f      	beq.n	1da4 <isr+0x170>
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
    1d84:	4961      	ldr	r1, [pc, #388]	; (1f0c <isr+0x2d8>)
    1d86:	780a      	ldrb	r2, [r1, #0]
    1d88:	b162      	cbz	r2, 1da4 <isr+0x170>
			if (--usb_reboot_timer == 0) {
    1d8a:	3a01      	subs	r2, #1
    1d8c:	b2d2      	uxtb	r2, r2
    1d8e:	700a      	strb	r2, [r1, #0]
    1d90:	b942      	cbnz	r2, 1da4 <isr+0x170>
	__enable_irq();
}

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
    1d92:	495f      	ldr	r1, [pc, #380]	; (1f10 <isr+0x2dc>)
    1d94:	780a      	ldrb	r2, [r1, #0]
    1d96:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    1d9a:	700a      	strb	r2, [r1, #0]
	if (sof_usage == 0) {
    1d9c:	2a00      	cmp	r2, #0
    1d9e:	f000 8232 	beq.w	2206 <isr+0x5d2>
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
			if (--usb_reboot_timer == 0) {
				usb_stop_sof_interrupts(NUM_INTERFACE);
				asm("bkpt #251"); // run bootloader
    1da2:	befb      	bkpt	0x00fb
		#endif
		#ifdef FLIGHTSIM_INTERFACE
		usb_flightsim_flush_output();
		#endif
	}
}
    1da4:	b003      	add	sp, #12
    1da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    1daa:	495a      	ldr	r1, [pc, #360]	; (1f14 <isr+0x2e0>)
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
    1dac:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    1db0:	6808      	ldr	r0, [r1, #0]
    1db2:	4203      	tst	r3, r0
    1db4:	f040 81e6 	bne.w	2184 <isr+0x550>
				endpoint0_notify_mask = 0;
				endpoint0_complete();
			}
			completestatus &= endpointN_notify_mask;
    1db8:	4a50      	ldr	r2, [pc, #320]	; (1efc <isr+0x2c8>)
    1dba:	6815      	ldr	r5, [r2, #0]
#if 1
			if (completestatus) {
    1dbc:	401d      	ands	r5, r3
    1dbe:	d0a3      	beq.n	1d08 <isr+0xd4>

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
    1dc0:	0c2f      	lsrs	r7, r5, #16
    1dc2:	d00f      	beq.n	1de4 <isr+0x1b0>
    1dc4:	4e4a      	ldr	r6, [pc, #296]	; (1ef0 <isr+0x2bc>)
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
    1dc6:	f04f 0901 	mov.w	r9, #1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
    1dca:	fa97 f4a7 	rbit	r4, r7
    1dce:	fab4 f484 	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    1dd2:	eb06 10c4 	add.w	r0, r6, r4, lsl #7
					tx &= ~(1<<p);
    1dd6:	fa09 f404 	lsl.w	r4, r9, r4

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    1dda:	3040      	adds	r0, #64	; 0x40
    1ddc:	f7ff febe 	bl	1b5c <run_callbacks>
#if 1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
    1de0:	43a7      	bics	r7, r4
    1de2:	d1f2      	bne.n	1dca <isr+0x196>
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
    1de4:	b2ad      	uxth	r5, r5
				while(rx) {
    1de6:	2d00      	cmp	r5, #0
    1de8:	d08e      	beq.n	1d08 <isr+0xd4>
    1dea:	4e41      	ldr	r6, [pc, #260]	; (1ef0 <isr+0x2bc>)
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
					rx &= ~(1<<p);
    1dec:	2701      	movs	r7, #1
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
    1dee:	fa95 f4a5 	rbit	r4, r5
    1df2:	fab4 f484 	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2);
    1df6:	eb06 10c4 	add.w	r0, r6, r4, lsl #7
					rx &= ~(1<<p);
    1dfa:	fa07 f404 	lsl.w	r4, r7, r4

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
    1dfe:	f7ff fead 	bl	1b5c <run_callbacks>
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
    1e02:	43a5      	bics	r5, r4
    1e04:	d1f3      	bne.n	1dee <isr+0x1ba>
    1e06:	e77f      	b.n	1d08 <isr+0xd4>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
		} else {
			//printf("port at 12 Mbit\n");
			usb_high_speed = 0;
    1e08:	4a3f      	ldr	r2, [pc, #252]	; (1f08 <isr+0x2d4>)
    1e0a:	7013      	strb	r3, [r2, #0]
    1e0c:	e7b2      	b.n	1d74 <isr+0x140>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    1e0e:	f242 0721 	movw	r7, #8225	; 0x2021
    1e12:	42b9      	cmp	r1, r7
    1e14:	d035      	beq.n	1e82 <isr+0x24e>
    1e16:	f200 8089 	bhi.w	1f2c <isr+0x2f8>
    1e1a:	f5b1 6f08 	cmp.w	r1, #2176	; 0x880
    1e1e:	f000 8121 	beq.w	2064 <isr+0x430>
    1e22:	f5b1 6f10 	cmp.w	r1, #2304	; 0x900
    1e26:	d130      	bne.n	1e8a <isr+0x256>
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    1e28:	f3c0 4007 	ubfx	r0, r0, #16, #8
    1e2c:	4a3a      	ldr	r2, [pc, #232]	; (1f18 <isr+0x2e4>)
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    1e2e:	493b      	ldr	r1, [pc, #236]	; (1f1c <isr+0x2e8>)
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    1e30:	7010      	strb	r0, [r2, #0]
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    1e32:	4f3b      	ldr	r7, [pc, #236]	; (1f20 <isr+0x2ec>)
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    1e34:	4a3b      	ldr	r2, [pc, #236]	; (1f24 <isr+0x2f0>)
    1e36:	9301      	str	r3, [sp, #4]
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    1e38:	f8c5 71c8 	str.w	r7, [r5, #456]	; 0x1c8
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    1e3c:	f8c5 11cc 	str.w	r1, [r5, #460]	; 0x1cc
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    1e40:	f8c5 21d0 	str.w	r2, [r5, #464]	; 0x1d0
		#endif
		#if defined(ENDPOINT7_CONFIG)
		USB1_ENDPTCTRL7 = ENDPOINT7_CONFIG;
		#endif
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_configure();
    1e44:	f000 fc9a 	bl	277c <usb_serial_configure>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1e48:	4a37      	ldr	r2, [pc, #220]	; (1f28 <isr+0x2f4>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    1e4a:	9b01      	ldr	r3, [sp, #4]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1e4c:	2180      	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1e4e:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1e50:	64b2      	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1e52:	6051      	str	r1, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1e54:	6010      	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    1e56:	64f3      	str	r3, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1e58:	f8c5 b1bc 	str.w	fp, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1e5c:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1e60:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    1e62:	f441 3280 	orr.w	r2, r1, #65536	; 0x10000
    1e66:	f8c5 21b0 	str.w	r2, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    1e6a:	4a2a      	ldr	r2, [pc, #168]	; (1f14 <isr+0x2e0>)
    1e6c:	6013      	str	r3, [r2, #0]
	while (USB1_ENDPTPRIME) ;
    1e6e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1e72:	2b00      	cmp	r3, #0
    1e74:	d1fb      	bne.n	1e6e <isr+0x23a>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1e76:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1e7a:	2b00      	cmp	r3, #0
    1e7c:	f47f aef0 	bne.w	1c60 <isr+0x2c>
    1e80:	e73d      	b.n	1cfe <isr+0xca>
		// fall through to next case, to always send ZLP ACK
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
    1e82:	0c11      	lsrs	r1, r2, #16
    1e84:	2907      	cmp	r1, #7
    1e86:	f000 813e 	beq.w	2106 <isr+0x4d2>
			return;
		}
		break;
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    1e8a:	f8c4 b1c0 	str.w	fp, [r4, #448]	; 0x1c0
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1e8e:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1e92:	2b00      	cmp	r3, #0
    1e94:	f47f aee4 	bne.w	1c60 <isr+0x2c>
    1e98:	e731      	b.n	1cfe <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    1e9a:	f240 3702 	movw	r7, #770	; 0x302
    1e9e:	42b9      	cmp	r1, r7
    1ea0:	f000 80b0 	beq.w	2004 <isr+0x3d0>
    1ea4:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
    1ea8:	d1ef      	bne.n	1e8a <isr+0x256>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1eaa:	4a1f      	ldr	r2, [pc, #124]	; (1f28 <isr+0x2f4>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1eac:	2180      	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1eae:	2701      	movs	r7, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    1eb0:	64f3      	str	r3, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1eb2:	64b2      	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1eb4:	6017      	str	r7, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1eb6:	6051      	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1eb8:	f8c5 b1bc 	str.w	fp, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1ebc:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1ec0:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    1ec2:	f441 3380 	orr.w	r3, r1, #65536	; 0x10000
    1ec6:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    1eca:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1ece:	2b00      	cmp	r3, #0
    1ed0:	d1fb      	bne.n	1eca <isr+0x296>

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    1ed2:	0c03      	lsrs	r3, r0, #16
    1ed4:	065b      	lsls	r3, r3, #25
    1ed6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    1eda:	f8c5 3154 	str.w	r3, [r5, #340]	; 0x154
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1ede:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1ee2:	2b00      	cmp	r3, #0
    1ee4:	f47f aebc 	bne.w	1c60 <isr+0x2c>
    1ee8:	e709      	b.n	1cfe <isr+0xca>
    1eea:	bf00      	nop
    1eec:	402e0000 	.word	0x402e0000
    1ef0:	20045000 	.word	0x20045000
    1ef4:	402e01c0 	.word	0x402e01c0
    1ef8:	20043278 	.word	0x20043278
    1efc:	20043258 	.word	0x20043258
    1f00:	20043254 	.word	0x20043254
    1f04:	20043260 	.word	0x20043260
    1f08:	20043264 	.word	0x20043264
    1f0c:	2004326c 	.word	0x2004326c
    1f10:	2004325c 	.word	0x2004325c
    1f14:	20043268 	.word	0x20043268
    1f18:	20043288 	.word	0x20043288
    1f1c:	000200c8 	.word	0x000200c8
    1f20:	00cc0002 	.word	0x00cc0002
    1f24:	00c80002 	.word	0x00c80002
    1f28:	20044020 	.word	0x20044020
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    1f2c:	f242 2321 	movw	r3, #8737	; 0x2221
    1f30:	4299      	cmp	r1, r3
    1f32:	d05b      	beq.n	1fec <isr+0x3b8>
    1f34:	f242 3321 	movw	r3, #8993	; 0x2321
    1f38:	4299      	cmp	r1, r3
    1f3a:	d1a6      	bne.n	1e8a <isr+0x256>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1f3c:	4bb5      	ldr	r3, [pc, #724]	; (2214 <isr+0x5e0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1f3e:	2280      	movs	r2, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    1f40:	2100      	movs	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1f42:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1f44:	64b3      	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1f46:	6018      	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1f48:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    1f4a:	64f1      	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1f4c:	f8c4 b1bc 	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1f50:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1f54:	6099      	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    1f56:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
    1f5a:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    1f5e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1f62:	2b00      	cmp	r3, #0
    1f64:	d1fb      	bne.n	1f5e <isr+0x32a>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1f66:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1f6a:	2b00      	cmp	r3, #0
    1f6c:	f47f ae78 	bne.w	1c60 <isr+0x2c>
    1f70:	e6c5      	b.n	1cfe <isr+0xca>
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    1f72:	4aa9      	ldr	r2, [pc, #676]	; (2218 <isr+0x5e4>)
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
    1f74:	2102      	movs	r1, #2
    1f76:	4610      	mov	r0, r2
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    1f78:	7013      	strb	r3, [r2, #0]
		reply_buffer[1] = 0;
    1f7a:	7053      	strb	r3, [r2, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    1f7c:	f7ff fe0a 	bl	1b94 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1f80:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1f84:	2b00      	cmp	r3, #0
    1f86:	f47f ae6b 	bne.w	1c60 <isr+0x2c>
    1f8a:	e6b8      	b.n	1cfe <isr+0xca>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    1f8c:	b292      	uxth	r2, r2
    1f8e:	f002 037f 	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    1f92:	2b07      	cmp	r3, #7
    1f94:	f63f af79 	bhi.w	1e8a <isr+0x256>
		dir = setup.wIndex & 0x80;
		if (dir) {
    1f98:	f012 0f80 	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    1f9c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1fa0:	4a9e      	ldr	r2, [pc, #632]	; (221c <isr+0x5e8>)
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1fa2:	f04f 0100 	mov.w	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1fa6:	f04f 0001 	mov.w	r0, #1
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    1faa:	441a      	add	r2, r3
    1fac:	6813      	ldr	r3, [r2, #0]
    1fae:	bf14      	ite	ne
    1fb0:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    1fb4:	f023 0301 	biceq.w	r3, r3, #1
    1fb8:	6013      	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1fba:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1fbc:	4b95      	ldr	r3, [pc, #596]	; (2214 <isr+0x5e0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    1fbe:	64f1      	str	r1, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1fc0:	64b3      	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1fc2:	6018      	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1fc4:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1fc6:	f8c4 b1bc 	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1fca:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1fce:	6099      	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    1fd0:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
    1fd4:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    1fd8:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1fdc:	2b00      	cmp	r3, #0
    1fde:	d1fb      	bne.n	1fd8 <isr+0x3a4>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1fe0:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1fe4:	2b00      	cmp	r3, #0
    1fe6:	f47f ae3b 	bne.w	1c60 <isr+0x2c>
    1fea:	e688      	b.n	1cfe <isr+0xca>
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    1fec:	b292      	uxth	r2, r2
    1fee:	2a00      	cmp	r2, #0
    1ff0:	d1a4      	bne.n	1f3c <isr+0x308>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    1ff2:	4b8b      	ldr	r3, [pc, #556]	; (2220 <isr+0x5ec>)
			usb_cdc_line_rtsdtr = setup.wValue;
    1ff4:	f3c0 4007 	ubfx	r0, r0, #16, #8
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    1ff8:	4a8a      	ldr	r2, [pc, #552]	; (2224 <isr+0x5f0>)
    1ffa:	6819      	ldr	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    1ffc:	4b8a      	ldr	r3, [pc, #552]	; (2228 <isr+0x5f4>)
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    1ffe:	6011      	str	r1, [r2, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    2000:	7018      	strb	r0, [r3, #0]
    2002:	e79b      	b.n	1f3c <isr+0x308>
			reply_buffer[0] = 1;
		}
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    2004:	b292      	uxth	r2, r2
    2006:	f002 037f 	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    200a:	2b07      	cmp	r3, #7
    200c:	f63f af3d 	bhi.w	1e8a <isr+0x256>
		dir = setup.wIndex & 0x80;
		if (dir) {
    2010:	f012 0f80 	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    2014:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2018:	4a80      	ldr	r2, [pc, #512]	; (221c <isr+0x5e8>)
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    201a:	f04f 0100 	mov.w	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    201e:	f04f 0001 	mov.w	r0, #1
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    2022:	441a      	add	r2, r3
    2024:	6813      	ldr	r3, [r2, #0]
    2026:	bf14      	ite	ne
    2028:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    202c:	f043 0301 	orreq.w	r3, r3, #1
    2030:	6013      	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2032:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2034:	4b77      	ldr	r3, [pc, #476]	; (2214 <isr+0x5e0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    2036:	64f1      	str	r1, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    2038:	64b3      	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    203a:	6018      	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    203c:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    203e:	f8c4 b1bc 	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    2042:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    2046:	6099      	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    2048:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
    204c:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    2050:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2054:	2b00      	cmp	r3, #0
    2056:	d1fb      	bne.n	2050 <isr+0x41c>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    2058:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    205c:	2b00      	cmp	r3, #0
    205e:	f47f adff 	bne.w	1c60 <isr+0x2c>
    2062:	e64c      	b.n	1cfe <isr+0xca>
		usb_audio_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    2064:	4a71      	ldr	r2, [pc, #452]	; (222c <isr+0x5f8>)
		endpoint0_transmit(reply_buffer, 1, 0);
    2066:	2101      	movs	r1, #1
		usb_audio_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    2068:	4b6b      	ldr	r3, [pc, #428]	; (2218 <isr+0x5e4>)
    206a:	7812      	ldrb	r2, [r2, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    206c:	4618      	mov	r0, r3
		usb_audio_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    206e:	701a      	strb	r2, [r3, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    2070:	f7ff fd90 	bl	1b94 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    2074:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    2078:	2b00      	cmp	r3, #0
    207a:	f47f adf1 	bne.w	1c60 <isr+0x2c>
    207e:	e63e      	b.n	1cfe <isr+0xca>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    2080:	4b6b      	ldr	r3, [pc, #428]	; (2230 <isr+0x5fc>)
    2082:	6859      	ldr	r1, [r3, #4]
    2084:	2900      	cmp	r1, #0
    2086:	f43f af00 	beq.w	1e8a <isr+0x256>
    208a:	0c00      	lsrs	r0, r0, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    208c:	fa1f fe82 	uxth.w	lr, r2
    2090:	e004      	b.n	209c <isr+0x468>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    2092:	330c      	adds	r3, #12
    2094:	6859      	ldr	r1, [r3, #4]
    2096:	2900      	cmp	r1, #0
    2098:	f43f aef7 	beq.w	1e8a <isr+0x256>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    209c:	881f      	ldrh	r7, [r3, #0]
    209e:	4287      	cmp	r7, r0
    20a0:	d1f7      	bne.n	2092 <isr+0x45e>
    20a2:	885f      	ldrh	r7, [r3, #2]
    20a4:	4577      	cmp	r7, lr
    20a6:	d1f4      	bne.n	2092 <isr+0x45e>
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
    20a8:	0a07      	lsrs	r7, r0, #8
    20aa:	2f03      	cmp	r7, #3
    20ac:	f000 80e9 	beq.w	2282 <isr+0x64e>
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
    20b0:	891b      	ldrh	r3, [r3, #8]
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    20b2:	0c12      	lsrs	r2, r2, #16
    20b4:	4293      	cmp	r3, r2
    20b6:	bf28      	it	cs
    20b8:	4613      	movcs	r3, r2

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
    20ba:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    20be:	f000 80d1 	beq.w	2264 <isr+0x630>
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
    20c2:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
    20c6:	f000 808b 	beq.w	21e0 <isr+0x5ac>
    20ca:	4f5a      	ldr	r7, [pc, #360]	; (2234 <isr+0x600>)
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
					usb_descriptor_buffer[1] = 7;
				} else {
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    20cc:	461a      	mov	r2, r3
    20ce:	9301      	str	r3, [sp, #4]
    20d0:	4638      	mov	r0, r7
    20d2:	f000 ff2b 	bl	2f2c <memcpy>
    20d6:	9b01      	ldr	r3, [sp, #4]
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    20d8:	f027 021f 	bic.w	r2, r7, #31
	uint32_t end_addr = (uint32_t)addr + size;
    20dc:	441f      	add	r7, r3
	asm volatile("": : :"memory");
	asm("dsb");
    20de:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    20e2:	4955      	ldr	r1, [pc, #340]	; (2238 <isr+0x604>)
    20e4:	600a      	str	r2, [r1, #0]
		location += 32;
    20e6:	3220      	adds	r2, #32
	} while (location < end_addr);
    20e8:	4297      	cmp	r7, r2
    20ea:	d8fa      	bhi.n	20e2 <isr+0x4ae>
	asm("dsb");
    20ec:	f3bf 8f4f 	dsb	sy
	asm("isb");
    20f0:	f3bf 8f6f 	isb	sy
				}
				// prep transmit
				arm_dcache_flush_delete(usb_descriptor_buffer, datalen);
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    20f4:	484f      	ldr	r0, [pc, #316]	; (2234 <isr+0x600>)
    20f6:	4619      	mov	r1, r3
    20f8:	f7ff fd4c 	bl	1b94 <endpoint0_transmit.constprop.1>
    20fc:	e5fb      	b.n	1cf6 <isr+0xc2>
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    20fe:	07cb      	lsls	r3, r1, #31
    2100:	f57f adf5 	bpl.w	1cee <isr+0xba>
    2104:	e5f1      	b.n	1cea <isr+0xb6>
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    2106:	4f4d      	ldr	r7, [pc, #308]	; (223c <isr+0x608>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    2108:	f04f 0e01 	mov.w	lr, #1
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
    210c:	60f3      	str	r3, [r6, #12]
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    210e:	494c      	ldr	r1, [pc, #304]	; (2240 <isr+0x60c>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    2110:	4b4c      	ldr	r3, [pc, #304]	; (2244 <isr+0x610>)
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    2112:	6038      	str	r0, [r7, #0]
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    2114:	f8c3 e000 	str.w	lr, [r3]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    2118:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    211a:	60b3      	str	r3, [r6, #8]
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
    211c:	494a      	ldr	r1, [pc, #296]	; (2248 <isr+0x614>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    211e:	f8d5 01b0 	ldr.w	r0, [r5, #432]	; 0x1b0
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    2122:	607a      	str	r2, [r7, #4]
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    2124:	f501 5780 	add.w	r7, r1, #4096	; 0x1000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    2128:	ea40 020e 	orr.w	r2, r0, lr
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    212c:	6099      	str	r1, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    212e:	f501 5e00 	add.w	lr, r1, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    2132:	f501 5040 	add.w	r0, r1, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    2136:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    213a:	f8c5 21b0 	str.w	r2, [r5, #432]	; 0x1b0
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    213e:	60df      	str	r7, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    2140:	f8c3 e010 	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    2144:	6158      	str	r0, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    2146:	6199      	str	r1, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
    2148:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    214c:	2b00      	cmp	r3, #0
    214e:	d1fb      	bne.n	2148 <isr+0x514>
	}
	endpoint0_transfer_ack.next = 1;
    2150:	4a30      	ldr	r2, [pc, #192]	; (2214 <isr+0x5e0>)
    2152:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2154:	f248 0180 	movw	r1, #32896	; 0x8080
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    2158:	64f3      	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    215a:	6010      	str	r0, [r2, #0]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    215c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    2160:	64b2      	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2162:	6051      	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    2164:	f8c5 b1bc 	str.w	fp, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    2168:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    216c:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    216e:	ea41 0300 	orr.w	r3, r1, r0
    2172:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    2176:	f8c9 0000 	str.w	r0, [r9]
	while (USB1_ENDPTPRIME) ;
    217a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    217e:	2b00      	cmp	r3, #0
    2180:	d1fb      	bne.n	217a <isr+0x546>
    2182:	e5b8      	b.n	1cf6 <isr+0xc2>

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    2184:	482d      	ldr	r0, [pc, #180]	; (223c <isr+0x608>)
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    2186:	f242 0421 	movw	r4, #8225	; 0x2021
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    218a:	2600      	movs	r6, #0

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    218c:	8805      	ldrh	r5, [r0, #0]
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    218e:	600e      	str	r6, [r1, #0]

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    2190:	42a5      	cmp	r5, r4

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    2192:	6840      	ldr	r0, [r0, #4]
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    2194:	f47f ae10 	bne.w	1db8 <isr+0x184>
    2198:	b281      	uxth	r1, r0
    219a:	2900      	cmp	r1, #0
    219c:	f47f ae0c 	bne.w	1db8 <isr+0x184>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    21a0:	4929      	ldr	r1, [pc, #164]	; (2248 <isr+0x614>)
    21a2:	4c2a      	ldr	r4, [pc, #168]	; (224c <isr+0x618>)
    21a4:	c903      	ldmia	r1, {r0, r1}
    21a6:	0c0d      	lsrs	r5, r1, #16
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    21a8:	2886      	cmp	r0, #134	; 0x86
	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    21aa:	6020      	str	r0, [r4, #0]
    21ac:	80a1      	strh	r1, [r4, #4]
    21ae:	71a5      	strb	r5, [r4, #6]
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    21b0:	f47f ae02 	bne.w	1db8 <isr+0x184>
}


void usb_start_sof_interrupts(int interface)
{
	__disable_irq();
    21b4:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    21b6:	4826      	ldr	r0, [pc, #152]	; (2250 <isr+0x61c>)
    21b8:	7801      	ldrb	r1, [r0, #0]
    21ba:	f041 0104 	orr.w	r1, r1, #4
    21be:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    21c0:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    21c4:	0608      	lsls	r0, r1, #24
    21c6:	d406      	bmi.n	21d6 <isr+0x5a2>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    21c8:	f041 0180 	orr.w	r1, r1, #128	; 0x80
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    21cc:	2080      	movs	r0, #128	; 0x80
    21ce:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    21d2:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	}
	__enable_irq();
    21d6:	b662      	cpsie	i
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
			usb_start_sof_interrupts(NUM_INTERFACE);
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    21d8:	4a1e      	ldr	r2, [pc, #120]	; (2254 <isr+0x620>)
    21da:	2150      	movs	r1, #80	; 0x50
    21dc:	7011      	strb	r1, [r2, #0]
    21de:	e5eb      	b.n	1db8 <isr+0x184>
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    21e0:	481d      	ldr	r0, [pc, #116]	; (2258 <isr+0x624>)
					memcpy(usb_descriptor_buffer, src, datalen);
    21e2:	461a      	mov	r2, r3
    21e4:	4f13      	ldr	r7, [pc, #76]	; (2234 <isr+0x600>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    21e6:	f890 e000 	ldrb.w	lr, [r0]
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
    21ea:	491c      	ldr	r1, [pc, #112]	; (225c <isr+0x628>)
    21ec:	481c      	ldr	r0, [pc, #112]	; (2260 <isr+0x62c>)
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
    21ee:	9301      	str	r3, [sp, #4]
    21f0:	f1be 0f00 	cmp.w	lr, #0
    21f4:	bf08      	it	eq
    21f6:	4601      	moveq	r1, r0
    21f8:	4638      	mov	r0, r7
    21fa:	f000 fe97 	bl	2f2c <memcpy>
					usb_descriptor_buffer[1] = 7;
    21fe:	2207      	movs	r2, #7
    2200:	9b01      	ldr	r3, [sp, #4]
    2202:	707a      	strb	r2, [r7, #1]
    2204:	e768      	b.n	20d8 <isr+0x4a4>

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
	if (sof_usage == 0) {
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    2206:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    220a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    220e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    2212:	e5c6      	b.n	1da2 <isr+0x16e>
    2214:	20044020 	.word	0x20044020
    2218:	20043278 	.word	0x20043278
    221c:	402e01c0 	.word	0x402e01c0
    2220:	20043240 	.word	0x20043240
    2224:	20045288 	.word	0x20045288
    2228:	200433c8 	.word	0x200433c8
    222c:	20043288 	.word	0x20043288
    2230:	2000034c 	.word	0x2000034c
    2234:	20200000 	.word	0x20200000
    2238:	e000ef70 	.word	0xe000ef70
    223c:	20043270 	.word	0x20043270
    2240:	00070080 	.word	0x00070080
    2244:	20044000 	.word	0x20044000
    2248:	20043280 	.word	0x20043280
    224c:	20045280 	.word	0x20045280
    2250:	2004325c 	.word	0x2004325c
    2254:	2004326c 	.word	0x2004326c
    2258:	20043264 	.word	0x20043264
    225c:	60001694 	.word	0x60001694
    2260:	600016d8 	.word	0x600016d8

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
    2264:	480a      	ldr	r0, [pc, #40]	; (2290 <isr+0x65c>)
					memcpy(usb_descriptor_buffer, src, datalen);
    2266:	461a      	mov	r2, r3
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    2268:	490a      	ldr	r1, [pc, #40]	; (2294 <isr+0x660>)
					if (usb_high_speed) src = usb_config_descriptor_480;
    226a:	7807      	ldrb	r7, [r0, #0]
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    226c:	480a      	ldr	r0, [pc, #40]	; (2298 <isr+0x664>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
    226e:	9301      	str	r3, [sp, #4]
    2270:	2f00      	cmp	r7, #0
    2272:	bf08      	it	eq
    2274:	4601      	moveq	r1, r0
    2276:	4809      	ldr	r0, [pc, #36]	; (229c <isr+0x668>)
    2278:	f000 fe58 	bl	2f2c <memcpy>
    227c:	4f07      	ldr	r7, [pc, #28]	; (229c <isr+0x668>)
    227e:	9b01      	ldr	r3, [sp, #4]
    2280:	e72a      	b.n	20d8 <isr+0x4a4>
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    2282:	0c12      	lsrs	r2, r2, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
    2284:	780b      	ldrb	r3, [r1, #0]
    2286:	4293      	cmp	r3, r2
    2288:	bf28      	it	cs
    228a:	4613      	movcs	r3, r2
    228c:	e719      	b.n	20c2 <isr+0x48e>
    228e:	bf00      	nop
    2290:	20043264 	.word	0x20043264
    2294:	600016d8 	.word	0x600016d8
    2298:	60001694 	.word	0x60001694
    229c:	20200000 	.word	0x20200000

000022a0 <usb_config_rx>:
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    22a0:	2a00      	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    22a2:	f1a0 0202 	sub.w	r2, r0, #2
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    22a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    22aa:	bf14      	ite	ne
    22ac:	2700      	movne	r7, #0
    22ae:	f04f 5700 	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    22b2:	2a02      	cmp	r2, #2
    22b4:	d901      	bls.n	22ba <usb_config_rx+0x1a>
    22b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    22ba:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
    22be:	f8df 9040 	ldr.w	r9, [pc, #64]	; 2300 <usb_config_rx+0x60>
    22c2:	460d      	mov	r5, r1
    22c4:	4604      	mov	r4, r0
    22c6:	eb0a 0609 	add.w	r6, sl, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    22ca:	2100      	movs	r1, #0
    22cc:	2240      	movs	r2, #64	; 0x40
    22ce:	4698      	mov	r8, r3
    22d0:	4630      	mov	r0, r6
    22d2:	f001 f8fb 	bl	34cc <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    22d6:	2001      	movs	r0, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    22d8:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
    22dc:	f84a 1009 	str.w	r1, [sl, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    22e0:	f8c6 8038 	str.w	r8, [r6, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    22e4:	60b0      	str	r0, [r6, #8]
void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
    22e6:	f1b8 0f00 	cmp.w	r8, #0
    22ea:	d0e4      	beq.n	22b6 <usb_config_rx+0x16>
    22ec:	4b03      	ldr	r3, [pc, #12]	; (22fc <usb_config_rx+0x5c>)
    22ee:	40a0      	lsls	r0, r4
    22f0:	681c      	ldr	r4, [r3, #0]
    22f2:	4320      	orrs	r0, r4
    22f4:	6018      	str	r0, [r3, #0]
    22f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    22fa:	bf00      	nop
    22fc:	20043258 	.word	0x20043258
    2300:	20045000 	.word	0x20045000

00002304 <usb_config_tx>:
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    2304:	2a00      	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    2306:	f1a0 0202 	sub.w	r2, r0, #2
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    230a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    230e:	bf14      	ite	ne
    2310:	2700      	movne	r7, #0
    2312:	f04f 5700 	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    2316:	2a02      	cmp	r2, #2
    2318:	d901      	bls.n	231e <usb_config_tx+0x1a>
    231a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    231e:	2240      	movs	r2, #64	; 0x40

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    2320:	01c5      	lsls	r5, r0, #7
    2322:	f8df 9044 	ldr.w	r9, [pc, #68]	; 2368 <usb_config_tx+0x64>
    2326:	4688      	mov	r8, r1
    2328:	4415      	add	r5, r2
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    232a:	2100      	movs	r1, #0
    232c:	4604      	mov	r4, r0
    232e:	461e      	mov	r6, r3

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    2330:	eb05 0a09 	add.w	sl, r5, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    2334:	4650      	mov	r0, sl
    2336:	f001 f8c9 	bl	34cc <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    233a:	2201      	movs	r2, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    233c:	ea47 4108 	orr.w	r1, r7, r8, lsl #16
    2340:	f845 1009 	str.w	r1, [r5, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    2344:	f8ca 6038 	str.w	r6, [sl, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    2348:	f8ca 2008 	str.w	r2, [sl, #8]
void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    234c:	2e00      	cmp	r6, #0
    234e:	d0e4      	beq.n	231a <usb_config_tx+0x16>
    2350:	f104 0010 	add.w	r0, r4, #16
    2354:	4b03      	ldr	r3, [pc, #12]	; (2364 <usb_config_tx+0x60>)
    2356:	4082      	lsls	r2, r0
    2358:	6818      	ldr	r0, [r3, #0]
    235a:	4302      	orrs	r2, r0
    235c:	601a      	str	r2, [r3, #0]
    235e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2362:	bf00      	nop
    2364:	20043258 	.word	0x20043258
    2368:	20045000 	.word	0x20045000

0000236c <usb_prepare_transfer>:


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    236c:	0412      	lsls	r2, r2, #16
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
    236e:	6081      	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
	transfer->pointer3 = addr + 12288;
	transfer->pointer4 = addr + 16384;
	transfer->callback_param = param;
    2370:	61c3      	str	r3, [r0, #28]


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    2372:	f042 0280 	orr.w	r2, r2, #128	; 0x80
}



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
    2376:	b4f0      	push	{r4, r5, r6, r7}
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    2378:	6042      	str	r2, [r0, #4]



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    237a:	2701      	movs	r7, #1
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    237c:	f501 5680 	add.w	r6, r1, #4096	; 0x1000
	transfer->pointer2 = addr + 8192;
    2380:	f501 5500 	add.w	r5, r1, #8192	; 0x2000
	transfer->pointer3 = addr + 12288;
    2384:	f501 5440 	add.w	r4, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    2388:	f501 4280 	add.w	r2, r1, #16384	; 0x4000



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    238c:	6007      	str	r7, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    238e:	60c6      	str	r6, [r0, #12]
	transfer->pointer2 = addr + 8192;
    2390:	6105      	str	r5, [r0, #16]
	transfer->pointer3 = addr + 12288;
    2392:	6144      	str	r4, [r0, #20]
	transfer->pointer4 = addr + 16384;
    2394:	6182      	str	r2, [r0, #24]
	transfer->callback_param = param;
}
    2396:	bcf0      	pop	{r4, r5, r6, r7}
    2398:	4770      	bx	lr
    239a:	bf00      	nop

0000239c <usb_transmit>:
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    239c:	1e83      	subs	r3, r0, #2
    239e:	2b02      	cmp	r3, #2
    23a0:	d900      	bls.n	23a4 <usb_transmit+0x8>
    23a2:	4770      	bx	lr
		count--;
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    23a4:	b430      	push	{r4, r5}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    23a6:	4b06      	ldr	r3, [pc, #24]	; (23c0 <usb_transmit+0x24>)
    23a8:	f100 0410 	add.w	r4, r0, #16
    23ac:	2501      	movs	r5, #1
    23ae:	460a      	mov	r2, r1
    23b0:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    23b4:	fa05 f104 	lsl.w	r1, r5, r4
}
    23b8:	bc30      	pop	{r4, r5}
void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    23ba:	f7ff bb97 	b.w	1aec <schedule_transfer>
    23be:	bf00      	nop
    23c0:	20045040 	.word	0x20045040

000023c4 <usb_receive>:
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    23c4:	1e83      	subs	r3, r0, #2
    23c6:	2b02      	cmp	r3, #2
    23c8:	d900      	bls.n	23cc <usb_receive+0x8>
    23ca:	4770      	bx	lr
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
    23cc:	b410      	push	{r4}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    23ce:	4b05      	ldr	r3, [pc, #20]	; (23e4 <usb_receive+0x20>)
    23d0:	2401      	movs	r4, #1
    23d2:	460a      	mov	r2, r1
    23d4:	fa04 f100 	lsl.w	r1, r4, r0
    23d8:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
}
    23dc:	f85d 4b04 	ldr.w	r4, [sp], #4
void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    23e0:	f7ff bb84 	b.w	1aec <schedule_transfer>
    23e4:	20045000 	.word	0x20045000

000023e8 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    23e8:	6840      	ldr	r0, [r0, #4]
#endif
}
    23ea:	4770      	bx	lr

000023ec <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    23ec:	4a12      	ldr	r2, [pc, #72]	; (2438 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    23ee:	4b13      	ldr	r3, [pc, #76]	; (243c <usb_init_serialnumber+0x50>)
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    23f0:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    23f4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    23f8:	4298      	cmp	r0, r3
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    23fa:	b510      	push	{r4, lr}
    23fc:	b084      	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    23fe:	d802      	bhi.n	2406 <usb_init_serialnumber+0x1a>
    2400:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    2404:	0040      	lsls	r0, r0, #1
    2406:	4c0e      	ldr	r4, [pc, #56]	; (2440 <usb_init_serialnumber+0x54>)
	ultoa(num, buf, 10);
    2408:	a901      	add	r1, sp, #4
    240a:	220a      	movs	r2, #10
    240c:	f000 fe28 	bl	3060 <ultoa>
    2410:	a901      	add	r1, sp, #4
	for (i=0; i<10; i++) {
    2412:	2300      	movs	r3, #0
    2414:	4620      	mov	r0, r4
		char c = buf[i];
    2416:	f811 2b01 	ldrb.w	r2, [r1], #1
    241a:	3301      	adds	r3, #1
		if (!c) break;
    241c:	b13a      	cbz	r2, 242e <usb_init_serialnumber+0x42>

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    241e:	2b0a      	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    2420:	f820 2f02 	strh.w	r2, [r0, #2]!

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    2424:	d1f7      	bne.n	2416 <usb_init_serialnumber+0x2a>
    2426:	2316      	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    2428:	7023      	strb	r3, [r4, #0]
}
    242a:	b004      	add	sp, #16
    242c:	bd10      	pop	{r4, pc}
    242e:	005b      	lsls	r3, r3, #1
    2430:	b2db      	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    2432:	7023      	strb	r3, [r4, #0]
}
    2434:	b004      	add	sp, #16
    2436:	bd10      	pop	{r4, pc}
    2438:	401f4400 	.word	0x401f4400
    243c:	0098967f 	.word	0x0098967f
    2440:	20012264 	.word	0x20012264

00002444 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    2444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    2446:	4914      	ldr	r1, [pc, #80]	; (2498 <rx_queue_transfer+0x54>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    2448:	f44f 3700 	mov.w	r7, #131072	; 0x20000
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    244c:	4d13      	ldr	r5, [pc, #76]	; (249c <rx_queue_transfer+0x58>)
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    244e:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    2450:	eb01 2440 	add.w	r4, r1, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    2454:	4e12      	ldr	r6, [pc, #72]	; (24a0 <rx_queue_transfer+0x5c>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    2456:	4a13      	ldr	r2, [pc, #76]	; (24a4 <rx_queue_transfer+0x60>)
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    2458:	eb05 1540 	add.w	r5, r5, r0, lsl #5
    245c:	4621      	mov	r1, r4
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    245e:	6017      	str	r7, [r2, #0]
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    2460:	4628      	mov	r0, r5
    2462:	8832      	ldrh	r2, [r6, #0]
    2464:	f7ff ff82 	bl	236c <usb_prepare_transfer>
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    2468:	8831      	ldrh	r1, [r6, #0]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    246a:	f024 031f 	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    246e:	4421      	add	r1, r4
	asm volatile("": : :"memory");
	asm("dsb");
    2470:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    2474:	4a0c      	ldr	r2, [pc, #48]	; (24a8 <rx_queue_transfer+0x64>)
    2476:	6013      	str	r3, [r2, #0]
		location += 32;
    2478:	3320      	adds	r3, #32
	} while (location < end_addr);
    247a:	4299      	cmp	r1, r3
    247c:	d8fb      	bhi.n	2476 <rx_queue_transfer+0x32>
	asm("dsb");
    247e:	f3bf 8f4f 	dsb	sy
	asm("isb");
    2482:	f3bf 8f6f 	isb	sy
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    2486:	2003      	movs	r0, #3
    2488:	4629      	mov	r1, r5
    248a:	f7ff ff9b 	bl	23c4 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    248e:	4b07      	ldr	r3, [pc, #28]	; (24ac <rx_queue_transfer+0x68>)
    2490:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    2494:	601a      	str	r2, [r3, #0]
    2496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2498:	20200060 	.word	0x20200060
    249c:	200432a0 	.word	0x200432a0
    24a0:	200433ae 	.word	0x200433ae
    24a4:	e000e18c 	.word	0xe000e18c
    24a8:	e000ef5c 	.word	0xe000ef5c
    24ac:	e000e10c 	.word	0xe000e10c

000024b0 <rx_event>:
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    24b0:	4a24      	ldr	r2, [pc, #144]	; (2544 <rx_event+0x94>)
    24b2:	6843      	ldr	r3, [r0, #4]
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
    24b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    24b8:	f3c3 430e 	ubfx	r3, r3, #16, #15
    24bc:	8814      	ldrh	r4, [r2, #0]
	int i = t->callback_param;
    24be:	69c5      	ldr	r5, [r0, #28]
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    24c0:	1ae4      	subs	r4, r4, r3
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    24c2:	2c00      	cmp	r4, #0
    24c4:	dd38      	ble.n	2538 <rx_event+0x88>
		// received a packet with data
		uint32_t head = rx_head;
    24c6:	4920      	ldr	r1, [pc, #128]	; (2548 <rx_event+0x98>)
		if (head != rx_tail) {
    24c8:	4a20      	ldr	r2, [pc, #128]	; (254c <rx_event+0x9c>)
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    24ca:	780b      	ldrb	r3, [r1, #0]
		if (head != rx_tail) {
    24cc:	7812      	ldrb	r2, [r2, #0]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    24ce:	b2db      	uxtb	r3, r3
		if (head != rx_tail) {
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    24d0:	481f      	ldr	r0, [pc, #124]	; (2550 <rx_event+0xa0>)
			uint32_t count = rx_count[ii];
    24d2:	4e20      	ldr	r6, [pc, #128]	; (2554 <rx_event+0xa4>)
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
		if (head != rx_tail) {
    24d4:	4293      	cmp	r3, r2
    24d6:	d007      	beq.n	24e8 <rx_event+0x38>
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    24d8:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    24dc:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    24e0:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    24e4:	4294      	cmp	r4, r2
    24e6:	d912      	bls.n	250e <rx_event+0x5e>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    24e8:	3301      	adds	r3, #1
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
    24ea:	2200      	movs	r2, #0
    24ec:	4f1a      	ldr	r7, [pc, #104]	; (2558 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    24ee:	2b08      	cmp	r3, #8
				// TODO: trigger serialEvent
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
    24f0:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		rx_index[i] = 0;
    24f4:	f827 2015 	strh.w	r2, [r7, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
		rx_head = head;
		rx_available += len;
    24f8:	4e18      	ldr	r6, [pc, #96]	; (255c <rx_event+0xac>)
    24fa:	bf94      	ite	ls
    24fc:	b2da      	uxtbls	r2, r3
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    24fe:	4613      	movhi	r3, r2
		rx_list[head] = i;
		rx_head = head;
    2500:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    2502:	6832      	ldr	r2, [r6, #0]
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
    2504:	54c5      	strb	r5, [r0, r3]
		rx_head = head;
		rx_available += len;
    2506:	4414      	add	r4, r2
    2508:	6034      	str	r4, [r6, #0]
    250a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    250e:	4b14      	ldr	r3, [pc, #80]	; (2560 <rx_event+0xb0>)
    2510:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    2514:	4622      	mov	r2, r4
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    2516:	4427      	add	r7, r4
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    2518:	eb03 2145 	add.w	r1, r3, r5, lsl #9
    251c:	4418      	add	r0, r3
    251e:	f000 fd05 	bl	2f2c <memcpy>
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
    2522:	4a0e      	ldr	r2, [pc, #56]	; (255c <rx_event+0xac>)
				rx_queue_transfer(i);
    2524:	4628      	mov	r0, r5
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    2526:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    252a:	6813      	ldr	r3, [r2, #0]
    252c:	441c      	add	r4, r3
    252e:	6014      	str	r4, [r2, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    2530:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
				rx_queue_transfer(i);
    2534:	f7ff bf86 	b.w	2444 <rx_queue_transfer>
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    2538:	4628      	mov	r0, r5
	}
}
    253a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    253e:	f7ff bf81 	b.w	2444 <rx_queue_transfer>
    2542:	bf00      	nop
    2544:	200433ae 	.word	0x200433ae
    2548:	200433c4 	.word	0x200433c4
    254c:	200433a0 	.word	0x200433a0
    2550:	200433a4 	.word	0x200433a4
    2554:	200433b0 	.word	0x200433b0
    2558:	2004328c 	.word	0x2004328c
    255c:	200433c0 	.word	0x200433c0
    2560:	20200060 	.word	0x20200060

00002564 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    2564:	4b1e      	ldr	r3, [pc, #120]	; (25e0 <usb_serial_flush_callback+0x7c>)
    2566:	781a      	ldrb	r2, [r3, #0]
    2568:	b95a      	cbnz	r2, 2582 <usb_serial_flush_callback+0x1e>
    256a:	f002 03ff 	and.w	r3, r2, #255	; 0xff
	if (!usb_configuration) return;
    256e:	4a1d      	ldr	r2, [pc, #116]	; (25e4 <usb_serial_flush_callback+0x80>)
    2570:	7812      	ldrb	r2, [r2, #0]
    2572:	b132      	cbz	r2, 2582 <usb_serial_flush_callback+0x1e>
	tx_available = 0;
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
    2574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
    2578:	4d1b      	ldr	r5, [pc, #108]	; (25e8 <usb_serial_flush_callback+0x84>)
    257a:	882a      	ldrh	r2, [r5, #0]
    257c:	b912      	cbnz	r2, 2584 <usb_serial_flush_callback+0x20>
    257e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2582:	4770      	bx	lr
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    2584:	4e19      	ldr	r6, [pc, #100]	; (25ec <usb_serial_flush_callback+0x88>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    2586:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    258a:	4f19      	ldr	r7, [pc, #100]	; (25f0 <usb_serial_flush_callback+0x8c>)
    258c:	7831      	ldrb	r1, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    258e:	4642      	mov	r2, r8
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    2590:	4c18      	ldr	r4, [pc, #96]	; (25f4 <usb_serial_flush_callback+0x90>)
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    2592:	eb07 1741 	add.w	r7, r7, r1, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    2596:	eb04 24c1 	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    259a:	4638      	mov	r0, r7
    259c:	4621      	mov	r1, r4
    259e:	f7ff fee5 	bl	236c <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    25a2:	eb08 0204 	add.w	r2, r8, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    25a6:	f024 011f 	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    25aa:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    25ae:	4b12      	ldr	r3, [pc, #72]	; (25f8 <usb_serial_flush_callback+0x94>)
    25b0:	6019      	str	r1, [r3, #0]
		location += 32;
    25b2:	3120      	adds	r1, #32
	} while (location < end_addr);
    25b4:	428a      	cmp	r2, r1
    25b6:	d8fb      	bhi.n	25b0 <usb_serial_flush_callback+0x4c>
	asm("dsb");
    25b8:	f3bf 8f4f 	dsb	sy
	asm("isb");
    25bc:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    25c0:	2004      	movs	r0, #4
    25c2:	4639      	mov	r1, r7
    25c4:	f7ff feea 	bl	239c <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    25c8:	7833      	ldrb	r3, [r6, #0]
    25ca:	4a08      	ldr	r2, [pc, #32]	; (25ec <usb_serial_flush_callback+0x88>)
    25cc:	3301      	adds	r3, #1
    25ce:	b2db      	uxtb	r3, r3
    25d0:	2b03      	cmp	r3, #3
    25d2:	bf88      	it	hi
    25d4:	2300      	movhi	r3, #0
    25d6:	7013      	strb	r3, [r2, #0]
	tx_available = 0;
    25d8:	2300      	movs	r3, #0
    25da:	802b      	strh	r3, [r5, #0]
    25dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    25e0:	2004329e 	.word	0x2004329e
    25e4:	20043288 	.word	0x20043288
    25e8:	200433c6 	.word	0x200433c6
    25ec:	2004329f 	.word	0x2004329f
    25f0:	200433e0 	.word	0x200433e0
    25f4:	20201060 	.word	0x20201060
    25f8:	e000ef70 	.word	0xe000ef70

000025fc <usb_serial_write.part.1>:
{
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
    25fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2600:	b085      	sub	sp, #20
    2602:	9002      	str	r0, [sp, #8]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    2604:	9101      	str	r1, [sp, #4]
    2606:	2900      	cmp	r1, #0
    2608:	f000 80a2 	beq.w	2750 <usb_serial_write.part.1+0x154>
    260c:	2300      	movs	r3, #0
    260e:	f8df 815c 	ldr.w	r8, [pc, #348]	; 276c <usb_serial_write.part.1+0x170>
    2612:	f8df 914c 	ldr.w	r9, [pc, #332]	; 2760 <usb_serial_write.part.1+0x164>
    2616:	9300      	str	r3, [sp, #0]
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
    2618:	4e4e      	ldr	r6, [pc, #312]	; (2754 <usb_serial_write.part.1+0x158>)
    261a:	f8b8 3000 	ldrh.w	r3, [r8]
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    261e:	f8df a150 	ldr.w	sl, [pc, #336]	; 2770 <usb_serial_write.part.1+0x174>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
	do {
		SCB_CACHE_DCCIMVAC = location;
    2622:	f8df b150 	ldr.w	fp, [pc, #336]	; 2774 <usb_serial_write.part.1+0x178>
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
    2626:	4a4c      	ldr	r2, [pc, #304]	; (2758 <usb_serial_write.part.1+0x15c>)
    2628:	7814      	ldrb	r4, [r2, #0]
    262a:	4a4c      	ldr	r2, [pc, #304]	; (275c <usb_serial_write.part.1+0x160>)
    262c:	eb02 1744 	add.w	r7, r2, r4, lsl #5
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    2630:	2b00      	cmp	r3, #0
    2632:	d16e      	bne.n	2712 <usb_serial_write.part.1+0x116>
    2634:	461d      	mov	r5, r3
    2636:	461c      	mov	r4, r3
    2638:	e014      	b.n	2664 <usb_serial_write.part.1+0x68>
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    263a:	f899 3000 	ldrb.w	r3, [r9]
				}
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
    263e:	b904      	cbnz	r4, 2642 <usb_serial_write.part.1+0x46>
				wait_begin_at = systick_millis_count;
    2640:	6835      	ldr	r5, [r6, #0]
    2642:	2401      	movs	r4, #1
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    2644:	2b00      	cmp	r3, #0
    2646:	d15e      	bne.n	2706 <usb_serial_write.part.1+0x10a>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    2648:	6833      	ldr	r3, [r6, #0]
    264a:	1b5b      	subs	r3, r3, r5
    264c:	2b78      	cmp	r3, #120	; 0x78
    264e:	d879      	bhi.n	2744 <usb_serial_write.part.1+0x148>
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    2650:	f89a 3000 	ldrb.w	r3, [sl]
    2654:	2b00      	cmp	r3, #0
    2656:	d056      	beq.n	2706 <usb_serial_write.part.1+0x10a>
			yield();
    2658:	f000 fbf0 	bl	2e3c <yield>
	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    265c:	f8b8 3000 	ldrh.w	r3, [r8]
    2660:	2b00      	cmp	r3, #0
    2662:	d154      	bne.n	270e <usb_serial_write.part.1+0x112>
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
    2664:	4638      	mov	r0, r7
    2666:	f7ff febf 	bl	23e8 <usb_transfer_status>
			if (!(status & 0x80)) {
    266a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    266e:	4a3c      	ldr	r2, [pc, #240]	; (2760 <usb_serial_write.part.1+0x164>)
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
			if (!(status & 0x80)) {
    2670:	d1e3      	bne.n	263a <usb_serial_write.part.1+0x3e>
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    2672:	f44f 6300 	mov.w	r3, #2048	; 0x800
    2676:	4a38      	ldr	r2, [pc, #224]	; (2758 <usb_serial_write.part.1+0x15c>)
				transmit_previous_timeout = 0;
    2678:	f889 0000 	strb.w	r0, [r9]
    267c:	7814      	ldrb	r4, [r2, #0]
    267e:	461a      	mov	r2, r3
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    2680:	f8a8 3000 	strh.w	r3, [r8]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    2684:	02e4      	lsls	r4, r4, #11
		if (size >= tx_available) {
    2686:	9d01      	ldr	r5, [sp, #4]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    2688:	4936      	ldr	r1, [pc, #216]	; (2764 <usb_serial_write.part.1+0x168>)
    268a:	4420      	add	r0, r4
		if (size >= tx_available) {
    268c:	4295      	cmp	r5, r2
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    268e:	4408      	add	r0, r1
		if (size >= tx_available) {
    2690:	d343      	bcc.n	271a <usb_serial_write.part.1+0x11e>
			memcpy(txdata, data, tx_available);
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    2692:	440c      	add	r4, r1
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
    2694:	9902      	ldr	r1, [sp, #8]
    2696:	f000 fc49 	bl	2f2c <memcpy>
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    269a:	2300      	movs	r3, #0
    269c:	4621      	mov	r1, r4
    269e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    26a2:	4638      	mov	r0, r7
    26a4:	f7ff fe62 	bl	236c <usb_prepare_transfer>
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    26a8:	f024 031f 	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    26ac:	f504 6400 	add.w	r4, r4, #2048	; 0x800
	asm volatile("": : :"memory");
	asm("dsb");
    26b0:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    26b4:	f8cb 3000 	str.w	r3, [fp]
		location += 32;
    26b8:	3320      	adds	r3, #32
	} while (location < end_addr);
    26ba:	429c      	cmp	r4, r3
    26bc:	d8fa      	bhi.n	26b4 <usb_serial_write.part.1+0xb8>
	asm("dsb");
    26be:	f3bf 8f4f 	dsb	sy
	asm("isb");
    26c2:	f3bf 8f6f 	isb	sy
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    26c6:	2004      	movs	r0, #4
    26c8:	4639      	mov	r1, r7
    26ca:	f7ff fe67 	bl	239c <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    26ce:	4b22      	ldr	r3, [pc, #136]	; (2758 <usb_serial_write.part.1+0x15c>)
    26d0:	4a21      	ldr	r2, [pc, #132]	; (2758 <usb_serial_write.part.1+0x15c>)
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
    26d2:	2100      	movs	r1, #0
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    26d4:	781b      	ldrb	r3, [r3, #0]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    26d6:	4824      	ldr	r0, [pc, #144]	; (2768 <usb_serial_write.part.1+0x16c>)
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    26d8:	3301      	adds	r3, #1
    26da:	b2db      	uxtb	r3, r3
    26dc:	2b03      	cmp	r3, #3
    26de:	bf88      	it	hi
    26e0:	2300      	movhi	r3, #0
    26e2:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    26e4:	f8b8 2000 	ldrh.w	r2, [r8]
			sent += tx_available;
    26e8:	9b00      	ldr	r3, [sp, #0]
			data += tx_available;
			tx_available = 0;
    26ea:	f8a8 1000 	strh.w	r1, [r8]
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
			sent += tx_available;
    26ee:	4413      	add	r3, r2
    26f0:	9300      	str	r3, [sp, #0]
			data += tx_available;
    26f2:	9b02      	ldr	r3, [sp, #8]
    26f4:	4413      	add	r3, r2
    26f6:	9302      	str	r3, [sp, #8]
    26f8:	460b      	mov	r3, r1
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    26fa:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    26fe:	9901      	ldr	r1, [sp, #4]
    2700:	1a8a      	subs	r2, r1, r2
    2702:	9201      	str	r2, [sp, #4]
    2704:	d18f      	bne.n	2626 <usb_serial_write.part.1+0x2a>
    2706:	9800      	ldr	r0, [sp, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    2708:	b005      	add	sp, #20
    270a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    270e:	4a12      	ldr	r2, [pc, #72]	; (2758 <usb_serial_write.part.1+0x15c>)
    2710:	7814      	ldrb	r4, [r2, #0]
    2712:	461a      	mov	r2, r3
    2714:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    2718:	e7b4      	b.n	2684 <usb_serial_write.part.1+0x88>
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
    271a:	9c01      	ldr	r4, [sp, #4]
    271c:	9902      	ldr	r1, [sp, #8]
    271e:	4622      	mov	r2, r4
    2720:	9303      	str	r3, [sp, #12]
    2722:	f000 fc03 	bl	2f2c <memcpy>
			tx_available -= size;
    2726:	9b03      	ldr	r3, [sp, #12]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    2728:	4a0f      	ldr	r2, [pc, #60]	; (2768 <usb_serial_write.part.1+0x16c>)
    272a:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
    272e:	1b1b      	subs	r3, r3, r4
    2730:	f8a8 3000 	strh.w	r3, [r8]
    2734:	9b00      	ldr	r3, [sp, #0]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    2736:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    273a:	4618      	mov	r0, r3
    273c:	4420      	add	r0, r4
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    273e:	b005      	add	sp, #20
    2740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    2744:	2301      	movs	r3, #1
				return sent;
    2746:	9800      	ldr	r0, [sp, #0]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    2748:	7013      	strb	r3, [r2, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    274a:	b005      	add	sp, #20
    274c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    2750:	9801      	ldr	r0, [sp, #4]
    2752:	e7d9      	b.n	2708 <usb_serial_write.part.1+0x10c>
    2754:	20043240 	.word	0x20043240
    2758:	2004329f 	.word	0x2004329f
    275c:	200433e0 	.word	0x200433e0
    2760:	200433c5 	.word	0x200433c5
    2764:	20201060 	.word	0x20201060
    2768:	402e0000 	.word	0x402e0000
    276c:	200433c6 	.word	0x200433c6
    2770:	20043288 	.word	0x20043288
    2774:	e000ef70 	.word	0xe000ef70

00002778 <usb_serial_reset>:
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);


void usb_serial_reset(void)
{
    2778:	4770      	bx	lr
    277a:	bf00      	nop

0000277c <usb_serial_configure>:
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    277c:	4b31      	ldr	r3, [pc, #196]	; (2844 <usb_serial_configure+0xc8>)
	printf("usb_serial_reset\n");
	// deallocate all transfer descriptors
}

void usb_serial_configure(void)
{
    277e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    2782:	781b      	ldrb	r3, [r3, #0]
		tx_packet_size = CDC_TX_SIZE_480;
    2784:	4f30      	ldr	r7, [pc, #192]	; (2848 <usb_serial_configure+0xcc>)
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    2786:	2b00      	cmp	r3, #0
    2788:	d054      	beq.n	2834 <usb_serial_configure+0xb8>
		tx_packet_size = CDC_TX_SIZE_480;
    278a:	f44f 7300 	mov.w	r3, #512	; 0x200
		rx_packet_size = CDC_RX_SIZE_480;
    278e:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 287c <usb_serial_configure+0x100>
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
    2792:	803b      	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    2794:	f8a8 3000 	strh.w	r3, [r8]
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    2798:	2100      	movs	r1, #0
    279a:	2280      	movs	r2, #128	; 0x80
    279c:	482b      	ldr	r0, [pc, #172]	; (284c <usb_serial_configure+0xd0>)
	tx_head = 0;
    279e:	460d      	mov	r5, r1
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    27a0:	4e2b      	ldr	r6, [pc, #172]	; (2850 <usb_serial_configure+0xd4>)
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    27a2:	f000 fe93 	bl	34cc <memset>
	tx_head = 0;
    27a6:	4c2b      	ldr	r4, [pc, #172]	; (2854 <usb_serial_configure+0xd8>)
	tx_available = 0;
    27a8:	4b2b      	ldr	r3, [pc, #172]	; (2858 <usb_serial_configure+0xdc>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    27aa:	4629      	mov	r1, r5
    27ac:	f44f 7280 	mov.w	r2, #256	; 0x100
    27b0:	482a      	ldr	r0, [pc, #168]	; (285c <usb_serial_configure+0xe0>)
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    27b2:	7025      	strb	r5, [r4, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    27b4:	462c      	mov	r4, r5
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    27b6:	801d      	strh	r5, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    27b8:	f000 fe88 	bl	34cc <memset>
	memset(rx_count, 0, sizeof(rx_count));
    27bc:	6035      	str	r5, [r6, #0]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    27be:	462b      	mov	r3, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    27c0:	6075      	str	r5, [r6, #4]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    27c2:	462a      	mov	r2, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    27c4:	60b5      	str	r5, [r6, #8]
    27c6:	60f5      	str	r5, [r6, #12]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    27c8:	4925      	ldr	r1, [pc, #148]	; (2860 <usb_serial_configure+0xe4>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    27ca:	4e26      	ldr	r6, [pc, #152]	; (2864 <usb_serial_configure+0xe8>)
	rx_head = 0;
	rx_tail = 0;
    27cc:	4826      	ldr	r0, [pc, #152]	; (2868 <usb_serial_configure+0xec>)
	rx_available = 0;
    27ce:	f8df e0b0 	ldr.w	lr, [pc, #176]	; 2880 <usb_serial_configure+0x104>
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    27d2:	700d      	strb	r5, [r1, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    27d4:	2110      	movs	r1, #16
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
    27d6:	7005      	strb	r5, [r0, #0]
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    27d8:	2002      	movs	r0, #2
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    27da:	6035      	str	r5, [r6, #0]
    27dc:	6075      	str	r5, [r6, #4]
    27de:	60b5      	str	r5, [r6, #8]
    27e0:	60f5      	str	r5, [r6, #12]
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
    27e2:	f8ce 5000 	str.w	r5, [lr]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    27e6:	f7ff fd8d 	bl	2304 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    27ea:	f8b8 1000 	ldrh.w	r1, [r8]
    27ee:	462a      	mov	r2, r5
    27f0:	4b1e      	ldr	r3, [pc, #120]	; (286c <usb_serial_configure+0xf0>)
    27f2:	2003      	movs	r0, #3
    27f4:	f7ff fd54 	bl	22a0 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    27f8:	462b      	mov	r3, r5
    27fa:	8839      	ldrh	r1, [r7, #0]
    27fc:	2201      	movs	r2, #1
    27fe:	2004      	movs	r0, #4
    2800:	f7ff fd80 	bl	2304 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    2804:	4620      	mov	r0, r4
    2806:	3401      	adds	r4, #1
    2808:	f7ff fe1c 	bl	2444 <rx_queue_transfer>
    280c:	2c08      	cmp	r4, #8
    280e:	d1f9      	bne.n	2804 <usb_serial_configure+0x88>
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
	USB1_GPTIMER0CTRL = 0;
    2810:	4b17      	ldr	r3, [pc, #92]	; (2870 <usb_serial_configure+0xf4>)
	USB1_GPTIMER0LD = microseconds - 1;
    2812:	224a      	movs	r2, #74	; 0x4a
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    2814:	4817      	ldr	r0, [pc, #92]	; (2874 <usb_serial_configure+0xf8>)
	USB1_GPTIMER0CTRL = 0;
    2816:	2100      	movs	r1, #0
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    2818:	4c17      	ldr	r4, [pc, #92]	; (2878 <usb_serial_configure+0xfc>)
    281a:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    281c:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    2820:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    2824:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    2828:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    282c:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    2830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    2834:	2340      	movs	r3, #64	; 0x40
		rx_packet_size = CDC_RX_SIZE_12;
    2836:	f8df 8044 	ldr.w	r8, [pc, #68]	; 287c <usb_serial_configure+0x100>
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    283a:	803b      	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_12;
    283c:	f8a8 3000 	strh.w	r3, [r8]
    2840:	e7aa      	b.n	2798 <usb_serial_configure+0x1c>
    2842:	bf00      	nop
    2844:	20043264 	.word	0x20043264
    2848:	2004329c 	.word	0x2004329c
    284c:	200433e0 	.word	0x200433e0
    2850:	200433b0 	.word	0x200433b0
    2854:	2004329f 	.word	0x2004329f
    2858:	200433c6 	.word	0x200433c6
    285c:	200432a0 	.word	0x200432a0
    2860:	200433c4 	.word	0x200433c4
    2864:	2004328c 	.word	0x2004328c
    2868:	200433a0 	.word	0x200433a0
    286c:	000024b1 	.word	0x000024b1
    2870:	402e0000 	.word	0x402e0000
    2874:	20043254 	.word	0x20043254
    2878:	00002565 	.word	0x00002565
    287c:	200433ae 	.word	0x200433ae
    2880:	200433c0 	.word	0x200433c0

00002884 <usb_serial_read>:
int usb_serial_read(void *buffer, uint32_t size)
{
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    2884:	4b31      	ldr	r3, [pc, #196]	; (294c <usb_serial_read+0xc8>)
    2886:	f44f 3200 	mov.w	r2, #131072	; 0x20000

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    288a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    288e:	601a      	str	r2, [r3, #0]

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    2890:	b083      	sub	sp, #12
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    2892:	4b2f      	ldr	r3, [pc, #188]	; (2950 <usb_serial_read+0xcc>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    2894:	4689      	mov	r9, r1
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    2896:	781c      	ldrb	r4, [r3, #0]
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    2898:	2900      	cmp	r1, #0
    289a:	d053      	beq.n	2944 <usb_serial_read+0xc0>
    289c:	4b2d      	ldr	r3, [pc, #180]	; (2954 <usb_serial_read+0xd0>)
    289e:	b2e4      	uxtb	r4, r4
    28a0:	781b      	ldrb	r3, [r3, #0]
    28a2:	429c      	cmp	r4, r3
    28a4:	d050      	beq.n	2948 <usb_serial_read+0xc4>
    28a6:	4682      	mov	sl, r0
    28a8:	2700      	movs	r7, #0
    28aa:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 296c <usb_serial_read+0xe8>
		if (++tail > RX_NUM) tail = 0;
    28ae:	3401      	adds	r4, #1
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    28b0:	4b29      	ldr	r3, [pc, #164]	; (2958 <usb_serial_read+0xd4>)
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
    28b2:	ebc7 0809 	rsb	r8, r7, r9
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    28b6:	4650      	mov	r0, sl
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    28b8:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    28ba:	9301      	str	r3, [sp, #4]
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
    28bc:	4b27      	ldr	r3, [pc, #156]	; (295c <usb_serial_read+0xd8>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    28be:	bf28      	it	cs
    28c0:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    28c2:	5d1d      	ldrb	r5, [r3, r4]
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    28c4:	4b24      	ldr	r3, [pc, #144]	; (2958 <usb_serial_read+0xd4>)
    28c6:	f833 e015 	ldrh.w	lr, [r3, r5, lsl #1]
    28ca:	4b25      	ldr	r3, [pc, #148]	; (2960 <usb_serial_read+0xdc>)
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    28cc:	eb0e 2145 	add.w	r1, lr, r5, lsl #9
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    28d0:	f833 6015 	ldrh.w	r6, [r3, r5, lsl #1]
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    28d4:	4b23      	ldr	r3, [pc, #140]	; (2964 <usb_serial_read+0xe0>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    28d6:	ebce 0606 	rsb	r6, lr, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    28da:	4419      	add	r1, r3
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    28dc:	45b0      	cmp	r8, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    28de:	4632      	mov	r2, r6
			p += avail;
			rx_available -= avail;
			count += avail;
    28e0:	4437      	add	r7, r6
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    28e2:	d219      	bcs.n	2918 <usb_serial_read+0x94>
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    28e4:	eb0e 2145 	add.w	r1, lr, r5, lsl #9
    28e8:	4642      	mov	r2, r8
    28ea:	4419      	add	r1, r3
    28ec:	f000 fb1e 	bl	2f2c <memcpy>
			rx_available -= len;
			rx_index[i] += len;
    28f0:	9b01      	ldr	r3, [sp, #4]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    28f2:	f8db 1000 	ldr.w	r1, [fp]
    28f6:	4648      	mov	r0, r9
			rx_index[i] += len;
    28f8:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    28fc:	ebc8 0101 	rsb	r1, r8, r1
			rx_index[i] += len;
    2900:	4490      	add	r8, r2
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    2902:	f8cb 1000 	str.w	r1, [fp]
			rx_index[i] += len;
    2906:	f823 8015 	strh.w	r8, [r3, r5, lsl #1]
			count += avail;
			rx_tail = tail;
			rx_queue_transfer(i);
		}
	}
	NVIC_ENABLE_IRQ(IRQ_USB1);
    290a:	4b17      	ldr	r3, [pc, #92]	; (2968 <usb_serial_read+0xe4>)
    290c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    2910:	601a      	str	r2, [r3, #0]
	return count;
}
    2912:	b003      	add	sp, #12
    2914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    2918:	f000 fb08 	bl	2f2c <memcpy>
			p += avail;
			rx_available -= avail;
    291c:	f8db 2000 	ldr.w	r2, [fp]
			count += avail;
			rx_tail = tail;
    2920:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
    2922:	4628      	mov	r0, r5
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
			rx_available -= avail;
    2924:	1b92      	subs	r2, r2, r6
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
    2926:	44b2      	add	sl, r6
			rx_available -= avail;
    2928:	f8cb 2000 	str.w	r2, [fp]
			count += avail;
			rx_tail = tail;
    292c:	4a08      	ldr	r2, [pc, #32]	; (2950 <usb_serial_read+0xcc>)
    292e:	7013      	strb	r3, [r2, #0]
			rx_queue_transfer(i);
    2930:	f7ff fd88 	bl	2444 <rx_queue_transfer>

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    2934:	45b9      	cmp	r9, r7
    2936:	d903      	bls.n	2940 <usb_serial_read+0xbc>
    2938:	4b06      	ldr	r3, [pc, #24]	; (2954 <usb_serial_read+0xd0>)
    293a:	781b      	ldrb	r3, [r3, #0]
    293c:	429c      	cmp	r4, r3
    293e:	d1b6      	bne.n	28ae <usb_serial_read+0x2a>
    2940:	4638      	mov	r0, r7
    2942:	e7e2      	b.n	290a <usb_serial_read+0x86>
    2944:	4608      	mov	r0, r1
    2946:	e7e0      	b.n	290a <usb_serial_read+0x86>
    2948:	2000      	movs	r0, #0
    294a:	e7de      	b.n	290a <usb_serial_read+0x86>
    294c:	e000e18c 	.word	0xe000e18c
    2950:	200433a0 	.word	0x200433a0
    2954:	200433c4 	.word	0x200433c4
    2958:	2004328c 	.word	0x2004328c
    295c:	200433a4 	.word	0x200433a4
    2960:	200433b0 	.word	0x200433b0
    2964:	20200060 	.word	0x20200060
    2968:	e000e10c 	.word	0xe000e10c
    296c:	200433c0 	.word	0x200433c0

00002970 <usb_serial_peekchar>:
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    2970:	4b0b      	ldr	r3, [pc, #44]	; (29a0 <usb_serial_peekchar+0x30>)
	if (tail == rx_head) return -1;
    2972:	4a0c      	ldr	r2, [pc, #48]	; (29a4 <usb_serial_peekchar+0x34>)
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    2974:	781b      	ldrb	r3, [r3, #0]
	if (tail == rx_head) return -1;
    2976:	7812      	ldrb	r2, [r2, #0]
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    2978:	b2db      	uxtb	r3, r3
	if (tail == rx_head) return -1;
    297a:	4293      	cmp	r3, r2
    297c:	d00d      	beq.n	299a <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    297e:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    2980:	4809      	ldr	r0, [pc, #36]	; (29a8 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    2982:	4a0a      	ldr	r2, [pc, #40]	; (29ac <usb_serial_peekchar+0x3c>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    2984:	2b09      	cmp	r3, #9
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    2986:	490a      	ldr	r1, [pc, #40]	; (29b0 <usb_serial_peekchar+0x40>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    2988:	bf28      	it	cs
    298a:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    298c:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    298e:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
    2992:	eb02 2343 	add.w	r3, r2, r3, lsl #9
    2996:	5c58      	ldrb	r0, [r3, r1]
    2998:	4770      	bx	lr

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
    299a:	f04f 30ff 	mov.w	r0, #4294967295
	if (++tail > RX_NUM) tail = 0;
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
}
    299e:	4770      	bx	lr
    29a0:	200433a0 	.word	0x200433a0
    29a4:	200433c4 	.word	0x200433c4
    29a8:	200433a4 	.word	0x200433a4
    29ac:	20200060 	.word	0x20200060
    29b0:	2004328c 	.word	0x2004328c

000029b4 <usb_serial_available>:

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	return rx_available;
    29b4:	4b01      	ldr	r3, [pc, #4]	; (29bc <usb_serial_available+0x8>)
    29b6:	6818      	ldr	r0, [r3, #0]
}
    29b8:	4770      	bx	lr
    29ba:	bf00      	nop
    29bc:	200433c0 	.word	0x200433c0

000029c0 <usb_serial_flush_input>:

// discard any buffered input
void usb_serial_flush_input(void)
{
    29c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    29c4:	4e15      	ldr	r6, [pc, #84]	; (2a1c <usb_serial_flush_input+0x5c>)
	while (tail != rx_head) {
    29c6:	4d16      	ldr	r5, [pc, #88]	; (2a20 <usb_serial_flush_input+0x60>)
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    29c8:	7834      	ldrb	r4, [r6, #0]
	while (tail != rx_head) {
    29ca:	782b      	ldrb	r3, [r5, #0]
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    29cc:	b2e4      	uxtb	r4, r4
	while (tail != rx_head) {
    29ce:	429c      	cmp	r4, r3
    29d0:	d021      	beq.n	2a16 <usb_serial_flush_input+0x56>
    29d2:	f8df 9054 	ldr.w	r9, [pc, #84]	; 2a28 <usb_serial_flush_input+0x68>
    29d6:	f8df b054 	ldr.w	fp, [pc, #84]	; 2a2c <usb_serial_flush_input+0x6c>
    29da:	f8df 8054 	ldr.w	r8, [pc, #84]	; 2a30 <usb_serial_flush_input+0x70>
    29de:	4f11      	ldr	r7, [pc, #68]	; (2a24 <usb_serial_flush_input+0x64>)
		if (++tail > RX_NUM) tail = 0;
    29e0:	3401      	adds	r4, #1
    29e2:	2c08      	cmp	r4, #8
    29e4:	fa5f fa84 	uxtb.w	sl, r4
    29e8:	d901      	bls.n	29ee <usb_serial_flush_input+0x2e>
    29ea:	2400      	movs	r4, #0
    29ec:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
    29ee:	f819 1004 	ldrb.w	r1, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    29f2:	f8db 2000 	ldr.w	r2, [fp]
    29f6:	f838 3011 	ldrh.w	r3, [r8, r1, lsl #1]
		rx_queue_transfer(i);
    29fa:	4608      	mov	r0, r1
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		rx_available -= rx_count[i] - rx_index[i];
    29fc:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
    2a00:	1a5b      	subs	r3, r3, r1
    2a02:	1ad3      	subs	r3, r2, r3
    2a04:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
    2a08:	f7ff fd1c 	bl	2444 <rx_queue_transfer>
		rx_tail = tail;
    2a0c:	f886 a000 	strb.w	sl, [r6]

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
    2a10:	782b      	ldrb	r3, [r5, #0]
    2a12:	429c      	cmp	r4, r3
    2a14:	d1e4      	bne.n	29e0 <usb_serial_flush_input+0x20>
    2a16:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2a1a:	bf00      	nop
    2a1c:	200433a0 	.word	0x200433a0
    2a20:	200433c4 	.word	0x200433c4
    2a24:	2004328c 	.word	0x2004328c
    2a28:	200433a4 	.word	0x200433a4
    2a2c:	200433c0 	.word	0x200433c0
    2a30:	200433b0 	.word	0x200433b0

00002a34 <usb_serial_getchar>:
}


// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    2a34:	b500      	push	{lr}
    2a36:	b083      	sub	sp, #12
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
    2a38:	2101      	movs	r1, #1
    2a3a:	f10d 0007 	add.w	r0, sp, #7
    2a3e:	f7ff ff21 	bl	2884 <usb_serial_read>
    2a42:	b120      	cbz	r0, 2a4e <usb_serial_getchar+0x1a>
    2a44:	f89d 0007 	ldrb.w	r0, [sp, #7]
	return -1;
}
    2a48:	b003      	add	sp, #12
    2a4a:	f85d fb04 	ldr.w	pc, [sp], #4
// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
	return -1;
    2a4e:	f04f 30ff 	mov.w	r0, #4294967295
    2a52:	e7f9      	b.n	2a48 <usb_serial_getchar+0x14>

00002a54 <usb_serial_putchar>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    2a54:	4b09      	ldr	r3, [pc, #36]	; (2a7c <usb_serial_putchar+0x28>)
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    2a56:	b500      	push	{lr}
    2a58:	b083      	sub	sp, #12
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    2a5a:	781b      	ldrb	r3, [r3, #0]
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    2a5c:	f88d 0007 	strb.w	r0, [sp, #7]
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    2a60:	b923      	cbnz	r3, 2a6c <usb_serial_putchar+0x18>
    2a62:	f003 00ff 	and.w	r0, r3, #255	; 0xff

// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
	return usb_serial_write(&c, 1);
}
    2a66:	b003      	add	sp, #12
    2a68:	f85d fb04 	ldr.w	pc, [sp], #4
    2a6c:	2101      	movs	r1, #1
    2a6e:	f10d 0007 	add.w	r0, sp, #7
    2a72:	f7ff fdc3 	bl	25fc <usb_serial_write.part.1>
    2a76:	b003      	add	sp, #12
    2a78:	f85d fb04 	ldr.w	pc, [sp], #4
    2a7c:	20043288 	.word	0x20043288

00002a80 <usb_serial_write>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    2a80:	4b04      	ldr	r3, [pc, #16]	; (2a94 <usb_serial_write+0x14>)
    2a82:	781b      	ldrb	r3, [r3, #0]
    2a84:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    2a88:	b10b      	cbz	r3, 2a8e <usb_serial_write+0xe>
    2a8a:	f7ff bdb7 	b.w	25fc <usb_serial_write.part.1>
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    2a8e:	4610      	mov	r0, r2
    2a90:	4770      	bx	lr
    2a92:	bf00      	nop
    2a94:	20043288 	.word	0x20043288

00002a98 <usb_serial_write_buffer_free>:

int usb_serial_write_buffer_free(void)
{
    2a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    2a9c:	2400      	movs	r4, #0
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
    2a9e:	f8df 8040 	ldr.w	r8, [pc, #64]	; 2ae0 <usb_serial_write_buffer_free+0x48>
    2aa2:	2301      	movs	r3, #1
    2aa4:	4d0c      	ldr	r5, [pc, #48]	; (2ad8 <usb_serial_write_buffer_free+0x40>)
	return sent;
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
    2aa6:	4627      	mov	r7, r4
    2aa8:	4e0c      	ldr	r6, [pc, #48]	; (2adc <usb_serial_write_buffer_free+0x44>)
	tx_noautoflush = 1;
    2aaa:	f888 3000 	strb.w	r3, [r8]
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    2aae:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    2ab0:	4628      	mov	r0, r5
    2ab2:	3520      	adds	r5, #32
int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    2ab4:	42a3      	cmp	r3, r4

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    2ab6:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
    2aba:	d005      	beq.n	2ac8 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    2abc:	f7ff fc94 	bl	23e8 <usb_transfer_status>
    2ac0:	0603      	lsls	r3, r0, #24
    2ac2:	bf58      	it	pl
    2ac4:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    2ac8:	2c04      	cmp	r4, #4
    2aca:	d1f0      	bne.n	2aae <usb_serial_write_buffer_free+0x16>
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    2acc:	2300      	movs	r3, #0
	return sum;
}
    2ace:	4638      	mov	r0, r7
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    2ad0:	f888 3000 	strb.w	r3, [r8]
	return sum;
}
    2ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2ad8:	200433e0 	.word	0x200433e0
    2adc:	2004329f 	.word	0x2004329f
    2ae0:	2004329e 	.word	0x2004329e

00002ae4 <usb_serial_flush_output>:

void usb_serial_flush_output(void)
{
    2ae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	if (!usb_configuration) return;
    2ae8:	4b1f      	ldr	r3, [pc, #124]	; (2b68 <usb_serial_flush_output+0x84>)
    2aea:	781b      	ldrb	r3, [r3, #0]
    2aec:	b113      	cbz	r3, 2af4 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    2aee:	4d1f      	ldr	r5, [pc, #124]	; (2b6c <usb_serial_flush_output+0x88>)
    2af0:	882a      	ldrh	r2, [r5, #0]
    2af2:	b90a      	cbnz	r2, 2af8 <usb_serial_flush_output+0x14>
    2af4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    2af8:	f8df 8084 	ldr.w	r8, [pc, #132]	; 2b80 <usb_serial_flush_output+0x9c>
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    2afc:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    2b00:	4e1b      	ldr	r6, [pc, #108]	; (2b70 <usb_serial_flush_output+0x8c>)
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    2b02:	f04f 0e01 	mov.w	lr, #1
	transfer_t *xfer = tx_transfer + tx_head;
    2b06:	f898 1000 	ldrb.w	r1, [r8]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    2b0a:	464a      	mov	r2, r9

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    2b0c:	4c19      	ldr	r4, [pc, #100]	; (2b74 <usb_serial_flush_output+0x90>)
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    2b0e:	2300      	movs	r3, #0
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    2b10:	eb06 1641 	add.w	r6, r6, r1, lsl #5
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    2b14:	4f18      	ldr	r7, [pc, #96]	; (2b78 <usb_serial_flush_output+0x94>)
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    2b16:	eb04 24c1 	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    2b1a:	4630      	mov	r0, r6
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    2b1c:	f887 e000 	strb.w	lr, [r7]
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    2b20:	4621      	mov	r1, r4
    2b22:	f7ff fc23 	bl	236c <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    2b26:	eb09 0204 	add.w	r2, r9, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    2b2a:	f024 011f 	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    2b2e:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    2b32:	4b12      	ldr	r3, [pc, #72]	; (2b7c <usb_serial_flush_output+0x98>)
    2b34:	6019      	str	r1, [r3, #0]
		location += 32;
    2b36:	3120      	adds	r1, #32
	} while (location < end_addr);
    2b38:	428a      	cmp	r2, r1
    2b3a:	d8fb      	bhi.n	2b34 <usb_serial_flush_output+0x50>
	asm("dsb");
    2b3c:	f3bf 8f4f 	dsb	sy
	asm("isb");
    2b40:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    2b44:	2004      	movs	r0, #4
    2b46:	4631      	mov	r1, r6
    2b48:	f7ff fc28 	bl	239c <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    2b4c:	f898 3000 	ldrb.w	r3, [r8]
    2b50:	4a0b      	ldr	r2, [pc, #44]	; (2b80 <usb_serial_flush_output+0x9c>)
    2b52:	3301      	adds	r3, #1
    2b54:	b2db      	uxtb	r3, r3
    2b56:	2b03      	cmp	r3, #3
    2b58:	bf88      	it	hi
    2b5a:	2300      	movhi	r3, #0
    2b5c:	7013      	strb	r3, [r2, #0]
	tx_available = 0;
    2b5e:	2300      	movs	r3, #0
    2b60:	802b      	strh	r3, [r5, #0]
	tx_noautoflush = 0;
    2b62:	703b      	strb	r3, [r7, #0]
    2b64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2b68:	20043288 	.word	0x20043288
    2b6c:	200433c6 	.word	0x200433c6
    2b70:	200433e0 	.word	0x200433e0
    2b74:	20201060 	.word	0x20201060
    2b78:	2004329e 	.word	0x2004329e
    2b7c:	e000ef70 	.word	0xe000ef70
    2b80:	2004329f 	.word	0x2004329f

00002b84 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    2b84:	b570      	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    2b86:	f3ef 8110 	mrs	r1, PRIMASK
		__disable_irq();
    2b8a:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    2b8c:	4c0c      	ldr	r4, [pc, #48]	; (2bc0 <EventResponder::runFromInterrupt()+0x3c>)
    2b8e:	6823      	ldr	r3, [r4, #0]
		if (first) {
    2b90:	b18b      	cbz	r3, 2bb6 <EventResponder::runFromInterrupt()+0x32>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    2b92:	4e0c      	ldr	r6, [pc, #48]	; (2bc4 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    2b94:	2500      	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    2b96:	695a      	ldr	r2, [r3, #20]
    2b98:	6022      	str	r2, [r4, #0]
			if (firstInterrupt) {
    2b9a:	b17a      	cbz	r2, 2bbc <EventResponder::runFromInterrupt()+0x38>
				firstInterrupt->_prev = nullptr;
    2b9c:	6195      	str	r5, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    2b9e:	b901      	cbnz	r1, 2ba2 <EventResponder::runFromInterrupt()+0x1e>
    2ba0:	b662      	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    2ba2:	775d      	strb	r5, [r3, #29]
			(*(first->_function))(*first);
    2ba4:	4618      	mov	r0, r3
    2ba6:	689b      	ldr	r3, [r3, #8]
    2ba8:	4798      	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    2baa:	f3ef 8110 	mrs	r1, PRIMASK
		__disable_irq();
    2bae:	b672      	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    2bb0:	6823      	ldr	r3, [r4, #0]
		if (first) {
    2bb2:	2b00      	cmp	r3, #0
    2bb4:	d1ef      	bne.n	2b96 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    2bb6:	b901      	cbnz	r1, 2bba <EventResponder::runFromInterrupt()+0x36>
    2bb8:	b662      	cpsie	i
    2bba:	bd70      	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    2bbc:	6032      	str	r2, [r6, #0]
    2bbe:	e7ee      	b.n	2b9e <EventResponder::runFromInterrupt()+0x1a>
    2bc0:	20043460 	.word	0x20043460
    2bc4:	20043464 	.word	0x20043464

00002bc8 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

extern "C" void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    2bc8:	f7ff bfdc 	b.w	2b84 <EventResponder::runFromInterrupt()>

00002bcc <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    2bcc:	4a04      	ldr	r2, [pc, #16]	; (2be0 <systick_isr+0x14>)
    2bce:	4b05      	ldr	r3, [pc, #20]	; (2be4 <systick_isr+0x18>)
    2bd0:	6811      	ldr	r1, [r2, #0]
	systick_millis_count++;
    2bd2:	4a05      	ldr	r2, [pc, #20]	; (2be8 <systick_isr+0x1c>)
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    2bd4:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    2bd6:	6813      	ldr	r3, [r2, #0]
    2bd8:	3301      	adds	r3, #1
    2bda:	6013      	str	r3, [r2, #0]
    2bdc:	4770      	bx	lr
    2bde:	bf00      	nop
    2be0:	e0001004 	.word	0xe0001004
    2be4:	20043238 	.word	0x20043238
    2be8:	20043240 	.word	0x20043240

00002bec <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    2bec:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    2bee:	f7fd fb3f 	bl	270 <setup>
	while (1) {
		loop();
    2bf2:	f7fd fbc1 	bl	378 <loop>
		yield();
    2bf6:	f000 f921 	bl	2e3c <yield>
    2bfa:	e7fa      	b.n	2bf2 <main+0x6>

00002bfc <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    2bfc:	b510      	push	{r4, lr}
	uint8_t buf[2]={'\r', '\n'};
    2bfe:	4c06      	ldr	r4, [pc, #24]	; (2c18 <Print::println()+0x1c>)
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    2c00:	b082      	sub	sp, #8
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    2c02:	6803      	ldr	r3, [r0, #0]
    2c04:	2202      	movs	r2, #2
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    2c06:	8824      	ldrh	r4, [r4, #0]
	return write(buf, 2);
    2c08:	a901      	add	r1, sp, #4
    2c0a:	685b      	ldr	r3, [r3, #4]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    2c0c:	f8ad 4004 	strh.w	r4, [sp, #4]
	return write(buf, 2);
    2c10:	4798      	blx	r3
}
    2c12:	b002      	add	sp, #8
    2c14:	bd10      	pop	{r4, pc}
    2c16:	bf00      	nop
    2c18:	200003b8 	.word	0x200003b8

00002c1c <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	return vdprintf((int)this, (const char *)format, ap);
#endif
}

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    2c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c1e:	4606      	mov	r6, r0
    2c20:	b08b      	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    2c22:	2a00      	cmp	r2, #0
    2c24:	d033      	beq.n	2c8e <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    2c26:	2a01      	cmp	r2, #1
    2c28:	bf08      	it	eq
    2c2a:	220a      	moveq	r2, #10
	}


	if (n == 0) {
    2c2c:	b351      	cbz	r1, 2c84 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    2c2e:	2521      	movs	r5, #33	; 0x21
    2c30:	e000      	b.n	2c34 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    2c32:	b2fd      	uxtb	r5, r7
    2c34:	1e6f      	subs	r7, r5, #1
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    2c36:	fbb1 f4f2 	udiv	r4, r1, r2
    2c3a:	fb02 1114 	mls	r1, r2, r4, r1
    2c3e:	b2c8      	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    2c40:	2909      	cmp	r1, #9
    2c42:	f100 0137 	add.w	r1, r0, #55	; 0x37
    2c46:	f100 0030 	add.w	r0, r0, #48	; 0x30
    2c4a:	bf88      	it	hi
    2c4c:	b2c8      	uxtbhi	r0, r1
			n /= base;
			if (n == 0) break;
    2c4e:	4621      	mov	r1, r4
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    2c50:	ac0a      	add	r4, sp, #40	; 0x28
    2c52:	bf98      	it	ls
    2c54:	b2c0      	uxtbls	r0, r0
    2c56:	442c      	add	r4, r5
    2c58:	f804 0c24 	strb.w	r0, [r4, #-36]
			n /= base;
			if (n == 0) break;
    2c5c:	2900      	cmp	r1, #0
    2c5e:	d1e8      	bne.n	2c32 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    2c60:	b133      	cbz	r3, 2c70 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    2c62:	3d01      	subs	r5, #1
		buf[i] = '-';
    2c64:	ab0a      	add	r3, sp, #40	; 0x28
    2c66:	222d      	movs	r2, #45	; 0x2d
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
		i--;
    2c68:	b2ed      	uxtb	r5, r5
		buf[i] = '-';
    2c6a:	442b      	add	r3, r5
    2c6c:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    2c70:	6833      	ldr	r3, [r6, #0]
    2c72:	a901      	add	r1, sp, #4
    2c74:	f1c5 0222 	rsb	r2, r5, #34	; 0x22
    2c78:	4630      	mov	r0, r6
    2c7a:	4429      	add	r1, r5
    2c7c:	685b      	ldr	r3, [r3, #4]
    2c7e:	4798      	blx	r3
}
    2c80:	b00b      	add	sp, #44	; 0x2c
    2c82:	bdf0      	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    2c84:	2230      	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    2c86:	2521      	movs	r5, #33	; 0x21
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    2c88:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
    2c8c:	e7e8      	b.n	2c60 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    2c8e:	6803      	ldr	r3, [r0, #0]
    2c90:	b2c9      	uxtb	r1, r1
    2c92:	681b      	ldr	r3, [r3, #0]
    2c94:	4798      	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    2c96:	b00b      	add	sp, #44	; 0x2c
    2c98:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c9a:	bf00      	nop
    2c9c:	0000      	movs	r0, r0
	...

00002ca0 <Print::printFloat(double, unsigned char)>:
size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    2ca0:	eeb4 0b40 	vcmp.f64	d0, d0
	}
	return write(buf + i, sizeof(buf) - i);
}

size_t Print::printFloat(double number, uint8_t digits) 
{
    2ca4:	b570      	push	{r4, r5, r6, lr}
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    2ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	}
	return write(buf + i, sizeof(buf) - i);
}

size_t Print::printFloat(double number, uint8_t digits) 
{
    2caa:	4605      	mov	r5, r0
    2cac:	ed2d 8b02 	vpush	{d8}
    2cb0:	b086      	sub	sp, #24
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    2cb2:	f180 8091 	bvs.w	2dd8 <Print::printFloat(double, unsigned char)+0x138>
    	if (isinf(number)) return print("inf");
    2cb6:	eeb0 7bc0 	vabs.f64	d7, d0
    2cba:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 2de8 <Print::printFloat(double, unsigned char)+0x148>
    2cbe:	eeb4 7b46 	vcmp.f64	d7, d6
    2cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2cc6:	dd0a      	ble.n	2cde <Print::printFloat(double, unsigned char)+0x3e>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    2cc8:	6803      	ldr	r3, [r0, #0]
    2cca:	2203      	movs	r2, #3
    2ccc:	494e      	ldr	r1, [pc, #312]	; (2e08 <Print::printFloat(double, unsigned char)+0x168>)
    2cce:	685b      	ldr	r3, [r3, #4]
    2cd0:	4798      	blx	r3
    2cd2:	4606      	mov	r6, r0
			remainder -= n; 
		}
		count += write(buf, count);
	}
	return count;
}
    2cd4:	4630      	mov	r0, r6
    2cd6:	b006      	add	sp, #24
    2cd8:	ecbd 8b02 	vpop	{d8}
    2cdc:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    	if (isinf(number)) return print("inf");
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    2cde:	ed9f 7b44 	vldr	d7, [pc, #272]	; 2df0 <Print::printFloat(double, unsigned char)+0x150>
    2ce2:	eeb4 0bc7 	vcmpe.f64	d0, d7
    2ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2cea:	dc58      	bgt.n	2d9e <Print::printFloat(double, unsigned char)+0xfe>
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
    2cec:	ed9f 7b42 	vldr	d7, [pc, #264]	; 2df8 <Print::printFloat(double, unsigned char)+0x158>
    2cf0:	eeb4 0bc7 	vcmpe.f64	d0, d7
    2cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2cf8:	d451      	bmi.n	2d9e <Print::printFloat(double, unsigned char)+0xfe>
	
	// Handle negative numbers
	if (number < 0.0) {
    2cfa:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
    2cfe:	460c      	mov	r4, r1
    2d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2d04:	d456      	bmi.n	2db4 <Print::printFloat(double, unsigned char)+0x114>
	return write(buf + i, sizeof(buf) - i);
}

size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
    2d06:	2300      	movs	r3, #0
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
	for (uint8_t i=0; i<digits; ++i) {
    2d08:	2c00      	cmp	r4, #0
    2d0a:	d057      	beq.n	2dbc <Print::printFloat(double, unsigned char)+0x11c>
    2d0c:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
    2d10:	2200      	movs	r2, #0
		rounding *= 0.1;
    2d12:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 2e00 <Print::printFloat(double, unsigned char)+0x160>
    2d16:	3201      	adds	r2, #1
    2d18:	ee28 8b07 	vmul.f64	d8, d8, d7
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
	for (uint8_t i=0; i<digits; ++i) {
    2d1c:	b2d1      	uxtb	r1, r2
    2d1e:	428c      	cmp	r4, r1
    2d20:	d8f9      	bhi.n	2d16 <Print::printFloat(double, unsigned char)+0x76>
		rounding *= 0.1;
	}
	number += rounding;
    2d22:	ee30 0b08 	vadd.f64	d0, d0, d8

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
	double remainder = number - (double)int_part;
	count += printNumber(int_part, 10, sign);
    2d26:	220a      	movs	r2, #10
    2d28:	4628      	mov	r0, r5
		rounding *= 0.1;
	}
	number += rounding;

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
    2d2a:	eefc 7bc0 	vcvt.u32.f64	s15, d0
	double remainder = number - (double)int_part;
    2d2e:	eeb8 8b67 	vcvt.f64.u32	d8, s15
	count += printNumber(int_part, 10, sign);
    2d32:	ee17 1a90 	vmov	r1, s15
	}
	number += rounding;

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
	double remainder = number - (double)int_part;
    2d36:	ee30 8b48 	vsub.f64	d8, d0, d8
	count += printNumber(int_part, 10, sign);
    2d3a:	f7ff ff6f 	bl	2c1c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    2d3e:	2c0f      	cmp	r4, #15

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    2d40:	f04f 0201 	mov.w	r2, #1

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
    2d44:	eeb2 7b04 	vmov.f64	d7, #36	; 0x41200000  10.0
	count += printNumber(int_part, 10, sign);

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    2d48:	f04f 032e 	mov.w	r3, #46	; 0x2e
    2d4c:	bf28      	it	cs
    2d4e:	240f      	movcs	r4, #15
	number += rounding;

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
	double remainder = number - (double)int_part;
	count += printNumber(int_part, 10, sign);
    2d50:	4606      	mov	r6, r0

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    2d52:	f88d 3008 	strb.w	r3, [sp, #8]
    2d56:	4414      	add	r4, r2
    2d58:	b2e4      	uxtb	r4, r4

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
    2d5a:	ee28 0b07 	vmul.f64	d0, d8, d7
			n = (uint8_t)(remainder);
			buf[count++] = '0' + n;
    2d5e:	1c53      	adds	r3, r2, #1
    2d60:	a906      	add	r1, sp, #24
    2d62:	4411      	add	r1, r2
    2d64:	b2da      	uxtb	r2, r3
		buf[0] = '.';

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
    2d66:	42a2      	cmp	r2, r4
			remainder *= 10.0;
			n = (uint8_t)(remainder);
    2d68:	eefc 6bc0 	vcvt.u32.f64	s13, d0
    2d6c:	edcd 6a01 	vstr	s13, [sp, #4]
    2d70:	f89d 3004 	ldrb.w	r3, [sp, #4]
			buf[count++] = '0' + n;
			remainder -= n; 
    2d74:	ee06 3a90 	vmov	s13, r3
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
			n = (uint8_t)(remainder);
			buf[count++] = '0' + n;
    2d78:	f103 0330 	add.w	r3, r3, #48	; 0x30
			remainder -= n; 
    2d7c:	eeb8 8be6 	vcvt.f64.s32	d8, s13
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
			n = (uint8_t)(remainder);
			buf[count++] = '0' + n;
    2d80:	f801 3c10 	strb.w	r3, [r1, #-16]
			remainder -= n; 
    2d84:	ee30 8b48 	vsub.f64	d8, d0, d8
		buf[0] = '.';

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
    2d88:	d1e7      	bne.n	2d5a <Print::printFloat(double, unsigned char)+0xba>
			remainder *= 10.0;
			n = (uint8_t)(remainder);
			buf[count++] = '0' + n;
			remainder -= n; 
		}
		count += write(buf, count);
    2d8a:	682b      	ldr	r3, [r5, #0]
    2d8c:	4628      	mov	r0, r5
    2d8e:	a902      	add	r1, sp, #8
    2d90:	685b      	ldr	r3, [r3, #4]
    2d92:	4798      	blx	r3
	}
	return count;
}
    2d94:	4630      	mov	r0, r6
    2d96:	b006      	add	sp, #24
    2d98:	ecbd 8b02 	vpop	{d8}
    2d9c:	bd70      	pop	{r4, r5, r6, pc}
    2d9e:	682b      	ldr	r3, [r5, #0]
    2da0:	2203      	movs	r2, #3
    2da2:	491a      	ldr	r1, [pc, #104]	; (2e0c <Print::printFloat(double, unsigned char)+0x16c>)
    2da4:	685b      	ldr	r3, [r3, #4]
    2da6:	4798      	blx	r3
    2da8:	4606      	mov	r6, r0
    2daa:	4630      	mov	r0, r6
    2dac:	b006      	add	sp, #24
    2dae:	ecbd 8b02 	vpop	{d8}
    2db2:	bd70      	pop	{r4, r5, r6, pc}
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
	
	// Handle negative numbers
	if (number < 0.0) {
		sign = 1;
		number = -number;
    2db4:	eeb1 0b40 	vneg.f64	d0, d0
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
	
	// Handle negative numbers
	if (number < 0.0) {
		sign = 1;
    2db8:	2301      	movs	r3, #1
    2dba:	e7a5      	b.n	2d08 <Print::printFloat(double, unsigned char)+0x68>
	number += rounding;

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
	double remainder = number - (double)int_part;
	count += printNumber(int_part, 10, sign);
    2dbc:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
    2dc0:	4628      	mov	r0, r5
    2dc2:	220a      	movs	r2, #10
    2dc4:	ee30 0b07 	vadd.f64	d0, d0, d7
    2dc8:	eefc 7bc0 	vcvt.u32.f64	s15, d0
    2dcc:	ee17 1a90 	vmov	r1, s15
    2dd0:	f7ff ff24 	bl	2c1c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    2dd4:	4606      	mov	r6, r0
    2dd6:	e77d      	b.n	2cd4 <Print::printFloat(double, unsigned char)+0x34>
    2dd8:	6803      	ldr	r3, [r0, #0]
    2dda:	2203      	movs	r2, #3
    2ddc:	490c      	ldr	r1, [pc, #48]	; (2e10 <Print::printFloat(double, unsigned char)+0x170>)
    2dde:	685b      	ldr	r3, [r3, #4]
    2de0:	4798      	blx	r3
    2de2:	4606      	mov	r6, r0
size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    2de4:	e776      	b.n	2cd4 <Print::printFloat(double, unsigned char)+0x34>
    2de6:	bf00      	nop
    2de8:	ffffffff 	.word	0xffffffff
    2dec:	7fefffff 	.word	0x7fefffff
    2df0:	e0000000 	.word	0xe0000000
    2df4:	41efffff 	.word	0x41efffff
    2df8:	e0000000 	.word	0xe0000000
    2dfc:	c1efffff 	.word	0xc1efffff
    2e00:	9999999a 	.word	0x9999999a
    2e04:	3fb99999 	.word	0x3fb99999
    2e08:	200003c4 	.word	0x200003c4
    2e0c:	200003c0 	.word	0x200003c0
    2e10:	200003bc 	.word	0x200003bc

00002e14 <usb_serial_class::clear()>:
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    2e14:	f7ff bdd4 	b.w	29c0 <usb_serial_flush_input>

00002e18 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    2e18:	f7ff bdaa 	b.w	2970 <usb_serial_peekchar>

00002e1c <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    2e1c:	f7ff be0a 	b.w	2a34 <usb_serial_getchar>

00002e20 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    2e20:	f7ff bdc8 	b.w	29b4 <usb_serial_available>

00002e24 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    2e24:	f7ff be5e 	b.w	2ae4 <usb_serial_flush_output>

00002e28 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    2e28:	f7ff be36 	b.w	2a98 <usb_serial_write_buffer_free>

00002e2c <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    2e2c:	4608      	mov	r0, r1
    2e2e:	4611      	mov	r1, r2
    2e30:	f7ff be26 	b.w	2a80 <usb_serial_write>

00002e34 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    2e34:	4608      	mov	r0, r1
    2e36:	f7ff be0d 	b.w	2a54 <usb_serial_putchar>
    2e3a:	bf00      	nop

00002e3c <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    2e3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    2e40:	4e32      	ldr	r6, [pc, #200]	; (2f0c <yield+0xd0>)
    2e42:	7833      	ldrb	r3, [r6, #0]
    2e44:	b193      	cbz	r3, 2e6c <yield+0x30>
	if (running) return; // TODO: does this need to be atomic?
    2e46:	4f32      	ldr	r7, [pc, #200]	; (2f10 <yield+0xd4>)
    2e48:	783a      	ldrb	r2, [r7, #0]
    2e4a:	b97a      	cbnz	r2, 2e6c <yield+0x30>
	running = 1;
    2e4c:	2201      	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    2e4e:	07d9      	lsls	r1, r3, #31
void yield(void)
{
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    2e50:	703a      	strb	r2, [r7, #0]


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    2e52:	d437      	bmi.n	2ec4 <yield+0x88>
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();
    2e54:	079a      	lsls	r2, r3, #30
    2e56:	d419      	bmi.n	2e8c <yield+0x50>

	running = 0;
    2e58:	2200      	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    2e5a:	075b      	lsls	r3, r3, #29
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();

	running = 0;
    2e5c:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    2e5e:	d505      	bpl.n	2e6c <yield+0x30>
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    2e60:	4b2c      	ldr	r3, [pc, #176]	; (2f14 <yield+0xd8>)
    2e62:	681a      	ldr	r2, [r3, #0]
    2e64:	b112      	cbz	r2, 2e6c <yield+0x30>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    2e66:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    2e6a:	b10a      	cbz	r2, 2e70 <yield+0x34>
    2e6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    2e70:	f3ef 8010 	mrs	r0, PRIMASK
		__disable_irq();
    2e74:	b672      	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    2e76:	681a      	ldr	r2, [r3, #0]
		if (first == nullptr) {
    2e78:	b11a      	cbz	r2, 2e82 <yield+0x46>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    2e7a:	4c27      	ldr	r4, [pc, #156]	; (2f18 <yield+0xdc>)
    2e7c:	7821      	ldrb	r1, [r4, #0]
    2e7e:	2900      	cmp	r1, #0
    2e80:	d02f      	beq.n	2ee2 <yield+0xa6>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    2e82:	2800      	cmp	r0, #0
    2e84:	d1f2      	bne.n	2e6c <yield+0x30>
    2e86:	b662      	cpsie	i
    2e88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    2e8c:	f8df 8094 	ldr.w	r8, [pc, #148]	; 2f24 <yield+0xe8>
    2e90:	f898 2000 	ldrb.w	r2, [r8]
    2e94:	2a00      	cmp	r2, #0
    2e96:	d0df      	beq.n	2e58 <yield+0x1c>
    2e98:	2400      	movs	r4, #0
    2e9a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 2f28 <yield+0xec>
    2e9e:	e005      	b.n	2eac <yield+0x70>
    2ea0:	3401      	adds	r4, #1
    2ea2:	f898 3000 	ldrb.w	r3, [r8]
    2ea6:	b2e4      	uxtb	r4, r4
    2ea8:	42a3      	cmp	r3, r4
    2eaa:	d913      	bls.n	2ed4 <yield+0x98>
			s_serials_with_serial_events[i]->doYieldCode();
    2eac:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
	static HardwareSerial 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    2eb0:	682b      	ldr	r3, [r5, #0]
    2eb2:	4628      	mov	r0, r5
    2eb4:	691b      	ldr	r3, [r3, #16]
    2eb6:	4798      	blx	r3
    2eb8:	2800      	cmp	r0, #0
    2eba:	d0f1      	beq.n	2ea0 <yield+0x64>
    2ebc:	696b      	ldr	r3, [r5, #20]
    2ebe:	689b      	ldr	r3, [r3, #8]
    2ec0:	4798      	blx	r3
    2ec2:	e7ed      	b.n	2ea0 <yield+0x64>
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    2ec4:	f7ff fd76 	bl	29b4 <usb_serial_available>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    2ec8:	b9d0      	cbnz	r0, 2f00 <yield+0xc4>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    2eca:	4b14      	ldr	r3, [pc, #80]	; (2f1c <yield+0xe0>)
    2ecc:	781b      	ldrb	r3, [r3, #0]
    2ece:	b91b      	cbnz	r3, 2ed8 <yield+0x9c>
    2ed0:	7833      	ldrb	r3, [r6, #0]
    2ed2:	e7bf      	b.n	2e54 <yield+0x18>
    2ed4:	7833      	ldrb	r3, [r6, #0]
    2ed6:	e7bf      	b.n	2e58 <yield+0x1c>
    2ed8:	7833      	ldrb	r3, [r6, #0]
    2eda:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    2ede:	7033      	strb	r3, [r6, #0]
    2ee0:	e7b8      	b.n	2e54 <yield+0x18>
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    2ee2:	2601      	movs	r6, #1
		firstYield = first->_next;
    2ee4:	6955      	ldr	r5, [r2, #20]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    2ee6:	7026      	strb	r6, [r4, #0]
		firstYield = first->_next;
    2ee8:	601d      	str	r5, [r3, #0]
		if (firstYield) {
    2eea:	b165      	cbz	r5, 2f06 <yield+0xca>
			firstYield->_prev = nullptr;
    2eec:	61a9      	str	r1, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    2eee:	b900      	cbnz	r0, 2ef2 <yield+0xb6>
    2ef0:	b662      	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    2ef2:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    2ef4:	6893      	ldr	r3, [r2, #8]
    2ef6:	4610      	mov	r0, r2
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    2ef8:	7755      	strb	r5, [r2, #29]
		(*(first->_function))(*first);
    2efa:	4798      	blx	r3
		runningFromYield = false;
    2efc:	7025      	strb	r5, [r4, #0]
    2efe:	e7b5      	b.n	2e6c <yield+0x30>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    2f00:	f000 fa32 	bl	3368 <serialEvent()>
    2f04:	e7e1      	b.n	2eca <yield+0x8e>
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    2f06:	4b06      	ldr	r3, [pc, #24]	; (2f20 <yield+0xe4>)
    2f08:	601d      	str	r5, [r3, #0]
    2f0a:	e7f0      	b.n	2eee <yield+0xb2>
    2f0c:	2001228c 	.word	0x2001228c
    2f10:	20043471 	.word	0x20043471
    2f14:	2004346c 	.word	0x2004346c
    2f18:	20043470 	.word	0x20043470
    2f1c:	60001726 	.word	0x60001726
    2f20:	20043468 	.word	0x20043468
    2f24:	20043490 	.word	0x20043490
    2f28:	20043474 	.word	0x20043474

00002f2c <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    2f2c:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    2f2e:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    2f32:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    2f36:	d16d      	bne.n	3014 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    2f38:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    2f3a:	d341      	bcc.n	2fc0 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    2f3c:	f851 3b04 	ldr.w	r3, [r1], #4
    2f40:	f840 3b04 	str.w	r3, [r0], #4
    2f44:	f851 3b04 	ldr.w	r3, [r1], #4
    2f48:	f840 3b04 	str.w	r3, [r0], #4
    2f4c:	f851 3b04 	ldr.w	r3, [r1], #4
    2f50:	f840 3b04 	str.w	r3, [r0], #4
    2f54:	f851 3b04 	ldr.w	r3, [r1], #4
    2f58:	f840 3b04 	str.w	r3, [r0], #4
    2f5c:	f851 3b04 	ldr.w	r3, [r1], #4
    2f60:	f840 3b04 	str.w	r3, [r0], #4
    2f64:	f851 3b04 	ldr.w	r3, [r1], #4
    2f68:	f840 3b04 	str.w	r3, [r0], #4
    2f6c:	f851 3b04 	ldr.w	r3, [r1], #4
    2f70:	f840 3b04 	str.w	r3, [r0], #4
    2f74:	f851 3b04 	ldr.w	r3, [r1], #4
    2f78:	f840 3b04 	str.w	r3, [r0], #4
    2f7c:	f851 3b04 	ldr.w	r3, [r1], #4
    2f80:	f840 3b04 	str.w	r3, [r0], #4
    2f84:	f851 3b04 	ldr.w	r3, [r1], #4
    2f88:	f840 3b04 	str.w	r3, [r0], #4
    2f8c:	f851 3b04 	ldr.w	r3, [r1], #4
    2f90:	f840 3b04 	str.w	r3, [r0], #4
    2f94:	f851 3b04 	ldr.w	r3, [r1], #4
    2f98:	f840 3b04 	str.w	r3, [r0], #4
    2f9c:	f851 3b04 	ldr.w	r3, [r1], #4
    2fa0:	f840 3b04 	str.w	r3, [r0], #4
    2fa4:	f851 3b04 	ldr.w	r3, [r1], #4
    2fa8:	f840 3b04 	str.w	r3, [r0], #4
    2fac:	f851 3b04 	ldr.w	r3, [r1], #4
    2fb0:	f840 3b04 	str.w	r3, [r0], #4
    2fb4:	f851 3b04 	ldr.w	r3, [r1], #4
    2fb8:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    2fbc:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    2fbe:	d2bd      	bcs.n	2f3c <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    2fc0:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    2fc2:	d311      	bcc.n	2fe8 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    2fc4:	f851 3b04 	ldr.w	r3, [r1], #4
    2fc8:	f840 3b04 	str.w	r3, [r0], #4
    2fcc:	f851 3b04 	ldr.w	r3, [r1], #4
    2fd0:	f840 3b04 	str.w	r3, [r0], #4
    2fd4:	f851 3b04 	ldr.w	r3, [r1], #4
    2fd8:	f840 3b04 	str.w	r3, [r0], #4
    2fdc:	f851 3b04 	ldr.w	r3, [r1], #4
    2fe0:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    2fe4:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    2fe6:	d2ed      	bcs.n	2fc4 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    2fe8:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    2fea:	d305      	bcc.n	2ff8 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    2fec:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    2ff0:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    2ff4:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    2ff6:	d2f9      	bcs.n	2fec <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    2ff8:	3204      	adds	r2, #4
	beq	.Ldone
    2ffa:	d008      	beq.n	300e <memcpy+0xe2>

	lsls	r2, r2, #31
    2ffc:	07d2      	lsls	r2, r2, #31
	itt ne
    2ffe:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    3000:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    3004:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    3008:	d301      	bcc.n	300e <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    300a:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    300c:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    300e:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    3010:	4770      	bx	lr
    3012:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    3014:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    3016:	d313      	bcc.n	3040 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    3018:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    301a:	d08d      	beq.n	2f38 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    301c:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    3020:	d08a      	beq.n	2f38 <memcpy+0xc>

	rsb	r3, #4
    3022:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    3026:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    3028:	07db      	lsls	r3, r3, #31
	itt ne
    302a:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    302c:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    3030:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    3034:	d380      	bcc.n	2f38 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    3036:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    303a:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    303e:	e77b      	b.n	2f38 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    3040:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    3042:	d3d9      	bcc.n	2ff8 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    3044:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    3046:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    304a:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    304e:	d2f9      	bcs.n	3044 <memcpy+0x118>

	ldrb	r3, [r1]
    3050:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    3052:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    3054:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    3056:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    3058:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    305a:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    305c:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    305e:	4770      	bx	lr

00003060 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    3060:	b4f0      	push	{r4, r5, r6, r7}
    3062:	1e4e      	subs	r6, r1, #1
	unsigned digit;
	int i=0, j;
    3064:	2500      	movs	r5, #0
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    3066:	4637      	mov	r7, r6
    3068:	e000      	b.n	306c <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    306a:	3501      	adds	r5, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    306c:	fbb0 f3f2 	udiv	r3, r0, r2
    3070:	fb02 0013 	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    3074:	f100 0437 	add.w	r4, r0, #55	; 0x37
    3078:	2809      	cmp	r0, #9
    307a:	f100 0030 	add.w	r0, r0, #48	; 0x30
    307e:	b2e4      	uxtb	r4, r4
    3080:	bf98      	it	ls
    3082:	b2c4      	uxtbls	r4, r0
		val /= radix;
		if (val == 0) break;
    3084:	4618      	mov	r0, r3
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    3086:	f807 4f01 	strb.w	r4, [r7, #1]!
		val /= radix;
		if (val == 0) break;
    308a:	2b00      	cmp	r3, #0
    308c:	d1ed      	bne.n	306a <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    308e:	194a      	adds	r2, r1, r5
    3090:	7053      	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    3092:	b14d      	cbz	r5, 30a8 <ultoa+0x48>
    3094:	3301      	adds	r3, #1
		t = buf[j];
    3096:	f816 4f01 	ldrb.w	r4, [r6, #1]!
		buf[j] = buf[i];
    309a:	7817      	ldrb	r7, [r2, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    309c:	1ae8      	subs	r0, r5, r3
		t = buf[j];
		buf[j] = buf[i];
    309e:	7037      	strb	r7, [r6, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    30a0:	4283      	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    30a2:	f802 4901 	strb.w	r4, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    30a6:	dbf5      	blt.n	3094 <ultoa+0x34>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    30a8:	4608      	mov	r0, r1
    30aa:	bcf0      	pop	{r4, r5, r6, r7}
    30ac:	4770      	bx	lr
    30ae:	bf00      	nop

000030b0 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    30b0:	48a4      	ldr	r0, [pc, #656]	; (3344 <pwm_init+0x294>)
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    30b2:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    30b6:	4ba4      	ldr	r3, [pc, #656]	; (3348 <pwm_init+0x298>)
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    30b8:	6f82      	ldr	r2, [r0, #120]	; 0x78
    30ba:	f442 027f 	orr.w	r2, r2, #16711680	; 0xff0000
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

void pwm_init(void)
{
    30be:	b5f0      	push	{r4, r5, r6, r7, lr}
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    30c0:	6782      	str	r2, [r0, #120]	; 0x78
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    30c2:	2500      	movs	r5, #0
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    30c4:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    30c8:	f44f 4670 	mov.w	r6, #61440	; 0xf000
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    30cc:	4c9f      	ldr	r4, [pc, #636]	; (334c <pwm_init+0x29c>)
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    30ce:	f44f 4e60 	mov.w	lr, #57344	; 0xe000

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    30d2:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    30d4:	f44f 6780 	mov.w	r7, #1024	; 0x400
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    30d8:	4314      	orrs	r4, r2
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    30da:	462a      	mov	r2, r5
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    30dc:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    30e0:	f8a3 618c 	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    30e4:	f248 26b8 	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    30e8:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    30ec:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    30f0:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
    30f4:	b280      	uxth	r0, r0
    30f6:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
    30fa:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
    30fe:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    3102:	4b91      	ldr	r3, [pc, #580]	; (3348 <pwm_init+0x298>)
	for (i=0; i < 4; i++) {
    3104:	3101      	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    3106:	2500      	movs	r5, #0
    3108:	0140      	lsls	r0, r0, #5
    310a:	461c      	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    310c:	2904      	cmp	r1, #4
    310e:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    3110:	f8a3 e004 	strh.w	lr, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    3114:	80df      	strh	r7, [r3, #6]
		p->SM[i].OCTRL = 0;
    3116:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    3118:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    311a:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    311c:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    311e:	81de      	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    3120:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    3122:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    3124:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    3126:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    3128:	d1e9      	bne.n	30fe <pwm_init+0x4e>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    312a:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    312e:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    3132:	4b87      	ldr	r3, [pc, #540]	; (3350 <pwm_init+0x2a0>)
    3134:	f44f 4670 	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3138:	b280      	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    313a:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    313c:	f44f 4760 	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    3140:	462a      	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3142:	ea40 000c 	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    3146:	f44f 6e80 	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    314a:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    314e:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
    3152:	b280      	uxth	r0, r0
    3154:	f440 6070 	orr.w	r0, r0, #3840	; 0xf00
    3158:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    315c:	f8a3 618c 	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    3160:	f248 26b8 	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    3164:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    3168:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    316c:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
    3170:	b280      	uxth	r0, r0
    3172:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
    3176:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
    317a:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    317e:	4b74      	ldr	r3, [pc, #464]	; (3350 <pwm_init+0x2a0>)
	for (i=0; i < 4; i++) {
    3180:	3101      	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    3182:	2500      	movs	r5, #0
    3184:	0140      	lsls	r0, r0, #5
    3186:	461c      	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    3188:	2904      	cmp	r1, #4
    318a:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    318c:	809f      	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    318e:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    3192:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    3194:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    3196:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    3198:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    319a:	81de      	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    319c:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    319e:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    31a0:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    31a2:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    31a4:	d1e9      	bne.n	317a <pwm_init+0xca>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    31a6:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    31aa:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    31ae:	4b69      	ldr	r3, [pc, #420]	; (3354 <pwm_init+0x2a4>)
    31b0:	f44f 4670 	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    31b4:	b280      	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    31b6:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    31b8:	f44f 4760 	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    31bc:	462a      	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    31be:	ea40 000c 	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    31c2:	f44f 6e80 	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    31c6:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    31ca:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
    31ce:	b280      	uxth	r0, r0
    31d0:	f440 6070 	orr.w	r0, r0, #3840	; 0xf00
    31d4:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    31d8:	f8a3 618c 	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    31dc:	f248 26b8 	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    31e0:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    31e4:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    31e8:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
    31ec:	b280      	uxth	r0, r0
    31ee:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
    31f2:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
    31f6:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    31fa:	4b56      	ldr	r3, [pc, #344]	; (3354 <pwm_init+0x2a4>)
	for (i=0; i < 4; i++) {
    31fc:	3101      	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    31fe:	2500      	movs	r5, #0
    3200:	0140      	lsls	r0, r0, #5
    3202:	461c      	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    3204:	2904      	cmp	r1, #4
    3206:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    3208:	809f      	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    320a:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    320e:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    3210:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    3212:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    3214:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    3216:	81de      	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    3218:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    321a:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    321c:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    321e:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    3220:	d1e9      	bne.n	31f6 <pwm_init+0x146>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3222:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    3226:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    322a:	4b4b      	ldr	r3, [pc, #300]	; (3358 <pwm_init+0x2a8>)
    322c:	f44f 4770 	mov.w	r7, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3230:	b280      	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    3232:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    3234:	f44f 4660 	mov.w	r6, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    3238:	462a      	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    323a:	ea40 000c 	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    323e:	f44f 6e80 	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3242:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    3246:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
    324a:	b280      	uxth	r0, r0
    324c:	f440 6070 	orr.w	r0, r0, #3840	; 0xf00
    3250:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    3254:	f8a3 718c 	strh.w	r7, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    3258:	f248 27b8 	movw	r7, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    325c:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    3260:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    3264:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
    3268:	b280      	uxth	r0, r0
    326a:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
    326e:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
    3272:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    3276:	4b38      	ldr	r3, [pc, #224]	; (3358 <pwm_init+0x2a8>)
	for (i=0; i < 4; i++) {
    3278:	3101      	adds	r1, #1
    327a:	0140      	lsls	r0, r0, #5
    327c:	461c      	mov	r4, r3
    327e:	2904      	cmp	r1, #4
    3280:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    3282:	809e      	strh	r6, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    3284:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    3288:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    328a:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    328c:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    328e:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    3290:	81df      	strh	r7, [r3, #14]
		p->SM[i].VAL2 = 0;
    3292:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    3294:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    3296:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    3298:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    329a:	d1ea      	bne.n	3272 <pwm_init+0x1c2>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    329c:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    32a0:	270f      	movs	r7, #15

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    32a2:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    32a4:	f241 0601 	movw	r6, #4097	; 0x1001
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    32a8:	b29b      	uxth	r3, r3
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    32aa:	f645 5ec0 	movw	lr, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    32ae:	4611      	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    32b0:	f243 0526 	movw	r5, #12326	; 0x3026
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    32b4:	433b      	orrs	r3, r7
    32b6:	f8a4 3188 	strh.w	r3, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    32ba:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
    32be:	b29b      	uxth	r3, r3
    32c0:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    32c4:	f8a4 3188 	strh.w	r3, [r4, #392]	; 0x188
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    32c8:	0150      	lsls	r0, r2, #5
    32ca:	4b24      	ldr	r3, [pc, #144]	; (335c <pwm_init+0x2ac>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    32cc:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    32ce:	4403      	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    32d0:	2a04      	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    32d2:	8199      	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    32d4:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    32d6:	81df      	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    32d8:	829e      	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    32da:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    32de:	8019      	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    32e0:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    32e2:	819d      	strh	r5, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    32e4:	d1f0      	bne.n	32c8 <pwm_init+0x218>
    32e6:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    32e8:	270f      	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    32ea:	f241 0601 	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    32ee:	f645 55c0 	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    32f2:	4611      	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    32f4:	f243 0426 	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    32f8:	0150      	lsls	r0, r2, #5
    32fa:	4b19      	ldr	r3, [pc, #100]	; (3360 <pwm_init+0x2b0>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    32fc:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    32fe:	4403      	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    3300:	2a04      	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    3302:	8199      	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    3304:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    3306:	81df      	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    3308:	829e      	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    330a:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    330c:	8019      	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    330e:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    3310:	819c      	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    3312:	d1f1      	bne.n	32f8 <pwm_init+0x248>
    3314:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    3316:	270f      	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    3318:	f241 0601 	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    331c:	f645 55c0 	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    3320:	4611      	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    3322:	f243 0426 	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    3326:	0150      	lsls	r0, r2, #5
    3328:	4b0e      	ldr	r3, [pc, #56]	; (3364 <pwm_init+0x2b4>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    332a:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    332c:	4403      	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    332e:	2a04      	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    3330:	8199      	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    3332:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    3334:	81df      	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    3336:	829e      	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    3338:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    333a:	8019      	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    333c:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    333e:	819c      	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    3340:	d1f1      	bne.n	3326 <pwm_init+0x276>
	flexpwm_init(&IMXRT_FLEXPWM3);
	flexpwm_init(&IMXRT_FLEXPWM4);
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    3342:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3344:	400fc000 	.word	0x400fc000
    3348:	403dc000 	.word	0x403dc000
    334c:	fc030000 	.word	0xfc030000
    3350:	403e0000 	.word	0x403e0000
    3354:	403e4000 	.word	0x403e4000
    3358:	403e8000 	.word	0x403e8000
    335c:	401dc000 	.word	0x401dc000
    3360:	401e0000 	.word	0x401e0000
    3364:	401e4000 	.word	0x401e4000

00003368 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
    3368:	4770      	bx	lr
    336a:	bf00      	nop

0000336c <arm_rfft_init_q15>:
    336c:	b289      	uxth	r1, r1
    336e:	b430      	push	{r4, r5}
    3370:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    3374:	4d36      	ldr	r5, [pc, #216]	; (3450 <arm_rfft_init_q15+0xe4>)
    3376:	4c37      	ldr	r4, [pc, #220]	; (3454 <arm_rfft_init_q15+0xe8>)
    3378:	7102      	strb	r2, [r0, #4]
    337a:	7143      	strb	r3, [r0, #5]
    337c:	6001      	str	r1, [r0, #0]
    337e:	60c5      	str	r5, [r0, #12]
    3380:	6104      	str	r4, [r0, #16]
    3382:	d050      	beq.n	3426 <arm_rfft_init_q15+0xba>
    3384:	d911      	bls.n	33aa <arm_rfft_init_q15+0x3e>
    3386:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
    338a:	d054      	beq.n	3436 <arm_rfft_init_q15+0xca>
    338c:	d938      	bls.n	3400 <arm_rfft_init_q15+0x94>
    338e:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    3392:	d022      	beq.n	33da <arm_rfft_init_q15+0x6e>
    3394:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
    3398:	d155      	bne.n	3446 <arm_rfft_init_q15+0xda>
    339a:	2101      	movs	r1, #1
    339c:	4a2e      	ldr	r2, [pc, #184]	; (3458 <arm_rfft_init_q15+0xec>)
    339e:	2300      	movs	r3, #0
    33a0:	6081      	str	r1, [r0, #8]
    33a2:	6142      	str	r2, [r0, #20]
    33a4:	4618      	mov	r0, r3
    33a6:	bc30      	pop	{r4, r5}
    33a8:	4770      	bx	lr
    33aa:	2940      	cmp	r1, #64	; 0x40
    33ac:	d033      	beq.n	3416 <arm_rfft_init_q15+0xaa>
    33ae:	d91c      	bls.n	33ea <arm_rfft_init_q15+0x7e>
    33b0:	2980      	cmp	r1, #128	; 0x80
    33b2:	d00a      	beq.n	33ca <arm_rfft_init_q15+0x5e>
    33b4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    33b8:	d145      	bne.n	3446 <arm_rfft_init_q15+0xda>
    33ba:	2120      	movs	r1, #32
    33bc:	4a27      	ldr	r2, [pc, #156]	; (345c <arm_rfft_init_q15+0xf0>)
    33be:	2300      	movs	r3, #0
    33c0:	6081      	str	r1, [r0, #8]
    33c2:	6142      	str	r2, [r0, #20]
    33c4:	4618      	mov	r0, r3
    33c6:	bc30      	pop	{r4, r5}
    33c8:	4770      	bx	lr
    33ca:	2140      	movs	r1, #64	; 0x40
    33cc:	4a24      	ldr	r2, [pc, #144]	; (3460 <arm_rfft_init_q15+0xf4>)
    33ce:	2300      	movs	r3, #0
    33d0:	6081      	str	r1, [r0, #8]
    33d2:	6142      	str	r2, [r0, #20]
    33d4:	4618      	mov	r0, r3
    33d6:	bc30      	pop	{r4, r5}
    33d8:	4770      	bx	lr
    33da:	2102      	movs	r1, #2
    33dc:	4a21      	ldr	r2, [pc, #132]	; (3464 <arm_rfft_init_q15+0xf8>)
    33de:	2300      	movs	r3, #0
    33e0:	6081      	str	r1, [r0, #8]
    33e2:	6142      	str	r2, [r0, #20]
    33e4:	4618      	mov	r0, r3
    33e6:	bc30      	pop	{r4, r5}
    33e8:	4770      	bx	lr
    33ea:	2920      	cmp	r1, #32
    33ec:	d12b      	bne.n	3446 <arm_rfft_init_q15+0xda>
    33ee:	f44f 7180 	mov.w	r1, #256	; 0x100
    33f2:	4a1d      	ldr	r2, [pc, #116]	; (3468 <arm_rfft_init_q15+0xfc>)
    33f4:	2300      	movs	r3, #0
    33f6:	6081      	str	r1, [r0, #8]
    33f8:	6142      	str	r2, [r0, #20]
    33fa:	4618      	mov	r0, r3
    33fc:	bc30      	pop	{r4, r5}
    33fe:	4770      	bx	lr
    3400:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
    3404:	d11f      	bne.n	3446 <arm_rfft_init_q15+0xda>
    3406:	2108      	movs	r1, #8
    3408:	4a18      	ldr	r2, [pc, #96]	; (346c <arm_rfft_init_q15+0x100>)
    340a:	2300      	movs	r3, #0
    340c:	6081      	str	r1, [r0, #8]
    340e:	6142      	str	r2, [r0, #20]
    3410:	4618      	mov	r0, r3
    3412:	bc30      	pop	{r4, r5}
    3414:	4770      	bx	lr
    3416:	2180      	movs	r1, #128	; 0x80
    3418:	4a15      	ldr	r2, [pc, #84]	; (3470 <arm_rfft_init_q15+0x104>)
    341a:	2300      	movs	r3, #0
    341c:	6081      	str	r1, [r0, #8]
    341e:	6142      	str	r2, [r0, #20]
    3420:	4618      	mov	r0, r3
    3422:	bc30      	pop	{r4, r5}
    3424:	4770      	bx	lr
    3426:	2110      	movs	r1, #16
    3428:	4a12      	ldr	r2, [pc, #72]	; (3474 <arm_rfft_init_q15+0x108>)
    342a:	2300      	movs	r3, #0
    342c:	6081      	str	r1, [r0, #8]
    342e:	6142      	str	r2, [r0, #20]
    3430:	4618      	mov	r0, r3
    3432:	bc30      	pop	{r4, r5}
    3434:	4770      	bx	lr
    3436:	2104      	movs	r1, #4
    3438:	4a0f      	ldr	r2, [pc, #60]	; (3478 <arm_rfft_init_q15+0x10c>)
    343a:	2300      	movs	r3, #0
    343c:	6081      	str	r1, [r0, #8]
    343e:	6142      	str	r2, [r0, #20]
    3440:	4618      	mov	r0, r3
    3442:	bc30      	pop	{r4, r5}
    3444:	4770      	bx	lr
    3446:	f04f 33ff 	mov.w	r3, #4294967295
    344a:	bc30      	pop	{r4, r5}
    344c:	4618      	mov	r0, r3
    344e:	4770      	bx	lr
    3450:	200003f0 	.word	0x200003f0
    3454:	200043f0 	.word	0x200043f0
    3458:	20008450 	.word	0x20008450
    345c:	20008400 	.word	0x20008400
    3460:	20008430 	.word	0x20008430
    3464:	20008440 	.word	0x20008440
    3468:	20008460 	.word	0x20008460
    346c:	20008410 	.word	0x20008410
    3470:	20008470 	.word	0x20008470
    3474:	200083f0 	.word	0x200083f0
    3478:	20008420 	.word	0x20008420

0000347c <__libc_init_array>:
    347c:	b570      	push	{r4, r5, r6, lr}
    347e:	4e0f      	ldr	r6, [pc, #60]	; (34bc <__libc_init_array+0x40>)
    3480:	4d0f      	ldr	r5, [pc, #60]	; (34c0 <__libc_init_array+0x44>)
    3482:	1b76      	subs	r6, r6, r5
    3484:	10b6      	asrs	r6, r6, #2
    3486:	bf18      	it	ne
    3488:	2400      	movne	r4, #0
    348a:	d005      	beq.n	3498 <__libc_init_array+0x1c>
    348c:	3401      	adds	r4, #1
    348e:	f855 3b04 	ldr.w	r3, [r5], #4
    3492:	4798      	blx	r3
    3494:	42a6      	cmp	r6, r4
    3496:	d1f9      	bne.n	348c <__libc_init_array+0x10>
    3498:	4e0a      	ldr	r6, [pc, #40]	; (34c4 <__libc_init_array+0x48>)
    349a:	4d0b      	ldr	r5, [pc, #44]	; (34c8 <__libc_init_array+0x4c>)
    349c:	1b76      	subs	r6, r6, r5
    349e:	f000 f863 	bl	3568 <___init_veneer>
    34a2:	10b6      	asrs	r6, r6, #2
    34a4:	bf18      	it	ne
    34a6:	2400      	movne	r4, #0
    34a8:	d006      	beq.n	34b8 <__libc_init_array+0x3c>
    34aa:	3401      	adds	r4, #1
    34ac:	f855 3b04 	ldr.w	r3, [r5], #4
    34b0:	4798      	blx	r3
    34b2:	42a6      	cmp	r6, r4
    34b4:	d1f9      	bne.n	34aa <__libc_init_array+0x2e>
    34b6:	bd70      	pop	{r4, r5, r6, pc}
    34b8:	bd70      	pop	{r4, r5, r6, pc}
    34ba:	bf00      	nop
    34bc:	60001780 	.word	0x60001780
    34c0:	60001780 	.word	0x60001780
    34c4:	6000178c 	.word	0x6000178c
    34c8:	60001780 	.word	0x60001780

000034cc <memset>:
    34cc:	b470      	push	{r4, r5, r6}
    34ce:	0784      	lsls	r4, r0, #30
    34d0:	d046      	beq.n	3560 <memset+0x94>
    34d2:	1e54      	subs	r4, r2, #1
    34d4:	2a00      	cmp	r2, #0
    34d6:	d041      	beq.n	355c <memset+0x90>
    34d8:	b2cd      	uxtb	r5, r1
    34da:	4603      	mov	r3, r0
    34dc:	e002      	b.n	34e4 <memset+0x18>
    34de:	1e62      	subs	r2, r4, #1
    34e0:	b3e4      	cbz	r4, 355c <memset+0x90>
    34e2:	4614      	mov	r4, r2
    34e4:	f803 5b01 	strb.w	r5, [r3], #1
    34e8:	079a      	lsls	r2, r3, #30
    34ea:	d1f8      	bne.n	34de <memset+0x12>
    34ec:	2c03      	cmp	r4, #3
    34ee:	d92e      	bls.n	354e <memset+0x82>
    34f0:	b2cd      	uxtb	r5, r1
    34f2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    34f6:	2c0f      	cmp	r4, #15
    34f8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    34fc:	d919      	bls.n	3532 <memset+0x66>
    34fe:	f103 0210 	add.w	r2, r3, #16
    3502:	4626      	mov	r6, r4
    3504:	3e10      	subs	r6, #16
    3506:	2e0f      	cmp	r6, #15
    3508:	f842 5c10 	str.w	r5, [r2, #-16]
    350c:	f842 5c0c 	str.w	r5, [r2, #-12]
    3510:	f842 5c08 	str.w	r5, [r2, #-8]
    3514:	f842 5c04 	str.w	r5, [r2, #-4]
    3518:	f102 0210 	add.w	r2, r2, #16
    351c:	d8f2      	bhi.n	3504 <memset+0x38>
    351e:	f1a4 0210 	sub.w	r2, r4, #16
    3522:	f022 020f 	bic.w	r2, r2, #15
    3526:	f004 040f 	and.w	r4, r4, #15
    352a:	3210      	adds	r2, #16
    352c:	2c03      	cmp	r4, #3
    352e:	4413      	add	r3, r2
    3530:	d90d      	bls.n	354e <memset+0x82>
    3532:	461e      	mov	r6, r3
    3534:	4622      	mov	r2, r4
    3536:	3a04      	subs	r2, #4
    3538:	2a03      	cmp	r2, #3
    353a:	f846 5b04 	str.w	r5, [r6], #4
    353e:	d8fa      	bhi.n	3536 <memset+0x6a>
    3540:	1f22      	subs	r2, r4, #4
    3542:	f022 0203 	bic.w	r2, r2, #3
    3546:	3204      	adds	r2, #4
    3548:	4413      	add	r3, r2
    354a:	f004 0403 	and.w	r4, r4, #3
    354e:	b12c      	cbz	r4, 355c <memset+0x90>
    3550:	b2c9      	uxtb	r1, r1
    3552:	441c      	add	r4, r3
    3554:	f803 1b01 	strb.w	r1, [r3], #1
    3558:	42a3      	cmp	r3, r4
    355a:	d1fb      	bne.n	3554 <memset+0x88>
    355c:	bc70      	pop	{r4, r5, r6}
    355e:	4770      	bx	lr
    3560:	4614      	mov	r4, r2
    3562:	4603      	mov	r3, r0
    3564:	e7c2      	b.n	34ec <memset+0x20>
    3566:	bf00      	nop

00003568 <___init_veneer>:
    3568:	f85f f000 	ldr.w	pc, [pc]	; 356c <___init_veneer+0x4>
    356c:	60001729 	.word	0x60001729

Disassembly of section .fini:

00003570 <_fini>:
    3570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3572:	bf00      	nop
